

// Java implementation of the approach  
class GFG  
{ 
      
    // recursive function to count set bits  
    public static int countSetBits(int n)  
    {  
  
        // base case  
        if (n == 0)  
            return 0;  
        else
  
            // if last bit set add 1 else add 0  
            return (n & 1) + countSetBits(n >> 1);  
    }  
      
    // Function that returns true if the  
    // binary representation of b can be  
    // generated by permuting the  
    // binary digits of a  
    static boolean isPossible(int a, int b)  
    {  
      
        // Find the count of set bits  
        // in both the integers  
        int cntA = countSetBits(a);  
        int cntB = countSetBits(b);  
      
        // If both the integers have  
        // equal count of set bits  
        if (cntA == cntB)  
            return true;  
        return false;  
    }  
      
    // Driver code  
    public static void main (String[] args) 
    {  
        int a = 3, b = 9;  
      
        if (isPossible(a, b))  
            System.out.println("Yes");  
        else
            System.out.println("No");  
    }  
} 
  
// This code is contributed by AnkitRai01 

