import java.io.*;import java.util.StringTokenizer; /** * 173A * θ(min(n, lcm(m,k))) time * θ(m + k) space * * @author artyom */public class _173A implements Runnable {    private BufferedReader in;    private StringTokenizer tok;     private Object solve() throws IOException {        int n = nextInt();        String a = nextToken(), b = nextToken();        int m = a.length(), k = b.length(), lcm = (k * m) / gcd(k, m), r = n % lcm, ac = 0, bc = 0, ar = 0, br = 0;        for (int i = 0, lim = Math.min(n, lcm); i < lim; i++) {            char ax = a.charAt(i % m), bx = b.charAt(i % k);            if (ax == 'R') {                if (bx == 'S') {                    ac++;                } else if (bx == 'P') {                    bc++;                }            } else if (ax == 'S') {                if (bx == 'P') {                    ac++;                } else if (bx == 'R') {                    bc++;                }            } else {                if (bx == 'R') {                    ac++;                } else if (bx == 'S') {                    bc++;                }            }            if (i + 1 == r) {                ar = ac;                br = bc;            }        }        ac = ac * (n / lcm) + ar;        bc = bc * (n / lcm) + br;        return bc + " " + ac;    }     private static int gcd(int x, int y) {        return y == 0 ? x : gcd(y, x % y);    }     //--------------------------------------------------------------    public static void main(String[] args) {        new _173A().run();    }     @Override    public void run() {        try {            in = new BufferedReader(new InputStreamReader(System.in));            tok = null;            System.out.print(solve());            in.close();        } catch (IOException e) {            System.exit(0);        }    }     private String nextToken() throws IOException {        while (tok == null || !tok.hasMoreTokens()) {            tok = new StringTokenizer(in.readLine());        }        return tok.nextToken();    }     private int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }}
