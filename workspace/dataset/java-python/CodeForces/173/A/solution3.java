import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.OutputStreamWriter;import java.math.BigDecimal;  import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.Locale;import java.util.Map.Entry;import java.util.PriorityQueue;import java.util.TreeSet;   public final class CF_Croc_2012_A{	static boolean verb=true;	static void log(Object X){if (verb) System.err.println(X);}	static void log(Object[] X){if (verb) {for (Object U:X) System.err.print(U+" ");System.err.println("");}}	static void log(int[] X){if (verb) {for (int U:X) System.err.print(U+" ");System.err.println("");}}	static void log(double[] X){if (verb) {for (double U:X) System.err.print(U+" ");System.err.println("");}}	static void logWln(Object X){if (verb) System.err.print(X);}	static void info(Object o){	System.out.println(o);}	static void output(Object o){outputWln(""+o+"\n");	}	static void outputWln(Object o){try {out.write(""+ o);} catch (Exception e) {}} 	static int pgcd(int a,int b){		if (a<b)			return pgcd(b,a);		while (b!=0) {			int c=a%b;			a=b;			b=c;		}		return a;	}	 	// Global vars	static BufferedWriter out;	static InputReader reader; 	 	static void process() throws Exception {   		out = new BufferedWriter(new OutputStreamWriter(System.out));		reader=new InputReader(System.in); 		int n=reader.readInt();					String A=reader.readString();		String B=reader.readString();				int m=A.length();		int k=B.length();		int p=pgcd(m,k);		int ppcm=(m*k)/p;		int num=n/ppcm;		int rem=n%ppcm;				int wina=0;		int winb=0;		int para=0;		int parb=0;		for (int i=0;i<ppcm;i++){			char a=A.charAt(i%m);			char b=B.charAt(i%k);			if ((a=='R' && b=='S')||(a=='S' && b=='P')||(a=='P' && b=='R')){				wina++;			}			if ((a=='S' && b=='R')||(a=='P' && b=='S')||(a=='R' && b=='P')){				winb++;			}			if (i==rem-1){				para=wina;				parb=winb;			}		}		wina*=num;		wina+=para;		winb*=num;		winb+=parb;		output(winb+" "+wina); 		try {			out.close();		}		catch (Exception e){}  	}  	public static void main(String[] args) throws Exception {		process(); 	} 	static final class InputReader {		private final InputStream stream;		private final byte[] buf = new byte[1024];		private int curChar;		private int numChars; 		public InputReader(InputStream stream) {			this.stream = stream;		} 		private int read() throws IOException {			if (curChar >= numChars) {				curChar = 0;				numChars = stream.read(buf);				if (numChars <= 0) {					return -1;				}			}			return buf[curChar++];		}  		public final String readString() throws IOException {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res=new StringBuilder();			do {				res.append((char)c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public final int readInt() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			int res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		} 		public final long readLong() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			long res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		}   		private boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}	}  }
