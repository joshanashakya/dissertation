import java.util.*;import java.io.*; public class LockoutTemplate {    public static int INF = Integer.MAX_VALUE/2;    public static void main(String[] args) throws IOException{        FastScanner f = new FastScanner();        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));        StringTokenizer st = new StringTokenizer(f.nextLine());        int n = Integer.parseInt(st.nextToken());        int m = Integer.parseInt(st.nextToken());        char[][] arr = new char[n][m];        for(int i = 0; i < n; i++){            String str = f.nextLine();            arr[i] = str.toCharArray();        }         int[][][] minDists = new int[n][m][4];        for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                Arrays.fill(minDists[i][j], INF);            }        }        minDists[n-1][m-1][3] = 0;        ArrayDeque<State> pq = new ArrayDeque<State>();        pq.add(new State(n-1, m-1, 3, 0));        while(!pq.isEmpty()){            State curr = pq.poll();            int r = curr.r;            int c = curr.c;            int dir = curr.dir;            int dist = curr.dist;            if(r != 0 && (dir == 0 || arr[r][c] == '#')){                int nd;                if(dir == 0){                    nd = curr.dist;                }else{                    nd = curr.dist+1;                }                if(nd < minDists[r-1][c][0]){                    minDists[r-1][c][0] = nd;                    if(dir == 0) pq.addFirst(new State(r-1, c, 0, nd));                    else pq.addLast(new State(r-1, c, 0, nd));                }            }            if(r != n-1 && (dir == 2 || arr[r][c] == '#')){                int nd;                if(dir == 2){                    nd = curr.dist;                }else{                    nd = curr.dist+1;                }                if(nd < minDists[r+1][c][2]){                    minDists[r+1][c][2] = nd;                    if(dir == 2) pq.addFirst(new State(r+1, c, 2, nd));                    else pq.addLast(new State(r+1, c, 2, nd));                }            }            if(c != 0 && (dir == 3 || arr[r][c] == '#')){                int nd;                if(dir == 3){                    nd = curr.dist;                }else{                    nd = curr.dist+1;                }                if(nd < minDists[r][c-1][3]){                    minDists[r][c-1][3] = nd;                    if(dir == 3) pq.addFirst(new State(r, c-1, 3, nd));                    else pq.addLast(new State(r, c-1, 3, nd));                }            }            if(c != m-1 && (dir == 1 || arr[r][c] == '#')){                int nd;                if(dir == 1){                    nd = curr.dist;                }else{                    nd = curr.dist+1;                }                if(nd < minDists[r][c+1][1]){                    minDists[r][c+1][1] = nd;                    if(dir == 1) pq.addFirst(new State(r, c+1, 1, nd));                    else pq.addLast(new State(r, c+1, 1, nd));                }            }        }        int ans = minDists[0][0][3];        if(arr[0][0] == '#') ans = Math.min(ans, Math.min(minDists[0][0][0]+1, Math.min(minDists[0][0][1]+1, minDists[0][0][2]+1)));        if(ans >= 10000000){            out.println(-1);        }else{            out.println(ans);        }             out.close();    }    static class State implements Comparable<State>{        public int r;        public int c;        public int dir;        public int dist;        public State(int r, int c, int dir, int dist){            this.r=r;            this.c=c;            this.dir=dir;            this.dist = dist;        }        public int compareTo(State s){            return dist-s.dist;        }    }    static class Point{        public int r;        public int c;        public Point(int r, int c){            this.r=r;            this.c=c;        }    }    static class FastScanner {        private int BS = 1 << 16;        private char NC = (char) 0;        private byte[] buf = new byte[BS];        private int bId = 0, size = 0;        private char c = NC;        private double cnt = 1;        private BufferedInputStream in;         public FastScanner() {            in = new BufferedInputStream(System.in, BS);        }         public FastScanner(String s) {            try {                in = new BufferedInputStream(new FileInputStream(new File(s)), BS);            } catch (Exception e) {                in = new BufferedInputStream(System.in, BS);            }        }         private char getChar() {            while (bId == size) {                try {                    size = in.read(buf);                } catch (Exception e) {                    return NC;                }                if (size == -1) return NC;                bId = 0;            }            return (char) buf[bId++];        }         public int nextInt() {            return (int) nextLong();        }         public int[] nextInts(int N) {            int[] res = new int[N];            for (int i = 0; i < N; i++) {                res[i] = (int) nextLong();            }            return res;        }         public long[] nextLongs(int N) {            long[] res = new long[N];            for (int i = 0; i < N; i++) {                res[i] = nextLong();            }            return res;        }         public long nextLong() {            cnt = 1;            boolean neg = false;            if (c == NC) c = getChar();            for (; (c < '0' || c > '9'); c = getChar()) {                if (c == '-') neg = true;            }            long res = 0;            for (; c >= '0' && c <= '9'; c = getChar()) {                res = (res << 3) + (res << 1) + c - '0';                cnt *= 10;            }            return neg ? -res : res;        }         public double nextDouble() {            double cur = nextLong();            return c != '.' ? cur : cur + nextLong() / cnt;        }         public double[] nextDoubles(int N) {            double[] res = new double[N];            for (int i = 0; i < N; i++) {                res[i] = nextDouble();            }            return res;        }         public String next() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c > 32) {                res.append(c);                c = getChar();            }            return res.toString();        }         public String nextLine() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c != '\n') {                res.append(c);                c = getChar();            }            return res.toString();        }         public boolean hasNext() {            if (c > 32) return true;            while (true) {                c = getChar();                if (c == NC) return false;                else if (c > 32) return true;            }        }    }     static void ASSERT(boolean assertion, String message) {        if (!assertion) throw new AssertionError(message);    }     static void ASSERT(boolean assertion) {        if (!assertion) throw new AssertionError();    }}
