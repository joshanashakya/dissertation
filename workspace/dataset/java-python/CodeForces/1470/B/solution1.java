import java.util.*;import java.io.*; public class Main {    public static void main(String args[]) {new Main().run();}     FastReader in = new FastReader();    PrintWriter out = new PrintWriter(System.out);    int[] rec=new int[1000001];    void run(){        for(int i=0;i<1000001;i++){            rec[i]=i;        }        for(int i=2;i*i<1000001;i++){            if(rec[i]!=i)continue;            for(int j=i;j*i<1000001;j++){                rec[i*j]=i;            }        }        for(int q=ni();q>0;q--){            work();        }        out.flush();    }    long mod=1000000007;    long gcd(long a,long b) {        return a==0?b:gcd(b%a,a);    }     void work() {        int n=ni();        int[] A=nia(n);        HashMap<Integer,Integer> map=new HashMap<>();        for(int a:A){            int v=1;            while(rec[a]!=1){                int c=0;                int p=rec[a];                while(a%p==0){                    c++;                    a/=p;                }                if(c%2==1){                    v*=p;                }            }            map.put(v,map.getOrDefault(v,0)+1);        }        int c1=0,c2=0;        for(int key:map.keySet()){            int v=map.get(key);            if(v>c1){                c1=v;            }            if(v%2==0||key==1){                c2+=v;            }        }        for(int t=ni();t>0;t--){            long w=nl();            if(w==0){                out.println(c1);            }else{                out.println(Math.max(c1,c2));            }        }    }     //input    @SuppressWarnings("unused")    private ArrayList<Integer>[] ng(int n, int m) {        ArrayList<Integer>[] graph=(ArrayList<Integer>[])new ArrayList[n];        for(int i=0;i<n;i++) {            graph[i]=new ArrayList<>();        }        for(int i=1;i<=m;i++) {            int s=in.nextInt()-1,e=in.nextInt()-1;            graph[s].add(e);            graph[e].add(s);        }        return graph;    }     private ArrayList<long[]>[] ngw(int n, int m) {        ArrayList<long[]>[] graph=(ArrayList<long[]>[])new ArrayList[n];        for(int i=0;i<n;i++) {            graph[i]=new ArrayList<>();        }        for(int i=1;i<=m;i++) {            long s=in.nextLong()-1,e=in.nextLong()-1,w=in.nextLong();            graph[(int)s].add(new long[] {e,w});            graph[(int)e].add(new long[] {s,w});        }        return graph;    }     private int ni() {        return in.nextInt();    }     private long nl() {        return in.nextLong();    }     private String ns() {        return in.next();    }     private long[] na(int n) {        long[] A=new long[n];        for(int i=0;i<n;i++) {            A[i]=in.nextLong();        }        return A;    }    private int[] nia(int n) {        int[] A=new int[n];        for(int i=0;i<n;i++) {            A[i]=in.nextInt();        }        return A;    }} class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br=new BufferedReader(new InputStreamReader(System.in));    }      public String next()    {        while(st==null || !st.hasMoreElements())//回车，空行情况        {            try {                st = new StringTokenizer(br.readLine());            } catch (IOException e) {                e.printStackTrace();            }        }        return st.nextToken();    }     public int nextInt()    {        return Integer.parseInt(next());    }     public long nextLong()    {        return Long.parseLong(next());    }}
