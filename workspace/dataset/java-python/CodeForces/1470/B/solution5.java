import java.io.*;import java.util.*;import java.util.Map.Entry;Â public class Main{	static int[]lp;	static void sieveLinear(int N)	{		ArrayList<Integer> primes = new ArrayList<Integer>();		lp = new int[N + 1];								//lp[i] = least prime divisor of i		for(int i = 2; i <= N; ++i)		{			if(lp[i] == 0)			{				primes.add(i);				lp[i] = i;			}			int curLP = lp[i];			for(int p: primes)//all primes smaller than or equal my lowest prime divisor				if(p > curLP || p * 1l * i > N)					break;				else					lp[p * i] = p;		}	}		static void main() throws Exception{		int n=sc.nextInt();		int[]in=sc.intArr(n);		HashMap<Integer, Integer>map=new HashMap<Integer, Integer>();		int ans0=0;		for(int i=0;i<n;i++) {			int newx=1;			while(in[i]>1) {				int cnt=0;				int curp=lp[in[i]];				while(in[i]%curp==0) {					cnt^=1;					in[i]/=curp;				}				if(cnt==1) {					newx*=curp;				}			}			int occ=map.getOrDefault(newx, 0)+1;			map.put(newx, occ);			ans0=Math.max(ans0, occ);		}		int ans1=map.getOrDefault(1, 0);		for(Entry<Integer, Integer>e:map.entrySet()) {			if(e.getKey()!=1 && (e.getValue()&1)==0) {				ans1+=e.getValue();			}		}		ans1=Math.max(ans1, ans0);		int q=sc.nextInt();		while(q-->0) {			long cur=sc.nextLong();			pw.println(cur==0?ans0:ans1);		}	}	public static void main(String[] args) throws Exception{		sc=new MScanner(System.in);		pw = new PrintWriter(System.out);		sieveLinear(1000000);		int tc=1;		tc=sc.nextInt();		while(tc-->0)			main();		pw.flush();	}	static PrintWriter pw;	static MScanner sc;	static class MScanner {		StringTokenizer st;		BufferedReader br;		public MScanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		}	 		public MScanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		}	 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		public int[] intArr(int n) throws IOException {	        int[]in=new int[n];for(int i=0;i<n;i++)in[i]=nextInt();	        return in;		}		public long[] longArr(int n) throws IOException {	        long[]in=new long[n];for(int i=0;i<n;i++)in[i]=nextLong();	        return in;		}		public int[] intSortedArr(int n) throws IOException {	        int[]in=new int[n];for(int i=0;i<n;i++)in[i]=nextInt();	        shuffle(in);	        Arrays.sort(in);	        return in;		}		public long[] longSortedArr(int n) throws IOException {	        long[]in=new long[n];for(int i=0;i<n;i++)in[i]=nextLong();	        shuffle(in);	        Arrays.sort(in);	        return in;		}		public Integer[] IntegerArr(int n) throws IOException {	        Integer[]in=new Integer[n];for(int i=0;i<n;i++)in[i]=nextInt();	        return in;		}		public Long[] LongArr(int n) throws IOException {	        Long[]in=new Long[n];for(int i=0;i<n;i++)in[i]=nextLong();	        return in;		}		public String nextLine() throws IOException {			return br.readLine();		}	 		public int nextInt() throws IOException {			return Integer.parseInt(next());		}	 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		}	 		public char nextChar() throws IOException {			return next().charAt(0);		}	 		public long nextLong() throws IOException {			return Long.parseLong(next());		}	 		public boolean ready() throws IOException {			return br.ready();		}	 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}			}	static void shuffle(int[]in) {		for(int i=0;i<in.length;i++) {			int idx=(int)(Math.random()*in.length);			int tmp=in[i];			in[i]=in[idx];			in[idx]=tmp;		}	}	static void shuffle(long[]in) {		for(int i=0;i<in.length;i++) {			int idx=(int)(Math.random()*in.length);			long tmp=in[i];			in[i]=in[idx];			in[idx]=tmp;		}	}}
