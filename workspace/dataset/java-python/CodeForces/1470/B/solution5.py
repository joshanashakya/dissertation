# ------------------- fast io --------------------import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192 class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------- fast io --------------------Â import math;from bisect import bisect_left as bsldef main():    primes=[2]    for s in range(3,int(math.sqrt(10**6))+2,2):        ind=min(bsl(primes,int(math.sqrt(s))+1),len(primes)-1)        broke=False        for i in range(ind+1):            if s%primes[i]==0:                broke=True;break        if broke==False:            primes.append(s)    for j in range(int(input())):        n=int(input())        vals=list(map(int,input().split()))        #squares vs non squares        sq=[];nsq=[]        for s in range(n):            if int(math.sqrt(vals[s]))**2==vals[s]:                sq.append(vals[s])            else:                nsq.append(vals[s])        dict1={};sec0=len(sq);sec1=len(sq)        #sort it by the minimum non even powered prime factor        for i in nsq:            #find its prime factors and multiplicity            temp=i;ind=min(bsl(primes,math.ceil(math.sqrt(i))+1),len(primes)-1)            tt=[]            for s in range(ind+1):                if temp%primes[s]==0:                    count=0                    while temp%primes[s]==0:                        temp//=primes[s];count+=1                    if count%2==1:                        tt.append(primes[s])            if temp!=1:                tt.append(temp)            tt=tuple(tt)            if not(tt in dict1):                dict1[tt]=1            else:                dict1[tt]+=1            sec0=max(dict1[tt],sec0)        for i in dict1.values():            if i%2==0:                sec1+=i        if len(dict1)>0:            sec1=max(sec1,max(dict1.values()))        #x*y is perf square        q=int(input())        for s in range(q):            w=int(input())            if w==0:                print(sec0)            else:                print(sec1)main()
