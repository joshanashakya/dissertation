def binR(L, R, f, k):    while R - L > 1:        M = (L + R) // 2        if f(M, k): R = M        else: L = M    return R def binL(L, R, f, k):    while R - L > 1:        M = (L + R) // 2        if f(M, k): L = M        else: R = M    return L def below(P, x1, y1, x2, y2):    f1 = x1 <= P[0] <= x2    f2 = y1 <= P[1] <= y2    return f1 and f2 def intersect(x1, y1, x2, y2, x3, y3, x4, y4):    for P in ((x1, y1), (x1, y2), (x2, y1), (x2, y2)):        if below(P, x3, y3, x4, y4):            return True    for P in ((x3, y3), (x3, y4), (x4, y3), (x4, y4)):        if below(P, x1, y1, x2, y2):            return True    return False def check(x1, y1, x2, y2, x3, y3, x4, y4):    if x1 > x2 or x3 > x4 or y1 > y2 or y3 > y4: return False    if intersect(x1, y1, x2, y2, x3, y3, x4, y4): return False    print('?', x1, y1, x2, y2)    f1 = int(input()) == 1    print('?', x3, y3, x4, y4)    f2 = int(input()) == 1    return f1 and f2 def f1(x, k): print('?', x, 1, n, n); return int(input()) >= kdef f2(x, k): print('?', 1, 1, x, n); return int(input()) >= kdef f3(y, k): print('?', 1, y, n, n); return int(input()) >= kdef f4(y, k): print('?', 1, 1, n, y); return int(input()) >= k n = int(input())xo = binL(1, n + 1, f1, 2), binL(1, n + 1, f1, 1)xc = binR(0, n, f2, 2), binR(0, n, f2, 1)yo = binL(1, n + 1, f3, 2), binL(1, n + 1, f3, 1)yc = binR(0, n, f4, 2), binR(0, n, f4, 1) rng = (0, 0), (0, 1), (1, 0), (1, 1)for i1, i2 in rng:    for j1, j2 in rng:        x1, x3 = xo[i1], xo[1 - i1]        x2, x4 = xc[i2], xc[1 - i2]        y1, y3 = yo[j1], yo[1 - j1]        y2, y4 = yc[j2], yc[1 - j2]        if check(x1, y1, x2, y2, x3, y3, x4, y4):            print('!', x1, y1, x2, y2, x3, y3, x4, y4)            exit()
