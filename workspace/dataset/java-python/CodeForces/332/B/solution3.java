import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class Main {     public static void main(String[] args) throws IOException {        //Scanner sc = new Scanner(System.in);        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer row = new StringTokenizer(br.readLine().trim());         int n = Integer.parseInt(row.nextToken().trim());        int k = Integer.parseInt(row.nextToken().trim());         long[] nums = new long[n + 1];         StringTokenizer line = new StringTokenizer(br.readLine().trim());        for (int i = 1; i <= n; i++) {            nums[i] = Integer.parseInt(line.nextToken().trim());            nums[i] += nums[i - 1];        }          long maxTotal = 0;        long aIndex = 0;        long bIndex = 0;        long[] sum = new long[n - k + 1 + 1];        for (int i = 1; i <= n - k + 1; i++) { // a's move            long aSum = nums[i + k - 1] - nums[i - 1];            sum[i] = aSum;        }         //now need to find the max for each index excluding the elements in window         long[] maxNum = new long[n - k + 1 + 1];        long[] bPos = new long[n - k + 1 + 1];        long highest = sum[n - k + 1];         for(int i = n - k + 1; i >= 1; i--){            maxNum[i] = Math.max(highest, sum[i]);            highest = maxNum[i];            if(i == n - k + 1){                bPos[i] = i;                continue;            }            if(sum[i] < maxNum[i]){                bPos[i] = bPos[i + 1];            } else {                bPos[i] = i;            }        }         for(int i = 1; i <= n - (2 * k) + 1; i++){            if(sum[i] + maxNum[i + k] > maxTotal){                aIndex = i;                bIndex = bPos[i + k];                maxTotal = sum[i] + maxNum[i + k];            }        }         System.out.println(aIndex + " " + bIndex);      }}
