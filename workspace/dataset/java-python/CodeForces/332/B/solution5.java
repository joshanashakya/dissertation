import java.io.*;import java.util.*;import java.lang.*; public class B { 	public static void main(String[] args) {		FastReader in = new FastReader();		int n = in.nextInt(),k = in.nextInt();		int[] arr = in.readArray(n);		long[] pre = new long[n-k+1];		Pair[] dp = new Pair[n-k+1];		long ans = 0;		for(int i=0;i<k;i++) {			ans+=arr[i];		}		pre[0] = ans;		for(int i=1;i<=n-k;i++) {			ans-=arr[i-1];			ans+=arr[i+k-1];			pre[i] = ans;		}		dp[dp.length-1] = new Pair(pre[n-k],n-k+1);		for(int i=pre.length-2;i>=0;i--) {			if(pre[i]>=dp[i+1].a)				dp[i] = new Pair(pre[i],i+1);			else				dp[i] = dp[i+1];		}		ans = 0;		int first =-1,second = -1;		for(int i=0;i<=n-2*k;i++) {			if(ans<pre[i]+dp[i+k].a) {				ans = pre[i]+dp[i+k].a;				first = i+1;				second = (int)dp[i+k].b;			}		}		System.out.println(first+" "+second);	} 	static final Random random=new Random();	//	static void ruffleSort(Pair[] a) {	//		int n=a.length;//shuffle, then sort 	//		for (int i=0; i<n; i++) {	//			int oi=random.nextInt(n);	//			Pair temp=a[oi];	//			a[oi]=a[i]; a[i]=temp;	//		}	//		Arrays.sort(a);	//	}	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}	static void ruffleSort(char[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			char temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}	static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException  e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		}  		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}	}}class Pair implements Comparable<Pair>{    long a;    long b;    public Pair(long a, long b) {        this.a = a;        this.b = b;    }    public int compareTo(Pair o) {        if(this.a==o.a)            return (int)(this.b - o.b);        return (int)(this.a - o.a);    }   }
