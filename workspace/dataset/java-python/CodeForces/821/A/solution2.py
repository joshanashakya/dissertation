import itertoolsimport bisectimport mathfrom collections import *import osimport sysfrom io import BytesIO, IOBase ii = lambda: int(input())lmii = lambda: list(map(int, input().split()))slmii = lambda: sorted(map(int, input().split()))li = lambda: list(input())mii = lambda: map(int, input().split())msi = lambda: map(str, input().split())  def main():    # for _ in " " * int(input()):    n=ii()    a = []    for i in range(n):        a.append(lmii())    f = 0    for i in range(n):        for j in range(n):            if a[i][j] == 1:                f += 1    if f == n*1000000000:        print("No")    else:        for i in range(n):            for j in range(n):                f = 0                if a[i][j] != 1:                    for k in range(n):                        for l in range(n):                            if a[k][j] + a[i][l] == a[i][j]:                                f = 1                                break                        if f == 1:                            break                    if f == 0:                        print("No")                        exit(0)        print("Yes")     pass  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == "__main__":    main()
