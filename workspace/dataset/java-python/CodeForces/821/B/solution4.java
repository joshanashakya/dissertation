import java.io.*;import java.util.*; public class Codeforces { 	public static void  main(String...args) {		InputReader sc = new InputReader();		PrintWriter out = new PrintWriter(System.out);		Thread th = new Thread(null, new Runnable(){public void run(){new Solver().solve(sc,out);}},"Solver",1<<24);		try{			th.start();			th.join();		} catch(InterruptedException e){}		out.close();	}} class Solver { 	public long getSum(long x)	{		if(x==-1) return 0;		return x*(x+1)/2;	} 	public void solve(InputReader sc, PrintWriter out) {		long m = sc.nextInt();		long b = sc.nextInt();		long ans = 0;		for(long i=0;i<b;i++)		{			long j = m*(b-i);			long sum = 0;			for(long k=i;k>=0;k--)			{				sum += (getSum(k+j)-getSum(k-1));			}			ans = Math.max(ans,sum);		}		ans = Math.max(ans,getSum(b-1));		out.println(ans);	}}	 // class Comp implements Comparator<Pair> {//     @Override//     public int compare(Pair o1, Pair o2) {//         if(o1.ff()/1000 != o2.ff()/1000) return (o1.ff()/1000)-(o2.ff()/1000);//         else return o1.ss()-o2.ss();//     }// } // class Pair{ // 	public int x1,y1,x2,y2;// 	public Pair(int x,int y,int z,int w) {// 		this.x1 = x;// 		this.y1 = y;// 		this.x2 = z;// 		this.y2 = w;// 	}// 	@Override// 	public boolean equals(Object obj) {// 		if ((this.x1 == (Pair)obj.x1)&&(this.y1 == (Pair)obj.y1)&&(this.x2 == (Pair)obj.x2)&&(this.y2 == (Pair)obj.y2)) return true;//    		return false;//    }// } class Reader {    private InputStream stream;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;    private SpaceCharFilter filter;        public Reader(InputStream stream) {        this.stream = stream;    }        public int read() {        if (numChars == -1) {            throw new InputMismatchException();        }        if (curChar >= numChars) {            curChar = 0;            try {                numChars = stream.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (numChars <= 0) {                return -1;            }        }        return buf[curChar++];    }        public int nextInt() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }        public String readString() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isSpaceChar(c));        return res.toString();    }        public double nextDouble() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        double res = 0;        while (!isSpaceChar(c) && c != '.') {            if (c == 'e' || c == 'E') {                return res * Math.pow(10, nextInt());            }            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        }        if (c == '.') {            c = read();            double m = 1;            while (!isSpaceChar(c)) {                if (c == 'e' || c == 'E') {                    return res * Math.pow(10, nextInt());                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                m /= 10;                res += (c - '0') * m;                c = read();            }        }        return res * sgn;    }        public long nextLong() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        long res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }        public boolean isSpaceChar(int c) {        if (filter != null) {            return filter.isSpaceChar(c);        }        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }        public String next() {        return readString();    }        public interface SpaceCharFilter {        public boolean isSpaceChar(int ch);    }} class InputReader{		final InputStream stream;		final byte[] buf = new byte[8192];		int curChar, numChars;		SpaceCharFilter filter;		public InputReader(){			this.stream = System.in;		}		public int read(){			if(numChars == -1) throw new InputMismatchException();			if(curChar >= numChars){				curChar = 0;				try{					numChars = stream.read(buf);				} catch(IOException e){					throw new InputMismatchException();				}				if(numChars <= 0) return -1;			}			return buf[curChar++];		}		public int nextInt(){			int c = read();			while(isSpaceChar(c)) c = read();			int sgn = 1;			if(c == '-'){				sgn = -1;				c = read();			}			int res = 0;			do{				if(c<'0' || c>'9') throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while(!isSpaceChar(c));			return res*sgn;		}		public long nextLong(){			int c = read();			while(isSpaceChar(c)) c = read();			int sgn = 1;			if(c == '-'){				sgn = -1;				c = read();			}			long res = 0;			do{				if(c<'0' || c>'9') throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while(!isSpaceChar(c));			return res*sgn;		}		public String next(){			int c = read();			while(isSpaceChar(c)) c = read();			StringBuilder res = new StringBuilder();			do{				res.appendCodePoint(c);				c = read();			}while(!isSpaceChar(c));			return res.toString();		}		public boolean isSpaceChar(int c){			if(filter != null) return filter.isSpaceChar(c);			return c==' ' || c=='\n' || c=='\r' || c=='\t' || c==-1;		}		public interface SpaceCharFilter{			public boolean isSpaceChar(int ch);		}}
