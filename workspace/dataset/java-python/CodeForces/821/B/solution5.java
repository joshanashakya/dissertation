import java.util.*;import java.io.*; public class tr0 {	static PrintWriter out;	static StringBuilder sb;	static int mod = 998244353;	static int inf = (int) 1e18;	static int[] col;	static int n, m;	static ArrayList<Integer>[] ad;	static long[] memo, cnt[];	static ArrayList<Integer> h;	static int[] pos, ones;	static char[][] g;	static boolean[][] vis;	static boolean f; 	public static void main(String[] args) throws Exception {		Scanner sc = new Scanner(System.in);		out = new PrintWriter(System.out);		int m = sc.nextInt();		int b = sc.nextInt();		long ans = 0;		for (int i = 0; i <= b; i++) {			int y = (b-i)*m;			long tem = y * 1l * (i +1) * (y + 1) / 2;			tem += (y + 1) * 1l * i * (i + 1) / 2;			ans = Math.max(ans, tem);	//		System.out.println(tem+" "+y);		}		System.out.println(ans);		out.flush();	} // 3 3	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		} 		public Scanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public char nextChar() throws IOException {			return next().charAt(0);		} 		public Long nextLong() throws IOException {			return Long.parseLong(next());		} 		public int[] nextArrInt(int n) throws IOException {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		public long[] nextArrLong(int n) throws IOException {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		public boolean ready() throws IOException {			return br.ready();		} 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}	}}
