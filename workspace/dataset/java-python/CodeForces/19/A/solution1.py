import sys from collections import defaultdict POINTS_WIN = 3POINTS_DRAW = 1POINTS_LOSS = 0  def sort_order(item: dict) -> tuple:    return -item["points"], -item["score_diff"], -item["score"]  def standings(teams: list, games: list) -> list:    teams_data = {t: defaultdict(int, {"name": t}) for t in teams}    for lt, rt, ls, rs in games:        teams_data[lt]["score"] += ls        teams_data[rt]["score"] += rs         if ls == rs:            teams_data[lt]["points"] += POINTS_DRAW            teams_data[rt]["points"] += POINTS_DRAW        elif ls < rs:            teams_data[lt]["points"] += POINTS_LOSS            teams_data[lt]["score_diff"] -= rs - ls            teams_data[rt]["points"] += POINTS_WIN            teams_data[rt]["score_diff"] += rs - ls        else:            teams_data[lt]["points"] += POINTS_WIN            teams_data[lt]["score_diff"] += ls - rs            teams_data[rt]["points"] += POINTS_LOSS            teams_data[rt]["score_diff"] -= ls - rs     return list(sorted(teams_data.values(), key=sort_order))  def parse_teams(n: int) -> list:    teams = []    for i in range(n):        teams.append(input())    return teams  def parse_games(n: int) -> list:    games = []    for _ in range(int(n * (n - 1) / 2)):        line = sys.stdin.readline().strip()        teams, scores = line.split(" ")        left_team, right_team = teams.split("-")        left_score, right_score = map(int, scores.split(":"))        games.append((left_team, right_team, left_score, right_score))     return games  if __name__ == "__main__":    n = int(input())    teams = parse_teams(n)    games = parse_games(n)     # print("teams", teams)    # print("games", games)     qualified = standings(teams, games)[: int(len(teams) / 2)]    for team in sorted([t["name"] for t in qualified]):        print(team)
