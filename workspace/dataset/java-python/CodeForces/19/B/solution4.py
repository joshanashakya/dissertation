# ------------------- fast io --------------------import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------- fast io --------------------from math import gcd, ceil def pre(s):    n = len(s)    pi = [0] * n    for i in range(1, n):        j = pi[i - 1]        while j and s[i] != s[j]:            j = pi[j - 1]        if s[i] == s[j]:            j += 1        pi[i] = j    return pi  def prod(a):    ans = 1    for each in a:        ans = (ans * each)    return ans def lcm(a, b): return a * b // gcd(a, b)  def binary(x, length=16):    y = bin(x)[2:]    return y if len(y) >= length else "0" * (length - len(y)) + y def knapsack(limit, values, weights):    n = len(weights)    dp = [[0]*(n+1) for i in range(limit+1)]    for i in range(1, limit+1):        for j in range(1, n+1):            if i < weights[j-1]:                dp[i][j] = dp[i][j-1]            else:                dp[i][j] = max(dp[i-weights[j-1]][j-1] + values[j-1], dp[i][j-1])    return dp[limit][n] from math import inf for _ in range(int(input()) if not True else 1):    n = int(input())    #n, k = map(int, input().split())    #a, b = map(int, input().split())    #c, d = map(int, input().split())    #a = list(map(int, input().split()))    #b = list(map(int, input().split()))    #s = input()    time = [0]*n    vals = [0]*n    for i in range(n):        x, y = map(int, input().split())        time[i] = x + 1        vals[i] = y    dp = [inf]*(n+1)    dp[0] = 0    for i in range(1,n+1):        for j in range(n, 0, -1):            if j >= time[i-1]:                dp[j] = min(dp[j], dp[j-time[i-1]]+vals[i-1])            else:                dp[j] = min(dp[j],vals[i-1])    print(dp[n])
