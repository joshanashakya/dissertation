import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;      int N;    int[] t;    int[] c;    void run(FastScanner in, PrintWriter out) {        N = in.nextInt();        t = new int[N];        c = new int[N];        for (int i = 0; i < N; i++) {            t[i] = in.nextInt();            c[i] = in.nextInt();        }         long[][] dp = new long[N+1][4005];         for (long[] d : dp) Arrays.fill(d, Long.MAX_VALUE);         int d = 2000;        dp[0][d] = 0;         for (int i = 0; i < N; i++) {             for (int prevBal = 1; prevBal < 4005; prevBal++) {                if (dp[i][prevBal] == Long.MAX_VALUE) continue;                // use one bal to steal                dp[i+1][prevBal-1] = Math.min(dp[i+1][prevBal-1], dp[i][prevBal]);            }             // pay            for (int prevBal = 1; prevBal+t[i] < 4005; prevBal++) {                if (dp[i][prevBal] == Long.MAX_VALUE) continue;                dp[i+1][prevBal+t[i]] = Math.min(dp[i+1][prevBal+t[i]], dp[i][prevBal] + c[i]);            }        }         long min = Long.MAX_VALUE;        for (int i = d; i < 4005; i++) {            min = Math.min(min, dp[N][i]);        }        out.println(min);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
