import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.StringTokenizer;   Â public class temp4 {	static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } 	/*	static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     } */	static class Print	{	    private final BufferedWriter bw;	    public Print()	    {	        bw=new BufferedWriter(new OutputStreamWriter(System.out));	    }	    public void print(String str)throws IOException	    {	        bw.append(str);	    }	    public void println(String str)throws IOException	    {	        print(str);	        bw.append("\n");	    }	    public void close()throws IOException	    {	        bw.close();	    }} 							public static void main(String[] args) throws IOException {						FastReader scn=new FastReader();			Print pr=new Print();			int n=scn.nextInt(),k=scn.nextInt();			String s=scn.next();			int[] lps=new int[n];			computeLPSArray(s, n, lps); 			int t=n-lps[n-1];			String temp=s.substring(lps[n-1]);						for(int i=1;i<k;i++){				s+=temp;			}			System.out.println(s);						   			   			  					}	  public static void computeLPSArray(String pat, int M, int lps[]) 	    { 	        // length of the previous longest prefix suffix 	        int len = 0; 	        int i = 1; 	        lps[0] = 0; // lps[0] is always 0 	  	        // the loop calculates lps[i] for i = 1 to M-1 	        while (i < M) { 	            if (pat.charAt(i) == pat.charAt(len)) { 	                len++; 	                lps[i] = len; 	                i++; 	            } 	            else // (pat[i] != pat[len]) 	            { 	                // This is tricky. Consider the example. 	                // AAACAAAA and i = 7. The idea is similar 	                // to search step. 	                if (len != 0) { 	                    len = lps[len - 1]; 	  	                    // Also, note that we do not increment 	                    // i here 	                } 	                else // if (len == 0) 	                { 	                    lps[i] = len; 	                    i++; 	                } 	            } 	        } 	    } 			}	
