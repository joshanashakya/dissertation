import java.io.*;import java.util.*; public class Main {    public static void main(String[] args) {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=input.nextInt();        while(T-->0)        {            String s=input.next();            String c=input.next();            if(compare(s,c)==-1)            {                out.println(s);            }            else            {                int flag=0;                int l=0,r=0;                char ch[]=s.toCharArray();                Arrays.sort(ch);                int index=-1;                for(int i=0;i<s.length();i++)                {                    if(s.charAt(i)!=ch[i])                    {                        index=i;                        break;                    }                }                char ch1[]=s.toCharArray();                if(index!=-1)                {                    char t=ch[index];                    int in=0;                    for(int i=index+1;i<s.length();i++)                    {                        if(s.charAt(i)==t)                        {                            in=i;                        }                    }                    char temp=ch1[index];                    ch1[index]=ch1[in];                    ch1[in]=temp;                }                if(compare(String.copyValueOf(ch1),c)==-1)                {                    out.println(ch1);                }                else                {                    out.println("---");                }            }        }        out.close();    }    public static int compare(String s,String c)    {        int f=-2;        for(int i=0;i<Math.min(s.length(),c.length());i++)        {            if(s.charAt(i)>c.charAt(i))            {                f=1;                break;            }            if(s.charAt(i)<c.charAt(i))            {                f=-1;                break;            }        }        if(f==-1 || f==1)        {            return f;        }        else        {            if(s.length()==c.length())            {                return 0;            }            else if(s.length()>c.length())            {                return 1;            }            else            {                return -1;            }        }    }    public static void mergeSort(int a[],int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort(a,p,q);            mergeSort(a,q+1,r);            merge(a,p,q,r);        }    }    public static void merge(int a[],int p,int q,int r)    {        int n1=q-p+2;        int L[]=new int[n1];        int n2=r-q+1;        int R[]=new int[n2];        for(int i=p;i<=q;i++)        {            L[i-p]=a[i];        }        L[n1-1]=Integer.MAX_VALUE;        for(int i=q+1;i<=r;i++)        {            R[i-q-1]=a[i];        }        R[n2-1]=Integer.MAX_VALUE;        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L[x]<=R[y])            {                a[i]=L[x];                x++;            }            else            {                a[i]=R[y];                y++;            }        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
