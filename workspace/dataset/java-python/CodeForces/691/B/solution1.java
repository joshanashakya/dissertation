import java.util.*;import java.util.Scanner;import java.io.*;import javax.lang.model.util.ElementScanner6; import static java.lang.System.out;import java.util.Stack;import java.util.Queue;import java.util.LinkedList; public class B691{            public static void main(String args[])    {           FastReader in=new FastReader();        PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        int tc=1;             //tc=in.nextInt();        while(tc-->0)        {            char ch[]=in.nextLine().toCharArray();            			HashMap<Character,Character> hm=new HashMap<>();						hm.put('A','A');			hm.put('b','d');			hm.put('d','b');			hm.put('H','H');			hm.put('I','I');			hm.put('M','M');			hm.put('O','O');			hm.put('o','o');			hm.put('p','q');			hm.put('q','p');			hm.put('U','U');			hm.put('V','V');			hm.put('v','v');			hm.put('W','W');			hm.put('w','w');			hm.put('T','T');			hm.put('X','X');			hm.put('x','x');			hm.put('Y','Y');			int n=ch.length;			if(n%2==1)			{				int flag=1;				if(n==1)				{					if(hm.containsKey(ch[0]))					{						if(hm.get(ch[0])!=ch[0])						{							flag=0;											}					}					else					{						flag=0;										}				}				else				{					for(int i=n/2;i<n;i++)					{						if(hm.containsKey(ch[i]))						{							if(hm.get(ch[i])!=ch[n/2+n/2-i])							{								flag=0;								break;							}						}						else						{							flag=0;							break;						}					}				}				if(flag==1)pr.println("TAK");				else pr.println("NIE");						}			else			{				int flag=1;				for(int i=n/2;i<n;i++)				{					if(hm.containsKey(ch[i]))					{						if(hm.get(ch[i])!=ch[n/2+n/2-i-1])						{							flag=0;							break;						}					}					else					{						flag=0;						break;					}				}				if(flag==1)pr.println("TAK");				else pr.println("NIE");			}			        }	        pr.flush();    }           static void sort(long[] a) {		ArrayList<Long> l = new ArrayList<>();		for (long i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);	}        	static void sort(int[] a) {		ArrayList<Integer> l = new ArrayList<>();		for (int i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);    }         static class FastReader    {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }                 int[] readIntArray(int n)        {		int a[]=new int[n];		for(int i=0;i<n;i++)a[i]=nextInt();		return a;	}			long[] readLongArray(int n)	{		long a[]=new long[n];		for(int i=0;i<n;i++)a[i]=nextLong();		return a;	}	        String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }  
