import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.util.*;public class pcarp{	static int[] state = new int[1000000+1];	public static void main(String[] args) {		FastScanner fs = new FastScanner();		int n = fs.nextInt();		int[] arr = fs.readArray(n);		int WAIT =0;		int ENTERED =1;		int LEFT =2;		int flag=0;		ArrayList<Integer> a = new ArrayList<>();		int ofs=0;		ArrayList<Integer> res = new ArrayList<>();			for(int i=0;i<n;i++){			a.add(Math.abs(arr[i]));			if(arr[i]>0){				if(state[arr[i]]!=WAIT){					flag=1;					break;				}				else{					state[arr[i]]=ENTERED;					ofs++;				}			}			else{				if(state[-1*arr[i]]!=ENTERED){					flag=1;					break;				}				else{					state[-1*arr[i]]=LEFT;					ofs--;				}			}			if(ofs==0){				res.add(a.size());				for(int x : a){					state[x]=WAIT;				}				a.clear();			}		}		if(!a.isEmpty() || flag==1){			System.out.println(-1);		}		else{			System.out.println(res.size());			for(int i=0;i<res.size();i++){				if(i+1!=res.size()){					System.out.print(res.get(i)+" ");				}				else{					System.out.print(res.get(i));				}			}		}	}	public static long fact( long n, long mod){		long res =1;		for(int i=1;i<=n;i++){			res%=mod;			i%=mod;			res=(res*i)%mod;		}		return res;	} 	public static long nCk(long n,long k, long mod){		return (fact(n,mod)%mod*modular(fact(k,mod),mod-2,mod)%mod*modular(fact(n-k,mod),mod-2,mod)%mod)%mod;	} 	public static long modular(long n, long e, long mod){		long res = 1;		n%=mod;		if (n == 0) return 0;		while(e>0){			if((e&1)==1){				res=(res*n)%mod;			}			e=e>>1;			n=(n*n)%mod;		}		return res;	} 	static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    } }
