/* FastScanner Credits :- "SecondThread"* His youTube channel :-   https://www.youtube.com/channel/UCXbCohpE9IoVQUD2Ifg1d1g */  //import javax.print.DocFlavor;//import javax.swing.*;//import javax.swing.text.StyleContext;//import java.awt.image.AreaAveragingScaleFilter;import java.beans.IntrospectionException;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger;import java.nio.charset.IllegalCharsetNameException;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.*;import java.util.LinkedList;import java.util.logging.SimpleFormatter;  public   class Main1 {           public static void main(String[] args) {        class Client {            int id ;            int req ;             public Client(int id , int req){                this.id = id ;                this.req = req ;            }        }          PrintWriter fop = new PrintWriter(System.out);        FastScanner fsca = new FastScanner();         int n = fsca.nextInt();        int A[][] = new int[n+5][n+5] ;        int t = fsca.nextInt();         for (int k=0 ; k<t ; k++){            int x = fsca.nextInt();            int y = fsca.nextInt();            for (int i = 0; i <3 ; i++) {                for (int j = 0; j <3 ; j++) {                    A[x+i][y+j]++ ;                    if (A[x+i][y+j] == 9){                        System.out.println(k+1);                        return;                    }                }            }        }        fop.println(-1);                          fop.flush();        fop.close();      }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/          static void sieve(int n){        boolean[] flag = new boolean[n] ;         for (int i=2 ; i*i<n ; i++){            if (flag[i])                continue;            else                for (int j= i*i ; j<=n ; j+= i){                    flag[j] = true;                }        }      }    static int gcd(int a , int b){        if (b > a){            int tenp = b ;            b = a ;            a = tenp ;        }        int temp = 0 ;        while (b != 0){            a %= b ;            temp = b ;            b = a ;            a = temp ;        }        return a ;    }     static long gcd1( long a , long b){        if (b > a){            long tenp = b ;            b = a ;            a = tenp ;        }        long temp = 0 ;        while (b != 0){            a %= b ;            temp = b ;            b = a ;            a = temp ;        }        return a ;    }          static final Random random=new Random();     static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort        for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long[] readLongArray(int n){            long[] a = new long[n];            for (int i=0 ; i<n ; i++)                a[i] = nextLong() ;            return a ;        }        long nextLong() {            return Long.parseLong(next());        }    }      }  
