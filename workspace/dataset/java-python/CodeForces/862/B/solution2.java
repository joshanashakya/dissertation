import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;Â public class Zad862B {	static int[] mark;	static Edge[] g;	static ArrayList<Integer> al = new ArrayList<>();	static ArrayList<Integer> roots = new ArrayList<>();	public static void main(String[] args) {		// TODO Auto-generated method stub		FastReader sc = new FastReader();		PrintWriter out = new PrintWriter(System.out);				int n = sc.nextInt();		if(n==1) {			out.println(0);			out.close();			return;		}		mark = new int[n+1];		for(int i = 1;i<=n;i++) {			mark[i] = -1;		}		g = new Edge[n+1];		for(int i = 1;i<=n;i++) {			g[i] = new Edge();		}		for(int i = 0;i<n-1;i++) {			mark[i] = -1;			int curr = sc.nextInt();			int next = sc.nextInt();			g[curr].add(next);			g[next].addPred(curr);		}		mark[1] = -1;		mark[0] = 0;		dfs(1, 0);		long countSlaves = al.size();		long countMasters = Math.abs(n-countSlaves);		long answer = 0;		answer = countMasters*countSlaves-(n-1);		out.print(answer);		out.close();	}	static void dfs(int v, int prevV) {		if(mark[v]!=-1) {			return;		}		if(mark[prevV]==1) {			mark[v] = 0;			al.add(v);		} else {			mark[v] = 1;		}		for(int i = 0;i<g[v].pred.size();i++) {			if(mark[g[v].pred.get(i)]==-1)dfs(g[v].pred.get(i), v);		}		for(int i = 0;i<g[v].edges.size();i++) {			dfs(g[v].edges.get(i), v);		}	}	static class Edge{		ArrayList<Integer> edges = new ArrayList<>();		ArrayList<Integer> pred = new ArrayList<>();		public Edge() {					}				public void add(int a) {			edges.add(a);		}		public void addPred(int a) {			pred.add(a);		}	}	static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}}
