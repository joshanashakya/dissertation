import java.io.*;import java.util.*; public class Main {    public static void main(String[] args) throws IOException {        int tc = sc.nextInt();        while(tc-- > 0) {            int n = sc.nextInt();            int m = sc.nextInt();            char[][] chars = new char[n][m];            for (int i = 0; i < n; i++) {                chars[i] = sc.nextLine().toCharArray();            }            boolean f = false;            boolean F = true;            for (char[] arr : chars) {                for (char c : arr) {                    if (c == 'A') f = true;                    else F = false;                }            }            if (!f) pw.println("MORTAL");            else {                int ans1 = 4, ans2 = 4, ans3 = 4, ans4 = 4, ans5 = 4;                if (chars[0][m - 1] == 'A' || chars[n - 1][m - 1] == 'A' || chars[n - 1][0] == 'A' || chars[0][0] == 'A')                    ans1 = 2;                 if (F) ans2 = 0;                 boolean a1 = true, a2 = true, a3 = true, a4 = true;                boolean b1 = false, b2 = false, b3 = false, b4 = false;                for (int j = 0; j < m; j++) {                    if(chars[0][j] != 'A') a1 = false;                    else b1 = true;                }                for (int j = 0; j < m; j++) {                    if(chars[n-1][j] != 'A') a2 = false;                    else b2 = true;                }                for (int i = 0; i < n; i++) {                    if(chars[i][0] != 'A') a3 = false;                    else b3 = true;                }                for (int i = 0; i < n; i++) {                    if(chars[i][m-1] != 'A') a4 = false;                    else b4 = true;                }                if(a1 || a2 || a3 || a4) ans3 = 1;                 if(b1 || b2 || b3 || b4) ans4 = 3;                 boolean FF = false;                for (int i = 0; i < n; i++) {                    boolean ff = true;                    for (int j = 0; j < m; j++) {                        if (chars[i][j] != 'A') {                            ff = false;                            break;                        }                    }                    if(ff) FF = true;                }                for (int j = 0; j < m; j++) {                    boolean ff = true;                    for (int i = 0; i < n; i++) {                        if (chars[i][j] != 'A') {                            ff = false;                            break;                        }                    }                    if(ff) FF = true;                }                if(FF) ans5 = 2;                 pw.println(Math.min(ans1, Math.min(ans2, Math.min(ans3, Math.min(ans4, ans5)))));            }        }        pw.close();    }      public static void pairSort(Pair[] arr) {        ArrayList<Pair> l = new ArrayList<>();        for (Pair i : arr) l.add(i);        Collections.sort(l);        for (int i = 0; i < arr.length; i++) {            arr[i] = l.get(i);        }    }    public static void longSort(long[] arr) {        ArrayList<Long> l = new ArrayList<>();        for (long i : arr) l.add(i);        Collections.sort(l);        for (int i = 0; i < arr.length; i++) {            arr[i] = l.get(i);        }    }    public static void intSort(int[] arr) {        ArrayList<Integer> l = new ArrayList<>();        for (int i : arr) l.add(i);        Collections.sort(l);        for (int i = 0; i < arr.length; i++) {            arr[i] = l.get(i);        }    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public boolean ready() throws IOException {            return br.ready();        }         public int[] nextIntArr(int n) throws IOException {            int[] arr = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = Integer.parseInt(next());            }            return arr;        }         public long[] nextLongArr(int n) throws IOException {            long[] arr = new long[n];            for (int i = 0; i < n; i++) {                arr[i] = Long.parseLong(next());            }            return arr;        }     }    static class Pair implements Comparable<Pair>{        int first, second;        public Pair(int first, int second){            this.first = first; this.second = second;        }         @Override        public int compareTo(Pair p2) {            return first - p2.first;        }         @Override        public String toString() { return "("+ first + "," + second + ')'; }     }     static PrintWriter pw = new PrintWriter(System.out);    static Scanner sc = new Scanner(System.in);    static final int MOD = (int) 1e9 + 7;}
