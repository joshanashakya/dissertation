import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.lang.reflect.Array;import java.util.Arrays;  public class water {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastInput input = new FastInput(inputStream);        FastOutput out = new FastOutput(outputStream);        int t= input.scanInt();        for(int i=0;i<t;i++) {            int n = input.scanInt();            int m= input.scanInt();            String a[]=new String[n];            for(int j=0;j<n;j++){               a[j]= input.readString();            }            int b[][][]=new int[n][m][2];            boolean ip=false;            for(int j=0;j<n;j++){                boolean isp=false;                for(int k=0;k<m;k++){                    if(a[j].charAt(k)=='P'){                        isp=true;                    }                    else{                        b[j][k][0]+=1;                        if(!isp) b[j][k][0]+=1;                        if(!ip)  b[j][k][0]+=1;                    }                }                if(isp)     ip=true;            }            ip=false;            for(int j=n-1;j>-1;j--){                boolean isp=false;                for(int k=m-1;k>-1;k--){                    if(a[j].charAt(k)=='P'){                        isp=true;                    }                    else{                        if(!isp) b[j][k][0]+=1;                        if(!ip)  b[j][k][0]+=1;                    }                }                if(isp)     ip=true;            }            ip =false;            for(int j=0;j<m;j++){                boolean isp=false;                for(int k=0;k<n;k++){                    if(a[k].charAt(j)=='P'){                        isp=true;                     }                    else{                        b[k][j][1]+=1;                        if(!isp) b[k][j][1]+=1;                        if(!ip)  b[k][j][1]+=1;                     }                    if(isp)     ip=true;                }            }            ip=false;            for(int j=m-1;j>-1;j--){                boolean isp=false;                for(int k=n-1;k>-1;k--){                    if(a[k].charAt(j)=='P'){                        isp=true;                     }                    else{                        if(!isp) b[k][j][1]+=1;                        if(!ip)  b[k][j][1]+=1;                     }                    if(isp)     ip=true;                }            }            int max=0;            for(int j=0;j<n;j++){                for(int k=0;k<m;k++){                    if(b[j][k][1]>max) max=b[j][k][1];                    if(b[j][k][0]>max) max=b[j][k][0];                }            }            if(max==0)                out.println(" MORTAL");            else                out.println(" "+(5-max));          }    }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;        public FastInput(InputStream is) {            this.is = is;        }        private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }        public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }        public String next() {            return readString();        }        public int scanInt() {            int sign = 1;            skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }            int val = 0;            while (next >= '0' && next <= '9') {                val = val * 10 + next - '0';                next = read();            }            return (sign*val);        }         public String readString(StringBuilder builder) {            skipBlank();            while (next > 32) {                builder.append((char) next);                next = read();            }            return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }    static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }        public FastOutput append(int c) {            cache.append(c);            return this;        }        public FastOutput println(int c) {            return append(c).println();        }        public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            //cache.append(System.lineSeparator());            flush();            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }  }  
