import java.util.*; import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);         int t = in.nextInt();        Main main = new Main();        while (t-- > 0) {            main.run(in, out);        }        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {         int R = in.nextInt();        int C = in.nextInt();         int[] rcnt = new int[R];        int[] ccnt = new int[C];         int totalcnt = 0;        boolean cornerGood = false;        for (int i = 0; i < R; i++) {            char[] ca = in.next().toCharArray();            for (int j = 0; j < C; j++) {                if (ca[j] == 'A') {                    rcnt[i]++;                    ccnt[j]++;                    totalcnt++;                    if ((i == 0 && (j == 0 || j == C-1))                            || (i == R-1 && (j == 0 || j == C-1))) cornerGood = true;                }            }        }         if (totalcnt == 0) {            out.println("MORTAL");            return;        }         if (totalcnt == R*C) {            out.println(0);            return;        }         if (rcnt[0] == C || rcnt[R-1] == C || ccnt[0] == R || ccnt[C-1] == R) {            out.println(1);            return;        }         boolean anyColGood = false;        boolean anyRowGood = false;         for (int r = 0; r < R; r++) if (rcnt[r] == C) anyRowGood = true;        for (int c = 0; c < C; c++) if (ccnt[c] == R) anyColGood = true;         if (cornerGood || anyRowGood || anyColGood) {            out.println(2);            return;        }         if (rcnt[0] != 0 || rcnt[R-1] != 0 || ccnt[0] != 0 || ccnt[C-1] != 0) {            out.println(3);            return;        }         out.println(4);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
