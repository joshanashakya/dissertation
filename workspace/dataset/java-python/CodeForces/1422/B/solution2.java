import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class CF1422_D2_B {    public static void main(String[] args) {        FastScanner scanner = new FastScanner();        int t = scanner.nextInt();        for (int i = 0; i < t; i++) {            solve(scanner);        }     }     private static void solve(FastScanner scanner) {        int n = scanner.nextInt();        int m = scanner.nextInt();        int[][] matrix = new int[n][m];        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                int x = scanner.nextInt();                matrix[i][j] = x;            }        }        long count = 0;        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                int[] arr = {matrix[i][j], matrix[n - i - 1][j], matrix[i][m - j - 1], matrix[n - i - 1][m - j - 1]};                Arrays.sort(arr);                long mid = 0;                mid += (arr[1] + arr[2]) / 2;                for (int value : arr) {                    count += Math.abs(mid - value);                }            }        }        System.out.println(count / 4); //        long edge = matrix[0][0] + matrix[n - 1][0] + matrix[0][m - 1] + matrix[n - 1][m - 1];//        long avgEdge = (edge + 4) / 4;//        long avg = (sum - edge + (n * m - 4)) / (n * m - 4);//        long count = 0;//        HashSet<Pair> set = new HashSet<>();//        set.add(new Pair(0, 0));//        set.add(new Pair(n - 1, 0));//        set.add(new Pair(0, m - 1));//        set.add(new Pair(n - 1, m - 1));//        for (int i = 0; i < n; i++) {//            for (int j = 0; j < m; j++) {//                count += Math.abs(avg - matrix[i][j]);//            }//        }//        long countEdge = count;//        for (Pair p : set) {//            countEdge -= Math.abs(avg - matrix[p.x][p.y]);//            countEdge += Math.abs(avgEdge - matrix[p.x][p.y]);//        } //        System.out.println(Math.min(count, countEdge));    }     static class Pair {        int x, y;         public Pair(int x, int y) {            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (o == null || getClass() != o.getClass()) return false;            Pair pair = (Pair) o;            return x == pair.x &&                    y == pair.y;        }         @Override        public int hashCode() {            return Objects.hash(x, y);        }    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         int[] nextArray(int n) {            int[] arr = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }         Integer[] nextArray(int n, boolean object) {            Integer[] arr = new Integer[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }    }}
