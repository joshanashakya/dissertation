import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Random;import java.util.StringTokenizer; public class Solution{			    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		long a00 = fs.nextLong(), a01 = fs.nextLong(), a10 = fs.nextLong(), a11 = fs.nextLong();    		    		if(a00==0 && a11==0) {    			if(a01==1 && a10==0) {    				out.println("01");    				out.flush();    				return;    			}    			else if(a10==1 && a01==0) {    				out.println(10);    				out.flush();    				return;    			}    			else if(a01+a10!=0) {    				out.println("Impossible");    				out.flush();    				return;    			}    			else {    				out.println(0);    				out.flush();    				return;    			}    		}    	    		long n1 = (long)(Math.sqrt(1 + 8*a00));        	if(n1*n1 != 1 + 8*a00) {        		out.println("Impossible");        		out.flush();        		return;        	}        	n1 = (1 + n1)/2;    		    		    		    		long n2 = (long)(Math.sqrt(1 + 8*a11));        	if(n2*n2 != 1 + 8*a11) {        		out.println("Impossible");        		out.flush();        		return;        	}        	n2 = (1 + n2)/2;        	        	        	if(a00==0) {        		if(a01+a10==0) {        			for(int i=0;i<n2;i++) out.print(1);        			out.flush();        			return;        		}        	}        	if(a11==0) {        		if(a01+a10==0) {        			for(int i=0;i<n1;i++) out.print(0);        			out.flush();        			return;        		}        	}    		    		    		    		if(a01 + a10 != n1*n2) {    			out.println("Impossible");    			out.flush();    			return;    		}    		     		    		    		int num1 = (int)(a01/n2);    		int num2 = (int)(a01%n2);    		    		for(int i=0;i<num1;i++) out.print(0);    		for(int i=0;i<n2-num2;i++) out.print(1);    		if(num2!=0) out.print(0);    		for(int i=0;i<num2;i++) out.print(1);    		for(int i=0;i<n1-num1-((num2!=0)?1:0);i++) out.print(0);    		out.println();    		    		    	}    	    		    		    		    	out.close();    		    }                                                        static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
