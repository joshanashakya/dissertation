import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BRecoverTheString solver = new BRecoverTheString();            solver.solve(1, in, out);            out.close();        }    }     static class BRecoverTheString {        String noWay = "Impossible";         public void solve(int testNumber, FastInput in, FastOutput out) {            long a00 = in.readLong();            long a01 = in.readLong();            long a10 = in.readLong();            long a11 = in.readLong();             int n = -1;            int m = -1;             for (int i = 0; i <= 1000000; i++) {                if (choose(i) == a00) {                    n = i;                }                if (choose(i) == a11) {                    m = i;                }            }             String ans = null;            for (int i = 0; i <= 1; i++) {                for (int j = 0; j <= 1; j++) {                    if (ans != null) {                        continue;                    }                    ans = notNull(ans, solve(a00, a01, a10, a11, n ^ i, m ^ j));                }            }             if (ans == null) {                out.println(noWay);            } else {                out.println(ans);            }        }         String notNull(String a, String b) {            return a == null ? b : a;        }         String solve(long a00, long a01, long a10, long a11, int n, int m) {            if (n < 0 || m < 0) {                return null;            }            if (a00 != choose(n) || a11 != choose(m)) {                return null;            }            if (a01 + a10 != n * (long) m) {                return null;            }            StringBuilder ans = new StringBuilder();            int cur = 0;             int[] after = new int[n];            for (int i = 0; i < n; i++) {                after[i] = i == 0 ? m : after[i - 1];                while (a01 < after[i]) {                    after[i]--;                }                a01 -= after[i];            }             if (a01 != 0) {                return null;            }             for (int i = n - 1; i >= 0; i--) {                while (cur < after[i]) {                    cur++;                    ans.append(1);                }                ans.append(0);            }             while (cur < m) {                cur++;                ans.append(1);            }             return ans.reverse().toString();        }         public long choose(long n) {            return n * (n - 1) / 2;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public long readLong() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             long val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
