import java.util.*;import java.io.*; public class CFA {  BufferedReader br;  PrintWriter out;  StringTokenizer st;  boolean eof;  private static final long MOD = 1000L * 1000L * 1000L + 7;  private static final int[] dx = {0, -1, 0, 1};  private static final int[] dy = {1, 0, -1, 0};  private static final String yes = "Yes";  private static final String no = "No";   void solve() {//    int T = nextInt();    int T = 1;    for (int i = 0; i < T; i++) {      helper();    }  }   void helper() {    long a00 = nextInt();    long a01 = nextInt();    long a10 = nextInt();    long a11 = nextInt();    String imposs = "Impossible";    if (a00 < 0 || a01 < 0 || a10 < 0 || a11 < 0) {      outln(imposs);      return;    }    List<Integer> zeros = find(a00);    List<Integer> ones = find(a11);    if (zeros.isEmpty() || ones.isEmpty()) {      outln(imposs);      return;    }     for (int zero : zeros) {      for (int one : ones) {        String tmp = findRes(zero, one, a01, a10, a00, a11);        if (!tmp.isEmpty()) {          outln(tmp);          return;        }      }    }    outln(imposs);  }   String findRes(int zeroCnt, int oneCnt, long a01, long a10, long a00, long a11) {    long total = zeroCnt + oneCnt;    total = (total - 1) * total / 2;    if (total != a01 + a10 + a00 + a11) {      return "";    }    if (oneCnt == 0) {      if (a01 != 0 || a10 != 0) {        return "";      } else {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < zeroCnt; i++) {          sb.append("0");        }        return sb.toString();      }    }    StringBuilder sb = new StringBuilder();    for (int i = 0; i < a01 / oneCnt; i++) {      zeroCnt--;      sb.append("0");    }    long firstOne = oneCnt - a01 % oneCnt;    long secondOne = a01 % oneCnt;    for (int i = 0; i < firstOne; i++) {      sb.append("1");    }     if (zeroCnt > 0 && secondOne > 0) {      zeroCnt--;      sb.append("0");    }    for (int i = 0; i < secondOne; i++) {      sb.append("1");    }    while (zeroCnt > 0) {      zeroCnt--;      sb.append("0");    }    return sb.toString();  }   List<Integer> find(long v) {    List<Integer> res = new ArrayList<>();    if (v == 0) {      res.add(0);      res.add(1);      return res;    }     int start = 0;    while (start * (start - 1) / 2 < v) {      start++;    }    if (start * (start - 1) / 2 != v) {      return res;    }     res.add(start);    return res;  }   void shuffle(int[] a) {    int n = a.length;    for(int i = 0; i < n; i++) {      int r = i + (int) (Math.random() * (n - i));      int tmp = a[i];      a[i] = a[r];      a[r] = tmp;    }  }   int gcd(int a, int b) {    while(a != 0 && b != 0) {      int c = b;      b = a % b;      a = c;    }    return a + b;  }  private void outln(Object o) {    out.println(o);  }  private void out(Object o) {    out.print(o);  }  private void formatPrint(double val) {    outln(String.format("%.9f%n", val));  }  public CFA() {    br = new BufferedReader(new InputStreamReader(System.in));    out = new PrintWriter(System.out);    solve();    out.close();  }  public static void main(String[] args) {    new CFA();  }   public long[] nextLongArr(int n) {    long[] res = new long[n];    for(int i = 0; i < n; i++)      res[i] = nextLong();    return res;  }  public int[] nextIntArr(int n) {    int[] res = new int[n];    for(int i = 0; i < n; i++)      res[i] = nextInt();    return res;  }  public String nextToken() {    while (st == null || !st.hasMoreTokens()) {      try {        st = new StringTokenizer(br.readLine());      } catch (Exception e) {        eof = true;        return null;      }    }    return st.nextToken();  }  public String nextString() {    try {      return br.readLine();    } catch (IOException e) {      eof = true;      return null;    }  }  public int nextInt() {    return Integer.parseInt(nextToken());  }  public long nextLong() {    return Long.parseLong(nextToken());  }  public double nextDouble() {    return Double.parseDouble(nextToken());  }}
