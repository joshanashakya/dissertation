import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.BufferedReader;import java.io.InputStreamReader; public class Two {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.call(in,out);         out.close();    }     static class TaskA {        public void call(InputReader in, PrintWriter out) {            int n , a =0 ,b=0 ;            String s;            s = in.next();            n = s.length();            int[] arr = new int[s.length()];            for (int i = 0; i <arr.length ; i++) {                arr[i] = s.charAt(i);            }            for (int i = 0; i <n ; i++) {                if(arr[i]==97&& a!=0){                    break;                }                if(arr[i]!=97){                    if(a==0){                        b = i;                    }                    a++;                }            }            for (int i = b; i <a+b ; i++) {                arr[i] = arr[i]-1;            }             if(a==0){                arr[n-1] = 122;             }            for (int i = 0; i < n; i++) {                out.print((char) arr[i]);            }         }    }     static final Random random=new Random();     static void shuffleSort(int[] arr) {        int n=arr.length;        for (int i=0; i<n; i++) {            int a=random.nextInt(n), temp=arr[a];            arr[a]=arr[i];            arr[i]=temp;        }        Arrays.sort(arr);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }     }}
