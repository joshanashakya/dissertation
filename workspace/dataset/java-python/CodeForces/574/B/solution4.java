import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.HashSet;import java.util.StringTokenizer; public class CF0574B_BearAndThreeMusketeers {	static class Scanner {		BufferedReader br;		StringTokenizer st; 		public Scanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	static class Edge {		int a1;		int a2; 		public Edge(int b1, int b2) {			a1 = b1;			a2 = b2;		}	} 	static class Node {		int id;		HashSet<Integer> c; 		public Node(int i) {			id = i;			c = new HashSet<Integer>();		}	} 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner();		int n = scanner.nextInt();		int m = scanner.nextInt();		Node[] nodes = new Node[n];		Edge[] edges = new Edge[m];		for (int i = 0; i < n; i++) {			nodes[i] = new Node(i);		}		for (int i = 0; i < m; i++) {			edges[i] = new Edge(scanner.nextInt() - 1, scanner.nextInt() - 1);			nodes[edges[i].a1].c.add(edges[i].a2);			nodes[edges[i].a2].c.add(edges[i].a1);		}		int min = Integer.MAX_VALUE;		for (int i = 0; i < m; i++) {			for (int j = i + 1; j < m; j++) {				if (edges[i].a1 == edges[j].a1) {					if (nodes[edges[i].a2].c.contains(edges[j].a2))						min = Math.min(nodes[edges[i].a1].c.size() + nodes[edges[i].a2].c.size()								+ nodes[edges[j].a2].c.size() - 6, min);				} else if (edges[i].a1 == edges[j].a2) {					if (nodes[edges[i].a2].c.contains(edges[j].a1))						min = Math.min(nodes[edges[i].a1].c.size() + nodes[edges[i].a2].c.size()								+ nodes[edges[j].a1].c.size() - 6, min);				} else if (edges[i].a2 == edges[j].a1) {					if (nodes[edges[i].a1].c.contains(edges[j].a2))						min = Math.min(nodes[edges[i].a2].c.size() + nodes[edges[i].a1].c.size()								+ nodes[edges[j].a2].c.size() - 6, min);				} else if (edges[i].a2 == edges[j].a2) {					if (nodes[edges[i].a1].c.contains(edges[j].a1))						min = Math.min(nodes[edges[i].a2].c.size() + nodes[edges[i].a1].c.size()								+ nodes[edges[j].a1].c.size() - 6, min);				}			}		}		System.out.println(min == Integer.MAX_VALUE ? -1 : min);	} }
