import java.io.OutputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.FileInputStream;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Arrays;import java.io.BufferedWriter;import java.util.Random;import java.io.IOException;import java.io.InputStreamReader;import java.util.TreeSet;import java.util.HashSet;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream;        try {            inputStream = new FileInputStream("input.txt");        } catch (IOException e) {            throw new RuntimeException(e);        }        OutputStream outputStream;        try {            outputStream = new FileOutputStream("output.txt");        } catch (IOException e) {            throw new RuntimeException(e);        }        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BPhysicsPractical solver = new BPhysicsPractical();        solver.solve(1, in, out);        out.close();    }     static class BPhysicsPractical {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            int[] arr = in.nextIntArray(n);            sort(arr);            TreeSet<BPhysicsPractical.Pair> set = new TreeSet<>();            HashSet<Integer> set1 = new HashSet<>();            for (int i = n - 1; i >= 0; i--) {                if (!set1.contains(arr[i])) {                    set.add(new BPhysicsPractical.Pair(arr[i], i));                    set1.add(arr[i]);                }             }             int min = Integer.MAX_VALUE;            for (int i = 0; i < n; i++) {                if (set.lower(new BPhysicsPractical.Pair(2 * arr[i], -1)) != null) {                    BPhysicsPractical.Pair p = set.lower(new BPhysicsPractical.Pair(2 * arr[i], -1));                     min = Math.min(min, arr.length - (p.b - i + 1));                }            }            out.println(min);        }         static void sort(int[] a) {            int n = a.length;            Random r = new Random();            for (int i = 0; i < a.length; i++) {                int oi = r.nextInt(n), temp = a[i];                a[i] = a[oi];                a[oi] = temp;            }            Arrays.sort(a);        }         static class Pair implements Comparable<BPhysicsPractical.Pair> {            int a;            int b;             Pair(int a, int b) {                this.a = a;                this.b = b;            }             public int compareTo(BPhysicsPractical.Pair v) {                if (a == v.a) {                    return -Integer.compare(b, v.b);                } else {                    return Integer.compare(a, v.a);                }             }         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int[] nextIntArray(int n) {            int[] array = new int[n];            for (int i = 0; i < n; ++i) array[i] = nextInt();            return array;        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
