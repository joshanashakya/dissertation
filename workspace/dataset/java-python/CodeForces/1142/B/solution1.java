import java.util.*;import java.io.*; public class B1142 {	static int n, p[], idxInP[]; 	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		PrintWriter pw = new PrintWriter(System.out);		n = sc.nextInt();		int m = sc.nextInt();		int q = sc.nextInt();		p = sc.nextIntArr(n);		idxInP = new int[n];		for (int i = 0; i < p.length; i++) {			idxInP[--p[i]] = i;		}		int[] arr = sc.nextIntArr(m);		int[] lastOcc = new int[n];		Arrays.fill(lastOcc, -1);		int[][] par = new int[20][m];		for (int i = 0; i < m; i++) {			int cur = --arr[i];			int prevValInP = (idxInP[cur] - 1);			if (prevValInP == -1)				prevValInP += n;			prevValInP = p[prevValInP];			par[0][i] = lastOcc[prevValInP];			lastOcc[cur] = i;		}		for (int lvl = 1; lvl < 20; lvl++) {			for (int i = 0; i < m; i++) {				par[lvl][i] = par[lvl - 1][i] == -1 ? -1 : par[lvl - 1][par[lvl - 1][i]];			}		}		int[] lim = new int[m];		for (int i = 0; i < m; i++) {			int anscestor = n - 1;			int cur = i;			int lvl = 0;			while (anscestor != 0) {				if ((anscestor & 1) == 1) {					cur = cur == -1 ? -1 : par[lvl][cur];				}				lvl++;				anscestor >>= 1;			}			lim[i] = Math.max(i == 0 ? -1 : lim[i - 1], cur);		}//		pw.println(Arrays.toString(lim));		while (q-- > 0) {			int l = sc.nextInt() - 1;			int r = sc.nextInt() - 1;			pw.print(l <= lim[r] ? 1 : 0);		}		pw.println();		pw.close();	} 	static class Scanner {		BufferedReader br;		StringTokenizer st; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public Scanner(FileReader f) {			br = new BufferedReader(f);		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public int[] nextIntArr(int n) throws IOException {			int[] arr = new int[n];			for (int i = 0; i < n; i++) {				arr[i] = Integer.parseInt(next());			}			return arr;		} 	} }
