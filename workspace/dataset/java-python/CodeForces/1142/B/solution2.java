import java.io.*; import java.util.*;   import java.io.*; import java.util.*;   public class D  {   public static int up[][];   public static int maxe;   public static void main(String[] args) throws Exception {      FastScanner sc = new FastScanner();      PrintWriter out = new PrintWriter(System.out);      int N = sc.nextInt();      int M = sc.nextInt();      int Q = sc.nextInt();            int[] perm = sc.nextInts(N);      int[] arr = sc.nextInts(M);      Map<Integer, Integer> pos = new HashMap<Integer, Integer>();      for(int i = 0; i < N; i++){         pos.put(perm[i], i);      }      maxe = (int)(Math.log(M)/Math.log(2)) + 1;      up = new int[M][maxe];      for(int i =  0; i < M; i++){         Arrays.fill(up[i], -1);      }      Stack<Integer> stack[] = new Stack[N+1];      for(int i = 0; i < N+1; i++){         stack[i] = new Stack<Integer>();      }      for(int i = 0; i < M; i++){         int prevc = perm[(pos.get(arr[i])+N-1)%N];         if(!stack[prevc].isEmpty()){            up[i][0] = stack[prevc].peek();         }         stack[arr[i]].push(i);      }      for(int l = 1; l < maxe; l++){         for(int j = 0; j < M; j++){            if(up[j][l-1] != -1) up[j][l] = up[up[j][l-1]][l-1];         }      }      int[] ans = new int[M];      int lastpos = -1;      for(int i = 0; i < M; i++){         lastpos = Math.max(lastpos, lift(i, N-1));         ans[i] = lastpos;      }      for(int q = 0; q < Q; q++){         int l = sc.nextInt()-1;         int r = sc.nextInt()-1;         if(ans[r] >= l){            out.print(1);         }         else{            out.print(0);         }      }      out.close();   }   public static int lift(int node, int k){      for(int l = 0; l < maxe; l++){         if(node != -1){            if((k & (1 << l)) != 0){               node = up[node][l];            }         }      }      return node;   }            static class FastScanner {      private int BS = 1 << 16;      private char NC = (char) 0;      private byte[] buf = new byte[BS];      private int bId = 0, size = 0;      private char c = NC;      private double cnt = 1;      private BufferedInputStream in;         public FastScanner() {         in = new BufferedInputStream(System.in, BS);      }         public FastScanner(String s) {         try {            in = new BufferedInputStream(new FileInputStream(new File(s)), BS);         } catch (Exception e) {            in = new BufferedInputStream(System.in, BS);         }      }         private char getChar() {         while (bId == size) {            try {               size = in.read(buf);            } catch (Exception e) {               return NC;            }            if (size == -1)                return NC;            bId = 0;         }         return (char) buf[bId++];      }         public int nextInt() {         return (int) nextLong();      }         public int[] nextInts(int N) {         int[] res = new int[N];         for (int i = 0; i < N; i++) {            res[i] = (int) nextLong();         }         return res;      }         public long[] nextLongs(int N) {         long[] res = new long[N];         for (int i = 0; i < N; i++) {            res[i] = nextLong();         }         return res;      }         public long nextLong() {         cnt = 1;         boolean neg = false;         if (c == NC) c = getChar();         for (; (c < '0' || c > '9'); c = getChar()) {            if (c == '-') neg = true;         }         long res = 0;         for (; c >= '0' && c <= '9'; c = getChar()) {            res = (res << 3) + (res << 1) + c - '0';            cnt *= 10;         }         return neg ? -res : res;      }         public double nextDouble() {         double cur = nextLong();         return c != '.' ? cur : cur + nextLong() / cnt;      }         public double[] nextDoubles(int N) {         double[] res = new double[N];         for (int i = 0; i < N; i++) {            res[i] = nextDouble();         }         return res;      }         public String next() {         StringBuilder res = new StringBuilder();         while (c <= 32) c = getChar();         while (c > 32) {            res.append(c);            c = getChar();         }         return res.toString();      }         public String nextLine() {         StringBuilder res = new StringBuilder();         while (c <= 32) c = getChar();         while (c != '\n') {            res.append(c);            c = getChar();         }         return res.toString();      }         public boolean hasNext() {         if (c > 32)             return true;         while (true) {            c = getChar();            if (c == NC)                return false;            else if (c > 32)                return true;         }      }   }    static void ASSERT(boolean assertion, String message) {      if (!assertion) throw new AssertionError(message);   }}
