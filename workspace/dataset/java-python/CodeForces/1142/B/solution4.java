import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BLynyrdSkynyrd solver = new BLynyrdSkynyrd();            solver.solve(1, in, out);            out.close();        }    }     static class BLynyrdSkynyrd {        int[][] jump;        int m;         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            m = in.readInt();            int q = in.readInt();            int[] a = new int[n];            int[] invA = new int[n + 1];            for (int i = 0; i < n; i++) {                a[i] = in.readInt();                invA[a[i]] = i;            }            int[] b = new int[m];            for (int i = 0; i < m; i++) {                b[i] = invA[in.readInt()];            }             jump = new int[m][20];            SequenceUtils.deepFill(jump, m);            int[] registry = new int[n];            SequenceUtils.deepFill(registry, m);            for (int i = m - 1; i >= 0; i--) {                int next = (b[i] + 1) % n;                jump[i][0] = registry[next];                registry[b[i]] = i;                for (int j = 0; jump[i][j] != m; j++) {                    jump[i][j + 1] = jump[jump[i][j]][j];                }            }             int[] right = new int[m];            for (int i = 0; i < m; i++) {                right[i] = jump(i, n - 1);            }             IntegerSparseTable st = new IntegerSparseTable(right, m, (x, y) -> Math.min(x, y));            for (int i = 0; i < q; i++) {                int l = in.readInt() - 1;                int r = in.readInt() - 1;                int min = st.query(l, r);                out.append(min <= r ? '1' : '0');            }        }         public int jump(int i, int k) {            if (i == m) {                return i;            }            if (k == 0) {                return i;            }            int log = CachedLog2.floorLog(k);            return jump(jump[i][log], k - (1 << log));        }     }     static class SequenceUtils {        public static void deepFill(Object array, int val) {            if (!array.getClass().isArray()) {                throw new IllegalArgumentException();            }            if (array instanceof int[]) {                int[] intArray = (int[]) array;                Arrays.fill(intArray, val);            } else {                Object[] objArray = (Object[]) array;                for (Object obj : objArray) {                    deepFill(obj, val);                }            }        }     }     static class CachedLog2 {        private static final int BITS = 16;        private static final int LIMIT = 1 << BITS;        private static final byte[] CACHE = new byte[LIMIT];         static {            int b = 0;            for (int i = 0; i < LIMIT; i++) {                while ((1 << (b + 1)) <= i) {                    b++;                }                CACHE[i] = (byte) b;            }        }         public static int floorLog(int x) {            return x < LIMIT ? CACHE[x] : (BITS + CACHE[x >>> BITS]);        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 20];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class IntegerSparseTable {        private int[][] st;        private IntegerBinaryFunction merger;         public IntegerSparseTable(int[] data, int length, IntegerBinaryFunction merger) {            int m = CachedLog2.floorLog(length);            st = new int[m + 1][length];            this.merger = merger;            for (int i = 0; i < length; i++) {                st[0][i] = data[i];            }            for (int i = 0; i < m; i++) {                int interval = 1 << i;                for (int j = 0; j < length; j++) {                    if (j + interval < length) {                        st[i + 1][j] = merge(st[i][j], st[i][j + interval]);                    } else {                        st[i + 1][j] = st[i][j];                    }                }            }        }         private int merge(int a, int b) {            return merger.apply(a, b);        }         public int query(int left, int right) {            int queryLen = right - left + 1;            int bit = CachedLog2.floorLog(queryLen);            // x + 2^bit == right + 1            // So x should be right + 1 - 2^bit - left=queryLen - 2^bit            return merge(st[bit][left], st[bit][right + 1 - (1 << bit)]);        }         public String toString() {            return Arrays.toString(st[0]);        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static interface IntegerBinaryFunction {        int apply(int a, int b);     }} 
