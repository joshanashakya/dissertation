import osfrom io import BytesIO, StringIOinput = BytesIO(os.read(0, os.fstat(0).st_size)).readline def input_as_list():    return list(map(int, input().split())) def array_of(f, *dim):    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f() def main():    n, m, q = input_as_list()    p = input_as_list()    a = input_as_list()     if n == 1:        print('1' * q)        return     next_p = array_of(int, n)    next_a = array_of(int, m)     prev = p[-1] - 1    for pi in p:        pi -= 1        next_p[prev] = pi        prev = pi     idx_a = array_of(int, n)    for i in range(len(a) - 1, -1, -1):        ai = a[i] - 1        next_a[i] = idx_a[next_p[ai]]        idx_a[ai] = i      ep = array_of(int, m)    parent = next_a    children = array_of(list, m)    roots = []    for i, p in enumerate(parent):        if p == 0:            roots.append(i)        else:            children[p].append(i)     rank = array_of(int, m)    parent_ex = array_of(list, m)    for r in roots:        stack = [r]        while stack:            p = stack.pop()            for c in children[p]:                rank[c] = rank[p] + 1                parent_ex[c].append(p)                i = 1                while 2 ** i <= rank[c]:                    parent_ex[c].append(parent_ex[parent_ex[c][-1]][i - 1])                    i += 1                stack.append(c)     for i in range(m):        y = i        s = 0        try:            for j in reversed(range(20)):                if n - s - 1 >= 2**j:                    y = parent_ex[y][j]                    s += 2**j            ep[i] = y        except IndexError:            pass     mn = 200000    flag = False    for i in range(len(ep) - 1, -1, -1):        epi = ep[i]        if epi != 0:            if epi > mn:                ep[i] = mn            mn = min(mn, epi)            flag = True        else:            if flag:                ep[i] = mn     out = []    for _ in range(q):        l, r = map(int, input().split())        l, r = l - 1, r - 1        if ep[l] == 0 or ep[l] > r:            out.append('0')        else:            out.append('1')     print(''.join(out))    main()
