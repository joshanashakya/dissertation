import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {         long[] K = new long[3];        long[] T = new long[3];        K[0] = in.nextLong();        K[1] = in.nextLong();        K[2] = in.nextLong();         T[0] = in.nextLong();        T[1] = in.nextLong();        T[2] = in.nextLong();         int N = in.nextInt();        long[] c = new long[N];         for (int i = 0; i < N; i++) c[i] = in.nextLong();         long[] timeWaited = new long[N];        long[] timePutInQueue = new long[N];        PriorityQueue<Integer>[] pq = new PriorityQueue[3];        for (int i = 0; i < 3; i++) {            pq[i] = new PriorityQueue<>(10, (a, b) -> {                long ta = timeWaited[a];                long tb = timeWaited[b];                 // want longer one to go first                if (timePutInQueue[b] > timePutInQueue[a]) {                    long v1 = ta + timePutInQueue[b]-timePutInQueue[a];                    long v2 = tb;                    return Long.compare(v2, v1);                } else {                    long v1 = ta;                    long v2 = tb + timePutInQueue[a]-timePutInQueue[b];                    return Long.compare(v2, v1);                }            });        }         // person, time, state        // states : ready1(arrive), ready2, ready3, done3        // if i see a ready2, that means i finished task1, another person can go        // to first window        // process ready3, then ready2, then ready1        PriorityQueue<long[]> q = new PriorityQueue<>(10, (a, b) -> {            if (a[1] == b[1]) {                return Long.compare(b[2], a[2]);            } else {                return Long.compare(a[1], b[1]);            }        });         for (int i = 0; i < N; i++) {            q.offer(new long[] {i, c[i], 0L});        }         while (!q.isEmpty()) {            // for (long[] d : q) {            //     System.out.print(Arrays.toString(d));            // }            // System.out.println();             long[] top = q.poll();            int person = (int) top[0];            long time = top[1];            int type = (int)top[2];             if (type == 0) {                if (K[0] > 0) {                    K[0]--;                    q.offer(new long[] {person, time+T[0], 1});                 } else {                    timePutInQueue[person] = time;                    pq[0].offer(person);                }            } else if (type == 1) {                // finished type0 task                K[0]++;                if (!pq[0].isEmpty()) {                    // take                    K[0]--;                    int p = pq[0].poll();                    // System.out.println("deque " + (p+1) + " for task 1 at time " + time);                    timeWaited[p] += time - timePutInQueue[p];                    q.offer(new long[] {p, time+T[0], 1});                }                 // if there is a k2 window open                if (K[1] > 0) {                    K[1]--;                    q.offer(new long[] {person, time+T[1], 2});                } else {                    timePutInQueue[person] = time;                    pq[1].offer(person);                }            } else if (type == 2) {                // finished type1 task                K[1]++;                if (!pq[1].isEmpty()) {                    // take                    K[1]--;                    int p = pq[1].poll();                    // System.out.println("deque " + (p+1) + " for task 2 at time " + time);                    timeWaited[p] += time - timePutInQueue[p];                    q.offer(new long[] {p, time+T[1], 2});                }                 // if there is a k3 window open                if (K[2] > 0) {                    K[2]--;                    q.offer(new long[] {person, time+T[2], 3});                } else {                    timePutInQueue[person] = time;                    pq[2].offer(person);                }            } else if (type == 3) {                // finished type2 task                K[2]++;                if (!pq[2].isEmpty()) {                    // take                    K[2]--;                    int p = pq[2].poll();                    timeWaited[p] += time - timePutInQueue[p];                    q.offer(new long[] {p, time+T[2], 3});                    // System.out.println("deque " + p + " for task 3 at time " + time);                }             }        }         long maxTime = 0;        for (int i = 0; i < N; i++) {            maxTime = Math.max(maxTime, timeWaited[i] + T[0] + T[1] + T[2]);        }        // System.out.println(Arrays.toString(timeWaited));        System.out.println(maxTime);    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
