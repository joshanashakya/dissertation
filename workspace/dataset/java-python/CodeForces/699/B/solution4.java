import java.io.*;import java.util.*;import java.math.*; /** * Built using CHelper plug-in * Actual solution is at the top */public class OneBomb {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }    static class TaskA {        long mod = 998244353l;        public void solve(int testNumber, InputReader in, PrintWriter out) {            while(testNumber-->0){            	int n = in.nextInt();            	int m = in.nextInt();            	String []a = new String[n];            	for(int i=0;i<n;i++)            		a[i] = in.next();            	int col = -1;            	int row = -1;            	int ans = 1;            	int maxr = -1;            	int maxc = -1;            	ArrayList<Integer> r = new ArrayList<>();            	ArrayList<Integer> c = new ArrayList<>();            	for(int i=0;i<n;i++){            		int l = 0;            		for(int j=0;j<a[0].length();j++){            			if(a[i].charAt(j) == '*')            				l++;            		}            		if(l>maxr){            			maxr = l;            			row = i;            			r = new ArrayList<>();            			r.add(i);            		}            		else if(l == maxr)            			r.add(i);            	}            	for(int j=0;j<a[0].length();j++){            		int l = 0;            		for(int i=0;i<n;i++){            			if(a[i].charAt(j) == '*')            				l++;            		}            		if(l>maxc){            			maxc = l;            			col = j;            			c = new ArrayList<>();            			c.add(j);            		}            		else if(l == maxc)            			c.add(j);            	}            	for(int k = 0;k<r.size();k++){            		for(int l=0;l<c.size();l++){            			ans = 1;            			for(int i=0;i<n;i++){            				for(int j=0;j<a[0].length();j++){            					if(i==r.get(k) || j==c.get(l));            					else if(a[i].charAt(j) == '*'){            						ans = 0;            						break;            					}            				}            				if(ans==0)            					break;            			}            			if(ans == 1){            				out.println("YES");            				out.println((r.get(k)+1) + " " + (c.get(l)+1));            				out.close();            				System.exit(0);            			}            		}            	}            	out.println("NO");            }        }        public void print(long a[] , PrintWriter out){            for(int i=0;i<a.length;i++)                out.print(a[i] + " ");            out.println();        }        class Combine{            int value , delete;            Combine(int val , int delete){                this.value = val;                this.delete = delete;            }        }        class Sort2 implements Comparator<Combine>{            public int compare(Combine a , Combine b){                if(a.value > b.value)                    return 1;                else if(a.value == b.value && a.delete>b.delete)                    return 1;                return -1;            }        }        public int upperBound(ArrayList<Integer> array, int value) {            int low = 0;            int high = array.size();            while (low < high) {                int mid = (low + high) / 2;                if (value >= array.get(mid)) {                    low = mid + 1;                } else {                    high = mid;                }            }            return low;        }        public int lowerBound(ArrayList<Integer> array, int value) {            int low = 0;            int high = array.size();            while (low < high) {                final int mid = (low + high) / 2;                //checks if the value is less than middle element of the array                if (value <= array.get(mid)) {                    high = mid;                } else {                    low = mid + 1;                }            }            return low;        }    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     }}
