import java.util.*; public class Solution{              static double minDistance(pair A, pair B, pair E) {       // vector AB     pair AB = new pair();     AB.F = B.F - A.F;     AB.S = B.S - A.S;       // vector BP     pair BE = new pair();     BE.F = E.F - B.F;     BE.S = E.S - B.S;       // vector AP     pair AE = new pair();     AE.F = E.F - A.F;     AE.S = E.S - A.S;       // Variables to store dot product     double AB_BE, AB_AE;       // Calculating the dot product     AB_BE = (AB.F * BE.F + AB.S * BE.S);     AB_AE = (AB.F * AE.F + AB.S * AE.S);       // Minimum distance from     // point E to the line segment     double reqAns = 0;       // Case 1     if (AB_BE > 0)      {           // Finding the magnitude         double y = E.S - B.S;         double x = E.F - B.F;         reqAns = Math.sqrt(x * x + y * y);     }       // Case 2     else if (AB_AE < 0)     {         double y = E.S - A.S;         double x = E.F - A.F;         reqAns = Math.sqrt(x * x + y * y);     }       // Case 3     else     {           // Finding the perpendicular distance         double x1 = AB.F;         double y1 = AB.S;         double x2 = AE.F;         double y2 = AE.S;         double mod = Math.sqrt(x1 * x1 + y1 * y1);         reqAns = Math.abs(x1 * y2 - y1 * x2) / mod;     }     return reqAns; }          public static void main(String []args)       {              Scanner sc = new Scanner(System.in);              int n = sc.nextInt();              double p1 = sc.nextDouble();              double p2 = sc.nextDouble();                            double max = Double.MIN_VALUE;              double min = Double.MAX_VALUE;                            pair arr[] = new pair[n];              for(int i = 0 ; i < n ; i++)              {                     arr[i] = new pair(sc.nextDouble() , sc.nextDouble());              }              pair pp = new pair(p1,p2);              for(int i = 0 ; i < n ; i++)              {                     double x = arr[i].F;                     double y  = arr[i].S;                     max = Math.max(max , (p1-x)*(p1-x) + (p2-y)*(p2-y));                      min = Math.min(min , minDistance(arr[i] , arr[(i+1)%n], pp));              }              double pi = Math.PI;              System.out.println(pi*(max-min*min));       }} class pair{       double F , S;              public pair()       {              F = 0 ;              S = 0;       }       public pair(double F , double S)       {              this.F = F;              this.S = S;       }}
