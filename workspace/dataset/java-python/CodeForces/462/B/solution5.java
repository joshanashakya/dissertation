import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main {	    static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer(""); 		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		} 		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		} 		long nextLong() {			return Long.parseLong(next());		} 	} 	/*	int T = fs.nextInt();	long l = fs.nextLong();	int[] arr = fs.readArray(N);	String str  = fs.next();	char ch = fs.next().charAt(0);	*/  	public static void main(String[] args) {		FastScanner fs=new FastScanner();		PrintWriter out=new PrintWriter(System.out); 		int N = fs.nextInt();		int K = fs.nextInt();		char[] arr = fs.next().toCharArray(); 		HashMap<Character,Integer> hmap = new HashMap<>();		PriorityQueue<Integer> pque = new PriorityQueue<>(Collections.reverseOrder());				//hmapadd		for(char ch:arr){			hmap.put(ch,hmap.getOrDefault(ch,0)+1);		} 		//pque add		for(char ch:hmap.keySet()){			pque.add(hmap.get(ch));		}		 		//profit calc		long profit = 0;		while(pque.size()>0 && K>0){			int val = pque.remove();			long mp = Math.min(K,val);			val-=mp;			K-=mp;			profit+=(mp*mp);			if(val!=0)pque.add(val);		} 		out.println(profit); 		out.close();	}   	}
