import java.util.*;import java.lang.*;import java.io.*; 	public class FastIO{					BufferedReader br;		StringTokenizer st;				public FastIO(){ // constructor						br = new BufferedReader(new InputStreamReader(System.in));		}				String next(){						while (st == null || !st.hasMoreElements()){				try{					st = new StringTokenizer(br.readLine());				}								catch (IOException e){					e.printStackTrace();				}			}			return st.nextToken();		}				int nextInt(){						return Integer.parseInt(next());		}				long nextLong(){						return Long.parseLong(next());		}				double nextDouble(){			return Double.parseDouble(next());		} 		String nextLine(){						String str = "";			try{								str = br.readLine();			}			catch (IOException e){								e.printStackTrace();			}			return str;		}				static int gcd(int a, int b) {						if(b == 0) {				return a;			}						return gcd(b, a % b);		}			public static void main(String[] args) throws IOException {				FastIO io = new FastIO();				// int n = io.nextInt(); -> for int		// double d = io.nextDouble(); -> for double		// String ch = io.next(); -> for one word		// String str = io.nextLine(); -> for the entire line				int n = io.nextInt();		char matrix[][] = new char[n][n];				for(int i = 0; i < n; i++) {			String str = io.next();			for(int j = 0; j < str.length(); j++) {				matrix[i][j] = str.charAt(j);			}		}				for(int i = 0; i < n; i++) {			for(int j = 0; j < n; j++) {				if((count(matrix, i, j)  & 1) == 1) {					System.out.println("NO");					return;				}			}		}		System.out.println("YES");	}		static int count(char matrix[][], int i, int j) {				int dir[][] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};		int n = matrix.length;				int count = 0;				for(int d = 0; d < dir.length; d++) {			int x = i + dir[d][0];			int y = j + dir[d][1];						if(x >= 0 && x < n && y >= 0 && y < n && matrix[x][y] == 'o') {				count++;			}		}		return count;	}}
