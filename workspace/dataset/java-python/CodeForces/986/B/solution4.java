import java.util.*;import java.io.*;Â public class PetrPermutations {    public static void main(String[] args) {        FastScanner scanner = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        int N = scanner.nextInt();        int[] perm = new int[N];        for(int i = 0; i < N; i++) perm[i] = scanner.nextInt();        int swaps = 0;        boolean[] vis = new boolean[N];        for(int i =0; i < N; i++) {            int j = i, cycle = 0;            while(!vis[j]) {                vis[j] = true;                j = perm[j]-1;                cycle++;            }            if (cycle > 0) swaps += cycle -1;        }        if (swaps % 2 != N%2) out.println("Um_nik");        else out.println("Petr");        out.flush();    }        public static class FastScanner {        BufferedReader br;        StringTokenizer st;                public FastScanner(Reader in) {            br = new BufferedReader(in);        }                public FastScanner() {            this(new InputStreamReader(System.in));        }                String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }                long nextLong() {            return Long.parseLong(next());        }                double nextDouble() {            return Double.parseDouble(next());        }                String readNextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }                int[] readIntArray(int n) {            int[] a = new int[n];            for (int idx = 0; idx < n; idx++) {                a[idx] = nextInt();            }            return a;        }    }}
