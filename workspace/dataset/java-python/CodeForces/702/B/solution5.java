import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.HashMap;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        EPowersOfTwo solver = new EPowersOfTwo();        solver.solve(1, in, out);        out.close();    }     static class EPowersOfTwo {        int n;        int[] arr;         public void readInput(Scanner sc) {            n = sc.nextInt();            arr = new int[n];            for (int i = 0; i < n; i++)                arr[i] = sc.nextInt();        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            readInput(sc);            HashMap<Integer, Integer> map = new HashMap<>();            long ans = 0;            for (int i = 0; i < n; i++) {                for (int j = 1; j < 31; j++) {                    ans += map.getOrDefault((1 << j) - arr[i], 0);                }                map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);            }            pw.println(ans);        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }}   				 	     	    			   		 	  		
