import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        MyScanner in = new MyScanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, MyScanner in, PrintWriter out) {            int ax, ay, bx, by;            ax = in.nextInt();            ay = in.nextInt();            bx = in.nextInt();            by = in.nextInt();            int ux, uy;            ux = in.nextInt();            uy = in.nextInt();            int t;            t = in.nextInt();            int[] x = new int[t];            int[] y = new int[t];            double answer = 0;            double all = 0;            double[] prefMn = new double[t];            double[] suffMn = new double[t];            double[] mn2 = new double[t];            for (int i = 0; i < t; i++) {                x[i] = in.nextInt();                y[i] = in.nextInt();                double rd = dist(x[i], y[i], ux, uy);                double d = dist(x[i], y[i], ax, ay);                prefMn[i] = suffMn[i] = d - rd;                d = dist(x[i], y[i], bx, by);                mn2[i] = d - rd;                all += rd * 2.0;            }             for (int i = 1; i < t; i++) {                prefMn[i] = Math.min(prefMn[i], prefMn[i - 1]);            }            for (int i = t - 2; i >= 0; i--) {                suffMn[i] = Math.min(suffMn[i], suffMn[i + 1]);            }            answer = all + suffMn[0];            for (int i = 0; i < t; i++) {                double left = 0;                if (i > 0) {                    left = prefMn[i - 1];                }                double right = 0;                if (i < t - 1) {                    right = suffMn[i + 1];                }                answer = Math.min(answer, all + Math.min(0, Math.min(left, right)) + mn2[i]);            }             out.print(answer);         }         private double dist(int x, int y, int x1, int y1) {            return Math.sqrt(Math.pow((double) x - x1, 2.0) + Math.pow((double) y - y1, 2.0));        }     }     static class MyScanner {        BufferedReader br;        StringTokenizer st;         public MyScanner(InputStream io) {            br = new BufferedReader(new InputStreamReader(io));        }         public String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
