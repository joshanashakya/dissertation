import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        long k = in.nextLong();        long[] C = new long[n];        for (int i=0;i<n;i++)   C[i] = in.nextLong();        long min = -1;        long l = 0L;        long r = (long)1e9;        while (l <= r)        {            long mid = (l + r) / 2;            if (check(C, mid, k, 0))            {                min = mid;                l = mid + 1;            }            else                r = mid - 1;        }        l = 0L;        r = (long)1e9;        long max = -1;        while (l <= r)        {            long mid = (l + r) / 2;            if (check(C, mid, k, 1))            {                max = mid;                r = mid - 1;            }            else                l = mid + 1;        }        if (min < max)            System.out.println(max - min);        else        {            l = 0L;            r = (long)1e9;            long ans = -1;            while (l <= r)            {                long mid = (l + r) / 2;                long count = solve(C, mid);                if (count == 0)                {                    ans = mid;                    break;                }                else if (count > 0)                {                    r = mid - 1;                }                else                    l = mid + 1;            }            if (ans == -1)                System.out.println(1);            else                System.out.println(0);        }    }    public static long solve(long[] C, long x)    {        long sum = 0L;        for (int i=0;i<C.length;i++)        {            sum += x - C[i];        }        return sum;    }    public static boolean check(long[] C, long x, long k, int flag)    {        int n = C.length;        long sum = 0L;        if (flag == 0)        {            for (int i=0;i<n;i++)                sum += Math.max(0, x - C[i]);            return (sum <= k);        }        for (int i=0;i<n;i++)            sum += Math.max(0, C[i] - x);        return (sum <= k);    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
