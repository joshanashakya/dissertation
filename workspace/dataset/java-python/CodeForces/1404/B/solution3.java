import java.util.*; import javax.swing.plaf.basic.BasicScrollPaneUI.HSBChangeListener; import java.io.*; public class A {	static BufferedReader br;	static PrintWriter pw;	static int inf = (int) 1e9;	static long mod = (long) 1e9 + 7; 	static ArrayList<Integer>[] g;	static int n;	static char[][] a;	static boolean[][] vis; 	public static void main(String[] args) throws NumberFormatException, IOException, InterruptedException {//		br = new BufferedReader(new FileReader(new File("chief.in")));//		br = new BufferedReader(new InputStreamReader(System.in));		Scanner sc = new Scanner(System.in);		pw = new PrintWriter(System.out);		int t = sc.nextInt();		while (t-- > 0) {			n = sc.nextInt();			int a = sc.nextInt() - 1;			int b = sc.nextInt() - 1;			int da = sc.nextInt();			int db = sc.nextInt();			g = new ArrayList[n];			for (int i = 0; i < g.length; i++) {				g[i] = new ArrayList<>();			}			for (int i = 0; i < n - 1; i++) {				int u = sc.nextInt() - 1;				int v = sc.nextInt() - 1;				g[u].add(v);				g[v].add(u);			}			int diam = diameter();			int dist = dist(a, -1, b);			if (dist <= da || 2 * da >= diam || da * 2 >= db)				pw.println("Alice");			else				pw.println("Bob");		}		pw.close(); 	} 	static int diameter() {		int far = bfs(0);		int far2 = bfs(far);		return dist(far, -1, far2);	} 	static int bfs(int u) {		Queue<Integer> q = new LinkedList<>();		q.add(u);		boolean[] vis = new boolean[n];		int far = -1;		while (!q.isEmpty()) {			int size = q.size();			for (int i = 0; i < size; i++) {				far = q.poll();				vis[far] = true;				for (int v : g[far]) {					if (!vis[v])						q.add(v);				} 			}		}		return far;	} 	static int dist(int u, int pa, int e) {		if (u == e)			return 0;		int min = Integer.MAX_VALUE / 2;		for (int x : g[u]) {			if (x != pa) {				min = Math.min(min, 1 + dist(x, u, e));			}		}		return min;	} 	static class Trie { 	} 	static class node {		node[] n;		int id; 		public node(int i) {			n = new node[26];			id = i;		}	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public boolean ready() throws IOException {			return br.ready();		} 	} 	static int m, k; 	static double[] memo;	static ArrayList<Integer>[] adj; 	static long gcd(long a, long b) {		if (a == 0)			return b;		return gcd(b % a, a);	} 	// method to return LCM of two numbers	static long lcm(long a, long b) {		return (a * b) / gcd(a, b);	} 	static double dis(int x, int y, int z, int w) {		return Math.sqrt((x - z) * (x - z) + (y - w) * (y - w));	} 	static int[] nxtarr() throws IOException {		StringTokenizer st = new StringTokenizer(br.readLine());		int[] a = new int[st.countTokens()];		for (int i = 0; i < a.length; i++) {			a[i] = Integer.parseInt(st.nextToken());		}		return a;	} 	static long[] nxtarrLong() throws IOException {		StringTokenizer st = new StringTokenizer(br.readLine());		long[] a = new long[st.countTokens()];		for (int i = 0; i < a.length; i++) {			a[i] = Long.parseLong(st.nextToken());		}		return a;	} 	static class pair implements Comparable<pair> {		int x;		int y; 		public pair(int d, int u) {			x = d;			y = u;		} 		@Override		public int compareTo(pair o) {			// TODO Auto-generated method stub			if (y == o.y)				return x - o.x;			return y - o.y;		} 	} 	static class triple implements Comparable<triple> {		int x;		int y;		int z; 		public triple(int a, int b, int c) {			x = a;			y = b;			z = c;		} 		@Override		public int compareTo(triple o) {			// TODO Auto-generated method stub			return x - o.x;		}	} }
