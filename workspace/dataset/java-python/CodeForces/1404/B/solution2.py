import math, \
    sys  # from itertools import permutations, combinations;import heapq,random;from collections import defaultdict,dequeimport bisect as bidef yes():print('YES')def no():print('NO')#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');def I():return (int(sys.stdin.readline()))def In():return(map(int,sys.stdin.readline().split()))def Sn():return sys.stdin.readline().strip()#sys.setrecursionlimit(1500)def dict(a):    d={}     for x in a:        if d.get(x,-1)!=-1:            d[x]+=1        else:            d[x]=1    return ddef find_gt(a, x):    'Find leftmost value greater than x'    i = bi.bisect_left(a, x)    if i != len(a):        return i    else:                    return -1class Dfs():    def __init__(self,d,n):        self.d=d        self.n=n        self.visit=[False for x in range(n+1)]     def dfs(self,start=1):        q=deque([start])        while q:            node=q.popleft()            self.visit[node]=True            for x in self.d[node]:                if self.visit[x]==False:                    q.appendleft(x)     def dfs_further(self,start=1):        height=[-1 for x in range(self.n+1)];height[start]=0;        q=deque([start])        ma,Node_last=0,-1        while q:            node=q.popleft()            for x in self.d[node]:                if height[x]==-1:                    height[x]=height[node]+1                    if height[x]>ma:                        ma,Node_last=height[x],x                    q.appendleft(x)        return [Node_last,ma] def bfs(d,n,start,end):    height=[-1 for x in range(n+1)]    height[start]=0    q=deque([start])    while q:        temp=q.popleft()        for x in d[temp]:            if height[x]==-1:                height[x]=height[temp]+1                q.append(x)    return height[end]-height[start] def main():    try:        d=defaultdict(list)        n,A,B,da,db=In()        for i in range(n-1):            a,b=In()            d[a].append(b)            d[b].append(a)        dfs=Dfs(d,n)        far_node=dfs.dfs_further()[0]        tree_length=dfs.dfs_further(start=far_node)[1]        dist=bfs(d,n,A,B)        if dist<=da:            print('Alice')        elif 2*da>=tree_length:            print('Alice')        elif db>2*da:            print('Bob')        else:            print('Alice')             except:        pass                M = 998244353P = 1000000007 if __name__ == '__main__':    for _ in range(I()):main()    #for _ in range(1):main()#End# #        ******************* All The Best *******************   #
