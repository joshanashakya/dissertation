import java.util.*; public class B {      public static void add(int u, int v, ArrayList<Integer>[] adj) {        if (adj[u] == null) {            adj[u] = new ArrayList<>();        }        adj[u].add(v);    }     public static int calcDist(int a, int b, ArrayList<Integer>[] adj) {        LinkedList<Integer> queue = new LinkedList<>();        int n = adj.length;        int[] dist = new int[n];        boolean[] visited = new boolean[n];        queue.push(a);         while (!queue.isEmpty()) {            int u = queue.removeFirst();            visited[u] = true;            for(int v: adj[u]) {                if (visited[v])                    continue;                dist[v] = dist[u] + 1;                queue.addLast(v);            }        }         return dist[b];    }     public static int calcDiam(ArrayList<Integer>[] adj) {        int n = adj.length;        LinkedList<Integer> queue = new LinkedList<>();        boolean[] visited = new boolean[n];        int[] dist = new int[n];        int[] neighbours = new int[n];         for (int u = 0; u < n; ++u) {            neighbours[u] = adj[u].size();            if (neighbours[u] == 1) {                queue.addFirst(u);            }        }         int diam = 0;        while (!queue.isEmpty()) {            int u = queue.removeFirst();            visited[u] = true;            for (int v: adj[u]) {                if (visited[v])                    continue;                diam = Math.max(diam, dist[u] + 1 + dist[v]);                dist[v] = Math.max(dist[u] + 1, dist[v]);                 neighbours[v] -= 1;                if (neighbours[v] == 1) {                    queue.addFirst(v);                    neighbours[v] = 0;                }            }        }        return diam;    }     public static boolean canACatch(int a, int b, int da, int db, ArrayList<Integer>[] adj) {        int abDist = calcDist(a, b, adj);        int treeDiam = calcDiam(adj);        //System.out.println("adDist: " + abDist + "treeDiam: " + treeDiam);         if (2 * da >= db)            return true;         if (abDist <= da)            return true;        if (2 * da >= treeDiam)            return true;         return false;    }     public static void main(String[] args) {        Scanner sc = new Scanner(System.in);         int t = sc.nextInt();        for (int j = 0; j < t; ++j) {             int n = sc.nextInt();            int a = sc.nextInt() - 1;            int b = sc.nextInt() - 1;            int da = sc.nextInt();            int db = sc.nextInt();             ArrayList<Integer>[] adj = new ArrayList[n];            for (int i = 0; i < n - 1; ++i) {                int u = sc.nextInt() - 1;                int v = sc.nextInt() - 1;                add(u, v, adj);                add(v, u, adj);            }             boolean alice = canACatch(a, b, da, db, adj);            if (alice) {                System.out.println("Alice");            } else {                System.out.println("Bob");            }        }    }}
