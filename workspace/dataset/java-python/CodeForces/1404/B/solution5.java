import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * @author khokharnikunj8 */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "khokharnikunj8", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            DTreeTag solver = new DTreeTag();            int testCount = Integer.parseInt(in.next());            for (int i = 1; i <= testCount; i++)                solver.solve(i, in, out);            out.close();        }    }     static class DTreeTag {        int[][] G;        int dist = -1;        int dia;        int a;        int b;         public int dfs(int node, int parent, int depth) {            int max1 = 0;            int max2 = 0;            if (node == b) dist = depth;            for (int i : G[node]) {                if (i == parent) continue;                int child = dfs(i, node, depth + 1) + 1;                if (child >= max1) {                    max2 = max1;                    max1 = child;                } else if (max2 <= child) {                    max2 = child;                }            }            dia = Math.max(dia, max1 + max2);            return Math.max(max1, max2);        }         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            a = in.readInt();            b = in.readInt();            int da = in.readInt();            int db = in.readInt();            int[] from = new int[n - 1];            int[] to = new int[n - 1];            for (int i = 0; i < n - 1; i++) {                from[i] = in.readInt();                to[i] = in.readInt();            }            dia = 0;            G = packGraph(from, to, n);            dfs(a, -1, 0); //        out.println((2 * da >= Math.min(dia, db) || dist <= da ? "Alice" : "Bob"));             if (dist <= da) {                out.println("Alice");            } else if (2 * da >= dia) {                out.println("Alice");            } else if (db > 2 * da) {                out.println("Bob");            } else {                out.println("Alice");            }        }         public int[][] packGraph(int[] from, int[] to, int n) {            int[][] g = new int[n + 1][];            int[] p = new int[n + 1];            for (int i : from) p[i]++;            for (int i : to) p[i]++;            for (int i = 0; i <= n; i++) g[i] = new int[p[i]];            for (int i = 0; i < from.length; i++) {                g[from[i]][--p[from[i]]] = to[i];                g[to[i]][--p[to[i]]] = from[i];            }            return g;        }     }     static class FastInput {        private final InputStream is;        private final StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private final byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String next() {            return readString();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public String readString(StringBuilder builder) {            skipBlank();             while (next > 32) {                builder.append((char) next);                next = read();            }             return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private final Writer os;        private final StringBuilder cache = new StringBuilder(5 << 20);         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
