import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.BufferedReader;import java.io.InputStreamReader; public class Two {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.call(in,out);         out.close();    }     static class TaskA {        public void call(InputReader in, PrintWriter out) {            int n , k ,a =0;            n = in.nextInt();            k = in.nextInt();            if(k>n*n){                out.println(-1);            }            else {                int[][] arr = new int[n][n];                if(k!=0) {                    arr[0][0] = 1;                    k-=1;                    if(k%2!=0){                        arr[1][1] = 1;                        k--;                    }                    for (int i = 0; i < n; i++) {                        for (int j = 0; j < n; j++) {                            if (arr[i][j] != 1 && i!=j) {                                if(k-2>=0) {                                    arr[i][j] = 1;                                    arr[j][i] = 1;                                    k -= 2;                                }                            }                            else if(arr[i][j] != 1 && i==j){                                if(k!=0){                                    arr[i][i] =1;                                    k--;                                }                            }                          }                    }                    if(k!=0){                        for (int i = 0; i <n ; i++) {                            if(arr[i][i]!=1){                                arr[i][i]=1;                                k--;                            }                            if(k==0)                                break;                        }                    }                }                for (int i = 0; i < n; i++) {                    for (int j = 0; j < n; j++) {                        out.print(arr[i][j]+" ");                    }                    out.println();                }            }        }    }     static final Random random=new Random();     static void shuffleSort(int[] arr) {        int n = arr.length;        for (int i=0; i<n; i++) {            int a=random.nextInt(n), temp=arr[a];            arr[a]=arr[i];            arr[i]=temp;        }        Arrays.sort(arr);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }     }}
