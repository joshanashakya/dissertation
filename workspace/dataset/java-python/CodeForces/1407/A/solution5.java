import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;  public class Main {    static int i,j,k,n,m,t,x,y,max=1000000;    static long ans,a,b,c,d,e,l,r,sum,mi,ma,mod=1000000007 ;    static String str;    static char ch;    static FastScanner fs = new FastScanner();     public static void main(String[] args) {         t = fs.nextInt();         PrintWriter out = new PrintWriter(System.out);         while (t-- > 0) {            n = fs.nextInt();             int[] arr = new int[n+5];             a =0;             for(i=0;i<n;i++){                m = fs.nextInt();                arr[i]= m;                if(m==1)                    a++;            }             List<Integer> ans = new ArrayList<>();             for(i=0;i<n;i++){                if(i<n-1 && arr[i]==1 && arr[i+1]==1) {                    ans.add(1);                    ans.add(1);                    i++;                }                else if (arr[i]==0)                {                    ans.add(0);                }            }             out.println(ans.size());             for(i=0;i<ans.size();i++){                out.print(ans.get(i)+" ");            }             out.println();         }        out.close();    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     //To be used with priority queues.    static class Pair implements Comparable<Pair> {        long first, second;        long len;        public Pair(long first, long second) {            this.first=first;            this.second=second;            this.len=second-first+1;        }         public int compareTo(Pair o) {            if (len!=o.len) {                return -Long.compare(len, o.len);            }            else {                return Long.compare(first, o.first);            }        }     }     static void sort(int[] a) {        ArrayList<Integer> l=new ArrayList<>();        for (int i:a) l.add(i);        Collections.sort(l);        for (int i=0; i<a.length; i++) a[i]=l.get(i);    } }
