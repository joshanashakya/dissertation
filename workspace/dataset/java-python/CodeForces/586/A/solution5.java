import java.util.*;import java.util.Map.Entry;  import java.util.*; import java.io.*; public class Main {	static class FastReader  extends Thread{		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in)); 		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	}		 static int power(int a,int b){		 if(b==0){			 return 1;		 }		 int temp=0;				 if (b%2 == 0) {			 temp=power(a,b/2);		 return temp*temp;		 } 	     else{		   temp=power(a,b/2);		   return a*temp*temp;		 		 } 		 }	 		static int binary(int a[],int start,int end,int number){		start=0;		end=a.length-1;		int mid=0; 		while(start<=end){			mid=end+(end-start)/2;			if(a[mid]==number){				return mid;			}			else			if(a[mid]<number){               start=mid+1;			}			else			end=mid-1;		}		return 0;			} static void sieve(){	 boolean bl[]=new boolean[10001];	 bl[0]=true;	 bl[1]=true;	for (int i = 2; i < bl.length; i++) {		 bl[i]=false;	}   for (int i = 2; i <=Math.sqrt(10000); i++) {	   if(bl[i]==false){	   for (int j = i*i ;j <=10000; j=j+i) {	           bl[j]=true;	   				} 			}}	for(int i=0;i<=100;++i){		System.out.println(bl[i]+" "+i);	}	   }	        	static void swap(int a[], int i, int j) {		int temp = a[i];		a[i] = a[j];		a[j] = temp;	} 	static void fill(int start, int end, int a[]) {		for (int i = 0; i < end; ++i) {			a[i] = scan.nextInt();		}	}	static int bl[]=new int[100+1];	static void PrimeFactorisation(){	int max=1000;		for(int i=4;i<=max;i+=2){	 bl[i]=2;//Factor of the two		}	for(int i=3;i<=Math.sqrt(max);++i){	if(bl[i]==i){	for(int j=i*i;j<=max;j+=i){	if(bl[j]==j){	bl[j]=i;	}		}	}	}	}	static void factors(int x){	while(x!=1){	System.out.println(bl[x]);	x=x/bl[x];		}	}		    static FastReader sc=new FastReader();	static FastReader scan = new FastReader();	private static boolean add;	static long power(long a,long b){		return (long)(Math.log(a)/Math.log(b));	}	static boolean isPowerOfTwo(long n,long m)	{		if(n==0)		return false;	 	return (int)(Math.ceil((Math.log(n) / Math.log(m)))) == 		   (int)(Math.floor(((Math.log(n) / Math.log(m)))));	}	/*H.entrySet().stream().sorted(HashMap.Entry.<Long,Long>comparingByValue().reversed()).forEach(e->{		long k=e.getKey();		System.out.print(k+" ");		  });;-*/		  	 /*static long pow(long n){              while(n>0){				 n>>=1; 			 }	 }*/	 //counting total bits	 static long countBits(long number) 	 {  		   		 // log function in base 2  		 // take only integer part 		 return (long)(Math.log(number) /  					  Math.log(2) + 1); 					 }	 static int gcd(int a,int b){		 if(b==0){			 return a; 		 }		 return gcd(b%a,a);	 }static void reverse(char a[],int start,int end){	while(start<=end){	 char temp=a[start];	 a[start]=a[end];	 a[end]=temp;	 ++start;	 --end;	}}  	public static void main(String[] args)  {  int n=scan.nextInt();  int a[]=new int[n];  for(int i=0;i<n;++i){	  a[i]=scan.nextInt();   }  int count=0;   int start=1;for(int i=0;i<n;i++){	  if(a[i]==1)++count;	  else	  if(i>=1&&i<n-1&&a[i-1]==1&&a[i+1]==1&&a[i]==0){          ++count;	  }}System.out.println(count);   }}class check1 {	int a;     int b;	check1(int a,int b){		 this.a=a;		 this.b=b;	}}	 			  		   		 	  	       		       	  	                        
