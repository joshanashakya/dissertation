import java.io.*;import java.util.Arrays;import java.util.StringTokenizer; public class main897 {    public static PrintWriter out = new PrintWriter(System.out);    public static FastScanner enter = new FastScanner(System.in);    public static int[] arr;     public static void main(String[] args) throws IOException {        int n = enter.nextInt();//кол-во ячеек в массиве        int m = enter.nextInt();//кол-во раундов        int c = enter.nextInt();//кладём числа от 1 до с        arr = new int[n];        for (int i = 0; i < m; i++) {            solve(c, enter.nextInt());            if (check()) return;        }    }     public static boolean check() {        for (int i = 0; i < arr.length; i++) {            if (arr[i] == 0) return false;        }        return true;    }     public static void solve(int c, int g) {        if (g * 2 > c) {            int i = arr.length - 1;            while (i >= 0 && arr[i] != 0) i--;            i++;            while(i<arr.length && arr[i]<g) i++;            if(i==arr.length) {                arr[arr.length-1]=g;                System.out.println(arr.length);            }            else{                arr[i-1]=g;                System.out.println(i);            }         } else {            int i = 0;            while (i < arr.length && arr[i] != 0) i++;            i--;            while (i >= 0 && arr[i] > g) i--;            if (i == -1) {                arr[0] = g;                System.out.println(1);            } else {                arr[i + 1] = g;                System.out.println(i + 2);            }        }        System.out.flush();        //System.out.println(Arrays.toString(arr));    }     static class FastScanner {        BufferedReader br;        StringTokenizer stok;         FastScanner(InputStream is) {            br = new BufferedReader(new InputStreamReader(is));        }         String next() throws IOException {            while (stok == null || !stok.hasMoreTokens()) {                String s = br.readLine();                if (s == null) {                    return null;                }                stok = new StringTokenizer(s);            }            return stok.nextToken();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }         char nextChar() throws IOException {            return (char) (br.read());        }         String nextLine() throws IOException {            return br.readLine();        }    }}
