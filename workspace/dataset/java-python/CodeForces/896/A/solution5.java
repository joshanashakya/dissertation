import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            ANephrenGivesARiddle solver = new ANephrenGivesARiddle();            solver.solve(1, in, out);            out.close();        }    }     static class ANephrenGivesARiddle {        public void solve(int testNumber, FastInput in, FastOutput out) {            Machine machine = new Machine((int) 1e5);            int q = in.readInt();            for (int i = 0; i < q; i++) {                int n = in.readInt();                long k = in.readLong();                out.append(machine.get(n, k));            }        }     }     static class Machine {        long[] length;        String s0 = "What are you doing at the end of the world? Are you busy? Will you save us?";        String prefix = "What are you doing while sending \"";        String middle = "\"? Are you busy? Will you send \"";        String suffix = "\"?";        static long inf = (long) (1e18 + 100);         public Machine(int n) {            length = new long[n + 1];            length[0] = s0.length();            for (int i = 1; i <= n; i++) {                length[i] = Math.min(inf, length[i - 1] * 2 + prefix.length() + middle.length() + suffix.length());            }        }         public char get(int n, long k) {            return get0(n, k - 1);        }         private char get0(int n, long k) {            if (k >= length[n]) {                return '.';            }            if (n == 0) {                return s0.charAt((int) k);            }            if (k < prefix.length()) {                return prefix.charAt((int) k);            }            k -= prefix.length();            if (k < length[n - 1]) {                return get0(n - 1, k);            }            k -= length[n - 1];            if (k < middle.length()) {                return middle.charAt((int) k);            }            k -= middle.length();            if (k < length[n - 1]) {                return get0(n - 1, k);            }            k -= length[n - 1];            return suffix.charAt((int) k);        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 20];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public long readLong() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             long val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
