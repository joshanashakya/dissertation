import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet;import java.util.function.Function;import java.util.stream.Collectors;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream;  public class Solution { 	public static int INF= Integer.MAX_VALUE;	public static long MOD= 1000000000+7L; 	public static int WHITE= 0;	public static int GRAY= 1;	public static int BLACK= 2;  	class Pair{		public int day;		int count; 		Pair(int d, int c){			day=d; count=c;		}	} 	static class Solver { 		public void solve(InputReader in, PrintWriter out) {			int tt=in.nextInt();			//int tt=1;			for(int cases=1;cases<=tt;cases++){				int n= in.nextInt();								int u= in.nextInt();				int r= in.nextInt();				int d= in.nextInt();				int l= in.nextInt();								int horizontal_need=0;				int hoiraizontal_must=0;				if(u==n)					hoiraizontal_must++;				if(d==n)					hoiraizontal_must++;				if(u>n-2)					horizontal_need+= (u-n+2);				if(d>n-2)					horizontal_need+= (d-n+2);				//System.out.println("horizontal_need:"+horizontal_need+" hoiraizontal_must:"+hoiraizontal_must);								if(horizontal_need > r+l){					System.out.println("NO");					continue;				}				if(r<hoiraizontal_must || l<hoiraizontal_must){					System.out.println("NO");					continue;				}												int vertical_need=0;				int vertical_must=0;				if(l==n)					vertical_must++;				if(r==n)					vertical_must++;				if(r>n-2)					vertical_need+= (r-n+2);				if(l>n-2)					vertical_need+= (l-n+2);								//System.out.println("vertical_need:"+vertical_need+" vertical_must:"+vertical_must);				if(vertical_need >u+d){					System.out.println("NO");					continue;				}				if(u<vertical_must || d<vertical_must){					System.out.println("NO");					continue;				}								System.out.println("YES");			}		}  	}  	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		PrintWriter out = new PrintWriter(outputStream);		Solver solver = new Solver();		solver.solve(in, out);		out.close();	} 	static class InputReader {		public BufferedReader reader;		public StringTokenizer tokenizer; 		public InputReader(InputStream stream) {			reader = new BufferedReader(new InputStreamReader(stream), 32768);			tokenizer = null;		} 		public String next() {			while (tokenizer == null || !tokenizer.hasMoreTokens()) {				try {					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 	}}
