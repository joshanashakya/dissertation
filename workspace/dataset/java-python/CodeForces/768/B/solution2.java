import java.util.*;import java.io.*;import java.math.*; public class Main{     final static int mod = 1000000007;    static FastReader sc;    static PrintWriter out;    static boolean test_case_input = false;     public static void solution() throws IOException    {        long n = sc.nextLong();        long l = sc.nextLong();        long r = sc.nextLong();         int len = Long.toBinaryString(n).length();        if(n == 1) len = 1;//        out.println(Long.toBinaryString(n) + " " + len);        long count = 0;        for (int i = len + 2; i >= 0; i--)        {//            out.println((len - i - 1) + " -> " + Long.toBinaryString(1L << i));            if (((1L << i) & n) != 0L)            {                long num = (1L << (len - i - 1));                long start = (long) Math.ceil((l - num) / (double) (2 * num));                long end = (long) Math.floor((r - num) /  (double) (2 * num));                if((num*(1 + 2 * start)) > r || (num*(1 + 2 * end)) < l){//                    out.println((len - i - 1) + " -> " + (num*(1 + 2 * start)) + " " + (num*(1 + 2 * end)));                    continue;                }                start = (start < 0) ? 0 : start;                count += (end - start + 1);//                out.println((len - i - 1) + " -> " + (num*(1 + 2 * start)) + " " + (num*(1 + 2 * end)));            }        }        out.println(count);    }     // log A base B    public static int logint(int x, int base)    {        return (int) (Math.log(x) / Math.log(base));    }     public static int logint(long x, long base)    {        return (int) (Math.log(x) / Math.log(base));    }     public static int logint(double x, double base)    {        return (int) (Math.log(x) / Math.log(base));    }     public static double logdouble(int x, int base)    {        return (Math.log(x) / Math.log(base));    }     public static double logdouble(long x, long base)    {        return (Math.log(x) / Math.log(base));    }     public static double logdouble(double x, double base)    {        return (Math.log(x) / Math.log(base));    }     public static long loglong(int x, int base)    {        return (long) (Math.log(x) / Math.log(base));    }     public static long loglong(long x, long base)    {        return (long) (Math.log(x) / Math.log(base));    }     public static long loglong(double x, double base)    {        return (long) (Math.log(x) / Math.log(base));    }     // GCD    public static int __gcd(int a, int b)    {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.intValue();    }     public static long __gcd(long a, long b)    {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.longValue();    }     public static void main(String args[]) throws IOException    {        long start = 0, end = 0;        try        {            File output = new File("output.txt");            sc = new FastReader();            if (output.exists())            {                out = new PrintWriter(new FileOutputStream("output.txt"));                start = System.nanoTime();            } else            {                out = new PrintWriter(System.out);            }             int test_cases = 1;            if (test_case_input) test_cases = sc.nextInt();            while (test_cases-- > 0)            {                solution();            }            if (output.exists())            {                end = System.nanoTime();                out.println("Execution time: " + (end - start) / 1000000 + " ms");            }            out.flush();            out.close();        } catch (Exception e)        {            out.println("Exception: " + e);            out.flush();            out.close();            return;        }    }     // Fast IO    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader() throws FileNotFoundException        {            File in = new File("input.txt");            if (in.exists())            {                br = new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));            } else            {                br = new BufferedReader(new InputStreamReader(System.in));            }        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                } catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         float nextFloat()        {            return Float.parseFloat(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         int[] intarr(int n)        {            int a[] = new int[n];            for (int i = 0; i < n; i++)            {                a[i] = Integer.parseInt(next());            }            return a;        }         long[] longarr(int n)        {            long a[] = new long[n];            for (int i = 0; i < n; i++)            {                a[i] = Long.parseLong(next());            }            return a;        }         float[] floatarr(int n)        {            float a[] = new float[n];            for (int i = 0; i < n; i++)            {                a[i] = Float.parseFloat(next());            }            return a;        }         double[] doublearr(int n)        {            double a[] = new double[n];            for (int i = 0; i < n; i++)            {                a[i] = Double.parseDouble(next());            }            return a;        }          int[][] intmatrix(int row, int col)        {            int a[][] = new int[row][col];            for (int i = 0; i < row; i++)            {                for (int j = 0; j < col; j++)                {                    a[i][j] = Integer.parseInt(next());                }            }            return a;        }         long[][] longmatrix(int row, int col)        {            long a[][] = new long[row][col];            for (int i = 0; i < row; i++)            {                for (int j = 0; j < col; j++)                {                    a[i][j] = Long.parseLong(next());                }            }            return a;        }         float[][] floatmatrix(int row, int col)        {            float a[][] = new float[row][col];            for (int i = 0; i < row; i++)            {                for (int j = 0; j < col; j++)                {                    a[i][j] = Float.parseFloat(next());                }            }            return a;        }         double[][] doublematrix(int row, int col)        {            double a[][] = new double[row][col];            for (int i = 0; i < row; i++)            {                for (int j = 0; j < col; j++)                {                    a[i][j] = Double.parseDouble(next());                }            }            return a;        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            } catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
