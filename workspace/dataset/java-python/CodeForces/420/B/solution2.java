import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.AbstractSet;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.TreeSet;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int m = in.nextInt();            boolean[] add = new boolean[m];            int[] id = new int[m];            boolean[] known = new boolean[n + 1];            for (int i = 0; i < m; i++) {                add[i] = (in.next().charAt(0) == '+');                id[i] = in.nextInt();                known[id[i]] = true;            }            boolean[] before = new boolean[n + 1];            int beforeQ = 0;            TreeSet<Integer> online = new TreeSet<>();            for (int i = 0; i < m; i++) {                if (add[i]) {                    online.add(id[i]);                } else {                    if (online.contains(id[i])) {                        online.remove(id[i]);                    } else {                        before[id[i]] = true;                        beforeQ++;                    }                }            }            TreeSet<Integer> leader = new TreeSet<>();            TreeSet<Integer> offline = new TreeSet<>();            for (int i = 1; i <= n; i++) {                if (!known[i] || before[i]) leader.add(i);                else offline.add(i);            }            TreeSet<Integer> nonLeader = new TreeSet<>();            for (int i = 0; i < m; i++) {                if (beforeQ != 0) {                    nonLeader.addAll(offline);                    offline.clear();                }                if (add[i]) {                    if (beforeQ == 0) leader.add(id[i]);                    beforeQ++;                    offline.remove(id[i]);                } else {                    beforeQ--;                    offline.add(id[i]);                }                if (beforeQ != 0) {                    nonLeader.addAll(offline);                    offline.clear();                }            }            leader.removeAll(nonLeader);            out.println(leader.size());            for (int i : leader) {                out.print(i + " ");            }        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
