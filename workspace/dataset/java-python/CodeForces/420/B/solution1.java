import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.util.Iterator;import java.util.Set;import java.io.IOException;import java.util.Random;import java.util.HashSet;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BOnlineMeeting solver = new BOnlineMeeting();            solver.solve(1, in, out);            out.close();        }    }     static class BOnlineMeeting {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int m = in.ri();            boolean[] occur = new boolean[n];            int[] firstSign = new int[n];            int[][] records = new int[m][2];            for (int i = 0; i < m; i++) {                records[i][0] = in.rc();                records[i][1] = in.ri() - 1;                if (firstSign[records[i][1]] == 0) {                    firstSign[records[i][1]] = records[i][0];                }                occur[records[i][1]] = true;            }            int cnt = 0;            for (int i = 0; i < n; i++) {                if (firstSign[i] == '-') {                    cnt++;                }            }            Set<Integer> possible = new HashSet<>(n);            Set<Integer> impossible = new HashSet<>(n);            for (int[] r : records) {                if (r[0] == '-') {                    cnt--;                    if (cnt != 0) {                        impossible.add(r[1]);                    } else {                        possible.add(r[1]);                    }                } else {                    cnt++;                    if (cnt != 1) {                        impossible.add(r[1]);                    } else {                        possible.add(r[1]);                    }                }            }            IntegerArrayList list = new IntegerArrayList(n);            for (int i = 0; i < n; i++) {                if (!occur[i]) {                    list.add(i);                }            }            if (possible.size() == 1) {                possible.removeAll(impossible);                if (!possible.isEmpty()) {                    list.add(possible.iterator().next());                }            }            out.println(list.size());            list.sort();            for (int x : list.toArray()) {                out.append(x + 1).append(' ');            }        }     }     static class IntegerArrayList implements Cloneable {        private int size;        private int cap;        private int[] data;        private static final int[] EMPTY = new int[0];         public IntegerArrayList(int cap) {            this.cap = cap;            if (cap == 0) {                data = EMPTY;            } else {                data = new int[cap];            }        }         public IntegerArrayList(int[] data) {            this(0);            addAll(data);        }         public IntegerArrayList(IntegerArrayList list) {            this.size = list.size;            this.cap = list.cap;            this.data = Arrays.copyOf(list.data, size);        }         public IntegerArrayList() {            this(0);        }         public void ensureSpace(int req) {            if (req > cap) {                while (cap < req) {                    cap = Math.max(cap + 10, 2 * cap);                }                data = Arrays.copyOf(data, cap);            }        }         public void add(int x) {            ensureSpace(size + 1);            data[size++] = x;        }         public void addAll(int[] x) {            addAll(x, 0, x.length);        }         public void addAll(int[] x, int offset, int len) {            ensureSpace(size + len);            System.arraycopy(x, offset, data, size, len);            size += len;        }         public void addAll(IntegerArrayList list) {            addAll(list.data, 0, list.size);        }         public void sort() {            if (size <= 1) {                return;            }            Randomized.shuffle(data, 0, size);            Arrays.sort(data, 0, size);        }         public int size() {            return size;        }         public int[] toArray() {            return Arrays.copyOf(data, size);        }         public String toString() {            return Arrays.toString(toArray());        }         public boolean equals(Object obj) {            if (!(obj instanceof IntegerArrayList)) {                return false;            }            IntegerArrayList other = (IntegerArrayList) obj;            return SequenceUtils.equal(data, 0, size - 1, other.data, 0, other.size - 1);        }         public int hashCode() {            int h = 1;            for (int i = 0; i < size; i++) {                h = h * 31 + Integer.hashCode(data[i]);            }            return h;        }         public IntegerArrayList clone() {            IntegerArrayList ans = new IntegerArrayList();            ans.addAll(this);            return ans;        }     }     static class SequenceUtils {        public static boolean equal(int[] a, int al, int ar, int[] b, int bl, int br) {            if ((ar - al) != (br - bl)) {                return false;            }            for (int i = al, j = bl; i <= ar; i++, j++) {                if (a[i] != b[j]) {                    return false;                }            }            return true;        }     }     static class Randomized {        public static void shuffle(int[] data, int from, int to) {            to--;            for (int i = from; i <= to; i++) {                int s = nextInt(i, to);                int tmp = data[i];                data[i] = data[s];                data[s] = tmp;            }        }         public static int nextInt(int l, int r) {            return RandomWrapper.INSTANCE.nextInt(l, r);        }     }     static class RandomWrapper {        private Random random;        public static final RandomWrapper INSTANCE = new RandomWrapper();         public RandomWrapper() {            this(new Random());        }         public RandomWrapper(Random random) {            this.random = random;        }         public RandomWrapper(long seed) {            this(new Random(seed));        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public char rc() {            return readChar();        }         public char readChar() {            skipBlank();            char c = (char) next;            next = read();            return c;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(int c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            return append('\n');        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
