import java.util.*;import java.io.*; public class A100187 {    static String[] ans = new String[(int) 4e5];    static int ptr = 0;    static int last = 2;    static int[][] ids;    static boolean[][] all, some;     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter pw = new PrintWriter(System.out);        int n = sc.nextInt();        ids = new int[(int) 25e5][2];         all = new boolean[(int) 25e5][2];        some = new boolean[(int) 25e5][2];        while (n-- > 0) {            update(sc.next());        }        boolean f = check();//		System.out.println(ans);        if (!f) {            pw.println(-1);        } else {            pw.println(ptr);            for (int i = 0; i < ptr; i++) {                pw.println(ans[i]);            }        }        pw.close();    }     public static boolean check() {        return check(new IP(new int[4]), root, 0);    }     public static boolean check(IP ip, int node, int idx) {        if (node == 0)            return true;//		System.out.println(ip);        if (all[node][0]) {            if (some[node][1])                return false;            ans[ptr++] = ip + "/" + idx;            return true;        } else if (all[node][1]) {            if (some[node][0])                return false;            return true;        } else if (some[node][0] && some[node][1]) {            boolean f = true;            f &= check(ip, ids[node][0], idx + 1);            ip.flip(idx);            f &= check(ip, ids[node][1], idx + 1);            ip.flip(idx);            return f;        } else if (some[node][0]) {            ans[ptr++] = ip + "/" + idx;            return true;        } else {            return true;        }    }     static final int root = 1;     public static void update(String s) {        int slash = s.length();        for (int i = s.length() - 1; i >= 0; i--) {            if (s.charAt(i) == '/') {                slash = i;                break;            }        }        IP ip = new IP(s.substring(1, slash));        int x = slash == s.length() ? 32 : Integer.parseInt(s.substring(slash + 1));        update(ip, root, 0, x, s.charAt(0) == '-' ? 0 : 1);    }     public static void update(IP ip, int node, int idx, int x, int val) {        if (x == idx) {            all[node][val] = true;            some[node][val] = true;            return;        }        some[node][val] = true;        int bit = ip.getBit(idx);        if (ids[node][bit] == 0) {            ids[node][bit] = last++;        }        update(ip, ids[node][bit], idx + 1, x, val);    }     static class IP {        int[] a;         public IP(String s) {            a = new int[4];            int idx = 0;            for (int i = 0; i < s.length(); i++) {                if (s.charAt(i) == '.') {                    idx++;                } else {                    a[idx] = a[idx] * 10 + (s.charAt(i) - '0');                }            }//			System.out.println(Arrays.toString(a));        }         public IP(int[] a) {            this.a = a;        }         public void flip(int i) {            a[i >> 3] ^= (1 << (7 - (i & 7)));        }         public int getBit(int i) {            int bit = a[i >> 3] & (1 << (7 - (i & 7)));            return bit == 0 ? 0 : 1;        }         public IP clone() {            return new IP(a.clone());        }         public String toString() {            return String.format("%d.%d.%d.%d", a[0], a[1], a[2], a[3]);        }    }     static class Node {        Node[] child = new Node[2];        boolean[] all = new boolean[2];        boolean[] some = new boolean[2];    }     static class Scanner {        BufferedReader br;        StringTokenizer st;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public Scanner(FileReader f) {            br = new BufferedReader(f);        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public int[] nextIntArr(int n) throws IOException {            int[] arr = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = Integer.parseInt(next());            }            return arr;        }     } }
