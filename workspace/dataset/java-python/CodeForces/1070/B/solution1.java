import java.io.*;import java.util.*;Â public class Main{	static LinkedList<long[]>cur;	static int cnt;	static StringBuilder sb;	static void add(long x) {		long msk=255l<<24;		long shift=24;		for(int i=0;i<3;i++) {			sb.append(((x&msk)>>shift));			sb.append('.');			msk>>=8;			shift-=8;		}		sb.append((x&msk));	}	static void process(long l,long r) {//		System.out.println(l+" "+r);		while(!cur.isEmpty()) {			int availableZeros=32;			if(l>0) {				long bit=Long.lowestOneBit(l);				while(l+bit<=cur.peek()[0]) {					l+=bit;					bit=Long.lowestOneBit(l);				}				availableZeros=Long.numberOfTrailingZeros(l);			}			int bits=0;			long range=1;			for(int i=0;i<=availableZeros;i++) {				if(l+(1l<<i)-1>r)break;				range=1l<<i;				bits=i;			}			long curr=l+range-1;			int c=0;			while(!cur.isEmpty() && cur.peek()[1]<=curr) {//				System.out.println(Arrays.toString(cur.peek())+" "+l+" "+curr);				cur.poll();				c++;			}//			System.out.println(l+" "+(curr+1)+" "+range);			if(c>0) {				cnt++;							add(l);				sb.append('/');				sb.append(32-bits);				sb.append('\n');			}			l=curr+1;		}	}	static void main() throws Exception{		int n=sc.nextInt();		long[][]events=new long[n<<1][];		for(int i=0;i<n;i++) {			int base=256*256*256;			char[]cur=sc.nextLine().toCharArray();			int idx=1;			long curVal=0;			for(int j=0;j<3;j++) {				long val=0;				while(cur[idx]!='.') {					val*=10;					val+=(cur[idx++]-'0');				}				idx++;				curVal+=val*base;				base/=256;			}			long val=0;			while(idx<cur.length && cur[idx]!='/') {				val*=10;				val+=(cur[idx++]-'0');			}			curVal+=val;			idx++;			int range=0;			if(idx<cur.length) {				val=0;				while(idx<cur.length) {					val*=10;					val+=(cur[idx++]-'0');				}				range=32-(int)val;			}			events[i<<1]=new long[] {0,curVal,cur[0]=='+'?0:1,curVal+(1l<<range)-1,i};			events[i<<1|1]=new long[] {1,curVal+(1l<<range)-1,cur[0]=='+'?0:1,i};//			System.out.println(events[i<<1][1]+" "+events[i<<1|1][1]+" "+range);		}		Arrays.sort(events,(x,y)->x[1]==y[1]?Long.compare(x[0], y[0]):Long.compare(x[1], y[1]));		int[]opened=new int[2];		boolean intersect=false;		for(int i=0;i<(n<<1);i++) {			if(events[i][0]==0) {				intersect|=opened[(int)events[i][2]^1]>0;				opened[(int)events[i][2]]++;			}			else {				opened[(int)events[i][2]]--;			}		}		if(intersect) {			pw.println(-1);			return;		}		cnt=0;		sb=new StringBuilder();		cur=new LinkedList<long[]>();		TreeSet<long[]>ts=new TreeSet<long[]>((x,y)->x[0]==y[0]?Long.compare(x[1], y[1]):Long.compare(x[0], y[0]));		long start=0;		for(int i=0;i<(n<<1);i++) {			if(events[i][0]==0) {				if(events[i][2]==0) {					process(start, events[i][1]-1);				}				else {					if(!ts.isEmpty() && ts.last()[0]>=events[i][3])continue;					ts.add(new long[] {events[i][3],events[i][4]});					cur.add(new long[] {events[i][1],events[i][3]});				}			}			else {				if(events[i][2]==0) {					start=events[i][1]+1;				}				else {					ts.remove(new long[] {events[i][1],events[i][3]});				}			}		}		process(start, (1l<<32)-1);		pw.println(cnt);		pw.println(sb);	}    public static void main(String[] args) throws Exception{        sc=new MScanner(System.in);        pw = new PrintWriter(System.out);        int tc=1;//        tc=sc.nextInt();        for(int i=1;i<=tc;i++) {//            pw.printf("Case %d:\n", i);            main();        }        pw.flush();    }    static PrintWriter pw;    static MScanner sc;    static class MScanner {        StringTokenizer st;        BufferedReader br;        public MScanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }             public MScanner(String file) throws Exception {            br = new BufferedReader(new FileReader(file));        }             public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }        public int[] intArr(int n) throws IOException {            int[]in=new int[n];for(int i=0;i<n;i++)in[i]=nextInt();            return in;        }        public long[] longArr(int n) throws IOException {            long[]in=new long[n];for(int i=0;i<n;i++)in[i]=nextLong();            return in;        }        public int[] intSortedArr(int n) throws IOException {            int[]in=new int[n];for(int i=0;i<n;i++)in[i]=nextInt();            shuffle(in);            Arrays.sort(in);            return in;        }        public long[] longSortedArr(int n) throws IOException {            long[]in=new long[n];for(int i=0;i<n;i++)in[i]=nextLong();            shuffle(in);            Arrays.sort(in);            return in;        }        public Integer[] IntegerArr(int n) throws IOException {            Integer[]in=new Integer[n];for(int i=0;i<n;i++)in[i]=nextInt();            return in;        }        public Long[] LongArr(int n) throws IOException {            Long[]in=new Long[n];for(int i=0;i<n;i++)in[i]=nextLong();            return in;        }        public String nextLine() throws IOException {            return br.readLine();        }             public int nextInt() throws IOException {            return Integer.parseInt(next());        }             public double nextDouble() throws IOException {            return Double.parseDouble(next());        }             public char nextChar() throws IOException {            return next().charAt(0);        }             public long nextLong() throws IOException {            return Long.parseLong(next());        }             public boolean ready() throws IOException {            return br.ready();        }             public void waitForInput() throws InterruptedException {            Thread.sleep(3000);        }            }    static void shuffle(int[]in) {        for(int i=0;i<in.length;i++) {            int idx=(int)(Math.random()*in.length);            int tmp=in[i];            in[i]=in[idx];            in[idx]=tmp;        }    }    static void shuffle(long[]in) {        for(int i=0;i<in.length;i++) {            int idx=(int)(Math.random()*in.length);            long tmp=in[i];            in[i]=in[idx];            in[idx]=tmp;        }    }}
