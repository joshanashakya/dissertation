import os, sysfrom io import BytesIO, IOBasefrom math import sqrt,ceil BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii") def dtb(n):    return bin(n).replace("0b", "")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") n=int(input())t=sqrt(n)d=dict()i=2while i<n and i<=t:    if n%i==0:        d[i]=d.get(i,0)        while n%i==0:            d[i]+=1            n//=i    i+=1if n!=1:    d[n]=d.get(n,0)+1ans=1t=0t2=10**10tot=0l=0for i in d:    ans*=i    t=max(d[i],t)    t2=min(d[i],t2)if t>1:    ck=dtb(t).lstrip('0')    o=ck.count('1')    #print(ck)    if o>1:        tot+=len(ck)+1        l=1    else:        tot+=len(ck)-1    #print(t,t2)    if not l and t!=t2:        tot+=1 #print(d,n,ck)print(ans,tot)
