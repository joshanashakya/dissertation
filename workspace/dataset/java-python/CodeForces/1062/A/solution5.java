import java.util.*;import java.math.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;      //--------------->>>>IF YOU ARE HERE FOR QUICKSORT HACK THEN SORRY NO HACK FOR YOU<<<------------------- public class a{      static int[] count,count1,count2;     static Node[] nodes;     static long[] arr;     static int[] dp;     static char[] ch,ch1;     static long[] darr,farr;     static char[][] mat,mat1;     static long x,h;     static long maxl;     static double dec;     static long mx = (long)1e9+7;     static String s;     static long minl;     static int start_row;     static int start_col;          static int end_row;          static int end_col;          static long mod = 998244353;     // static int minl = -1;     // static long n;     static int n,n1,n2;     static long a;     static long b;     static long c;     static long d;     static long y,z;     static int m;     static long k;     static String[] str,str1;     static Set<Integer> set,set1,set2;     static SortedSet<Long> ss;     static List<Character> list,list1,list2,list3;     static PriorityQueue<Long> pq,pq1;     static LinkedList<Integer> ll;     static Map<Integer,List<Integer>> map,map1;     static StringBuilder sb,sb1,sb2;     static int index;     static int[] dx = {0,-1,0,1,-1,1,-1,1};     static int[] dy = {-1,0,1,0,-1,-1,1,1};      // public static void solve(){      //    FastScanner sc = new FastScanner();     //    // int t = sc.nextInt();     //    int t = 1;     //    for(int tt = 0 ; tt < t ; tt++){     //        int n = sc.nextInt();     //        int m = sc.nextInt();     //        int prev = 0;      //        for(int i = 0 ; i < n ; i++){     //           int s = sc.nextInt();     //           int e = sc.nextInt();     //           if(s > prev){     //                System.out.println("NO");     //                return;     //           }     //            prev = Math.max(prev,e);     //        }     //        if(prev == m)     //            System.out.println("YES");     //        else     //            System.out.println("NO");      //        // System.out.println(sb);     //    }                     // }      //--------------->>>>IF YOU ARE HERE FOR QUICKSORT HACK THEN SORRY NO HACK FOR YOU<<<-------------------      public static void solve(){         int ans = 0;        for(int i = 0 ; i < n ; i++){            if(arr[i] == (i+1))                ans = Math.max(ans,i);            if(arr[i] + (n-i-1) == 1000)                ans = Math.max(ans,(n-i-1));        }         for(int j = 1 ; j < n ; j++){            for(int i = j+1 ; i < n ;i++){                if(arr[i] == arr[i-j-1] + (j+1)){                    ans = Math.max(ans,j);                    break;                }            }        }        System.out.println(ans);     }      public static void main(String[] args) {             FastScanner sc = new FastScanner();            // Scanner sc = new Scanner(System.in);            // int t = sc.nextInt();            int t = 1;            // int l = 1;            while(t > 0){                                // n = sc.nextInt();                // n = sc.nextLong();                // a = sc.nextLong();                // b = sc.nextLong();                // c = sc.nextLong();                // d = sc.nextLong();                 // x = sc.nextLong();                // y = sc.nextLong();                                // n = sc.nextLong();                n = sc.nextInt();                // n1 = sc.nextInt();                 // m = sc.nextInt();                 // k = sc.nextLong();                // s = sc.next();                 // ch = sc.next().toCharArray();                // ch1 = sc.next().toCharArray();                 arr = new long[n];                for(int i = 0 ; i < n ; i++){                    arr[i] = sc.nextLong();                }                // ch = sc.next().toCharArray();                // // m = n;                // darr = new long[m];                // for(int i = 0 ; i < m ; i++){                //     darr[i] = sc.nextLong();                // }                 // farr = new int[n];                // for(int i = 0; i < n ; i++){                //     farr[i] = sc.nextInt();                // }                 // mat = new int[n][n];                // for(int i = 0 ; i < n ; i++){                //     for(int j = 0 ;  j < n ; j++){                //         mat[i][j] = sc.nextInt();                //     }                // }                 // mat = new char[n][m];                // for(int i = 0 ; i < n ; i++){                //     String s = sc.next();                //     for(int j = 0 ; j < m ; j++){                //         mat[i][j] = s.charAt(j);                //     }                // }                 // str = new String[n];                // for(int i = 0 ; i < n ; i++)                //     str[i] = sc.next();                 // nodes = new Node[n];                // for(int i = 0 ; i < n ;i++)                //     nodes[i] = new Node(sc.nextInt(),sc.nextInt());                 // System.out.println(solve()?"YES":"NO");                 solve();                        // System.out.println(solve());                 t -= 1;            }      }     public static int log(long n){          if(n == 0 || n == 1)             return 0;          if(n == 2)             return 1;          double num = Math.log(n);         double den = Math.log(2);          if(den == 0)             return 0;          return (int)(num/den);     }     public static boolean isPrime(long n) {     // Corner cases         if (n <= 1)              return false;          if (n <= 3)              return true;               // This is checked so that we can skip          // middle five numbers in below loop         if (n%2 == 0 || n%3 == 0)             return false;               for (int i=5; i*i<=n; i=i+6)             if (n%i == 0 || n%(i+2) == 0)                return false;               return true;     }       public static long gcd(long a,long b){         if(b%a == 0){            return a;        }        return gcd(b%a,a);      }      // public static void swap(int i,int j){     //     long temp = arr[j];     //     arr[j] = arr[i];     //     arr[i] = temp;     // }      static final Random random=new Random();        static void ruffleSort(long[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n);            long temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }     static class Node{        Integer first;        Integer second;        Node(Integer f,Integer s){            this.first = f;            this.second = s;        }    }      static class FastScanner {                 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));                StringTokenizer st=new StringTokenizer("");                String next() {                        while (!st.hasMoreTokens())                                try {                                        st=new StringTokenizer(br.readLine());                                } catch (IOException e) {                                        e.printStackTrace();                                }                        return st.nextToken();                }                                int nextInt() {                        return Integer.parseInt(next());                }                int[] readArray(int n) {                        int[] a=new int[n];                        for (int i=0; i<n; i++) a[i]=nextInt();                        return a;                }                long nextLong() {                        return Long.parseLong(next());                }        } }
