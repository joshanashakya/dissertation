import java.io.*;import java.util.*; public class CF {    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));         StringTokenizer st = new StringTokenizer(br.readLine());        int n = Integer.parseInt(st.nextToken());        int k = Integer.parseInt(st.nextToken());         PriorityQueue<Pair> pq = new PriorityQueue<>((o1, o2) -> -(o1.b - o2.b));         Pair[] cost = new Pair[n];        st = new StringTokenizer(br.readLine());        for (int i = 1; i <= n; i++) {            int c = Integer.parseInt(st.nextToken());            cost[i - 1] = new Pair(i, c);        }         Arrays.sort(cost, (o1, o2) -> {            if (o1.a - o2.a != 0) return o1.a - o2.a;            return -(o1.a - o2.b);        });         int[] ret = new int[n];         long totalCost = 0;         int costIndex = 0;         int t = k + 1;        while (t <= n + k) {            if (t < k + 1 + n) {                while (costIndex < cost.length && cost[costIndex].a <= t) {                    pq.add(cost[costIndex++]);                }            } else if (pq.isEmpty()) {                break;            }             Pair temp = pq.peek();            int head = temp.b;            int start = temp.a;             if (start <= t) {                totalCost += (long)(t - start) * head;                ret[start - 1] = t;                pq.poll();                t++;            } else {                t = cost[costIndex].a;            }        }         pw.println(totalCost);        for (int num : ret) pw.print(num + " ");         pw.close();    }     static class Pair {        int a, b;         public Pair(int a, int b) {            this.a = a;            this.b = b;        }         @Override        public String toString() {            return "Pair{" +                    "a=" + a +                    ", b=" + b +                    '}';        }    }}
