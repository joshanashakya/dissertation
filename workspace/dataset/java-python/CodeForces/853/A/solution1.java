import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.PriorityQueue;import java.util.StringTokenizer; public class Planning { 	static class Node implements Comparable<Node> { 		int i;		int c; 		Node(int i, int c) {			this.i = i;			this.c = c;		} 		@Override		public int compareTo(Node o) {			return o.c - this.c;		} 	} 	public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter out = new PrintWriter(System.out); 		int n = sc.nextInt();		int k = sc.nextInt(); 		Node[] arr = new Node[n];		for (int i = 0; i < n; i++) {			arr[i] = new Node(i, sc.nextInt());		} 		PriorityQueue<Node> q = new PriorityQueue<Node>();		long cur = 0;		long sum = 0; 		for (int i = 0; i < k; i++) {			sum += cur;			cur += arr[i].c;			q.add(arr[i]);		}		sum += cur; 		int[] ans = new int[n]; 		for (int i = k; i < n + k; i++) {			if (i < n) {				cur += arr[i].c;				q.add(arr[i]);			} 			Node temp = q.poll();			cur -= temp.c;			ans[temp.i] = i; 			sum += cur; 		} 		out.println(sum);		for (int e : ans)			out.print((e + 1) + " ");		out.close(); 	} 	public static class FastScanner {		BufferedReader br;		StringTokenizer st; 		public FastScanner(String s) {			try {				br = new BufferedReader(new FileReader(s));			} catch (FileNotFoundException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		} 		public FastScanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String nextToken() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(nextToken());		} 		long nextLong() {			return Long.parseLong(nextToken());		} 		double nextDouble() {			return Double.parseDouble(nextToken());		}	} }
