// package Greedy; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class Planning {    public static void main(String[] args)throws IOException {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        String line[]=br.readLine().split(" ");        int n=Integer.parseInt(line[0]);        int k=Integer.parseInt(line[1]);        Plane plane[]=new Plane[n];        line=br.readLine().split(" ");        PriorityQueue<Plane> pq=new PriorityQueue<>();        for(int i=0;i<n;i++){            int t=Integer.parseInt(line[i]);            plane[i]=new Plane(i+1,t);            if(i<k){                pq.add(plane[i]);            }        }//        Arrays.sort(plane);//        HashMap<Integer,Boolean> visited=new HashMap<>();//        boolean visited[]=new boolean[n+k+1];         int ans[]=new int[n];        long cost=0;         for(int i=k;i<n+k;i++){            if(i<n){                pq.add(plane[i]);            }            Plane curr=pq.poll();//            System.out.println(curr.index-1);            ans[curr.index-1]=i+1;            cost+=(long)(curr.cost)*(i+1-curr.index);        }        StringBuilder str=new StringBuilder();        for(int i=0;i<n;i++){            str.append(ans[i]+" ");        }        System.out.println(cost);        System.out.println(str.toString());    }} class Plane implements Comparable<Plane> {    int index,cost;    public Plane(int index,int cost){        this.index=index;        this.cost=cost;    }     @Override    public int compareTo(Plane o2) {        if(this.cost>o2.cost){            return -1;        }        if(this.cost<o2.cost){            return 1;        }        return o2.index-this.index;    } }
