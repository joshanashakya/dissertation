import java.util.*; import java.io.*; import java.math.*; public class Main implements Runnable{    FastScanner sc;    PrintWriter pw;    final class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            try {                br = new BufferedReader(new InputStreamReader(System.in));                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }        }         public long nlo() {            return Long.parseLong(next());        }         public String next() {            if (st.hasMoreTokens()) return st.nextToken();            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(next());        }         public String nli() {            String line = "";            if (st.hasMoreTokens()) line = st.nextToken();            else try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            while (st.hasMoreTokens()) line += " " + st.nextToken();            return line;        }         public double nd() {            return Double.parseDouble(next());        }    }    public static void main(String[] args) throws Exception    {        new Thread(null,new Main(),"codeforces",1<<28).start();    }    public void run()    {        sc=new FastScanner();        pw=new PrintWriter(System.out);        try{solve();}        catch(Exception e)        {System.out.println(e);}        pw.flush();        pw.close();    }    public long gcd(long a,long b)    {        return b==0L?a:gcd(b,a%b);    }    public long ppow(long a,long b,long mod)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            a%=mod;            tmp%=mod;            b>>=1;        }        return (tmp*a)%mod;    }    public  int gcd(int x,int y)    {        return y==0?x:gcd(y,x%y);    }    //////////////////////////////////    /////////////  LOGIC  ///////////    ////////////////////////////////    public int k;    public class Pair{        int a;        long c;        Pair(int b,long z)        {            a=b;            c=z;        }    }    public void solve() throws Exception    {        int n=sc.ni();        int m=sc.ni();        int k=sc.ni();        HashMap<Integer,ArrayList<Pair>> arv,dep;        arv=new HashMap();        dep=new HashMap();        for(int i=0;i<m;i++)        {            int a=sc.ni();            int b=sc.ni();            int c=sc.ni();            int d=sc.ni();            if(b==0)            {                if(!dep.containsKey(a))                dep.put(a,new ArrayList());                dep.get(a).add(new Pair(c,d));            }            else            {                if(!arv.containsKey(a))                arv.put(a,new ArrayList());                arv.get(a).add(new Pair(b,d));            }        }        long[] prr=new long[1000001];        long[] srr=new long[1000001];        Arrays.fill(prr,-1);        Arrays.fill(srr,-1);        HashMap<Integer,Long> map=new HashMap();        long tmp=0;        for(int i=1;i<=1000000;i++)        {            if(arv.containsKey(i))            {                for(Pair p:arv.get(i))                {                    if(map.containsKey(p.a))                    {                        if(map.get(p.a)>p.c)                        {                            tmp-=map.get(p.a);                            tmp+=p.c;                            map.put(p.a,p.c);                        }                    }                    else                    {                        map.put(p.a,p.c);                        tmp+=p.c;                    }                }            }            if(map.size()==n)            prr[i]=tmp;        }                        map=new HashMap();        tmp=0;        for(int i=1000000;i>0;i--)        {            if(dep.containsKey(i))            {                for(Pair p:dep.get(i))                {                    if(map.containsKey(p.a))                    {                        if(map.get(p.a)>p.c)                        {                            tmp-=map.get(p.a);                            tmp+=p.c;                            map.put(p.a,p.c);                        }                    }                    else                    {                        map.put(p.a,p.c);                        tmp+=p.c;                    }                }            }            if(map.size()==n)            srr[i]=tmp;        }                long ans=-1;        for(int i=2;i<=1000000;i++)        {            if(i+k<=1000000&&prr[i-1]!=-1&&srr[i+k]!=-1)            {                if(ans==-1)                ans=prr[i-1]+srr[i+k];                else                ans=Math.min(ans,prr[i-1]+srr[i+k]);            }        }        pw.println(ans);    }}
