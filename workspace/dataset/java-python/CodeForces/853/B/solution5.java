 import java.io.*;import java.util.*;public class B853 {        public static void main(String args[])throws IOException    {        Reader sc=new Reader();        int n=sc.nextInt();        int m=sc.nextInt();        int k=sc.nextInt();        List<flight> pln[]=new ArrayList[1000001];        int arr[][]=new int[n+1][2];int minday=0,maxday=10000000;        for(int i=1;i<=1000000;i++)        {            pln[i]=new ArrayList<>();        }        for(int i=0;i<m;i++)        {            int day=sc.nextInt();            int ind=sc.nextInt();            int aa=sc.nextInt();            int pri=sc.nextInt();            if(aa==0)            {                pln[day].add(new flight(ind,pri,0));                if(arr[ind][0]==0)                    arr[ind][0]=day;                else if(day<arr[ind][0])                    arr[ind][0]=day;            }            else            {                pln[day].add(new flight(aa,pri,1));                if(day>arr[aa][1])                    arr[aa][1]=day;            }                                }        for(int i=1;i<=n;i++)        {            minday=Math.max(minday,arr[i][0]);            maxday=Math.min(maxday,arr[i][1]);        }        if(maxday<=minday+k)        {            System.out.println(-1);            System.exit(0);        }        long price[][]=new long[1000001][2];long inf=100000000000000L;        arr=new int[n+1][2];long p1=0,p2=0;long res=inf;        for(int i=1;i<=minday;i++)        {            for(flight ob: pln[i])            {                if(ob.ad==0)                {                    if(arr[ob.ind][0]==0)                    {                        p1+=ob.pri;                        arr[ob.ind][0]=ob.pri;                    }                    else if(ob.pri<arr[ob.ind][0])                    {                        p1+=ob.pri-arr[ob.ind][0];                        arr[ob.ind][0]=ob.pri;                    }                }            }        }        price[minday+k][0]=p1;        //System.out.println(p1);        for(int i=minday+k+1;i<maxday;i++)        {            for(flight ob:pln[i-k])            {                if(ob.ad==0)                {                    if(arr[ob.ind][0]==0)                    {                        p1+=ob.pri;                        arr[ob.ind][0]=ob.pri;                    }                    else if(ob.pri<arr[ob.ind][0])                    {                        p1+=ob.pri-arr[ob.ind][0];                        arr[ob.ind][0]=ob.pri;                    }                }            }            price[i][0]=p1;        }                                                        for(int i=maxday;i<=1000000;i++)        {            for(flight ob: pln[i])            {                if(ob.ad==1)                {                    if(arr[ob.ind][1]==0)                    {                        p2+=ob.pri;                        arr[ob.ind][1]=ob.pri;                    }                    else if(ob.pri<arr[ob.ind][1])                    {                        p2+=ob.pri-arr[ob.ind][1];                        arr[ob.ind][1]=ob.pri;                    }                }            }        }        price[maxday][1]=p2;        res=Math.min(res,p2+price[maxday-1][0]);        for(int i=maxday-1;i>minday+k;i--)        {            for(flight ob:pln[i])            {                if(ob.ad==1)                {                    if(arr[ob.ind][1]==0)                    {                        p2+=ob.pri;                        arr[ob.ind][1]=ob.pri;                    }                    else if(ob.pri<arr[ob.ind][1])                    {                        p2+=ob.pri-arr[ob.ind][1];                        arr[ob.ind][1]=ob.pri;                    }                }            }            price[i][1]=p2;            res=Math.min(res,p2+price[i-1][0]);        }        System.out.println(res);        /*for(int i=1;i<=maxday;i++)        {            System.out.println(i+" "+price[i][0]+" "+price[i][1]);        }*/            }}class flight{    int ind,pri,ad;    public flight(int i,int p,int a)    {        this.ind=i;        this.pri=p;        this.ad=a;    }}class Reader {		final private int BUFFER_SIZE = 1 << 16;		private DataInputStream din;		private byte [] buffer;		private int bufferPointer, bytesRead;				public Reader () {			din = new DataInputStream (System.in);			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		}				public Reader (String file_name) throws IOException {			din = new DataInputStream (new FileInputStream (file_name));			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		}				public String readLine () throws IOException {			byte [] buf = new byte[1024];			int cnt = 0, c;			while ((c = read ()) != -1) {				if (c == '\n')					break;				buf[cnt++] = (byte) c;			}			return new String (buf, 0, cnt);		}				public int nextInt () throws IOException {			int ret = 0;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		}				public long nextLong () throws IOException {			long ret = 0;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		}				public double nextDouble () throws IOException {			double ret = 0, div = 1;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (c == '.')				while ((c = read ()) >= '0' && c <= '9')					ret += (c - '0') / (div *= 10);			if (neg)				return -ret;			return ret;		}				private void fillBuffer () throws IOException {			bytesRead = din.read (buffer, bufferPointer = 0, BUFFER_SIZE);			if (bytesRead == -1)				buffer[0] = -1;		}				private byte read () throws IOException {			if (bufferPointer == bytesRead)				fillBuffer ();			return buffer[bufferPointer++];		}				public void close () throws IOException {			if (din == null)				return;			din.close ();		}	} 
