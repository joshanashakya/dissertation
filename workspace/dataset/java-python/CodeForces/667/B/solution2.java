import java.lang.reflect.Array;import java.util.*; public class Main {    private static Scanner in = new Scanner(System.in);     /*    //     最长连续递增子序列        public static void main(String[] args) {            Scanner in = new Scanner(System.in);            int len = in.nextInt();    //        List<Integer> list1 = new ArrayList<>(100001);    //        List<Integer> list2 = new ArrayList<>(100001);            int[] list1 = new int[100010];            int[] list2 = new int[100010];            for(int i = 0 ;i < len ; i++){                int num = in.nextInt();    //            list1.add(num);                list1[i] = num;                if(i == 0){    //                list2.add(1);                    list2[i] = 1;                }else if(list1[i] > list1[i-1]){                    list2[i] = 1;                }else                    list2[i] = -1;            }             int start = 0 ,len2 =1 ,len3 = 1;             for (int i = 1 ; i < len ; i++){                if(list2[i] == -1){                    if(len2 > len3){                        len3 = len2;                        len2 = 1;                        start = i - len3;                    }                 }else {                    len2++;                    if(i == len -1){                        len3 = len2;                        len2 = 1;                        start = i - len3 +1;                    }                }            }    //        System.out.println(len3);            if(len == 1)                len3 = 1;            for(int i = 0;i<len3;i++){                if(i!=0)                    System.out.print(" ");                System.out.print(list1[start + i]);            }        }     //     装箱问题        public static void main(String[] args) {            int n = in.nextInt();            int[] arr = new int[1001];            int[] arr1 = new int[1001];            int[] arr2 = new int[1001];             int num = 0;            for(int i=0;i<n;i++){                arr[i] = 100;                arr1[i] = in.nextInt();                for(int j=0;j<=i;j++){                    if(arr[j]>=arr1[i]){                        arr[j]-=arr1[i];                        arr2[i] = j+1;                        if(j>num)                            num = j;                        break;                    }                }            }             for(int i=0;i<n;i++){                System.out.println(arr1[i]+" "+arr2[i]);            }            System.out.println(num+1);        }     //     彩虹瓶        public static void main(String[] args) {            int n = in.nextInt();            int m = in.nextInt();            int k = in.nextInt();            while(k>0){                k--;                int flag = 0;                int[] arr = new int[1001];                Stack<Integer> stack = new Stack<Integer>();                while (!stack.empty()){                    stack.pop();                }                int j = 1;                for(int i = 0 ;i < n ; i++){                    arr[i] = in.nextInt();    //                System.out.print(arr[i]+" / ");                }    //            System.out.println("");                for(int i = 0 ; i < n ; i++){                    if(arr[i] == j){                        j++;    //                    System.out.println(arr[i] + " / ");                    }                    else{                        stack.push(arr[i]);                        if (stack.size() > m){                            flag = 1;    //                        System.out.println(stack.size() + " + ");                            break;                        }                    }                    while (!stack.empty() && stack.peek()==j && j <= n){                        j++;    //                    System.out.print(j + " / ");                        stack.pop();                    }                }                if (flag == 0 && stack.empty()){                    System.out.println("YES");                }else {                    System.out.println("NO");                }            }        }      //    A + Reverse B        public static void main(String[] args) {            Integer num1 = in.nextInt();            Integer num2 = in.nextInt();             String s1 = num1.toString();            String s2 = num2.toString();             s1 = sreverse(s1);            s2 = sreverse(s2);            System.out.println(Integer.parseInt(s1)+Integer.parseInt(s2));          }         private static String sreverse(String s){            int j = s.length();            for(int i = j-1 ; i > 0 ; i--){                if(s.charAt(i)!='0'){                    break;                }else{                    j--;                }            }             return new StringBuffer(s.substring(0,j)).reverse().toString();        }          private static int map[][] = new int[11][11];        private static int vis[] = new int[11];        private static int n;         private static void dfs(int x){            vis[x] = 1;            System.out.print(x + " ");            for(int i = 0 ; i < n ; i++){                if(vis[i] == 0 && map[i][x] == 1){                    dfs(i);                }            }        }         private static void bfs(int x){            vis[x] = 1;            Queue<Integer> queue = new LinkedList<>();            queue.offer(x);            while(queue.size() > 0){                int temp = queue.poll();                System.out.print(temp+" ");                for(int i = 0 ; i < n ; i++){                    if(vis[i] == 0 && map[i][temp] == 1){                        vis[i] = 1;                        queue.offer(i);                    }                }            }        }         public static void main(String[] args) {            n = in.nextInt();            int e = in.nextInt();             for(int i=0;i<e;i++){                int n1 = in.nextInt();                int n2 = in.nextInt();                map[n1][n2] = map[n2][n1] = 1;            }             for(int i = 0 ;i < n ; i++){                if(vis[i] == 0){                    System.out.print("{ ");                    dfs(i);                    System.out.println("}");                }            }             Arrays.fill(vis,0);             for(int i = 0 ;i < n ; i++){                if(vis[i] == 0){                    System.out.print("{ ");                    bfs(i);                    System.out.println("}");                }            }         }     //    冒泡法排序        public static void main(String[] args) {            int n = in.nextInt();            int k = in.nextInt();            int[] arr = new int[101];            for (int i = 0; i < n; i++) {                arr[i] = in.nextInt();            }             for (int i = 0; i < k; i++) {                for (int j = 0; j < n - 1; j++) {                    if (arr[j] > arr[j + 1]) {                        int temp = arr[j];                        arr[j] = arr[j + 1];                        arr[j + 1] = temp;                    }                }            }             for (int i = 0; i < n; i++) {                if (i != 0)                    System.out.print(" ");                System.out.print(arr[i]);            }        }     //    公路村村通        private static int[][] map = new int[1002][1002];        private static int[] vis = new int[1002];        private static int[] weight = new int[1002];        private static int n;         private static void prim(){            int i,j,k,minn,ans = 0;             for (i = 1; i <= n; i++){                weight[i] = map[1][i];                System.out.println(weight[i]+"--");                vis[i] = 0;            }            vis[1] = 1;            for(i = 2; i <= n; i++){                minn = Integer.MAX_VALUE;                j = 1;                k = 0;                while(j <= n){                    if(vis[j] == 0 && weight[j] < minn){                        minn = weight[j];                        k = j;                    }                    j++;                }                 if(k > 0){                    ans += weight[k];                    System.out.println(k+"++"+weight[k]+"++");                    vis[k] = 1;                    for(j = 1; j <= n; j++){                        if(vis[j] == 0 && weight[j] > map[k][j])                            weight[j] = map[k][j];                    }                }else {                    System.out.println("-1");                    return;                }            }            System.out.println(ans);        }         public static void main(String[] args) {             for(int i = 0; i < 1002; i++){                for(int j = 0; j < 1002; j++){                    map[i][j] = map[j][i] = Integer.MAX_VALUE;                    if(i == j)                        map[i][j] = 0;                }            }             n = in.nextInt();            int m = in.nextInt();    //        System.out.println(n+"-"+m);            if(m < n-1){                System.out.println("-1");                return ;            }            for(int i = 0; i <m; i++){                int num1 = in.nextInt();                int num2 = in.nextInt();                int dis = in.nextInt();     //            System.out.println(num1+"++"+num2+"++"+dis+"--"+i);                 if(dis < map[num1][num2]){                    map[num1][num2] = map[num2][num2] = dis;                }             }             prim();         }   //    出栈序列的合法性    public static void main(String[] args) {        int m = in.nextInt();        int n = in.nextInt();        int k = in.nextInt();         for(int i = 0; i < k; i++){             Stack<Integer> stack = new Stack<Integer>();            while(!stack.empty())                stack.pop();            Vector<Integer> vector = new Vector<>(n);             for(int j = 0; j < n; j++)                vector.add(in.nextInt());            int num = 1;            boolean flag = false;            int x = 0;            for(int j = 1; j <= n; j++){                while(!stack.empty() && stack.peek() == vector.get(x)){                    stack.pop();                    x++;                }                if(j == vector.get(x)){                    x++;                }else{                    stack.push(j);                    if(stack.size() >= m){                        flag = true;                        break;                    }                }            }            if(flag){                System.out.println("NO");                continue;            }            while(!stack.empty() && stack.peek() == vector.get(x)){                stack.pop();                x++;            }            if(!stack.empty()){                System.out.println("NO");            }else {                System.out.println("YES");            }        }    }      public static void main(String[] args) {        int weight = in.nextInt();        int height = in.nextInt();         Vector<Integer> weight1 = new Vector<>(2);        Vector<Integer> height1 = new Vector<>(2);         for (int i = 0; i < 2; i++){            weight1.add(in.nextInt());            height1.add(in.nextInt());        }         while (height > 0){            weight += height;            boolean flag = false;            for(int i = 0; i < 2; i++){                if(height == height1.get(i)){                    weight -= weight1.get(i);                    if(weight < 0)                        weight = 0;                    height --;                    flag = true;                    break;                }            }             if(flag)                continue;            height--;        }        if (weight < 0)            weight = 0;        System.out.println(weight);    }      *///    Coat of Anticubism    public static void main(String[] args) {        int n = in.nextInt();         Long sum = 0l;        int max = -1;        for(int i = 0; i < n; i++){            int num = in.nextInt();            max = Math.max(max,num);            sum += num;        }         System.out.println(max - (sum - max) + 1);    }} 	 	 			  		 	    	        	
