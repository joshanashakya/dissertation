import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        a457 solver = new a457();        solver.solve(1, in, out);        out.close();    }     static class a457 {        public void solve(int testNumber, InputReader in, PrintWriter out) {            String s1 = in.next();            String s2 = in.next();            int len = Math.max(s1.length(), s2.length()) + 2;            char[] q1 = trim(s1, len);            char[] q2 = trim(s2, len);            int res = cmp(q1, q2);            if (res > 0) {                out.println(">");            } else if (res < 0) {                out.println("<");            } else {                out.println("=");            }        }         char[] trim(String s, int len) {            char[] res = new char[len];            Arrays.fill(res, '0');            for (int i = 0; i < s.length(); i++) res[len - 1 - i] = s.charAt(s.length() - 1 - i);            for (int i = 1; i < len - 1; i++) {                if (i > 0 && res[i] == '1' && res[i + 1] == '1') {                    res[i] = res[i + 1] = '0';                    res[i - 1]++;                    i -= 3;                }            }            return res;        }         int cmp(char[] s1, char[] s2) {            for (int i = 0; i < s1.length; i++) {                if (s1[i] == '1' && s2[i] == '0') {                    return 1;                }                if (s1[i] == '0' && s2[i] == '1') {                    return -1;                }            }            return 0;        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }     }} 
