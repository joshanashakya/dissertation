import java.io.*;import java.util.ArrayList;import java.util.List; public class MAIN{     private static final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     public static void main(String[] args) throws Exception{         String[] mat = new String[3];        mat[0] = reader.readLine();        mat[1] = reader.readLine();        mat[2] = reader.readLine();         String mash = null;        StringBuilder mashBuilder = new StringBuilder();        for(int i=0;i<mat.length;++i){            mashBuilder.append(mat[i]);        }        mash = mashBuilder.toString();          boolean symmetric = true;        for(int i=0, j=8;i<4;++i, --j){            if(mash.charAt(i) != mash.charAt(j)){                symmetric = false;                break;            }        }         System.out.println(symmetric ? "YES" : "NO");     }     private static class Pair{        int l;        int r;        public Pair(int l, int r) {            this.l = l;            this.r = r;        }    }     private static List<List<Integer>> getCombinations(int[] a, int count){        List<List<Integer>> ret = new ArrayList<>(0);        if(a == null || a.length > 64 || count <= 0 || count > a.length){            return null;        } else {            long lim = (1L<<a.length);            for(long i=0;i<lim;++i){                List<Integer> poss = getBitPositionList(i);                if(poss.size() == count){                    List<Integer> list = new ArrayList<>(0);                    for(int j=0;j< poss.size();++j){                        list.add(a[poss.get(j)]);                    }                    ret.add(list);                }            }        }        return ret;     }     private static int getBitCount(long n){        int onCount = 0;        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                ++onCount;            }        }        return onCount;    }    private static List<Integer> getBitPositionList(long n){        List<Integer> idxs = new ArrayList<>(0);        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                idxs.add(((int) i));            }        }        return idxs;    }   }
