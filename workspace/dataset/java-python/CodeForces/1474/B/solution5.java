import java.util.*;import java.io.*; public class B_Different_Divisors {     static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }     public static void main(String[] args) {        FastReader scan = new FastReader();        int t = scan.nextInt();        while (t-- > 0) {            long d = scan.nextLong();            long x = findNextPrime(1 + d);            long y = findNextPrime(x + d);            // System.out.println(x + " " + y);            System.out.println(x * y);         }    }     static long findNextPrime(long n) {        while (true) {            if (isPrime(n)) {                return n;            }            n++;        }    }     static boolean isPrime(long n) {        // Corner cases        if (n <= 1)            return false;        if (n <= 3)            return true;         // This is checked so that we can skip        // middle five numbers in below loop        if (n % 2 == 0 || n % 3 == 0)            return false;         for (long i = 5; i * i <= n; i = i + 6)            if (n % i == 0 || n % (i + 2) == 0)                return false;         return true;    } }
