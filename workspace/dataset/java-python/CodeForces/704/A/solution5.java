//package com.pb.codeforces.practice; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer; public class CF704A {		public static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		public String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		} 		public String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	}		public static void main(String[] args) {		FastReader in = new FastReader();		PrintWriter out = new PrintWriter(System.out);		int n = in.nextInt(); int q = in.nextInt();		Queue<Integer>[] qarr = new LinkedList[n+1];		for(int i=0; i<=n; i++)			qarr[i] = new LinkedList<Integer>();		Queue<int[]> nqueue = new LinkedList<int[]>();		int ans = 0;		int id = 1;		for(int i=0; i<q; i++) {			int et = in.nextInt(); int v = in.nextInt();			if(et == 1) {				ans+=1;				qarr[v].add(id);				nqueue.add(new int[] {id,v});				id++;			}else if(et == 2) {				ans -= qarr[v].size();				qarr[v].clear();			}else {				while(!nqueue.isEmpty() && nqueue.peek()[0] <= v) {					int[] e = nqueue.poll();					if(!qarr[e[1]].isEmpty() && qarr[e[1]].peek() <= e[0]) {						qarr[e[1]].poll(); ans -= 1;					}				}			}			out.println(ans);		}		out.flush();		out.close();	}}
