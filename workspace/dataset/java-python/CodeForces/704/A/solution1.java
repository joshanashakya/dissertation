import com.sun.org.apache.bcel.internal.generic.AALOAD;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigInteger;import java.util.*;import java.util.stream.IntStream;import javafx.util.Pair; public class Main{     static void sort(int a[])    {        Random ran = new Random();        for (int i = 0; i < a.length; i++) {            int r = ran.nextInt(a.length);            int temp = a[r];            a[r] = a[i];            a[i] = temp;        }         Arrays.sort(a);    }                 public static void main(String[] args) throws IOException    {         Scanner input = new Scanner(System.in);      int n ,q;      n = input.nextInt();      q = input.nextInt();      boolean check[] = new boolean[q];      int ind=0;      int unread=0;      int lastunread=0;      StringBuilder ans = new StringBuilder();      TreeMap<Integer,ArrayList<Integer>> map = new TreeMap<>();        for (int i = 0; i < q; i++) {            int type = input.nextInt();            int index = input.nextInt();            if(type==1)            {                check[ind]=true;                if(!map.containsKey(index))                {                    map.put(index, new ArrayList<>());                                    }                map.get(index).add(ind);                ind++;                unread++;            }            else if(type==2)            {                if(map.containsKey(index))                {                    for (Integer integer : map.get(index)) {                        if(check[integer])                        {                            check[integer]=false;                            unread--;                        }                    }                    map.get(index).clear();                }            }            else if(type==3)            {                for (int j = lastunread; j < index; j++) {                    if(check[j])                    {                        check[j] = false;                        unread--;                    }                }                lastunread = Math.max(lastunread, index);            }           ans.append(unread+"\n");        }        System.out.println(ans);                        } }
