import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {        int N = in.nextInt();        int W = in.nextInt();        int H = in.nextInt();         int[] g = new int[N];        int[] p = new int[N];        int[] t = new int[N];         // split into equivalence classes        // intersections only happen among members in same eq class        Map<Integer, List<Integer>> eq = new HashMap<>();         for (int i = 0; i < N; i++) {            g[i] = in.nextInt();            p[i] = in.nextInt();            t[i] = in.nextInt();            int eqClass = p[i]-t[i];            if (!eq.containsKey(eqClass)) eq.put(eqClass, new ArrayList<>());            eq.get(eqClass).add(i);        }         int[][] ret = new int[N][2];         for (List<Integer> m : eq.values()) {             List<Integer> x = new ArrayList<>();            List<Integer> y = new ArrayList<>();            List<int[]> endPts = new ArrayList<>();             for (int i : m) {                if (g[i] == 1) {                    x.add(i);                    endPts.add(new int[] {p[i], H});                }                else {                    y.add(i);                    endPts.add(new int[] {W, p[i]});                }            }             // goes clockwise?            endPts.sort((a,b) -> {                if (a[0] != b[0]) return a[0]-b[0];                return b[1]-a[1];            });             // goes counterclockwise?            x.sort((a,b) -> p[a]-p[b]);            y.sort((a,b) -> p[a]-p[b]);             int j = 0;            for (int i = y.size()-1; i >= 0; i--, j++) {                int ii = y.get(i);                ret[ii][0] = endPts.get(j)[0];                ret[ii][1] = endPts.get(j)[1];            }            for (int i = 0; i < x.size(); i++, j++) {                int ii = x.get(i);                ret[ii][0] = endPts.get(j)[0];                ret[ii][1] = endPts.get(j)[1];            }        }         for (int[] x : ret) {            out.println(x[0] + " " + x[1]);        }     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
