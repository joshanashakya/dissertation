import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Random;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; public class Solution{			static final int maxn = (int)1e5+5;			    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt(), w = fs.nextInt(), h = fs.nextInt();    		int[][] arr = new int[n][3];    		    		ArrayList<Integer>[] s = new ArrayList[2*maxn];    		for(int i=0;i<2*maxn;i++) s[i] =  new ArrayList<Integer>();    		    		int[] ansx = new int[n];    		int[] ansy = new int[n];    		    		for(int i=0;i<n;i++) {    			arr[i][0] = fs.nextInt();    			arr[i][1] = fs.nextInt();    			arr[i][2] = fs.nextInt();    			s[arr[i][1]-arr[i][2]+maxn].add(i);    		}    		    		ArrayList<Integer> x = new ArrayList<Integer>();    		ArrayList<Integer> y = new ArrayList<Integer>();    		    		for(int i=0;i<2*maxn;i++) {    			if(!s[i].isEmpty()) {    				    				x.clear(); y.clear();    				    				for(int ind: s[i]) {    					if(arr[ind][0]==1) x.add(arr[ind][1]);    					else y.add(arr[ind][1]);    				}    				    				Collections.sort(x);    				Collections.sort(y, Collections.reverseOrder());    				    				Collections.sort(s[i], new Comparator<Integer>() {						@Override						public int compare(Integer u, Integer v) {							if(arr[u][0]!=arr[v][0]) return arr[v][0]-arr[u][0];							else return (arr[u][0]==2)?(arr[v][1]-arr[u][1]):(arr[u][1]-arr[v][1]);						}    				    				} );    				    				    				for(int j=0;j<x.size();j++) {    					ansx[s[i].get(j)] = x.get(j);    					ansy[s[i].get(j)] = h;    				}    				    				for(int j=0;j<y.size();j++) {    					ansy[s[i].get(j+x.size())] = y.get(j);    					ansx[s[i].get(j+x.size())] = w;    				}    				    				    				    				    			}    		}    		    			    		    		    		for(int i=0;i<n;i++) {    			out.println(ansx[i]+" "+ansy[i]);    		}    		    		    		    		    		    	}    	    		    		    		    	out.close();    		    }                                                    static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
