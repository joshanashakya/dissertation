import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.util.Arrays;import java.util.Random;import java.util.ArrayList;import java.util.Map;import java.io.OutputStreamWriter;import java.io.OutputStream;import java.util.Collection;import java.io.IOException;import java.util.stream.Collectors;import java.io.UncheckedIOException;import java.util.List;import java.util.stream.Stream;import java.io.Closeable;import java.io.Writer;import java.util.Collections;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BRootersSong solver = new BRootersSong();            solver.solve(1, in, out);            out.close();        }    }     static class BRootersSong {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int w = in.readInt();            int h = in.readInt();             List<Dancer> allDancer = new ArrayList<>(n);            List<Dancer> vertical = new ArrayList<>(n);            List<Dancer> horizontal = new ArrayList<>(n);             IntegerList times = new IntegerList(n);            for (int i = 0; i < n; i++) {                int g = in.readInt();                int p = in.readInt();                int t = in.readInt();                Dancer d = new Dancer();                d.p = p;                d.time = (w + h - p) + t;                times.add(d.time);                 allDancer.add(d);                if (g == 1) {                    vertical.add(d);                } else {                    horizontal.add(d);                }            }             Map<Integer, List<Dancer>> vMap = vertical.stream().collect(Collectors.groupingBy(x -> x.time));            Map<Integer, List<Dancer>> hMap = horizontal.stream().collect(Collectors.groupingBy(x -> x.time));             times.unique();            List<int[]> ends = new ArrayList<>(n);            for (IntegerIterator iterator = times.iterator(); iterator.hasNext(); ) {                int t = iterator.next();                 List<Dancer> vList = vMap.getOrDefault(t, Collections.emptyList());                List<Dancer> hList = hMap.getOrDefault(t, Collections.emptyList());                vList.sort((a, b) -> Integer.compare(a.p, b.p));                hList.sort((a, b) -> Integer.compare(a.p, b.p));                Collections.reverse(hList);                 ends.clear();                for (Dancer v : vList) {                    ends.add(new int[]{v.p, h});                }                for (Dancer v : hList) {                    ends.add(new int[]{w, v.p});                }                 int offset = 0;                for (Dancer v : hList) {                    int[] val = ends.get(offset++);                    v.x = val[0];                    v.y = val[1];                }                for (Dancer v : vList) {                    int[] val = ends.get(offset++);                    v.x = val[0];                    v.y = val[1];                }            }             for (Dancer d : allDancer) {                out.append(d.x).append(' ').append(d.y).println();            }        }     }     static class IntegerList implements Cloneable {        private int size;        private int cap;        private int[] data;        private static final int[] EMPTY = new int[0];         public IntegerList(int cap) {            this.cap = cap;            if (cap == 0) {                data = EMPTY;            } else {                data = new int[cap];            }        }         public IntegerList(IntegerList list) {            this.size = list.size;            this.cap = list.cap;            this.data = Arrays.copyOf(list.data, size);        }         public IntegerList() {            this(0);        }         public void ensureSpace(int req) {            if (req > cap) {                while (cap < req) {                    cap = Math.max(cap + 10, 2 * cap);                }                data = Arrays.copyOf(data, cap);            }        }         public void add(int x) {            ensureSpace(size + 1);            data[size++] = x;        }         public void addAll(int[] x, int offset, int len) {            ensureSpace(size + len);            System.arraycopy(x, offset, data, size, len);            size += len;        }         public void addAll(IntegerList list) {            addAll(list.data, 0, list.size);        }         public void sort() {            if (size <= 1) {                return;            }            Randomized.shuffle(data, 0, size);            Arrays.sort(data, 0, size);        }         public void unique() {            if (size <= 1) {                return;            }             sort();            int wpos = 1;            for (int i = 1; i < size; i++) {                if (data[i] != data[wpos - 1]) {                    data[wpos++] = data[i];                }            }            size = wpos;        }         public int[] toArray() {            return Arrays.copyOf(data, size);        }         public String toString() {            return Arrays.toString(toArray());        }         public IntegerIterator iterator() {            return new IntegerIterator() {                int i = 0;                  public boolean hasNext() {                    return i < size;                }                  public int next() {                    return data[i++];                }            };        }         public boolean equals(Object obj) {            if (!(obj instanceof IntegerList)) {                return false;            }            IntegerList other = (IntegerList) obj;            return SequenceUtils.equal(data, 0, size - 1, other.data, 0, other.size - 1);        }         public int hashCode() {            int h = 1;            for (int i = 0; i < size; i++) {                h = h * 31 + Integer.hashCode(data[i]);            }            return h;        }         public IntegerList clone() {            IntegerList ans = new IntegerList();            ans.addAll(this);            return ans;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class RandomWrapper {        private Random random;        public static RandomWrapper INSTANCE = new RandomWrapper(new Random());         public RandomWrapper() {            this(new Random());        }         public RandomWrapper(Random random) {            this.random = random;        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }     static class Dancer {        int time;        int p;        int x;        int y;     }     static class SequenceUtils {        public static boolean equal(int[] a, int al, int ar, int[] b, int bl, int br) {            if ((ar - al) != (br - bl)) {                return false;            }            for (int i = al, j = bl; i <= ar; i++, j++) {                if (a[i] != b[j]) {                    return false;                }            }            return true;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static interface IntegerIterator {        boolean hasNext();         int next();     }     static class Randomized {        public static void shuffle(int[] data, int from, int to) {            to--;            for (int i = from; i <= to; i++) {                int s = nextInt(i, to);                int tmp = data[i];                data[i] = data[s];                data[s] = tmp;            }        }         public static int nextInt(int l, int r) {            return RandomWrapper.INSTANCE.nextInt(l, r);        }     }} 
