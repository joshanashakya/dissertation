import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer;import java.io.BufferedReader;import java.util.Collections;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            int w = in.nextInt();            int h = in.nextInt();            ArrayList<Dance>[] y = new ArrayList[200000];            ArrayList<Dance>[] x = new ArrayList[200000];            for (int i = 0; i < 200000; i++) {                x[i] = new ArrayList<>();                y[i] = new ArrayList<>();            }            for (int i = 0; i < N; i++) {                int g = in.nextInt();                int p = in.nextInt();                int t = in.nextInt();                if (g == 1) {                    x[(p - t) + 100000].add(new Dance(i, p));                } else {                    y[(p - t) + 100000].add(new Dance(i, p));                }            }            for (int i = 0; i < 200000; i++) {                Collections.sort(x[i]);                Collections.sort(y[i]);            }            int[][] res = new int[N][2];            for (int i = 0; i < 200000; i++) {                for (int j = 0; j < x[i].size(); j++) {                    if (y[i].size() >= x[i].size() - j) {                        res[x[i].get(j).i] = new int[]{w, (y[i].get(x[i].size() - j - 1)).p};                    } else {                        res[x[i].get(j).i] = new int[]{(x[i].get(y[i].size() + j)).p, h};                    }                }                for (int j = 0; j < y[i].size(); j++) {                    if (x[i].size() >= y[i].size() - j) {                        res[y[i].get(j).i] = new int[]{(x[i].get(y[i].size() - j - 1)).p, h};                    } else {                        res[y[i].get(j).i] = new int[]{w, y[i].get(x[i].size() + j).p};                    }                }            }            for (int i = 0; i < N; i++) {                out.println(res[i][0] + " " + res[i][1]);            }        }         class Dance implements Comparable {            int i;            int p;             Dance(int i, int p) {                this.i = i;                this.p = p;            }             public int compareTo(Object o) {                return Integer.compare(p, ((Dance) (o)).p);            }         }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
