/*If you want to aim high, aim highDon't let that studying and grades consume youJust live life young******************************What do you think? What do you think?1st on Billboard, what do you think of itNext is a Grammy, what do you think of itHowever you think, I’m sorry, but shit, I have no fcking interest*******************************I'm standing on top of my Monopoly boardThat means I'm on top of my game and it don't stoptil my hip don't hop anymorehttps://www.a2oj.com/Ladder16.html*******************************300iq as writer = Sad!*/import java.util.*;import java.io.*;import java.math.*;    public class B   {      public static void main(String hi[]) throws Exception      {         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(infile.readLine());         int N = Integer.parseInt(st.nextToken());         int W = Integer.parseInt(st.nextToken());         int H = Integer.parseInt(st.nextToken());         HashMap<Integer, ArrayList<Point>> map = new HashMap<Integer, ArrayList<Point>>();         for(int i=0; i < N; i++)         {            st = new StringTokenizer(infile.readLine());            int G = Integer.parseInt(st.nextToken());            int P = Integer.parseInt(st.nextToken());            int T = Integer.parseInt(st.nextToken());            if(G == 1)            {               Point p = new Point(P, -1*T, i);               int key = P-T;               if(!map.containsKey(key))                  map.put(key, new ArrayList<Point>());               map.get(key).add(p);            }            else            {               Point p = new Point(-1*T, P, i);               int key = P-T;               if(!map.containsKey(key))                  map.put(key, new ArrayList<Point>());               map.get(key).add(p);            }         }         int[][] res = new int[N][2];         for(int key: map.keySet())         {            ArrayList<Point> points = map.get(key);            ArrayList<Integer> lsX = new ArrayList<Integer>();            for(Point p: points)               if(p.y <= 0)                  lsX.add(p.x);            Collections.sort(lsX);            points.sort((x, y) -> {               return x.x-y.x;            });            for(int i=0; i < lsX.size(); i++)            {               res[points.get(i).id][0] = lsX.get(i);               res[points.get(i).id][1] = H;            }            ArrayList<Point> next = new ArrayList<Point>();            for(int i=lsX.size(); i < points.size(); i++)               next.add(points.get(i));            next.sort((x, y) -> {               return x.y-y.y;            });            ArrayList<Integer> lsY = new ArrayList<Integer>();            for(Point p: points)               if(p.x <= 0)                  lsY.add(p.y);            Collections.sort(lsY);            for(int i=0; i < lsY.size(); i++)            {               res[next.get(i).id][0] = W;               res[next.get(i).id][1] = lsY.get(i);            }         }         StringBuilder sb = new StringBuilder();         for(int i=0; i < N; i++)            sb.append(res[i][0]+" "+res[i][1]).append("\n");         System.out.print(sb);      }   }   class Point   {      public int id;      public int x;      public int y;            public Point(int a, int b, int i)      {         x = a;         y = b;         id = i;      }   }
