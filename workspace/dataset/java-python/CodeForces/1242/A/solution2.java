import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.StringTokenizer; public class N1242A {	static ArrayList<Integer> primes;	static HashSet<Integer> primesH;	public static void main(String[] args) throws IOException {		Scanner sc=new Scanner(System.in);		PrintWriter out=new PrintWriter(System.out);		primes=new ArrayList();		primesH=new HashSet();		sieveOfEratosthenes(1000000);		long n=sc.nextLong();	    if(n==1)out.println(1);	    else if(n%2==0) {	    	while(n%2==0) {	    		n/=2;	    	}	    	out.println(n==1?2:1);	    }	    else {	    	if(isPrime(n)) {	    		out.println(n);	    	}else {	    		int needed=1;	    		for(int i=3;i*i*1l<=n;i+=2) {	    			if(n%i==0) {	    				if(needed==-1) {	    					needed=i;	    				}	    				while(n%i==0) {	    					n/=i;	    				}	    				if(n==1) {	    					needed=i;	    				}	    				break;	    			}	    		}//	    		if(n>1) {//	    			needed=1;//	    		}	    		out.println(needed);	    	}	    }				out.close(); 	}	static int gcd (int a, int b) {	    return b==0?a:gcd (b, a % b);	}	static boolean isPrime(long n) {		if(n<1000000) {			return primesH.contains((int)n);		}		for(int p: primes)			if(p * p > n)				break;			else if(n % p == 0)				return false;		return true;	}	static void sieveOfEratosthenes(int n)  // O(n*log(log(n)))    {         // Create a boolean array "prime[0..n]" and initialize         // all entries it as true. A value in prime[i] will         // finally be false if i is Not a prime, else true.         boolean prime[] = new boolean[n+1];         for(int i=0;i<n;i++)             prime[i] = true;                   for(int p = 2; p*p <=n; p++)         {             // If prime[p] is not changed, then it is a prime             if(prime[p] == true)             {                 // Update all multiples of p                 for(int i = p*p; i <= n; i += p)                     prime[i] = false;             }         }                   // Print all prime numbers         for(int i = 2; i <= n; i++)         {             if(prime[i] == true) {               // System.out.print(i + " ");                 primes.add(i);                primesH.add(i);            }        }     } 		static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		public boolean hasNext() {return st.hasMoreTokens();}		public int nextInt() throws IOException {return Integer.parseInt(next());}				public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();}					public boolean ready() throws IOException {return br.ready(); }  	} }
