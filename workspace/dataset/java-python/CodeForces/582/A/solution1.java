import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.util.Arrays;import java.io.OutputStreamWriter;import java.io.OutputStream;import java.io.IOException;import java.io.Serializable;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            AGCDTable solver = new AGCDTable();            solver.solve(1, in, out);            out.close();        }    }     static class AGCDTable {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int[] x = in.ri(n * n);            Randomized.shuffle(x);            Arrays.sort(x);            SequenceUtils.reverse(x);            IntegerArrayList ans = new IntegerArrayList(n);            ans.add(x[0]);            IntegerPriorityQueue pq = new IntegerPriorityQueue(n * n, IntegerComparator.REVERSE_ORDER);            for (int i = 1; i < x.length; i++) {                int v = x[i];                if (!pq.isEmpty() && pq.peek() == v) {                    pq.pop();                    continue;                }                assert ans.size() + 1 <= n;                for (int j = 0; j < ans.size(); j++) {                    pq.add(GCDs.gcd(ans.get(j), v));                    pq.add(GCDs.gcd(ans.get(j), v));                }                ans.add(v);            }            for (int v : ans.toArray()) {                out.append(v).append(' ');            }        }     }     static class RandomWrapper {        private MersenneTwisterFast random;        public static final RandomWrapper INSTANCE = new RandomWrapper();         public RandomWrapper() {            this(new MersenneTwisterFast());        }         public RandomWrapper(MersenneTwisterFast random) {            this.random = random;        }         public RandomWrapper(long seed) {            this(new MersenneTwisterFast(seed));        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }     static class SequenceUtils {        public static void swap(int[] data, int i, int j) {            int tmp = data[i];            data[i] = data[j];            data[j] = tmp;        }         public static void reverse(int[] data, int l, int r) {            while (l < r) {                swap(data, l, r);                l++;                r--;            }        }         public static void reverse(int[] data) {            reverse(data, 0, data.length - 1);        }         public static boolean equal(int[] a, int al, int ar, int[] b, int bl, int br) {            if ((ar - al) != (br - bl)) {                return false;            }            for (int i = al, j = bl; i <= ar; i++, j++) {                if (a[i] != b[j]) {                    return false;                }            }            return true;        }     }     static strictfp class MersenneTwisterFast implements Serializable, Cloneable {        private static final int N = 624;        private static final int M = 397;        private static final int MATRIX_A = 0x9908b0df;        private static final int UPPER_MASK = 0x80000000;        private static final int LOWER_MASK = 0x7fffffff;        private static final int TEMPERING_MASK_B = 0x9d2c5680;        private static final int TEMPERING_MASK_C = 0xefc60000;        private int[] mt;        private int mti;        private int[] mag01;        private boolean __haveNextNextGaussian;         public Object clone() {            try {                MersenneTwisterFast f = (MersenneTwisterFast) (super.clone());                f.mt = (int[]) (mt.clone());                f.mag01 = (int[]) (mag01.clone());                return f;            } catch (CloneNotSupportedException e) {                throw new InternalError();            } // should never happen        }         public MersenneTwisterFast() {            this(System.currentTimeMillis());        }         public MersenneTwisterFast(long seed) {            setSeed(seed);        }         public MersenneTwisterFast(int[] array) {            setSeed(array);        }         public void setSeed(long seed) {            // Due to a bug in java.util.Random clear up to 1.2, we're            // doing our own Gaussian variable.            __haveNextNextGaussian = false;             mt = new int[N];             mag01 = new int[2];            mag01[0] = 0x0;            mag01[1] = MATRIX_A;             mt[0] = (int) (seed & 0xffffffff);            for (mti = 1; mti < N; mti++) {                mt[mti] =                        (1812433253 * (mt[mti - 1] ^ (mt[mti - 1] >>> 30)) + mti);                /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */                /* In the previous versions, MSBs of the seed affect   */                /* only MSBs of the array mt[].                        */                /* 2002/01/09 modified by Makoto Matsumoto             */                // mt[mti] &= 0xffffffff;                /* for >32 bit machines */            }        }         public void setSeed(int[] array) {            if (array.length == 0)                throw new IllegalArgumentException("Array length must be greater than zero");            int i, j, k;            setSeed(19650218);            i = 1;            j = 0;            k = (N > array.length ? N : array.length);            for (; k != 0; k--) {                mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >>> 30)) * 1664525)) + array[j] + j; /* non linear */                // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */                i++;                j++;                if (i >= N) {                    mt[0] = mt[N - 1];                    i = 1;                }                if (j >= array.length) j = 0;            }            for (k = N - 1; k != 0; k--) {                mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >>> 30)) * 1566083941)) - i; /* non linear */                // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */                i++;                if (i >= N) {                    mt[0] = mt[N - 1];                    i = 1;                }            }            mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */        }         public int nextInt(int n) {            if (n <= 0)                throw new IllegalArgumentException("n must be positive, got: " + n);             if ((n & -n) == n)  // i.e., n is a power of 2            {                int y;                 if (mti >= N)   // generate N words at one time                {                    int kk;                    final int[] mt = this.mt; // locals are slightly faster                    final int[] mag01 = this.mag01; // locals are slightly faster                     for (kk = 0; kk < N - M; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    for (; kk < N - 1; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);                    mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];                     mti = 0;                }                 y = mt[mti++];                y ^= y >>> 11;                          // TEMPERING_SHIFT_U(y)                y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)                y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)                y ^= (y >>> 18);                        // TEMPERING_SHIFT_L(y)                 return (int) ((n * (long) (y >>> 1)) >> 31);            }             int bits, val;            do {                int y;                 if (mti >= N)   // generate N words at one time                {                    int kk;                    final int[] mt = this.mt; // locals are slightly faster                    final int[] mag01 = this.mag01; // locals are slightly faster                     for (kk = 0; kk < N - M; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    for (; kk < N - 1; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);                    mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];                     mti = 0;                }                 y = mt[mti++];                y ^= y >>> 11;                          // TEMPERING_SHIFT_U(y)                y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)                y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)                y ^= (y >>> 18);                        // TEMPERING_SHIFT_L(y)                 bits = (y >>> 1);                val = bits % n;            } while (bits - val + (n - 1) < 0);            return val;        }     }     static class IntegerPriorityQueue implements Cloneable {        private int[] data;        private IntegerComparator comparator;        private int size;         public IntegerPriorityQueue(int n, IntegerComparator comparator) {            this.data = new int[n + 1];            this.comparator = comparator;        }         public IntegerPriorityQueue(int n, IntegerComparator comparator, IntegerFunction generator) {            this.data = new int[n + 1];            this.comparator = comparator;             for (int i = 1; i <= n; i++) {                data[i] = generator.apply(i - 1);            }            size = n;            for (int i = n; i >= 1; i--) {                shiftDown(i);            }        }         private int left(int i) {            return i << 1;        }         private int right(int i) {            return (i << 1) | 1;        }         private int parent(int i) {            return i >> 1;        }         public void add(int x) {            data[++size] = x;            shiftUp(size);        }         public int peek() {            return data[1];        }         private void shiftUp(int index) {            while (index != 1) {                int pid = parent(index);                if (comparator.compare(data[pid], data[index]) <= 0) {                    break;                }                SequenceUtils.swap(data, index, pid);                index = pid;            }        }         private void shiftDown(int index) {            while (true) {                int lid = left(index);                int rid = right(index);                if (lid > size) {                    break;                }                int challenger = lid;                if (rid <= size && comparator.compare(data[rid], data[lid]) < 0) {                    challenger = rid;                }                if (comparator.compare(data[challenger], data[index]) >= 0) {                    break;                }                SequenceUtils.swap(data, index, challenger);                index = challenger;            }        }         public int pop() {            int ans = data[1];            SequenceUtils.swap(data, 1, size);            size--;            shiftDown(1);            return ans;        }         public boolean isEmpty() {            return size == 0;        }         public IntegerPriorityQueue clone() {            try {                IntegerPriorityQueue c = (IntegerPriorityQueue) super.clone();                c.data = data.clone();                return c;            } catch (CloneNotSupportedException e) {                throw new RuntimeException(e);            }        }         public String toString() {            StringBuilder builder = new StringBuilder();            IntegerPriorityQueue queue = clone();            while (!queue.isEmpty()) {                builder.append(queue.pop()).append(',');            }            if (builder.length() > 0) {                builder.setLength(builder.length() - 1);            }            return builder.toString();        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(int c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static interface IntegerComparator {        public static final IntegerComparator REVERSE_ORDER = (a, b) -> Integer.compare(b, a);         public int compare(int a, int b);     }     static class IntegerArrayList implements Cloneable {        private int size;        private int cap;        private int[] data;        private static final int[] EMPTY = new int[0];         public IntegerArrayList(int cap) {            this.cap = cap;            if (cap == 0) {                data = EMPTY;            } else {                data = new int[cap];            }        }         public IntegerArrayList(int[] data) {            this(0);            addAll(data);        }         public IntegerArrayList(IntegerArrayList list) {            this.size = list.size;            this.cap = list.cap;            this.data = Arrays.copyOf(list.data, size);        }         public IntegerArrayList() {            this(0);        }         public void ensureSpace(int req) {            if (req > cap) {                while (cap < req) {                    cap = Math.max(cap + 10, 2 * cap);                }                data = Arrays.copyOf(data, cap);            }        }         private void checkRange(int i) {            if (i < 0 || i >= size) {                throw new ArrayIndexOutOfBoundsException("Access [" + i + "]");            }        }         public int get(int i) {            checkRange(i);            return data[i];        }         public void add(int x) {            ensureSpace(size + 1);            data[size++] = x;        }         public void addAll(int[] x) {            addAll(x, 0, x.length);        }         public void addAll(int[] x, int offset, int len) {            ensureSpace(size + len);            System.arraycopy(x, offset, data, size, len);            size += len;        }         public void addAll(IntegerArrayList list) {            addAll(list.data, 0, list.size);        }         public int size() {            return size;        }         public int[] toArray() {            return Arrays.copyOf(data, size);        }         public String toString() {            return Arrays.toString(toArray());        }         public boolean equals(Object obj) {            if (!(obj instanceof IntegerArrayList)) {                return false;            }            IntegerArrayList other = (IntegerArrayList) obj;            return SequenceUtils.equal(data, 0, size - 1, other.data, 0, other.size - 1);        }         public int hashCode() {            int h = 1;            for (int i = 0; i < size; i++) {                h = h * 31 + Integer.hashCode(data[i]);            }            return h;        }         public IntegerArrayList clone() {            IntegerArrayList ans = new IntegerArrayList();            ans.addAll(this);            return ans;        }     }     static class GCDs {        private GCDs() {        }         public static int gcd(int a, int b) {            return a >= b ? gcd0(a, b) : gcd0(b, a);        }         private static int gcd0(int a, int b) {            return b == 0 ? a : gcd0(b, a % b);        }     }     static class Randomized {        public static void shuffle(int[] data) {            shuffle(data, 0, data.length - 1);        }         public static void shuffle(int[] data, int from, int to) {            to--;            for (int i = from; i <= to; i++) {                int s = nextInt(i, to);                int tmp = data[i];                data[i] = data[s];                data[s] = tmp;            }        }         public static int nextInt(int l, int r) {            return RandomWrapper.INSTANCE.nextInt(l, r);        }     }     static interface IntegerFunction {        int apply(int x);     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         public void populate(int[] data) {            for (int i = 0; i < data.length; i++) {                data[i] = readInt();            }        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int[] ri(int n) {            int[] ans = new int[n];            populate(ans);            return ans;        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }} 
