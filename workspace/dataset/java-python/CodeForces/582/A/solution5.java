import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }         public void solve() throws IOException{         int n = in.nextInt();        HashMap<Integer, Integer> count = new HashMap<>();        Integer[] arr = new Integer[n * n];        for(int i = 0; i < n * n; i++){            int num = in.nextInt();            count.put(num, count.getOrDefault(num, 0) + 1);            arr[i] = num;        }         Arrays.sort(arr, Collections.reverseOrder());        List<Integer> soFar = new ArrayList<>();         int cur = 0;        while(cur != n * n){             if(count.get(arr[cur]) == 0){                cur++;                if(cur == n * n) break;                continue;            }              int max = arr[cur];            for(int i = 0; i < soFar.size(); i++){                Integer dec = new Integer((int) gcd(max, soFar.get(i)));                count.put(dec, count.get(dec) - 2);            }             soFar.add(max);            count.put(max, count.get(max) - 1);        }         for(int i = 0; i < soFar.size(); i++){            out.print(soFar.get(i) + " ");        }           }  }
