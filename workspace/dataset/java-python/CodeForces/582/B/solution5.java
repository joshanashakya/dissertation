import java.util.*;import java.lang.*;import java.io.*; public class Solution {    	public static void main (String[] args) throws java.lang.Exception	{		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		PrintWriter out = new PrintWriter(System.out);		StringTokenizer st = new StringTokenizer(br.readLine());				int n = Integer.parseInt(st.nextToken());		int t = Integer.parseInt(st.nextToken());		int[] bit = new int[301];		int[] count = new int[301];		int max = 0;				st = new StringTokenizer(br.readLine());		int[] in = new int[n];		for(int i=0;i<n;i++){		   in[i] = Integer.parseInt(st.nextToken());		   count[in[i]]++;		   max = Math.max(max,count[in[i]]);		} 				int blocks = Math.min(10000/n,t);				int[] a = new int[n*blocks];		for(int i=0;i<n*blocks;i++) a[i] = in[i%n];		int ans = 0;		for(int val:a)		ans = Math.max(binaryIndexedTree(bit,val),ans);				out.println(ans+max*(t-blocks));		out.close();	}		public static int binaryIndexedTree(int[] bit, int val){	    int res = 0;	    int value = val;	    	    while(val > 0){	        res= Math.max(bit[val],res);	        val -= (-val)&val;	    }	    	    res++;	    val = value; 	    while(val<bit.length){	        bit[val] = Math.max(bit[val],res);	        val+=(-val)&val;	    }	    return res;	}}
