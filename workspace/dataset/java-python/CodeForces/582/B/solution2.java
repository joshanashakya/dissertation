/*    Editorial + https://codeforces.com/blog/entry/20692?#comment-477985    Used BIT for LIS. Inspired from Rajat De's and AnimeshF's solution. */ //created by Whiplash99import java.io.*;import java.util.*;public class A{    static class BIT    {        int size;        int[] table;         BIT(int size)        {            table=new int[size+1];            this.size=size+1;        }        void update(int i, int val)        {            i++;            while(i<size)            {                table[i]=Math.max(table[i],val);                i+=Integer.lowestOneBit(i); //i+=i&-i            }        }        int maxQuery(int i)        {            int max=0; i++;            while (i>0)            {                max=Math.max(max,table[i]);                i-=Integer.lowestOneBit(i);//i-=i&-i            }            return max;        }    }     private static ArrayList<Integer> build(ArrayList<Integer> a, int N, int times)    {        ArrayList<Integer> b=new ArrayList<>();        for(int i=0;i<N*times;i++) b.add((i<N)?a.get(i):b.get(i-N));         return b;    }    private static ArrayList<Integer> LIS(ArrayList<Integer> a)    {        BIT FT=new BIT(305);        ArrayList<Integer> res=new ArrayList<>();         for(int i=0;i<a.size();i++)        {            int ans=FT.maxQuery(a.get(i))+1;            FT.update(a.get(i),ans);             res.add(ans);        }        return res;    }    public static void main(String[] args) throws IOException    {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         String[] s=br.readLine().trim().split(" ");        N=Integer.parseInt(s[0]);        int T=Integer.parseInt(s[1]);         s=br.readLine().trim().split(" ");        ArrayList<Integer> a=new ArrayList<>();        for(i=0;i<N;i++) a.add(Integer.parseInt(s[i]));         int max=0;         if(T<=2*N)        {            ArrayList<Integer> b=build(a,N,T);            ArrayList<Integer> res=LIS(b);             for(i=0;i<res.size();i++) max=Math.max(max,res.get(i));        }        else        {            ArrayList<Integer> b=build(a,N,N);            ArrayList<Integer> res1=LIS(b);             int[] count=new int[305];            for(i=0;i<N;i++) count[a.get(i)]++;             for(i=0;i<b.size();i++) b.set(i,301-b.get(i));            Collections.reverse(b);            ArrayList<Integer> res2=LIS(b);            Collections.reverse(res2);             for(i=0;i<N;i++)            {                int tmp= res1.get(res1.size()-N+i);                tmp+=count[a.get(i)]*(T-2*N);                 int max2=0;                for(int j=0;j<N;j++)                {                    if(a.get(j)>=a.get(i))                        max2=Math.max(max2,res2.get(j));                }                 tmp+=max2;                max=Math.max(max,tmp);            }        }         System.out.println(max);    }}
