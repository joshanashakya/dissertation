import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.util.*; public class Solution {     private final static FastReader in = new FastReader();    private static final PrintWriter out = new PrintWriter(System.out);      public static String solve(ArrayList<Integer> all, int[] a, int b[], int n, int k) {         StringBuilder builder1 = new StringBuilder();        StringBuilder builder2 = new StringBuilder();        Collections.sort(all);        int mid = all.get((all.size() - 1) / 2);         for (int i = 0; i < n; i++) {            if (i < k || mid >= a[i])                builder1.append(1);            else                builder1.append(0);            if (i < k || mid >= b[i])                builder2.append(1);            else                builder2.append(0);        }         builder1.append("\n");        builder1.append(builder2);         return builder1.toString();    }      public static void main(String[] args) {        int n=in.nextInt();        ArrayList<Integer> all = new ArrayList<Integer>();        int k = n / 2;        int[] a = new int[n];        int[] b = new int[n];         for(int i = 0; i < n; i++)        {                       a[i] = in.nextInt();            b[i] = in.nextInt();             all.add(a[i]);            all.add(b[i]);        }        out.println(solve(all,a,b,n,k));        out.close();    }     private static final class FastReader {        private static BufferedReader BF;        private static StringTokenizer ST;         public FastReader() {            BF = new BufferedReader(new InputStreamReader(System.in));            ST = null;         }          public final String next() {            while (ST == null || !ST.hasMoreTokens()) {                try {                    ST = new StringTokenizer(BF.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return ST.nextToken();         }         final int nextInt() {            return Integer.parseInt(next());        }         final long nextLong() {            return Long.parseLong(next());        }    }  }
