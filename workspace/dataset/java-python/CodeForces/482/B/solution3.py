import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        CInterestingArray solver = new CInterestingArray();        solver.solve(1, in, out);        out.close();    }     static class CInterestingArray {        int n;        int m;        int[][] queries;         public void readInput(Scanner sc) {            n = sc.nextInt();            m = sc.nextInt();            queries = new int[m][3];            for (int i = 0; i < m; i++) {                for (int j = 0; j < 3; j++)                    queries[i][j] = sc.nextInt();            }        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            readInput(sc);            int N = 1;            while (N < n)                N <<= 1;            SegmentTree st = new SegmentTree(N);            for (int i = 0; i < m; i++) {                st.update_range(queries[i][0], queries[i][1], queries[i][2]);            }            boolean f = true;            for (int i = 0; i < m; i++) {                f &= st.query(queries[i][0], queries[i][1]) == queries[i][2];            }            if (f) {                pw.println("YES");                for (int i = 1; i <= n; i++)                    pw.print(st.query(i, i) + " ");            } else {                pw.println("NO");            }        }         public class SegmentTree {            int N;            int[] sTree;            int[] lazy;             SegmentTree(int N) {                this.N = N;                sTree = new int[N << 1];        //no. of nodes = 2*N - 1, we add one to cross out index zero                lazy = new int[N << 1];            }             void update_range(int i, int j, int val) {                update_range(1, 1, N, i, j, val);            }             void update_range(int node, int b, int e, int i, int j, int val) {                if (i > e || j < b)                    return;                if (b >= i && e <= j) {                    sTree[node] |= val;                    lazy[node] |= val;                } else {                    int mid = b + e >> 1;                    propagate(node, b, mid, e);                    update_range(node << 1, b, mid, i, j, val);                    update_range(node << 1 | 1, mid + 1, e, i, j, val);                    sTree[node] = sTree[node << 1] & sTree[node << 1 | 1];                }             }             void propagate(int node, int b, int mid, int e) {                lazy[node << 1] |= lazy[node];                lazy[node << 1 | 1] |= lazy[node];                sTree[node << 1] |= lazy[node];                sTree[node << 1 | 1] |= lazy[node];                lazy[node] = 0;            }             int query(int i, int j) {                return query(1, 1, N, i, j);            }             int query(int node, int b, int e, int i, int j) {                if (i > e || j < b)                    return (1 << 31) - 1;                if (b >= i && e <= j)                    return sTree[node];                int mid = b + e >> 1;                propagate(node, b, mid, e);                int q1 = query(node << 1, b, mid, i, j);                int q2 = query(node << 1 | 1, mid + 1, e, i, j);                return q1 & q2;             }         }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }}    	   	 	 	  				  	 		 	 	  	
