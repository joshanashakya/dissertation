import java.util.*;import java.io.*;import java.math.*;public class Main{    public static void process()throws IOException    {        int n=ni();        int m=ni();        int[][]A=new int[30][n+1];        int[][]q=new int[m][3];        for(int i=0;i<m;i++)        {            q[i][0]=ni();            q[i][1]=ni();            q[i][2]=ni();            int temp=q[i][2];            int curr=0;            while(temp>0)            {                if(temp%2==1)                {                    A[curr][q[i][0]]++;                    if(q[i][1]<n)                        A[curr][q[i][1]+1]--;                }                temp/=2;                curr++;            }        }        int[]val=new int[n+1];        for(int i=0;i<30;i++)        {            for(int j=1;j<=n;j++)            {                A[i][j]+=A[i][j-1];                if(A[i][j]>0)                    val[j]|=(1<<i);            }        }        segTree seg=new segTree(n,val);        seg.build(1,n,1);        for(int i=0;i<m;i++)        {            int curr=seg.query(q[i][0],q[i][1],1,n,1);            if(curr!=q[i][2])                {pn("NO");return;}        }        pn("YES");        for(int i=1;i<=n;i++)            p(val[i]+" ");        pn("");     }    static class segTree    {        int tree[], n, arr[];        public segTree(int n, int arr[])        {            this.arr = arr;            this.n = n;            tree = new int[4 * n + 4];        }        void build(int l, int r, int idx)        {            if(l==r)                {tree[idx]=arr[l];return;}            int mid =l+(r-l)/2;            build(l,mid,2*idx);            build(mid+1,r,2*idx+1);            tree[idx]=tree[2*idx]&tree[2*idx+1];        }        int query(int qs, int qe, int l, int r, int idx)        {            if(qs<=l && qe>=r)                return tree[idx];            if(qs>r || qe<l)                return (1<<31)-1;            int mid=l+(r-l)/2;            return query(qs,qe,l,mid,2*idx)&query(qs,qe,mid+1,r,2*idx+1);        }    }        static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        boolean oj = System.getProperty("ONLINE_JUDGE") != null;        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}        else{sc=new AnotherReader(100);out=new PrintWriter("output.txt");}        int t=1;        //t=ni();        while(t-->0) {process();}        out.flush();out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static int[] nai(int N)throws IOException{int[]A=new int[N];for(int i=0;i!=N;i++){A[i]=ni();}return A;}    static long[] nal(int N)throws IOException{long[]A=new long[N];for(int i=0;i!=N;i++){A[i]=nl();}return A;}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));} /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}   /////////////////////////////////////////////////////////////////////////////////////////////////////////////}
