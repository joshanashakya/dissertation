//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class A { 	    public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=sc.nextInt();		while(test-->0)		{//			int n=sc.nextInt();			 int l =sc.nextInt(),r=sc.nextInt(),d=sc.nextInt(),u=sc.nextInt();			int x =sc.nextInt(),y=sc.nextInt();			int x1 =sc.nextInt(),y1=sc.nextInt(),x2=sc.nextInt(),y2=sc.nextInt();						boolean flag=true;									if(!(x>=x1 && x<=x2 && y>=y1 && y<=y2)) {				flag=false;				break;			}									if(l>r && flag) {				flag=solveL(x,x1,x2,l,r);							}			else if(r>l && flag) {				flag=solveR(x,x1,x2,l,r);			}			else if(r == l && l>0) {				if(!(x2-x >=1 || x-x1 >= 1)) {					flag=false;				}			}						if(u>d && flag) {				flag=solveR(y,y1,y2,d,u);			}			else if(d>u && flag) {				flag=solveL(y,y1,y2,d,u);			}			else if(d == u && d>0){				if(!(y2-y >=1 || y-y1 >= 1)) {					flag=false;				}			}						if(flag)				ans.append("Yes\n");			else 				ans.append("No\n");							}			    System.out.print(ans);	}         static boolean solveL(int x,int x1,int x2,int l,int r) {    	    	int curx =Math.min(x2, x+r);		r -= (curx -x);		l -=r;		int poss =curx-x1;		if(l>poss) {			return false;		}		else l=0;		return true;    } static boolean solveR(int x,int x1,int x2,int l, int r) {    		 int curx =Math.max(x1, x-l);		l -= (x-curx);		r -=l;		int poss =x2-curx;		if(r>poss) {			return false;		}		return true;    }                static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
