import java.util.*;import java.math.*;import java.io.*; // Arrays.sort();//char[] a=fs.next().toCharArray(); public class B_Composite_Coloring {    public static void main(String[] args) {        FastScanner fs = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        int T = fs.nextInt();        while (T-- > 0) {            int n = fs.nextInt();            int arr[] = fs.readArray(n);            ArrayList<ArrayList<Integer>> l = new ArrayList<>();            for (int i = 0; i <= 100; i++) {                l.add(new ArrayList<>());            }             boolean check[] = new boolean[n];            for (int i = 1; i <= 100; i++) {                for (int j = 0; j < n; j++) {                    if (!check[j] && arr[j] % (i + 1) == 0) {                        l.get(i).add(j);                        check[j] = true;                    }                }            }             ArrayList<ArrayList<Integer>> nl = new ArrayList<>();            for (int i = 0; i < l.size(); i++) {                if (l.get(i).size() != 0) {                    nl.add(l.get(i));                }            }            System.out.println(nl.size());            outer: for (int i = 0; i < n; i++) {                for (int j = 0; j < nl.size(); j++) {                    for (int in : nl.get(j)) {                        if (in == i) {                            System.out.print(j + 1 + " ");                            continue outer;                        }                    }                }            }            System.out.println();        }         out.close();    }     static boolean allSame(ArrayList<Integer> l, int n, int arr[]) {         for (int a : l) {            if (gcd(arr[a], n) == 1)                return false;        }        return true;    }     static int gcd(int a, int b) {        if (b == 0)            return a;        return gcd(b, a % b);    }     static void sort(int[] a) {        ArrayList<Integer> l = new ArrayList<>();        for (int i : a)            l.add(i);        Collections.sort(l);        for (int i = 0; i < a.length; i++)            a[i] = l.get(i);    }     static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         StringBuilder nextsb() {            StringBuilder sb = new StringBuilder(next());            return sb;        }         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                }            return st.nextToken();        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
