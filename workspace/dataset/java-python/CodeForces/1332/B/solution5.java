//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class B {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=sc.nextInt();		while(test-->0)		{			int n=sc.nextInt();			int arr[]=new int[n];			HashMap<Integer,Integer> map=new HashMap<>();			HashSet<Integer> set=new HashSet<>();			for(int i=0;i<n;i++) {				arr[i]=sc.nextInt();				if(!map.containsKey(arr[i]))				{					map.put(arr[i],0);					set.add(arr[i]);				}			}						int col=1;			for(col=1;col<=11;col++) {				if(set.isEmpty()) {					break;				}				int maxcnt=0;				int div=2;				for(int i=2;i*i<=1000;i++) {					int cnt=0;					for(int x:set) {						if(x%i == 0) {							++cnt;						}					}					if(cnt>maxcnt) {						maxcnt=cnt;						div=i;					}				}								for(int i:arr) {					if(set.contains(i) && i%div == 0) {						map.put(i,col);						set.remove(i);					}				}			}									//			int col=1;//			while(set.size()>0) {//				int ele =0;//				for(int x:set) {//					ele =x;//					break;//				}//				ArrayList<Integer> li=new ArrayList<>(set);//				for(int x:li) {//					int gcd =_gcd(x,ele);//					if(gcd>0) {//						map.put(x,col);//					}//					set.remove(x);//				}//				col++;//			}//						ans.append(col-1+"\n");			for(int i=0;i<n;i++) {				ans.append(map.get(arr[i])+" ");			}			ans.append("\n");										}			    System.out.print(ans);	}         static int _gcd(int a,int b) {    	if(b == 0) return a;    	return _gcd(b,a%b);    }        static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
