import java.io.*;import java.util.*;public class ACM {    public static void main(String args[]) throws FileNotFoundException, IOException {        //Scanner x = new Scanner(System.in);        StringBuilder out = new StringBuilder();        StringTokenizer tk;        Buffer.init(System.in);            int n=Buffer.nextInt();            int [] arr=new int[n];            int [] arr2=new int[n-1];            int [] arr3=new int[n-2];            int First=0;            int Sec=0;        for (int i = 0; i < arr.length; i++) {            arr[i]=Buffer.nextInt();        }        for (int i = 0; i < arr2.length; i++) {            arr2[i]=Buffer.nextInt();        }        for (int i = 0; i < arr3.length; i++) {            arr3[i]=Buffer.nextInt();        }        Arrays.sort(arr);        Arrays.sort(arr2);        Arrays.sort(arr3);        for (int i = 0; i < n-1; i++) {            if(arr[i]!=arr2[i]){                First=arr[i];                break;            }            else{                if(i==n-2){                    First=arr[n-1];                }            }        }        for (int i = 0; i < n-2 ; i++) {            if(arr2[i]!=arr3[i]){                Sec=arr2[i];                break;            }            else{                if(i==n-3){                    Sec=arr2[n-2];                }            }        }        System.out.println(First);        System.out.println(Sec);    }}class Buffer {     static BufferedReader reader;    static StringTokenizer tokenizer;     static void init(InputStream input) throws UnsupportedEncodingException {        reader = new BufferedReader(                new InputStreamReader(input, "UTF-8"));        tokenizer = new StringTokenizer("");    }     static String next() throws IOException {        while (!tokenizer.hasMoreTokens()) {            //TODO add check for eof if necessary            tokenizer = new StringTokenizer(                    reader.readLine());        }        return tokenizer.nextToken();    }     static String nextLine() throws IOException {        return reader.readLine();    }     static int nextInt() throws IOException {        return Integer.parseInt(next());    }     static double nextDouble() throws IOException {        return Double.parseDouble(next());    }     static long nextLong() throws IOException {        return Long.parseLong(next());    }}
