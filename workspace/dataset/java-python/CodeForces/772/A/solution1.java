import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.List;import java.util.Random;import java.util.StringTokenizer; // IMPORTANT - DP to find longest subsequencepublic class Main implements Runnable { 	int sz[];	int id[];	List<Integer> edges[];	int MAXN = (int) 1.5e7 + 1;	double eps = 1e-8; 	private void solve() throws IOException {		int n = nextInt();		double p = nextDouble();		long b[] = new long[n];		long a[] = new long[n];		for (int i = 0; i < n; ++i) {			a[i] = nextInt();			b[i] = nextInt();		}		double l = 0.0d;		double r = 1e12;		for (int i = 0; i < 100; ++i) {			double mid = (l + r) / 2;			double tot = 0;			double tmp[] = new double[n];			for (int j = 0; j < n; ++j) {				tmp[j] = Math.max(0, (a[j] * mid - b[j]) / p);			}			double vt = Arrays.stream(tmp).sum();			if (vt <= mid) {				l = mid;			} else {				r = mid;			}		}		if (l > 1e11) {			pw.println(-1);		} else {			pw.printf("%.20f", l);		}	} 	int find(int x) {		int p = x;		while (id[p] != p) {			p = id[p];		}		while (id[x] != x) {			int tmp = id[x];			id[x] = p;			x = tmp;		}		return p;	} 	void union(int x, int y) {		int a = find(x);		int b = find(y);		if (a == b)			return;		if (sz[a] <= sz[b]) {			id[a] = b;			sz[b] += sz[a];		} else {			id[b] = a;			sz[a] += sz[b];		} 	} 	void test() throws IOException {		Random rnd = new Random();		for (int i = 0; i < 2; ++i) {			int n = rnd.nextInt(30) + 1;			int a[] = new int[n];			System.err.println(n);			for (int j = 0; j < n; ++j) {				a[j] = rnd.nextInt(2) + 1;				System.err.print(a[j] + " ");			}//			solve(n, a);			System.err.println();		}	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in), 32768);			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
