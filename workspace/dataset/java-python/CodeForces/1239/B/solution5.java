import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintStream;import java.util.Locale;import java.util.StringTokenizer; public class Solution implements Runnable {		private PrintStream out;	private BufferedReader in;	private StringTokenizer st;		public void solve() throws IOException {		long time0 = System.currentTimeMillis();				int n = nextInt();		String s = next();		Answer answer = solve(n, s);		out.println(answer.answer);		out.println((answer.l + 1) + " " + (answer.r + 1));				System.err.println("time: " + (System.currentTimeMillis() - time0));	}		private Answer solve(int n, String str) {		boolean[] s = new boolean[n];		for (int i = 0; i < n; i++) {			if (str.charAt(i) == '(') {				s[i] = true;			} else if (str.charAt(i) == ')') {				s[i] = false;			} else {				throw new RuntimeException("Botva in input!");			}		}		int[] sum = new int[n];		int sacc = 0;		for (int i = 0; i < n; i++) {			sum[i] = sacc;			sacc += s[i] ? 1 : -1;		}		Answer answer = new Answer(0, 0, 0);		if (sacc != 0) {			return answer;		}		int min = 0;		int mincnt = 1;		for (int i = 1; i < n; i++) {			if (min > sum[i]) {				min = sum[i];				mincnt = 1;			} else if (min == sum[i]) {				mincnt += 1;			}		}		answer.update(mincnt, 0, 0);		int i = 0;		while (sum[i] > min) {			i++;		}		while (i < n) {			int j = 1;			while (sum[(i + j) % n] > min) {				j++;			}			int first = 0;			for (int k = 1; k < j; k++) {				if (sum[(i + k) % n] == min + 1) {					first += 1;				}			}			answer.update(first, i, (i + j - 1) % n);			int second = 0;			int secondfirst = 1;			for (int k = 2; k < j; k++) {				if (sum[(i + k) % n] == min + 1) {					answer.update(mincnt + second, (i + secondfirst) % n, (i + k - 1) % n);					second = 0;					secondfirst = k;				}				if (sum[(i + k) % n] == min + 2) {					second += 1;				}			}			i = i + j;		}		return answer;	}		private static final class Answer {		private int answer;		private int l;		private int r;		private Answer(int answer, int l, int r) {			this.answer = answer;			this.l = l;			this.r = r;		}		private void update(int answer, int l, int r) {			if (this.answer < answer) {				this.answer = answer;				this.l = l;				this.r = r;			}		}	} 	public double nextDouble() throws IOException {		return Double.parseDouble(next());	}		public long nextLong() throws IOException {		return Long.parseLong(next());	}		public int nextInt() throws IOException {		return Integer.parseInt(next());	}		public String next() throws IOException {		while (!st.hasMoreTokens()) {			String line = in.readLine();			if (line == null) {				return null;			}			st = new StringTokenizer(line);		}		return st.nextToken();	}		@Override	public void run() {		try {			solve();			out.close();		} catch (Throwable e) {			throw new RuntimeException(e);		}	}		public Solution(String name) throws IOException {		Locale.setDefault(Locale.US);		if (name == null) {			in = new BufferedReader(new InputStreamReader(System.in));			out = new PrintStream(new BufferedOutputStream(System.out));		} else {			in = new BufferedReader(new InputStreamReader(new FileInputStream(name + ".in")));			out = new PrintStream(new BufferedOutputStream(new FileOutputStream(name + ".out")));		}		st = new StringTokenizer("");	}		public static void main(String[] args) throws IOException {		new Thread(new Solution(null)).start();	}}
