# by the authority of GOD     author: manhar singh sachdev # import os, sysfrom io import BytesIO, IOBasefrom collections import defaultdict def main():    n = int(input())    path = defaultdict(set)    parent = [0]*(n+1)    for _ in range(n-1):        a,b = map(int,input().split())        path[a].add(b)        path[b].add(a)    root = -1    z = [0]*(n+1)    for i in path:        if len(path[i])>1:            root = i        else:            x = path[i].pop()            parent[x] += 1            path[i].add(x)            z[i] = 1    st = [root]    ans = 1    while len(st):        if not len(path[st[-1]]):            x = st.pop()            if len(st):                z[st[-1]] |= (3^z[x])                if z[st[-1]] == 3:                    ans = 3                    break            continue        i = path[st[-1]].pop()        path[i].remove(st[-1])        st.append(i)    ans1 = n-1    for i in parent:        ans1 -= max(0,(i-1))    print(ans,ans1) # Fast IO RegionBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == '__main__':    main()
