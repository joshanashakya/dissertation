import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            ArrayList<Integer> adj[]=new ArrayList[n+1];            ArrayList<Integer> p[]=new ArrayList[n+1];            Vertex V[]=new Vertex[n+1];            for(int i=1;i<=n;i++)            {                adj[i]=new ArrayList<>();                V[i]=new Vertex(i);                p[i]=new ArrayList<>();            }            for(int i=0;i<n-1;i++)            {                int u=input.nextInt();                int v=input.nextInt();                adj[u].add(v);                adj[v].add(u);            }            int s=1;            for(int i=1;i<=n;i++)            {                if(adj[i].size()>1)                {                    s=i;                    break;                }            }            bfs(adj,V,s);            int min=1;            int o=0,e=0;            for(int i=1;i<=n;i++)            {                if(adj[i].size()==1)                {                    if(V[i].d%2==0)                    {                        o=1;                    }                    else                    {                        e=1;                    }                    int p1=V[i].parent.key;                    p[p1].add(i);                }            }            if(o==1 && e==1)            {                min=3;            }            int sum=0;            int max=0;            for(int i=1;i<=n;i++)            {                if(p[i].size()>=2)                {                    sum+=p[i].size();                    max++;                }            }            max+=n-1-sum;            out.println(min+" "+max);        }        out.close();    }    public static void bfs(ArrayList<Integer> adj[],Vertex V[], int s)    {        V[s].color="gray";        V[s].d=0;        V[s].parent=null;        Queue<Integer> q=new LinkedList<>();        q.add(s);        while(!q.isEmpty())        {            int k=q.poll();            Vertex u=V[k];            for(int i=0;i<adj[k].size();i++)            {                int key=adj[k].get(i);                Vertex v=V[key];                if(v.color=="white")                {                    q.add(key);                    v.color="gray";                    v.d=u.d+1;                    v.parent=u;                }            }            u.color="black";        }    }    public static class Vertex    {        int key;        int d,f;        String color;        Vertex parent;        Vertex(int key)        {            this.key=key;            this.d=0;            this.f=0;            this.color="white";            this.parent=null;        }    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {             return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
