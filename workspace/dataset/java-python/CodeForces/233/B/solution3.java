//package codeforces; import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.Closeable;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.math.BigInteger;import java.util.ArrayList;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Set;import java.util.StringTokenizer;import java.util.TreeSet; public class A implements Closeable {    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));    PrintWriter writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     A() throws IOException {//        reader = new BufferedReader(new FileReader("input.txt"));//        writer = new PrintWriter(new FileWriter("output.txt"));    }     StringTokenizer stringTokenizer;     String next() throws IOException {        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {            stringTokenizer = new StringTokenizer(reader.readLine());        }        return stringTokenizer.nextToken();    }     int nextInt() throws IOException {        return Integer.parseInt(next());    }     long nextLong() throws IOException {        return Long.parseLong(next());    }     private final int MOD = 1000 * 1000 * 1000 + 7;     int sum(int a, int b) {        a += b;        return a >= MOD ? a - MOD : a;    }     int product(int a, int b) {        return (int) (1l * a * b % MOD);    }     int pow(int x, int k) {        int result = 1;        while (k > 0) {            if (k % 2 == 1) {                result = product(result, x);            }            x = product(x, x);            k /= 2;        }        return result;    }     int inv(int x) {        return pow(x, MOD - 2);    }     void solve() throws IOException {        long n = nextLong();        long answer = Integer.MAX_VALUE;        for(int s = 1; s < 100; s++) {            long D = s * s + 4 * n;            long d = (long)(Math.floor(Math.sqrt(D) + 0.5) + 0.1);            if(d * d == D) {                long x = - s + d;                if(x % 2 == 0) {                    x /= 2;                    int dsum = 0;                    for(long y = x; y > 0; y /= 10) {                        dsum += y % 10;                    }                    if(dsum == s) {                        answer = Math.min(answer, x);                    }                }            }        }        if(answer == Integer.MAX_VALUE) {            answer = -1;        }        writer.println(answer);    }     public static void main(String[] args) throws IOException {        try (A a = new A()) {            a.solve();        }    }     @Override    public void close() throws IOException {        reader.close();        writer.close();    }}
