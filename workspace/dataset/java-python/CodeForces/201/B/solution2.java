import java.io.*;import java.util.*; public class Solution { 	static long INF = (long) 1e18; 	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner();		PrintWriter out = new PrintWriter(System.out);		int n = sc.nextInt(), m = sc.nextInt();		int[][] a = new int[n][m];		for (int i = 0; i < n; i++)			for (int j = 0; j < m; j++) {				a[i][j] = sc.nextInt();			}		long[] prefixR = new long[n], suffixR = new long[n + 1], prefixC = new long[m], suffixC = new long[m + 1];		long[] sumCol = new long[m], sumRow = new long[n];		for (int j = m - 1; j >= 0; j--) {			for (int i = 0; i < n; i++)				sumCol[j] += a[i][j]; 			for (int k = j, d = 2; k < m; k++, d += 4) {				suffixC[j] += d * d * sumCol[k];			}		}		for (int i = n - 1; i >= 0; i--) {			for (int j = 0; j < m; j++)				sumRow[i] += a[i][j]; 			for (int k = i, d = 2; k < n; k++, d += 4) {				suffixR[i] += d * d * sumRow[k];			}		}		for (int i = 0; i < n; i++) {			for (int k = i, d = 2; k >= 0; k--, d += 4) {				prefixR[i] += d * d * sumRow[k];			}		}		for (int j = 0; j < m; j++) {			for (int k = j, d = 2; k >= 0; k--, d += 4) {				prefixC[j] += d * d * sumCol[k];			}		}		int I = -1, J = -1;		long minJ = INF, minI = INF;		for (int j = 0; j <= m; j++) {			long curr = suffixC[j];			if (j > 0)				curr += prefixC[j - 1];			if (curr < minJ) {				minJ = curr;				J = j;			}		}		for (int i = 0; i <= n; i++) {			long curr = suffixR[i];			if (i > 0)				curr += prefixR[i - 1];			if (curr < minI) {				minI = curr;				I = i;			}		} 		out.println(minI + minJ);		out.println(I + " " + J);		out.close(); 	} 	static class Scanner {		BufferedReader br;		StringTokenizer st; 		Scanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		Scanner(String fileName) throws FileNotFoundException {			br = new BufferedReader(new FileReader(fileName));		} 		String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		String nextLine() throws IOException {			return br.readLine();		} 		int nextInt() throws IOException {			return Integer.parseInt(next());		} 		long nextLong() throws NumberFormatException, IOException {			return Long.parseLong(next());		} 		double nextDouble() throws NumberFormatException, IOException {			return Double.parseDouble(next());		} 		boolean ready() throws IOException {			return br.ready();		} 	} 	static void sort(int[] a) {		shuffle(a);		Arrays.sort(a);	} 	static void shuffle(int[] a) {		int n = a.length;		Random rand = new Random();		for (int i = 0; i < n; i++) {			int tmpIdx = rand.nextInt(n);			int tmp = a[i];			a[i] = a[tmpIdx];			a[tmpIdx] = tmp;		}	} }
