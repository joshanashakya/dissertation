import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }      static LinkedList<Integer> primes = new LinkedList<>();    static {        boolean[] isPrime = new boolean[100_004];        Arrays.fill(isPrime, true);        for (int i = 2; i < isPrime.length; i++) {            if (isPrime[i]) {                primes.offerLast(i);                for (long p = (long)i*i; p < isPrime.length; p += i) isPrime[(int)p] = false;            }        }    }     void run(FastScanner in, PrintWriter out) {         int N = in.nextInt();         HashMap<Integer, Integer> primeToSeqLength = new HashMap<>();         LinkedList<Integer> myprimes = new LinkedList<>();        int max = 0;        while (N-- > 0) {            int a = in.nextInt();              // length of longest sequence containing prime is now            // max length of longest sequence of all my divisors+1             myprimes.clear();            int myMaxSeqLen = 0;            for (int prime : primes) {                if (a <= 1) break;                if (a % prime != 0) continue;                myprimes.add(prime);                myMaxSeqLen = Math.max(myMaxSeqLen, primeToSeqLength.getOrDefault(prime, 0));                while (a%prime == 0) a /= prime;            }            for (int myprime : myprimes) {                primeToSeqLength.put(myprime, myMaxSeqLen+1);            }            max = Math.max(max, myMaxSeqLen+1);        }         out.println(max);    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
