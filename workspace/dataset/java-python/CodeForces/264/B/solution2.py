 # from __future__ import print_function # for PyPy2from collections import Counter, OrderedDictfrom itertools import permutations as permfrom fractions import Fractionfrom collections import dequefrom sys import stdinfrom bisect import *from heapq import *from math import * g   = lambda : stdin.readline().strip()gl  = lambda : g().split()gil = lambda : [int(var) for var in gl()]gfl = lambda : [float(var) for var in gl()]gcl = lambda : list(g())gbs = lambda : [int(var) for var in g()]mod = int(1e9)+7inf = float("inf")                       n, = gil()a = gil()  def getPrimes(x):	p = [] 	if x&1 == 0:		p.append(2) 	while x&1 == 0:		x //= 2 	for i in range(3, ceil(sqrt(x))+1):		if x%i == 0:			p.append(i) 		while x%i == 0:			x //= i 	if x > 1:		p.append(x) 	return p   primes = {}ans = 1 for v in a:	maxP = 0	local_primes = getPrimes(v)	# print(local_primes, primes)	for p in local_primes:		maxP = max(maxP, primes.get(p, 0)) 	for p in local_primes:		primes[p] = maxP+1 	ans = max(maxP+1, ans) print(ans)
