"""#If FastIO not needed, used this and don't forget to strip#import sys, math#input = sys.stdin.readline""" import osimport sysfrom io import BytesIO, IOBaseimport heapq as h from bisect import bisect_left, bisect_right from types import GeneratorTypeBUFSIZE = 8192class FastIO(IOBase):    newlines = 0     def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") from collections import defaultdict as dd, deque as dqimport math, string def getInts():    return [int(s) for s in input().split()] def getInt():    return int(input()) def getStrs():    return [s for s in input().split()] def getStr():    return input() def listStr():    return list(input()) MOD = 10**9+7 def prime_factors(n):    factors = []    num = 0    while n % 2 == 0:        num += 1        n //= 2    if num:        factors.append(2)    i = 3    while n > 1 and i*i <= n:        num = 0        while n % i == 0:            num += 1            n //= i        if num:            factors.append(i)        i += 2    if n > 2:        factors.append(n)    return factors """We want to add A[i] onto the end of the longest possible sequence we canWe already know that numbers are strictly increasing, so it's just a case of finding non-coprimes For each prime in a number, we look up the previous occurence of that prime and add one to that sequence, and take the max of these"""  def solve():    N = getInt()    A = [0] + getInts()    prime_last_index = dd(int)    dp = [1]*(N+1)    for i in range(1,N+1):        facs = prime_factors(A[i])        for fac in facs:            last = prime_last_index[fac]            if last: dp[i] = max(dp[last]+1,dp[i])            prime_last_index[fac] = i    return max(dp)    #for _ in range(getInt()):print(solve())
