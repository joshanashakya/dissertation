//package albert.codeforces.goodsequences264b; import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Scanner;import java.util.Set; public class Solution {    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        int n = scan.nextInt();        Map<Integer, Integer> map = new HashMap<>();        int max = 0;        if (n == 1) {            System.out.println(1);            return;        }        while (n-- > 0) {            int i = scan.nextInt();            int sqrt = (int) Math.sqrt(i);            Set<Integer> set = new HashSet<>();            Map<Integer, Integer> h = new HashMap<>();            int localMax = 0;            for (int j = 1; j <= sqrt; j++) {                if (i % j == 0) {                    int one = j;                    int two = i / j;                    if (one > 1) {                        localMax = Math.max(localMax, map.getOrDefault(one, 0) + 1);                        set.add(one);                    }                    if (two > 1) {                        localMax = Math.max(localMax, map.getOrDefault(two, 0) + 1);                        set.add(two);                    }                }            }            for (Integer s : set) {                map.put(s, localMax);            }            max = Math.max(max, localMax);        }        System.out.println(max);    }}
