//package codeforces.div2; import java.util.*; public class GoodSequences {      public void print(int arr[]) {           sieve();         int maxL = 0;         int dp[] = new int[100004];         //Arrays.fill(dp, 1);         for(int i  = 0; i < arr.length; i++) {             int len = 0;             if(arr[i] > 1) {                 if(map.containsKey(arr[i])) {                     dp[arr[i]] = Math.max(dp[arr[i]], 1);                 }                 for (int j = 0; j < map.get(arr[i]).size(); j++) {                     len = Math.max(len, dp[map.get(arr[i]).get(j)]);                 }                 maxL = Math.max(maxL, len );                 for (int j = 0; j < map.get(arr[i]).size(); j++) {                     dp[map.get(arr[i]).get(j)] = Math.max(len + 1, dp[map.get(arr[i]).get(j)]);                 }             }          }         int max = Arrays.stream(dp).max().getAsInt();         System.out.println(Math.max(max, 1));     }     HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();    public void sieve() {         int dp[] = new int[100004];        Arrays.fill(dp, - 1);        for(int i = 2; i <= 100003; i++) {            if(dp[i]==-1) {                map.put(i, new ArrayList<>());                List<Integer> l = new ArrayList<>();                int k = i;                int o = i + i;                for (int j = o; j <= 100003; j = j + i) {                    dp[j] = 1;                    if(map.containsKey(j)) {                        List<Integer> m = map.get(j);                        m.add(k);                        map.put(j, m);                    } else {                        List<Integer> y = new ArrayList<>();                        y.add(k);                        map.put(j, y);                    }                    //l.add(j);                }            }        }    }      public static void main(String []args) {         Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int i  = 0;        int arr[] = new int[n];        while ( i < n) {            arr[i++] = sc.nextInt();        }        GoodSequences p = new GoodSequences();        p.print(arr);    }}
