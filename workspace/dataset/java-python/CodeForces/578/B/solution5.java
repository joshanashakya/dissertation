import java.util.*;import java.io.*;import java.io.ObjectOutputStream.PutField;Â public class Main {    public static void main ( String args[] ) {      FastReader sc = new FastReader();      PrintWriter out = new PrintWriter (System.out);      int n = sc.nextInt();		int k = sc.nextInt();		int x = sc.nextInt();		int[] aa = new int[n];		for (int i = 0; i < n; i++)			aa[i] = sc.nextInt();		int[] pp = new int[n];		int p = 0;		for (int i = 0; i < n; i++) {			pp[i] = p;			p |= aa[i];		}		int[] qq = new int[n];		int q = 0;		for (int i = n - 1; i >= 0; i--) {			qq[i] = q;			q |= aa[i];		}		long xk = 1;		while (k-- > 0)			xk *= x;		long ans = 0;		for (int i = 0; i < n; i++)			ans = Math.max(ans, aa[i] * xk | pp[i] | qq[i]);        out.println(ans);           	      out.flush();}    static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st; 				public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		} 				String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException  e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		} 				int nextInt() 		{ 			return Integer.parseInt(next()); 		} 				long nextLong() 		{ 			return Long.parseLong(next()); 		} 				double nextDouble() 		{ 			return Double.parseDouble(next()); 		} 				String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		}}}     class Pair {    	int x ;     	int y ;     	public Pair(int x ,int y){    		this.x = x;    		this.y=y;}    }     class Pair1 implements Comparable{    	int x ;     	int y ;     	public Pair1(int x ,int y){    		this.x = x;    		this.y=y;}    	public int compareTo(Object o) {    		Pair1 a = (Pair1) o ;     		    		return (a.y-this.y);    	}    		    	}     class Pair2 implements Comparable{    	int x ;     	int y ;     	public Pair2(int x ,int y){    		this.x = x;    		this.y=y;}    	public int compareTo(Object o) {    		Pair2 a = (Pair2) o ;     		    		return (this.y-a.y);    	}    		    	}
