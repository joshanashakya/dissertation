import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigInteger;import java.util.ArrayList;import java.util.Arrays;import java.util.BitSet;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.PriorityQueue;import java.util.SortedSet;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; /** * # *  * @author pttrung */public class B_Round_148_Div1 { 	public static long MOD = 1000000007; 	public static void main(String[] args) throws FileNotFoundException {		// PrintWriter out = new PrintWriter(new FileOutputStream(new File(		// "output.txt")));		PrintWriter out = new PrintWriter(System.out);		Scanner in = new Scanner();		int n = in.nextInt();		int h = in.nextInt();		Point[] data = new Point[n];		for (int i = 0; i < n; i++) {			data[i] = new Point(i, in.nextInt());		}		Arrays.sort(data, new Comparator<Point>() { 			@Override			public int compare(Point o1, Point o2) { 				return o1.y - o2.y;			}		});		if (n <= 16) {			int result = Integer.MAX_VALUE;			int set = 0;			for (int i = 0; i < 1 << n; i++) {				int min = Integer.MAX_VALUE;				int max = Integer.MIN_VALUE;				for (int j = 0; j < n; j++) {					for (int k = j + 1; k < n; k++) {						int a = ((1 << j) & i) != 0 ? 1 : 0;						int b = ((1 << k) & i) != 0 ? 1 : 0;						int v;						if (a == b) {							v = data[j].y + data[k].y;						} else {							v = data[j].y + data[k].y + h;						}						if (min > v) {							min = v;						}						if (max < v) {							max = v;						}					}				}				if (max - min < result) {					result = max - min;					set = i;				}			}			int[] re = new int[n];			for (int i = 0; i < n; i++) {				if (((1 << i) & set) != 0) {					re[data[i].x] = 2;				} else {					re[data[i].x] = 1;				}			}			out.println(result);			for (int i : re) {				out.print(i + " ");			}		} else {			int min = data[0].y + data[1].y;			int max = data[n - 1].y + data[n - 2].y;			int result = max - min;			min = Math.min(data[0].y + data[1].y + h, data[1].y + data[2].y);			max = Math.max(data[n - 1].y + data[n - 2].y, data[n - 1].y					+ data[0].y + h);			if (result > max - min) {				out.println(max - min); 				for (int i = 0; i < n; i++) {					if (data[0].x != i)						out.print(2 + " ");					else						out.print(1 + " ");				}			} else {				out.println(result);				for (int i = 0; i < n; i++) {					out.print(2 + " ");				}			}		}		out.close();	} 	public static int[] KMP(String val) {		int i = 0;		int j = -1;		int[] result = new int[val.length() + 1];		result[0] = -1;		while (i < val.length()) {			while (j >= 0 && val.charAt(j) != val.charAt(i)) {				j = result[j];			}			j++;			i++;			result[i] = j;		}		return result; 	} 	public static boolean nextPer(int[] data) {		int i = data.length - 1;		while (i > 0 && data[i] < data[i - 1]) {			i--;		}		if (i == 0) {			return false;		}		int j = data.length - 1;		while (data[j] < data[i - 1]) {			j--;		}		int temp = data[i - 1];		data[i - 1] = data[j];		data[j] = temp;		Arrays.sort(data, i, data.length);		return true;	} 	public static int digit(long n) {		int result = 0;		while (n > 0) {			n /= 10;			result++;		}		return result;	} 	public static double dist(long a, long b, long x, long y) {		double val = (b - a) * (b - a) + (x - y) * (x - y);		val = Math.sqrt(val);		double other = x * x + a * a;		other = Math.sqrt(other);		return val + other; 	} 	public static class Point implements Comparable<Point> { 		int x, y; 		public Point(int start, int end) {			this.x = start;			this.y = end;		} 		@Override		public int hashCode() {			int hash = 5;			hash = 47 * hash + this.x;			hash = 47 * hash + this.y;			return hash;		} 		@Override		public boolean equals(Object obj) {			if (obj == null) {				return false;			}			if (getClass() != obj.getClass()) {				return false;			}			final Point other = (Point) obj;			if (this.x != other.x) {				return false;			}			if (this.y != other.y) {				return false;			}			return true;		} 		@Override		public int compareTo(Point o) {			return x - o.x;		}	} 	public static class FT { 		long[] data; 		FT(int n) {			data = new long[n];		} 		public void update(int index, long value) {			while (index < data.length) {				data[index] += value;				index += (index & (-index));			}		} 		public long get(int index) {			long result = 0;			while (index > 0) {				result += data[index];				index -= (index & (-index));			}			return result; 		}	} 	public static long gcd(long a, long b) {		if (b == 0) {			return a;		}		return gcd(b, a % b);	} 	public static long pow(long a, long b) {		if (b == 0) {			return 1;		}		if (b == 1) {			return a;		}		long val = pow(a, b / 2);		if (b % 2 == 0) {			return val * val % MOD;		} else {			return val * (val * a % MOD) % MOD; 		}	} 	static class Scanner { 		BufferedReader br;		StringTokenizer st; 		public Scanner() throws FileNotFoundException {			// System.setOut(new PrintStream(new			// BufferedOutputStream(System.out), true));			br = new BufferedReader(new InputStreamReader(System.in));			// br = new BufferedReader(new InputStreamReader(new			// FileInputStream(new File("input.txt"))));		} 		public String next() { 			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (Exception e) {					throw new RuntimeException();				}			}			return st.nextToken();		} 		public long nextLong() {			return Long.parseLong(next());		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		} 		public String nextLine() {			st = null;			try {				return br.readLine();			} catch (Exception e) {				throw new RuntimeException();			}		} 		public boolean endLine() {			try {				String next = br.readLine();				while (next != null && next.trim().isEmpty()) {					next = br.readLine();				}				if (next == null) {					return true;				}				st = new StringTokenizer(next);				return st.hasMoreTokens();			} catch (Exception e) {				throw new RuntimeException();			}		}	}}
