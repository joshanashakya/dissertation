import java.io.*;import java.util.*;import java.math.*; public class A {    public static void main(String[] args) throws IOException {        FastScanner fs=new FastScanner();        PrintWriter out = new PrintWriter(System.out);        // int T = 1;         // int T=fs.nextInt();        // for (int tt=0; tt<T; tt++) {        // }        String s = fs.next();        String a = fs.next();        String b = fs.next();         String rev_s = new StringBuilder(s).reverse().toString();        int idxA_lr=s.indexOf(a);        int idxA_rl=rev_s.indexOf(a);        boolean lr=false,rl=false;        // System.out.println(s.substring(idxA_lr+a.length(), s.length()));        if (idxA_lr!=-1 && s.substring(idxA_lr+a.length(), s.length()).indexOf(b)!=-1) {            lr=true;        }        if (idxA_rl!=-1 && rev_s.substring(idxA_rl+a.length(),rev_s.length()).indexOf(b)!=-1) {            rl=true;        }        if (lr&&rl) {            out.println("both");        }        else if (lr) {            out.println("forward");        }        else if (rl) {            out.println("backward");         }        else {            out.println("fantasy");         }                out.close();    }     static final Random random=new Random();        static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    } }
