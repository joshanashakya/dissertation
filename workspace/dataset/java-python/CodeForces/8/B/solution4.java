import java.io.*;import java.util.*;import java.math.*;    public class Test{    public static boolean check(int x, int y                                ,HashMap<Integer,ArrayList<Integer>> map                                ,HashMap<Integer,ArrayList<Boolean>> bool)    {        int un=0;        int vis = 0;        int in = map.get(x).indexOf(y);        bool.get(x).set(in,true);        if(map.containsKey(x))        {             ArrayList<Integer> list = map.get(x);             ArrayList<Boolean> list2 = bool.get(x);             if(list.contains(y+1))             {                  in = list.indexOf(y+1);                  if(list2.get(in))                  {                       vis++;                  }else{                      un++;                  }             }             if(list.contains(y-1))             {                  in = list.indexOf(y-1);                  if(list2.get(in))                  {                       vis++;                  }else{                      un++;                  }             }                     }         if(map.containsKey(x-1))        {             ArrayList<Integer> list = map.get(x-1);             ArrayList<Boolean> list2 = bool.get(x-1);             if(list.contains(y))             {                  in = list.indexOf(y);                  if(list2.get(in))                  {                       vis++;                  }else{                      un++;                  }             }                     }         if(map.containsKey(x+1))        {             ArrayList<Integer> list = map.get(x+1);             ArrayList<Boolean> list2 = bool.get(x+1);             if(list.contains(y))             {                  in = list.indexOf(y);                  if(list2.get(in))                  {                       vis++;                  }else{                      un++;                  }             }        }        if(vis>1)        {             return false;        }        return true;     }    public static boolean func(String str)    {         HashMap<Integer,ArrayList<Integer>> map = new                             HashMap<Integer,ArrayList<Integer>>();         HashMap<Integer,ArrayList<Boolean>> bool = new                             HashMap<Integer,ArrayList<Boolean>>();          int n = str.length();         ArrayList<Integer> list = new ArrayList<Integer>();         ArrayList<Boolean> list2 = new ArrayList<Boolean>();         list2.add(false);         list.add(0);         int x=0;         int y=0;         map.put(0,list);         bool.put(0,list2);         char ch;         for(int i = 0;i<n;i++)         {             ch = str.charAt(i);             if(ch=='L')x--;             if(ch=='R')x++;             if(ch=='U')y++;             if(ch=='D')y--;             if(map.containsKey(x))             {                  ArrayList<Integer> temp = map.get(x);                  ArrayList<Boolean> temp2 = bool.get(x);                  if(temp.contains(y))                  {                       return false;                  }                  temp.add(y);                  temp2.add(false);                  map.put(x,temp);                  bool.put(x,temp2);             }else{                ArrayList<Integer> temp = new ArrayList<Integer>();                ArrayList<Boolean> temp2 = new ArrayList<Boolean>();                temp.add(y);                temp2.add(false);                map.put(x,temp);                bool.put(x,temp2);             }         }         x=0;y=0;         // pn(map);         // pn(bool);         boolean b = check(x,y,map,bool);         if(!b)return false;          for(int i = 0;i<n;i++)         {             ch = str.charAt(i);             if(ch=='L')x--;             if(ch=='R')x++;             if(ch=='U')y++;             if(ch=='D')y--;              b = check(x,y,map,bool);             if(!b)             {                  return false;             }         }         return true;        }    public static void process()throws IOException    {                     String str = nln();          if(func(str))          {                pn("OK");          }else{             pn("BUG");          }    }      static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;         // oj = System.getProperty("ONLINE_JUDGE") != null;        // if(!oj) sc=new AnotherReader(100);         // long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}
