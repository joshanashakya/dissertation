import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            Lib lib = new Lib();            int n = in.nextInt();            long MODULO = (long) (1e+9 + 7);            long ans = lib.mod(lib.modBinPow(3, 3 * n, MODULO) - lib.modBinPow(7, n, MODULO), MODULO);            out.println(ans);        }     }     static class Lib {        public long mod(long v, long mod) {            long m = v % mod;            if (m < 0)                m += mod;            return m;        }         public long modBinPow(long v, int n, long MODULO) {            if (n == 0)                return 1;            else if (n == 1)                return v % MODULO;            else {                if (n % 2 == 1) {                    return (v * (modBinPow(v, n - 1, MODULO) % MODULO)) % MODULO;                } else {                    long t = modBinPow(v, n / 2, MODULO) % MODULO;                    return (t * t) % MODULO;                }            }        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
