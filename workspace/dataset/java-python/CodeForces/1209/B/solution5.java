//package solution; import java.io.*;import java.util.*;import java.awt.Point;import java.math.BigInteger; public final class Main {    BufferedReader br;    StringTokenizer stk;     public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        void run() throws Exception {        int n = ni();        int[] arr = new int[n];        String s = nt();        for(int i=0; i<n; i++)            arr[i] = s.charAt(i) - '0';                int[] a = new int[n];        int[] b = new int[n];        int[] count = new int[1000];        for(int i=0; i<n; i++) {            a[i] = ni(); b[i] = ni();        }                for(int i=0; i<n; i++) {            int[] temp = new int[1000];            Arrays.fill(temp, -1);            int value = arr[i] ^ 1;            for(int j=b[i]; j<temp.length; j+=a[i]) {                temp[j] = value;                value ^= 1;            }            for(int j=0; j<temp.length; j++) {                if(temp[j] != -1) {                    int fill_val = temp[j] ^ 1, idx = j - 1;                    while(idx >= 0 && temp[idx] == -1) {                        temp[idx--] = fill_val;                    }                }            }            //pl(Arrays.toString(temp));            for(int j=0; j<temp.length; j++)                count[j] += Math.max(0, temp[j]);        }                pl(Arrays.stream(count).max().getAsInt());    }        //Reader & Writer    String nextToken() throws Exception {        if (stk == null || !stk.hasMoreTokens()) {            stk = new StringTokenizer(br.readLine(), " ");        }        return stk.nextToken();    }     String nt() throws Exception {        return nextToken();    }     String ns() throws Exception {        return br.readLine();    }     int ni() throws Exception {        return Integer.parseInt(nextToken());    }     long nl() throws Exception {        return Long.parseLong(nextToken());    }     double nd() throws Exception {        return Double.parseDouble(nextToken());    }     void p(Object o) {        System.out.print(o);    }     void pl(Object o) {        System.out.println(o);    }}
