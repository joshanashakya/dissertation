import java.io.IOException;import java.io.OutputStreamWriter;import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.OutputStream;import java.io.PrintWriter;import java.util.NoSuchElementException;import java.io.Writer;import java.math.BigInteger;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * @author Alex */public class Main {	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		OutputWriter out = new OutputWriter(outputStream);		TaskB solver = new TaskB();		solver.solve(1, in, out);		out.close();	}} class TaskB {    public void solve(int testNumber, InputReader in, OutputWriter out){	    char[] input = in.next().toCharArray();	    int res = 0;	    for(char c = 'A'; c <= 'Z'; c++){		    int leftmosteven = -1;		    for(int i = 0; i < input.length; i++) {			    if (input[i] == c && i % 2 == 0){				    leftmosteven = i;				    break;			    }		    }		    if (leftmosteven != -1){			    int cur = 1, previndex = leftmosteven;			    for(int i = leftmosteven+1; i < input.length; i++){					if (input[i] == c && (i-previndex) % 2 == 1){						cur++;						previndex = i;					}			    }			    if (cur > res) res = cur;		    }		    int rightmosteven = -1;		    for(int i = 0; i < input.length; i++) {			    if (input[i] == c && i % 2 == 1){				    rightmosteven = i;				    break;			    }		    }		    if (rightmosteven != -1){			    int cur = 1, previndex = rightmosteven;			    for(int i = rightmosteven+1; i < input.length; i++){				    if (input[i] == c && (i-previndex) % 2 == 1){					    cur++;					    previndex = i;				    }			    }			    if (cur > res) res = cur;		    }	    }	    out.print(res);    }} class InputReader {	private InputStream stream;	private byte[] buf = new byte[1024];	private int curChar;	private int numChars;	private SpaceCharFilter filter; 	public InputReader(InputStream stream) {		this.stream = stream;	} 	public int read() {		if (numChars == -1)			throw new InputMismatchException();		if (curChar >= numChars) {			curChar = 0;			try {				numChars = stream.read(buf);			} catch (IOException e) {				throw new InputMismatchException();			}			if (numChars <= 0)				return -1;		}		return buf[curChar++];	}	public String readString() {		int c = read();		while (isSpaceChar(c))			c = read();		StringBuilder res = new StringBuilder();		do {			if (Character.isValidCodePoint(c))				res.appendCodePoint(c);			c = read();		} while (!isSpaceChar(c));		return res.toString();	} 	public boolean isSpaceChar(int c) {		if (filter != null)			return filter.isSpaceChar(c);		return isWhitespace(c);	} 	public static boolean isWhitespace(int c) {		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	}	public String next() {		return readString();	}	public interface SpaceCharFilter {		public boolean isSpaceChar(int ch);	}} class OutputWriter {	private final PrintWriter writer; 	public OutputWriter(OutputStream outputStream) {		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));	}	public void close() {		writer.close();	}	public void print(int i) {		writer.print(i);	}} 
