import java.util.*;import java.lang.*;import java.io.*;import java.math.BigDecimal; public class R108C {    public static void main (String[] args) throws java.lang.Exception {        InputReader in = new InputReader(System.in);        PrintWriter w = new PrintWriter(System.out);        int n = in.nextInt(), q = in.nextInt();        char[] ca1 = in.next().toCharArray();         while (q-- > 0) {            int l = in.nextInt() - 1, r = in.nextInt() - 1;            char[] ca = Arrays.copyOfRange(ca1, 0, n);            int cur = l, d = 1;            int[] a = new int[10];            int prev = -1;            while (cur >= l && cur <= r) {                //w.println(cur);                if (ca[cur] == '-') {                    cur += d;                } else if (ca[cur] >= '0' && ca[cur] <= '9') {                    a[ca[cur] - '0']++;                    ca[cur]--;                    if (ca[cur] < '0')                        ca[cur] = '-';                    prev = -1;                    cur += d;                } else {                    if (prev != -1)                        ca[prev] = '-';                    if (ca[cur] == '>')                        d = 1;                    else                        d = -1;                    prev = cur;                    cur += d;                }                //w.println(Arrays.toString(ca));            }            for (int x : a)                System.out.print(x + " ");            System.out.println();        }        w.close();    }    static long gcd(long a, long b) {        if (b == 0)            return a;        return gcd(b, a % b);    }    static long lcm(long a, long b) {        return (a * b) / gcd(a, b);    }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1)                throw new UnknownError();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new UnknownError();                }                if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int peek() {            if (numChars == -1)                return -1;            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    return -1;                }                if (numChars <= 0)                    return -1;            }            return buf[curChar];        }         public void skip(int x) {            while (x-- > 0)                read();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public String nextString() {            return next();        }         public String next() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuffer res = new StringBuffer();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));             return res.toString();        }         public String nextLine() {            StringBuffer buf = new StringBuffer();            int c = read();            while (c != '\n' && c != -1) {                if (c != '\r')                    buf.appendCodePoint(c);                c = read();            }            return buf.toString();        }         public double nextDouble() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E')                    return res * Math.pow(10, nextInt());                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E')                        return res * Math.pow(10, nextInt());                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }        public int[] nextIntArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }        public long[] nextLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }        public boolean hasNext() {            int value;            while (isSpaceChar(value = peek()) && value != -1)                read();            return value != -1;        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }}
