import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;  public class Main {    static int i,j,k,n,m,t,x,y,max=1000000;    static long ans,a,b,c,d;    static String str;    static char ch;     public static void main(String[] args) {         FastScanner fs = new FastScanner();        n = fs.nextInt();         int[] arr = new int[n];        for(i=0;i<n;i++){            arr[i] = fs.nextInt();            if(arr[i]!=0){                if(arr[i]%2==1)                    x++;                else                    y++;            }        }         x = n/2-x;        y = n/2 -y;         if(n%2==1)            x++;         int[][][][] dp = new int[n+5][n+5][n+5][2];         for(i=0;i<=n;i++){            for(j=0;j<=n;j++){                for(k=0;k<=n;k++){                    dp[i][j][k][1]=max;                    dp[i][j][k][0]=max;                }            }        }         if(arr[0]==0){            if(x>0)                dp[0][1][0][1]=0;            if(y>0)                dp[0][0][1][0]=0;        }         else{            if(arr[0]%2==1)                dp[0][0][0][1]=0;            else                dp[0][0][0][0]=0;        }          for(i=1;i<n;i++){           if(arr[i]!=0){               int f = arr[i]%2;                for(j=0;j<=x;j++){                   for(k=0;k<=y;k++){                       if(dp[i-1][j][k][0]!=max)                           dp[i][j][k][f]=Math.min(dp[i][j][k][f], Math.abs(f-0)+dp[i-1][j][k][0]);                       if(dp[i-1][j][k][1]!=max)                           dp[i][j][k][f]=Math.min(dp[i][j][k][f], Math.abs(f-1)+dp[i-1][j][k][1]);                    }               }           }            else{               for(j=0;j<=x;j++){                   for(k=0;k<=y;k++){                       if(dp[i-1][j][k][0]!=max){                           if(j<x){                               dp[i][j+1][k][1]=Math.min( dp[i][j+1][k][1], 1+dp[i-1][j][k][0]);                           }                           if(k<y){                               dp[i][j][k+1][0]=Math.min( dp[i][j][k+1][0], dp[i-1][j][k][0]);                           }                       }                        if(dp[i-1][j][k][1]!=max){                           if(j<x){                               dp[i][j+1][k][1]=Math.min( dp[i][j+1][k][1], dp[i-1][j][k][1]);                           }                           if(k<y){                               dp[i][j][k+1][0]=Math.min( dp[i][j][k+1][0], 1+dp[i-1][j][k][1]);                           }                       }                    }               }           }        }         System.out.println(Math.min(dp[n-1][x][y][0],dp[n-1][x][y][1]));    }      static void sort(int[] a) {        ArrayList<Integer> l=new ArrayList<>();        for (int i:a) l.add(i);        Collections.sort(l);        for (int i=0; i<a.length; i++) a[i]=l.get(i);    }     static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    }     private static long inv( long a, long b){        return 1<a ? b - inv(b%a,a)*b/a : 1;    }     //To be used with priority queues.    static class State implements Comparable<State> {        int l, r;        int len;        public State(int l, int r) {            this.l=l;            this.r=r;            this.len=r-l+1;        }         public int compareTo(State o) {            if (len!=o.len) {                return -Integer.compare(len, o.len);            }            else {                return Integer.compare(l, o.l);            }        }    } }
