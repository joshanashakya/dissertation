import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.List;import java.util.Random;import java.util.StringTokenizer; /* * Target : Tshirt in a major programming competition. */public class Main implements Runnable { 	int INF = (int) 1e9;	int sz[];	int id[];	List<Integer> edges[]; 	private void solve() throws IOException {		int n = nextInt();		int a[] = new int[n];		int ev = 0;		for (int i = 0; i < n; ++i) {			a[i] = nextInt();			if (((i + 1) & 1) == 0)				ev++;		}		int dp[][][] = new int[n + 1][n + 1][2];		// dp[i][j][k] stores the min complexity with j even numbers used		for (int i = 0; i <= n; ++i) {			for (int x[] : dp[i]) {				Arrays.fill(x, INF);			}		}		dp[0][0][1] = dp[0][0][0] = 0;		for (int i = 1; i <= n; ++i) {			for (int j = 0; j < i; ++j) {				for (int k = 0; k < 2; ++k) {					int t = dp[i - 1][j][k];					if (a[i - 1] != 0) {						if (a[i - 1] % 2 == 0) {							dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], t + ((k != 0) ? 1 : 0));						} else {							dp[i][j][1] = Math.min(dp[i][j][1], t + ((k != 1) ? 1 : 0));						}					} else {						for (int l = 0; l < 2; ++l) {							dp[i][j + 1 - l][l] = Math.min(dp[i][j + 1 - l][l], t + ((k != l) ? 1 : 0));						}					}				}			}		}		pw.println(Math.min(dp[n][ev][0], dp[n][ev][1])); 	} 	void test() throws IOException {		Random rnd = new Random();	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in));			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
