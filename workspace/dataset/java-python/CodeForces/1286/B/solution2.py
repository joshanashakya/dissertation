import ioimport osimport sys  from collections import Counter, defaultdict, deque sys.setrecursionlimit(10 ** 5)  def solve(N, PC):    children = [[] for i in range(N)]    cost = [None for i in range(N)]    root = None    for i, (p, c) in enumerate(PC):        cost[i] = c        p -= 1        if p != -1:            children[p].append(i)        else:            root = i     def getOrder(node):        ret = []        for child in children[node]:            ret.extend(getOrder(child))        i = cost[node]        if not (0 <= i <= len(ret)):            print("NO")            exit()        return ret[:i] + [node] + ret[i:]     order = getOrder(root)     nodeToVal = {}    for v, node in enumerate(order):        nodeToVal[node] = str(v + 1)     return "YES\n" + " ".join(nodeToVal[i] for i in range(N))  if __name__ == "__main__":    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline     (N,) = [int(x) for x in input().split()]    PC = [[int(x) for x in input().split()] for i in range(N)]    ans = solve(N, PC)    print(ans)
