import java.awt.Desktop; import java.io.BufferedReader;  import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;import java.sql.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeSet;import java.util.Vector;   public  class codechef3 {static class comp implements Comparator<Integer>{ 	@Override	public int compare(Integer o1, Integer o2) {		if(Math.abs(o1)>Math.abs(o2))			return -1;		else return 1;		} 		}	    		 static class FastReader		    {BufferedReader br; 		        StringTokenizer st; 		 public FastReader() 		        {  br = new BufferedReader(new		                     InputStreamReader(System.in)); 		        } 		  		       String next() 		        { 		            while (st == null || !st.hasMoreElements()) 		            { 		                try		                { 		                    st = new StringTokenizer(br.readLine()); 		                } 		                catch (IOException  e) 		                { 		                    e.printStackTrace(); 		                } 		            } 		            return st.nextToken(); 		        } 		  		        int nextInt() 		        { 		            return Integer.parseInt(next()); 		        } 		  		        long nextLong() 		        { 		            return Long.parseLong(next()); 		        } 		  		        double nextDouble() 		        { 		            return Double.parseDouble(next()); 		        } 		  		        String nextLine() 		        { 		            String str = ""; 		            try		            { 		                str = br.readLine(); 		            } 		            catch (IOException e) 		            { 		                e.printStackTrace(); 		            } 		            return str; 		        } 		    } 				 //gcd of two number		 		    public static int gcd(int a, int b)		    {		      if (b == 0)		        return a;		      return gcd(b, a % b); 		    }		    		 //--------------------------------------------------------------------------------------------		 		 //lcm of two number		 		    public static int lcm(int a, int b)		    {		        return (a / gcd(a, b)) * b;		    }		 		  //--------------------------------------------------------------------		    public static void main(String[] args) 		    {		    	FastReader s=new FastReader();	            int t=s.nextInt();		        StringBuffer s2=new StringBuffer();		    	while(t-->0)		    	{		    		long n=s.nextLong();		    		long ans=0;		    	boolean x=true;		    	for(int i=2;i*i<=n;i++)		    	{		    		if(n%i==0)		    		{		    			System.out.println(n/i+" "+(n-n/i));		    			x=false;		    			break;		    		}		    	}		    		if(x)		    			System.out.println("1"+" "+(n-1));		    	}	         }}
