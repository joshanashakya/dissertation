import java.io.*;import java.math.BigInteger;import java.util.*;  public class test1{ 	static long getLCM(int a, int b){		int bigger=0, smaller = 0;		if(a>b){			bigger=a;smaller=b;		}		else{			bigger=b;smaller=a;		} 		if(bigger % smaller == 0)			return bigger;		long counter=2;		long num=bigger;		while(num < Integer.MAX_VALUE){			if((num*counter) % smaller == 0){				return num*counter;			}			counter++;		}		return (long)a*b;	}     public static void main(String[] args) throws IOException{        long startTime = System.currentTimeMillis();        Reader sc = new Reader();		int t = sc.nextInt();		StringBuilder finalResult= new StringBuilder();		// int count=0;        while(t-- > 0){			int n=sc.nextInt();			int result=0;			for(int i=2; i*i<=n; i++){				if(n%i==0){					result=n/i;					break;				}			}			if(result==0)				result=1;			finalResult.append(result+" "+(n-result)+"\n");			/*			int n=sc.nextInt();			int[] a= new int[n+1];			int[] mod =new int[n+1];			for(int i=1; i<=n; i++){				a[i]=sc.nextInt();				if(a[i] >= i)					mod[i]=a[i]-i;				else					mod[i]=n%i + a[i];			}			int start=1, end=n;			while(start<=n && mod[start]==0)	start++;			while(end>=1 && mod[end]==0)		end--; 			int result=0;			for(int i=start; i<=end; i++){				if(mod[i]==0){					result=2;					break;				}				else					result=1;			}			finalResult.append(result+"\n");			// finalResult.append("\n");			*/		}   		System.out.print(finalResult);        long endTime = System.currentTimeMillis();    }     static class Reader {	    final private int BUFFER_SIZE = 1 << 16;	    private DataInputStream din;	    private byte[] buffer;	    private int bufferPointer, bytesRead; 	    public Reader() {	      din = new DataInputStream(System.in);	      buffer = new byte[BUFFER_SIZE];	      bufferPointer = bytesRead = 0;	    } 	    public Reader(String file_name) throws IOException {	      din = new DataInputStream(new FileInputStream(file_name));	      buffer = new byte[BUFFER_SIZE];	      bufferPointer = bytesRead = 0;	    } 	    public String readLine() throws IOException {	      byte[] buf = new byte[200002];	      int cnt = 0, c;	      while ((c = read()) != -1) {	        if (c == '\n') break;	        buf[cnt++] = (byte) c;	      }	      return new String(buf, 0, cnt);	    } 	    public int nextInt() throws IOException {	      int ret = 0;	      byte c = read();	      while (c <= ' ') c = read();	      boolean neg = (c == '-');	      if (neg) c = read();	      do {	        ret = ret * 10 + c - '0';	      } while ((c = read()) >= '0' && c <= '9');	      if (neg) return -ret;	      return ret;	    } 	    public long nextLong() throws IOException {	      long ret = 0;	      byte c = read();	      while (c <= ' ') c = read();	      boolean neg = (c == '-');	      if (neg) c = read();	      do {	        ret = ret * 10 + c - '0';	      } while ((c = read()) >= '0' && c <= '9');	      if (neg) return -ret;	      return ret;	    } 	    public double nextDouble() throws IOException {	      double ret = 0, div = 1;	      byte c = read();	      while (c <= ' ') c = read();	      boolean neg = (c == '-');	      if (neg) c = read();	      do {	        ret = ret * 10 + c - '0';	      } while ((c = read()) >= '0' && c <= '9');	      if (c == '.')	        while ((c = read()) >= '0' && c <= '9') ret += (c - '0') / (div *= 10);	      if (neg) return -ret;	      return ret;	    } 	    private void fillBuffer() throws IOException {	      bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);	      if (bytesRead == -1) buffer[0] = -1;	    } 	    private byte read() throws IOException {	      if (bufferPointer == bytesRead) fillBuffer();	      return buffer[bufferPointer++];	    } 	    public void close() throws IOException {	      if (din == null) return;	      din.close();	    }	  }} class Pair{	int x,y;	Pair(int a, int b){		x=a;y=b;	}}
