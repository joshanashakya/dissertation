import java.awt.Point;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.Hashtable;import java.util.LinkedList;import java.util.Queue;import java.util.Stack;import java.util.StringTokenizer;  public class N700 {	static PrintWriter out;	static Scanner sc;	static ArrayList<Integer>q,w;	static ArrayList<Integer>adj[];	static HashSet<Integer>primesH;	static boolean prime[];	//static ArrayList<Integer>a;	static HashSet<Long>h,tmp;	static boolean[]v;	static int[]a,b,c,d;	static long[]l,dp;	static char[][]mp;	static int A,B,n;	public static void main(String[]args) throws IOException {		sc=new Scanner(System.in);		out=new PrintWriter(System.out);		//A();		//B2();		//C();		//D();		xx();		//minimum for subarrays of fixed length		//F();		out.close();	}	  private static void A() throws IOException {		  int t=ni();			while(t-->0) { 				String s=ns();				StringBuilder sb=new StringBuilder("");				for(int i=0;i<s.length();i++) {					if(i%2==0) {						char x='a';						if(s.charAt(i)=='a')x='b';						sb.append(x);					}else {						char x='z';						if(s.charAt(i)=='z')x='y';						sb.append(x);					}				}				out.println(sb);			}			   }//		static void B() throws IOException {//			int t=ni();//			while(t-->0) {////				A=ni();//				B=ni();//				n=ni();//				a=nai(n);//				b=nai(n);//				int sum=0;//				Pair ps[]=new Pair[n];//				for(int i=0;i<n;i++) {//					ps[i]=new Pair(a[i],b[i],A,B);//				}//				Arrays.sort(ps);//			//	disp2(ps);//				int i=0;//				for(;i<a.length&&B>0;i++) {//					int ax=ps[i].a,bx=ps[i].b;//					int times=(int)Math.ceil(bx/(double)A);//					int ded=ax*times;//					//ol(ded);//					if(bx>A&&bx%A!=0&&ded-ax>=B){//						//i--;//						break;//					}//					B-=ded;//					//					//if(B<=0)break;//				}//				out.println(i==n?"YES":"NO");//			}//		}		static void B2() throws IOException {			int t=ni();			while(t-->0) { 				A=ni();				B=ni();				n=ni();				a=nai(n);				b=nai(n);				long dmg=0;				for(int i=0;i<a.length;i++) {					long bt=(long)Math.ceil((double)b[i]/(double)A);					dmg+=(bt*a[i]*1l);				}				long mx=Long.MIN_VALUE;				for(int i=0;i<a.length;i++) {					mx=Math.max(mx,B-dmg+a[i]);				}				ol(mx>0?"YES":"NO");							}		}	  static void C() throws IOException {		  int n=ni();		  a=new int[n];		  int lo=0,hi=n-1;		  int locIdx=-1;		  while(lo<=hi) {			  int mid=(lo+hi)/2;			  ol("? "+(mid+1));			  out.flush();			  int m=ni(),bm=-1,am=-1;			  a[mid]=m;			  if(mid>0) {				 if(a[mid-1]==0) {					 ol("? "+(mid));					 out.flush();					 bm=ni();				 }else {					 bm=a[mid-1];				 }				 a[mid-1]=bm;				 if(bm<m) {					 hi=mid-1;					 continue;				 }			  }			  if(mid<n-1) {				  if(a[mid+1]==0) {				  ol("? "+(mid+2));				  out.flush();				  am=ni();				  }else {					  am=a[mid+1];				  }				  a[mid+1]=am;				  if(am<m) {					  lo=mid+1;					  continue;				  }			  }			  locIdx=mid;break;			  		  }		  out.println("! "+(locIdx+1));		  out.flush();		}   	static void D() throws IOException {		int n=ni();		a=nai(n);		int total=0;		int pA=-1,pB=-1;		for(int i=0;i<n;i++) {			int x=a[i];			if(pA==x&&pB==x)continue;			if(pA==x)pB=x;			else if(pB==x)pA=x;			else {				if(i<n-1&&a[i+1]==pB)pB=x;				else pA=x;			}			total++;		}		ol(total);			}	static void E() throws IOException {		int t=ni();		while(t-->0) { 			int n=ni();					}							}	static void F() throws IOException{		int t=ni();		while(t-->0) { 			int n=ni();					}			}	static void xx() throws IOException{		int x=ni(),y=ni(),a=ni(),b=ni();		ArrayList<Pair>ans=new ArrayList();		for(int v=b+1;v<=x;v++) {			if(v<a)continue;			for(int p=b;p<v&&p<=y;p++) {				ans.add(new Pair(v,p));			}		}		Collections.sort(ans);		out.println(ans.size());		for(Pair p:ans) {			out.println(p.a+" "+p.b);		}			}	private static void disp(int[] revl) {		for(int i=0;i<revl.length;i++) {			out.print(revl[i]+" ");		}		out.println();	}	static class Pair implements Comparable<Pair>{		int a,b;		Pair(int a,int b){			this.a=a;			this.b=b;					}		@Override		public int compareTo(Pair p) {		//			if(b%A==0)return 1;//			if(p.b%A==0)return -1;			return p.a==a?b-p.b:a-p.a;//			return a-p.a;//			return b-p.b;		}		public String toString() {			return "("+a+" "+b+")";		}	}	static int ni() throws IOException {		return sc.nextInt();	}	static double nd() throws IOException {		return sc.nextDouble();	}	static long nl() throws IOException {		return  sc.nextLong();	}	static String ns() throws IOException {		return sc.next();	}	static int[] nai(int n) throws IOException {		int[] a = new int[n];		for (int i = 0; i < n; i++)			a[i] = sc.nextInt();		return a;	}	static long[] nal(int n) throws IOException {		long[] a = new long[n];		for (int i = 0; i < n; i++)			a[i] = sc.nextLong();		return a;	}	static int[][] nmi(int n,int m) throws IOException{		int[][]a=new int[n][m];		for(int i=0;i<n;i++) {			for(int j=0;j<m;j++) {				a[i][j]=sc.nextInt();			}		}		return a;	} 	static long[][] nml(int n,int m) throws IOException{		long[][]a=new long[n][m];		for(int i=0;i<n;i++) {			for(int j=0;j<m;j++) {				a[i][j]=sc.nextLong();			}		}		return a;	}	static void o(String x) {		out.print(x);	}	static void ol(String x) {		out.println(x);	}	static void ol(int x) {		out.println(x);	}	static void disp1(int []a) {		for(int i=0;i<a.length;i++) {			out.print(a[i]+" ");		}		out.println();	}	static void disp2(Pair []a) {		for(int i=0;i<a.length;i++) {			out.print(a[i]+" ");		}		out.println();	}	static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		public boolean hasNext() {return st.hasMoreTokens();}		public int nextInt() throws IOException {return Integer.parseInt(next());}				public double nextDouble() throws IOException {return Double.parseDouble(next());}				public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();}					public boolean ready() throws IOException {return br.ready(); }		 	}}
