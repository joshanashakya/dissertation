from collections import defaultdict     MAX = 10 ** 14     def Dijkstra(graph, s, n):    visited = [False] * n    d = [MAX] * n    parents = {}    d[s] = 0    for i in range(n):        _, v = min((d[j], j) for j in range(n) if not visited[j])        visited[v] = True        for u, cost in graph[v]:            if d[u] > d[v] + cost:                d[u] = d[v] + cost                parents[u] = v    return parents, d          def PrintSol(graph, variableEdgesInPath, n, zeros, edgesWithZero, leave):    for v in range(n):        for u, cost in graph[v]:            if u < v:                if (v, u) in variableEdgesInPath:                    print(v, u, variableEdgesInPath[(v, u)])                elif zeros and (v, u) in edgesWithZero and (v, u) not in leave:                    print(v, u, MAX)                else:                    print(v, u, cost)          graphWithZero = defaultdict(list)graphWithMax = defaultdict(list)     n, m, L, s, t = map(int, input().split(' '))edgesWithZero = set()for _ in range(m):    u, v, l = map(int, input().split(' '))    if l == 0:        graphWithZero[u].append((v, 1))        graphWithZero[v].append((u, 1))        graphWithMax[u].append((v, MAX))        graphWithMax[v].append((u, MAX))        edgesWithZero |= {(u, v), (v, u)}    else:        graphWithZero[u].append((v, l))        graphWithZero[v].append((u, l))        graphWithMax[u].append((v, l))        graphWithMax[v].append((u, l)) a2, d2 = Dijkstra(graphWithMax, s, n)     a1, d1 = Dijkstra(graphWithZero, s, n)      if d2[t] < L:    print('NO')elif d2[t] == L:    print('YES')    PrintSol(graphWithMax, dict(), n, False, edgesWithZero, set())elif d1[t] <= L:    print('YES')    v = t    leave = set()    variableEdgesInPath = dict()    total = 0    while v != s:        leave |= {(v, a1[v]), (a1[v], v)}        if (v, a1[v]) in edgesWithZero:            cur = max(L - total - d2[a1[v]], 1)            variableEdgesInPath[(max(v, a1[v]), min(v, a1[v]))] = cur            total += cur        else:            total += d1[v] - d1[a1[v]]        v = a1[v]    PrintSol(graphWithZero, variableEdgesInPath, n, True, edgesWithZero, leave)else:    print('NO')
