import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.util.TreeSet;import java.util.ArrayList;import java.io.UncheckedIOException;import java.util.List;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BCompleteTheGraph solver = new BCompleteTheGraph();            solver.solve(1, in, out);            out.close();        }    }     static class BCompleteTheGraph {        long inf = (long) 1e18;         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int m = in.readInt();            int l = in.readInt();            Node[] nodes = new Node[n];            for (int i = 0; i < n; i++) {                nodes[i] = new Node();                nodes[i].id = i;            }            Node s = nodes[in.readInt()];            Node t = nodes[in.readInt()];             List<Edge> unknown = new ArrayList<>(m);            Edge[] edges = new Edge[m];            for (int i = 0; i < m; i++) {                Edge e = new Edge();                e.a = nodes[in.readInt()];                e.b = nodes[in.readInt()];                e.a.adj.add(e);                e.b.adj.add(e);                e.w = in.readInt();                if (e.w == 0) {                    unknown.add(e);                }                edges[i] = e;            }            for (Edge e : unknown) {                e.w = 1;            }            long min = dist(nodes, s, t);            if (min > l || min != l && unknown.isEmpty()) {                out.println("NO");                return;            }             if (!unknown.isEmpty()) {                IntBinarySearch ibs = new IntBinarySearch() {                     public boolean check(int mid) {                        for (Edge e : unknown) {                            e.w = 1;                        }                        for (int i = 0; i <= mid; i++) {                            unknown.get(i).w = inf;                        }                        return dist(nodes, s, t) >= l;                    }                };                 int key = ibs.binarySearch(0, unknown.size() - 1);                if (!ibs.check(key)) {                    out.println("NO");                    return;                }                 for (Edge e : unknown) {                    e.w = 1;                }                for (int i = 0; i < key; i++) {                    unknown.get(i).w = inf;                }                long dist = dist(nodes, s, t);                unknown.get(key).w += l - dist;            }             out.println("YES");            for (Edge e : edges) {                out.append(e.a.id).append(' ').append(e.b.id).append(' ').println(e.w);            }        }         public long dist(Node[] nodes, Node s, Node t) {            for (Node node : nodes) {                node.dist = inf;            }            s.dist = 0;            TreeSet<Node> set = new TreeSet<>((a, b) -> a.dist == b.dist ? Integer.compare(a.id, b.id) : Long.compare(a.dist, b.dist));            set.add(s);            while (!set.isEmpty()) {                Node head = set.pollFirst();                for (Edge e : head.adj) {                    Node node = e.other(head);                    if (node.dist <= head.dist + e.w) {                        continue;                    }                    set.remove(node);                    node.dist = head.dist + e.w;                    set.add(node);                }            }            return t.dist;        }     }     static abstract class IntBinarySearch {        public abstract boolean check(int mid);         public int binarySearch(int l, int r) {            if (l > r) {                throw new IllegalArgumentException();            }            while (l < r) {                int mid = DigitUtils.floorAverage(l, r);                if (check(mid)) {                    r = mid;                } else {                    l = mid + 1;                }            }            return l;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class Node {        List<Edge> adj = new ArrayList<>();        long dist;        int id;     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput append(long c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println(long c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class Edge {        Node a;        Node b;        long w;         Node other(Node x) {            return a == x ? b : a;        }     }     static class DigitUtils {        private DigitUtils() {        }         public static int floorAverage(int x, int y) {            return (x & y) + ((x ^ y) >> 1);        }     }} 
