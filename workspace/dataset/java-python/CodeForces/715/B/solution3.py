from collections import defaultdict     MAX_WEIGHT = 10 ** 14     def compute_path(graph, s, n):    visited = [False] * n    distances = [MAX_WEIGHT] * n    ancestors = {}    distances[s] = 0    for i in range(n):        _, v = min((distances[j], j) for j in range(n) if not visited[j])        visited[v] = True        for to, length in graph[v]:            if distances[to] > distances[v] + length:                distances[to] = distances[v] + length                ancestors[to] = v    return ancestors, distances          def output(graph, n_edges, extra, n, zeros, erased, leave):    for i in range(n):        for to, length in graph[i]:            if to < i:                if (i, to) in n_edges:                    print(i, to, n_edges[(i, to)])                elif zeros and (i, to) in erased and (i, to) not in leave:                    print(i, to, MAX_WEIGHT)                else:                    print(i, to, length)          graph_with_0 = defaultdict(list)graph_with_max = defaultdict(list)     n, m, L, s, t = map(int, input().split(' '))erased = set()for _ in range(m):    u, v, l = map(int, input().split(' '))    if l == 0:        graph_with_0[u].append((v, 1))        graph_with_0[v].append((u, 1))        graph_with_max[u].append((v, MAX_WEIGHT))        graph_with_max[v].append((u, MAX_WEIGHT))        erased |= {(u, v), (v, u)}    else:        graph_with_0[u].append((v, l))        graph_with_0[v].append((u, l))        graph_with_max[u].append((v, l))        graph_with_max[v].append((u, l))     a1, d1 = compute_path(graph_with_0, s, n)a2, d2 = compute_path(graph_with_max, s, n)     if d2[t] < L:    print('NO')elif d2[t] == L:    print('YES')    output(graph_with_max, dict(), 0, n, False, erased, set())elif d1[t] <= L:    print('YES')    v = t    leave = set()    n_edges = dict()    total = 0    while v != s:        leave |= {(v, a1[v]), (a1[v], v)}        if (v, a1[v]) in erased:            cur = max(L - total - d2[a1[v]], 1)            n_edges[(max(v, a1[v]), min(v, a1[v]))] = cur            total += cur        else:            total += d1[v] - d1[a1[v]]        v = a1[v]    output(graph_with_0, n_edges, L - d1[t], n, True, erased, leave)else:    print('NO')
