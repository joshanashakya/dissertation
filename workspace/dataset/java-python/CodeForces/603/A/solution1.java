import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            AAlternativeThinking solver = new AAlternativeThinking();            solver.solve(1, in, out);            out.close();        }    }     static class AAlternativeThinking {        Debug debug = new Debug(true);         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            char[] s = new char[n];            in.rs(s, 0);            int[][] prev = new int[3][2];            int inf = (int) 1e8;            SequenceUtils.deepFill(prev, -inf);            int[][] next = new int[3][2];            prev[0][0] = 0;            prev[0][1] = 0;            for (int i = 0; i < n; i++) {                for (int k = 0; k < 2; k++) {                    int max = 0;                    for (int j = 0; j < 3; j++) {                        max = Math.max(prev[j][k], max);                        prev[j][k] = max;                    }                }                debug.debug("i", i);                debug.debug("prev", prev);                SequenceUtils.deepFill(next, -inf);                for (int j = 0; j < 3; j++) {                    for (int k = 0; k < 2; k++) {                        int x = s[i] - '0';                        x ^= j & 1;                        //do nothing                        next[j][k] = Math.max(next[j][k], prev[j][k]);                        //added                        if (k != x) {                            next[j][x] = Math.max(next[j][x], prev[j][k] + 1);                        }                    }                 }                int[][] tmp = prev;                prev = next;                next = tmp;            }            debug.debug("i", n);            debug.debug("prev", prev);            int max = 0;            for (int j = 0; j < 3; j++) {                for (int k = 0; k < 2; k++) {                    max = Math.max(max, prev[j][k]);                }            }            out.println(max);        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(int c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public int rs(char[] data, int offset) {            return readString(data, offset);        }         public int readString(char[] data, int offset) {            skipBlank();             int originalOffset = offset;            while (next > 32) {                data[offset++] = (char) next;                next = read();            }             return offset - originalOffset;        }     }     static class Debug {        private boolean offline;        private PrintStream out = System.err;        static int[] empty = new int[0];         public Debug(boolean enable) {            offline = enable && System.getSecurityManager() == null;        }         public Debug debug(String name, int x) {            if (offline) {                debug(name, "" + x);            }            return this;        }         public Debug debug(String name, String x) {            if (offline) {                out.printf("%s=%s", name, x);                out.println();            }            return this;        }         public Debug debug(String name, Object x) {            return debug(name, x, empty);        }         public Debug debug(String name, Object x, int... indexes) {            if (offline) {                if (x == null || !x.getClass().isArray()) {                    out.append(name);                    for (int i : indexes) {                        out.printf("[%d]", i);                    }                    out.append("=").append("" + x);                    out.println();                } else {                    indexes = Arrays.copyOf(indexes, indexes.length + 1);                    if (x instanceof byte[]) {                        byte[] arr = (byte[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof short[]) {                        short[] arr = (short[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof boolean[]) {                        boolean[] arr = (boolean[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof char[]) {                        char[] arr = (char[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof int[]) {                        int[] arr = (int[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof float[]) {                        float[] arr = (float[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof double[]) {                        double[] arr = (double[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else if (x instanceof long[]) {                        long[] arr = (long[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    } else {                        Object[] arr = (Object[]) x;                        for (int i = 0; i < arr.length; i++) {                            indexes[indexes.length - 1] = i;                            debug(name, arr[i], indexes);                        }                    }                }            }            return this;        }     }     static class SequenceUtils {        public static void deepFill(Object array, int val) {            if (!array.getClass().isArray()) {                throw new IllegalArgumentException();            }            if (array instanceof int[]) {                int[] intArray = (int[]) array;                Arrays.fill(intArray, val);            } else {                Object[] objArray = (Object[]) array;                for (Object obj : objArray) {                    deepFill(obj, val);                }            }        }     }} 
