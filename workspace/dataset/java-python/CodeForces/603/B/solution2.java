import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.LinkedList;import java.util.StringTokenizer; public class Round334B { 	public static final int mod = (int)1e9+7;	public static LinkedList<Integer>[] adj; 		public static boolean[] visited;		public static void dfs(int curr) {		visited[curr] = true;		for(Integer x : adj[curr]) {			if(!visited[x]) {				dfs(x);			}		}	}		public static void IterativeDfs(int curr) {		while(!visited[curr]) {			visited[curr] = true;			for(Integer x : adj[curr]) {				if(!visited[x]) {					curr = x;				}			}		}	}		public static int components() {		int n = adj.length;		int ans = 0;		visited = new boolean[n];		for(int i = 1; i < n; i++) {			if(!visited[i]) {				IterativeDfs(i);				ans++;			}		}		return ans;	}		public static void solve() {		int p = s.nextInt();		int k = s.nextInt();		adj = new LinkedList[p];		for(int i = 0; i < p; i++) {			adj[i] = new LinkedList<Integer>();		}		for(int i = 1; i < p; i++) {			long val = (long)k * (long)i;			val %= p;			adj[(int)val].add(i);		}		int pow = components();		if(k == 1) {			pow++;		}		long ans = fast(p, pow);		out.println(ans);	}		public static long fast(long a, int n) {		if(n == 1) {			return a;		}		long ans = fast(a, n/2);		ans = ans * ans;		ans %= mod;		if(n % 2 == 1) {			ans = ans * a;			ans %= mod;		}		return ans;	} 	public static void main(String[] args) {		new Thread(null, null, "Naman", 1 << 27) {            public void run() {                try {                	out = new PrintWriter(new BufferedOutputStream(System.out));            		s = new FastReader();            		solve();            		out.close();                } catch (Exception e) {                    e.printStackTrace();                    System.exit(1);                }            }        }.start();		} 	public static FastReader s;	public static PrintWriter out; 	public static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (Exception e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception e) {				e.printStackTrace();			}			return str;		}	} 	}
