import java.io.*;import java.util.*; public class Main {		final static int finum = 1000001;	static boolean isPrime[] = new boolean[finum];	private void solve() throws Exception {		findPrime();				int n = nextInt();		for (int i = 0; i < n; i++) {			long num = nextLong();			long sqrt = (long) Math.sqrt(num);			if (sqrt * sqrt == num && isPrime[(int)sqrt]) out.println("YES");			else out.println("NO");		}	} 	private void findPrime() {		Arrays.fill(isPrime, true);		isPrime[0] = isPrime[1] = false;		for (int i = 2; i * i < finum; i++) {			if (isPrime[i]) {				for (int j = i * i; j < finum; j+=i) { // check multiple					isPrime[j] = false;				}			}		}	} 	public void run() throws Exception {		br = new BufferedReader(new InputStreamReader(System.in));		st = null;		out = new PrintWriter(System.out); 		try {			solve();		} catch (Exception e) {			e.printStackTrace();		} finally {			br.close();			out.close();		} 	} 	public static void main(String args[]) throws Exception {		new Main().run();	} 	BufferedReader br;	StringTokenizer st;	PrintWriter out; 	String nextToken() throws Exception {		while (st == null || !st.hasMoreTokens())			st = new StringTokenizer(br.readLine());		return st.nextToken();	} 	String nextLine() throws Exception {		return br.readLine();	} 	int nextInt() throws Exception {		return Integer.parseInt(nextToken());	} 	long nextLong() throws Exception {		return Long.parseLong(nextToken());	} 	double nextDouble() throws Exception {		return Double.parseDouble(nextToken());	}}
