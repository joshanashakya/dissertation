import java.io.*;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Queue;import java.util.Scanner;import java.util.Set;import java.util.stream.IntStream; import java.math.BigInteger;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.InputMismatchException; public class Q1{	static class InputReader { 		private final InputStream stream;		private final byte[] buf = new byte[8192];		private int curChar, snumChars;		private String[] s;		public InputReader(InputStream st) {			this.stream = st;		}		public int read() {			if (snumChars == -1)				throw new InputMismatchException();			if (curChar >= snumChars) {				curChar = 0;				try {					snumChars = stream.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (snumChars <= 0)					return -1;			}			return buf[curChar++];		} 		public int nextInt() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public long nextLong() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int[] nextIntArray(int n) {			int a[] = new int[n];			s=nextLine().split(" ");			for (int i = 0; i < n; i++) {				a[i] = Integer.parseInt(s[i]);			}			return a;		} 		public String readString() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public String nextLine() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndOfLine(c));			return res.toString();		} 		public boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		private boolean isEndOfLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	}	static InputReader sc=new InputReader(System.in);	static PrintWriter out=new PrintWriter(System.out); 	public final long MOD = (long) 1e9 + 7; 	static boolean isPerfectSquare(double x){        if (x >= 0) {             long sr = (long)Math.sqrt(x);             return ((sr * sr) == x);        }        return false;    }	static boolean isPrime(int n){		if(n==1) return false;		else if(n<4) return true;		else if(n%2==0) return false;		else if(n<9) return true;		else if(n%3==0) return false;		else{			int r=(int)Math.sqrt(n);			for(int f=5;f<=r;f+=6){				if(n%f==0)return false;				if(n%(f+2)==0) return false;			}			return true;		}	}	 	static boolean[] ans(int n,long[] num){		boolean[] f=new boolean[n];		for(int i=0;i<n;i++)			f[i]=( isPerfectSquare(num[i]) && isPrime( (int) Math.sqrt(num[i]) ) );		return f;	} 	public static void main(String args[])throws IOException{ 		int n=nextInt();		//while(t-->0) {		boolean[] f=ans(n,nextLongArray(n));		//}		for(int i=0;i<n;i++) {			println((f[i])?"YES":"NO");		}		out.flush();		out.close();	} 	public static int nextInt()throws IOException{		return sc.nextInt();	}	public static long nextLong()throws IOException	{		return sc.nextLong();	}	public static double nextDouble()throws IOException	{		return Double.parseDouble(readString());	}	public static String readString()throws IOException	{		return sc.readString();	}	public static String nextLine()throws IOException{		return sc.nextLine();	}	public static int[] nextIntArray(int n)throws IOException{		return sc.nextIntArray(n); 	}	public static long[] nextLongArray(int n)throws IOException{		long[] array=new long[n];		String[] s=nextLine().split(" ");		for(int i=0;i<n;i++) {			array[i]=Long.parseLong(s[i]);		}		return array;	}	public static void printSp(Object a)throws IOException{		out.print(a+" ");	}	public static void println(Object a)throws IOException{		out.println(a);	}	public static void printArray(int[] a)throws IOException{		for(int i=0;i<a.length;i++)		printSp(a[i]);	}	 }
