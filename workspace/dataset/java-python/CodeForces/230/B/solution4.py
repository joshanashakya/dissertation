#!/usr/bin/env pythonfrom io import BytesIO, IOBaseimport osimport sysimport pprintfrom math import *from itertools import *from collections import *  def solve():    n = inp()    arr = li()    sieve = [0]*1000003     for i in range(2, 1000001):        sieve[i] = 1     for i in range(2, 1001):        for j in range(i*i, 1000001, i):            sieve[j] = 0     # print(sieve[4], sieve[5], sieve[120], sieve[103])    for i in arr:        low = 1        high = i        flag = 0        mid = 0        while low <= high:            mid = low + int((high - low)/2)            if mid*mid == i:                flag = 1                break            elif mid*mid < i:                low = mid + 1            else:                high = mid - 1        # print(flag, mid, low, high)        if flag == 1 and sieve[mid] == 1:            pr("YES")        else:            pr("NO")    # 16 - 1, 2, 4, 8, 16    # 4 - 1, 2, 4  9 - 1,3, 9 25 - 1, 5, 25  def main():    # T = inp()    T = 1    for _ in range(T):        solve()  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)  def input(): return sys.stdin.readline().rstrip("\r\n")def li(): return list(map(int, sys.stdin.readline().split()))def mp(): return map(int, sys.stdin.readline().split())def inp(): return int(sys.stdin.readline())def pr(n): return sys.stdout.write(str(n)+"\n")def prl(n): return sys.stdout.write(str(n)+" ")  if __name__ == "__main__":    main()
