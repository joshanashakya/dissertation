import java.util.ArrayList;import java.util.List;import java.util.Scanner; public class Main {    static int lastBefore = 0;    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int t = sc.nextInt();        List<Integer> list = new ArrayList<>();        int first_min_index = 0;        int last_min_index = 0;        int min = Integer.MAX_VALUE;         for (int i = 0; i < t; i++) {            int toAdd = sc.nextInt();            if (toAdd == min) {                min = toAdd;                if(list.get(i-1) > min){                    lastBefore = i-1;                }                last_min_index = i;            } else if (toAdd < min){                min = toAdd;                lastBefore = i-1;                first_min_index = i;                last_min_index = i;            }            list.add(toAdd);        }        if (canBeSorted(list, first_min_index, last_min_index)) {            if(last_min_index != 0) {                if(last_min_index == list.size()-1){                    if(same(list))                        System.out.println(0);                    else                        System.out.println(list.size() - lastBefore - 1);                } else {                    System.out.println(list.size() - first_min_index);                }            } else {                System.out.println(0);            }        } else {            System.out.println(-1);        }    }     private static boolean same(List<Integer> list) {        for(int i = 0; i < list.size()-1; i++){            int a = list.get(i);            int b = list.get(i+1);            if(a != b){                return false;            }        }        return true;    }     private static boolean canBeSorted(List<Integer> list, int first_min_index, int last_min_index) {         if(list.size() <= 2)            return true;        //first half        for (int i = 0; i < first_min_index-1; i++) {            if (list.get(i) > list.get(i + 1)) {                return false;            }        }        //second half        for (int i = last_min_index; i < list.size() - 1; i++) {            if (list.get(i) > list.get(i + 1)) {                return false;            }        }        //before last before        if(first_min_index != 0){            if(list.get(0) < list.get(list.size()-1)){                return false;            }            for(int i = lastBefore+1; i < list.size()-1; i++) {                if (list.get(i) > list.get(i + 1)) {                    return false;                }            }        }        for(int i = 0; i < lastBefore; i++){            if(list.get(i) > list.get(i+1)){                return false;            }        }         list.subList(first_min_index, last_min_index);        return true;    }}
