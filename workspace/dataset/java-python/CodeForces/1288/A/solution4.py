from collections import defaultdictfrom collections import dequeimport bisectimport heapqfrom math import sqrt, ceil def ri():    return int(input()) def rl():    return list(map(int, input().split())) def f(x):	return x + ceil(d / (x + 1))  def ternary_search(f, a, b):	while (b - a) >= 3:		alpha = 1/3		c = (1-alpha) * a + alpha * b		c = int(c)		d  = alpha * a + (1 - alpha) * b		d = int(d)		fc = f(c)		fd = f(d)		counter = 0		while fc == fd:			if counter % 2 == 0:				d += 1			else:				c -= 1			counter += 1			if d > b or c < a:				return (a,b) 		if fc < fd:			b = d		else:			a  = c 	return (a, b)  t = ri()for _ in range(t):	n, d = rl()	a, b  = ternary_search(f, 0, n)	for x in range(a, b + 1):		if f(x) <= n:			ans = "YES"			break	else:		ans = "NO"			 	print(ans)	# print(a,b)	# for i in range(n + 1):	# 	print(f(i), end = " ")	# print()  
