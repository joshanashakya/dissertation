import java.io.*;import java.util.*;import java.util.stream.Stream;  public class A {  static final int INF = (int) 1e9 + 9;  static final int MAXN = (int) 1e5 + 5;  static final int MAXLOG = (int) (Math.log(MAXN) / Math.log(2) + 1e-10) + 1;  static final int MOD = 1_000_000_007;   static BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));  static Reader in = new Reader();   static List<Character> validRef = Arrays.asList('0','1','2','5','8');   public static void main(String[] args) throws IOException {    Scanner in = new Scanner(System.in);    // var in = new Scanner(new File("revegetate.in"));    // var pw = new PrintWriter("revegetate.out");     int t = in.nextInt();     while(t-- > 0) {      int h = in.nextInt(), m = in.nextInt();      String[] s = in.next().split(":", 2);      char[][] time = {s[0].toCharArray(), s[1].toCharArray()} ;       while(!(correct(h, time[1]) && correct(m, time[0]))) {         if(correct(m, time[0])) {          int time1 = Integer.parseInt(new String(time[1]));          time1 = (time1 + 1) % m;          if(time1 == 0) {            int time2 = Integer.parseInt(new String(time[0]));            time2 = (time2 + 1) % h;            time[0][1] = (char) ('0' + (time2 % 10));            time[0][0] = (char) ('0' + (time2 / 10));          }          time[1][1] = (char) ('0' + (time1 % 10));          time[1][0] = (char) ('0' + (time1 / 10));        }        else time[1] = "00".toCharArray();                while(!correct(m, time[0])) {          int time2 = Integer.parseInt(new String(time[0]));          time2 = (time2 + 1) % h;          time[0][1] = (char) ('0' + (time2 % 10));          time[0][0] = (char) ('0' + (time2 / 10));        }              }            System.out.println(new String(time[0]) + ":" + new String(time[1]));    }     // pw.close();    in.close();  }   static boolean correct(int threshold, char[] timee) {     char[] time = {timee[0], timee[1]};     for(int i = 0; i < 2; ++i) {      if(!validRef.contains(time[i])) return false;      time[i] = time[i] == '5' ? '2': time[i] == '2' ? '5': time[i];    }     char tmp = time[0];    time[0] = time[1];    time[1] = tmp;     if(Integer.parseInt(new String(time)) < threshold) return true;    return false;  }   static class Pair<U, V> implements Comparable<Pair<U, V>> {    U first;    V second;     public Pair(U first, V second) {      this.first = first;      this.second = second;    }     @Override    public boolean equals(Object obj) {      if (obj == null)        return false;      Pair<U, V> o = (Pair<U, V>) obj;      return this.first.equals(o.first) && this.second.equals(o.second);    }     @Override    public int compareTo(Pair<U, V> p) {      int firstC = ((Comparable) first).compareTo((Comparable) p.first);      if (firstC == 0)        return ((Comparable) second).compareTo((Comparable) p.second);      return firstC;    }  }   static class Reader {    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader() {      din = new DataInputStream(System.in);      buffer = new byte[BUFFER_SIZE];      bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException {      din = new DataInputStream(new FileInputStream(file_name));      buffer = new byte[BUFFER_SIZE];      bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException {      byte[] buf = new byte[64]; // line length      int cnt = 0, c;      while ((c = read()) != -1) {        if (c == '\n')          break;        buf[cnt++] = (byte) c;      }      return new String(buf, 0, cnt);    }     public String next() throws IOException {      byte[] buf = new byte[64]; // string length      int cnt = 0, c;      while ((c = read()) != -1) {        if (c == ' ' || c == '\t' || c == '\n')          break;        buf[cnt++] = (byte) c;      }      return new String(buf, 0, cnt);    }     public int nextInt() throws IOException {      int ret = 0;      byte c = read();      while (c <= ' ')        c = read();      boolean neg = (c == '-');      if (neg)        c = read();      do {        ret = ret * 10 + c - '0';      } while ((c = read()) >= '0' && c <= '9');       if (neg)        return -ret;      return ret;    }     public long nextLong() throws IOException {      long ret = 0;      byte c = read();      while (c <= ' ')        c = read();      boolean neg = (c == '-');      if (neg)        c = read();      do {        ret = ret * 10 + c - '0';      } while ((c = read()) >= '0' && c <= '9');      if (neg)        return -ret;      return ret;    }     public double nextDouble() throws IOException {      double ret = 0, div = 1;      byte c = read();      while (c <= ' ')        c = read();      boolean neg = (c == '-');      if (neg)        c = read();       do {        ret = ret * 10 + c - '0';      } while ((c = read()) >= '0' && c <= '9');       if (c == '.') {        while ((c = read()) >= '0' && c <= '9') {          ret += (c - '0') / (div *= 10);        }      }       if (neg)        return -ret;      return ret;    }     private void fillBuffer() throws IOException {      bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);      if (bytesRead == -1)        buffer[0] = -1;    }     private byte read() throws IOException {      if (bufferPointer == bytesRead)        fillBuffer();      return buffer[bufferPointer++];    }     public void close() throws IOException {      if (din == null)        return;      din.close();    }  }}
