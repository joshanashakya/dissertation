import java.io.*;import java.util.*; public class B {	static int[] valid = new int[] {0,1,5,-1,-1,2,-1,-1,8,-1};		public static int reverse(int time) {				int reversed = 0;				for(int i = 0 ;i < 2 ; i++){						int dig = time % 10;						if(valid[dig] == -1) {				return -1;			}			reversed= reversed * 10 + valid[dig];			time /= 10;					}		return reversed;	}	public static void main(String[] args) {		// TODO Auto-generated method stub			FastScanner sc = new FastScanner();						int t = sc.nextInt();						while(t-- > 0) {								int H = sc.nextInt();				int M = sc.nextInt();								String s = sc.next();				//System.out.println(H + " "+M + " "+ s);				String[] time = s.split(":");				int h = Integer.parseInt(time[0]);				int m = Integer.parseInt(time[1]);								while(true) {										int newHour = reverse(m);					int newMin = reverse(h);					//System.out.println(h + " "+m + "   "+newHour + " "+newMin);					if(newHour != -1 && newMin != -1 && newHour < H && newMin < M) {						if(h < 10) {							System.out.print("0");						}												System.out.print(h + ":");												if(m < 10) {							System.out.print("0");						}												System.out.print(m);																		break;					}					m++;					if(m == M) {						m = 0;						h++;					}					if(h == H) {						h = 0;					}				}																System.out.println();			}												 	}		static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}		long nextLong() {			return Long.parseLong(next());		}	}		// Use this instead of Arrays.sort() on an array of ints. Arrays.sort() is n^2		// worst case since it uses a version of quicksort. Although this would never		// actually show up in the real world, in codeforces, people can hack, so		// this is needed.		static void ruffleSort(int[] a) {			//ruffle			int n=a.length;			Random r=new Random();			for (int i=0; i<a.length; i++) {				int oi=r.nextInt(n), temp=a[i];				a[i]=a[oi];				a[oi]=temp;			}						//then sort			Arrays.sort(a);		} }
