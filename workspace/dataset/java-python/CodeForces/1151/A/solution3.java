import java.io.*;import java.lang.reflect.Array;import java.util.*; public class A {    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }     static FastReader s = new FastReader();    static PrintWriter out = new PrintWriter(System.out);     private static int[] rai(int n) {        int[] arr = new int[n];        for (int i = 0; i < n; i++) {            arr[i] = s.nextInt();        }        return arr;    }     private static int[][] rai(int n, int m) {        int[][] arr = new int[n][m];        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                arr[i][j] = s.nextInt();            }        }        return arr;    }     private static long[] ral(int n) {        long[] arr = new long[n];        for (int i = 0; i < n; i++) {            arr[i] = s.nextLong();        }        return arr;    }     private static long[][] ral(int n, int m) {        long[][] arr = new long[n][m];        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                arr[i][j] = s.nextLong();            }        }        return arr;    }     private static int ri() {        return s.nextInt();    }     private static long rl() {        return s.nextLong();    }     private static String rs() {        return s.next();    }     static int gcd(int a,int b)    {        if(b==0)        {            return a;        }        return gcd(b,a%b);    }    static int MOD= (int) (1e9+7);     static int bsearch(List<Integer> list,int val)    {        int l=0,r=list.size()-1;        while(l<=r)        {            int mid=(l+r)/2;            if(list.get(mid)>val)            {                if(mid==0 || list.get(mid-1)<=val)                {                    return mid;                }                else {                    r=mid-1;                }             }            else            {                l=mid+1;            }        }        return -1;    }     public static void main(String[] args){        StringBuilder ans = new StringBuilder();//        int t = ri();        int t=1;        while (t-- > 0)        {            int n=ri();            char[] arr=rs().toCharArray();             int res=Integer.MAX_VALUE;            for(int i=0;i<n-3;i++)            {                int count=Math.min(arr[i]-'A','Z'-arr[i]+1);//                System.out.println(count);                count+=Math.min(Math.abs(arr[i+1]-'C'),'Z'-arr[i+1]+3);//                System.out.println(count);                count+=Math.min(Math.abs(arr[i+2]-'T'),arr[i+2]-'A'+7);//                System.out.println(count);                count+=Math.min(Math.abs(arr[i+3]-'G'),'Z'-arr[i+3]+7);//                System.out.println(""+arr[i]+""+arr[i+1]+arr[i+2]+arr[i+3]+" "+count);                res=Math.min(res,count);             }            ans.append(res).append("\n");        }         out.print(ans.toString());        out.flush();     } }
