import java.io.*;import java.util.*; public class Permutation {		static HashSet<String> perm;	static int n,k;		static void permutations(char[] idx,int i) {		perm.add(new String(idx));		if(i<k-1) permutations(idx,i+1);		for(int j=i+1;j<k;j++) {			swap(idx,i,j);			permutations(idx,i+1);			swap(idx,j,i);		}	}		static void swap(char idx[],int a, int b) {		char remp = idx[b];		idx[b] = idx[a];		idx[a] = remp;	} 	public static void main(String[] args) {        FastScanner in = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        n = in.nextInt(); k = in.nextInt();        char ch[][] = new char[n][k];        for(int i=0;i<n;i++) {        	ch[i] = in.next().toCharArray();        }        perm = new HashSet<>();        char idx[] = new char[k];        int i=0;char a = '1';        while(i<k) {        	idx[i] = a;a++;i++;        }        for(i=0;i<k;i++) {        	swap(idx,0,i);        	permutations(idx,0);        }        int ans = Integer.MAX_VALUE;        for(String str : perm) {        	int max = 0, min =Integer.MAX_VALUE;        	char c[] = str.toCharArray();        	for(i=0;i<n;i++) {        		int x = 0;        		for(char y : c) {        			x = 10*x + (ch[i][(y-'1')]-'0');        		}        		min = (min>x)?x:min;        		max = (max<x)?x:max;        	}        	ans = Math.min(ans, max-min);        }        out.println(ans);        out.flush();	}		static class FastScanner {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st = new StringTokenizer("");				String next() {			while(!st.hasMoreTokens())				try {					st = new StringTokenizer(br.readLine());				}catch(IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}				long nextLong() {			return Long.parseLong(next());		}				int[] readArray(int n) {			int a[] = new int[n];			for(int i=0;i<n;i++) a[i] = nextInt();			return a;		}				Integer[] readArray(long n) {		    Integer a[] = new Integer[(int)n];			for(int i=0;i<n;i++) a[i] = nextInt();			return a;		}				long[] readArray(int n,long x) {			long a[] = new long[n];			for(int i=0;i<n;i++) a[i] = nextLong();			return a;		}			}		static class Pair implements Comparable<Pair> {		int x, y;		Pair(int a, int b){ x = a; y = b; }		int getKey() { return x; }		int getVal() { return y; }		@Override		public int compareTo(Pair o) {			if(o.getVal() - this.getVal()>0)				return -1;			else if(o.getVal() - this.getVal()<0)				return 1;			else 				return 0;		}			}		static boolean arrayEquals(char a[], char b[]) {		int n = a.length;		boolean verdict = true;		for(int i=0;i<n;i++) {			if(a[i]!=b[i]) {				verdict = false;break;			}		}		return verdict;	}		static long lcm(long a, long b) {		return (a*b)/gcd(a,b);	}		static long gcd(long a, long b) {		if(b==0) return a;		else return gcd(b,a%b);	}		static long hashInt(int x,int y) {		return x*(1_000_000_000L)+y;	}}
