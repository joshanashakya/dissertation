import java.util.*; import java.io.*; public class Main {	static int mod = 1000000007;	public static boolean next_permutation(int[] p) {		  for (int a = p.length - 2; a >= 0; --a)		    if (p[a] < p[a + 1])		      for (int b = p.length - 1;; --b)		        if (p[b] > p[a]) {		          int t = p[a];		          p[a] = p[b];		          p[b] = t;		          for (++a, b = p.length - 1; a < b; ++a, --b) {		            t = p[a];		            p[a] = p[b];		            p[b] = t;		          }		          return true;		        }		  return false;		}		public static int get(char s[][] , int n , int k , int perm[]) {		int mx = (int )-1e9; int mn = (int)1e9; 		for(int i = 0; i<n; i++) {			int t = 0; 			for(int j = 0; j<k; j++) {				t = t*10 + (s[i][perm[j]] - '0'); 			}			mx = Math.max(t , mx); 			mn = Math.min(t,  mn);		}		return mx -mn; 	}		public static void solve(InputReader in, OutputWriter out) {		int n = in.readInt();		int k = in.readInt();		char s[][] = new char[n][k];		int perm[] = new int[k];		for(int i =0; i<k; i++)			perm[i] = i;		for(int i = 0; i<n; i++) {			char p[] = in.readString().toCharArray(); 			for(int j = 0; j<k; j++) {				s[i][j] = p[j]; 			}		}		int ans = get(s , n , k , perm);		while(next_permutation(perm)) {			ans = Math.min(ans, get(s,n,k,perm));		}		out.print(ans);	}		public static void main(String[] args) {		InputReader in = new InputReader(System.in); 		OutputWriter out = new OutputWriter(System.out); 		int t = 1;		while (t-- > 0) {			solve(in , out);			System.out.println();		}		out.flush();		out.close();	}} class InputReader{	private InputStream stream;	private byte[] buf = new byte[1024];	private int curChar;	private int numChars;	private SpaceCharFilter filter; 	 public InputReader(InputStream stream) {		this.stream = stream;	}      public int read() {		if (numChars == -1)			throw new InputMismatchException();		if (curChar >= numChars) {			curChar = 0;			try {				numChars = stream.read(buf);			} catch (IOException e) {				throw new InputMismatchException();			}			if (numChars <= 0)				return -1;		}		return buf[curChar++];	}      public int readInt() {		int c = read();		while (isSpaceChar(c))			c = read();		int sgn = 1;		if (c == '-') {			sgn = -1;			c = read();		}		int res = 0;		do {			if (c < '0' || c > '9')				throw new InputMismatchException();			res *= 10;			res += c - '0';			c = read();		} while (!isSpaceChar(c));		return res * sgn;	}      public String readString() {		int c = read();		while (isSpaceChar(c))			c = read();		StringBuilder res = new StringBuilder();		do {			res.appendCodePoint(c);			c = read();		} while (!isSpaceChar(c));		return res.toString();	}      public long readLong() {		int c = read();		while (isSpaceChar(c)) {			c = read();		}		int sgn = 1;		if (c == '-') {			sgn = -1;			c = read();		}		long res = 0;		do {			if (c < '0' || c > '9') {				throw new InputMismatchException();			}			res *= 10;			res += c - '0';			c = read();		} while (!isSpaceChar(c));		return res * sgn;	}	     public boolean isSpaceChar(int c) {		if (filter != null)			return filter.isSpaceChar(c);		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	}          public String next() {		return readString();	}         public interface SpaceCharFilter {		public boolean isSpaceChar(int ch);	}} class OutputWriter {	private final PrintWriter writer; 	public OutputWriter(OutputStream outputStream) {		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));	} 	public OutputWriter(Writer writer) {		this.writer = new PrintWriter(writer);	} 	public void print(Object... objects) {		for (int i = 0; i < objects.length; i++) {			if (i != 0)				writer.print(' ');			writer.print(objects[i]);		}	} 	public void println(Object... objects) {		print(objects);		writer.println();	} 	public void close() {		writer.close();	} 	public void flush() {		writer.flush();	}}
