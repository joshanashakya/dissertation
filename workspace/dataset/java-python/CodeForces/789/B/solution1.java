import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigInteger;import java.util.*; public class Main{     public static void main(String[] args) throws IOException    {        FastScanner input = new FastScanner();        long b1 = input.nextLong();        long q = input.nextLong();        long l = input.nextLong();        int m = input.nextInt();        TreeSet<Long> set = new TreeSet<>();        for (int i = 0; i < m; i++) {            set.add(input.nextLong());        }        long count=0;        long sameCount=0;               long last =  b1;         if(Math.abs(b1)>l)        {            System.out.println("0");            return;        }         else if(q==-1&&set.contains(b1)&&set.contains(-b1))        {            System.out.println("0");            return;        }        else if(q==-1)        {            System.out.println("inf");            return;        }        else                if(!set.contains(b1)&&Math.abs(b1)<=l)            count++;        while(Math.abs(b1*q)<=l)        {            if(last==b1*q)            {                sameCount++;                            }            else            {                last = b1*q;            }            if(sameCount==2&&!set.contains(b1*q))            {                System.out.println("inf");                return;            }            else if(sameCount==2)            {                System.out.println(count);                return;            }            if(!set.contains(b1*q))                            count++;           b1 = b1*q;                   }        System.out.println(count);                    }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }        String nextLine() throws IOException        {            return br.readLine();        }    } }
