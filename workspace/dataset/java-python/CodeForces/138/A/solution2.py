# import itertoolsimport bisect# import mathfrom collections import defaultdict, Counterimport osimport sysfrom io import BytesIO, IOBase # sys.setrecursionlimit(10 ** 5)ii = lambda: int(input())lmii = lambda: list(map(int, input().split()))slmii = lambda: sorted(map(int, input().split()))li = lambda: list(input())mii = lambda: map(int, input().split())msi = lambda: map(str, input().split())  def gcd(a, b):    if b == 0: return a    return gcd(b, a % b)  def lcm(a, b): return (a * b) // gcd(a, b)  def main():    # for _ in " " * int(input()):    n, k = mii()    lst = []    ans = ""    for i in range(n):        lst.append([li()[::-1], li()[::-1], li()[::-1], li()[::-1]])    first = 0    for i in lst:        f = i[0]        s = i[1]        t = i[2]        ff = i[3]        cnt = 0        indf = -1        for j in range(len(f)):            if f[j] in "aeiou":                cnt += 1                if cnt == k:                    indf = j                    break        if cnt != k:            print("NO")            exit()        cnt = 0        inds = -1        for j in range(len(s)):            if s[j] in "aeiou":                cnt += 1                if cnt == k:                    inds = j                    break        if cnt != k:            print("NO")            exit()        cnt = 0        indt = -1        for j in range(len(t)):            if t[j] in "aeiou":                cnt += 1                if cnt == k:                    indt = j                    break        if cnt != k:            print("NO")            exit()        cnt = 0        indff = -1        for j in range(len(ff)):            if ff[j] in "aeiou":                cnt += 1                if cnt == k:                    indff = j                    break        if cnt != k:            print("NO")            exit()        if indf == inds == indff == indt and f[:indf + 1] == ff[:indff + 1] == s[:inds + 1] == t[:indt + 1]:            pp = "aaaa"            if first == 0:                first = 1                ans = "aaaa"        elif inds == indf and f[:indf + 1] == s[:inds + 1]:            if indt == indff and t[:indt + 1] == ff[:indff + 1]:                pp = "aabb"                if first == 0 or ans == "aaaa":                    ans = "aabb"                    first = 1                else:                    if ans != pp:                        print("NO")                        exit(0)            else:                print("NO")                exit(0)        else:            if indf == indt and f[:indf + 1] == t[:indt + 1] and inds == indff and s[:inds + 1] == ff[:indff + 1]:                pp = "abab"                if first == 0 or ans == "aaaa":                    ans = "abab"                    first = 1                else:                    if ans != pp:                        print("NO")                        exit(0)            elif indf == indff and f[:indf + 1] == ff[:indff + 1] and inds == indt and s[:inds + 1] == t[:indt + 1]:                pp = "abba"                if first == 0 or ans == "aaaa":                    ans = "abba"                    first = 1                else:                    if ans != pp:                        print("NO")                        exit(0)            else:                print("NO")                exit(0)     print(ans)  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == "__main__":    main()
