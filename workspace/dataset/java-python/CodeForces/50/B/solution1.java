 import javax.print.DocFlavor;import javax.swing.*;import javax.swing.text.StyleContext;import java.awt.image.AreaAveragingScaleFilter; import javax.print.attribute.Attribute;import javax.print.attribute.HashAttributeSet;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger;import java.nio.channels.AcceptPendingException;import java.nio.charset.IllegalCharsetNameException;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.logging.SimpleFormatter;      public class Main1 {             public static void main(String[] args) {                    FastScanner in = new FastScanner();                PrintWriter out = new PrintWriter(System.out);                 char a[] = in.next().toCharArray() ;                Arrays.sort(a);                int ct = 1 ;                long temp = 0 ;            for (int i = 1; i <a.length ; i++) {                if (a[i] == a[i-1])                    ct++ ;                else {                    temp += (long) ct *ct ;                    ct = 1 ;                }            }             System.out.println(temp + (long) ct *ct);                                 out.flush();                out.close();            }                          static class FastScanner {            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));            StringTokenizer st = new StringTokenizer("");             String next() {                while (!st.hasMoreTokens())                    try {                        st = new StringTokenizer(br.readLine());                    } catch (IOException e) {                        e.printStackTrace();                    }                return st.nextToken();            }             int nextInt() {                return Integer.parseInt(next());            }             int[] readArray(int n) {                int[] a = new int[n];                for (int i = 0; i < n; i++) a[i] = nextInt();                return a;            }              long nextLong() {                return Long.parseLong(next());            }        }      }       
