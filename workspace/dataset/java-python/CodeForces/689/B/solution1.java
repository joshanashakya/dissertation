import java.util.*;import java.io.*;public class Solution{       static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     }        public static void main(String []args) throws IOException       {              Reader sc = new Reader();              int n = sc.nextInt();              LinkedList<Integer> source[] = new LinkedList[n+1];              for(int i =1 ; i <= n ; i++)              {                     source[i] = new LinkedList<Integer>();              }             int arr[] = new int[n+1];              for(int i = 1 ; i <= n ; i++)              {                     arr[i] = sc.nextInt();                     source[arr[i]].add(i);              }              int ans[] = new int[n+1];              TreeMap<Integer,Integer> map = new TreeMap<Integer,Integer>();              int min = -1;               StringBuffer str = new StringBuffer("");               str.append(0+" ");               int k = 1;               map.put(arr[1]+1,1);              for(int i =2 ; i <= n ; i++)              {                                          ans[i] = i+min;                                                               for(Integer j : source[i])                     {                            if(j != i)                         ans[i] = Math.min(ans[j]+1,ans[i]);                        }                     while(k < i && arr[k] < i)                     {                            if(map.get(arr[k]+ans[k]+1) == 1)                            map.remove(arr[k]+ans[k]+1);                                                        else                            map.replace(ans[k]+arr[k]+1 , map.get(ans[k]+arr[k]+1)-1);                            k++;                     }                                                              if(map.size() > 0)                     ans[i] = Math.min(ans[i],map.firstKey()-i);                                           min = Math.min(min,ans[i]-i);                     str.append(ans[i] + " ");                                          int x = ans[i]+arr[i]+1;                     if(map.containsKey(x))                     map.replace(x,map.get(x)+1);                                          else                     map.put(x,1);              }            System.out.println(str);       }}
