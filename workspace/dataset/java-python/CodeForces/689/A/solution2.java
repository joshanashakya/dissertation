import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Random;import java.util.StringTokenizer;  public class Main {    static long mod = 1000000007;    static FastScanner fs = new FastScanner();    static PrintWriter out = new PrintWriter(System.out);    static String str;    static long ans;     public static void main(String[] args) {        int t = fs.nextInt();        List<Integer> num = new ArrayList<>();        String str = fs.next();        char[] chs = str.toCharArray();        int z=0;        while (z<t){            int n = Integer.parseInt(""+chs[z]);            num.add(n);            z++;        }         List<Pair> indices = new ArrayList<>();         int arr[][] = new int[4][3];        arr[0][0] = 1;        arr[0][1] = 2;        arr[0][2] = 3;         arr[1][0] = 4;        arr[1][1] = 5;        arr[1][2] = 6;          arr[2][0] = 7;        arr[2][1] = 8;        arr[2][2] = 9;         arr[3][0] = -1;        arr[3][1] =  0;        arr[3][2] = -1;         HashMap<Integer,Pair> hashMap = new HashMap<>();        for(int i=0;i<arr.length;i++){            for(int j=0;j<arr[0].length;j++){                hashMap.put(arr[i][j], new Pair(i,j));            }        }        Pair prev = hashMap.get(num.get(0));         for (int i=1; i< num.size(); i++){             Pair curr = hashMap.get(num.get(i));            if(num.get(i)==num.get(i-1)){                indices.add(new Pair(0, 0));             }            else {                indices.add(new Pair(curr.first - prev.first, curr.second - prev.second));            }            prev = curr;        }        boolean found = false;         for(int i=0;i< arr.length; i++) {            for (int j = 0; j < arr[0].length; j++) {                if(arr[i][j]!= num.get(0) && !(i==3 && j==2) && !(i==3&&j==0)){                    Pair start = new Pair(i,j);                   // out.println(start.first+" "+start.second);                    if(isValid(start, indices)){                        out.println("NO");                        found = true;                        break;                    }                }            }            if(found)                break;        }        if(!found){            out.println("YES");        }        out.close();    }     private static boolean isValid(Pair prev, final List<Pair> indices) {      for(int i=0;i<indices.size();i++){         int row = prev.first + (int) indices.get(i).first;         int col = prev.second + (int) indices.get(i).second;         /*out.println("to add: "+indices.get(i).first+" "+indices.get(i).second);         out.println("res: "+row+" "+col);*/         Pair curr = new Pair(row,col);           if(!isRowColValid(row,col)){             return false;         }         prev = curr;     }     return true;    }     private static boolean isRowColValid(final int i, final int j) {        if(i<0 || j<0 || (i>=4) || j>=3 || (i == 3 && j==0) || (i == 3 && j==2)){            return false;        }        return true;    }     static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     static class Pair  {        int first, second;         public Pair(int first, int second) {            this.first = first;            this.second = second;         }     }     static void ruffleSort(int[] a) {        //ruffle        int n=a.length;        Random r=new Random();        for (int i=0; i<a.length; i++) {            int oi=r.nextInt(n), temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }         //then sort        Arrays.sort(a);    }  }
