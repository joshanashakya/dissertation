import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;  public class Main {    static int i, j, k, n, m, t, y, x, sum=0;    static long mod = 1000000007;    static FastScanner fs = new FastScanner();    static PrintWriter out = new PrintWriter(System.out);    static String str;      static List<Integer> num = new ArrayList<>();    static Pair[] arr = new Pair[10];      public static void main(String[] args) {         n = fs.nextInt();         arr[0] = new Pair(4,2);        arr[1] = new Pair(1,1);        arr[2] = new Pair(1,2);        arr[3] = new Pair(1,3);        arr[4] = new Pair(2,1);        arr[5] = new Pair(2,2);        arr[6] = new Pair(2,3);        arr[7] = new Pair(3,1);        arr[8] = new Pair(3,2);        arr[9] = new Pair(3,3);         str = fs.next();          for(i=0;i<str.length();i++){            int temp = str.charAt(i)-48;            num.add(temp);        }         int f=0;        for(i=0;i<10;i++){             if(i!=num.get(0) && isPossible(0,i))                f=1;        }         if(f==1)            out.print("NO");        else            out.print("YES");          out.close();    }     public static boolean isPossible(int in, int digit){        if(in==n-1)            return true;         boolean isPossible = false;         int a = arr[num.get(in)].first - arr[num.get(in+1)].first;        int b = arr[num.get(in)].second - arr[num.get(in+1)].second;         for(int i=0;i<10;i++){            if(((arr[digit].first - arr[i].first) == a) && ((arr[digit].second - arr[i].second) == b)){                isPossible = isPossible || isPossible(in+1, i);            }        }         return isPossible;    }     static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     static class Pair  {        int first, second;         public Pair(int first, int second) {            this.first = first;            this.second = second;         }     }     static void ruffleSort(int[] a) {        //ruffle        int n=a.length;        Random r=new Random();        for (int i=0; i<a.length; i++) {            int oi=r.nextInt(n), temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }         //then sort        Arrays.sort(a);    }  }
