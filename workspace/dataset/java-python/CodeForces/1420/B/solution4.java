import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;// import java.math.BigInteger;import java.util.*; public class Solution {    public static void main(String[] args) {        int T = in.nextInt();    TEST:        while (T-- > 0) {            int n = in.nextInt();            int[] a = in.readIntArray(n);            int[] cnt = new int[32];            for (int x : a) {                int bit = 0;                while (x > 0) {                    x >>= 1;                    bit++;                }                cnt[bit]++;            }            long res = 0;            for (int i = 1; i < 32; i++) {                res += 1l * cnt[i] * (cnt[i]-1)/2;            }            out.println(res);        }        out.flush();    }     // Handle I/O    static FastScanner in = new FastScanner();    static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));    static class FastScanner {        BufferedReader br;        StringTokenizer st;        public FastScanner() {            br = new BufferedReader(new InputStreamReader(System.in));            st = null;        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readIntArray(int size) {            int[] arr = new int[size];            for (int i = 0; i < size; i++) {                arr[i] = nextInt();            }            return arr;        }         long nextLong() {            return Long.parseLong(next());        }         long[] readLongArray(int size) {            long[] arr = new long[size];            for (int i = 0; i < size; i++) {                arr[i] = nextLong();            }            return arr;        }    }}
