import java.io.*;import java.util.*; public class input{	public static InputReader cin;	public static PrintWriter cout;	public static void main(String ...arg) throws IOException	{		cout = new PrintWriter(new BufferedOutputStream(System.out));		cin = new InputReader(System.in);				int n = cin.nextInt();        for(int i=0;i<n;i++)        {            long l = cin.nextLong();            long r = cin.nextLong();            for(long bit=1;(bit|l)<=r;bit *= 2)                l = bit|l;            cout.print(l+"\n");        }		cout.close();	}} class InputReader {    private InputStream stream;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;    private InputReader.SpaceCharFilter filter;     public InputReader(InputStream stream) {        this.stream = stream;    }     public int read() {        if (numChars == -1) {            throw new InputMismatchException();        }        if (curChar >= numChars) {            curChar = 0;            try {                numChars = stream.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (numChars <= 0) {                return -1;            }        }        return buf[curChar++];    }     public int nextInt() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public long nextLong() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        long res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public boolean isSpaceChar(int c) {        if (filter != null) {            return filter.isSpaceChar(c);        }        return isWhitespace(c);    }     public static boolean isWhitespace(int c) {        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }     public interface SpaceCharFilter {        public boolean isSpaceChar(int ch);     } } 
