import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.TreeSet;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BMaximumValue solver = new BMaximumValue();        solver.solve(1, in, out);        out.close();    }     static class BMaximumValue {        int n;        int[] arr;         public void readInput(Scanner sc) {            n = sc.nextInt();            arr = new int[n];            for (int i = 0; i < n; i++)                arr[i] = sc.nextInt();        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            int q = 1;            while (q-- > 0) {                readInput(sc);                TreeSet<Integer> set = new TreeSet<>();                for (int x : arr)                    set.add(x);                int max = 0;                int[] lower = new int[(int) 2e6 + 1];                Arrays.fill(lower, -1);                for (int x : set) {                    if (set.lower(x) != null)                        lower[x] = set.lower(x);                }                for (int x : set)                    for (int j = 2 * x; j <= (int) 2e6; j += x) {                        int temp = lower[j] == -1 ? set.lower(j) : lower[j];                        lower[j] = temp;                        max = Math.max(max, lower[j] % x);                    }                pw.println(max);            }        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
