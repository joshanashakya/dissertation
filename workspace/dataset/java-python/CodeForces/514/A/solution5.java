import java.io.*;import java.util.*;import static java.lang.Math.*; public class Solution {    FastReader sc;    int M = (int) (1e9 + 7);    boolean tc = false;     void solver(int tc) {        try {            while (tc-- != 0) {                char[] ch = sc.next().toCharArray();                for (int i = 0; i < ch.length; i++) {                    char c = ch[i];                    int x = Character.getNumericValue(c);                    if (i == 0 && x == 9)                        System.out.print(9);                    else                        System.out.print(Math.min(9 - x, x));                }            }        } catch (Throwable ex) {            ex.printStackTrace(System.out);        }    }     void runner() throws IOException {        try {            sc = new FastReader();            solver(tc ? sc.nextInt() : 1);        } catch (Exception ex) {         }    }     public static void main(String[] args) {        try {            new Solution().runner();        } catch (IOException e) {            e.printStackTrace();        }    }     class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }     }}
