import java.math.BigInteger;import java.util.ArrayList;import java.util.Collections;import java.util.Scanner; public class Main {	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		BigInteger x1 = BigInteger.valueOf(scanner.nextLong());		BigInteger x2 = BigInteger.valueOf(scanner.nextLong()); 		ArrayList<Intersection> intersections = new ArrayList<Intersection>();		for (int i = 0; i < n; i++) {			BigInteger k = BigInteger.valueOf(scanner.nextLong());			BigInteger b = BigInteger.valueOf(scanner.nextLong());			BigInteger y1 = k.multiply(x1).add(b);			BigInteger y2 = k.multiply(x2).add(b);			intersections.add(new Intersection(y1, y2));		}		Collections.sort(intersections); 		for (int i = 1; i < intersections.size(); i++) {			if ((intersections.get(i).y1.subtract(intersections.get(i - 1).y1)).signum() * (intersections.get(i).y2.subtract(intersections.get(i - 1).y2)).signum() < 0) {				System.out.println("YES");				return;			}		}		System.out.println("NO");	} 	private static class Intersection implements Comparable<Intersection> {		BigInteger y1;		BigInteger y2; 		public Intersection(BigInteger y1, BigInteger y2) {			this.y1 = y1;			this.y2 = y2;		} 		@Override		public int compareTo(Intersection intersection) {			if (this.y1.compareTo(intersection.y1) == 0) {				return this.y2.compareTo(intersection.y2);			} else {				return this.y1.compareTo(intersection.y1);			}		}	}}			 		 	   	     				   		  	
