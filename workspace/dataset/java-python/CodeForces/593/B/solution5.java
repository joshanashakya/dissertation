import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Arrays;import java.util.StringTokenizer; public class AntonandLines {	static final double EPS = (1e-15); 	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		double x1 = sc.nextDouble() + EPS;		double x2 = sc.nextDouble() - EPS;		pair[] wX1 = new pair[n]; 		for (int i = 0; i < n; ++i) {			int k = sc.nextInt();			int b = sc.nextInt();			wX1[i] = new pair(i, k * x1 + b, k * x2 + b);		}		Arrays.sort(wX1);		boolean can = true;		for (int i = 0; i < n - 1; ++i) {			if (wX1[i].y2 >= wX1[i + 1].y2) {				can = false;				break;			}		}		//System.err.println(Arrays.toString(wX1));		System.out.println(!can ? "YES" : "NO");	} 	static class pair implements Comparable<pair> {		int idx;		double y, y2;		public String toString () {			return "idx = "+idx+" y = "+y+" y2 "+y2;		}		public pair(int a,double b,double c) {			idx=a;			y=b;			y2=c;		}		public int compareTo(pair p) {			return Double.compare(y, p.y);		}	}	static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {return Integer.parseInt(next());}				public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();}				public double nextDouble() throws IOException		{			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if(x.charAt(0) == '-')			{				neg = true;				start++;			}			for(int i = start; i < x.length(); i++)				if(x.charAt(i) == '.')				{					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				}				else				{					sb.append(x.charAt(i));					if(dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg?-1:1);		}				public boolean ready() throws IOException {return br.ready();}  	}}
