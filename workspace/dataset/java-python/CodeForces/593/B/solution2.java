import java.util.*;import java.io.*; public class cf { 	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		long x1 = sc.nextInt(), x2 = sc.nextInt();		pair[] arr = new pair[n];		for (int i = 0; i < arr.length; i++) {			long a = sc.nextInt(), b = sc.nextInt();			arr[i] = new pair(a * x1 + b, a * x2 + b);		}		Arrays.sort(arr);		long x = arr[0].x, y = arr[0].y;		boolean f = false;		for (int i = 1; i < arr.length; i++) {			if (arr[i].x > x && arr[i].y < y) {				f = true;				break;			}			if (arr[i].y > y) {				y = arr[i].y;				x = arr[i].x;			}		}//		pw.println(Arrays.toString(arr));		pw.println(f ? "YES" : "NO");		pw.close();	} 	static PrintWriter pw = new PrintWriter(System.out); 	public static class pair implements Comparable<pair> {		long x;		long y; 		public pair(long x, long y) {			this.x = x;			this.y = y;		} 		public String toString() {			return x + " " + y;		} 		public boolean equals(Object o) {			if (o instanceof pair) {				pair p = (pair) o;				return p.x == x && p.y == y;			}			return false;		} 		public int hashCode() {			return new Double(x).hashCode() * 31 + new Double(y).hashCode();		} 		public int compareTo(pair other) {			if (this.x == other.x) {				return Long.compare(this.y, other.y);			}			return Long.compare(this.x, other.x);		}	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public Scanner(FileReader r) {			br = new BufferedReader(r);		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public int[] nextArr(int n) throws IOException {			int[] arr = new int[n];			for (int i = 0; i < arr.length; i++)				arr[i] = nextInt();			return arr;		} 		public Integer[] nextsort(int n) throws IOException {			Integer[] arr = new Integer[n];			for (int i = 0; i < n; i++)				arr[i] = nextInt();			return arr;		} 		public boolean ready() throws IOException {			return br.ready();		}	}}
