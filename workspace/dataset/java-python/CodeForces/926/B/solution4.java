import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.Scanner;import java.util.Random; /** * Built using CHelper plug-in * Actual solution is at the top * * @author is kc tier */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        CFArch926B solver = new CFArch926B();        solver.solve(1, in, out);        out.close();    }     static class CFArch926B {        public void solve(int testNumber, Scanner in, PrintWriter out) {            int n = in.nextInt();            long[] a = new long[n];            for (int i = 0; i < n; i++) {                a[i] = in.nextLong();            }            Rand.shuffle(a);            Arrays.sort(a);            long d = a[1] - a[0];            for (int i = 1; i + 1 < n; i++) {                d = GCD.gcd(a[i + 1] - a[i], d);            }            long ans = 0;            for (int i = 0; i + 1 < n; i++) {                ans += (a[i + 1] - a[i]) / d - 1;            }            out.println(ans);        }     }     static class Rand {        public static final Random INSTANCE = new Random();         public static void shuffle(long[] a) {            for (int i = 0; i + 1 < a.length; i++) {                int p = INSTANCE.nextInt(a.length - i);                long t = a[i];                a[i] = a[p];                a[p] = t;            }        }     }     static class GCD {        public static long gcd(long a, long b) {            if (a < 0) {                return gcd(-a, b);            }            if (b < 0) {                return gcd(a, -b);            }            if (a < b) {                return gcd(b, a);            }            while (b > 0) {                long c = a % b;                a = b;                b = c;            }            return a;        }     }} 
