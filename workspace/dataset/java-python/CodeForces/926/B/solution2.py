from sys import stdin, stdout import sysimport randomimport datetime endl = '\n' class Scan():    def __init__(self):        self.read = stdin.read        self.input = stdin.readline     def integer(self, count=1):        if count == 1:            return self._integer()        return [self._integer() for _ in range(count)]     def _integer(self):        sym: str = self.read(1)        while sym != '-' and not sym.isdigit():            sym = self.read(1)          number, sign = (0, -1) if sym == '-' else (int(sym), 1)        sym: str = self.read(1)        while sym.isdigit():            number = number * 10 + int(sym)            sym = self.read(1)                return number * sign        def array(self, func=int, sep=' '):        if func == str:            return input().split(sep)        return list(map(func, input().split(sep)))     def string(self, count=1):        if count == 1:            return self._string()        return [self._string() for _ in range(count)]     def _string(self):        sym = self.read(1)        while sym in ('\n', '\r', ' '):            sym = self.read(1)                s = str()        while sym not in ('\n', '\r', ' '):            s += sym            sym = self.read(1)         return s class Write():    def __lshift__(self, other):        stdout.write(str(other))        return self class Number():    def gcd(a, b):        while b > 0:            a, b = b, a % b        return a        def lcm(a, b):        return a * b // gcd(a, b)     def sqrt(n):        sqrt_n = int(n ** 0.5)        while sqrt_n * sqrt_n < n:            sqrt_n += 1         while sqrt_n * sqrt_n > n:            sqrt_n -= 1         return sqrt_n        def sum_n(n):        return n * (n + 1) // 2 class Constants():    EPS = 10 ** -9    INF = 10 ** 18    MOD = 10 ** 9 + 7 def solution(scan: Scan, write: Write):    n = scan.integer()    a = scan.array()    gcd = 0    ans = 0    a.sort()    for i in range(1, n): gcd = Number.gcd(gcd, a[i] - a[i - 1])    gcd = abs(gcd)    for i in range(1, n):        ans += (a[i] - a[i - 1]) // gcd - 1        print(ans)    def main():    queries: int = 1    scan, write = Scan(), Write()    #queries = scan.integer()    for _ in range(queries):        solution(scan, write) if __name__ == "__main__":    main()
