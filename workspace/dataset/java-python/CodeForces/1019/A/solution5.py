#!/usr/bin/env python2"""This file is part of https://github.com/cheran-senthil/PyRivalCopyright 2019 Cheran Senthilkumar <hello@cheran.io> """from __future__ import division, print_function import itertoolsimport osimport sysfrom atexit import registerfrom collections import defaultdictfrom copy import deepcopyfrom io import BytesIO  class dict(dict):    """dict() -> new empty dictionary"""     def items(self):        """D.items() -> a set-like object providing a view on D's items"""        return dict.iteritems(self)     def keys(self):        """D.keys() -> a set-like object providing a view on D's keys"""        return dict.iterkeys(self)     def values(self):        """D.values() -> an object providing a view on D's values"""        return dict.itervalues(self)  def gcd(x, y):    """greatest common divisor of x and y"""    while y:        x, y = y, x % y    return x  range = xrange filter = itertools.ifiltermap = itertools.imapzip = itertools.izip sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))sys.stdout = BytesIO()register(lambda: os.write(1, sys.stdout.getvalue())) input = lambda: sys.stdin.readline().rstrip('\r\n')  def main():    n, m = map(int, input().split())     p, c = [0] * n, [0] * n    counter = defaultdict(list)    for i in range(n):        p[i], c[i] = map(int, input().split())        counter[p[i]].append(c[i])     pre_votes = len(counter.pop(1, []))     for i in counter:        counter[i].sort(reverse=True)    votes = list(counter.values())     def check(x):        berland_votes, cost = pre_votes, 0         _votes = deepcopy(votes)        for i in range(len(_votes)):            while len(_votes[i]) >= x:                cost += _votes[i].pop()                berland_votes += 1         if berland_votes >= x:            return cost         return cost + sum(sorted(itertools.chain.from_iterable(_votes))[:x - berland_votes])     left, right = max(pre_votes, 1), n     while left <= right:        left_third = left + (right - left) // 3        right_third = left + (right - left) // 3 + (1 if 0 < right - left < 3 else (right - left) // 3)         if check(left_third) > check(right_third):            left = left_third + 1        else:            right = right_third - 1     print(check(left))  if __name__ == '__main__':    main()
