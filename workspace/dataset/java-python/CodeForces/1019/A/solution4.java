import javax.sound.midi.Soundbank;import java.io.BufferedInputStream;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.PriorityQueue;import java.util.Scanner; /** * @author jiashuaowei * @date 2020/10/3 */public class Solution1 {    public static void main(String[] args) {        Scanner scanner = new Scanner(new BufferedInputStream(System.in));        int n = scanner.nextInt();        int m = scanner.nextInt();        Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();        for (int i = 0; i < n; i++) {            int party = scanner.nextInt();            int money = scanner.nextInt();            map.putIfAbsent(party, new PriorityQueue<>());            map.get(party).add(money);        }        long res = Long.MAX_VALUE;        PriorityQueue<Integer> priorityQueue = map.get(1) ;        PriorityQueue<Integer> ttt;        for (int k = 1; k <= n; k++) {            ttt = new PriorityQueue<>();            long cur = (priorityQueue == null ? 0 : priorityQueue.size());            if (cur <= k) {                long money = 0;                for (Map.Entry<Integer, PriorityQueue<Integer>> integerPriorityQueueEntry : map.entrySet()) {                    int key = integerPriorityQueueEntry.getKey();                    PriorityQueue<Integer> queue = new PriorityQueue<>(integerPriorityQueueEntry.getValue());                    if (key == 1 || queue.isEmpty()) {                        continue;                    }                    while (queue.size() >= k) {                        money += queue.poll();                        cur++;                    }                    if (!queue.isEmpty()) {                       ttt.addAll(queue);                    }                    if (cur > k) {                        break;                    }                }                if (cur < k) {                    while (cur < k && !ttt.isEmpty()) {                        money += ttt.poll();                        cur++;                    }                }                if (cur == k) {                    res = Math.min(res, money);                }            }         }        System.out.println(res);    } }     				  			 	 			 	 										
