import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int m=input.nextInt();            int c[]=new int[n];            int p[]=new int[n];            ArrayList<Integer> adj[]=new ArrayList[m+1];            for(int i=1;i<=m;i++)            {                adj[i]=new ArrayList<>();            }            ArrayList<ArrayList<Integer>> cost=new ArrayList<>();            for(int i=0;i<n;i++)            {                p[i]=input.nextInt();                c[i]=input.nextInt();                ArrayList<Integer> l=new ArrayList<>();                l.add(c[i]);                l.add(i);                cost.add(l);                adj[p[i]].add(i);            }            mergeSort1(cost,0,n-1);            for(int i=1;i<=m;i++)            {                mergeSort(adj[i],c,0,adj[i].size()-1);            }            int x=n/m;            if(n%m>1)            {                x++;            }            int l=x+1;            int r=n;            long min=Long.MAX_VALUE;            for(int i=l;i<=r;i++)            {                HashSet<Integer> set=new HashSet<>();                for(int j=0;j<adj[1].size();j++)                {                    set.add(adj[1].get(j));                }                long sum=0;                for(int j=2;j<=m;j++)                {                    if(adj[j].size()>=i)                    {                        for(int k=0;k<adj[j].size()+1-i;k++)                        {                            set.add(adj[j].get(k));                            sum+=(long)c[adj[j].get(k)];                        }                    }                }                int co=i-set.size();                for(int j=0;j<n && co>0;j++)                {                    if(!set.contains(cost.get(j).get(1)))                    {                        sum+=(long)cost.get(j).get(0);                        co--;                    }                }                min=Math.min(min,sum);            }            if(min==Long.MAX_VALUE)            {                min=0;            }            out.println(min);        }        out.close();    }    public static void mergeSort1(ArrayList<ArrayList<Integer>> a,int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort1(a,p,q);            mergeSort1(a,q+1,r);            merge1(a,p,q,r);        }    }    public static void merge1(ArrayList<ArrayList<Integer>> a,int p,int q,int r)    {        int n1=q-p+2;        ArrayList<Integer> L[]=new ArrayList[n1];        int n2=r-q+1;        ArrayList<Integer> R[]=new ArrayList[n2];        for(int i=p;i<=q;i++)        {            L[i-p]=a.get(i);        }        ArrayList<Integer> l=new ArrayList<>();        l.add(Integer.MAX_VALUE);        l.add(0);        L[n1-1]=l;        for(int i=q+1;i<=r;i++)        {            R[i-q-1]=a.get(i);        }        R[n2-1]=l;        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L[x].get(0)<=R[y].get(0))            {                a.set(i,L[x]);                x++;            }            else            {                a.set(i,R[y]);                y++;            }        }    }    public static void mergeSort(ArrayList<Integer> a,int c[],int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort(a,c,p,q);            mergeSort(a,c,q+1,r);            merge(a,c,p,q,r);        }    }    public static void merge(ArrayList<Integer> a,int c[],int p,int q,int r)    {        int n1=q-p+2;        int L[]=new int[n1];        int L1[]=new int[n1];        int n2=r-q+1;        int R[]=new int[n2];        int R1[]=new int[n2];        for(int i=p;i<=q;i++)        {            L[i-p]=a.get(i);            L1[i-p]=c[a.get(i)];        }        L[n1-1]=c.length;        L1[n1-1]=Integer.MAX_VALUE;        for(int i=q+1;i<=r;i++)        {            R[i-q-1]=a.get(i);            R1[i-q-1]=c[a.get(i)];        }        R[n2-1]=c.length;        R1[n2-1]=Integer.MAX_VALUE;        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L1[x]<=R1[y])            {                a.set(i,L[x]);                x++;            }            else            {                a.set(i,R[y]);                y++;            }        }    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {             return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
