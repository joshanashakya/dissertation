import java.util.*;import java.util.stream.Collectors; public class Elections {     public static void main(String[] args) {        Scanner in = new Scanner(System.in);        String s = in.nextLine();        String[] coupleVotesParties = s.split(" ");        int numberOfVotes = Integer.parseInt(coupleVotesParties[0]);        int numberOfParties = Integer.parseInt(coupleVotesParties[1]);         HashMap<Integer, List<Vote>> dictionaryOfVotes = new HashMap<Integer, List<Vote>>();         for (int counter = 1; counter <= numberOfParties; counter++) {            dictionaryOfVotes.put(counter, new ArrayList<>());        }         for (int counter = 0; counter < numberOfVotes; counter++) {            String t = in.nextLine();            String[] couplePartyBribe = t.split(" ");            int party = Integer.parseInt(couplePartyBribe[0]);            int bribe = Integer.parseInt(couplePartyBribe[1]);            Vote vote = new Vote(party, bribe);            dictionaryOfVotes.get(party).add(vote);        }         System.out.println(calculateBribe(dictionaryOfVotes));     }     public static long calculateBribe(HashMap<Integer, List<Vote>> dictionaryOfVotes) {        long bribeTotal = 0;        while(CheckIfParty1Won(dictionaryOfVotes) == false) {             List<Integer> winners = getWinners(dictionaryOfVotes);            Vote cheapestVote = getCheapestVote(dictionaryOfVotes);             if(winners.contains(cheapestVote.getParty())){                buyVote(dictionaryOfVotes, cheapestVote);                bribeTotal += getBribe(cheapestVote);            }            else{                int numberOfWinners = winners.size();                int neededVotes = getNeededVotes(dictionaryOfVotes);                 if(neededVotes > numberOfWinners){                    List<Vote> cheapestWinnersVotes = getCheapestWinnersVote(dictionaryOfVotes, winners);                    List<Vote> cheapestVotes = getCheapestVotes(dictionaryOfVotes, winners.size()+1);                     if(getTotalBribe(cheapestWinnersVotes) < getTotalBribe(cheapestVotes)){                        buyVotes(dictionaryOfVotes, cheapestWinnersVotes);                        bribeTotal += getTotalBribe(cheapestWinnersVotes);                    }                    else{                        buyVote(dictionaryOfVotes, cheapestVote);                        bribeTotal += getBribe(cheapestVote);                    }                }                else{                    buyVote(dictionaryOfVotes, cheapestVote);                    bribeTotal += getBribe(cheapestVote);                }            }          }        return bribeTotal;    }     private static long getBribe(Vote vote) {        return vote.getBribe();    }     private static List<Vote> getCheapestVotes(HashMap<Integer, List<Vote>> dictionaryOfVotes, int numberOfVotes) {        List<Vote> cheapestVotes = new ArrayList<>();        for(int counter = 2; counter <= dictionaryOfVotes.size(); counter++){            List<Vote> votes = dictionaryOfVotes.get(counter);            for(Vote vote: votes){                if(cheapestVotes.size() < numberOfVotes){                    cheapestVotes.add(vote);                }                else {                    Vote mostExpensiveVote = cheapestVotes.stream().                            filter(x -> x.getBribe() > vote.getBribe()).                            max(Comparator.comparing(Vote::getBribe)).                            orElse(null);                     if (mostExpensiveVote != null) {                        cheapestVotes.add(vote);                        cheapestVotes.remove(mostExpensiveVote);                    }                }            }        }        return cheapestVotes;    }     private static List<Vote> getCheapestWinnersVote(HashMap<Integer, List<Vote>> dictionaryOfVotes, List<Integer> winners) {        List<Vote> cheapestWinnersVotes = new ArrayList<>();        for(Integer party : winners){            Vote cheapestVoteInCurrentParty = null;            for(Vote vote: dictionaryOfVotes.get(party)){                if(cheapestVoteInCurrentParty == null || cheapestVoteInCurrentParty.getBribe() > vote.getBribe()){                    cheapestVoteInCurrentParty = vote;                }            }            cheapestWinnersVotes.add(cheapestVoteInCurrentParty);        }        return cheapestWinnersVotes;    }     private static long getTotalBribe(List<Vote> votes) {        long totalBribe = 0;        for(Vote vote : votes){            totalBribe += vote.getBribe();        }        return totalBribe;    }     private static void buyVotes(HashMap<Integer, List<Vote>> dictionaryOfVotes, List<Vote> votes) {        for(Vote vote: votes){            buyVote(dictionaryOfVotes, vote);        }    }     private static int getNeededVotes(HashMap<Integer, List<Vote>> dictionaryOfVotes) {        int neededVotes = 0;        for (int counter = 2; counter <= dictionaryOfVotes.size(); counter++) {            if (dictionaryOfVotes.get(1).size() <= dictionaryOfVotes.get(counter).size()) {                neededVotes = dictionaryOfVotes.get(counter).size() - dictionaryOfVotes.get(1).size() + 1;            }        }        return neededVotes;    }     private static void buyVote(HashMap<Integer, List<Vote>> dictionaryOfVotes, Vote cheapestVote) {        dictionaryOfVotes.get(cheapestVote.getParty()).remove(cheapestVote);        cheapestVote.setParty(1);        dictionaryOfVotes.get(1).add(cheapestVote);    }     private static Vote getCheapestVote(HashMap<Integer, List<Vote>> dictionaryOfVotes) {        Vote cheapestVote = null;        for(int counter = 2; counter <= dictionaryOfVotes.values().size(); counter ++){            List<Vote> listOfVotes = dictionaryOfVotes.get(counter);            for(Vote vote: listOfVotes){                if(cheapestVote == null || cheapestVote.getBribe() > vote.getBribe())                    cheapestVote = vote;            }        }        return cheapestVote;    }       public static boolean CheckIfParty1Won(HashMap<Integer, List<Vote>> dictionaryOfVotes) {        for (int counter = 2; counter <= dictionaryOfVotes.size(); counter++) {            if (dictionaryOfVotes.get(1).size() <= dictionaryOfVotes.get(counter).size()) {                return false;            }        }        return true;    }     public static List<Integer> getWinners(HashMap<Integer, List<Vote>> dictionaryOfVotes){        List<Integer> winners = new ArrayList<>();        winners.add(1);        for(int counter = 2; counter <= dictionaryOfVotes.size(); counter++) {            Integer winner = winners.stream().findFirst().get();            if(dictionaryOfVotes.get(counter).size() > dictionaryOfVotes.get(winner).size()){                winners.clear();                winners.add(counter);            }            else if(dictionaryOfVotes.get(counter).size() == dictionaryOfVotes.get(winner).size()){                winners.add(counter);            }        }        return winners;    }} class Vote {    private int party;    private long bribe;     public Vote(int party, long bribe) {        this.party = party;        this.bribe = bribe;    }     public int getParty() {        return party;    }     public void setParty(int party) {        this.party = party;    }     public long getBribe() {        return bribe;    }     public void setBribe(long bribe) {        this.bribe = bribe;    }}
