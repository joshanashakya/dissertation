import java.util.*;import java.lang.*;import java.text.DecimalFormat;import java.text.NumberFormat;import java.io.*;public class Solution {	static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }        String next() {            while (st == null || !st.hasMoreElements()) {                try{                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e) {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt() {            return Integer.parseInt(next());        }        long nextLong() {            return Long.parseLong(next());        }	public int[] readIntArray(int n) {			int[] arr = new int[n];			for(int i=0; i<n; ++i)				arr[i]=nextInt();			return arr;		}         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try{                str = br.readLine();            }            catch (IOException e) {                e.printStackTrace();            }            return str;        }    }	static String solve(int[] arr, int sum) {		int a = 0;		int b = 1;		int t = 0;			for(int i = 0;i<4;i++) {				for(int j=i+1;j<6;j++) {					for(int k = j+1;k<6;k++) {						if((arr[i] + arr[j] + arr[k])*2 == sum) {							return "yes";						}					}				}			}		return "No";	}	public static void main(String args[]) {        FastReader sc = new FastReader();        long start = System.currentTimeMillis();        	int[] arr = new int[6];        	int sum = 0;        	for(int i=0;i<6;i++) {        		arr[i] = sc.nextInt();        		sum += arr[i];        	}        	System.out.println(solve(arr,sum));        	long end = System.currentTimeMillis();        	NumberFormat formatter = new DecimalFormat("#0.00000");        	//System.out.print("Execution time is " + formatter.format((end - start) / 1000d) + " seconds");        }}
