import java.io.*;import java.util.Arrays;import java.util.StringTokenizer;  public class Main {    static final int clear = 0, set = 1, toggle = 2, keep = 3;     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int m = 10;        int[] state = new int[m];        Arrays.fill(state, keep);        int n = sc.nextInt();        while (n-- > 0) {            char op = sc.nextChar();            int x = sc.nextInt();            if (op == '|') {                for (int i = 0; i < m; i++)                    if ((x & 1 << i) != 0) state[i] = getNewState(state[i], set);            }            if (op == '^') {                for (int i = 0; i < m; i++)                    if ((x & 1 << i) != 0) state[i] = getNewState(state[i], toggle);            }            if (op == '&') {                for (int i = 0; i < m; i++)                    if ((x & 1 << i) == 0) state[i] = getNewState(state[i], clear);            }        }        int and = (1 << 10) - 1, or = 0, xor = 0;        for (int i = 0; i < m; i++)            if (state[i] == set) or |= 1 << i;            else if (state[i] == toggle) xor |= 1 << i;            else if (state[i] == clear) and &= ~(1 << i);        out.println(3);        out.println("& " + and);        out.println("| " + or);        out.println("^ " + xor);        out.flush();        out.close();    }     static int getNewState(int oldState, int newState) {        if (newState == clear || newState == set) return newState;        if (oldState == set || oldState == clear) return 1 - oldState;        if (oldState == toggle) return keep;        return toggle;    }      static class Scanner {         StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }         boolean ready() throws IOException {            return br.ready();        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public long[] nextLongArray(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }          public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public double[] nextDoubleArray(int n) throws IOException {            double[] ans = new double[n];            for (int i = 0; i < n; i++)                ans[i] = nextDouble();            return ans;        }         public short nextShort() throws IOException {            return Short.parseShort(next());        }     } }
