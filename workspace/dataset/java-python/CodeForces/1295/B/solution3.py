#!/usr/bin/env pythonimport osimport sysfrom io import BytesIO, IOBaseimport threading from bisect import bisect_rightfrom math import gcd,logfrom collections import Counterfrom pprint import pprint   def main():    n,x=map(int,input().split())    s=input()    bal=[0]    mx=0    mn=float('inf')    for c in s:        if c=='0':            bal.append(bal[-1]+1)        else:            bal.append(bal[-1]-1)        mx=max(mx,bal[-1])        mn=min(mn,bal[-1])     if bal[-1]==0 :        if x in bal:            print(-1)        else:            print(0)        return     cnt=0    gain=bal[-1]    bal=bal[1:]    # print(bal,gain)    if x==0:        cnt+=1    for el in bal:        if (x-el)%gain==0 and (x-el)//gain>=0:            cnt+=1             print(cnt)              BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # endregion if __name__ == "__main__":     for _ in range(int(input())):        main()     
