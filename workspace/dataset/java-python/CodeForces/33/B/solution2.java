import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class Main {	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	public static void main(String[] args) {		// TODO Auto-generated method stub		FastReader in = new FastReader();		int graph[][] = new int[26][26];				String s = in.nextLine();		String t = in.nextLine();				StringBuffer output = new StringBuffer();				if (s.length() != t.length()) {			System.out.println(-1);		} else {			int n = in.nextInt();			for (int i = 0; i < 26; i++)				for (int j = 0; j < 26; j++)					graph[i][j] = 3000; 			for (int i = 0; i < n; i++) {				String a = in.next();				String b = in.next();								int w = in.nextInt();				if (graph[(int) a.charAt(0) % 97][(int) b.charAt(0) % 97] > w)					graph[(int) a.charAt(0) % 97][(int) b.charAt(0) % 97] = w;			}						int[][] distance = new int[26][26];			floyd(graph, distance);						int cost = 0;			boolean check = false;						for (int i = 0; i < t.length(); i++) {				int r[] = comChar(distance, (int) s.charAt(i) % 97, (int) t.charAt(i) % 97);				if (r[0] == -1) {					check = true;					break;				}								cost += r[1];				output.append((char) r[0]);			}						if (check == false) {				System.out.println(cost);				System.out.println(output);			} else				System.out.println(-1); 		} 	} 	public static void floyd(int graph[][], int distance[][]) {	    for (int i = 0; i < 26; i++) {	        for (int j = 0; j < 26; j++) {	            if (i == j) distance[i][j] = 0;	            else distance[i][j] = graph[i][j];	        }	    }	    		for (int k = 0; k < 26; k++)			for (int i = 0; i < 26; i++)				for (int j = 0; j < 26; j++)					if (distance[i][k] != 3000 && distance[k][j] != 3000 && distance[i][j] > distance[i][k] + distance[k][j])						distance[i][j] = distance[i][k] + distance[k][j]; 	} 	public static int[] comChar(int graph[][], int s, int t) {		int r[] = new int[2];				r[0] = -1;		r[1] = 3000;				if (s == t) {			r[0] = s + 97;			r[1] = 0;			return r;		} 		if (graph[s][t] != 3000) {			r[0] = t + 97;			r[1] = graph[s][t];		}				if (graph[t][s] != 3000 && r[1] > graph[t][s]) {			r[0] = s + 97;			r[1] = graph[t][s];		} 		for (int i = 0; i < 26; i++)			if (graph[s][i] != 3000 && graph[t][i] != 3000 && r[1] > graph[s][i] + graph[t][i]) {				r[0] = i + 97;				r[1] = graph[s][i] + graph[t][i];			}					return r;	}}
