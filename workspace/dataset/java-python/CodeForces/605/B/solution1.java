import javafx.util.Pair; import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List; public class Main {     public static class CustomComparator implements Comparator<Integer[]> {        @Override        public int compare(Integer[] o1, Integer[] o2) {            if (o1[0].compareTo(o2[0]) != 0)                return o1[0].compareTo(o2[0]);            if (!o1[1].equals(o2[1])) {                if (o1[1].equals(1))                    return -1;                else                    return 1;            } else                return 0;        }    }     public static void main(String[] args) throws Exception {        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));        String[] input = in.readLine().split(" ");         int n = Integer.parseInt(input[0]);        int m = Integer.parseInt(input[1]);         ArrayList<Integer[]> weight = new ArrayList<>(m);        ArrayList<Pair<Integer, Integer>> ans = new ArrayList<>();         for (int i = 0; i < m; i++) {            input = in.readLine().split(" ");            weight.add(new Integer[]{Integer.parseInt(input[0]), Integer.parseInt(input[1]), i});            ans.add(new Pair<>(0,0));        }         Collections.sort(weight, new CustomComparator());         int to = 2, from = 3, verticlesNum = 1;        boolean isPossible = true;         for (Integer[] currentE : weight) {            if (currentE[1] == 1){                verticlesNum++;                ans.set(currentE[2], new Pair<>(1,verticlesNum));            }            else {                if (verticlesNum < 3 || to == from && from == verticlesNum){                    isPossible = false;                    break;                } else if (to == from) {                    from++;                    to = 3;                    ans.set(currentE[2], new Pair<>(2, from));                } else {                    ans.set(currentE[2], new Pair<>(to, from));                    to++;                }            }        }         if (isPossible) {            for(int i = 0; i < m; i++)                System.out.println(ans.get(i).getKey() + " " + ans.get(i).getValue());        }        else {            System.out.println(-1);        }          }}
