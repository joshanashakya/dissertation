// 02-Mar-2021import java.util.*;import java.io.*; public class A {	static class FastReader { 		BufferedReader br;		StringTokenizer st; 		private FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		int[] nextIntArray(int n) {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		int[] nextIntArrayOne(int n) {			int[] a = new int[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextInt();			return a;		} 		long[] nextLongArray(int n) {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		long[] nextLongArrayOne(int n) {			long[] a = new long[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextLong();			return a;		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	public static void main(String[] args) {		FastReader s = new FastReader();		StringBuilder str = new StringBuilder(); 		int t = s.nextInt(); 		while (t-- > 0) {			int n = s.nextInt(), x = s.nextInt();									ArrayList<Pair> arr =  new ArrayList<>();			int maxPower = Integer.MIN_VALUE;			for(int i = 0; i < n; i++) {				int p = s.nextInt(), r = s.nextInt();				maxPower = Math.max(maxPower, p);				arr.add(new Pair(p,r,p - r));			}						Collections.sort(arr);						if(maxPower >= x) {				str.append("1\n");				continue;			}			if(arr.get(0).d <= 0) {								str.append("-1\n");				continue;			} 			int power = arr.get(0).a;			int damage = arr.get(0).d;			x -= maxPower;			int ans = (x + damage - 1) / damage;												str.append((ans + 1) + "\n");		}		System.out.println(str);	}		static class Pair implements Comparable<Pair>{		int a,b,d;		public Pair(int a,int b,int d) {			this.a= a;			this.b = b;			this.d = d;		}		@Override		public int compareTo(Pair o) {			Integer ths = this.d;			Integer other = o.d;			return other.compareTo(ths);		}		@Override		public String toString() {			// TODO Auto-generated method stub			return "{ " + this.a +" : " + this.b + ":" + d + "  }";		}	} }
