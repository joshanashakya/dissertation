import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def solve():	for _ in range(int(input())):		n,x= aj()		A = [];m =0		for i in range(n):			a,b = aj()			A.append((a - b,a,b))			m = max(m,a)		A.sort(reverse = True)		y = A[0][0]		if x <= m:			print(1)		elif y <= 0:			print(-1)		else:			step = 1 + math.ceil((x - m)/y)			print(step)		    try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
