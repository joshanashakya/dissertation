	import java.io.*;	import java.util.*;	public class CodeForces {		static int min =0;		public static void main(String[] args) throws Exception{			//Scanner input = new Scanner(System.in);			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));			String s  = br.readLine();			int test = Integer.parseInt(br.readLine());			StringBuilder sb = new StringBuilder();			HashMap<String,Integer>map = new HashMap<>();			while(test-->0){				String l[] = br.readLine().split(" ");				int score =0;				if(l[1].equals("posted"))score = 15;				if(l[1].equals("commented"))score = 10;				if(l[1].equals("likes"))score = 5;				String b = l[l.length-2].substring(0,l[l.length-2].length()-2);				if(l[0].equals(s) || b.equals(s)){					map.put(l[0],map.getOrDefault(l[0],0)+score);					map.put(b,map.getOrDefault(b,0)+score);				}else{					map.put(l[0], map.getOrDefault(l[0], 0));					map.put(b, map.getOrDefault(b, 0));				} 																	}			ArrayList<Pair> list = new ArrayList<Pair>();			for(Map.Entry<String, Integer> mp: map.entrySet()){				if(mp.getKey().equals(s))continue;				list.add(new Pair(mp.getKey(),mp.getValue()));				//System.out.println(mp.getKey()+" "+mp.getValue()); 			}			Comparator<Pair>cmp  = new Comparator<Pair>(){				public int compare(Pair a, Pair b){					if(a.score < b.score)return 1;					if(a.score > b.score)return -1;					if(a.a.compareTo(b.a)<0)return -1;					if(a.a.compareTo(b.a)>0)return 1;					return 0;				}			};			Collections.sort(list, cmp);			for(int i = 0;i<list.size();i++){				sb.append(list.get(i).a);				sb.append("\n");			}			System.out.println(sb);						}}class Pair{	String a;	int score;	public Pair(String a, int score){		this.a = a;		this.score = score;	}}		/*	1.make sure to include continue or return if u are handling a specific case separately!!!!	and check the constraints of every alphabet(missed to check for case 0)!!!!!!!!!		2.when u have transitions between states and its not dp try dfs (also think of topo sort)	 */
