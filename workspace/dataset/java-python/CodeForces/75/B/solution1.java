import java.io.*;import java.util.*; public class Solution {     public static void main(String[] args) {        // ranbir// 3// ranbir posted on katrina's wall// katrina commented on ranbir's post// deepika likes ranbir's post// "X posted on Y's wall" (15 points),// "X commented on Y's post" (10 points),// "X likes Y's post" (5 points).        HashMap<String,Integer> map = new HashMap<String, Integer>();        Scanner scan = new Scanner(System.in);        String myName = scan.nextLine();    //    display(myName);        int actions = scan.nextInt();    //    display(actions);        scan.nextLine();                        for( int i = 0; i < actions; i++) {            String[] posts = scan.nextLine().split(" ");     //       display2(posts);            String firstName = posts[0];                        //3rd case            if(posts.length == 4) {                                String secondName = posts[2].substring(0,posts[2].length()-2);                                if(firstName.equalsIgnoreCase(myName)) {                                     if((map.computeIfPresent(secondName,(key, val) -> val + 5)) == null )                            map.put(secondName, 5);                } else if (secondName.equalsIgnoreCase(myName)) {                        if((map.computeIfPresent(firstName,(key, val) -> val + 5)) == null )                                map.put(firstName, 5);                }                else {                        if((map.computeIfPresent(secondName,(key, val) -> val + 0)) == null )                            map.put(secondName, 0);                                            if((map.computeIfPresent(firstName,(key, val) -> val + 0)) == null )                                map.put(firstName, 0);                }//                 else {//                     if((map.computeIfPresent(secondName,(key, val) -> val + 5)) == null )//                             map.put(secondName, 5);                    //                     if((map.computeIfPresent(firstName,(key, val) -> val + 5)) == null )//                             map.put(firstName, 5); //                 }                            } else if (posts.length == 5) {                String secondName = posts[3].substring(0,posts[3].length()-2);                                if(firstName.equalsIgnoreCase(myName)) {                                     if((map.computeIfPresent(secondName,(key, val) -> val + ((posts[1].equalsIgnoreCase("posted"))?15:10))) == null )                            map.put(secondName, ((posts[1].equalsIgnoreCase("posted"))?15:10));                } else if (secondName.equalsIgnoreCase(myName)) {                        if((map.computeIfPresent(firstName,(key, val) -> val + ((posts[1].equalsIgnoreCase("posted"))?15:10))) == null )                                map.put(firstName, ((posts[1].equalsIgnoreCase("posted"))?15:10));                }                else {                        if((map.computeIfPresent(secondName,(key, val) -> val + 0)) == null )                            map.put(secondName, 0);                                            if((map.computeIfPresent(firstName,(key, val) -> val + 0)) == null )                                map.put(firstName, 0);                } //                 else {//                     if((map.computeIfPresent(secondName,(key, val) -> val + ((posts[1].equalsIgnoreCase("posted"))?15:10))) == null )//                             map.put(secondName, ((posts[1].equalsIgnoreCase("posted"))?15:10));                    //                     if((map.computeIfPresent(firstName,(key, val) -> val + ((posts[1].equalsIgnoreCase("posted"))?15:10))) == null )//                                 map.put(firstName, ((posts[1].equalsIgnoreCase("posted"))?15:10)); //                 }                             }          //  display(map);            }// for loop       HashMap<String, Integer> sortedKeyMap = sortByKey(map);               Map<String, Integer> sortedValueMap = sortByValue(sortedKeyMap);               sortedValueMap.forEach((key,value) -> System.out.println(key));                                scan.close();            }        public static void display(Object m) {                System.out.println("*" + m + "*");            }        public static void display2(Object[] m) {        for(Object a : m) {            System.out.print("*" + a + "*");        }        System.out.println("");            }        public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)     {         // Create a list from elements of HashMap         List<Map.Entry<String, Integer> > list =                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());                 // Sort the list         Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {             public int compare(Map.Entry<String, Integer> o1,                                 Map.Entry<String, Integer> o2)             {                 return (o2.getValue()).compareTo(o1.getValue());             }         });                   // put data from sorted list to hashmap          HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();         for (Map.Entry<String, Integer> aa : list) {             temp.put(aa.getKey(), aa.getValue());         }         return temp;     }             public static HashMap<String, Integer> sortByKey(HashMap<String, Integer> hm)     {         // Create a list from elements of HashMap         List<Map.Entry<String, Integer> > list =                new LinkedList<Map.Entry<String, Integer> >(hm.entrySet());                 // Sort the list         Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {             public int compare(Map.Entry<String, Integer> o1,                                 Map.Entry<String, Integer> o2)             {                 return (o1.getKey()).compareTo(o2.getKey());             }         });                   // put data from sorted list to hashmap          HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();         for (Map.Entry<String, Integer> aa : list) {             temp.put(aa.getKey(), aa.getValue());         }         return temp;     }  }
