import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.nio.file.Paths;import java.util.InputMismatchException;import java.util.TreeSet; public class Main { 	public Main() throws FileNotFoundException { //		File file = Paths.get("input.txt").toFile();//		if (file.exists()) {//			System.setIn(new FileInputStream(file));//		}		// long t = System.currentTimeMillis(); 		InputReader reader = new InputReader(); 		int ttt = reader.nextInt(); 		for (int tt = 0; tt < ttt; tt++) { 			int nr = reader.nextInt();			int ng = reader.nextInt();			int nb = reader.nextInt(); 			long[] r = new long[nr];			long[] g = new long[ng];			long[] b = new long[nb]; 			TreeSet<Long> setR = new TreeSet<>();			TreeSet<Long> setG = new TreeSet<>();			TreeSet<Long> setB = new TreeSet<>(); 			for (int i = 0; i < nr; i++) {				r[i] = reader.nextLong();				setR.add(r[i]);			}			for (int i = 0; i < ng; i++) {				g[i] = reader.nextLong();				setG.add(g[i]);			}			for (int i = 0; i < nb; i++) {				b[i] = reader.nextLong();				setB.add(b[i]);			} 			long res = Long.MAX_VALUE;			res = Math.min(res, solve(r, setG, setB));			res = Math.min(res, solve(r, setB, setG));			res = Math.min(res, solve(g, setR, setB));			res = Math.min(res, solve(g, setB, setR));			res = Math.min(res, solve(b, setG, setR));			res = Math.min(res, solve(b, setR, setG)); 			System.out.println(res); 		} 	} 	long solve(long[] a, TreeSet<Long> b, TreeSet<Long> c) { 		long result = Long.MAX_VALUE;		for (long aa : a) { 			Long lower = b.floor(aa);			Long upper = c.ceiling(aa); 			if (lower == null || upper == null) {				continue;			} 			result = Math.min(result, (aa - lower) * (aa - lower) + //					(aa - upper) * (aa - upper) + //					(lower - upper) * (lower - upper)); 		} 		return result;	} 	static class InputReader {		private byte[] buf = new byte[16384];		private int curChar;		private int numChars; 		public int read() {			if (numChars == -1)				throw new InputMismatchException();			if (curChar >= numChars) {				curChar = 0;				try {					numChars = System.in.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (numChars <= 0)					return -1;			}			return buf[curChar++];		} 		public String nextLine() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndOfLine(c));			return res.toString();		} 		public String nextString() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public long nextLong() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int nextInt() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int[] nextIntArray(int n) {			int[] arr = new int[n];			for (int i = 0; i < n; i++) {				arr[i] = nextInt();			}			return arr;		} 		public long[] nextLongArray(int n) {			long[] arr = new long[n];			for (int i = 0; i < n; i++) {				arr[i] = nextLong();			}			return arr;		} 		private boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		private boolean isEndOfLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	} 	public static void main(String[] args) throws FileNotFoundException {		new Main();	} }
