import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Arrays; public class Solution {    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int t = Integer.parseInt(br.readLine());        while(t-- > 0) {            br.readLine().split(" ");            Integer[] r = Arrays.stream(br.readLine().split(" ")).map(Integer::parseInt).sorted().toArray(Integer[]::new);            Integer[] g = Arrays.stream(br.readLine().split(" ")).map(Integer::parseInt).sorted().toArray(Integer[]::new);            Integer[] b = Arrays.stream(br.readLine().split(" ")).map(Integer::parseInt).sorted().toArray(Integer[]::new);             long ans = Math.min(solve(r,g,b), solve(g, r, b));            ans = Math.min(ans, solve(b, r, g));             //ans = Math.min(ans, solve(r,b, g));            //ans = Math.min(ans, solve(g, b, r));              //ans = Math.min(ans, solve(b, g, r));            System.out.println(ans);        }    }     private static long solve(Integer[] r, Integer[] g, Integer[] b) {        long ans = Long.MAX_VALUE;        for(Integer x: r) {            int i1 = Arrays.binarySearch(g, x);            int i2 = Arrays.binarySearch(b, x);             if (i1 < 0) {                i1 = -i1 - 1;                if (i1 == g.length) {                    i1--;                } else if (i1 > 0 && g[i1] - x > x - g[i1-1]) {                    i1--;                }            }             if (i2 < 0) {                i2 = -i2 - 1;                if (i2 == b.length) {                    i2--;                } else if (i2 > 0 && b[i2] - x > x - b[i2-1]) {                    i2--;                }            }             long result = getResult(x, g[i1], b[i2]);            ans = Math.min(ans, result);        }        return ans;    }     private static long getResult(Integer x, Integer y, Integer z) {        return s(x - y) + s(y - z) + s(z -x);    }     private static long s(int i) {        return 1L * i * i;    }}
