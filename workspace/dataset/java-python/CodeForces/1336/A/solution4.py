from sys import stdininput = stdin.readline def dfs():    size = [0]*n    parent = [0]*n    depth = [0]*n    marked = [False]*n    stack = [0]    while stack:        node = stack[-1]        if marked[node]:            stack.pop()            if node != 0:                size[parent[node]] += size[node] + 1            continue        marked[node] = True        for neighbor in tree[node]:            if neighbor == parent[node]:                continue            parent[neighbor] = node            depth[neighbor] = depth[node] + 1            stack.append(neighbor)    return (depth, size) n, k = [int(x) for x in input().split()]tree = [[] for _ in range(n)]for i in range(n-1):    u, v = [int(x) for x in input().split()]    tree[u-1].append(v-1)    tree[v-1].append(u-1)depth, size = dfs()ans = sum(sorted([depth[i] - size[i] for i in range(n)])[-k:])print(ans)
