import java.io.*;import java.util.*; public class Main {	static class FastReader{         BufferedReader br;         StringTokenizer st;         public FastReader(){br = new BufferedReader(new InputStreamReader(System.in));}        String next(){while (st == null || !st.hasMoreElements()){try{st = new StringTokenizer(br.readLine());}         catch (IOException  e){e.printStackTrace();}}return st.nextToken();}        int nextInt(){ return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}        String nextLine(){String str = ""; try{str = br.readLine(); } catch (IOException e) {e.printStackTrace();} return str; }     }	static FastReader sc = new FastReader();	static long mod = (long)(1e9+7);	static List<Integer> tre[];	public static void main (String[] args){        PrintWriter out = new PrintWriter(System.out);        int t = 1;//        t = sc.nextInt();        z :while(t-->0){        	int n = sc.nextInt();        	int k = sc.nextInt();        	tre = new ArrayList[n+1];        	for(int i=1;i<=n;i++) tre[i] = new ArrayList<>();        	for(int i=1;i<n;i++) {        		int u = sc.nextInt();        		int v = sc.nextInt();        		tre[u].add(v);        		tre[v].add(u);        	}        	long a[] = new long[n+1];        	long b[] = new long[n+1];        	a[1] = 0;        	dfs(1,1,a,b);        	for(int i=1;i<=n;i++) {        		a[i] = a[i] - b[i] + 1;        	}        	a[0] = Integer.MIN_VALUE;        	Arrays.sort(a);        	long val = 0;        	for(int i=0;i<k;i++) {        		val += a[a.length-1-i];        	}        	out.write(val+"\n");       	}		out.close();	}	private static void dfs(int node, int par, long[] a,long b[]) {		long chi = 0;		for(int adj : tre[node]) {			if(adj!=par) {				a[adj] = 1 + a[node];				dfs(adj,node,a,b);				chi += b[adj];			}		}		b[node] += 1 + chi;	}}
