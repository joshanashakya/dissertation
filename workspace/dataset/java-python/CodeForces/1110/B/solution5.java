import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.Comparator;import java.util.Objects;import java.util.PriorityQueue;import java.util.StringTokenizer;import java.util.function.BiFunction;import java.util.function.Function; public class Main {     static BiFunction<Integer, Integer, Integer> ADD = (x, y) -> (x + y);     static long[] data;    static Function<Pair<Integer, Integer>, Long> GET_KEY = (p) -> (data[p.second] - data[p.first] + 1);    static Comparator<Pair<Integer, Integer>> C = Comparator.comparing(GET_KEY).reversed();     public static void main(String[] args) throws Exception {        long startTime = System.nanoTime();        int t = 1;        while (t-- > 0) {            solve();        }        long endTime = System.nanoTime();        err.println("Execution Time : +" + (endTime - startTime) / 1000000 + " ms");        exit(0);    }     /**     * m segments => numbered from 1 to m     * each 1 cm long     * infinite tape     * cut tape and cover all broken segments.     * We want to cut at most k continuous pieces of tape.     * We need to minimize the length     * <p>     * Find 0 to k intervals with minimum difference of l and r     */     static void solve() {        int n = in.nextInt();        int m = in.nextInt();        int k = in.nextInt();        data = in.readAllLongs(n);        long[] diff = new long[n - 1];        for (int i = 0; i < n - 1; i++) {            diff[i] = data[i + 1] - data[i] - 1;        }        diff = ArrayUtils.MergeSort(diff);        long ans = n;        for (int i = 0; i < n - k; i++) {            ans += diff[i];        }        out.println(ans);    }     static void solveBKP() {        int n = in.nextInt();        int m = in.nextInt();        int k = in.nextInt();        data = in.readAllLongs(n);        long sol = 0;        Pair<Integer, Integer> f = make_pair(0, n - 1);        PriorityQueue<Pair<Integer, Integer>> Q = new PriorityQueue<>(C);        Q.add(f);        while (Q.size() < k) {            Pair<Integer, Integer> cur = Q.poll();            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> next = find(cur.first, cur.second);            Q.add(next.first);            Q.add(next.second);        }        out.println(Q);        while (!Q.isEmpty()) {            Pair<Integer, Integer> p = Q.poll();            out.println(data[p.second] + " " + data[p.first] + " " + (data[p.second] - data[p.first]));            sol += (data[p.second] - data[p.first] + 1);        }        out.println(sol);    }     static long getSum(Pair<Integer, Integer> p) {        return (data[p.second] - data[p.first] + 1);    }     static Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> find(int l, int r) {        long ans = Long.MAX_VALUE;        Pair<Integer, Integer> p = make_pair(-1, -1);        Pair<Integer, Integer> q = make_pair(-1, -1);        for (int i = l; i < r; i++) {            long left = (data[i] - data[l]) + 1;            long right = (data[r] - data[i + 1]) + 1;            long temp = left + right;            if (temp < ans) {                ans = temp;                p = make_pair(l, i);                q = make_pair(i + 1, r);            }        }        return make_pair(p, q);    }     static void debug(Object... args) {        for (Object a : args) {            out.println(a);        }    }     static void y() {        out.println("YES");    }     static void n() {        out.println("NO");    }     static void fail() {        out.println("-1");        exit(0);    }     static class Pair<T, R> {        public T first;        public R second;         public Pair(T first, R second) {            this.first = first;            this.second = second;        }         @Override        public boolean equals(final Object o) {            if (this == o) {                return true;            }            if (o == null || getClass() != o.getClass()) {                return false;            }            final Pair<?, ?> pair = (Pair<?, ?>) o;            return Objects.equals(first, pair.first) && Objects.equals(second, pair.second);        }         @Override        public int hashCode() {            return Objects.hash(first, second);        }         @Override        public String toString() {            return "Pair{" + "a=" + first + ", b=" + second + '}';        }         public T getFirst() {            return first;        }         public R getSecond() {            return second;        }    }     static <T, R> Pair<T, R> make_pair(T a, R b) {        return new Pair<>(a, b);    }     static class ArrayUtils {         static int[] reverse(int[] data) {            int[] p = new int[data.length];            for (int i = 0, j = data.length - 1; i < data.length; i++, j--) {                p[i] = data[j];            }            return p;        }         static void prefixSum(long[] data) {            for (int i = 1; i < data.length; i++) {                data[i] += data[i - 1];            }        }         static void prefixSum(int[] data) {            for (int i = 1; i < data.length; i++) {                data[i] += data[i - 1];            }        }         static long[] reverse(long[] data) {            long[] p = new long[data.length];            for (int i = 0, j = data.length - 1; i < data.length; i++, j--) {                p[i] = data[j];            }            return p;        }         static char[] reverse(char[] data) {            char[] p = new char[data.length];            for (int i = 0, j = data.length - 1; i < data.length; i++, j--) {                p[i] = data[j];            }            return p;        }         static int[] MergeSort(int[] A) {            if (A.length > 1) {                int q = A.length / 2;                int[] left = new int[q];                int[] right = new int[A.length - q];                System.arraycopy(A, 0, left, 0, q);                System.arraycopy(A, q, right, 0, A.length - q);                int[] left_sorted = MergeSort(left);                int[] right_sorted = MergeSort(right);                return Merge(left_sorted, right_sorted);            } else {                return A;            }        }         static int[] Merge(int[] left, int[] right) {            int[] A = new int[left.length + right.length];            int i = 0;            int j = 0;            for (int k = 0; k < A.length; k++) {                // To handle left becoming empty                if (i == left.length && j < right.length) {                    A[k] = right[j];                    j++;                    continue;                }                // To handle right becoming empty                if (j == right.length && i < left.length) {                    A[k] = left[i];                    i++;                    continue;                }                if (left[i] <= right[j]) {                    A[k] = left[i];                    i++;                } else {                    A[k] = right[j];                    j++;                }            }            return A;        }         static long[] MergeSort(long[] A) {            if (A.length > 1) {                int q = A.length / 2;                long[] left = new long[q];                long[] right = new long[A.length - q];                System.arraycopy(A, 0, left, 0, q);                System.arraycopy(A, q, right, 0, A.length - q);                long[] left_sorted = MergeSort(left);                long[] right_sorted = MergeSort(right);                return Merge(left_sorted, right_sorted);            } else {                return A;            }        }         static long[] Merge(long[] left, long[] right) {            long[] A = new long[left.length + right.length];            int i = 0;            int j = 0;            for (int k = 0; k < A.length; k++) {                // To handle left becoming empty                if (i == left.length && j < right.length) {                    A[k] = right[j];                    j++;                    continue;                }                // To handle right becoming empty                if (j == right.length && i < left.length) {                    A[k] = left[i];                    i++;                    continue;                }                if (left[i] <= right[j]) {                    A[k] = left[i];                    i++;                } else {                    A[k] = right[j];                    j++;                }            }            return A;        }    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public long nextLong() {            return Long.parseLong(next());        }         public int nextInt() {            return Integer.parseInt(next());        }         public int[] readAllInts(int n) {            int[] p = new int[n];            for (int i = 0; i < n; i++) {                p[i] = in.nextInt();            }            return p;        }         public int[] readAllInts(int n, int s) {            int[] p = new int[n + s];            for (int i = s; i < n + s; i++) {                p[i] = in.nextInt();            }            return p;        }         public long[] readAllLongs(int n) {            long[] p = new long[n];            for (int i = 0; i < n; i++) {                p[i] = in.nextLong();            }            return p;        }         public long[] readAllLongs(int n, int s) {            long[] p = new long[n + s];            for (int i = s; i < n + s; i++) {                p[i] = in.nextLong();            }            return p;        }         public double nextDouble() {            return Double.parseDouble(next());        }    }     static void exit(int a) {        out.close();        err.close();        System.exit(a);    }     static InputStream inputStream = System.in;    static OutputStream outputStream = System.out;    static OutputStream errStream = System.err;    static InputReader in = new InputReader(inputStream);    static PrintWriter out = new PrintWriter(outputStream);    static PrintWriter err = new PrintWriter(errStream);    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); }
