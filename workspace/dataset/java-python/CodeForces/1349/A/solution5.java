import java.util.*;import java.lang.*;public class divgame {    public static ArrayList<Integer> getPrimes(int n) {        ArrayList<Integer> primes = new ArrayList<>();        boolean first = true;        while (n % 2 == 0) {            n /= 2;            if (first) {                primes.add(2);                first = false;            }        }        for (int i = 3; i <= Math.sqrt(n); i++) {            first = true;            while (n % i == 0) {                n /= i;                if(first){                    primes.add(i);                    first = false;                }            }        }        if (n > 1) primes.add(n);        return primes;    }    public static int maxPower(int n, int p) {        int c = 0;        while (n % p == 0) {            c++;            n /= p;        }        return c;    }    public static int gcd(int a, int b) {        if (b == 0) return a;        return gcd(b, a % b);    }    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        // a prime does not matter if there exists two numbers in array not divisible by prime        // all the primes that we need to consider must be in the first two integers        int n = sc.nextInt();        ArrayList<Integer> primes = new ArrayList<>();        int[] arr = new int[n];        for (int i = 0; i < n; i++) {            arr[i] = sc.nextInt();        }         primes.addAll(getPrimes(arr[0]));        primes.addAll(getPrimes(arr[1]));        Set<Integer> set = new HashSet<>(primes);        primes.clear();        primes.addAll(set);        Collections.sort(primes);         Integer[] primesArr = primes.toArray(new Integer[0]);        long ans = 1;        for (Integer integer : primesArr) {            int[] constructor = new int[n];            for (int j = 0; j < n; j++) {                constructor[j] = maxPower(arr[j], integer);            }            Arrays.sort(constructor);            ans *= Math.pow(integer, constructor[1]);        }        System.out.println(ans);     }}
