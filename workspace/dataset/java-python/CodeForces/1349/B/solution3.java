import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int t = in.nextInt();        Main m = new Main();        while (t-- > 0) {            m.run(in, out);        }        out.close();    }     public static long mod = 17352642619633L;     int N;    int K;    int[] a = new int[100_001];    void run(FastScanner in, PrintWriter out) {         N = in.nextInt();        K = in.nextInt();         boolean allGood = true;        boolean hasK = false;         for (int i = 0; i < N; i++) {            a[i] = in.nextInt();            allGood &= a[i] == K;            hasK |= a[i] == K;        }         if (allGood) {            out.println("yes");            return;        }        if (!hasK) {            out.println("no");            return;        }         // basically we want at least two consec K,s then we can extend        // if we can find a seq with K median with len >= 2        // if we can find a seq with M=K+e median, ten we can extend until a K        // then we have [M,K], and we can extend from there         for (int i = 0; i < N; i++) {            if (a[i] < K) continue;             if (i-1 >= 0 && a[i-1] >= K) {                out.println("yes");                return;            }            if (i-2 >= 0 && a[i-2] >= K) {                out.println("yes");                return;            }        }         out.println("no");    }      static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
