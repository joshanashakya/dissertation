import java.io.*;import java.util.*;import java.util.Map.Entry; import static java.lang.Math.min; /** * Created by Katushka on 11.03.2020. */public class B {    static int[] readArray(int size, InputReader in) {        int[] a = new int[size];        for (int i = 0; i < size; i++) {            a[i] = in.nextInt();        }        return a;    }     static long[] readLongArray(int size, InputReader in) {        long[] a = new long[size];        for (int i = 0; i < size; i++) {            a[i] = in.nextLong();        }        return a;    }     private static void outputArray(int[] ans, PrintWriter out) {        StringBuilder str = new StringBuilder();        for (int an : ans) {            str.append(an).append(' ');        }        out.println(str);    }     static long[] sortArray(long[] a) {        Random random = new Random();        long[] b = Arrays.copyOf(a, a.length);         for (int i = 0; i < b.length; i++) {            int randomPos = random.nextInt(b.length);            long t = b[i];            b[i] = b[randomPos];            b[randomPos] = t;        }        Arrays.sort(b);        return b;    }     static int binSearchLeft(long[] list, long key) {        int l = -1;        int r = list.length;        while (l < r - 1) {            int m = (l + r) / 2;            if (list[m] < key) {                l = m;            } else {                r = m;            }        }        return r;    }     public static void main(String[] args) {        InputReader in = new InputReader(System.in);        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int t = in.nextInt();        outer:        for (int ii = 0; ii < t; ii++) {            int n = in.nextInt();            long k = in.nextInt();            long[] a = readLongArray(n, in);             boolean found = false;            for (long ai : a) {                if (ai == k) {                    found = true;                    break;                }            }            if (!found) {                out.println("no");                continue;            }             long[] a_sorted = sortArray(a);            int ind = binSearchLeft(a_sorted, k);             if (ind + 1 <= (n + 1) / 2) {                out.println("yes");                continue;            }             long s = 0;            int j = 0;            for (int i = 0; i < n; i++) {                if (a[i] >= k) {                    s += 1;                } else {                    s -= 1;                }                if (s < 0) {                    j = i + 1;                    s = 0;                }                 if (s >= 1 && i > j)  {                    out.println("yes");                    continue outer;                }            }              out.println("no");        }         out.close();      }      private static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextString() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public char nextChar() {            return next().charAt(0);        }    }}
