import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictinput = iter(sys.stdin.buffer.read().decode().splitlines()).__next__Neo = lambda : list(map(int,input().split()))# test, = Neo()def dijakstra(weight,k):    heap = [(0,k)]    heapify(heap)    dist = defaultdict(tuple)    while heap:        cost,u = heappop(heap)        if u not in dist:            dist[u] = cost            for v in weight[u]:                heappush(heap,(dist[u]+weight[u][v],v))    return dist  Â n,m = Neo()G1,G2 = defaultdict(dict),defaultdict(dict)s = set()for i in range(m):    u,v = Neo()    G1[u][v] = 1    G1[v][u] = 1    s.add((u,v))    s.add((v,u))for i in range(1,n+1):    for j in range(i+1,n+1):        if (i,j) not in s:            G2[i][j] = 1            G2[j][i] = 1if (1,n) in s:    dist = dijakstra(G2,1)    if n not in dist:        print(-1)    else:            print(dist[n])else:     dist = dijakstra(G1,1)    if n not in dist:        print(-1)    else:            print(dist[n])
