import java.io.*;import java.util.*;import java.util.*;import java.math.*;public class Euler { 	static FastReader in;	static PrintWriter o;	static int[][] graph1;	static int[][] graph2; 	public static void solve() {		int n = in.nextInt();		int m = in.nextInt();		graph1 = new int[n][n];		graph2 = new int[n][n];		for (int i = 0; i < m; i++) {			int u = in.nextInt();			int v = in.nextInt();			u--;			v--;			graph1[u][v] = 1;			graph1[v][u] = 1;		}		for (int i = 0; i < n; i++) {			for (int j = 0;j < n; j++) {				if (i !=  j && graph1[i][j] == 0) {					graph2[i][j] = 1;				}			}		}		int dist1 = 0;		int dist2 = 0;		if (graph1[0][n-1] == 1) {			dist1 = 1;			dist2 = shortestDistance(graph2, n);		} else {			dist1 = shortestDistance(graph1, n);			dist2 = 1;		} 		if (dist1 == Integer.MAX_VALUE || dist2 == Integer.MAX_VALUE) {			o.println("-1");		} else {			o.println(Math.max(dist1, dist2));		}		o.close();		return;	} 	public static int shortestDistance(int[][] graph, int n) {		Queue<Integer> queue = new LinkedList<>();		queue.add(0);		int[] dist = new int[n];		boolean[] visited = new boolean[n];		Arrays.fill(dist, Integer.MAX_VALUE);		dist[0] = 0;		while (!queue.isEmpty()) {			int x = queue.poll();			if (x == n - 1) {				break;			}			for (int i = 0; i < n; i++) {				if (graph[x][i] == 1 && !visited[i]) {					dist[i] = Math.min(dist[i], 1 + dist[x]);					visited[i] = true;					queue.add(i);				}			}		}		return dist[n-1];	}   	public static void main(String[] args) {		in = new FastReader();		o = new PrintWriter(System.out);		solve();		return;	} 	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		int[] readArray(int n) {			int[] a = new int[n];			for (int i = 0; i < n; i++) a[i] = nextInt();			return a;		} 		long[] readLongArray(int n) {			long[] a = new long[n];			for (int i = 0; i < n; i++) a[i] = nextLong();			return a;		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} }
