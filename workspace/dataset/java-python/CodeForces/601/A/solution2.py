import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def solve():	G = defaultdict(list) 	def addEdge(a,b):		G[a].append(b)		G[b].append(a) 	H = defaultdict(list) 	def bfs(R,n):		d = deque()		vis = [False]*(n+1)		d.append((1,0))		vis[1] = True		while d:			x,y = d.popleft()			if x == n:				return y			for i in R.get(x,[]):				if not vis[i]:					vis[i] = True					d.append((i,y+1))		print(-1)		exit(0) 	n,m =aj()	city = {i for i in range(1,n+1)}	for i in range(m):	    u,v = aj()	    addEdge(u,v)	for i in range(1,n+1):		H[i] = city - set(G.get(i,[]))	print(max(bfs(G,n),bfs(H,n)))		 try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
