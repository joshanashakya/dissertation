import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BLipshitzSequence solver = new BLipshitzSequence();            solver.solve(1, in, out);            out.close();        }    }     static class BLipshitzSequence {        int[] delta;        IntegerSparseTable st;         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int q = in.ri();            int[] a = new int[n];            in.populate(a);            delta = new int[n - 1];            for (int i = 0; i < n - 1; i++) {                delta[i] = Math.abs(a[i + 1] - a[i]);            }            st = new IntegerSparseTable(i -> i, n - 1, (x, y) -> delta[x] >= delta[y] ? x : y);            for (int i = 0; i < q; i++) {                int l = in.ri() - 1;                int r = in.ri() - 1;                long ans = solve(l, r);                out.println(ans);            }        }         public long solve(int l, int r) {            if (l == r) {                return 0;            }            int index = st.query(l, r - 1);            long left = index - l + 1;            long right = r - (index + 1) + 1;            long ans = left * right * delta[index];            ans += solve(l, index);            ans += solve(index + 1, r);            return ans;        }     }     static class IntegerSparseTable {        private int[][] st;        private IntegerBinaryFunction merger;         public IntegerSparseTable(IntToIntegerFunction function, int length, IntegerBinaryFunction merger) {            int m = Log2.floorLog(length);            st = new int[m + 1][length];            this.merger = merger;            for (int i = 0; i < length; i++) {                st[0][i] = function.apply(i);            }            for (int i = 0; i < m; i++) {                int interval = 1 << i;                for (int j = 0; j < length; j++) {                    if (j + interval < length) {                        st[i + 1][j] = merge(st[i][j], st[i][j + interval]);                    } else {                        st[i + 1][j] = st[i][j];                    }                }            }        }         private int merge(int a, int b) {            return merger.apply(a, b);        }         public int query(int left, int right) {            int queryLen = right - left + 1;            int bit = Log2.floorLog(queryLen);            // x + 2^bit == right + 1            // So x should be right + 1 - 2^bit - left=queryLen - 2^bit            return merge(st[bit][left], st[bit][right + 1 - (1 << bit)]);        }         public String toString() {            return Arrays.toString(st[0]);        }     }     static interface IntegerBinaryFunction {        int apply(int a, int b);     }     static class Log2 {        public static int floorLog(int x) {            if (x <= 0) {                throw new IllegalArgumentException();            }            return 31 - Integer.numberOfLeadingZeros(x);        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         public void populate(int[] data) {            for (int i = 0; i < data.length; i++) {                data[i] = readInt();            }        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static interface IntToIntegerFunction {        int apply(int x);     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(long c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(long c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
