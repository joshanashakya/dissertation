import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Stack;import java.util.StringTokenizer; public class CF601B {    public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt(), q = sc.nextInt();        int[] arr = new int[n];        for (int i = 0; i < n; i++)            arr[i] = sc.nextInt();         int[][] lr = preprocess(arr);        for (int i = 0; i < q; i++)            pw.println(solve(arr, lr[0], lr[1], sc.nextInt() - 1, sc.nextInt() - 1));         pw.close();        sc.close();    }     public static int[][] preprocess(int[] arr) {        int n = arr.length;        int[] l = new int[n], r = new int[n];         Stack<Integer> s = new Stack<Integer>();        for (int i = 0; i < n - 1; i++) {            int diff = Math.abs(arr[i] - arr[i + 1]);            int j;            while (!s.isEmpty() && diff > Math.abs(arr[j = s.peek()] - arr[j + 1]))                s.pop();            l[i] = s.isEmpty() ? 0 : s.peek() + 1;            s.push(i);        }        s = new Stack<Integer>();        for (int i = n - 2; i >= 0; i--) {            int diff = Math.abs(arr[i] - arr[i + 1]);            int j;            while (!s.isEmpty() && diff >= Math.abs(arr[j = s.peek()] - arr[j + 1]))                s.pop();            r[i] = s.isEmpty() ? n - 1 : s.peek();            s.push(i);        }        return new int[][] { l, r };    }     public static long solve(int[] arr, int[] l, int[] r, int from, int to) {        long sum = 0;        for (int i = from; i < to; i++) {            long l1 = Math.max(from, l[i]);            long r1 = Math.min(to, r[i]);            long subarraysCnt = (i - l1 + 1) * (r1 - i);            // System.out.printf("i: %d, l: %d, r: %d, subs: %d\n", i, l1, r1,            // subarraysCnt);            sum += Math.abs(arr[i] - arr[i + 1]) * subarraysCnt;        }        return sum;    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
