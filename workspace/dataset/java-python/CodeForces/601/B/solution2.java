/** * author: derrick20 * created: 12/22/20 9:07 PM */import java.io.*;import java.util.*;import static java.lang.Math.*; public class LipschitzSequenceMaxIslands {    public static void main(String[] args) {        FastScanner sc = new FastScanner();        PrintWriter out = new PrintWriter(System.out);                int N = sc.nextInt();        int Q = sc.nextInt();        int[] a = new int[N];        int[] diff = new int[N - 1];        Arrays.setAll(a, i -> sc.nextInt());        Arrays.setAll(diff, i -> abs(a[i + 1] - a[i]));        int[][] bounds = new int[2][N];        ArrayDeque<Integer> decr = new ArrayDeque<>();        for (int i = 0; i < N - 1; i++) {            // want first to left we are <=            while (decr.size() > 0 && diff[i] > diff[decr.getLast()]) {                decr.pollLast();            }            bounds[0][i] = decr.size() == 0 ? -1 : decr.getLast();            decr.add(i);        }        decr.clear();        for (int i = N - 2; i >= 0; i--) {            // want first to right we are <            while (decr.size() > 0 && diff[i] >= diff[decr.getLast()]) {                decr.pollLast();            }            bounds[1][i] = decr.size() == 0 ? N - 1 : decr.getLast();            decr.add(i);        }//        System.out.println(Arrays.toString(bounds[0]));//        System.out.println(Arrays.toString(bounds[1]));        for (int q = 0; q < Q; q++) {            int l = sc.nextInt() - 1;            int r = sc.nextInt() - 1 - 1;            // Querying from l to r - 1. except allowing ranges of size 1            long ans = 0;            for (int m = l; m <= r; m++) {                long left = m - max(bounds[0][m], l - 1);                long right = min(bounds[1][m], r + 1) - m;//                System.out.println(left + " " + right);                ans += diff[m] * right * left;            }            out.println(ans);        }        out.close();    }     static class FastScanner {        private int BS = 1 << 16;        private char NC = (char) 0;        private byte[] buf = new byte[BS];        private int bId = 0, size = 0;        private char c = NC;        private double cnt = 1;        private BufferedInputStream in;            public FastScanner() {            in = new BufferedInputStream(System.in, BS);        }            public FastScanner(String s) {            try {                in = new BufferedInputStream(new FileInputStream(new File(s)), BS);            } catch (Exception e) {                in = new BufferedInputStream(System.in, BS);            }        }            char getChar() {            while (bId == size) {                try {                    size = in.read(buf);                } catch (Exception e) {                    return NC;                }                if (size == -1) return NC;                bId = 0;            }            return (char) buf[bId++];        }            int nextInt() {            return (int) nextLong();        }            long nextLong() {            cnt = 1;            boolean neg = false;            if (c == NC) c = getChar();            for (; (c < '0' || c > '9'); c = getChar()) {                if (c == '-') neg = true;            }            long res = 0;            for (; c >= '0' && c <= '9'; c = getChar()) {                res = (res << 3) + (res << 1) + c - '0';                cnt *= 10;            }            return neg ? -res : res;        }            double nextDouble() {            boolean neg = false;            if (c == NC) c = getChar();            for (; (c < '0' || c > '9'); c = getChar()) {                if (c == '-') neg = true;            }            double cur = nextLong();            if (c != '.') {                return neg ? -cur : cur;            } else {                double frac = nextLong() / cnt;                return neg ? -cur - frac : cur + frac;            }        }            String next() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c > 32) {                res.append(c);                c = getChar();            }            return res.toString();        }            String nextLine() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c != '\n') {                res.append(c);                c = getChar();            }            return res.toString();        }            boolean hasNext() {            if (c > 32) return true;            while (true) {                c = getChar();                if (c == NC) return false;                else if (c > 32) return true;            }        }    }    static void ASSERT(boolean assertion, String message) {        if (!assertion) throw new AssertionError(message);    }    static void ASSERT(boolean assertion) {        if (!assertion) throw new AssertionError();    }}
