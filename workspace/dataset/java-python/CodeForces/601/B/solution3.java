/** * author: derrick20 * created: 12/22/20 6:51 PM */import java.io.*;import java.util.*;import static java.lang.Math.*; public class LipschitzSequence {    public static void main(String[] args) {        FastScanner sc = new FastScanner();        PrintWriter out = new PrintWriter(System.out);                int N = sc.nextInt();        int Q = sc.nextInt();        int[] a = new int[N];        Arrays.setAll(a, i -> sc.nextInt());        for (int q = 0; q < Q; q++) {            int l = sc.nextInt() - 1;            int r = sc.nextInt() - 1;            ArrayDeque<Bound> dq = new ArrayDeque<>();            long ans = 0;            long total = 0;            for (int ix = l + 1; ix <= r; ix++) {                Bound next = new Bound(ix - 1, ix, abs(a[ix] - a[ix - 1]));                while (dq.size() > 0 && dq.getLast().lipschitz <= next.lipschitz) {                    Bound last = dq.pollLast();                    total -= last.lipschitz * (last.r - last.l);                    next.l = last.l;                }                dq.add(next);                total += next.lipschitz * (next.r - next.l);                ans += total;            }            out.println(ans);        }        out.close();    }     static class Bound {        int l, r;        long lipschitz;        public Bound(int left, int right, int lipschitzConstant) {            l = left; r = right; lipschitz = lipschitzConstant;        }    }     static class FastScanner {        private int BS = 1 << 16;        private char NC = (char) 0;        private byte[] buf = new byte[BS];        private int bId = 0, size = 0;        private char c = NC;        private double cnt = 1;        private BufferedInputStream in;            public FastScanner() {            in = new BufferedInputStream(System.in, BS);        }            public FastScanner(String s) {            try {                in = new BufferedInputStream(new FileInputStream(new File(s)), BS);            } catch (Exception e) {                in = new BufferedInputStream(System.in, BS);            }        }            char getChar() {            while (bId == size) {                try {                    size = in.read(buf);                } catch (Exception e) {                    return NC;                }                if (size == -1) return NC;                bId = 0;            }            return (char) buf[bId++];        }            int nextInt() {            return (int) nextLong();        }            long nextLong() {            cnt = 1;            boolean neg = false;            if (c == NC) c = getChar();            for (; (c < '0' || c > '9'); c = getChar()) {                if (c == '-') neg = true;            }            long res = 0;            for (; c >= '0' && c <= '9'; c = getChar()) {                res = (res << 3) + (res << 1) + c - '0';                cnt *= 10;            }            return neg ? -res : res;        }            double nextDouble() {            boolean neg = false;            if (c == NC) c = getChar();            for (; (c < '0' || c > '9'); c = getChar()) {                if (c == '-') neg = true;            }            double cur = nextLong();            if (c != '.') {                return neg ? -cur : cur;            } else {                double frac = nextLong() / cnt;                return neg ? -cur - frac : cur + frac;            }        }            String next() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c > 32) {                res.append(c);                c = getChar();            }            return res.toString();        }            String nextLine() {            StringBuilder res = new StringBuilder();            while (c <= 32) c = getChar();            while (c != '\n') {                res.append(c);                c = getChar();            }            return res.toString();        }            boolean hasNext() {            if (c > 32) return true;            while (true) {                c = getChar();                if (c == NC) return false;                else if (c > 32) return true;            }        }    }    static void ASSERT(boolean assertion, String message) {        if (!assertion) throw new AssertionError(message);    }    static void ASSERT(boolean assertion) {        if (!assertion) throw new AssertionError();    }}
