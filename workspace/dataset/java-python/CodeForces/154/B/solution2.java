//import javafx.util.Pair; import java.io.*;import java.text.DecimalFormat;import java.util.*; public class GeOlymp{     public static void main(String[] args) throws FileNotFoundException {         //Scanner scn = new Scanner(new File("/home/bubu/Bubu/MACS/OOP/exam/src/sum.in"));         //PrintWriter out = new PrintWriter(new File("/home/bubu/Bubu/MACS/OOP/exam/src/sum.out"));         //Scanner scn = new Scanner(new File("forcycle.in"));         //PrintWriter out = new PrintWriter(new File("forcycle.out"));         /*long n = scn.nextLong();         long m = scn.nextLong();         long tots = (m*(m+1))/2 - 1;         long result = tots*(n/m) + ((n%m)*((n%m)+1))/2;*/         //out.println(result);         //out.close();          Scanner sc = new Scanner(System.in);         PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int n = sc.nextInt(); //colliders         int m = sc.nextInt(); //requests         sc.nextLine();         int[] divisors = new int[n+1];         int[] status = new int[n+1]; //onoff         HashMap<Integer, ArrayList<Integer> > primedivisors = new HashMap<>();         for(int i=2; i<=n; i++){             primedivisors.put(i, new ArrayList<>());         }          for(int i=2; i<=n; i++){            if(divisors[i] == 0){                for(int j=i; j<=n; j+=i){                    ++divisors[j];                    primedivisors.get(j).add(i);                }            }         }          for(int i=0; i<m; i++){             String[] next = sc.nextLine().split(" ");             int cNum = Integer.parseInt(next[1]);             ArrayList<Integer> primeDivs = primedivisors.get(cNum);             if(next[0].equals("-")){                if(status[cNum] == 0 || status[cNum] != cNum) {                    out.println("Already off");                } else {                    status[cNum] = 0;                    if(cNum != 1) {                        for (int j = 0; j < primeDivs.size(); j++)                            status[primeDivs.get(j)] = 0;                    }                    out.println("Success");                }             } else if(next[0].equals("+")){                 if(status[cNum] != 0 && status[cNum] == cNum) {                     out.println("Already on");                 } else {                    boolean conflict = false;                    int confCol = -1;                     if(cNum != 1) {                        for (int j = 0; j < primeDivs.size(); j++) {                            if (status[primeDivs.get(j)] > 0) {                                conflict = true;                                confCol = status[primeDivs.get(j)]; //shecdoma maq                                break;                            }                        }                    }                    /*if(cNum != 1) {                        for (int j = 2; j <= n; j++) {                            if (status[j] == 1) {                                ArrayList<Integer> primeDivs2 = primedivisors.get(j);                                 if(primeDivs.retainAll(primeDivs2)) { //es mchedavs droshi                                        conflict = true;                                        confCol = j;                                        break;                                }                            }                        }                    }*/                     if(conflict){                        out.println("Conflict with " + confCol);                    } else {                        status[cNum] = cNum;                        if(cNum != 1) {                            for (int j = 0; j < primeDivs.size(); j++)                                status[primeDivs.get(j)] = cNum;                        }                        out.println("Success");                    }                 }             }         }         out.close();     }     static class Pair{        int first;        int second;         public Pair(int a, int b){            first=a;            second=b;        }        public int getKey(){ return first;}        public int getValue(){ return second;}    }}
