								import java.math.BigInteger;								import java.sql.Array;							    import java.util.ArrayList;								import java.util.Arrays;								import java.util.Collection;								import java.util.Collections;								import java.util.Comparator;								import java.util.HashMap;								import java.util.InputMismatchException;								import java.util.Iterator;								import java.util.LinkedHashSet;								import java.util.LinkedList;								import java.util.List;								import java.util.Map;								import java.util.Map.Entry;									import java.util.PriorityQueue;								import java.util.Queue;								import java.util.Scanner;								import java.util.Set;								import java.util.Stack;								import java.io.BufferedReader;								import java.io.IOException;								import java.io.InputStream;								import java.io.InputStreamReader;								import java.util.Scanner;								import java.util.StringTokenizer;								import java.util.TreeMap;								import java.util.TreeSet;																public class Main {																																				static InputReader rd=new InputReader(System.in);									public static void main(String[] args) {										Scanner sc=new Scanner(System.in);																				int n=sc.nextInt();									long m=sc.nextLong();										long l=sc.nextLong();																														int t=0;																			//System.out.println("dad");																				ArrayList<Long> A=new ArrayList<>();																				for(int i=0;i<n;i++)A.add(sc.nextLong());																														for(int i=0;i<n;i++) {																						if(A.get(i)>l) {												t++;												while(i<n&&A.get(i)>l)i++;																							}																					}										//System.out.println("dada");																				while(m-->0) {											long k=sc.nextLong();																						if(k==1) {																																																											int p=sc.nextInt();												long d=sc.nextLong();																								//System.out.println("dad");												if(A.get(p-1)<=l&&A.get(p-1)+(long)d>l)												{																										//	System.out.println(p+" "+d+" "+((p-2>=0&&A.get(p-2)>l)&&(p<n&&A.get(p)>l)));														if((p-2>=0&&A.get(p-2)>l)&&(p<n&&A.get(p)>l))t--;														else if (p-2>=0&&A.get(p-2)>l);														else if (p<n&&A.get(p)>l) ;														else t++;																																																			}														A.set(p-1, A.get(p-1)+d);																								//System.out.println("ddd");																																																											}											else System.out.println(t);																						//System.out.println(A+" "+t);																																}																													//	System.out.println("ddd");										}																		static	boolean isPresent(int j,int p) {																				int i=(j/50)%475;																				for(int k=0;k<25;k++) {										    i = (i * 96 + 42)% 475;										    if(26+i==p)return true;											}										return false;																			}																										static class Helper{										int val;int index;										public Helper(int  val,int index) {																						this.val=val;											this.index=index;											// TODO Auto-generated constructor stub										}									}																																					    static boolean isPrime(int n) 								    { 								        // Corner cases 								        if (n <= 1) 								            return false; 								        if (n <= 3) 								            return true; 								  								        // This is checked so that we can skip 								        // middle five numbers in below loop 								        if (n % 2 == 0 || n % 3 == 0) 								            return false; 								  								        for (int i = 5; i * i <= n; i = i + 6) 								            if (n % i == 0 || n % (i + 2) == 0) 								                return false; 								  								        return true; 								    } 																      									    /* Iterative Function to calculate 									       (x^y)%p in O(log y) */									    static long power(long x, long y, long p) 									    { 									        // Initialize result 									        long res = 1;      									         									        // Update x if it is more   									        // than or equal to p 									        x = x % p;  									  									       if (x == 0) return 0; // In case x is divisible by p;    									  									        while (y > 0) 									        { 									            // If y is odd, multiply x 									            // with result 									            if((y & 1)==1) 									                res = (res * x) % p; 									      									            // y must be even now 									            // y = y / 2 									            y = y >> 1;  									            x = (x * x) % p;  									        } 									        return res; 									    } 																																										  static class InputReader {									        private InputStream stream;									        private byte[] buf = new byte[1024];									        private int curChar;									        private int numChars;									        private SpaceCharFilter filter;																	        public InputReader(InputStream stream) {									            this.stream = stream;									        }																	        public int read() {									            if (numChars == -1)									                throw new InputMismatchException();									            if (curChar >= numChars) {									                curChar = 0;									                try {									                    numChars = stream.read(buf);									                } catch (IOException e) {									                    throw new InputMismatchException();									                }									                if (numChars <= 0)									                    return -1;									            }									            return buf[curChar++];									        }																	        public int readInt() {									            int c = read();									            while (isSpaceChar(c))									                c = read();									            int sgn = 1;									            if (c == '-') {								    sgn = -1;								    c = read();								}								int res = 0;								do {								    if (c < '0' || c > '9')								        throw new InputMismatchException();								    res *= 10;								    res += c - '0';								        c = read();								    } while (!isSpaceChar(c));								    return res * sgn;								}																public String readString() {								    int c = read();								    while (isSpaceChar(c))								        c = read();								    StringBuilder res = new StringBuilder();								    do {								        res.appendCodePoint(c);								        c = read();								    } while (!isSpaceChar(c));								    return res.toString();								}																public boolean isSpaceChar(int c) {								    if (filter != null)								        return filter.isSpaceChar(c);								    return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;									        }																	        public String next() {									            return readString();									        }																	    }																		  public interface SpaceCharFilter {									        public boolean isSpaceChar(int ch);									    }																																																																																																}								    
