import java.util.*;public class SuffixStructures  {    public static void main(String args[]){        Scanner sc= new Scanner(System.in);        String s=sc.next();        String t=sc.next();        HashMap<Character,Integer>smap=new HashMap<>();        HashMap<Character,Integer>tmap=new HashMap<>();        for(int i=0;i<s.length();i++){            if(!smap.containsKey(s.charAt(i)))                smap.put(s.charAt(i), 1);            else                smap.put(s.charAt(i), smap.get(s.charAt(i))+1);        }        for(int i=0;i<t.length();i++){            if(!tmap.containsKey(t.charAt(i)))                tmap.put(t.charAt(i), 1);            else                tmap.put(t.charAt(i), tmap.get(t.charAt(i))+1);        }                boolean flag=true;        for(int i=0;i<t.length();i++){            if(!smap.containsKey(t.charAt(i))){                flag=false;                break;            }            else{                if(tmap.get(t.charAt(i))>smap.get(t.charAt(i))){                    flag=false;                    break;                }            }        }        if(!flag)            System.out.println("need tree");        else{            boolean flags[]=new boolean[t.length()];            boolean flag1=true;            for(int i=0,j=0;i<s.length()&&j<t.length();i++){                if(s.charAt(i)==t.charAt(j)){                    flags[j]=true;                    j++;                }            }            for(int i=0;i<t.length();i++){                if(!flags[i]){                    flag1=false;                    break;                }            }            if(flag1)                System.out.println("automaton");            else{                if(s.length()==t.length())                    System.out.println("array");                else                    System.out.println("both");            }        }    }}Â 
