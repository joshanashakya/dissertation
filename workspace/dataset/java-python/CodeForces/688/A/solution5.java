//package graphs;import java.util.*; public class codeforces { 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner s=new Scanner(System.in);		int n=s.nextInt();		int d=s.nextInt();		int a[]=new int[d];		for(int i=0;i<d;i++)		{			String str=s.next();			a[i]=opp(str,n);		}				int ans=0,c=0;//		for(int i:a)//			System.out.println(i);		for(int i=0;i<d;i++)		{			if(a[i]==1)				c++;			else				c=0;			ans=Math.max(c, ans);		}		System.out.println(ans);	}		public static int opp(String str,int d)	{		int count=0;		for(int i=0;i<str.length();i++)		{			if(str.charAt(i)=='1')				count++;		}		if(count<d)			return 1;		else			return 0;	}		public static int solve(int a[],int b[],int n,int m)	{		if(n==0||m==0)			return 0;				System.out.println("hi");		int op1=a[n-1]+solve(a,b,n-1,m);		int op2=b[m-1]+solve(a,b,n,m-1);		int op3=a[n-1]+b[m-1]+solve(a,b,n-1,m-1);		return Math.max(op1,Math.max(op2,op3));			}		public static int lcs(String a,String b)	{		int dp[][]=new int[a.length()+1][b.length()+1];				for(int i=1;i<dp.length;i++)		{			for(int j=1;j<dp[i].length;j++)			{				if(a.charAt(i-1)==b.charAt(j-1))				{					dp[i][j]=1+dp[i-1][j-1];				}				else					dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);			}		}				return dp[dp.length-1][dp[0].length-1];	}		public static long solve(long base,long pow,long mod)	{		if(pow==0)			return 1L;				long temp=solve(base,pow/2,mod);		temp=((temp%5)*(temp%5))%5;		if(pow%2==1)			temp=((base%5)*(temp%5))%5;		return temp;			}		public static long gcd(long a,long b)	{		if(b==0)			return a+b;		return gcd(b,a%b);	}	public static int solve(int n,int buff,int score)	{		if(n<=0)		{			return score;		}				int op1=solve(n-1,buff,score+1);		int op2=Integer.MIN_VALUE;		int op3=Integer.MIN_VALUE;		if(buff!=0)		{			op2=solve(n-1,buff,score+buff);		}		if(n>=3)		{			op3=solve(n-3,score,2*score);		}				return Math.max(op1,Math.max(op2, op3));					}		 }  							  	 	 		 	  	   			
