# template begins#####################################from io import BytesIO, IOBaseimport sysimport mathimport osfrom collections import defaultdictfrom math import ceil  # region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)def input(): return sys.stdin.readline().rstrip("\r\n")def mint(): return map(int, input().split())def mfloat(): return map(float, input().split())  ###################################### template ends# Use the recursion snippet if heavy recursion is needed (depth>1000)def solve():    n=int(input())    *a, = mint()    *b, = mint()    d={}    aa={}    bb={}    for i in a:        d[i]=d.get(i, 0) + 1        aa[i]=aa.get(i, 0) + 1    for i in b:        d[i]=d.get(i, 0) + 1        bb[i]=bb.get(i, 0) + 1    if any([d[i]%2 for i in d]):        print(-1)        return    ans=0    for i in d:        ans += abs(aa.get(i, 0) - bb.get(i, 0))    print(ans//4)  def main():    # t = int(input())    t = 1    for _ in range(t):        solve()  if __name__ == "__main__":    main()
