//Created by Aminul on 10/9/2020. import java.io.*;import java.util.*; import static java.lang.Math.*; public class A {    public static void main(String[] args) throws Exception {        Scanner in = new Scanner(System.in);        PrintWriter pw = new PrintWriter(System.out);         int n = in.nextInt();        BinaryIndexTree bit = new BinaryIndexTree(n + 10);        int size = 1;        double sum = 0;         for (int i = 1; i <= n; i++) {            int tp = in.nextInt();            if (tp == 3) {                long val = bit.sum(size);                bit.add(size, -val);                bit.add(size + 1, val);                sum -= val;                size--;            } else {                if (tp == 2) {                    int val = in.nextInt();                    bit.add(++size, val);                    bit.add(size + 1, -val);                    sum += val;                } else {                    int k = in.nextInt();                    int val = in.nextInt();                    sum += (double) k * val;                    bit.add(1, val);                    bit.add(k + 1, -val);                }            }            pw.println(sum / size);        }         pw.close();    }     static void debug(Object... obj) {        System.err.println(Arrays.deepToString(obj));    }     static class BinaryIndexTree {        public long bit[];        public int n;         public BinaryIndexTree(int N) {            n = N;            bit = new long[n];        }         public void add(int index, long value) {            for (; index < n; index = index + (index & -index)) {                bit[index] += value;            }        }         public long sum(int index) {            int sum = 0;            for (; index > 0; index = index - (index & -index)) {                sum += bit[index];            }            return sum;        }         public long query(int i, int j) {            return sum(j) - sum(i - 1);        }    }} 			   	 		 	     	 		 		  	  	
