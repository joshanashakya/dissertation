import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c])  def solve():	B = [0];tot = 0;count = 1	arr = [0]*(10**6)	for _ in range(int(input())):		A = aj()		if A[0] == 3:			ex = arr[count-1]			arr[count-1] = 0			tot -= B.pop() + ex			count -= 1			arr[count-1] += ex 		elif A[0] == 2:			count += 1			tot += A[1]			B.append(A[1])		else:			tot += A[1]*A[2]			arr[A[1]-1] += A[2]		print(tot/count)		# print(arr[:10])     try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
