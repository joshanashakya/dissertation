import java.util.*;import java.io.*;import static java.lang.Math.*; public class PracticeProblem{    public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);     public static int n;    public static int[] arr;    public static long[] ansForwards, ansBackwards;     public static Set<Integer> onStackForwards;    public static Set<Integer> onStackBackwards;     public static void main(String[] args)    {        n = in.nextInt();        arr = new int[n + 1];        for (int i = 2; i <= n; i++)            arr[i] = in.nextInt();         ansForwards = new long[n + 1];        ansBackwards = new long[n + 1];         for (int i = 2; i <= n; i++)        {            if (ansBackwards[i] == 0)            {                onStackForwards = new HashSet<>();                onStackBackwards = new HashSet<>();                dfsBackwards(i);            }        }         for (int i = 1; i < n; i++)        {            if (ansBackwards[1 + i] != -1)                out.println(i + ansBackwards[1 + i]);            else                out.println(-1);        }        out.close();    }     private static void dfsForwards(int i)    {        onStackForwards.add(i);        if (i + arr[i] > n)        {            ansForwards[i] = arr[i];        }        else        {            if (!onStackBackwards.contains(i + arr[i]))            {                if (ansBackwards[i + arr[i]] == 0)                    dfsBackwards(i + arr[i]);                if (ansBackwards[i + arr[i]] != -1)                    ansForwards[i] = arr[i] + ansBackwards[i + arr[i]];                else                    ansForwards[i] = -1;            }            else            {                ansForwards[i] = -1;            }        }    }     private static void dfsBackwards(int i)    {        onStackBackwards.add(i);        if (i - arr[i] < 1)        {            ansBackwards[i] = arr[i];        }        else        {            if (!onStackForwards.contains(i - arr[i]) && i - arr[i] != 1)            {                if (ansForwards[i - arr[i]] == 0)                    dfsForwards(i - arr[i]);                if (ansForwards[i - arr[i]] != -1)                    ansBackwards[i] = arr[i] + ansForwards[i - arr[i]];                else                    ansBackwards[i] = -1;            }            else            {                ansBackwards[i] = -1;            }        }    }     /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
