import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;Â public class Solution {    public static int[] arr;    public static int n;    public static long[][] res;    public static long dfs(int ind, int mark) {        if (res[ind][mark]!=0) return res[ind][mark];        int newind = 0;        if (mark==0)  newind = ind - arr[ind];        else newind = ind + arr[ind];        if (-2>=newind || n-1<=newind) {            res[ind][mark] = arr[ind];        } else if (-1==newind) {            res[ind][mark] = -1;        } else {            res[ind][mark] = -1;            long x = dfs(newind, 1-mark);            if (x!=-1) res[ind][mark] = x + arr[ind];        }        return res[ind][mark];    }    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        n = Integer.parseInt(reader.readLine());        arr = new int[n-1];        StringTokenizer sToken = new StringTokenizer(reader.readLine());        for (int i=0; i<n-1; i++) arr[i] = Integer.parseInt(sToken.nextToken());        res = new long[n-1][2];        for (int i=0; i<n-1; i++) {            dfs(i, 0);            dfs(i, 1);        }        StringBuilder ans = new StringBuilder();        for (int i=0; i<n-1; i++) {            if (res[i][0]==-1) ans.append("-1\n");            else ans.append(res[i][0]+i+1).append("\n");        }        System.out.println(ans);    }}
