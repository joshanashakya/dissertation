import java.io.*;import java.util.Arrays;import java.util.stream.Stream; public class GreenhouseEffect {    static int[][] dp;    public static void main(String[] args) throws IOException {        GreenhouseEffect obj = new GreenhouseEffect();        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int[] arr = Stream.of(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();        int n = arr[0];        int m = arr[1];        dp = new int[n][n+1];        for(int i=0; i<n;i++ ) {            Arrays.fill(dp[i],-1);        }        int[] val = new int[n];//Stream.of(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();        for( int i=0;i<n;i++) {            String[] line = br.readLine().split(" ");            val[i] = Integer.parseInt(line[0]);        }          int ans = obj.solve(0,-1,n,m,val);        System.out.println(n-ans);    }    public int solve(int pos,int prevPos, int n, int m, int[]val) {        if(pos == n) return 0;         if(dp[pos][prevPos+1] !=-1 ) return dp[pos][prevPos+1];        int a = 0;        if(prevPos == -1 ||  val[pos] >= val[prevPos] ) {            a = solve(pos+1,pos,n,m,val)+1;        }          // ans = Math.min(solve(pos+1,val[pos],n,m,val),solve(pos+1,prev,n,m,val)+1);         int b = solve(pos+1,prevPos,n,m,val);        return dp[pos][prevPos+1] = Math.max(a,b);        //return dp[pos][prevPos] = ans;    }      public static int[] readIntArray(BufferedReader br) throws Exception {        String[] arr = br.readLine().split(" ");        int[] intArr = new int[arr.length];        for (int i = 0; i < arr.length; i++) {            intArr[i] = Integer.parseInt(arr[i]);        }        return intArr;    }}
