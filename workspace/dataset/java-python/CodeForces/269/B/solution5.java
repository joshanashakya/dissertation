import java.io.*;import java.util.*;import java.math.*;   public class Main {     public void solve() throws IOException{         int n = in.nextInt();        int m = in.nextInt();                int[] aa = new int[n];        for(int i = 0; i < n; i++){            int a = in.nextInt();            double b = in.nextDouble();            aa[i] = a;        }         int[] dp = new int[5001];        int max = Integer.MIN_VALUE;        for(int i = 0; i < n; i++){             int a = aa[i];            int[] newDp = new int[5001];            newDp = Arrays.copyOf(dp, 5001);             for(int j = 0; j <= a; j++){                newDp[a] = Math.max(newDp[a], dp[j] + 1);                max = Math.max(max, newDp[a]);            }             dp = newDp;        }          out.println(n - max);        return;    }      public BigInteger gcdBigInt(BigInteger a, BigInteger b){         if(a.compareTo(BigInteger.valueOf(0L)) == 0){            return b;        }else{            return gcdBigInt(b.mod(a), a);        }     }      FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }     public class Pair<A, B>{        public A x;         public B y;         Pair(A x, B y){            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (o == null || getClass() != o.getClass()) return false;            Pair<?, ?> pair = (Pair<?, ?>) o;            if (!x.equals(pair.x)) return false;            return y.equals(pair.y);        }         @Override        public int hashCode() {            int result = x.hashCode();            result = 31 * result + y.hashCode();            return result;        }     }     class Tuple{        int x; int y; int z;        Tuple(int ix, int iy, int iz){            x = ix;            y = iy;            z = iz;        }    }}
