import java.io.*;import java.util.*;public class cardsorting {		static int[] bit;	static int n;	public static void main(String[] args) throws Exception {		FastScanner in = new FastScanner(System.in);		n = in.nextInt();				Num[] nums = new Num[n];		bit = new int[n];				for(int i = 0; i < n; i++) {			nums[i] = new Num(in.nextInt(),i);			add(i,1);		}		Arrays.sort(nums);						long ret = nums[0].idx;				int p = nums[0].idx;		add(nums[0].idx,-1);		int i = 1;//		System.out.println(ret);		while(i < n) {			int val = nums[i].num;			int pp = p;			Comparator<Num> comp = new Comparator<Num>() {				public int compare(Num one, Num two) {					boolean g1 = one.idx > pp;					boolean g2 = two.idx > pp;					if(g1 != g2)						return Boolean.compare(g2, g1);					return Integer.compare(one.idx, two.idx);				}			};						TreeSet<Num> cards = new TreeSet<>(comp);			while(i < n && nums[i].num == val) {				cards.add(nums[i++]);			}						int tP = p;			while(!cards.isEmpty()) {				Num at = cards.pollFirst();								if(at.idx > tP) {					ret += sum(tP,at.idx);				} else {					ret += sum(tP,n-1)+sum(0,at.idx);				}//				System.out.println(at.idx + " "+ret);				add(at.idx,-1);				tP = at.idx;			}			p = tP;		}		System.out.println(ret+1);	}	    static int sum(int r) {        int ret = 0;        for (; r >= 0; r = (r & (r + 1)) - 1)            ret += bit[r];        return ret;    }     static int sum(int l, int r) {        return sum(r) - sum(l - 1);    }     static void add(int idx, int delta) {        for (; idx < n; idx = idx | (idx + 1))            bit[idx] += delta;    }		static class Num implements Comparable<Num> {		int num, idx;				public Num(int num, int idx) {			this.num = num;			this.idx = idx;		}				@Override		public int compareTo(Num o) {			return Integer.compare(num, o.num);		}			}			static class FastScanner {		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars; 		public FastScanner(InputStream stream) {			this.stream = stream;		} 		int read() {			if (numChars == -1)				throw new InputMismatchException();			if (curChar >= numChars) {				curChar = 0;				try {					numChars = stream.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (numChars <= 0)					return -1;			}			return buf[curChar++];		} 		boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		boolean isEndline(int c) {			return c == '\n' || c == '\r' || c == -1;		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String next() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		String nextLine() {			int c = read();			while (isEndline(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndline(c));			return res.toString();		}	}}
