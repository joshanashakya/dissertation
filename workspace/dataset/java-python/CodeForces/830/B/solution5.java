 import java.io.*;import java.util.*;public class B830 {    static int tree[];    public static void main(String args[])throws IOException    {        Reader sc=new Reader();        List<Integer> list[]=new ArrayList[100001];        for(int i=1;i<=100000;i++)        {            list[i]=new ArrayList<>();        }        int n=sc.nextInt();        tree=new int[n<<2];        for(int i=0;i<n;i++)        {            list[sc.nextInt()].add(i);        }        long tot=0;        int curr=-1;        for(int i=1;i<=100000;i++)        {            if(!list[i].isEmpty())            {                int ind=Collections.binarySearch(list[i],curr);                ind=-ind -2;                if(ind==-1)                    ind=list[i].size()-1;                int pos=list[i].get(ind);                if(pos>curr)                {                    tot+=pos-curr;                    tot-=query(0,0,n-1,curr+1,pos);                }                else                {                    tot+=pos+n-curr;                    tot-=query(0,0,n-1,curr+1,n-1);                    tot-=query(0,0,n-1,0,pos);                }                curr=pos;                for(int j:list[i])                {                    update(0,0,n-1,j);                }            }        }        System.out.println(tot);            }    static int query(int node,int st,int end,int l,int r)    {        if(st>end || end<l || st>r)            return 0;        if(st>=l && end<=r)            return tree[node];        int mid=(st+end)/2;        return query(node*2 +1,st,mid,l,r)+query(node*2 +2,mid+1,end,l,r);    }    static void update(int node,int st,int end,int ind)    {        if(st==end){            tree[node]++;            return;        }        int mid=(st+end)/2;        if(ind>=st && ind<=mid)            update(node*2 +1,st,mid,ind);        else            update(node*2 +2,mid+1,end,ind);        tree[node]=tree[node*2 +1]+tree[node*2 +2];    }}class Reader {		final private int BUFFER_SIZE = 1 << 16;		private DataInputStream din;		private byte [] buffer;		private int bufferPointer, bytesRead;				public Reader () {			din = new DataInputStream (System.in);			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		}				public Reader (String file_name) throws IOException {			din = new DataInputStream (new FileInputStream (file_name));			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		}				public String readLine () throws IOException {			byte [] buf = new byte[1024];			int cnt = 0, c;			while ((c = read ()) != -1) {				if (c == '\n')					break;				buf[cnt++] = (byte) c;			}			return new String (buf, 0, cnt);		}				public int nextInt () throws IOException {			int ret = 0;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		}				public long nextLong () throws IOException {			long ret = 0;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		}				public double nextDouble () throws IOException {			double ret = 0, div = 1;			byte c = read ();			while (c <= ' ')				c = read ();			boolean neg = (c == '-');			if (neg)				c = read ();			do {				ret = ret * 10 + c - '0';			} while ((c = read ()) >= '0' && c <= '9');			if (c == '.')				while ((c = read ()) >= '0' && c <= '9')					ret += (c - '0') / (div *= 10);			if (neg)				return -ret;			return ret;		}				private void fillBuffer () throws IOException {			bytesRead = din.read (buffer, bufferPointer = 0, BUFFER_SIZE);			if (bytesRead == -1)				buffer[0] = -1;		}				private byte read () throws IOException {			if (bufferPointer == bytesRead)				fillBuffer ();			return buffer[bufferPointer++];		}				public void close () throws IOException {			if (din == null)				return;			din.close ();		}	} 
