import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BCardsSorting solver = new BCardsSorting();            solver.solve(1, in, out);            out.close();        }    }     static class BCardsSorting {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            Splay[] nodes = new Splay[n];            for (int i = 0; i < n; i++) {                nodes[i] = new Splay();                nodes[i].key = in.readInt();                if (i > 0) {                    nodes[i].setLeft(nodes[i - 1]);                }                nodes[i].pushUp();            }            long ans = 0;            Arrays.sort(nodes, (a, b) -> Integer.compare(a.key, b.key));            for (int i = 0; i < n; i++) {                int l = i;                int r = i;                while (r + 1 < n && nodes[r + 1].key == nodes[l].key) {                    r++;                }                i = r;                for (int j = l; j <= r; j++) {                    Splay.splay(nodes[j]);                    nodes[j].rank = nodes[j].left.size;                }                Arrays.sort(nodes, l, r + 1, (a, b) -> Integer.compare(a.rank, b.rank));                for (int j = l; j <= r; j++) {                    Splay.splay(nodes[j]);                    Splay left = Splay.splitLeft(nodes[j]);                    Splay right = Splay.splitRight(nodes[j]);                    ans += left.size + 1;                    Splay.merge(right, left);                }            }             out.println(ans);        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(long c) {            cache.append(c);            return this;        }         public FastOutput println(long c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class Splay implements Cloneable {        public static final Splay NIL = new Splay();        Splay left = NIL;        Splay right = NIL;        Splay father = NIL;        int size = 1;        int key;        int rank;         static {            NIL.left = NIL;            NIL.right = NIL;            NIL.father = NIL;            NIL.size = 0;        }         public static void splay(Splay x) {            if (x == NIL) {                return;            }            Splay y, z;            while ((y = x.father) != NIL) {                if ((z = y.father) == NIL) {                    y.pushDown();                    x.pushDown();                    if (x == y.left) {                        zig(x);                    } else {                        zag(x);                    }                } else {                    z.pushDown();                    y.pushDown();                    x.pushDown();                    if (x == y.left) {                        if (y == z.left) {                            zig(y);                            zig(x);                        } else {                            zig(x);                            zag(x);                        }                    } else {                        if (y == z.left) {                            zag(x);                            zig(x);                        } else {                            zag(y);                            zag(x);                        }                    }                }            }             x.pushDown();            x.pushUp();        }         public static void zig(Splay x) {            Splay y = x.father;            Splay z = y.father;            Splay b = x.right;             y.setLeft(b);            x.setRight(y);            z.changeChild(y, x);             y.pushUp();        }         public static void zag(Splay x) {            Splay y = x.father;            Splay z = y.father;            Splay b = x.left;             y.setRight(b);            x.setLeft(y);            z.changeChild(y, x);             y.pushUp();        }         public void setLeft(Splay x) {            left = x;            x.father = this;        }         public void setRight(Splay x) {            right = x;            x.father = this;        }         public void changeChild(Splay y, Splay x) {            if (left == y) {                setLeft(x);            } else {                setRight(x);            }        }         public void pushUp() {            if (this == NIL) {                return;            }            size = left.size + right.size + 1;        }         public void pushDown() {            if (this == NIL) {                return;            }        }         public static void toString(Splay root, StringBuilder builder) {            if (root == NIL) {                return;            }            root.pushDown();            toString(root.left, builder);            builder.append(root.key).append(',');            toString(root.right, builder);        }         public Splay clone() {            try {                return (Splay) super.clone();            } catch (CloneNotSupportedException e) {                throw new RuntimeException(e);            }        }         public static Splay cloneTree(Splay splay) {            if (splay == NIL) {                return NIL;            }            splay = splay.clone();            splay.left = cloneTree(splay.left);            splay.right = cloneTree(splay.right);            return splay;        }         public static Splay selectMaxAsRoot(Splay root) {            if (root == NIL) {                return root;            }            root.pushDown();            while (root.right != NIL) {                root = root.right;                root.pushDown();            }            splay(root);            return root;        }         public static Splay splitLeft(Splay root) {            root.pushDown();            Splay left = root.left;            left.father = NIL;            root.setLeft(NIL);            root.pushUp();            return left;        }         public static Splay splitRight(Splay root) {            root.pushDown();            Splay right = root.right;            right.father = NIL;            root.setRight(NIL);            root.pushUp();            return right;        }         public static Splay merge(Splay a, Splay b) {            if (a == NIL) {                return b;            }            if (b == NIL) {                return a;            }            a = selectMaxAsRoot(a);            a.setRight(b);            a.pushUp();            return a;        }         public String toString() {            StringBuilder builder = new StringBuilder().append(key).append(":");            toString(cloneTree(this), builder);            return builder.toString();        }     }} 
