import java.util.*;import java.io.*; public class Main {	public static void main(String args[]) {new Main().run();} 	FastReader in = new FastReader();	PrintWriter out = new PrintWriter(System.out);	void run(){		work();		out.flush();	}	long mod=1000000007;	long gcd(long a,long b) {		return b==0?a:gcd(b,a%b);	}	int[] A;	int n;	int[] tree;	void work() {		n=in.nextInt();		A=new int[n];		for(int i=0;i<n;i++)A[i]=in.nextInt();		tree=new int[4*n];		TreeMap<Integer,ArrayList<Integer>> map=new TreeMap<>();		for(int i=0;i<n;i++) {			if(map.get(A[i])==null) map.put(A[i],new ArrayList<>());			map.get(A[i]).add(i);		}		build(0,n-1,1);		long ret=0;		int index=-1;		for(Integer key:map.keySet()) {			ArrayList<Integer> list=map.get(key);			int size=list.size();			int next=search(index,list);			if(next==-1) {				next=list.get(size-1);				ret+=query(index+1,next,0,n-1,1);			}else {				ret+=query(index+1,n-1,0,n-1,1);				ret+=query(0,next,0,n-1,1);			}			index=next;			for(int t:list) {				update(0,n-1,1,t);			}		}		out.println(ret);	}	private void update(int l, int r,int node, int index) {		tree[node]--;		if(l==r)return;		int m=(l+r)/2;		if(index<=m)update(l,m,node<<1,index);		else {			update(m+1,r,(node<<1)+1,index);		}	}	private int query(int i, int j,int l,int r,int node) {		if(l>=i&&r<=j) {			return tree[node];		}		int m=(l+r)/2;		int ret=0;		if(j>m) {			ret+=query(i,j,m+1,r,(node<<1)+1);		}		if(i<=m) {			ret+=query(i,j,l,m,node<<1);		}		return ret;	}	private int build(int l, int r,int node) {		if(l==r) {			tree[node]=1;			return tree[node];		}		int m=(l+r)/2;		tree[node]=build(l,m,node<<1)+build(m+1,r,(node<<1)+1);		return tree[node];	}	private int search(int num, ArrayList<Integer> list) {		int l=0,r=list.size();		while(l<r) {			int m=(l+r)/2;			if(list.get(m)>num) {				r=m;			}else {				l=m+1;			}		}		if(l==0)return -1;		return list.get(l-1);	}}   class FastReader{	BufferedReader br;	StringTokenizer st; 	public FastReader()	{		br=new BufferedReader(new InputStreamReader(System.in));	} 	public String next() 	{		if(st==null || !st.hasMoreElements())		{			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				e.printStackTrace();			}		}		return st.nextToken();	} 	public int nextInt() 	{		return Integer.parseInt(next());	} 	public long nextLong()	{		return Long.parseLong(next());	}}
