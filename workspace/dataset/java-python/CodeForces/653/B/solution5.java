import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.StringTokenizer; public class Main {    static HashSet<String> total;    static Map<Character, ArrayList<String>> data;     public static void main(String[] args) throws Exception {        long startTime = System.nanoTime();        int n = in.nextInt();        int q = in.nextInt();        data = new HashMap<>();        total = new HashSet<>();        for (int i = 0; i < q; i++) {            String a = in.next();            String b = in.next();            ArrayList<String> temp = data.getOrDefault(b.charAt(0), new ArrayList<>());            temp.add(a);            data.put(b.charAt(0), temp);        }        ArrayList<String> first = data.getOrDefault('a', new ArrayList<>());        if (first.isEmpty()) {            out.println(0);        } else {            while (true) {                if (first.get(0).length() == n) {                    out.println(first.size());                    break;                }                if (first.get(0).length() > n) {                    out.println(0);                    break;                }                ArrayList<String> second = new ArrayList<>();                for (String s : first) {                    for (String x : (data.getOrDefault(s.charAt(0), new ArrayList<>()))) {                        second.add(x + s.substring(1));                    }                }                first = second;                if (first.isEmpty()) {                    out.println(0);                    break;                }            }        }        long endTime = System.nanoTime();        err.println("Execution Time : +" + (endTime - startTime) / 1000000 + " ms");        exit(0);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public long nextLong() {            return Long.parseLong(next());        }         public int nextInt() {            return Integer.parseInt(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }    }     static void exit(int a) {        out.close();        err.close();        System.exit(a);    }     static InputStream inputStream = System.in;    static OutputStream outputStream = System.out;    static OutputStream errStream = System.err;    static InputReader in = new InputReader(inputStream);    static PrintWriter out = new PrintWriter(outputStream);    static PrintWriter err = new PrintWriter(errStream);    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); }
