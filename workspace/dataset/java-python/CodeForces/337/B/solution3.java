import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BRoutineProblem solver = new BRoutineProblem();        solver.solve(1, in, out);        out.close();    }     static class BRoutineProblem {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();            double r1 = (1.0) * a / b;            double r2 = (1.0) * c / d;            if (r1 == r2) {                out.println(0 + "/" + 1);            } else if (r1 > r2) {                int num = a * d - c * b;                int den = a * d;                ratio(num, den, out);            } else {                int num = b * c - a * d;                int den = b * c;                ratio(num, den, out);            }         }         static void ratio(int num, int den, OutputWriter out) {            int i = Math.min(num, den);            while (i >= 2) {                if (num % i == 0 && den % i == 0) {                    num /= i;                    den /= i;                    continue;                }                i--;            }            out.println(num + "/" + den);        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
