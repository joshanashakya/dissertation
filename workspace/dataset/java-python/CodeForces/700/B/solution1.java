import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer;Â public class Solveaproblem {    private static int k;    private static int[] arr, dp;    private static ArrayList<Integer>[] graph;    private static int dfs1(int item, int prev) {        dp[item] = arr[item];        for (int elem:graph[item]) {            if (elem==prev) continue;            dp[item]+=dfs1(elem, item);        }        return dp[item];    }    private static long dfs2(int item, int prev) {        long ans = 0;        for (int elem:graph[item]) {            if (elem==prev) continue;            ans+=Math.min(dp[elem], 2*k-dp[elem]);            ans+=dfs2(elem, item);        }        return ans;    }    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer sToken = new StringTokenizer(reader.readLine());        int n = Integer.parseInt(sToken.nextToken());        k = Integer.parseInt(sToken.nextToken());        arr = new int[n];        sToken = new StringTokenizer(reader.readLine());        for (int i=0; i<2*k; i++) {            arr[Integer.parseInt(sToken.nextToken())-1] = 1;        }        graph = new ArrayList[n];        for (int i=0; i<n; i++) {            graph[i] = new ArrayList<>();        }        for (int i=1; i<n; i++) {            sToken = new StringTokenizer(reader.readLine());            int x = Integer.parseInt(sToken.nextToken()) - 1;            int y = Integer.parseInt(sToken.nextToken()) - 1;            graph[x].add(y); graph[y].add(x);        }        dp = new int[n];        dfs1(0, -1);        System.out.println(dfs2(0, -1));    }}
