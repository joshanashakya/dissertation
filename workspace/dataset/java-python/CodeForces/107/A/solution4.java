//package Practice; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;import java.lang.*; public class A{    static int diam = Integer.MAX_VALUE;    static int end = 0;    static class Edge{        int src;        int nbr;        int diameter;        Edge(int src,int nbr,int diameter){            this.src = src;            this.nbr = nbr;            this.diameter = diameter;        }    }    public static void main (String[] args) throws java.lang.Exception {        FastReader sc = new FastReader();        int n = sc.nextInt();        int m = sc.nextInt();        ArrayList<Edge>[] graph = new ArrayList[n+1];        for (int i = 1;i<=n;i++){            graph[i] = new ArrayList<>();        }        int indegree[] = new int[n+1];        int outdegree[] = new int[n+1];        while (m-->0){            int u = sc.nextInt();            int v = sc.nextInt();            int d = sc.nextInt();            indegree[v]++;            outdegree[u]++;            graph[u].add(new Edge(u,v,d));        }        int total = 0;        for (int i=1;i<=n;i++){            if (indegree[i]==0 && outdegree[i]==1){                total++;            }        }        System.out.println(total);        boolean visited[] = new boolean[n+1];        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();        for (int i=1;i<=n;i++){            if (indegree[i]==0 && outdegree[i]==1){                ArrayList<Integer> inner = new ArrayList<>();                inner.add(i);                diam = Integer.MAX_VALUE;                end = 0;                dfs(graph,i,visited);                inner.add(end);                inner.add(diam);                ans.add(inner);            }        }        for (int i=0;i<ans.size();i++){            for (int j=0;j<ans.get(i).size();j++){                System.out.print(ans.get(i).get(j)+" ");            }            System.out.println();        }    }     public static void dfs(ArrayList<Edge>[] graph, int src,boolean[] visited){        visited[src] = true;        end = src;      //  System.out.println(src);        for (Edge e : graph[src]){            if(!visited[e.nbr]){                dfs(graph,e.nbr,visited);                diam = Math.min(diam,e.diameter);            }        }    }     static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
