import java.util.Scanner; public class Main {    private static int[] next,pre,cost;    private static boolean[] visited;    private static int count,n,p;    private static Node[] nodes;    public static class Node{        int u,v,d;        public Node() {        }    }    public static void main(String[] args) {        Scanner scanner=new Scanner(System.in);        n=scanner.nextInt();        p=scanner.nextInt();        next=new int[n+1];        pre=new int[n+1];        cost=new int[n+1];        visited=new boolean[n+1];        nodes= new Node[n+1];        for (int i = 0; i <=n; i++) {            nodes[i]=new Node();        }        count=0;        for (int i = 0; i < p; i++) {            int a=scanner.nextInt();            int b=scanner.nextInt();            int k=scanner.nextInt();            next[a]=b;pre[b]=a;cost[a]=k;        }        for (int i = 1; i <=n; i++) {            if (!visited[i]&&pre[i]==0&&next[i]!=0)            {                nodes[count].u=i;                dfs(i,cost[i]);                count++;            }        }        System.out.println(count);        for (int i=0;i<count;i++)        {            System.out.println(nodes[i].u+" "+nodes[i].v+" "+nodes[i].d);        }    }    public static void dfs(int i,int flow)    {        visited[i]=true;        if (next[i]==0)        {            nodes[count].d=flow;            nodes[count].v=i;            return;        }        int j=next[i];        if (cost[j]<flow&&cost[j]!=0)        {            dfs(j,cost[j]);        }        else        {            dfs(j,flow);        }    }} 	  			    	 				 				 	   	 	 	
