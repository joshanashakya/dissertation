import java.util.*; public class TestClass {    private static final List<List<Pair>> graph = new ArrayList<>();    private static final List<List<Pair>> reversed = new ArrayList<>();     public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        int m = scanner.nextInt();        for (int i = 0 ; i < n ; ++i) {            graph.add(new ArrayList<>());            reversed.add(new ArrayList<>());        }        for (int i = 0 ; i < m ; ++i) {            int from = scanner.nextInt() - 1;            int to = scanner.nextInt() - 1;            int c = scanner.nextInt();            graph.get(from).add(new Pair(to,c));            reversed.get(to).add(new Pair(from, c));        }         int counter = 0;        StringBuilder stringBuilder = new StringBuilder();        for (int i = 0; i < n ; ++i) {            if (graph.get(i).size() > 0 && reversed.get(i).size() == 0) {                counter++;                solve(i, stringBuilder);            }        }        System.out.println(counter);        System.out.println(stringBuilder);    }     private static void solve(int vert, StringBuilder stringBuilder) {        int[] last = new int[1];        int result = dfs(vert, last, Integer.MAX_VALUE);        stringBuilder.append(vert + 1).append(" ").append(last[0] + 1).append(" ").append(result).append("\n");    }     private static int dfs(int vert, int[] last, int cost) {        if(graph.get(vert).size() == 0) {            last[0] = vert;            return cost;        }        return dfs(graph.get(vert).get(0).to, last, Math.min(cost, graph.get(vert).get(0).cost));    }     private static final class Pair{        private final int to;        private final int cost;        private Pair(int to, int cost ) {            this.to = to;            this.cost = cost;        }    }}
