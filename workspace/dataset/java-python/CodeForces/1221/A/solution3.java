import java.util.*;import java.io.*;import java.lang.*;import java.math.*; public class cp{    static BufferedReader br;    static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));        List<String> answer = new ArrayList<String>();         for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();            int n = tokenInt();            st = readLine();            int[] arr = readIntArray(n);            answer.add(new Solver().solve(n, arr));         }         ListIterator<String> it = answer.listIterator();        while (it.hasNext())            System.out.println(it.next());     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }    static int tokenInt() { return Integer.parseInt(st.nextToken()); }    static long tokenLong(){ return Long.parseLong(st.nextToken()); }    static double tokenDouble(){ return Double.parseDouble(st.nextToken()); }    static char[] tokenChar(){ return st.nextToken().toCharArray(); }    static int[] readIntArray(int n) {        int[] a=new int[n];        for (int i=0; i<n; i++) a[i]=tokenInt();        return a;    } }  class Solver{    public String solve(int n, int[] arr) throws IOException{         List<Integer> arrList = new ArrayList<Integer>();        for(int a : arr) arrList.add(a);        Set<Integer> arrSet = new HashSet<Integer>(arrList);          if(arrList.contains(2048)) return "YES";         while(arrSet.size() != arrList.size()){            for (int i=0; i<arrList.size(); i++) {                for (int j=i+1; j<arrList.size(); j++) {                    if(Objects.equals(arrList.get(i), arrList.get(j))){                        arrList.add(arrList.get(i) + arrList.get(j));                        arrList.remove(i);                        arrList.remove(j-1);                        arrSet = new HashSet<Integer>(arrList);                    }                    // System.out.println(arrList.toString());                }                if(arrList.contains(2048)) return "YES";            }        }         return "NO";    }} /* 141024 512 64 512  */
