# cook your dish hereimport sys,osfrom collections import Counter import heapqimport mathfrom io import BytesIO, IOBaseBUFSIZE = 8192class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii") sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") import os.pathif(os.path.exists('input.txt')):    sys.stdin = open('input.txt', 'r')     sys.stdout = open('output.txt', 'w') def listt():    return [int(i) for i in input().split()]  from collections import defaultdict      t=1t=int(input())for _ in range(t):    n=int(input())    l=listt()    d={}    if n<3:        print("NO")    else:        ans=True        for i in range(n):            if l[i] in d:                d[l[i]].append(i+1)            else:                d[l[i]]=[i+1]        for i in d.values():            if len(i)==2:                if i[1]-i[0]>1:                    print("YES")                    ans=False            elif len(i)>2:                print("YES")                ans=False                    if ans==False:                    break                       if ans:            print("NO")                   #print("Case #{}: {}".format(_+1,abs(m-c)))       
