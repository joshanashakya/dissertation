import java.awt.*;import java.io.*;import java.lang.annotation.ElementType;import java.math.BigDecimal;import java.math.BigInteger;import java.util.Arrays;import java.util.Comparator;import java.util.Scanner;  public class  Main{    public static long max=0;    public static long dfs(int poi,int last,int a[][][],int b[],int y){        long sum=b[poi-1],ma=0,maxo=sum,min=0;        for(int i=1;i<a[poi].length;i++){            if(a[poi][i][0]!=last){                long x=dfs(a[poi][i][0],poi,a,b,a[poi][i][1]);                if(x>ma){                    min=ma;                    ma=x;                 }                else if(x>min){                    min=x;                }            }        }        maxo=sum+ma+min;        sum+=ma;        if(maxo>max) max=maxo;        if(sum-y>0)        return sum-y;        else return 0;    }    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastInput input = new FastInput(inputStream);        FastOutput out = new FastOutput(outputStream);        int n= input.scanInt();        int a[]=new int [n];        int b[][]=new int [n-1][3];        for(int i=0;i<n;i++){            a[i]= input.scanInt();        }        int len[]=new int [n+1];        for(int i=0;i<n-1;i++){            b[i][0]= input.scanInt();            b[i][1]= input.scanInt();            b[i][2]= input.scanInt();            len[b[i][0]]++;            len[b[i][1]]++;        }        int c[][][]=new int[n+1][][];        for(int i=1;i<n+1;i++){            c[i]=new int[len[i]+1][2];        }        for(int i=0;i<n-1;i++){            c[b[i][0]][len[b[i][0]]][0]=b[i][1];            c[b[i][1]][len[b[i][1]]][0]=b[i][0];            c[b[i][0]][len[b[i][0]]--][1]=b[i][2];            c[b[i][1]][len[b[i][1]]--][1]=b[i][2];        }        dfs(1,0,c,a,0);        System.out.println(""+max);        out.close();    }    static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;        public FastInput(InputStream is) {            this.is = is;        }        private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }        public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }        public String next() {            return readString();        }        public int scanInt() {            int sign = 1;            skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }            int val = 0;            while (next >= '0' && next <= '9') {                val = val * 10 + next - '0';                next = read();            }            return (sign*val);        }         public String readString(StringBuilder builder) {            skipBlank();            while (next > 32) {                builder.append((char) next);                next = read();            }            return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }    static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }        public FastOutput append(int c) {            cache.append(c);            return this;        }        public FastOutput println(int c) {            return append(c).println();        }        public FastOutput println(String c) {            cache.append(System.lineSeparator());            return append(c).println();        }        public FastOutput print(String c) {            return append(c).println();        }        public FastOutput println() {//            flush();            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }    }}
