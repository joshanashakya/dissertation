import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;Â public class Solveaproblem {    private static ArrayList<Node>[] graph;    private static int[] w;    private static long[][] res;    private static long ans;    static class Node {        int end, cost;        Node(int end, int cost) {            this.end = end;            this.cost = cost;        }    }    private static long dfs(int item, int prev) {        long max = 0, secmax = 0;        for (Node next:graph[item]) {            if (next.end==prev) continue;            long x = Math.max(0, dfs(next.end, item) - next.cost);            secmax = Math.max(secmax, x);            if (max<secmax) {                long a = max;                max = secmax;  secmax = a;            }        }        res[item] = new long[]{max + w[item], secmax + w[item]};        return max + w[item];    }    private static void getresult(int item, int prev, long background) {        ans = Math.max(ans, background + res[item][0]);        background+=w[item];        for (Node next:graph[item]) {            if (next.end==prev) continue;            long newbackground = res[item][0];            if (res[next.end][0] - next.cost + w[item]==newbackground) {                newbackground = res[item][1];            }            newbackground = Math.max(newbackground, background);            newbackground = Math.max(0, newbackground - next.cost);            getresult(next.end, item, newbackground);        }    }    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        int n = Integer.parseInt(reader.readLine());        StringTokenizer sToken = new StringTokenizer(reader.readLine());        w = new int[n];        graph = new ArrayList[n];        for (int i=0; i<n; i++) {            w[i] = Integer.parseInt(sToken.nextToken());            graph[i] = new ArrayList<>();        }        for (int i=1; i<n; i++) {            sToken = new StringTokenizer(reader.readLine());            int u = Integer.parseInt(sToken.nextToken()) - 1;            int v = Integer.parseInt(sToken.nextToken()) - 1;            int c = Integer.parseInt(sToken.nextToken());            graph[u].add(new Node(v, c)); graph[v].add(new Node(u, c));        }        int start = 0;        for (int i=0; i<n; i++) {            if (graph[i].size()==1) {                start = i; break;            }        }        res = new long[n][2];        dfs(start, -1);        getresult(start, -1, 0);        PrintWriter writer = new PrintWriter(System.out);        writer.print(ans);        writer.close();    }}
