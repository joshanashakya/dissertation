import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.StringTokenizer; public class Solve implements Runnable {	static class Pair implements Comparable<Pair> {		int a;		long b; 		Pair(int a, long b) {			this.a = a;			this.b = b;		} 		public int compareTo(Pair p) {			return Long.compare(b, p.b);		}	} 	long INF = (long) 1e15;	List<Pair> edges[];	long dp1[];	long dp2[];	int w[];	long ans; 	private void solve() throws IOException {		int n = nextInt();		edges = new ArrayList[n];		Arrays.setAll(edges, i -> new ArrayList<>());		w = new int[n];		for (int i = 0; i < n; ++i) {			w[i] = nextInt();		}		for (int i = 0; i < n - 1; ++i) {			int u = nextInt() - 1;			int v = nextInt() - 1;			int w = nextInt();			edges[u].add(new Pair(v, w));			edges[v].add(new Pair(u, w));		}		dp1 = new long[n];		ans = 0;		dfs(0, 0);		pw.println(ans);	} 	void dfs(int s, int p) {		List<Long> dp_child = new ArrayList<>();		for (Pair x : edges[s]) {			if (x.a != p) {				dfs(x.a, s);				dp_child.add(dp1[x.a] - x.b);			}		}		dp1[s] += w[s];		long t_max = 0;		long max1 = 0;		if (!dp_child.isEmpty()) {			for (long x : dp_child) {				max1 = Math.max(x, max1);			}			dp1[s] = dp1[s] + max1;		}		if (dp_child.size() >= 2) {			max1 = 0;			long max2 = 0;			for (long x : dp_child) {				if (x > max1) {					long tmp = max1;					max1 = x;					max2 = tmp;				} else if (x > max2) {					max2 = x;				}			}			t_max = w[s] + max1 + max2;		}		ans = Math.max(ans, Math.max(dp1[s], t_max));	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Solve().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in));			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
