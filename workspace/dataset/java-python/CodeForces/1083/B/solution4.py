import osimport sysfrom io import BytesIO, IOBase# region fastio BUFSIZE = 8192 class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------------------from types import GeneratorType  def bootstrap(f, stack=[]):    def wrappedfunc(*args, **kwargs):        if stack:            return f(*args, **kwargs)        else:            to = f(*args, **kwargs)            while True:                if type(to) is GeneratorType:                    stack.append(to)                    to = next(to)                else:                    stack.pop()                    if not stack:                        break                    to = stack[-1].send(to)            return to     return wrappedfunc  def RL(): return map(int, sys.stdin.readline().rstrip().split())def RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))def N(): return int(input())def comb(n, m): return factorial(n) / (factorial(m) * factorial(n - m)) if n >= m else 0def perm(n, m): return factorial(n) // (factorial(n - m)) if n >= m else 0def mdis(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2)mod = 998244353INF = float('inf')from math import factorialfrom collections import Counter, defaultdict, dequefrom heapq import heapify, heappop, heappush # ------------------------------ def c(ca, cb):    return ord(cb)-ord(ca) def main():    n, k = RL()    s = input()    t = input()     res = 0     tag = n    for i in range(n):        if s[i]==t[i]: res+=1        else: tag = i; break     num = 2    for j in range(tag, n):        if s[j]=='b': num-=1        if t[j]=='a': num-=1        if num>=k: res+=k*(n-j); break        res+=num        num*=2    print(res)  if __name__ == "__main__":    main() 
