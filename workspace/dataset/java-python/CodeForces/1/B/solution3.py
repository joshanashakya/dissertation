import rematcher= re.compile("([a-zA-Z]+)([0-9]+)")num_dict = dict(zip(map(chr, range(ord('A'), ord('Z')+1)), range(1, 27)))# print(num_dict)def is_rc(cell):    prev_R, prev_C = False, False    flag_R, flag_C = False, False    for i, c in enumerate(cell):        if i==0 and c=="R":            prev_R = True            flag_R = True            continue        if not prev_R and c=="C":            prev_C = True            flag_C = True            continue        if prev_R and not c.isdigit():            return True        if prev_C and not c.isdigit():            return True        prev_R = False        prev_C = False    return False if flag_R and flag_C else True def to_string(num):    s = ""    while num > 0:        num -= 1        s += chr(num%26 + 65)        num = num//26    return s[::-1] def rc2num(cell):    res = matcher.match(cell).groups()    C, R = res[0], res[1]    num_C = 0    for i, c in enumerate(C[::-1]):        num_C += num_dict[c] * (26 ** i)    print(f"R{R}C{num_C}") def num2rc(cell):    R, C = "", ""    R_flag, C_flag = False, False    for c in cell:        if c=="R":            R_flag = True            continue        if c=="C":            R_flag, C_flag = False, True            continue        if R_flag:            R += c        if C_flag:            C += c    C = to_string(int(C))    print(f"{C}{R}")     def main():    n = int(input())    for _ in range(n):        cell = input()        # print(is_rc(cell))        if is_rc(cell):            rc2num(cell)        else:            num2rc(cell)  if __name__ == "__main__":    main()
