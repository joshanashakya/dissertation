import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.nio.file.Paths;import java.util.Arrays;import java.util.InputMismatchException;import java.util.TreeSet; public class Main { 	public Main() throws FileNotFoundException {////		File file = Paths.get("input.txt").toFile();//		if (file.exists()) {//			System.setIn(new FileInputStream(file));//		}		// long t = System.currentTimeMillis(); 		InputReader reader = new InputReader(); 		int ttt = reader.nextInt(); 		for (int tt = 0; tt < ttt; tt++) { 			String str = reader.nextString(); 			char[] c = str.toCharArray(); 			boolean isNumber = false; 			boolean bc23 = true;			for (int i = 0; i < c.length; i++) {				if (Character.isDigit(c[i])) {					isNumber = true;				} else {					if (isNumber) {						bc23 = false;						break;					}				}			} 			if (bc23) { 				int pow = 0;				int base = 26; 				String pref = "";				String suff = "";				for (int i = 0; i < c.length; i++) {					if (Character.isAlphabetic(c[i])) {						pref += c[i];					} else {						suff += c[i];					}				}				char[] pc = pref.toCharArray();				pow = pc.length - 1;				int row = 0;				int col = Integer.valueOf(suff);				for (int i = 0; i < pc.length; i++) {					row += Math.pow(base, pow) * (pc[i] - 'A' + 1);					pow--;				}				System.out.println("R" + col + "C" + row); 			} else { 				String rowStr = "";				String colStr = ""; 				int s = 1;				boolean isRow = true;				while (s < c.length) {					if (isRow) {						rowStr += c[s++];						if (c[s] == 'C') {							isRow = false;							s++;						}					} else {						colStr += c[s++];					} 				}				int row = Integer.valueOf(rowStr);				int col = Integer.valueOf(colStr); 				colStr = "";				while (col > 0) {					col--;					int letter = col % 26;							colStr += (char) ('A' + letter);						col = col / 26;													} 				char[] cs = colStr.toCharArray();				for (int i = 0; i < cs.length / 2; i++) {					char temp = cs[i];					cs[i] = cs[cs.length - i - 1];					cs[cs.length - i - 1] = temp;				} 				System.out.println(new String(cs) + row); 			} 		} 	} 	long nCrLong(int n, int r) {		return factLong(n) / (factLong(r) * factLong(n - r));	} 	// Returns factorial of n	long factLong(int n) {		long res = 1;		for (long i = 2; i <= n; i++)			res = res * i;		return res;	} 	static class InputReader {		private byte[] buf = new byte[16384];		private int curChar;		private int numChars; 		public int read() {			if (numChars == -1)				throw new InputMismatchException();			if (curChar >= numChars) {				curChar = 0;				try {					numChars = System.in.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (numChars <= 0)					return -1;			}			return buf[curChar++];		} 		public String nextLine() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndOfLine(c));			return res.toString();		} 		public String nextString() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public long nextLong() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int nextInt() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int[] nextIntArray(int n) {			int[] arr = new int[n];			for (int i = 0; i < n; i++) {				arr[i] = nextInt();			}			return arr;		} 		public long[] nextLongArray(int n) {			long[] arr = new long[n];			for (int i = 0; i < n; i++) {				arr[i] = nextLong();			}			return arr;		} 		private boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		private boolean isEndOfLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	} 	public static void main(String[] args) throws FileNotFoundException {		new Main();	} }
