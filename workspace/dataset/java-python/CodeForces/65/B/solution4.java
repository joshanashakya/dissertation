import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Scanner; public class Main{    /**     * 数字を修正する     * @param num 元の値     * @param index 変更位置(0が1000の位、3が1の位。-1だと変更しないことを示す)     * @param digit 変更後の数字     * @return 変更後の値     */    private static int fixDigit(int num, int index, int digit){        switch(index){            case -1:                return num;            case 0:                return 1000 * digit + (num % 1000);            case 1:                return 100 * digit + (num / 1000) * 1000 + (num % 100);            case 2:                return 10 * digit + (num / 100) * 100 + (num % 10);            case 3:                return digit + (num / 10) * 10;            default:                return 0;        }    }     private static int changeMinimunValue(int oldVlaue, int minValue, int maxValue){        int newValue = 9999;        for(int index = 0; index <= 3; ++index){            for(int digit = 0; digit <= 9; ++digit){                int temp = fixDigit(oldVlaue, index, digit);                if(minValue <= temp && temp <= maxValue && temp < newValue){                    newValue = temp;                }            }        }        return newValue;    }     public static void main(String arg[]){        // 入力を読み込む        Scanner sc = new Scanner(System.in);        int n = Integer.parseInt(sc.nextLine());        List<Integer> arr = new ArrayList<>();        for(int i = 0; i < n; ++i){            arr.add(Integer.parseInt(sc.next()));        }        // 先頭から、「前の数字以上の数でかつ最小の数」になるように決めていく        List<Integer> arr2 = new ArrayList<>();        int minValue = 1000;        int maxValue = 2011;        for(int i = 0; i < n; ++i){            int newValue = changeMinimunValue(arr.get(i), minValue, maxValue);            if(newValue < minValue || maxValue < newValue)                break;            arr2.add(newValue);            minValue = newValue;        }        if(arr2.size() != arr.size()){            System.out.println("No solution");        }else{            arr2.forEach(i -> System.out.println(i));        }    }}
