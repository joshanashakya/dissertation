//package graphs;import java.util.*;public class PW { 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner s=new Scanner(System.in);				int n=s.nextInt();		int m=s.nextInt();				int a[][]=new int[n][m];				for(int i=0;i<n;i++)		{			String str=s.next();			for(int j=0;j<str.length();j++)			{				if(str.charAt(j)=='B')					a[i][j]=1;			}		}				int rs=-1,cs=-1,re=-1,ce=-1,ans_r=0,ans_c=0;				for(int i=0;i<n;i++)		{			for(int j=0;j<m;j++)			{								if(a[i][j]==1)				{					if(rs==-1)						rs=i;					if(cs==-1)						cs=j;											re=i;						ce=j;				}							}						if(rs!=-1)			{								int count=ce-cs+1;				re=rs+count-1;				//System.out.println(rs+" "+re+" "+cs+" "+ce);				ans_r=(rs+re)/2;				ans_c=(cs+ce)/2;				//System.out.println(ans_r);				//System.out.println(ans_c);				break;			}					}				ans_r++;		ans_c++;		System.out.println(ans_r+" "+ans_c);							}		public static long solve(int n, int r)    {          long p = 1, k = 1;        if (n - r < r) {            r = n - r;        }         if (r != 0) {            while (r > 0) {                p *= n;                k *= r;                 long m = __gcd(p, k);                                 p /= m;                k /= m;                 n--;                r--;            }                    }        else {            p = 1;        }                 //System.out.println(p);        return p;    }		public static long __gcd(long n1, long n2)    {        long gcd = 1;         for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0) {                gcd = i;            }        }        return gcd;    }		public static boolean prime(long n)	{		if(n<=2)			return true;				for(int i=2;i<=Math.sqrt(n);i++)		{			if(n%i==0)				return false;		}				return true;			}} 				 	 		   		 			   	    		
