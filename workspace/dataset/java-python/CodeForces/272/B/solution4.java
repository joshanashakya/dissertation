import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     HashMap<Integer, Integer> nums = new HashMap<>();     public void solve() throws IOException{         int n = in.nextInt();        HashMap<Integer, Integer> map = new HashMap<>();        long res = 0;        for(int i = 0; i < n; i++){            int num = in.nextInt();            int y = dfs(num);            res += map.getOrDefault(y, 0);            map.put(y, map.getOrDefault(y, 0) + 1);        }         out.println(res);        return;     }           public int dfs(int num){         int res = 0;         if(nums.containsKey(num)){            return nums.get(num);        }else if(num == 0){            return 0;        }else if(num % 2 == 0){            res = dfs(num / 2);        }else{            res = dfs(num / 2) + 1;        }        nums.put(num, res);        return res;    } }
