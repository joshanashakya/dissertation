import java.util.*;import java.io.*;  public class Forces{ 	public static PrintWriter cout; 	public static int[] dp;	public static void main(String ...arg) throws IOException	{		//Read cin = new Read();		InputReader cin = new InputReader(System.in);		//Scan cin =new Scan();		cout = new PrintWriter(new BufferedOutputStream(System.out));		int l = cin.nextInt();		int d = cin.nextInt();		int v = cin.nextInt();		int g = cin.nextInt();		int r = cin.nextInt(); 		boolean b;		double time = (double)d/v;		double mod = Math.floor(time)%(g+r) + (time-Math.floor(time));		//cout.print(mod + "\n");		if(mod < g)			b = true;		else			b = false; 		if(b)			cout.print((double)l/v);		else			cout.print(time + (g+r-mod) + (double)(l-d)/v);		cout.close(); 	}   	static class InputReader {        final InputStream is;        final byte[] buf = new byte[1024];        int pos;        int size;         public InputReader(InputStream is) {            this.is = is;        }         public int nextInt() {            int c = read();            while (isWhitespace(c))                c = read();            int sign = 1;            if (c == '-') {                sign = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res = res * 10 + c - '0';                c = read();            } while (!isWhitespace(c));            return res * sign;        }         int read() {            if (size == -1)                throw new InputMismatchException();            if (pos >= size) {                pos = 0;                try {                    size = is.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (size <= 0)                    return -1;            }            return buf[pos++] & 255;        }         static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }    static class Scan {        private byte[] buf=new byte[1024];        private int index;        private InputStream in;        private int total;        public Scan()        {            in=System.in;        }        public int scan()throws IOException        {            if(total<0)            throw new InputMismatchException();            if(index>=total)            {                index=0;                total=in.read(buf);                if(total<=0)                return -1;            }            return buf[index++];        }        public int scanInt()throws IOException        {            int integer=0;            int n=scan();            while(isWhiteSpace(n))            n=scan();            int neg=1;            if(n=='-')            {                neg=-1;                n=scan();            }            while(!isWhiteSpace(n))            {                if(n>='0'&&n<='9')                {                    integer*=10;                    integer+=n-'0';                    n=scan();                }                else throw new InputMismatchException();            }            return neg*integer;        }        public double scanDouble()throws IOException        {            double doub=0;            int n=scan();            while(isWhiteSpace(n))            n=scan();            int neg=1;            if(n=='-')            {                neg=-1;                n=scan();            }            while(!isWhiteSpace(n)&&n!='.')            {                if(n>='0'&&n<='9')                {                    doub*=10;                    doub+=n-'0';                    n=scan();                }                else throw new InputMismatchException();            }            if(n=='.')            {                n=scan();                double temp=1;                while(!isWhiteSpace(n))                {                    if(n>='0'&&n<='9')                    {                        temp/=10;                        doub+=(n-'0')*temp;                        n=scan();                    }                    else throw new InputMismatchException();                }            }            return doub*neg;        }        public String scanString()throws IOException        {            StringBuilder sb=new StringBuilder();            int n=scan();            while(isWhiteSpace(n))            n=scan();            while(!isWhiteSpace(n))            {                sb.append((char)n);                n=scan();            }            return sb.toString();        }        private boolean isWhiteSpace(int n)        {            if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)            return true;            return false;        }    } } class Read{    private BufferedReader br;    private StringTokenizer st;     public Read()    { br = new BufferedReader(new InputStreamReader(System.in)); }     String next()    {        while (st == null || !st.hasMoreElements())        {            try {st = new StringTokenizer(br.readLine());}            catch(IOException e)                {e.printStackTrace();}        }        return st.nextToken();    }     int nextInt()    { return Integer.parseInt(next()); }     long nextLong()    { return Long.parseLong(next()); }     double nextDouble()    { return Double.parseDouble(next()); }     String nextLine()    {        String str = "";        try {str = br.readLine();}        catch(IOException e)            {e.printStackTrace();}        return str;    }}  
