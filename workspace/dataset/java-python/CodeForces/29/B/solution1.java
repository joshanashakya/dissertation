import java.util.*;import java.lang.*;import java.io.*; 	public class FastIO{					BufferedReader br;		StringTokenizer st;				public FastIO(){ // constructor						br = new BufferedReader(new InputStreamReader(System.in));		}				String next(){						while (st == null || !st.hasMoreElements()){				try{					st = new StringTokenizer(br.readLine());				}								catch (IOException e){					e.printStackTrace();				}			}			return st.nextToken();		}				int nextInt(){						return Integer.parseInt(next());		}				long nextLong(){						return Long.parseLong(next());		}				double nextDouble(){			return Double.parseDouble(next());		} 		String nextLine(){						String str = "";			try{								str = br.readLine();			}			catch (IOException e){								e.printStackTrace();			}			return str;		}				static int gcd(int a, int b) {						if(b == 0) {				return a;			}						return gcd(b, a % b);		}			public static void main(String[] args) throws IOException {				FastIO io = new FastIO();				// int n = io.nextInt(); -> for int		// double d = io.nextDouble(); -> for double		// String ch = io.next(); -> for one word		// String str = io.nextLine(); -> for the entire line				double l = io.nextDouble();		double d = io.nextDouble();		double v = io.nextDouble();				double g = io.nextDouble();		double r = io.nextDouble();				double time_to_reach_tl = d / v;				if(time_to_reach_tl < g) {			System.out.println(l / v);		}		else {						int f = 0;			double tl = g;			while(true) {								if((f & 1) == 0) {					if(0 <= time_to_reach_tl - tl &&  time_to_reach_tl - tl < r) {						tl = tl + r;						double ans = tl + (l - d) / v;						System.out.println(ans);						break;					}					tl = tl + r;				}				else {					if(0 <= time_to_reach_tl - tl &&  time_to_reach_tl - tl < g) {						double ans = l / v;						System.out.println(ans);						break;					}					tl = tl + g;				}				f++;			}		} 	}}
