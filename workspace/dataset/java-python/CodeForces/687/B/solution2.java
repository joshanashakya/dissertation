import java.io.*;import java.lang.annotation.ElementType;import java.math.BigDecimal;import java.math.BigInteger;import java.util.Arrays;import java.util.Comparator;import java.util.Scanner;  public class  Main{    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastInput input = new FastInput(inputStream);        FastOutput out = new FastOutput(outputStream);        int n= input.scanInt();        int k= input.scanInt();        int a[]=new int [n];        for(int i=0;i<n;i++){            a[i]= input.scanInt();        }        int c[]=new int [200];        c[0]=2;        c[1]=3;        c[2]=5;        c[3]=7;        int len=4;        for(int i=10;i<=1000;i+=10){            boolean is=true;            for(int j=0;j<len;j++){                if((i+1)%c[j]==0) {                    is=false;                    break;                }            }            if(is){                c[len++]=i+1;            }            is=true;            for(int j=0;j<len;j++){                if((i+3)%c[j]==0) {                    is=false;                    break;                }            }            if(is){                c[len++]=i+3;            }            is=true;            for(int j=0;j<len;j++){                if((i+7)%c[j]==0) {                    is=false;                    break;                }            }            if(is){                c[len++]=i+7;            }            is=true;            for(int j=0;j<len;j++){                if((i+9)%c[j]==0) {                    is=false;                    break;                }            }            if(is){                c[len++]=i+9;            }        }         int b[][]=new int [100][2];        int poi=0;        for(int i=0;i<len;i++){            if(k%c[i]==0){                b[poi][0]=c[i];                int time=0;                for(;k%c[i]==0;){                    time++;                    k=k/c[i];                }                b[poi++][1]=time;            }        }         if(k!=1){            b[poi][0]=k;            b[poi++][1]=1;        }        boolean eno[]=new boolean[poi];        Arrays.sort(a);        int x=0;        for(int i=0;i<n;i++){            if(a[i]!=x){                x=a[i];                for(int j=0;j<poi;j++){                    if(!eno[j]){                        int sum=0;                        for(;b[j][1]!=0&&a[i]%b[j][0]==0;){                            a[i]/=b[j][0];                            sum++;                        }                        if(sum>=b[j][1]) eno[j]=true;                        if(a[i]==1) break;                    }                }            }        }        boolean ok=true;        for(int i=0;i<poi;i++){            if(!eno[i]) {                ok=false;                   }         }        if(ok){            System.out.println("YES");        }        else{            System.out.println("NO");        }        out.close();    }    static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;        public FastInput(InputStream is) {            this.is = is;        }        private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }        public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }        public String next() {            return readString();        }        public int scanInt() {            int sign = 1;            skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }            int val = 0;            while (next >= '0' && next <= '9') {                val = val * 10 + next - '0';                next = read();            }            return (sign*val);        }         public String readString(StringBuilder builder) {            skipBlank();            while (next > 32) {                builder.append((char) next);                next = read();            }            return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }    static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }        public FastOutput append(int c) {            cache.append(c);            return this;        }        public FastOutput println(int c) {            return append(c).println();        }        public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());//            flush();            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }    }}
