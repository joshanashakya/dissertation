//  /package Mathema/tic/al; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap; public class ChineseRemainder {    public static HashMap<Integer,Integer> getPower(int n,int sieve[]){        int copy=n;        HashMap<Integer,Integer> map=new HashMap<>();        while(n!=1){            if(!map.containsKey(sieve[n]))            map.put(sieve[n],1);            else{                map.put(sieve[n],map.get(sieve[n])+1);            }            n/=sieve[n];        }        return map;    }    public static void main(String[] args)throws IOException {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        int seive[]=new int[1000001];        ArrayList<Integer> primes=new ArrayList<>();        for(int i=2;i<=1000000;i++){            if(seive[i]==0){                seive[i]=i;                for(int j=2*i;j<=1000000;j+=i){                    seive[j]=i;                }            }        }        String line[]=br.readLine().split(" ");        int n=Integer.parseInt(line[0]);        int k=Integer.parseInt(line[1]);        line=br.readLine().split(" ");        int a[]=new int[n];        for(int i=0;i<n;i++){            a[i]=Integer.parseInt(line[i]);        }        HashMap<Integer,Integer> reqd=getPower(k,seive);//        System.out.println(reqd.toString());        boolean flag=true;        for(int key:reqd.keySet()){            flag=false;            int temp=reqd.get(key);            for(int i=0;i<n;i++){                int count=0;                int u=a[i];                while(u%key==0&&u!=1){                    u/=key;                    count++;                }                if(count>=temp){                    flag=true;                    break;                }            }            if(!flag){                break;            }        }        if(flag){            System.out.println("Yes");        }        else{            System.out.println("No");        }    }}
