import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class CF23A {    public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);        char[] s = sc.nextToken().toCharArray();        pw.println(solve(s));        pw.flush();    }     static int solve(char[] s) {        for (int len = s.length - 1; len > 0; len--)            for (int i = 0; i <= s.length - len; i++)                for (int k = i + 1; k <= s.length - len; k++)                    if (match(s, k, i, len)) {                        return len;                    }        return 0;    }     static boolean match(char[] s, int st1, int st2, int len) {        for (int i = 0; i < len; i++)            if (s[st1 + i] != s[st2 + i])                return false;        return true;    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
