import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*; public class Solution {    public static void dfs(int arr[][],int[] v,int n,int h ,int r){       v[h]=r;       boolean child=false;       for(int i=0;i<n;i++){           if(v[i]==-1 && arr[h][i]==1){           dfs(arr,v,n,i,r);           child=true;           }       }       if(child==false)       return ;          }                            public static void main(String[] args) throws IOException     {          BufferedReader br = new BufferedReader(                               new InputStreamReader(System.in));                  int t=Integer.parseInt(br.readLine());                  for(int i=0;i<t;i++){                          int n=Integer.parseInt(br.readLine());                          if(n<2){                              System.out.println("0");                          }else{                              System.out.println(n-2);                          }                  }                            }                             }    class act{    int c;    int p;    int in;    public act(int x,int y,int z){        c=x;        p=y;        in=z;    }} class table{    int n;    int i;    public table(int x,int y){        n=x;        i=y;    }}class Sort implements Comparator<act> {     // Used for sorting in ascending order of     // roll number     public int compare(act a, act b)     {         if(a.p==b.p)        return a.c - b.c;         else        //decsending order        return b.p-a.p;    } } class SortT implements Comparator<table> {     // Used for sorting in ascending order of     // roll number     public int compare(table a, table b)     {                 //acsending order        return a.n-b.n;    } }
