import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer; public class CF0729B_Spotlights {	static class Scanner {		BufferedReader br;		StringTokenizer st; 		public Scanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	public static int solution(int n, int m, boolean[][] actors) {		int[][] ans = new int[n][m];		// left 		for (int i = 0; i < n; i++) {			boolean found = false;			for (int j = 0; j < m; j++) {				if (actors[i][j])					found = true;				if (!actors[i][j] && found)					ans[i][j]++;			}		} 		// right 		for (int i = 0; i < n; i++) {			boolean found = false;			for (int j = m - 1; j >= 0; j--) {				if (actors[i][j])					found = true;				if (!actors[i][j] && found)					ans[i][j]++;			}		} 		// down 		for (int j = 0; j < m; j++) {			boolean found = false;			for (int i = 0; i < n; i++) {				if (actors[i][j])					found = true;				if (!actors[i][j] && found)					ans[i][j]++;			}		} 		// up 		for (int j = 0; j < m; j++) {			boolean found = false;			for (int i = n - 1; i >= 0; i--) {				if (actors[i][j])					found = true;				if (!actors[i][j] && found)					ans[i][j]++;			}		}		int fin = 0;		for (int i = 0; i < n; i++) {			for (int j = 0; j < m; j++) {				fin += ans[i][j];			}		}		return fin;	} 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner();		int n = scanner.nextInt();		int m = scanner.nextInt();		boolean[][] actors = new boolean[n][m];		for (int i = 0; i < n; i++) {			for (int j = 0; j < m; j++) {				actors[i][j] = (scanner.nextInt() == 1) ? true : false;			}		}		System.out.println(solution(n, m, actors));		int a = 0;		a = Math.max(a, 5);	} }
