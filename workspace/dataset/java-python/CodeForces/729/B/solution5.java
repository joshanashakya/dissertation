import java.io.*;import java.util.StringTokenizer;import java.util.*;import java.lang.*; public class Spotlights {    public static void main(String[] args) throws IOException {        //BufferedReader f = new BufferedReader(new FileReader("feast.in"));        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));        //PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("feast.out")));        //PrintWriter out = new PrintWriter(System.out, true);        StringTokenizer k = new StringTokenizer(f.readLine());         int n = Integer.parseInt(k.nextToken());        int m = Integer.parseInt(k.nextToken());        four_tuple stage[][] = new four_tuple[n][m];        int row_counts[] = new int[n];        int col_counts[] = new int[m];         for (int i = 0; i < n; i++) {            k = new StringTokenizer(f.readLine());            for(int j=0; j<m; j++){                stage[i][j] = new four_tuple(0,0,0, 0, Integer.parseInt(k.nextToken()));                if(stage[i][j].type == 1){                    row_counts[i]++;                    col_counts[j]++;                }            }        }        for(int i=0; i<n; i++){            stage[i][0].right = row_counts[i];            stage[i][0].left =0;        }        for(int j=0; j<m; j++){            stage[0][j].down = col_counts[j];            stage[0][j].up = 0;        }         /*for(int i=0; i<n; i++) {            for (int j = 0; j < m; j++) {                System.out.print(stage[i][j]);            }            System.out.println();        }         System.out.println();*/         int total= 0;        for(int i=0; i<n; i++){            for(int j=0; j<m; j++){                if(j>0 && stage[i][j-1].type ==1){                    stage[i][j].left = stage[i][j-1].left+1;                    stage[i][j].right = stage[i][j-1].right-1;                }                else if(j>0 && stage[i][j-1].type ==0){                    stage[i][j].left = stage[i][j-1].left;                    stage[i][j].right = stage[i][j-1].right;                }                 if(i>0 && stage[i-1][j].type==1){                    stage[i][j].up = stage[i-1][j].up+1;                    stage[i][j].down = stage[i-1][j].down-1;                }                else if(i>0 && stage[i-1][j].type ==0){                    stage[i][j].up = stage[i-1][j].up;                    stage[i][j].down = stage[i-1][j].down;                }                if(stage[i][j].type ==0){                    total += stage[i][j].get_contr();                }            }        }        /*for(int i=0; i<n; i++) {            for (int j = 0; j < m; j++) {                System.out.print(stage[i][j]);            }            System.out.println();        }*/         System.out.println(total);    } }class four_tuple{    int left, right, up, down, type;    public  four_tuple(int l, int r, int u, int d, int t){        left =l;        right =r;        up = u;        down =d;        type =t;    }    public int get_contr(){        int ret =0;        if(left>0){            ret++;        }        if(right>0){            ret++;        }        if(up>0){            ret++;        }        if(down>0){            ret++;        }        return ret;    }    public String toString(){        return "" + "(" + left + ", " + right + ", " + up + ", " + down + ", " + type + ")";    } }  
