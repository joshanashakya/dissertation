import java.util.*;import java.io.*;import java.math.*; public class First{          public static void process()throws IOException    {         int n = ni();         int m = ni();         int a[][] = new int[n][m];         int h[][] = new int[n][m];         int v[][] = new int[n][m];         for(int i=0;i<n;i++)        {             for(int j=0;j<m;j++)             {                  a[i][j] = ni();             }        }                 for(int i=0;i<n;i++)        {             for(int j=0;j<m;j++)             {                  if(j==0)                  {                      if(a[i][j]==1)                      {                          h[i][j]=1;                      }                      else                      {                           h[i][j]=0;                      }                  }                  else                  {                       if(a[i][j]==1)                       {                           h[i][j] = h[i][j-1]+1;                       }                       else{                           h[i][j] = h[i][j-1];                       }                  }             }        }        for(int j=0;j<m;j++)        {             for(int i=0;i<n;i++)             {                  if(i==0)                  {                       if(a[i][j]==1)                       {                            v[i][j]=1;                       }                       else                       {                           v[i][j]=0;                       }                  }                  else                  {                       if(a[i][j]==1)                       {                            v[i][j] = v[i-1][j]+1;                       }                       else                       {                            v[i][j] = v[i-1][j];                       }                  }             }        }         // pn("Vertical matrix = ");        // for(int i=0;i<n;i++)        // {        //      for(int j=0;j<m;j++)        //      {        //           p(v[i][j]+" ");        //      }        //      pn("");        // }         // pn("Horizontal matrix = ");        // for(int i=0;i<n;i++)        // {        //      for(int j=0;j<m;j++)        //      {        //           p(h[i][j]+" ");        //      }        //      pn("");        // }         // pn("Printing answer matrix\n");         int count=0;        for(int i=0;i<n;i++)        {              for(int j=0;j<m;j++)              {                   if(a[i][j]==0)                   {                       int x=0;                       if(i>0)                       {                            if(v[i][j]>0)                            {                                 count++;                                 x++;                            }                       }                       if(i<n-1)                       {                            if(v[n-1][j]-v[i][j] > 0)                            {                                 count++;                                 x++;                            }                       }                       if(j>0)                       {                            if(h[i][j]>0)                            {                                 count++;                                 x++;                            }                       }                       if(j<m-1)                       {                            if(h[i][m-1]-h[i][j] > 0)                            {                                 count++;                                 x++;                            }                       }                       // p(x+" ");                   }              }              // pn("");        }        pn(count);           }     	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);     //     long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}	
