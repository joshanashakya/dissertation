import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BSameParitySummands solver = new BSameParitySummands();        solver.solve(1, in, out);        out.close();    }     static class BSameParitySummands {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int t = in.nextInt();            while (t-- > 0) {                long n = in.nextLong();                int k = in.nextInt();                //if sum is even                if (n % 2 == 0) {                    //k is even                    if (k % 2 == 0) {                        long min = k;                        if (n < min) {                            out.println("NO");                        } else {                            out.println("YES");                            for (int i = 0; i < k - 1; i++) {                                out.print(1 + " ");                            }                            long rem = n - k + 1;                            out.println(rem);                        }                     }                    //k is odd                    else {                        long min = 2 * k;                        if (min > n) {                            out.println("NO");                        } else {                            out.println("YES");                            for (int i = 0; i < k - 1; i++) {                                out.print(2 + " ");                            }                            long rem = n - 2 * (k - 1);                            out.println(rem);                        }                    }                }                //n is odd                else {                    //k is even                    if (k % 2 == 0) {                        out.println("NO");                    }                    //k is odd                    else {                        if (n < k) {                            out.println("NO");                        } else {                            out.println("YES");                            for (int i = 0; i < k - 1; i++) {                                out.print(1 + " ");                            }                            long rem = n - k + 1;                            out.println(rem);                        }                    }                }            }        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
