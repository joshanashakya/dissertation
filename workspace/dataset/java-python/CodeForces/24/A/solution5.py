import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictI = lambda : int(sys.stdin.buffer.readline())Neo = lambda : list(map(int, sys.stdin.buffer.readline().split()))n = I()cost = defaultdict(list)G = defaultdict(list)C = defaultdict(list)for _ in range(n):    a,b,c = Neo()    cost[(a,b)] += [0,c]    cost[(b,a)] += [1,c]    G[a].append(b)    G[b].append(a)vis = [0]*(n+1)path = []def hello(node):    path.append(node)    vis[node] = 1    for i in G[node]:        if not vis[i]:            hello(i)hello(1)path.append(path[0])Ans1,Ans2 = 0,0for i,j in zip(path,path[1:]):    if cost[(i,j)][0] == 0:        Ans1 += cost[(i,j)][1]    else:        Ans2 += cost[(i,j)][1]print(min(Ans1,Ans2))                    Â 
