import java.io.IOException;import java.util.*;import java.util.Arrays;import java.util.Scanner;Â public class Bit_year{	static LinkedList<Integer>[] adj;	static LinkedList<Integer>[] direct;	static int[][] cost;	static boolean[] visited ;	static int piv;	public static int process(int u)	{		visited[u]=true;		int val = 0;				if(visited[adj[u].get(0)] && visited[adj[u].get(1)])			{				if(direct[u].contains(piv))return 0;				else return cost[piv][u];			}			else			{				int next = (visited[adj[u].get(0)])?adj[u].get(1):adj[u].get(0);				if(!direct[u].contains(next))					val += cost[next][u];				val += process(next);			}				return val;							}	public static void main(String[] args) throws IOException {				Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		cost = new int[101][101];		adj  = new LinkedList[n+1];		direct= new LinkedList[n+1];		for(int i=1;i<=n;i++) {			adj[i]=new LinkedList();			direct[i]=new LinkedList();		}		int start=-1;		for(int i=1;i<=n;i++)		{			int u = sc.nextInt();			int v = sc.nextInt();			int c = sc.nextInt();			adj[u].add(v);adj[v].add(u);			direct[u].add(v);			if(direct[u].size()==2)start=u;			cost[u][v]=c;		}		visited = new boolean[n+1];		if(start!=-1)		{		piv = start;		visited[start]=true;		start = direct[piv].get(0);		int sum1 = process(direct[piv].get(0));				Arrays.fill(visited, false);		visited[piv]=true;		start = direct[piv].get(1);		int sum2 = process(direct[piv].get(1));				System.out.println(Math.min(sum1, sum2));		}		else			System.out.println(0);	}}
