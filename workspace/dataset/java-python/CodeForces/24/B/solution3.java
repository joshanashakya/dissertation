// package Practice1.CF24; import java.util.*; public class CF024B {    static int[] arr1 = {25, 18, 15, 12, 10, 8, 6, 4, 2, 1};    public static void main(String[] args) {        Scanner s = new Scanner(System.in);        int t = s.nextInt();        HashMap<String,pair> map = new HashMap<>();        HashMap<String,par> map1 = new HashMap<>();        while (t-- > 0) {            int n = s.nextInt();            for (int i = 0; i < n; i++) {                String str = s.next();                if(map.containsKey(str)){                    pair p = map.get(str);                    par p1 = map1.get(str);                    if(i < 10){                        p.score += arr1[i];                        p.arr[i]++;                        p1.arr[i]++;                        p1.score += arr1[i];                        map.put(str,p);                        map1.put(str,p1);                    } else {                        p.arr[i]++;                        p1.arr[i]++;                        map.put(str,p);                        map1.put(str,p1);                    }                } else {                    pair p = new pair(0);                    par p1 = new par(0);                    if(i < 10){                        p.score += arr1[i];                        p.arr[i]++;                        p1.arr[i]++;                        p1.score += arr1[i];                        map.put(str,p);                        map1.put(str,p1);                    } else {                        p.arr[i]++;                        p1.arr[i]++;                        map.put(str,p);                        map1.put(str,p1);                    }                }            }         } //        System.out.println(map);         ArrayList<String> l = new ArrayList<>();        ArrayList<String> l1 = new ArrayList<>();        map.entrySet().stream()                .sorted((k1, k2) -> -k1.getValue().compareTo(k2.getValue()))                .forEach(k ->l.add(k.getKey()));         map1.entrySet().stream()                .sorted((k1, k2) -> -k1.getValue().compareTo(k2.getValue()))                .forEach(k -> l1.add(k.getKey()));         System.out.println(l.get(0));        System.out.println(l1.get(0));    }     private static class pair implements Comparable<pair>{        int score;        int[] arr;         public pair(int score) {            this.score = score;            this.arr = new int[50];        }         @Override        public String toString() {            return this.score + "->" + Arrays.toString(this.arr);        }         @Override        public int compareTo(pair r) {            if(this.score == r.score) {                for (int i = 0; i < 50; i++) {                    if(this.arr[i] == r.arr[i]){                        continue;                    }else{                        return Integer.compare(this.arr[i],r.arr[i]);                    }                }            }            return Integer.compare(this.score,r.score);        }    }      private static class par implements Comparable<par>{        int score;        int[] arr;         public par(int score) {            this.score = score;            this.arr = new int[50];        }         @Override        public String toString() {            return this.score + "->" + Arrays.toString(this.arr);        }         @Override        public int compareTo(par r) {            if(this.arr[0] == r.arr[0]) {                if (this.score == r.score) {                    for (int i = 0; i < 50; i++) {                        if (this.arr[i] == r.arr[i]) {                            continue;                        } else {                            return Integer.compare(this.arr[i], r.arr[i]);                        }                    }                }                return Integer.compare(this.score, r.score);            }            return Integer.compare(this.arr[0],r.arr[0]);        }    }}
