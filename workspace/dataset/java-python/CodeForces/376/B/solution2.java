import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Random;import java.util.StringTokenizer; public class Main {	private static final Random random = new Random();	static PrintWriter out = new PrintWriter(System.out); 	public static void main(String[] args) throws FileNotFoundException {		// TODO Auto-generated method stub		Scanner sc = new Scanner(System.in);				int n = sc.nextInt(), m = sc.nextInt();				int[][] persons = new int[n][2];				for(int i = 0;i < m;i++) {			int a = sc.nextInt() - 1, b = sc.nextInt() - 1, c = sc.nextInt();			persons[a][1] += c;			persons[b][0] += c;						if(persons[a][0] >= persons[a][1]) {				persons[a][0] -= persons[a][1];				persons[a][1] = 0;			}else {				persons[a][1] -= persons[a][0];				persons[a][0] = 0;			}						if(persons[b][0] >= persons[b][1]) {				persons[b][0] -= persons[b][1];				persons[b][1] = 0;			}else {				persons[b][1] -= persons[b][0];				persons[b][0] = 0;			}		}				int res = 0;		for(int i = 0;i < n;i++) res += persons[i][1];		out.println(res); 		out.flush();	} 	private static void ruffleSort(long[] a) {		int n = a.length;// shuffle, then sosrt		for (int i = 0; i < n; i++) {			int oi = random.nextInt(n);			long temp = a[oi];			a[oi] = a[i];			a[i] = temp;		}		java.util.Arrays.sort(a);	} 	private static class Scanner {		public BufferedReader reader;		public StringTokenizer st; 		public Scanner(InputStream stream) throws FileNotFoundException {			reader = new BufferedReader(new InputStreamReader(stream));			st = null;		} 		public String next() {			while (st == null || !st.hasMoreTokens()) {				try {					String line = reader.readLine();					if (line == null)						return null;					st = new StringTokenizer(line);				} catch (Exception e) {					throw (new RuntimeException());				}			}			return st.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		}	} }
