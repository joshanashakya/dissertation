import javafx.geometry.Point2D; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;  public class Meeting {        public static void main(String[] args) {        FastReader reader = new FastReader();         int x1 = reader.nextInt();        int y1 = reader.nextInt();        int x2 = reader.nextInt();        int y2 = reader.nextInt();         List<Point2D> list = new ArrayList<>();        Set<Point> set = new HashSet<>();         int n = reader.nextInt();        for (int i = 0; i < n; i++) {            int x = reader.nextInt();            int y = reader.nextInt();            int r = reader.nextInt();            set.add(new Point(x, y, r));        }        int x_min = Math.min(x1, x2), x_max = Math.max(x1, x2);        int y_min = Math.min(y1, y2), y_max = Math.max(y1, y2);        for (int i = y_min; i <= y_max; i++)            list.add(new Point2D(x_min, i));        for (int i = y_min; i <= y_max; i++)            list.add(new Point2D(x_max, i));        for (int i = x_min+1; i < x_max; i++)            list.add(new Point2D(i, y_min));        for (int i = x_min+1; i < x_max; i++)            list.add(new Point2D(i, y_max));        int count = 0;        boolean isWarm = false;        for (Point2D point: list) {            for (Point p: set) {                double dist = point.distance(p.x, p.y);                if (dist <= p.r) {                    isWarm = true;                    break;                }            }            if (!isWarm) count++;            isWarm = false;        }        System.out.println(count);    }     static class Point {        int x, y, r;         public Point(int x, int y, int r) {            this.x = x;            this.y = y;            this.r = r;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (o == null || getClass() != o.getClass()) return false;            Point point = (Point) o;            return x == point.x && y == point.y;        }         @Override        public int hashCode() {            return Objects.hash(x, y);        }    }     static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            }            catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
