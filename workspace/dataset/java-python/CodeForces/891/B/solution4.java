import java.io.*;import java.util.ArrayList;import java.util.Arrays;import java.util.StringTokenizer;import java.util.List; import java.util.*; public class realfast implements Runnable   {    private static final int INF = (int) 1e9;    long in= (long)Math.pow(10,9)+7;    long fac[]= new long[3000];    public  void solve() throws IOException     {        int n = readInt();        int a[]= new int[n];        int b[]= new int[n];        for(int i=0;i<n;i++)        {            a[i]= readInt();            b[i]=a[i];        }        Arrays.sort(b);        for(int i=0;i<n;i++)        {            if(a[i]==b[n-1])            {                out.print(b[0]+" ");            }            else            {                 for(int j =0;j<n;j++)                {                    if(b[j]>a[i])                    {                        out.print(b[j]+" ");                        break;                    }                }             }        }    }        public int gcd(int a , int b )    {      if(a<b)      {        int t =a;        a=b;        b=t;      }      if(a%b==0)        return b ;      return gcd(b,a%b);    }    public long pow(long n , long p,long m)    {         if(p==0)            return 1;        long val = pow(n,p/2,m);;        val= (val*val)%m;        if(p%2==0)            return val;        else            return (val*n)%m;    }            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    public static void main(String[] args) {        new Thread(null, new realfast(), "", 128 * (1L << 20)).start();    }     private static final boolean ONLINE_JUDGE = System.getProperty("ONLINE_JUDGE") != null;    private BufferedReader reader;    private StringTokenizer tokenizer;    private PrintWriter out;     @Override    public void run() {        try {            if (ONLINE_JUDGE || !new File("input.txt").exists()) {                reader = new BufferedReader(new InputStreamReader(System.in));                out = new PrintWriter(System.out);            } else {                reader = new BufferedReader(new FileReader("input.txt"));                out = new PrintWriter("output.txt");            }            solve();        } catch (IOException e) {            throw new RuntimeException(e);        } finally {            try {                reader.close();            } catch (IOException e) {                // nothing            }            out.close();        }    }     private String readString() throws IOException {        while (tokenizer == null || !tokenizer.hasMoreTokens()) {            tokenizer = new StringTokenizer(reader.readLine());        }        return tokenizer.nextToken();    }     @SuppressWarnings("unused")    private int readInt() throws IOException {        return Integer.parseInt(readString());    }     @SuppressWarnings("unused")    private long readLong() throws IOException {        return Long.parseLong(readString());    }     @SuppressWarnings("unused")    private double readDouble() throws IOException {        return Double.parseDouble(readString());    }}class edge implements Comparable<edge>{    int val ;    int color;        edge(int u, int v)    {       this.val=u;       this.color=v;    }    public int compareTo(edge e)    {        return this.val-e.val;    }}
