import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.util.Random;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BGluttony solver = new BGluttony();            solver.solve(1, in, out);            out.close();        }    }     static class BGluttony {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int[] a = new int[n];            int[] indices = new int[n];            for (int i = 0; i < n; i++) {                a[i] = in.readInt();                indices[i] = i;            }            CompareUtils.quickSort(indices, (i, j) -> Integer.compare(a[i], a[j]), 0, n);            int[] b = new int[n];            for (int i = 0; i < n; i++) {                b[indices[DigitUtils.mod(i - 1, n)]] = a[indices[i]];            }             for (int x : b) {                out.append(x).append(' ');            }        }     }     static class CompareUtils {        private static final int THRESHOLD = 4;         private CompareUtils() {        }         public static void insertSort(int[] data, IntegerComparator cmp, int l, int r) {            for (int i = l + 1; i <= r; i++) {                int j = i;                int val = data[i];                while (j > l && cmp.compare(data[j - 1], val) > 0) {                    data[j] = data[j - 1];                    j--;                }                data[j] = val;            }        }         public static void quickSort(int[] data, IntegerComparator cmp, int f, int t) {            if (t - f <= THRESHOLD) {                insertSort(data, cmp, f, t - 1);                return;            }            SequenceUtils.swap(data, f, Randomized.nextInt(f, t - 1));            int l = f;            int r = t;            int m = l + 1;            while (m < r) {                int c = cmp.compare(data[m], data[l]);                if (c == 0) {                    m++;                } else if (c < 0) {                    SequenceUtils.swap(data, l, m);                    l++;                    m++;                } else {                    SequenceUtils.swap(data, m, --r);                }            }            quickSort(data, cmp, f, l);            quickSort(data, cmp, m, t);        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class SequenceUtils {        public static void swap(int[] data, int i, int j) {            int tmp = data[i];            data[i] = data[j];            data[j] = tmp;        }     }     static class RandomWrapper {        private Random random;        public static final RandomWrapper INSTANCE = new RandomWrapper(new Random());         public RandomWrapper() {            this(new Random());        }         public RandomWrapper(Random random) {            this.random = random;        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 20];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class Randomized {        public static int nextInt(int l, int r) {            return RandomWrapper.INSTANCE.nextInt(l, r);        }     }     static class DigitUtils {        private DigitUtils() {        }         public static int mod(int x, int mod) {            x %= mod;            if (x < 0) {                x += mod;            }            return x;        }     }     static interface IntegerComparator {        public int compare(int a, int b);     }} 
