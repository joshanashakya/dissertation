import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solve {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static void run(long s, long e) {		NumberFormat formatter = new DecimalFormat("#0.00000");		System.out.print("Execution time is " + formatter.format((e - s) / 1000d) + " seconds");		}		static class FastReader {	    BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;	    }		static int gcd(int a, int b) { 		if (b == 0) return a; 		return gcd(b, a % b);  		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }		static void solve(String[] s) {			int n = s.length;			for(int i= 0;i<n-1;i++) {				for(int j = i+1;j<n;++j) {					char[] a = s[i].toCharArray();					char[] b = s[j].toCharArray();										if(Character.getNumericValue(a[0]) > Character.getNumericValue(b[0])) {					char temp = a[0];					a[0] = b[0];					b[0] = temp;										 temp = a[1];					a[1] = b[1];					b[1] = temp;										s[i] = String.valueOf(a);					s[j] = String.valueOf(b);				}			}			}			int c1 = 1,c2 = 1,i = 0,j = 1, min = Integer.MAX_VALUE, p = 0;			char x = 0;			char y = 0;			while(j < n) {					char a = s[i].charAt(0);					char b = s[j].charAt(0);					char c = s[i].charAt(1);					char d = s[j].charAt(1);										if(i == 0) {						x = c;						p = Character.getNumericValue(a);					}					if(Character.getNumericValue(a) == Character.getNumericValue(b) && c == d) {						c1++;					}					else if(Character.getNumericValue(a) == Character.getNumericValue(b) - 1 && c == d) {						c2++;					}					else if(x == d){						min = Math.min(min, Character.getNumericValue(b) - p);					}					if(c == d) {						min = Math.min(min, Character.getNumericValue(b) - Character.getNumericValue(a));					}					i++;					j++;				}			if(c1 == 3 || c2 == 3) {				out.println(0);			}			else {				if(c1 == 2 || c2 == 2 || min <= 2) {					out.println(1);				}				else {					out.println(2);				}			}		}		public static void main(String args[]) throws IOException {	    FastReader sc = new FastReader();	    long s1 = System.currentTimeMillis();	    String[] s = {sc.next(), sc.next(), sc.next()};	    solve(s);	    flush();	    long e = System.currentTimeMillis();//	    run(s1,e);	    }	}						
