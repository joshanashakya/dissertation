import java.io.*;import java.util.*;import java.math.*;import java.lang.*; import static java.lang.Math.*; public class Solution implements Runnable {	static class InputReader 	{		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars;		private SpaceCharFilter filter;		private BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 		public InputReader(InputStream stream) 		{			this.stream = stream;		}				public int read()		{			if (numChars==-1) 				throw new InputMismatchException();            			if (curChar >= numChars) 			{				curChar = 0;				try				{					numChars = stream.read(buf);				}				catch (IOException e)				{					throw new InputMismatchException();				}                				if(numChars <= 0)               					return -1;			}			return buf[curChar++];		}     		public String nextLine()		{			String str = "";			try			{				str = br.readLine();			}			catch (IOException e)			{				e.printStackTrace();			}				return str;		}		public int nextInt() 		{			int c = read();            			while(isSpaceChar(c)) 				c = read();					int sgn = 1;        			if (c == '-') 			{				sgn = -1;				c = read();			}            			int res = 0;			do			{				if(c<'0'||c>'9') 					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			while (!isSpaceChar(c));         			return res * sgn;		}        		public long nextLong() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-')			{				sgn = -1;				c = read();			}			long res = 0;						do 			{				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}				while (!isSpaceChar(c));				return res * sgn;		}				public double nextDouble() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-')			{				sgn = -1;				c = read();			}			double res = 0;			while (!isSpaceChar(c) && c != '.') 			{				if (c == 'e' || c == 'E')					return res * Math.pow(10, nextInt());				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			if (c == '.') 			{				c = read();				double m = 1;				while (!isSpaceChar(c))				{					if (c == 'e' || c == 'E')						return res * Math.pow(10, nextInt());					if (c < '0' || c > '9')						throw new InputMismatchException();					m /= 10;					res += (c - '0') * m;					c = read();				}			}			return res * sgn;		}    		public String readString() 		{			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do 			{				res.appendCodePoint(c);				c = read();			} 			while (!isSpaceChar(c));            			return res.toString();		}     		public boolean isSpaceChar(int c) 		{			if (filter != null)				return filter.isSpaceChar(c);			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}     		public String next()		{			return readString();		}        		public interface SpaceCharFilter		{			public boolean isSpaceChar(int ch);		}				public int[] readint(int st,int n){		    int[] arr=new int[n+st];		    for(int i=st;i<n+st;i++) arr[i]=nextInt();		    return arr;		}				public long[] readlong(int st,int n){		    long[] arr=new long[n+st];		    for(int i=st;i<n+st;i++) arr[i]=nextLong();		    return arr;		}	}	public static void main(String args[]) throws Exception 	{		new Thread(null, new Solution(),"Main",1<<27).start();	}			public static long gcd(long a, long b) 	{ 		if (a == 0) 			return b; 		return gcd(b % a, a); 	}   	public static long findGCD(long arr[], int n) 	{ 		long result = arr[0]; 		for (int i = 1; i < n; i++) 			result = gcd(arr[i], result); 		return result; 	}	 		static void sortbycolomn(long arr[][], int col)    {                  Arrays.sort(arr, new Comparator<long[]>() {                       @Override                                   public int compare(final long[] entry1,                               final long[] entry2) {                           if (entry1[col] > entry2[col])                 return 1;             else                return -1;           }         });       } 		public void run()	{		InputReader in = new InputReader(System.in);		PrintWriter w = new PrintWriter(System.out);				String s1=in.next(),s2=in.next(),s3=in.next();		int[][] arr=new int[10][3];		if(s1.charAt(1)=='m') arr[s1.charAt(0)-48][0]++;		else if(s1.charAt(1)=='p') arr[s1.charAt(0)-48][1]++;		else arr[s1.charAt(0)-48][2]++;				if(s2.charAt(1)=='m') arr[s2.charAt(0)-48][0]++;		else if(s2.charAt(1)=='p') arr[s2.charAt(0)-48][1]++;		else arr[s2.charAt(0)-48][2]++;				if(s3.charAt(1)=='m') arr[s3.charAt(0)-48][0]++;		else if(s3.charAt(1)=='p') arr[s3.charAt(0)-48][1]++;		else arr[s3.charAt(0)-48][2]++;				int min = Integer.MAX_VALUE;				for(int i=1;i<10;i++){		    for(int j=0;j<3;j++)		        min = Math.min(min,3-arr[i][j]);		}		if(min==1 || min==0)		    w.println(min);		else{		    int flag=2;		    for(int i=0;i<3;i++){		        for(int j=1;j<8;j++){		            if(arr[j][i]!=0 && arr[j+1][i]!=0 && arr[j+2][i]!=0){		                flag=0;		                break;		            }		            else if(arr[j][i]!=0 && arr[j+1][i]!=0){		                flag=1;		                break;		            }else if(arr[j][i]!=0 && arr[j+2][i]!=0){		                flag=1;		                break;		            }		        }		    }		    if(flag==2){		        if(arr[8][0]!=0 && arr[9][0]!=0)   flag=1;		        if(arr[8][1]!=0 && arr[9][1]!=0)   flag=1;		        if(arr[8][2]!=0 && arr[9][2]!=0)   flag=1;		    }		    w.println(flag);		}				w.flush();		w.close();	}}
