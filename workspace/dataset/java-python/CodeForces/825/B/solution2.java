import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int[] dx = {1, -1, 0, 0, 1, -1, -1, 1};    int[] dy = {0, 0, -1, 1, -1, 1, -1, 1};    int N = 10;    int M = 10;    void run(FastScanner in, PrintWriter out) {         char[][] ca = new char[N][];        for (int i = 0; i < N; i++) ca[i] = in.next().toCharArray();         for (int x = 0; x < N; x++) {            for (int y = 0; y < M; y++) {                if (ca[x][y] != '.') continue;                 for (int i = 0; i < dx.length; i+= 2) {                    int[] cnt = {0,0};                    for (int j = 0; j < 2; j++) {                         for (int c = 1; c < 5; c++) {                            int nx = x + c*dx[i+j];                            int ny = y + c*dy[i+j];                            if (inBounds(nx, ny) && ca[nx][ny] == 'X') {                                cnt[j]++;                            } else break;                        }                    }                     if (cnt[0] + cnt[1] + 1 >= 5) {                        out.println("YES");                        return;                    }                 }            }        }         out.println("NO");     }     boolean inBounds(int x, int y) {        return x >= 0 && y >= 0 && x < N && y < M;    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
