 import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.Scanner;     public class problem4{	public static void main (String [] args){		Scanner scan = new Scanner(System.in);		int numClusters = scan.nextInt();		int numFiles = scan.nextInt(); 		Clusters clusters = new Clusters(numClusters);		clusters.loadClusters(scan, numFiles); 		ArrayList<Move> moves = new ArrayList<Move>(); 		//clusters.printClusters();		clusters.scoot(moves);		//clusters.printClusters();    		for(int i = 0; i<numClusters; i++){			if(!clusters.isEqual(i) && !clusters.sorted[i].isBlank()){ 				int location = clusters.getLocation(clusters.sorted[i]); 				clusters.move(i, numClusters-1, moves);				clusters.move(location,i, moves);				clusters.clusters[location] = new FilePart(-1,-1);				//clusters.move(numClusters-1, location, moves);				clusters.scoot(moves);				//clusters.clusters[numClusters-1] = new FilePart(-1,-1); 			}		}		 		System.out.println(moves.size());		for(int i = 0; i<moves.size(); i++){			System.out.println(moves.get(i));		}				//clusters.printClusters();        	} 	public static class Move{		int from = 0;		int to = 0; 		public Move(int f, int t){			from = f;			to = t;		} 		@Override		public String toString(){			return (to + 1) + " " + (from + 1);		}	} 	public static class Clusters{		FilePart[] clusters;		FilePart[] sorted; 		public Clusters(int l){			clusters = new FilePart[l];			sorted = new FilePart[l];			for(int i = 0; i<l; i++){				clusters[i] = new FilePart(-1,-1);				sorted[i] = new FilePart(-1,-1);			}		} 		public boolean isEqual(int i){			if(sorted[i].filePart == clusters[i].filePart && sorted[i].fileNum == clusters[i].fileNum){				return true;			}			return false;		} 		public void loadClusters(Scanner scan, int numFiles){			for(int i = 0; i<numFiles; i++){				int numFileParts = scan.nextInt();				for(int j =0; j<numFileParts; j++){					int location = scan.nextInt();					FilePart part = new FilePart(i,j);					clusters[location- 1] = part;					sorted[location - 1] = part;				}			}			//First Sort			Arrays.sort(sorted, new Comparator<FilePart>() {				public int compare(FilePart o1, FilePart o2) {					if(o2.isBlank()){						return -1;					}					if(o1.isBlank()){						return 1;					}										if(o2.fileNum != o1.fileNum){						return o1.fileNum - o2.fileNum;					}					else{						return o1.filePart - o2.filePart;					} 				}			});			 		} 		public void printClusters(){			System.out.println();			for(int i = 0; i<clusters.length; i++){				System.out.println(clusters[i]);			}		}		public void printSorted(){			System.out.println();			for(int i = 0; i<sorted.length; i++){				System.out.println(sorted[i]);			}		} 		public int getLocation(FilePart part){			for(int i = 0; i<clusters.length; i++){				if(clusters[i].filePart == part.filePart && clusters[i].fileNum == part.fileNum){					return i;				}			}			return clusters.length - 1;		}		public int getSortedLocation(FilePart filePart){			for(int i = 0; i<sorted.length; i++){				if(sorted[i].filePart == filePart.filePart && sorted[i].fileNum == filePart.fileNum){					return i;				}			}			return -1;		} 		public void move(int from, int to, ArrayList<Move> moves){			clusters[to] = clusters[from];			moves.add(new Move(to, from));		}		public int getFirstBlankLocation(){			for(int i = 0; i<clusters.length; i++){				if(clusters[i].isBlank()){					return i;				}			}			return -1;		}		public int lastLocation(){			for(int i = clusters.length -1; i>0; i--){				if(!clusters[i].isBlank()){					return i;				}			}			return -1;		} 		/**		public void scoot(ArrayList<Move> moves){			for(int j = 0; j<clusters.length; j++){				for(int i = 0; i<clusters.length-1; i++){					if(clusters[i].isBlank()){						if(!clusters[i + 1].isBlank()){						move(i+1,i,moves);						clusters[i+1] = new FilePart(-1,-1);						}					}				}			}		}		 **/		public void scoot(ArrayList<Move> moves){			for(int j = 0; j<clusters.length; j++){				for(int i = 0; i<clusters.length; i++){					if(clusters[i].isBlank()){						int location = getLocation(sorted[i]);						if(!sorted[i].isBlank()){							move(location, i,moves);							clusters[location] = new FilePart(-1,-1);						}					}				}			}		}  	}   	public static class FilePart{		int fileNum = 0;		int filePart = 0; 		public FilePart(int f, int p){			fileNum = f;			filePart = p;		}		public boolean isBlank(){			if(fileNum == -1 && filePart == -1){				return true;			}			return false; 		}		@Override		public String toString(){			return (fileNum + 1) + " " + (filePart + 1);		}	}    }
