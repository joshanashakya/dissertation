import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*; import javafx.util.Pair; public class Main{     public static void main(String args[])    {        FastScanner input = new FastScanner();       int n = input.nextInt();       long price[] = new long[n];        for (int i = 0; i < n; i++) {            price[i] = input.nextLong();        }        int front[] = new int[n];        for (int i = 0; i < n; i++) {            front[i] = input.nextInt();                    }        int back[] = new int[n];        for (int i = 0; i < n; i++) {            back[i] = input.nextInt();        }        HashMap<Integer,TreeMap<Long,Integer>> map = new HashMap<>();                for (int i = 0; i < n; i++) {           if(!map.containsKey(front[i]))           {               TreeMap<Long,Integer> lol = new TreeMap<>();               map.put(front[i],lol );                          }           if(front[i]!=back[i])           map.get(front[i]).put(price[i], back[i]);                                     if(!map.containsKey(back[i]))           {               TreeMap<Long,Integer> lol = new TreeMap<>();               map.put(back[i],lol );                          }           if(front[i]==back[i])                map.get(back[i]).put(price[i], 0);               else            map.get(back[i]).put(price[i], front[i]);        }//        for (Map.Entry<Integer, TreeMap<Long, Integer>> entry : map.entrySet()) {//            Integer key = entry.getKey();//            TreeMap<Long, Integer> value = entry.getValue();//            System.out.println("key->"+key);//            System.out.println(value);//        }        int m = input.nextInt();        StringBuilder ans = new StringBuilder();        for (int i = 0; i < m; i++) {            int need = input.nextInt();            if(!map.containsKey(need))            {                ans.append("-1 ");            }            else if(map.get(need).isEmpty())            {                ans.append("-1 ");            }            else            {                              long k= map.get(need).firstKey();              ans.append(k+" ");              int value = map.get(need).pollFirstEntry().getValue();              if(value!=0)              {                  map.get(value).remove(k);              }                          }        }        System.out.println(ans);    }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
