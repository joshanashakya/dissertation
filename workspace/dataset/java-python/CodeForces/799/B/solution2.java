import java.io.*;import java.util.*; import static java.lang.Math.*; public class Main {     public static void main(String[] args) throws IOException {        FastReader in = new FastReader(System.in);        PrintWriter pw = new PrintWriter(System.out);        int n = in.nextInt();        Long[] p = new Long[n];        int[] a = new int[n], b = new int[n];        for (int i = 0; i < n; i++) {            p[i] = in.nextLong();        }        for (int i = 0; i < n; i++) {            a[i] = in.nextInt();        }        for (int i = 0; i < n; i++) {            b[i] = in.nextInt();        }        int m = in.nextInt();        int[] q = new int[m];        for (int i = 0; i < m; i++) {            q[i] = in.nextInt();        }        pw.println(solve(p, a, b, n, m, q));        pw.close();    }     static StringBuilder solve(Long[] p, int[] a, int[] b, int n, int m, int[] q) {        StringBuilder sb = new StringBuilder();        TreeSet<Long>[] set = new TreeSet[3];        for (int i = 0; i < 3; i++) set[i] = new TreeSet<>();        for (int i = 0; i < n; i++) {            set[a[i] - 1].add(p[i]);        }        for (int i = 0; i < n; i++) {            set[b[i] - 1].add(p[i]);        }        for (int i = 0; i < m; i++) {            if (set[q[i] - 1].isEmpty()) sb.append("-1 ");            else {                Long price = set[q[i] - 1].pollFirst();                sb.append( price+ " ");                for (int j = 0; j < set.length; j++) set[j].remove(price);            }        }        return sb;    }     static void debug(Object... obj) {        System.err.println(Arrays.deepToString(obj));    }     static class FastReader {        InputStream is;        private byte[] inbuf = new byte[1024];        private int lenbuf = 0, ptrbuf = 0;         public FastReader(InputStream is) {            this.is = is;        }         public int readByte() {            if (lenbuf == -1) throw new InputMismatchException();            if (ptrbuf >= lenbuf) {                ptrbuf = 0;                try {                    lenbuf = is.read(inbuf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (lenbuf <= 0) return -1;            }            return inbuf[ptrbuf++];        }         public boolean isSpaceChar(int c) {            return !(c >= 33 && c <= 126);        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }         public int skip() {            int b;            while ((b = readByte()) != -1 && isSpaceChar(b)) ;            return b;        }         public String next() {            int b = skip();            StringBuilder sb = new StringBuilder();            while (!(isSpaceChar(b))) {                sb.appendCodePoint(b);                b = readByte();            }            return sb.toString();        }          public String nextLine() {            int c = skip();            StringBuilder sb = new StringBuilder();            while (!isEndOfLine(c)) {                sb.appendCodePoint(c);                c = readByte();            }            return sb.toString();        }         public int nextInt() {            int num = 0, b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }            while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public long nextLong() {            long num = 0;            int b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }             while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public double nextDouble() {            return Double.parseDouble(next());        }         public char[] next(int n) {            char[] buf = new char[n];            int b = skip(), p = 0;            while (p < n && !(isSpaceChar(b))) {                buf[p++] = (char) b;                b = readByte();            }            return n == p ? buf : Arrays.copyOf(buf, p);        }         public char readChar() {            return (char) skip();        }    }} 		 	 				 	  		   	 							 		
