import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.AbstractCollection;import java.util.PriorityQueue;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        HTShirtBuying solver = new HTShirtBuying();        solver.solve(1, in, out);        out.close();    }     static class HTShirtBuying {        int[] price;        PriorityQueue<Integer>[] adjL;        int n;        int m;        int[] orders;        boolean[] vis;         public void readInput(Scanner sc) {            n = sc.nextInt();            price = new int[n];            adjL = new PriorityQueue[4];            for (int i = 0; i < 4; i++)                adjL[i] = new PriorityQueue<>((a, b) -> price[a] - price[b]);            for (int i = 0; i < n; i++)                price[i] = sc.nextInt();            for (int i = 0; i < 2 * n; i++) {                adjL[sc.nextInt()].add(i % n);            }            m = sc.nextInt();            orders = new int[m];            for (int i = 0; i < m; i++)                orders[i] = sc.nextInt();        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            readInput(sc);            vis = new boolean[n];            for (int i = 0; i < m; i++) {                while (!adjL[orders[i]].isEmpty() && vis[adjL[orders[i]].peek()])                    adjL[orders[i]].poll();                if (adjL[orders[i]].isEmpty()) {                    pw.print(-1 + " ");                } else {                    vis[adjL[orders[i]].peek()] = true;                    pw.print(price[adjL[orders[i]].peek()] + " ");                }            }        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }}   	 		  	  	  	    	    			  		
