import java.util.*;import java.io.*; public class DoggoRecoloring{    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Task solver = new Task();        solver.solve(1, in, out);        out.close();    }     static class Task {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            String s = in.next();            Map<Character, Integer> hm = new HashMap();            int cnt = 0;            for(int i=0; i<s.length(); i++){                char c = s.charAt(i);                hm.put(c, hm.getOrDefault(c, 0)+1);            }            for(Integer i : hm.values()) if(i == 1) cnt++;            if(cnt == N && N != 1) out.println("NO");            else out.println("YES");        }    }     // public static int[] sort(int[] arr) {    //     List<Integer> list = new ArrayList<Integer>();    //     for (int i : arr)    //         list.add(i);    //     Collections.sort(list);    //     for (int i = 0; i < list.size(); i++)    //         arr[i] = list.get(i);    //     return arr;    // }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32_768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }    }}
