import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashSet;import java.util.Set; /** * * @author Arles */public class CWeakenedCommonDivisor {     static int MAX = 1000000;    static int SQRT = 1000;    static ArrayList<Integer> primes = new ArrayList<>();    static boolean[] marked = new boolean[MAX + 1];    static ArrayList<Integer> factors = new ArrayList<>();     static void sieve() {        marked[1] = true;        int i = 2;        for (; i < SQRT; i++) {            if (!marked[i]) {                primes.add(i);                for (int j = i * i; j <= MAX; j += i) {                    marked[j] = true;                }            }        }        for (; i <= MAX; i++) {            if (!marked[i]) {                primes.add(i);            }        }    }     public static void primeFactors(int n) {        factors.clear();        for (int i = 0, p = primes.get(i); p * p <= n; p = primes.get(++i)) {            while (n % p == 0) {                factors.add(p);                n /= p;            }        }        if (n > 1) {            factors.add(n);        }    }     public static void main(String[] args) throws IOException {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int n = Integer.parseInt(br.readLine());        sieve();        Set<Integer> union = null;        for (int i = 0; i < n; i++) {            String[] spl = br.readLine().split(" ");            int a = Integer.parseInt(spl[0]);            int b = Integer.parseInt(spl[1]);            if (i == 0) {                union = new HashSet<Integer>();                primeFactors(a);                union.addAll(factors);                primeFactors(b);                union.addAll(factors);            } else {                //System.out.println(union);                Set<Integer> union2 = new HashSet<>(union);                for (int e : union) {                    if (a % e != 0 && b % e != 0) {                        union2.remove(e);                        //System.out.println(number);                    }                }                union = union2;                            }        }        if (union.isEmpty()) {            System.out.println("-1");        } else {            System.out.println(union.toArray()[0]);        }    }}
