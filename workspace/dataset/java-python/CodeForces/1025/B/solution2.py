import functoolsimport timefrom collections import Counter def timer(func):    @functools.wraps(func)    def wrapper(*args, **kwargs):        stime = time.perf_counter()        res = func(*args, **kwargs)        elapsed = time.perf_counter() - stime        print(f"{func.__name__} in {elapsed:.4f} secs")        return res    return wrapper class solver:    # @timer    def __init__(self):        pass     def __call__(self):         def get(a):            ans = set()            x = 2            while x * x <= a:                if a % x == 0:                    ans.add(x)                    while a % x == 0:                        a = a // x                x += 1                        if a > 1:                ans.add(a)            return ans         n = int(input())                ab = list()        for _ in range(n):            ab.append(tuple(map(int, input().strip().split())))         s = set()        s.update(get(ab[0][0]))        s.update(get(ab[0][1]))        for x in s:            ok = True            for a, b in ab:                if a % x != 0 and b % x != 0:                    ok = False                    break            if ok:                print(x)                exit(0)        print('-1')                     solver()()
