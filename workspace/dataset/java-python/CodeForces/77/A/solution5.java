 import java.util.Scanner; public class Heroes {	static boolean[][] like = new boolean[7][7]; 	static int[][] mindiv = new int[3][500];		static int max = 0;	static int divs = 0;		static int id(String name)	{		if(name.equals("Anka"))return 0;		else if(name.equals("Chapay"))return 1;		else if(name.equals("Cleo"))return 2;		else if(name.equals("Troll"))return 3;		else if(name.equals("Dracul"))return 4;		else if(name.equals("Snowy"))return 5;		else if(name.equals("Hexadecimal"))return 6;		return -1;	}		static void rec(int mem, String cur, boolean[] yip, int div)	{		boolean debug = false;//		if(cur.equals("3405621"))debug = true;		if(mem == 7)		{			if(debug)System.out.println(cur);						int offset = 0;			int score = 0;			int[] member = new int[7];						for(int i = 0; i < 7; i++)			{				member[i] = cur.charAt(i) - '0';			}						for(int group = 0; group < 3; group++)			{				for(int a = offset; a < offset + mindiv[group][div]; a++)				{					for(int b = offset; b < offset + mindiv[group][div]; b++)					{						if(debug)System.out.println("Check like " + a + " " + b + ": " + (a != b && like[a][b]));						if(member[a] != member[b] && like[member[a]][member[b]])						{							score++;						}					}				}								offset += mindiv[group][div];			}						max = Math.max(max, score);						if(debug)System.out.println("Score " + score);		}		else		{			for(int i = 0; i < 7; i++)			{				if(!yip[i])				{					boolean[] yap = yip.clone();					yap[i] = true;					rec(mem+1, cur + i, yap, div);				}			}		}	} 	public static void main(String[] args) 	{		Scanner sc = new Scanner(System.in);				int n = sc.nextInt();				for(int i = 0; i < n; i++)		{			String s1 = sc.next();			sc.next();			String s2 = sc.next();						like[id(s1)][id(s2)] = true;		}				long[] exp = new long[3]; 		long mindiff = 0;				for(int i = 0; i < 3; i++)		{			exp[i] = sc.nextInt();			mindiff += exp[i];		}				int[] num = new int[3];				for(num[0] = 1; num[0] <= 5; num[0]++)		{			for(num[1] = 1; num[0] + num[1] <= 6; num[1]++)			{				num[2] = 7 - num[0] - num[1];								long[] get = new long[3];				long max = 0;				long min = exp[0] + exp[1] + exp[2];								for(int i = 0; i < 3; i++)				{					get[i] = exp[i] / num[i];					min = Math.min(min, get[i]);					max = Math.max(max, get[i]);				}								if(max - min < mindiff)				{					mindiff = max - min;				}			}		}		//SECOND		for(num[0] = 1; num[0] <= 5; num[0]++)		{			for(num[1] = 1; num[0] + num[1] <= 6; num[1]++)			{				num[2] = 7 - num[0] - num[1];								long[] get = new long[3];				long max = 0;				long min = exp[0] + exp[1] + exp[2];								for(int i = 0; i < 3; i++)				{					get[i] = exp[i] / num[i];					min = Math.min(min, get[i]);					max = Math.max(max, get[i]);				}								if(max - min == mindiff)				{					mindiff = max - min;					mindiv[0][divs] = num[0];					mindiv[1][divs] = num[1];					mindiv[2][divs] = num[2];					divs++;				}			}		}				//		System.out.println(mindiff);//		System.out.println(mindiv[0] + " " + mindiv[1] + " " + mindiv[2]);				for(int i = 0; i < divs; i++)		{			rec(0 , "", new boolean[]{false, false, false, false, false, false, false}, i);		}				System.out.println(mindiff + " " + max);	} }
