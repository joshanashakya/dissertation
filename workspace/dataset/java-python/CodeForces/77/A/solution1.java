import java.util.*;import java.io.*;import static java.lang.Math.*; public class PracticeProblem{    /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }     public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);    public static final int INF = Integer.MAX_VALUE;    public static int minDiff = INF, maxLikes = -1, a, b, c;    public static List<Integer>[] graph;     public static void main(String[] args)    {        solve();        out.close();    }     private static void solve()    {        Map<String, Integer> nameMapping = new HashMap<>();        nameMapping.put("Anka", 0);        nameMapping.put("Chapay", 1);        nameMapping.put("Cleo", 2);        nameMapping.put("Troll", 3);        nameMapping.put("Dracul", 4);        nameMapping.put("Snowy", 5);        nameMapping.put("Hexadecimal", 6);         int n = in.nextInt();        graph = new List[7];        for (int i = 0; i < 7; i++)            graph[i] = new ArrayList<>();         for (int i = 0; i < n; i++)        {            int a = nameMapping.get(in.next());            in.next();            int b = nameMapping.get(in.next());             graph[a].add(b);        }         a = in.nextInt(); b = in.nextInt(); c = in.nextInt();        int[] teamArrangement = new int[7];        rec(teamArrangement, 0);         out.println(minDiff + " " + maxLikes);     }     private static void rec(int[] teamArrangement, int index)    {        if (index == 7)        {            int team1Count = 0, team2Count = 0, team3Count = 0;            for (int i : teamArrangement)            {                if (i == 1)                    team1Count++;                else if (i == 2)                    team2Count++;                else                    team3Count++;            }             if (team1Count == 0 || team2Count == 0 || team3Count == 0)                return;             int likes = 0;             for (int i = 0; i < graph.length; i++)                for (int edge : graph[i])                    if (teamArrangement[i] == teamArrangement[edge])                        likes++;             int diff = max(a / team1Count, max(b / team2Count, c / team3Count)) - min(a / team1Count, min(b / team2Count, c / team3Count));             if (diff < minDiff)            {                minDiff = diff;                maxLikes = likes;            }            else if (diff == minDiff)            {                maxLikes = max(maxLikes, likes);            }        }        else        {            teamArrangement[index] = 1;            rec(teamArrangement, index + 1);             teamArrangement[index] = 2;            rec(teamArrangement, index + 1);             teamArrangement[index] = 3;            rec(teamArrangement, index + 1);        }    } }
