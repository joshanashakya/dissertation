import java.util.*; public class CF10 {    public static void main(String[] args) {        //boolean[] primes=new ICPC().primes(100000);        Scanner sc = new Scanner(System.in);        int n=sc.nextInt();       String s=sc.next();       char ch=s.charAt(0);       int next=0;       int c=0;       if(ch=='1'){           next=1;       }       c++;        //System.out.println(ch+"  "+next);       for(int i=1;i<s.length();i++){           char ch1=s.charAt(i);           if(ch1=='0' && next==0){               next=0;               //c++;           }else if(ch1=='1' && next==0){               next=0;           }else if(ch1=='0' && next==1){               next=0;               c++;           }else if(ch1=='1' && next==1){               next=1;               c++;           }          // System.out.println(ch1+"  "+next);       }        System.out.println(c);     }     static int countSetBits(int n) {        int count = 0;        while (n > 0) {            count += n & 1;            n >>= 1;        }        return count;    }     public List<Integer> getDivisors(int n) {        List<Integer> list = new ArrayList<>();        for (int d = 2; d * d <= n; d++) {            while (n % d == 0) {                list.add(d);                n /= d;            }        }        if (n > 1) {            list.add(n);        }        return list;    }     public int lcm(int n1, int n2) {        int gcd = 1;        for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0)                gcd = i;        }         int lcm = (n1 * n2) / gcd;        return lcm;    }     public boolean[] primes(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            for (int j = i * i; j <= n; j += i) {                p[j] = false;            }        }        return p;    }      public int primeFactor(int n) {        int c = 0;         while (n % 2 == 0) {            n /= 2;            c++;        }        //  System.out.println(n);        return c;     }}   	 			 	 	    			 		  					  	
