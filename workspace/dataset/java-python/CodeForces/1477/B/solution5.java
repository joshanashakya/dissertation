// package NickMikeMurderers; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer; public class NezzarAndBinaryString {    public static void build(char c[],int tree[],int s,int e,int node){        if(s==e){            if(c[s]=='0'){                tree[node]=1;            }            return;        }        int mid=(s+e)>>1;        build(c,tree,s,mid,2*node);        build(c,tree,mid+1,e,2*node+1);        tree[node]=tree[2*node]+tree[2*node+1];    }    public static void update(int tree[],int lazy[],int s,int e,int l,int r,int node,boolean set){        if(e<l||s>r){            return;        }        if(lazy[node]!=0){            if(lazy[node]==1){                tree[node]=e-s+1;            }            else{                tree[node]=0;            }            if(s!=e){                lazy[2*node]=lazy[node];                lazy[2*node+1]=lazy[node];            }            lazy[node]=0;        }        if(s>=l&&e<=r){            if(set){                tree[node]=e-s+1;                if(s!=e){                    lazy[2*node]=1;                    lazy[2*node+1]=1;                }            }            else{                tree[node]=0;                if(s!=e){                    lazy[2*node]=-1;                    lazy[2*node+1]=-1;                }            }            return;        }        int mid=(s+e)>>1;        update(tree,lazy,s,mid,l,r,2*node,set);        update(tree,lazy,mid+1,e,l,r,2*node+1,set);        tree[node]=tree[2*node]+tree[2*node+1];    }    public static int query(int tree[],int lazy[],int s,int e,int l,int r,int node){        if(lazy[node]!=0){            if(lazy[node]==1){                tree[node]=e-s+1;            }            else{                tree[node]=0;            }            if(s!=e){                lazy[2*node]=lazy[node];                lazy[2*node+1]=lazy[node];            }            lazy[node]=0;        }        if(e<l||s>r){            return 0;        }        if(s>=l&&e<=r){            return tree[node];        }        int mid=(s+e)>>1;        int left=query(tree,lazy,s,mid,l,r,2*node);        int right=query(tree,lazy,mid+1,e,l,r,2*node+1);        return left+right;    }    public static void main(String[] args)throws IOException {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        int test=Integer.parseInt(br.readLine());        StringBuilder print=new StringBuilder();        while(test--!=0){            StringTokenizer st=new StringTokenizer(br.readLine());            int n=Integer.parseInt(st.nextToken());            int q=Integer.parseInt(st.nextToken());            char s[]=br.readLine().toCharArray();            char f[]=br.readLine().toCharArray();            int l[]=new int[q];            int r[]=new int[q];            for(int i=0;i<q;i++){                st=new StringTokenizer(br.readLine());                l[i]=Integer.parseInt(st.nextToken())-1;                r[i]=Integer.parseInt(st.nextToken())-1;            }            boolean flag=true;            int tree[]=new int[4*n+4];            int lazy[]=new int[4*n+4];            build(f,tree,0,n-1,1);            for(int i=q-1;i>=0;i--){                int zeros=query(tree,lazy,0,n-1,l[i],r[i],1);                int ones=r[i]-l[i]+1-zeros;//                System.out.println(zeros+" "+ones);                int len=r[i]-l[i]+1;                if(2*zeros<len){                    update(tree,lazy,0,n-1,l[i],r[i],1,false);                    continue;                }                if(2*ones<len){                    update(tree,lazy,0,n-1,l[i],r[i],1,true);                    continue;                }                flag=false;                break;            }            if(flag){                for(int i=0;i<n;i++){                    int z=query(tree,lazy,0,n-1,i,i,1);                    if(s[i]=='0'&&z==1){                        continue;                    }                    if(s[i]=='1'&&z==0){                        continue;                    }                    flag=false;                    break;                }            }            if(flag){                print.append("YES\n");            }            else{                print.append("NO\n");            }        }        System.out.print(print.toString());    }}
