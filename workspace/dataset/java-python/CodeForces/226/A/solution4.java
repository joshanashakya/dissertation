import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.StringTokenizer; public class FlyingSaucerSegments { 	public static void main(String[] args) {		InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        long n = in.nextLong();        long mod = in.nextLong();        long ans = fastPow(3, n, mod) - 1;        if(ans == -1)        	ans += mod;        out.println(ans);        out.close();	} 	static long fastPow(long a, long b, long mod) {		if(b == 0)			return 1L;				long val = fastPow(a, b/2, mod);		if(b % 2 == 0)			return val * val % mod;		else			return val * val % mod * a % mod;	}		static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }    }  }
