import java.io.*;import java.util.*; public class D implements Runnable{	public static void main (String[] args) {new Thread(null, new D(), "_cf", 1 << 28).start();} 	public void run() {		FastScanner fs = new FastScanner();		PrintWriter out = new PrintWriter(System.out);		System.err.println("Go!"); 		int n = fs.nextInt();		int[] a = fs.nextIntArray(n);		sort(a);				Fenwick_Tree ft = new Fenwick_Tree(n);		for(int i = 0; i < n; i++) ft.update(i+1, a[i]);		long[] rep = new long[n + 1];		Arrays.fill(rep, -1);		rep[n-1] = 0;		for(int i = 0; i < n-1; i++) rep[n-1] += a[i]; 				int q = fs.nextInt();		for(int qq = 0; qq < q; qq++) {			if(qq > 0) out.print(" ");			int k = fs.nextInt();			if(k >= n) k = n - 1;			if(rep[k] != -1) {				out.print(rep[k]);				continue;			}			rep[k] = 0;			int at = n-2;			long len = k;			long mult = 1;			while(at >= 0) {//				System.out.println("At " + at + " len " + len);				//query sum from at to at-len				int p1 = at + 1, p2 = at - (int)len + 1;				p2 = Math.max(0, p2);				rep[k] += mult * (ft.sum(p1) - ft.sum(p2));//				System.out.println("Query " + p1 + " to " + p2 + " sum " + (ft.sum(p1) - ft.sum(p2)) + " mult " + mult);				if(p2 == 0) break;				len *= k;				if(len > Integer.MAX_VALUE) len = Integer.MAX_VALUE / 2;				mult++;				at = --p2;			}			out.print(rep[k]);		}				out.close();	}		class Fenwick_Tree {				long[] bit;		int n;				public Fenwick_Tree(int a) {			n = a + 1;			bit = new long[n];		}				//Remember that when querying a sum to query the 1-based index of the value.				void update (int index, long val) {			while(index < n) {				bit[index] += val;				index += (index & (-index));			}		}				long sum (int index) {			long sum = 0;			while(index > 0) {				sum += bit[index];				index -= (index & (-index));			}			return sum;		}	} 		void sort (int[] a) {		int n = a.length;		for(int i = 0; i < 1000; i++) {			Random r = new Random();			int x = r.nextInt(n), y = r.nextInt(n);			int temp = a[x];			a[x] = a[y];			a[y] = temp;		}		Arrays.sort(a);	} 	class FastScanner {		BufferedReader br;		StringTokenizer st;		public FastScanner() {			try	{				br = new BufferedReader(new InputStreamReader(System.in));//				br = new BufferedReader(new FileReader("testdata.out"));				st = new StringTokenizer("");			} catch (Exception e){e.printStackTrace();}		}		public String next() {			if (st.hasMoreTokens())	return st.nextToken();			try {st = new StringTokenizer(br.readLine());}			catch (Exception e) {e.printStackTrace();}			return st.nextToken();		}		public int nextInt() {return Integer.parseInt(next());}		public long nextLong() {return Long.parseLong(next());}		public double nextDouble() {return Double.parseDouble(next());} 		public String nextLine() {			String line = "";			try {line = br.readLine();}			catch (Exception e) {e.printStackTrace();}			return line;		}		public Integer[] nextIntegerArray(int n) {			Integer[] a = new Integer[n];			for(int i = 0; i < n; i++) a[i] = nextInt();			return a;		}		public int[] nextIntArray(int n) {			int[] a = new int[n];			for(int i = 0; i < n; i++) a[i] = nextInt();			return a;		}		public char[] nextCharArray() {return nextLine().toCharArray();}	} }
