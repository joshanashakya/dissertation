import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		static int n;	static long[] pre;			    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		n = fs.nextInt();    		long[] a = new long[n];    		    		for(int i=0;i<n;i++) a[i] = fs.nextLong();    		    		ruffleSort(a); reverse(a, 0, n);    		    		pre = new long[n];    		pre[0] = a[0];    		    		for(int i=1;i<n;i++) pre[i] = pre[i-1] + a[i];    		    		long res_1 = 0;    		for(int i=1;i<n;i++) res_1 += a[i]*i;    		    		int q = fs.nextInt();    		    		while(q-->0) {    			    			int k = fs.nextInt();    			    			if(k==1) {    				out.println(res_1);    				continue;    			}    			    			long res = 0;    			long sz = 1;    			    			    			for(long i=1,t=1;i<n;i+=sz,t++) {    				sz *= k;    				res += sum(i, i+sz-1)*t;    				int f = 1;    			}    			    			out.println(res);    			    		}    		    		    		    		    		    		    		    	}    	    		    		    		    	out.close();    		    }                static long sum(long l, long r) {    	r = Math.min(r,  n-1);    	return pre[(int)r] - pre[(int)(l-1)];    }                                      static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
