 import java.io.*;import java.util.*;import java.math.*; public class Thomas {    static final Random random = new Random();    static PrintWriter out = new PrintWriter((System.out));    static Reader sc = new Reader();     public static void main(String args[]) throws IOException {//        int t = sc.nextInt();//        while (t-- > 0) { //        	CODE START FROM HERE       int n  = sc.nextInt();       ArrayList<ArrayList<Integer>> arr= new ArrayList<ArrayList<Integer>>();       for(int i  = 0;i<n;i++)    	   arr.add(new ArrayList<Integer>());       for(int i = 0;i<arr.size();i++)       {    	   int sum = 0;    	   int a = sc.nextInt();    	   int b = sc.nextInt();    	   int c = sc.nextInt();    	   int d = sc.nextInt();           sum+=a+b+c+d;           arr.get(i).add(sum);           arr.get(i).add(i);       }       Collections.sort(arr, new Comparator<List<Integer>> () {    	    @Override    	    public int compare(List<Integer> a, List<Integer> b) {    	        return b.get(0) - a.get(0);    	    }    	});             for(int i =0;i<n;i++)       {//    	   System.out.println(i);    		   if(arr.get(i).get(1)!=0)    			   continue;    		   else if(arr.get(i).get(1) == 0)    		   {    			   System.out.println(i+1);    			   break;    				       		   }    	          }                }     // Fast Input Output    static class Reader {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         public String next() {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (Exception e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public String nextLine() {            try {                return br.readLine();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }         public boolean hasNext() {            String next = null;            try {                next = br.readLine();            } catch (Exception e) {            }            if (next == null) {                return false;            }            st = new StringTokenizer(next);            return true;        }    }     // EFFICIENT SORTING Ascending    static void ruffleSortAsc(Integer[] a) {        int n = a.length; // shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }     //	EFFICIENT SORTING Descending    static void ruffleSortDesc(Integer[] a) {        int n = a.length; // shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a, Collections.reverseOrder());    }     // Array Sum    static long sum(Integer[] arr) {        long sum = 0;        for (int i : arr)            sum += i;        return sum;    }     // swap array elements    static void swap(int arr1[], int arr2[], int i, int j) {        int temp = arr1[i];        arr1[i] = arr2[j];        arr2[j] = temp;    }     // reading array value;    static void read(Integer[] arr) {        for (int i = 0; i < arr.length; i++)            arr[i] = sc.nextInt();        return;    } //    reading arraylistValue     // check for even odd    static boolean isEven(int n) {        return ((n & 1) != 1);    }     // max in a array    static int max(Integer[] arr) {        int max = Integer.MIN_VALUE;        for (int i = 0; i < arr.length; i++)            if (max < arr[i])                max = arr[i];        return max;    }     //  print array    static void printarr(Integer arr[]) {        for (int i : arr)            System.out.println(i);    }     // ceil of two elements    static long ceil(int a, int b) {        return (long) Math.ceil(((double) a / (double) b));    }     // floor of two elements    static long floor(int a, int b) {        return (long) Math.floor(((double) a / (double) b));    } }
