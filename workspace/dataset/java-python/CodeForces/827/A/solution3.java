 import java.util.*;import java.lang.*;import java.io.*;import java.math.*;public class Prac{         static class InputReader {         private final InputStream stream;        private final byte[] buf = new byte[8192];        private int curChar, snumChars;        public InputReader(InputStream st) {            this.stream = st;        }         public int read() {            if (snumChars == -1)                throw new InputMismatchException();            if (curChar >= snumChars) {                curChar = 0;                try {                    snumChars = stream.read(buf);                }                 catch (IOException e) {                    throw new InputMismatchException();                }                if (snumChars <= 0)                    return -1;            }            return buf[curChar++];        }        public int ni() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nl() {            int c = read();            while (isSpaceChar(c)) {            c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public int[] nia(int n) {            int a[] = new int[n];            for (int i = 0; i < n; i++) {                a[i] = ni();            }            return a;        }         public String rs() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                    c = read();            } while (!isSpaceChar(c));            return res.toString();        }        public String nextLine() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        }         public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }     }    public static class Key {         private final int x;        private final int y;         public Key(int x, int y) {            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (!(o instanceof Key)) return false;            Key key = (Key) o;            return x == key.x && y == key.y;        }         @Override        public int hashCode() {            int result = x;            result = 31 * result + y;            return result;        }     }    static class Pair{        int x,y;        public Pair(int x,int y){            this.x=x;            this.y=y;                    }    }        static PrintWriter w = new PrintWriter(System.out);    static long mod=998244353L,mod1=1000000007;    static class Pai{        Integer i;        String s;        public Pai(Integer i,String s){            this.i=i;            this.s=s;        }    }    public static void main(String [] args){        InputReader sc=new InputReader(System.in);        //Scanner sc=new Scanner(System.in);        int n=sc.ni();        char arr[]=new char[2000005];        Arrays.fill(arr,'a');                int maxL=-1;        //ArrayList<Pai> in=new ArrayList<>();        TreeMap<Integer,Integer> map=new TreeMap<>();        char st[][]=new char[n][];        int i=0;        while(i<n){            //String t[]=sc.nextLine().split(" ");            String a[]=sc.nextLine().split(" ");            int x=Integer.parseInt(a[1]);            int y=1;            st[i]=a[0].toCharArray();            while(x-->0){                Integer s=Integer.parseInt(a[++y]);                //in.add(new Pai(s,a[0]));                if(map.containsKey(s)){                    if(st[map.get(s)].length<a[0].length())map.put(s,i);                }                else{                    map.put(s,i);                }                maxL=Math.max(maxL,s+a[0].length());            }            i++;        }        //Pai ini[]=new Pai[in.size()];        int j=0;        //for(Pai p:in)ini[j++]=p;        //Arrays.sort(ini,(Pai p1,Pai p2)->Integer.compare(p1.i,p2.i));        int prev=0;        for(Integer i1:map.keySet()){            int sl=st[map.get(i1)].length;            i=map.get(i1);            int fl=i1+sl;            if(fl<prev)continue;            //char c[]=s.toCharArray();            int pt=Math.max(i1,prev);            while(pt<(fl)){                arr[pt]=st[i][pt-i1];                pt++;            }            prev=Math.max(prev,fl);        }//        for(int i=0;i<j;i++){//            Pai p=ini[i];//            int fl=(p.i+p.s.length());//            if(fl<prev)continue;//            char c[]=p.s.toCharArray();//            int pt=Math.max(p.i,prev);//            while(pt<(fl)){//                arr[pt]=c[pt-p.i];//                pt++;//            }//            prev=Math.max(prev,fl);//        }        for(i=1;i<maxL;i++){            w.print(arr[i]);        }        w.println();        w.close();    }}
