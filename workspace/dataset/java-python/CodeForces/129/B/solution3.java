import java.util.*;import java.util.Scanner;import java.io.*;import javax.lang.model.util.ElementScanner6; import static java.lang.System.out;import java.util.Stack;import java.util.Queue;import java.util.LinkedList; public class B129{     static int mod=(int)(1e9+7);    static long MOD=(long)(1e9+7);    static FastReader in=new FastReader();    static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    static ArrayList<HashSet<Integer>> al;    static boolean vis[];    public static void main(String args[])    {           int tc=1;             //tc=in.nextInt();        tcloop: while(tc-->0)        {			int n=in.nextInt();			int m=in.nextInt();						al=new ArrayList<>();			for(int i=0;i<n;i++)al.add(new HashSet<>());						vis=new boolean[n];						for(int i=0;i<m;i++)			{				int a=in.nextInt()-1;				int b=in.nextInt()-1;				al.get(a).add(b);				al.get(b).add(a);			}						boolean b=true;												int c=0;									while(b)			{								b=false;				ArrayList<Pair> ap=new ArrayList<>();								for(int i=0;i<n;i++)				{										if(!vis[i])					{																								if(al.get(i).size()==1)						{														//out.println(i);													b=true;							int to=-1;														for(int j : al.get(i))							{								to=j;								break;							}							ap.add(new Pair(to,i));							//al.get(to).remove(i);							vis[i]=true;													}					}								}				if(b)c++;								for(Pair p : ap)				{					al.get(p.a).remove(p.b);				}							}			pr.println(c);			                               }        pr.flush();            }        static class Pair    {		int a;		int b;		public Pair(int a1,int b1)		{			a=a1;			b=b1;					}	}        /*    static void dfs(int at)    {		if(vis[at])return;				vis[at]=true;				if(adj.get(a))					}	*/         		         static void sort(long[] a) {		ArrayList<Long> l = new ArrayList<>();		for (long i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);	}        	static void sort(int[] a) {		ArrayList<Integer> l = new ArrayList<>();		for (int i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);    }         static class FastReader    {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }                 int[] readIntArray(int n)        {		int a[]=new int[n];		for(int i=0;i<n;i++)a[i]=nextInt();		return a;	}			long[] readLongArray(int n)	{		long a[]=new long[n];		for(int i=0;i<n;i++)a[i]=nextLong();		return a;	}	        String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }   
