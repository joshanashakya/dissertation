import java.io.*;import java.util.*;import java.math.*;import java.text.DecimalFormat;import java.text.NumberFormat; public class Main {          int mod = 1000000007;     public class SegmentTree{        int n;       int[] tree;        SegmentTree(int[] arr){           this.n = arr.length;           this.tree = new int[2 * n];           for(int i = n; i < 2 * n; i++){              this.tree[i] = arr[i - n];          }           for(int i = n - 1; i >= 1; i--){              this.tree[i] = this.tree[2 * i] & this.tree[2 * i + 1];          }        }        public int query(int l, int r){           int res = (1 << 31) - 1;          l = l + n;          r = r + n;           while(l < r){               if(l % 2 == 1){                  res &= tree[l];                   l++;              }               if(r % 2 == 1){                  r--;                  res &= tree[r];              }               l /= 2;              r /= 2;          }           return res;       }    }     public void solve() throws IOException{        int n = in.nextInt();       double[] aa = new double[n];       for(int i = 0; i < n; i++){         aa[i] = in.nextDouble();       }             Arrays.sort(aa);       double ans = aa[n - 1];       if(ans == 1){         out.println(1);         return;       }       double p = 1.0;       double s = 0.0;        for(int i = n - 1; i >= 0; i--){           double a = aa[i];           ans = Math.max(ans, (p * (1 - a) * (s + (a / (1 - a)))));          p *= 1 - a;          s += a / (1 - a);        }             out.println(ans);       return;     }       FastScanner in;    PrintWriter out;        static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }     public class Pair<A, B>{        public A x;         public B y;         Pair(A x, B y){            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (o == null || getClass() != o.getClass()) return false;            Pair<?, ?> pair = (Pair<?, ?>) o;            if (!x.equals(pair.x)) return false;            return y.equals(pair.y);        }         @Override        public int hashCode() {            int result = x.hashCode();            result = 31 * result + y.hashCode();            return result;        }     }     class Tuple{        int x; int y; int z;        Tuple(int ix, int iy, int iz){            x = ix;            y = iy;            z = iz;        }    }}
