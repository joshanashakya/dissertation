import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.TreeSet;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author xwchen */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            long[] a = in.nextLongArray(n);            long[] b = in.nextLongArray(n);            TreeSet<Long> candMask = new TreeSet<>();            for (int i = 0; i < n; ++i) {                for (int j = i + 1; j < n; ++j) {                    if (a[i] == a[j]) {                        candMask.add(a[i]);                    }                }            }            long res = 0;            for (int i = 0; i < n; ++i) {                for (long mask : candMask) {                    if ((a[i] | mask) == mask) {                        res += b[i];                        break;                    }                }            }            out.println(res);        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer tokenizer = new StringTokenizer("");         public InputReader(InputStream inputStream) {            this.reader = new BufferedReader(                    new InputStreamReader(inputStream));        }         public String next() {            while (!tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public long[] nextLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }     }} 
