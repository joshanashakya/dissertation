import java.io.DataInputStream;import java.io.FileInputStream;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.Scanner;Â public class Main {		static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     } 		public static void main(String[] args) throws Exception	{					Reader s=new Reader();				int n=s.nextInt();				long[] arr=new long[n];		long[] brr=new long[n];				HashMap<Long,Integer> map=new HashMap<>();				for(int i=0;i<n;i++)		{			arr[i]=s.nextLong();						if(map.containsKey(arr[i]))			{				map.put(arr[i],map.get(arr[i])+1);			}			else			{				map.put(arr[i],1);			}		}				for(int i=0;i<n;i++)		{			brr[i]=s.nextLong();		}				long ans=0;				ArrayList<Long> list=new ArrayList<>();		HashMap<Long,Integer> temp=new HashMap<>();				for(int i=0;i<n;i++)		{			if(map.get(arr[i])>1)			{				ans=ans+brr[i];								if(!temp.containsKey(arr[i]))				{					list.add(arr[i]);					temp.put(arr[i],1);				}							}		}				if(list.size()==0)		{			System.out.println(0);		}		else		{			for(int i=0;i<n;i++)			{				if(!temp.containsKey(arr[i]))				{					for(int j=0;j<list.size();j++)					{						int p=0;												for(int k=0;k<61;k++)						{							if((((1l<<k)&arr[i])>0)&&(((1l<<k)&list.get(j))==0))							{								p=1;								break;							}						}												if(p==0)						{							list.add(arr[i]);							ans=ans+brr[i];							break;						}					}				}			}						System.out.println(ans);		}			}	}
