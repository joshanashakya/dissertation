import java.io.*;import java.util.*;  public class D {	public static void main(String[] args) {		FastScanner sc=new FastScanner(System.in);		int n=sc.nextInt();				long arr[]=new long[n];		for(int i=0;i<n;i++){			arr[i]=sc.nextInt();		}				long a[][]=new long[4][n+1];		for(int i=0;i<n;i++){			if(i%2==0){				a[0][i+1]=arr[i]+(i-2<0?0:a[0][i-1]);//奇数项前缀和				a[1][i+1]=a[1][i];			}else{				a[0][i+1]=a[0][i];				a[1][i+1]=arr[i]+(i-2<0?0:a[1][i-1]);//偶数项前缀和			}		}		for(int i=n-1;i>=0;i--){			if(i%2==0){				a[2][i]=arr[i]+(i+2>=n?0:a[2][i+2]);//奇数项后缀和				a[3][i]=a[3][i+1];			}else{				a[2][i]=a[2][i+1];				a[3][i]=arr[i]+(i+2>=n?0:a[3][i+2]);//偶数项后缀和			}		} 		int index=0;		for(int i=0;i<n;i++){			if(a[0][i]+a[3][i+1]==a[1][i]+a[2][i+1]){				index++;			}		}		System.out.println(index);	}	static class FastScanner { 		private final InputStream is;		private StringBuilder sB = new StringBuilder(1 << 13);		private byte[] buf = new byte[1 << 13];		private int bufLen;		private int bufOffset;		private int next; 		public FastScanner(InputStream is) {			this.is = is;		} 		private int read() {			while (bufLen == bufOffset) {				bufOffset = 0;				try {					bufLen = is.read(buf);				} catch (IOException e) {					bufLen = -1;				}				if (bufLen == -1) {					return -1;				}			}			return buf[bufOffset++];		} 		public void skipBlank() {			while (next >= 0 && next <= 32) {				next = read();			}		} 		public int nextInt() {			int sign = 1;			skipBlank();			if (next == '+' || next == '-') {				sign = next == '+' ? 1 : -1;				next = read();			}			int val = 0;			if (sign == 1) {				while (next >= '0' && next <= '9') {					val = val * 10 + next - '0';					next = read();				}			} else {				while (next >= '0' && next <= '9') {					val = val * 10 - next + '0';					next = read();				}			}			return val;		}				public String readString(StringBuilder builder) {			skipBlank();			while (next > 32) {				builder.append((char) next);				next = read();			}			return builder.toString();		} 		public String next() {			sB.setLength(0);			return readString(sB);		}	} 	static class FastOutput implements AutoCloseable, Closeable, Appendable {		private static final int THRESHOLD = 1 << 13;		private final Writer os;		private StringBuilder cache = new StringBuilder(THRESHOLD * 2); 		public FastOutput append(CharSequence csq) {			cache.append(csq);			return this;		} 		public FastOutput append(CharSequence csq, int start, int end) {			cache.append(csq, start, end);			return this;		} 		private void afterWrite() {			if (cache.length() < THRESHOLD) {				return;			}			flush();		} 		public FastOutput(Writer os) {			this.os = os;		} 		public FastOutput(OutputStream os) {			this(new OutputStreamWriter(os));		} 		public FastOutput append(char c) {			cache.append(c);			afterWrite();			return this;		} 		public FastOutput append(int c) {			cache.append(c);			afterWrite();			return this;		} 		public FastOutput append(String c) {			cache.append(c);			afterWrite();			return this;		} 		public FastOutput println(String c) {			return append(c).println();		} 		public FastOutput println() {			return append(System.lineSeparator());		} 		public FastOutput flush() {			try {				os.append(cache);				os.flush();				cache.setLength(0);			} catch (IOException e) {				throw new UncheckedIOException(e);			}			return this;		} 		public void close() {			flush();			try {				os.close();			} catch (IOException e) {				throw new UncheckedIOException(e);			}		}		public String toString() {			return cache.toString();		}	}}
