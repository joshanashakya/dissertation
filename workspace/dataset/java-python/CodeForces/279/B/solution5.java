import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.util.TreeSet; public class Books {	public static void main (String[] args) throws IOException {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st = new StringTokenizer(br.readLine());				int n = Integer.parseInt(st.nextToken());		int t = Integer.parseInt(st.nextToken());				st = new StringTokenizer(br.readLine());				int[] books = new int[n];				for (int i = 0; i < n; i++) {			books[i] = Integer.parseInt(st.nextToken());		}				br.close(); 		int[] booksPrefixSum = new int[n+1];				for (int i = 1; i <= n; i++) {			booksPrefixSum[i] = booksPrefixSum[i-1] + books[i-1];		}				TreeSet<TimeIndexPair> booksPrefixSet = new TreeSet<TimeIndexPair>();		for (int i = 1; i <= n; i++) {			booksPrefixSet.add(new TimeIndexPair(booksPrefixSum[i], i));		}				int[] candidates = new int[n];		for (int i = 0; i <= n - 1; i++) {			int currTime = booksPrefixSum[i];			TimeIndexPair optimal = new TimeIndexPair(currTime + t, 0);			TimeIndexPair best = booksPrefixSet.floor(optimal);						if (best != null) {				candidates[i] = best.index - i; 			}		}				int max = Integer.MIN_VALUE;				for (int i = 0; i < candidates.length; i++) {			max = Math.max(candidates[i], max);		}				System.out.println(max);			}} class TimeIndexPair implements Comparable<TimeIndexPair>{	int time;	int index;		TimeIndexPair(int time, int index) {		this.time = time;		this.index = index;	} 	@Override	public int compareTo(TimeIndexPair o) {		return this.time - o.time;	}		}
