import java.io.*;import java.util.*; public class C {     public static void main(String[] args) throws IOException {         Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);         int N = sc.nextInt(), max = sc.nextInt(), reg = sc.nextInt();        Integer[] idx = new Integer[N];        int[] pow = new int[N], dmg = new int[N];        for(int i = 0; i < N; ++i) {            idx[i] = i;            pow[i] = sc.nextInt();            dmg[i] = sc.nextInt();        }        Arrays.sort(idx, (x, y) -> pow[y] - pow[x]);        ArrayList<Pair> sol = new ArrayList<>();        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> y.y - x.y);        int t, curHealth = max, damage = 0, nextScroll = 0;        for(t = 0; curHealth > 0; ++t) {            curHealth = Math.min(curHealth - damage + reg, max);            while (nextScroll < N && pow[idx[nextScroll]] * max >= curHealth * 100)                pq.add(new Pair(idx[nextScroll], dmg[idx[nextScroll++]]));            if(curHealth > 0 && !pq.isEmpty()) {                Pair p = pq.remove();                damage += p.y;                sol.add(new Pair(t, p.x));            } else if (curHealth == max)                break;        }        if (curHealth <= 0) {            out.println("YES");            out.println(t - 1 + " " + sol.size());            for(Pair p: sol) {                out.println(p.x + " " + (p.y + 1));            }        } else            out.println("NO");         out.close();     }     static class Pair {        int x, y;         Pair(int a, int b) { x = a; y = b; }    }      static class Scanner    {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));}         public String next() throws IOException        {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {return Integer.parseInt(next());}         public long nextLong() throws IOException {return Long.parseLong(next());}         public String nextLine() throws IOException {return br.readLine();}         public boolean ready() throws IOException {return br.ready();}      }}
