import static java.lang.Double.parseDouble;import static java.lang.Integer.max;import static java.lang.Integer.min;import static java.lang.Integer.parseInt;import static java.lang.Long.parseLong;import static java.lang.System.exit;import static java.lang.System.setOut; import java.io.*;import java.util.*;import java.util.concurrent.ThreadLocalRandom; public class A {     static BufferedReader in;    static PrintWriter out;    static StringTokenizer tok;     static void solve() throws Exception {        char[] s = next().toCharArray();        int n = s.length;        if(s[0] == '@' || s[ n - 1 ] == '@') {            out.print("No solution\n");            return;        }        List<Integer> ats = new ArrayList<>();        for(int i=1;i<n-1;i++) {            if(s[i] == '@') {                ats.add(i);            }        }        int prev = -10;        for(int x: ats) {            if(x-prev <= 2) {                out.print("No solution\n");                return;            }            prev = x;        }                if(ats.size() == 0) {            out.print("No solution\n");            return;        }         for(int i=0;i<n;i++) {            out.print(s[i]);            if(s[i] == '@') {                i++;                out.print(s[i]);                out.print(i<ats.get(ats.size()-1)?',':"");            }        }    }     // 7 4 1 2 4 6 7 9 10     static int nextInt() throws IOException {        return parseInt(next());    }     static long nextLong() throws IOException {        return parseLong(next());    }     static double nextDouble() throws IOException {        return parseDouble(next());    }     static String next() throws IOException {        while (tok == null || !tok.hasMoreTokens()) {            tok = new StringTokenizer(in.readLine());        }        return tok.nextToken();    }     public static void main(String[] args) throws Exception {        try {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(new OutputStreamWriter(System.out));            solve();            //long lEndTime = System.currentTimeMillis();            //System.out.println("Elapsed time in seconds: " + (double)(lEndTime - lStartTime) / 1000.0);            in.close();            out.close();        } catch (Throwable e) {            e.printStackTrace();            exit(1);        }    }}
