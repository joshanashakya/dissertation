import java.util.*;import java.io.*;import java.math.*;public class Main{    static class Reader     {         private InputStream mIs;private byte[] buf = new byte[1024];private int curChar,numChars;public Reader() { this(System.in); }public Reader(InputStream is) { mIs = is;}         public int read() {if (numChars == -1) throw new InputMismatchException();if (curChar >= numChars) {curChar = 0;try { numChars = mIs.read(buf);} catch (IOException e) { throw new InputMismatchException();}if (numChars <= 0) return -1; }return buf[curChar++];}         public String nextLine(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isEndOfLine(c));return res.toString() ;}         public String s(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isSpaceChar(c));return res.toString();}         public long l(){int c = read();while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }long res = 0; do{ if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read();}while(!isSpaceChar(c));return res * sgn;}         public int i(){int c = read() ;while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }int res = 0;do{if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read() ;}while(!isSpaceChar(c));return res * sgn;}         public double d() throws IOException {return Double.parseDouble(s()) ;}        public boolean isSpaceChar(int c) { return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1; }         public boolean isEndOfLine(int c) { return c == '\n' || c == '\r' || c == -1; }     }         ///////////////////////////////////////////////////////////////////////////////////////////    //    RRRRRRRRR            AAA             HHH     HHH     IIIIIIIIIIIII   LLL           //    //    RR    RRR           AAAAA            HHH     HHH      IIIIIIIIIII    LLL           //    //    RR   RRR           AAAAAAA           HHH     HHH          III        LLL           //    //    RR  RRR           AAA   AAA          HHHHHHHHHHH          III        LLL           //    //    RRRRRR           AAA     AAA         HHHHHHHHHHH          III        LLL           //    //    RR  RRR         AAAAAAAAAAAAA        HHH     HHH          III        LLL           //    //    RR    RRR      AAA         AAA       HHH     HHH      IIIIIIIIIII    LLLLLLLLLLLL  //    //    RR     RRR    AAA           AAA      HHH     HHH     IIIIIIIIIIIII   LLLLLLLLLLLL  //    ///////////////////////////////////////////////////////////////////////////////////////////        public static void main(String[] args)throws IOException    {        PrintWriter out= new PrintWriter(System.out);        Reader sc=new Reader();        String s=sc.s();        int l=s.length();        if(s.charAt(0)=='@'||s.charAt(l-1)=='@'||s.indexOf("@@")!=-1||s.indexOf("@")==-1)        {            System.out.println("No solution");            System.exit(0);        }        for(int i=0;i<26;i++)        {            if(s.indexOf("@"+(char)(i+97)+"@")!=-1)            {                System.out.println("No solution");                System.exit(0);            }        }        StringBuilder s1=new StringBuilder("");        for(int i=0;i<l;i++)        {            if(s.charAt(i)=='@')            {                s1=s1.append(s.charAt(i)+""+s.charAt(i+1)+",");                i++;            }            else            s1=s1.append(s.charAt(i));        }        s1=s1.reverse();        String s2="";        for(int i=0;i<s1.length();i++)        {            if(s1.charAt(i)==',')            {                s2=s1.substring(0,i)+(s1.substring(i+1));                break;            }        }        System.out.println(new StringBuilder(s2).reverse());    }} 
