import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Random;import java.util.StringTokenizer; public class Main implements Runnable { 	long INF = (long) 1e9 + 9; 	private void solve() throws IOException {//		System.err.println(2 * inv(3) % INF);//		long n = nextInt();//		long a = nextInt();//		long b = nextInt();//		int k = nextInt();//		long s[] = new long[k];//		String st = next();//		assert (st.length() == k);//		for (int i = 0; i < st.length(); ++i) {//			char ch = st.charAt(i);//			if (ch == '+')//				s[i] = 1;//			else//				s[i] = -1;//		}//		long t = (n + 1) / k;//		long ans1 = binpow(a, k - k * t);//		long tmp1 = binpow(b, k * t) - binpow(a, k * t);//		if (tmp1 < 0)//			tmp1 += INF;//		long tmp2 = binpow(b, k) - binpow(a, k);//		if (tmp2 < 0)//			tmp2 += INF;//		tmp1 = tmp1 * inv(tmp2) % INF;//		ans1 = ans1 * tmp1 % INF;//		long ans2 = 0;//		for (int i = 0; i < k; ++i) {//			tmp1 = binpow(a, n - i);//			tmp2 = binpow(b, i);//			tmp1 = tmp1 * tmp2 % INF;//			if (s[i] == 1) {//				ans2 += tmp1;//				if (ans2 >= INF)//					ans2 -= INF;//			} else {//				ans2 -= tmp1;//				if (ans2 < 0)//					ans2 += INF;//			}//		}//		ans1 = ans1 * ans2 % INF;//		pw.println(ans1);		long n = nextInt();		long a = nextInt();		long b = nextInt();		int k = nextInt();		long s[] = new long[k];		String st = next();		assert (st.length() == k);		for (int i = 0; i < st.length(); ++i) {			char ch = st.charAt(i);			if (ch == '+')				s[i] = 1;			else				s[i] = -1;		}		long t = (n + 1) / k;		long ans1 = 0;		long tmp = binpow(b * inv(a) % INF, k);		long d = tmp - 1;		if (d < 0)			d += INF;		long nu = binpow(tmp, t) - 1;		if (nu < 0)			nu += INF;		ans1 = nu * inv(d) % INF;		long ans2 = 0;		for (int i = 0; i < k; ++i) {			long tmp1 = binpow(a, n - i);			long tmp2 = binpow(b, i);			tmp1 = tmp1 * tmp2 % INF;			if (s[i] == 1) {				ans2 += tmp1;				if (ans2 >= INF)					ans2 -= INF;			} else {				ans2 -= tmp1;				if (ans2 < 0)					ans2 += INF;			}		}		if (tmp == 1) {			pw.println(ans2 * t % INF);		} else {			ans1 = ans1 * ans2 % INF;			pw.println(ans1);		}	} 	long inv(long x) {		return binpow(x, INF - 2) % INF;	} 	long binpow(long x, long y) {		long prod = 1;		while (y > 0) {			if ((y & 1) == 1) {				prod = prod * x % INF;			}			x = x * x % INF;			y >>= 1;		}		return prod % INF;	} 	void test() throws IOException {		Random rnd = new Random();		for (int i = 0; i < 5; ++i) {			int n = rnd.nextInt(10) + 1;			int a[] = new int[n];			System.err.println(n);			for (int j = 0; j < n; ++j) {				a[j] = rnd.nextInt(20) + 1;				System.err.print(a[j] + " ");			}//			solve(n, a);			System.err.println();		}	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in), 32768);			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
