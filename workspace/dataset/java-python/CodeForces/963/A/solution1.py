#include<bits/stdc++.h>#define all(x) (x).begin(), (x).end()#define ll long long#define fi first#define se second#define pb push_back#define mp make_pair#define int long long#define vi vector<int>#define ld long double#define For(i, a, b) for(int i = (a); i < (b); ++i)#define Rfor(i, b, a) for(int i = (b); i > (a); --i)using namespace std;int M = 1e9 + 9;int add(int a, int b){    return (a + b) % M;}int sub(int a, int b){    return add(a, M - b);}int mul(int a, int b){    return (a * 1ll * b) % M;}int binpow (int a, int n){    if (n == 0)        return 1;    if (n % 2 == 1)        return mul(binpow(a, n - 1), a);    else{        int b = binpow(a, n / 2);        return mul(b, b);    }}int inv(int n){    return binpow(n, M - 2);}void solve(){    int n, a, b, k;    cin >> n >> a >> b >> k;    string s;    cin >> s;    int d = (n + 1) / k;    int ans = 0;    int sum = 0;    int j = binpow(a, n);    if (s[0] == '+')        sum = add(sum, j);    else        sum = sub(sum, j);    int r = a;    a = inv(a);    For (i, 1, k)    {        if (s[i] == '+')            sum = add(sum, mul(mul(j, b), a));        else            sum = sub(sum, mul(mul(j, b), a));        j = mul(mul(j, b), a);    }    a = r;    ans = sum;    int da = binpow(a, k), db = binpow(b, k);    da = inv(da);    int b1 = ans;    int q = mul(db, da);    if (q == 1)        ans = mul(ans, d);    else    ans = mul(mul(b1, sub(1, binpow(q, d))), inv(sub(1, q)));    cout << ans;}main() {    ios_base::sync_with_stdio(false);    cin.tie(NULL), cout.tie(NULL);//    int t;//    cin >> t;//    while (t--)    solve();}
