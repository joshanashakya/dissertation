import javax.swing.plaf.basic.BasicInternalFrameTitlePane;import  java.io.*;import  java.math.*;import java.nio.Buffer;import java.sql.SQLSyntaxErrorException;import  java.util.*;import  java.text.*;import java.util.regex.Pattern;import java.util.stream.Collectors;  public class Main {    public static long gcd(long a,long b){        return b==0?a:gcd(b,a%b);    }    static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }    static ArrayList<Integer>[] g;    static int[] d,s;    static double eps=1e-9;    static long INF=0x3f3f3f3f;    static int Mod=(int) 1e9+9;    public static void main(String[] args) {        Scanner cin=new Scanner(System.in);        int n=cin.nextInt();        int a=cin.nextInt();        int b=cin.nextInt();        int k=cin.nextInt();        char[] s=cin.next().toCharArray();        long mul=0;        for(int i=0;i<k;i++){            long ant=pow_Mod(a,n-i)*pow_Mod(b,i)%Mod;            if(s[i]=='+'){                mul=(mul+ant)%Mod;            }            else{                mul=(mul-ant+Mod)%Mod;            }        }        int m=(n+1)/k;        long q=pow_Mod(b*pow_Mod(a,Mod-2)%Mod,k);        long sum=q==1?m:(pow_Mod(q,m)-1)%Mod*pow_Mod((q-1+Mod)%Mod,Mod-2)%Mod;        long ans = sum * mul % Mod;        System.out.println(ans);    }          public static long pow_Mod(long a,long b)        {            long ant=1;            while(b>0){                if(b%2==1){                    ant=(ant*a)%Mod;                }                a=a*a%Mod;                b=b>>1;            }            return ant;        }    }      	 			 		 		 	  	       	 		 	
