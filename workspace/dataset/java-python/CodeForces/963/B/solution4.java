import java.io.*;import java.util.*; public class Main implements Runnable {	boolean judge = false;	FastReader scn;	PrintWriter out;	String INPUT = ""; 	void solve() {		int n = scn.nextInt();		if (n % 2 == 0) {			out.println("NO");			return;		}		int[] par = new int[n];		for (int i = 0; i < n; i++) {			par[i] = scn.nextInt() - 1;		}		int[][] g = parentToG(par); 		int[] size = new int[n];		dfs(g, size, 0, -1);				out.println("YES");		dfs2(g, size, 0, -1);	}		void dfs2(int[][] g, int[] size, int u, int p) {		for(int v : g[u]) {			if(v != p && size[v] == 0) {				dfs2(g, size, v, u);			}		}		out.println(u + 1);		for(int v : g[u]) {			if(v != p && size[v] == 1) {				dfs2(g, size, v, u);			}		}	}		void dfs(int[][] g, int[] size, int u, int p) {		size[u] = 1;		for(int v : g[u]) {			if(v != p) {				dfs(g, size, v, u);				size[u] ^= size[v];			}		}	} 	int[][] parentToG(int[] par) {		int n = par.length;		int[] ct = new int[n];		for (int i = 0; i < n; i++) {			if (par[i] >= 0) {				ct[i]++;				ct[par[i]]++;			}		}		int[][] g = new int[n][];		for (int i = 0; i < n; i++) {			g[i] = new int[ct[i]];		}		for (int i = 0; i < n; i++) {			if (par[i] >= 0) {				g[par[i]][--ct[par[i]]] = i;				g[i][--ct[i]] = par[i];			}		}		return g;	} 	public void run() {		long time = System.currentTimeMillis();		boolean oj = System.getProperty("ONLINE_JUDGE") != null || judge;		out = new PrintWriter(System.out);		scn = new FastReader(oj);		solve();		out.flush();		if (!oj) {			System.out.println(Arrays.deepToString(new Object[] { System.currentTimeMillis() - time + " ms" }));		}	} 	public static void main(String[] args) {		new Thread(null, new Main(), "Main", 1 << 28).start();	} 	class FastReader {		InputStream is; 		public FastReader(boolean onlineJudge) {			is = onlineJudge ? System.in : new ByteArrayInputStream(INPUT.getBytes());		} 		byte[] inbuf = new byte[1024];		public int lenbuf = 0, ptrbuf = 0; 		int readByte() {			if (lenbuf == -1)				throw new InputMismatchException();			if (ptrbuf >= lenbuf) {				ptrbuf = 0;				try {					lenbuf = is.read(inbuf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (lenbuf <= 0)					return -1;			}			return inbuf[ptrbuf++];		} 		boolean isSpaceChar(int c) {			return !(c >= 33 && c <= 126);		} 		int skip() {			int b;			while ((b = readByte()) != -1 && isSpaceChar(b))				;			return b;		} 		double nextDouble() {			return Double.parseDouble(next());		} 		char nextChar() {			return (char) skip();		} 		String next() {			int b = skip();			StringBuilder sb = new StringBuilder();			while (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')				sb.appendCodePoint(b);				b = readByte();			}			return sb.toString();		} 		String nextLine() {			int b = skip();			StringBuilder sb = new StringBuilder();			while ((!isSpaceChar(b) || b == ' ')) { // when nextLine, (isSpaceChar(b) && b != ' ')				sb.appendCodePoint(b);				b = readByte();			}			return sb.toString();		} 		char[] next(int n) {			char[] buf = new char[n];			int b = skip(), p = 0;			while (p < n && !(isSpaceChar(b))) {				buf[p++] = (char) b;				b = readByte();			}			return n == p ? buf : Arrays.copyOf(buf, p);		} 		int nextInt() {			int num = 0, b;			boolean minus = false;			while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))				;			if (b == '-') {				minus = true;				b = readByte();			} 			while (true) {				if (b >= '0' && b <= '9') {					num = num * 10 + (b - '0');				} else {					return minus ? -num : num;				}				b = readByte();			}		} 		long nextLong() {			long num = 0;			int b;			boolean minus = false;			while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))				;			if (b == '-') {				minus = true;				b = readByte();			} 			while (true) {				if (b >= '0' && b <= '9') {					num = num * 10 + (b - '0');				} else {					return minus ? -num : num;				}				b = readByte();			}		} 		char[][] nextMatrix(int n, int m) {			char[][] map = new char[n][];			for (int i = 0; i < n; i++)				map[i] = next(m);			return map;		} 		int[] nextIntArray(int n) {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		long[] nextLongArray(int n) {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		int[][] next2DInt(int n, int m) {			int[][] arr = new int[n][];			for (int i = 0; i < n; i++) {				arr[i] = nextIntArray(m);			}			return arr;		} 		long[][] next2DLong(int n, int m) {			long[][] arr = new long[n][];			for (int i = 0; i < n; i++) {				arr[i] = nextLongArray(m);			}			return arr;		} 		int[] shuffle(int[] arr) {			Random r = new Random();			for (int i = 1, j; i < arr.length; i++) {				j = r.nextInt(i);				int c = arr[i];				arr[i] = arr[j];				arr[j] = c;			}			return arr;		} 		long[] shuffle(long[] arr) {			Random r = new Random();			for (int i = 1, j; i < arr.length; i++) {				j = r.nextInt(i);				long c = arr[i];				arr[i] = arr[j];				arr[j] = c;			}			return arr;		} 		int[] uniq(int[] arr) {			arr = scn.shuffle(arr);			Arrays.sort(arr);			int[] rv = new int[arr.length];			int pos = 0;			rv[pos++] = arr[0];			for (int i = 1; i < arr.length; i++) {				if (arr[i] != arr[i - 1]) {					rv[pos++] = arr[i];				}			}			return Arrays.copyOf(rv, pos);		} 		long[] uniq(long[] arr) {			arr = scn.shuffle(arr);			Arrays.sort(arr);			long[] rv = new long[arr.length];			int pos = 0;			rv[pos++] = arr[0];			for (int i = 1; i < arr.length; i++) {				if (arr[i] != arr[i - 1]) {					rv[pos++] = arr[i];				}			}			return Arrays.copyOf(rv, pos);		} 		int[] reverse(int[] arr) {			int l = 0, r = arr.length - 1;			while (l < r) {				arr[l] = arr[l] ^ arr[r];				arr[r] = arr[l] ^ arr[r];				arr[l] = arr[l] ^ arr[r];				l++;				r--;			}			return arr;		} 		long[] reverse(long[] arr) {			int l = 0, r = arr.length - 1;			while (l < r) {				arr[l] = arr[l] ^ arr[r];				arr[r] = arr[l] ^ arr[r];				arr[l] = arr[l] ^ arr[r];				l++;				r--;			}			return arr;		} 		int[] compress(int[] arr) {			int n = arr.length;			int[] rv = Arrays.copyOf(arr, n);			rv = uniq(rv);			for (int i = 0; i < n; i++) {				arr[i] = Arrays.binarySearch(rv, arr[i]);			}			return arr;		} 		long[] compress(long[] arr) {			int n = arr.length;			long[] rv = Arrays.copyOf(arr, n);			rv = uniq(rv);			for (int i = 0; i < n; i++) {				arr[i] = Arrays.binarySearch(rv, arr[i]);			}			return arr;		} 		void deepFillInt(Object array, int val) {			if (!array.getClass().isArray()) {				throw new IllegalArgumentException();			}			if (array instanceof int[]) {				int[] intArray = (int[]) array;				Arrays.fill(intArray, val);			} else {				Object[] objArray = (Object[]) array;				for (Object obj : objArray) {					deepFillInt(obj, val);				}			}		} 		void deepFillLong(Object array, long val) {			if (!array.getClass().isArray()) {				throw new IllegalArgumentException();			}			if (array instanceof long[]) {				long[] intArray = (long[]) array;				Arrays.fill(intArray, val);			} else {				Object[] objArray = (Object[]) array;				for (Object obj : objArray) {					deepFillLong(obj, val);				}			}		}	}}
