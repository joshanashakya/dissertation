import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.Objects;import java.util.PriorityQueue;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		static ArrayList<Integer>[] g;	static int[] size;	static int[] ans;	static int pt = 0;			    public static void main(String[] args) throws IOException {    			    	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt();    		g = new ArrayList[n+1];    		for(int i=0;i<=n;i++) g[i] = new ArrayList<Integer>();    		    		int rt = -1;    		for(int i=1;i<=n;i++) {    			int p = fs.nextInt();    			if(p!=0) g[p].add(i);    			else rt = i;    		}    		    		size = new int[n+1];    		ans = new int[n];    		    		if(n%2==0) {    			out.println("NO");    			out.flush();    			return;    		}    		    		    		ArrayList<Integer>[] G = g;    		    		dfs1(rt);     		dfs2(rt);    		    		out.println("YES");    		for(int i=0;i<n;i++) {    			out.println(ans[i]);    		}    		    		    		    		    		    		    		    	}    	    	out.close();    		    }            static void dfs1(int v) {    	size[v] = 1;    	for(int u: g[v]) {    		dfs1(u);    		size[v] += size[u];    	}    }            static void dfs2(int v) {    	for(int u: g[v])    		if(size[u]%2==0) dfs2(u);    	ans[pt++] = v;    	for(int u: g[v])    		if(size[u]%2!=0) dfs2(u);    }                   static final Random random=new Random();        static <T> void shuffle(T[] arr) {    	int n = arr.length;    	for(int i=0;i<n;i++	) {    		int k = random.nextInt(n);    		T temp = arr[k]; arr[k] = arr[i]; arr[i] = temp;    	}    }        	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
