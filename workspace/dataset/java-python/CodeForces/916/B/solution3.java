import java.io.*;import java.util.*; import static java.lang.Math.abs; /** * Created by Katushka on 08.02.2020. */public class JamieAndBinarySequence {     public static void main(String[] args) throws FileNotFoundException {        InputReader in = new InputReader(System.in);        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         long n = in.nextLong();        int k = in.nextInt();         long initN = n;         long[] ans = new long[100];        int d = 0;        int count = 0;        while (n > 0) {            if (n % 2 == 1) {                ans[d + 30] = 1;                count++;            }            n /= 2;            d++;        }        if (count > k) {            out.println("No");            out.close();            return;        }         int j = d + 30;        while (ans[j] == 0) {            j--;        }        int maxJ = j;        while (count < k) {            while (ans[j] == 0) {                j--;            }            ans[j] -= 1;            ans[j - 1] += 2;            count += 1;            if (j == maxJ && ans[j] == 0) {                maxJ = j - 1;            }        }        if (ans[maxJ - 1] >= 2) {            ans[maxJ] += ans[maxJ - 1] / 2;            count -= ans[maxJ - 1] / 2;            ans[maxJ - 1] -= (ans[maxJ - 1] / 2) * 2;        }         j = 0;        while (ans[j] == 0) {            j++;        }        ans[j] -= 1;        StringBuilder ansStr = new StringBuilder();        for (int i = d + 30; i >= j; i--) {            for (int t = 0; t < ans[i]; t++) {                ansStr.append(i - 30).append(' ');            }        }         while (count < k) {            ansStr.append((j - 1) - 30).append(' ');            count += 1;            j--;        }        ansStr.append(j - 30).append(' ');         out.println("Yes");        out.println(ansStr.toString());         out.close();    }     private static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextString() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public char nextChar() {            return next().charAt(0);        }    }}
