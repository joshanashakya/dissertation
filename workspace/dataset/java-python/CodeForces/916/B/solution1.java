import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer; public class Solution{		static final int N = 70;		    public static void main(String[] args) throws IOException {    			    	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    		    	int tt = 1;    	while(tt-->0) {    		    		    		long n = fs.nextLong();    		int k = fs.nextInt();    		    		int[] bits = new int[150];    		    		long t = n;    		int pt = 0;    		int num = 0;    		    		while(t>0) {    			if((t&1)==1) {    				bits[pt+N]++;    				num++;    			}    			pt++;    			t /= 2;    		}    		    		if(k<num) {    			out.println("No");    			out.flush();    			return;    		}    		    		k -= num;    		    		for(int i=149;i>0;i--) {    			if(bits[i]<=k) {    				bits[i-1] += 2*bits[i];    				k -= bits[i];    				bits[i] = 0;    			}    			else {    				break;    			}    		}    		    		ArrayDeque<Integer> q = new ArrayDeque<>();    		    		for(int i=149;i>=0;i--) {    			for(int j=0;j<bits[i];j++) {    				q.add(i-N);    			}    		}    		    		while(k>0) {    			int last = q.pollLast();    			q.add(last-1); q.add(last-1);    			k--;    		}    		    		out.println("Yes");    		    		for(int i: q) {    			out.print(i+" ");    		}    		out.println();    		    		    		    	}    	    	out.close();    		    }                                   static final Random random=new Random();        static <T> void shuffle(T[] arr) {    	int n = arr.length;    	for(int i=0;i<n;i++	) {    		int k = random.nextInt(n);    		T temp = arr[k]; arr[k] = arr[i]; arr[i] = temp;    	}    }        	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
