import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.*;import java.io.*;public class codeforces {    static class Student{       long x,y;        Student(long x,long y){            this.x=x;            this.y=y;        }    }    static int prime[];    static void sieveOfEratosthenes(int n)     {         // Create a boolean array "prime[0..n]" and initialize         // all entries it as true. A value in prime[i] will         // finally be false if i is Not a prime, else true.         int pos=0;        prime= new int[n+1];         for(int p = 2; p*p <=n; p++)         {             // If prime[p] is not changed, then it is a prime             if(prime[p] == 0)            {                 // Update all multiples of p                prime[p]=p;                for(int i = p*p; i <= n; i += p)                     prime[i] = p;             }         }     }static    class Sortbyroll implements Comparator<Student> {     // Used for sorting in ascending order of     // roll number     public int compare(Student c, Student b)     {         if(c.x<=b.x)            return -1;        return 1;    } } static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }      static class Edge{        int a,b;        Edge(int a,int b){            this.a=a;            this.b=b;        }    }    static int parent[];    static int rank[];    static int b[][];    //static int seg[];    static int ans;    static void solve()throws IOException{        FastReader sc=new FastReader();        int k,c=0,f=0,i,t,x=0;        long n;        n=sc.nextLong();        k=sc.nextInt();        HashMap<Integer,Integer>map=new HashMap<>();        //PriorityQueue<Integer>q=new PriorityQueue<>(Collections.reverseOrder());        while(n!=0){            if(n%(long)2==(long)1){                if(!map.containsKey(c))                    map.put(c,1);                else                    map.put(c,map.get(c)+1);                ++f;                ++x;            }            ++c;            n=n/(long)2;        }        if(f>k)            System.out.println("No");        else{            for(i=63;i>=-63;i--){                if(!map.containsKey(i))                    continue;                if(x+map.get(i)<=k){                    if(!map.containsKey(i-1))                        t=0;                    else                        t=map.get(i-1);                    map.put(i-1,t+2*map.get(i));                    x+=map.get(i);                    map.remove(i);                }                else                    break;            }            //PriorityQueue<Integer>q=new PriorityQueue<>();            Stack<Integer>s=new Stack<>();            for(i=63;i>=-63;i--){                while(map.containsKey(i)&&map.get(i)>0){                    s.push(i);                    map.put(i,map.get(i)-1);                }            }            System.out.println("Yes");            while(s.size()!=k){                t=s.pop();                s.push(t-1);                s.push(t-1);            }            int a[]=new int[s.size()];            c=s.size();            while(!s.isEmpty()){                a[--c]=s.pop();            }            for(i=0;i<a.length;i++)                System.out.print(a[i]+" ");        }    }    public static void main(String[] args){        //long sum=0;        try {                codeforces.solve();                } catch (Exception e) {                    e.printStackTrace();                }    } /*static long power(long x, long y, long p) {     long res = 1;      // Initialize result       x = x % p;  // Update x if it is more than or                  // equal to p       /*while (y > 0)     {         // If y is odd, multiply x with result         if ((y & (long)1)%2!=0)             res = (res*x) % p;           // y must be even now         y = y>>1; // y = y/2         x = (x*x) % p;       } */    //return res%p;    static int find(int x)     {         // Finds the representative of the set         // that x is an element of         while(parent[x]!=x)         {             // if x is not the parent of itself             // Then x is not the representative of             // his set,            x=parent[x];              // so we recursively call Find on its parent             // and move i's node directly under the             // representative of this set         }           return x;     }    static void union(int x, int y)     {         // Find representatives of two sets         int xRoot = find(x), yRoot = find(y);           // Elements are in the same set, no need         // to unite anything.         if (xRoot == yRoot)             return;            // If x's rank is less than y's rank         if (rank[xRoot] < rank[yRoot])               // Then move x under y  so that depth             // of tree remains less             parent[xRoot] = yRoot;           // Else if y's rank is less than x's rank         else if (rank[yRoot] < rank[xRoot])               // Then move y under x so that depth of             // tree remains less             parent[yRoot] = xRoot;           else // if ranks are the same         {             // Then move y under x (doesn't matter             // which one goes where)             parent[yRoot] = xRoot;               // And increment the the result tree's             // rank by 1             rank[xRoot] = rank[xRoot] + 1;         }     }     static long gcd(long a, long b)     {         if (a == 0)             return b;         return gcd(b % a, a);     }}
