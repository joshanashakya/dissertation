import java.io.*;import java.util.*; public class Main {    public static void main(String[] args) throws InterruptedException {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        MyScanner in = new MyScanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        solve(in, out);        out.close();    }     static void solve(MyScanner in, PrintWriter out) {        int n,m;        n = in.nextInt();        m = in.nextInt();        int[][] mt = new int[n][m];        for (int i = 0; i < n; i++) {            for (int j = 0;j < m; j++) {                mt[i][j] = in.nextInt();            }        }        int ans = n;        while (ans % 2 == 0 && isSym(mt, ans)) {            ans /= 2;        }        out.println(ans);    }     static boolean isSym(int[][] mt, int len) {        int up = len / 2 - 1;        int down = len / 2;        int m = mt[0].length;        while (up >= 0) {            for (int i = 0; i < m; i++) {                if (mt[up][i] != mt[down][i]) {                    return false;                }            }            up--;            down++;        }        return true;    }     static class MyScanner {        BufferedReader br;        StringTokenizer st;         public MyScanner(InputStream io) {            br = new BufferedReader(new InputStreamReader(io));        }         public String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }    }}
