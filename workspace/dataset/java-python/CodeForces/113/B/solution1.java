import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;    // public static long mod = 2464122897L;    public static long p = 37;    public static long[] pPowers = new long[2001];    static {        pPowers[0] = 1;        for (int i = 1; i < 2001; i++) {            pPowers[i] = (pPowers[i-1] * p) % mod;            // pPowers[i] = (pPowers[i-1] * p);        }    }     char[] ca;    char[] pa;    char[] sa;    int n, pn, sn;    void run(FastScanner in, PrintWriter out) {         ca = in.next().toCharArray();        pa = in.next().toCharArray();        sa = in.next().toCharArray();        n = ca.length;        pn = pa.length;        sn = sa.length;         long ph = 0, sh = 0;        for (char c : pa) ph = (ph*p + (c-'a'+1)) % mod;        for (char c : sa) sh = (sh*p + (c-'a'+1)) % mod;         int cnt = 0;        Set<Long> s = new HashSet<>();        long prev = -1;         long prev_ph_start = -1;        long prev_sh_start = -1;        long prev_h_start = -1;        long curr_ph = 0, curr_sh = 0, h = 0;         for (int len = Math.max(pn, sn); len <= n; len++) {            s.clear();            prev = -1;             if (prev_ph_start != -1) {                curr_ph = prev_ph_start;                curr_sh = prev_sh_start;                h = prev_h_start;                 h = (h*p + (ca[len-1]-'a'+1))%mod;                curr_sh = (curr_sh*p)%mod;                curr_sh = (curr_sh + (ca[len-1]-'a'+1))%mod;                curr_sh = (curr_sh - ((ca[len-1-sn]-'a'+1)*pPowers[sn])%mod)%mod;                curr_sh = ((curr_sh%mod)+mod)%mod;             } else {                // initialize current prefix and suffix hashes                for (int i = 0; i < len; i++) {                    if (i < pn) curr_ph = (curr_ph*p + (ca[i]-'a'+1)) % mod;                    if (i+sn >= len) curr_sh = (curr_sh*p + (ca[i]-'a'+1)) % mod;                    h = (h*p + (ca[i]-'a'+1)) % mod;                }            }             prev_ph_start = curr_ph;            prev_sh_start = curr_sh;            prev_h_start = h;             if (curr_ph == ph && curr_sh == sh) {                s.add(h);                prev = h;                cnt++;            }             for (int i = len; i < n; i++) {                curr_ph = (curr_ph*p)%mod;                curr_ph = (curr_ph + (ca[i-len+pn]-'a'+1))%mod;                curr_ph = (curr_ph - ((ca[i-len]-'a'+1)*pPowers[pn])%mod)%mod;                curr_ph = ((curr_ph%mod)+mod)%mod;                 curr_sh = (curr_sh*p)%mod;                curr_sh = (curr_sh + (ca[i]-'a'+1))%mod;                curr_sh = (curr_sh - ((ca[i-sn]-'a'+1)*pPowers[sn])%mod)%mod;                curr_sh = ((curr_sh%mod)+mod)%mod;                 h = (h*p)%mod;                h = (h+(ca[i]-'a'+1)) % mod;                h = (h - ((ca[i-len]-'a'+1)*pPowers[len])%mod)%mod;                h = ((h%mod)+mod)%mod;                // curr_ph = (curr_ph*p + (ca[i]-'a'+1));                // curr_ph = (curr_ph - (ca[i-pn]-'a'+1)*pPowers[pn]);                // curr_ph = ((curr_ph%mod)+mod)%mod;                 // curr_sh = (curr_sh*p + (ca[i]-'a'+1));                // curr_sh = (curr_sh - (ca[i-sn]-'a'+1)*pPowers[sn]);                // curr_sh = ((curr_sh%mod)+mod)%mod;                 // h = h*p+(ca[i]-'a'+1);                // h = (h - (ca[i-len]-'a'+1)*pPowers[len]);                // h = ((h%mod)+mod)%mod;                 if (curr_ph == ph && curr_sh == sh && h != prev && !s.contains(h)) {                    s.add(h);                    prev = h;                    cnt++;                }            }        }         out.println(cnt);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
