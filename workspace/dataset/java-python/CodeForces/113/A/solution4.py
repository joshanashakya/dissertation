#------------------------------warmup----------------------------import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fraction BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now----------------------------------------------------a=list(map(str,input().split(" ")))#print(a)b=[0]*3g=[0]*2ch=1for i in a:    l=-len(i)    #print(l)    if i[max(-4,l):]=="lios" or i[max(-5,l):]=="liala":        b[0]+=1        if i[max(-4,l):]=="lios":            g[0]+=1        else:            g[1]+=1        if b[1]>0 or b[2]>0:            ch=0    elif i[max(-3,l):]=="etr" or i[max(-4,l):]=="etra":        b[1]+=1        if i[max(-3,l):]=="etr":            g[0]+=1        else:            g[1]+=1        if b[1]>1 or b[2]>0:            ch=0    elif i[max(-6,l):]=="initis" or i[max(-6,l):]=="inites":        b[2]+=1        if i[max(-6,l):]=="initis":            g[0]+=1        else:            g[1]+=1        if b[0]>0 and b[1]==0:            ch=0    else:        ch=0    #print(b)if (b[0]>1 and b[1]==0 and b[2]==0) or (b[0]==0 and b[1]==0 and b[2]>1):    ch=0if ch==1 and (b[0]>0 or b[1]>0 or b[2]>0) and (g[0]==0 or g[1]==0):    print("YES")else:    print("NO")
