import java.util.*;import java.io.*;import static java.lang.Math.*; public class PracticeProblem{    /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }     public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);    public static String[] adj = {"lios", "liala"};    public static String[] nouns = {"etr", "etra"};    public static String[] verbs = {"initis", "inites"};    public static String[][] grammar = {adj, nouns, verbs};     public static int gender(String s, int index)    {        for (int i = 0; i < grammar[index].length; i++)        {            if (s.indexOf(grammar[index][i], s.length() - grammar[index][i].length()) != -1)            {                return i;            }        }         return -1; // This means "s" was not a valid adjective (if index == 0), noun (if index == 1), or verb (if index == 2)    }     public static int gender(String s)    {        int gender = -1;        for (int i = 0; i < grammar.length; i++) // Takes advantage of the fact that these suffixes do not overlap        {            gender = max(gender, gender(s, i));        }         return gender; // If this ends up being -1, this means "s" is not a valid Petya word    }      public static void main(String[] args)    {        solve();        out.close();    }     private static void solve()    {        String raw = in.nextLine();        StringTokenizer line = new StringTokenizer(raw);        List<String> arr = new ArrayList<>((int)1e5);         while (line.hasMoreTokens())            arr.add(line.nextToken());         int n = arr.size();         int gender = gender(arr.get(0));         if (gender == -1)        {            out.println("NO");            return;        }         if (n == 1)        {            out.println("YES");            return;        }         int i = 0;         while (i < n && gender(arr.get(i), 0) != -1)        {            if (gender(arr.get(i), 0) != gender)            {                out.println("NO");                return;            }            i++;        }         if (i >= n || gender(arr.get(i), 1) == -1 || gender(arr.get(i), 1) != gender)        {            out.println("NO");            return;        }         i++;         while (i < n && gender(arr.get(i),  2) != -1)        {            if (gender(arr.get(i), 2) != gender)            {                out.println("NO");                return;            }            i++;        }         if (i < n)        {            out.println("NO");            return;        }         out.println("YES");    }}
