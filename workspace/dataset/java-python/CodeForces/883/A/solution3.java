import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class B { 	static long n, m, a, d;	static long arr[];		public static void main(String[] args) throws NumberFormatException, IOException {		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out);		n = sc.nextLong();		m = sc.nextLong();		a = sc.nextLong();		d = sc.nextLong();				arr = new long[(int)m];		for(int i = 0; i < m; ++i) arr[i] = sc.nextLong();				long close = 0;		int i = 0;				long lo, hi;				long open = 0;		long inc = (d / a) + 1;				while(i < m)		{			lo = aboveClose(close);			hi = belowCurrent(arr[i]);			if(lo <= hi)			{				open += ((hi - lo + 1) + (inc - 1)) / inc;				long mod = (hi - lo + 1) % inc;				long tmp = (mod == 0)?hi - (inc - 1):hi - (mod - 1);				close = a * tmp + d;			}			else			{				close = arr[i] + d;				open++;			}			while(i < m && arr[i] <= close) i++;		}		if(close < a * n)		{			lo = aboveClose(close);			if(lo <= n) open += (((n - lo) + 1) + (inc - 1)) / inc;		}				out.println(open);				out.flush();	}		static long aboveClose(long close)	{		long lo = 1, hi = n, ans = (long) 1e18 + 7;		long mid;		while(lo <= hi)		{						mid = ((lo + hi) >> 1L);			if(mid * a > close)			{				ans = mid;				hi = mid - 1;			}			else				lo = mid + 1;		}		return ans;	}		static long belowCurrent(long current)	{		long lo = 1, hi = n, ans = 0;		long mid;		while(lo <= hi)		{			mid = ((lo + hi) >> 1L);			if(mid * a < current)			{				ans = mid;				lo = mid + 1;			}			else				hi = mid - 1;		}		return ans;	}		static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		Scanner(InputStream system) {br = new BufferedReader(new InputStreamReader(system));}		Scanner(String file) throws FileNotFoundException {br = new BufferedReader(new FileReader(file));}		String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		String nextLine()throws IOException{return br.readLine();}		int nextInt() throws IOException {return Integer.parseInt(next());}		double nextDouble() throws IOException {return Double.parseDouble(next());}		char nextChar()throws IOException{return next().charAt(0);}		Long nextLong()throws IOException{return Long.parseLong(next());}		boolean ready() throws IOException{return br.ready();}		void waitForInput(){for(long i = 0; i < 3e9; i++);}	}}
