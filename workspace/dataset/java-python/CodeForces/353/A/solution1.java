import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        ADomino solver = new ADomino();        solver.solve(1, in, out);        out.close();    }     static class ADomino {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            int up = 0, down = 0;            int flag = 0;            for (int i = 0; i < n; i++) {                int a = in.nextInt();                int b = in.nextInt();                up += a;                down += b;                if ((a % 2 == 1 && b % 2 == 0) || (a % 2 == 0 && b % 2 == 1)) flag = 1;            }            if ((up % 2 == 1 && down % 2 == 0) || (up % 2 == 0 && down % 2 == 1)) {                out.println(-1);            } else if (up % 2 == 0 && down % 2 == 0) out.println(0);            else {                if (flag == 1) out.println(1);                else out.println(-1);            }        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }} 
