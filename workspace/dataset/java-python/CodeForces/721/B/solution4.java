import java.util.Map;import java.util.Scanner;import java.util.TreeMap;Â public class Passwords {		public static void main(String args[])	{		Scanner sc = new Scanner(System.in);		TreeMap<Integer, Integer> passwordLengths = new TreeMap<>(); 				int n = sc.nextInt();		int k = sc.nextInt();		sc.nextLine();				for(int i = 0; i < n; i++)		{			String psw = sc.nextLine();						if(!passwordLengths.containsKey(psw.length()))			{				passwordLengths.put(psw.length(), 1);			}			else			{				passwordLengths.put(psw.length(), passwordLengths.get(psw.length()) + 1);			}		}				String rightPassword = sc.nextLine();		int rightLength = rightPassword.length();				Pair pair = calcBestAndWorstCase(rightLength, passwordLengths, k);		pair.print();						sc.close();	}		private static Pair calcBestAndWorstCase(int pswLength, TreeMap<Integer, Integer> passwordLengths, int k)	{		Pair pair = new Pair();		int tries = 0;				for(Map.Entry<Integer, Integer> entry : passwordLengths.entrySet())		{			if(entry.getKey() < pswLength)			{				tries += entry.getValue();			}		}				int multiplier = (tries < k) ? 0 : (tries/k);		pair.bestCase = (tries +  multiplier * 5) + 1;				tries = tries + passwordLengths.get(pswLength) - 1;		multiplier = tries/k;		pair.worstCase = (tries +  multiplier * 5) + 1;				return pair;	}		static class Pair	{		int bestCase;		int worstCase;				public void print()		{			System.out.println(bestCase);			System.out.println(worstCase);		}	}	}
