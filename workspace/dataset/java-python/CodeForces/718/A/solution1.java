//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.Comparator; public class A {      public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt();			int t=sc.nextInt();			char str[]=sc.next().toCharArray();			long dp[]=new long[n+5];			int dot =0;			dp[n-1]=Integer.MAX_VALUE;			for(int i=n-1;i>=0;i--) {				int num =str[i]-'0';				if(str[i-1] == '.') {					dot=i-1;					if(num>=5) {						dp[i-1]=1;					}					else {						if(dp[i] != Integer.MAX_VALUE && num==4)							dp[i-1]=dp[i]+1;						else							dp[i-1]=Integer.MAX_VALUE;						}					break;				}								if(num>=5) {					dp[i-1]=1;				}				else {					if(dp[i] != Integer.MAX_VALUE && num==4)					dp[i-1]=dp[i]+1;					else						dp[i-1]=Integer.MAX_VALUE;				}			}						for(int i=dot;i<n;i++) {				if(dp[i]<=t) {					str = round(str,i,dot);					break;				}			}			String m=new String(str);			if(str[0] == '#') 				m=m.substring(1);						if(m.indexOf('@')>-1)			m=m.substring(0,m.indexOf('@'));			ans.append(m+"\n");		}	    System.out.print(ans);	}         static char[] round(char str[],int index,int dot) {    	boolean first=false;    	for(int i=index;i>=0;i--) {    		if(i == dot) {    			continue;    		}    		int num =str[i]-'0';    		if(str[i] == '9') {    			str[i] = '0';    			if(i== 0) first=true;    		}    		else {    			str[i] = (char)((num+1)+'0');    			break;    		}    	}    	    	//TODO: trim after index    	    	    	    	boolean trim=true;    	char str2[]=new char[str.length+5];    	str2[index+2]='@';    	for(int i=index;i>=0;i--) {    		if(str[i] == '0' && trim) {    			str2[i+1]='@';    		}    		if(str[i] == '.' && trim) {    			str2[i+1]='@';    			trim=false;    			continue;    		}    		trim=false;    		str2[i+1]=str[i];    	}    	if(first) str2[0]='1';    	else str2[0]='#';    	    	return str2;    }           static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
