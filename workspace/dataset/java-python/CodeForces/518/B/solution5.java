import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Solution {     private final static FastReader in = new FastReader();    private static final PrintWriter out = new PrintWriter(System.out);      public static String solve(String s, String t) {        int yay = 0;        int whoops = 0;        int[] SArray = new int[64];        char[] nSt = s.toCharArray();        ArrayList<Integer> pos =  new ArrayList<>();        for (char c : t.toCharArray()) {            SArray[c - 'A']++;        }        int val;         for (int i = 0; i < nSt.length; i++) {            val = (nSt[i] - 'A');            if (SArray[val] > 0) {                SArray[val]--;                yay++;            } else {                pos.add(i);            }        }        for (int i : pos) {            if (nSt[i] >= 'a') {                val = (nSt[i] - 32)-'A';            } else {                val = (nSt[i] + 32)-'A';            }            if (SArray[val] > 0) {                SArray[val]--;                whoops++;            }        }         return yay + " " + whoops;    }      public static void main(String[] args) {        out.println(solve(in.next(), in.next()));        out.close();    }     private static final class FastReader {        private static BufferedReader BF;        private static StringTokenizer ST;         public FastReader() {            BF = new BufferedReader(new InputStreamReader(System.in));            ST = null;         }          public final String next() {            while (ST == null || !ST.hasMoreTokens()) {                try {                    ST = new StringTokenizer(BF.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return ST.nextToken();         }         final int nextInt() {            return Integer.parseInt(next());        }         final long nextLong() {            return Long.parseLong(next());        }    }  }
