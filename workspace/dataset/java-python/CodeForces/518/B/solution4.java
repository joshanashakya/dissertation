import java.util.*;import java.io.*;import java.text.*;/** * * @author alanl */public class Main{    static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));    static StringTokenizer st;    static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    public static void main(String[] args) throws IOException{        String s = readLine(), t = readLine();        int n = s.length(), m = t.length(), freq[] = new int[52], freq1[] = new int[52];        for(int i = 0; i<n; i++){            char cur = s.charAt(i);            if(cur>='a'&&cur<='z'){                freq[(int)(cur-'a')]++;            }            else freq[(int)(cur-'A')+26]++;        }        for(int i = 0; i<m; i++){            char cur = t.charAt(i);            if(cur>='a'&&cur<='z'){                freq1[(int)(cur-'a')]++;            }            else freq1[(int)(cur-'A')+26]++;        }        int ans = 0, ans1 = 0;        for(int i = 0; i<52; i++){            int a = Math.min(freq[i], freq1[i]);            freq[i]-=a;            freq1[i]-=a;            ans+=a;        }        for(int i = 0; i<52; i++){            if(i>=26){                int a = Math.min(freq[i], freq1[i-26]);                ans1+=a;                freq[i]-=a;                freq1[i-26]-=a;            }            else{                int a = Math.min(freq[i], freq1[i+26]);                ans1+=a;                freq[i]-=a;                freq1[i+26]-=a;            }        }        System.out.println(ans+" "+ans1);    }    static String next () throws IOException {        while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(input.readLine().trim());        return st.nextToken();    }    static long readLong () throws IOException {        return Long.parseLong(next());    }    static int readInt () throws IOException {        return Integer.parseInt(next());    }    static double readDouble () throws IOException {        return Double.parseDouble(next());    }    static char readChar () throws IOException {        return next().charAt(0);    }    static String readLine () throws IOException {        return input.readLine().trim();    }    /* stuff you should look for	* int overflow, array bounds	* special cases (n=1?)	* do smth instead of nothing and stay organized	* WRITE STUFF DOWN	* DON'T GET STUCK ON ONE APPROACH    // Did you read the bounds?    // Did you make typos?    // Are there edge cases (N=1?)    // Are array sizes proper (scaled by proper constant, for example 2* for koosaga tree)    // Integer overflow?    // DS reset properly between test cases?    // Is using long longs causing TLE?    // Are you using floating points?    */}
