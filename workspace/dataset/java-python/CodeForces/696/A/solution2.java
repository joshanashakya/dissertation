//package ;import java.io.*;import java.util.*; public class D {	static int log(long x)	{		return (int)(Math.log(x)/Math.log(2));	}	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner();		PrintWriter pw = new PrintWriter(System.out);		int q=sc.nextInt();		TreeMap<Pair, Long>hm=new TreeMap<>();		while(q-->0)		{			long t=sc.nextInt();			long u=sc.nextLong(),v=sc.nextLong();			Pair p=new Pair(u,v);			u=p.u;			v=p.v;			if(t==1)			{				long w=sc.nextLong();				int i=log(u),j=log(v);				while(u!=v)				{					if(i>j)					{						u>>=1;i=log(u);					}					else					{						v>>=1;j=log(v);					}				}				long lca=v;				u=p.u;				v=p.v;				while(u!=lca)				{					hm.put(new Pair(u, u>>1), hm.getOrDefault(new Pair(u, u>>1), 0l)+w);					u>>=1;				}				while(v!=lca)				{					hm.put(new Pair(v, v>>1), hm.getOrDefault(new Pair(v, v>>1), 0l)+w);					v>>=1;				}			}			else			{				long ans=0;				int i=log(u),j=log(v);				while(u!=v)				{					if(i>j)					{						u>>=1;i=log(u);					}					else					{						v>>=1;j=log(v);					}				}				long lca=v;				u=p.u;				v=p.v;				while(u!=lca)				{					ans+=hm.getOrDefault(new Pair(u, u>>1), 0l);					u>>=1;				}				while(v!=lca)				{					ans+=hm.getOrDefault(new Pair(v, v>>1), 0l);					v>>=1;				}				pw.println(ans);			}		}		pw.close();	}	static class Pair implements Comparable<Pair>	{		long u,v;		public Pair(long x,long y) {			// TODO Auto-generated constructor stub			u=Math.min(x, y);			v=Math.max(x, y);		}		@Override		public int compareTo(Pair o) {			// TODO Auto-generated method stub			return u==o.u?Long.compare(v, o.v):Long.compare(u, o.u);		}		@Override		public String toString() {			// TODO Auto-generated method stub			return u+" "+v;		}			}	static class Scanner {		BufferedReader br;		StringTokenizer st; 		Scanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() throws IOException {			while (st == null || !st.hasMoreTokens()) {				st = new StringTokenizer(br.readLine());			}			return st.nextToken();		} 		int nextInt() throws IOException {			return Integer.parseInt(next());		} 		long nextLong() throws IOException {			return Long.parseLong(next());		} 		double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		String nextLine() throws IOException {			return br.readLine();		} 		boolean hasnext() throws IOException {			return br.ready();		} 	}}
