import java.io.*;import java.util.StringTokenizer;import java.util.TreeMap;  public class Main {    static TreeMap<Long, Long> tm;     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int q = sc.nextInt();        tm = new TreeMap<>();        while (q-- > 0) {            int c = sc.nextInt();            long u = sc.nextLong();            long v = sc.nextLong();            if (c == 1) {                long w = sc.nextLong();                add(u, v, w);            } else                out.println(get(u, v));        }        out.flush();        out.close();    }     static void add(long u, long v, long c) {        if (u == v) return;        if (u < v) {            u ^= v;            v ^= u;            u ^= v;        }        long parent = u / 2;        if (tm.containsKey(u))            tm.put(u, (c + tm.get(u)));        else            tm.put(u, c);        add(parent, v, c);    }     static long get(long u, long v) {        if (u == v) return 0;        if (u < v) {            u ^= v;            v ^= u;            u ^= v;        }        long parent = u / 2;        long c = 0;        if (tm.containsKey(u))            c = tm.get(u);        return c + get(parent, v);     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public boolean ready() throws IOException {            return br.ready();        }     } }
