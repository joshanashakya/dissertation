import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.TreeMap;import java.util.StringTokenizer;import java.util.Map;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int q = in.nextInt();            TreeMap<Long, Long> cost = new TreeMap<>();            for (int i = 0; i < q; i++) {                int type = in.nextInt();                if (type == 1) {                    long v = in.nextLong();                    long u = in.nextLong();                    long w = in.nextLong();                    ArrayList<Long> path = shortPath(v, u);                    for (int j = 1; j < path.size(); j++) {                        long edge = getEdge(path.get(j - 1), path.get(j));                        cost.put(edge, cost.getOrDefault(edge, 0L) + w);                    }                } else {                    long v = in.nextLong();                    long u = in.nextLong();                    ArrayList<Long> path = shortPath(v, u);                    long ans = 0;                    for (int j = 1; j < path.size(); j++) {                        long edge = getEdge(path.get(j - 1), path.get(j));                        ans += cost.getOrDefault(edge, 0L);                    }                    out.println(ans);                }            }        }         ArrayList<Long> shortPath(long u, long v) {            ArrayList<Long> first = new ArrayList<>();            ArrayList<Long> second = new ArrayList<>();            while (u > 0) {                first.add(u);                u /= 2;            }            while (v > 0) {                second.add(v);                v /= 2;            }            first.sort(Long::compareTo);            second.sort(Long::compareTo);            int lastCommon = 0;            for (int i = 0; i < first.size() && i < second.size(); i++) {                if (first.get(i).equals(second.get(i))) lastCommon = i;                else break;            }            ArrayList<Long> res = new ArrayList<>();            for (int i = first.size() - 1; i > lastCommon; i--) {                res.add(first.get(i));            }            for (int i = lastCommon; i < second.size(); i++) {                res.add(second.get(i));            }            return res;        }         Long getEdge(Long node1, Long node2) {            return Math.max(node1, node2);        }     }     static class InputReader {        private StringTokenizer tokenizer;        private BufferedReader reader;         public InputReader(InputStream inputStream) {            reader = new BufferedReader(new InputStreamReader(inputStream));        }         private void fillTokenizer() {            if (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (Exception e) {                    throw new RuntimeException(e);                }            }        }         public String next() {            fillTokenizer();            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     }} 
