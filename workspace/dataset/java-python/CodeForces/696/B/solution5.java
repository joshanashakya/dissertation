import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.List;import java.util.Scanner;import java.util.ArrayList; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        private int[] sub;        private List<List<Integer>> adj;        private int[] height;         public void solve(int testNumber, Scanner in, PrintWriter out) {            int n = in.nextInt();            adj = new ArrayList<>();            for (int i = 0; i < n; i++) {                adj.add(new ArrayList<>());            }            for (int i = 0; i < n - 1; i++) {                int u = in.nextInt();                adj.get(u - 1).add(i + 1);            }            sub = new int[n];            height = new int[n];            dfs(0, -1);            for (int i = 0; i < n; i++) {                double ans = (n - sub[i] - height[i]) / 2.0 + height[i] + 1;                out.print(ans + " ");            }        }         private void dfs(int u, int p) {            sub[u] += 1;            height[u] = (p == -1) ? 0 : height[p] + 1;            for (int v : adj.get(u)) {                dfs(v, u);                sub[u] += sub[v];            }        }     }} 
