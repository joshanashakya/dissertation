class tree_node():    def __init__(self):        self.children = []        self.parent = None        self.time = 0        self.downstream = 0     def addChild(self, node):        self.children.append(node) num_cities = int(input()) if num_cities > 1:    other_cities = [int(x) for x in input().split(" ")]else:    other_cities = [] root = tree_node() cities = [root] for parent_city in other_cities:    node = tree_node()    cities.append(node)    parent = cities[parent_city - 1]    node.parent = parent    parent.addChild(node) def calculate_downstream(node):    children = node.children    if len(children) == 0: return 1    return sum(c.downstream for c in children) + 1 def set_all_downstreams(cities):    for node in cities[::-1]:        node.downstream = calculate_downstream(node) def expected_starting_time(node):    parent = node.parent    if parent == None: return 1.0    other_ds = parent.downstream - node.downstream - 1     return parent.time + other_ds/2 + 1 def set_starting_times(cities):    for c in cities:        c.time = expected_starting_time(c) set_all_downstreams(cities)set_starting_times(cities) for c in cities:    print(c.time)
