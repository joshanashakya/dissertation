import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int mod = (int) (1e9 + 7);            int n = in.nextInt();            int k = in.nextInt();            int[] a = new int[n / k];            for (int i = 0; i < a.length; i++) {                a[i] = in.nextInt();            }            int[] b = new int[n / k];            for (int i = 0; i < b.length; i++) {                b[i] = in.nextInt();            }            long ans = 1;            for (int i = 0; i < a.length; i++) {                long down = b[i];                long up = b[i] + 1;                long full = 10;                for (int j = 1; j < k; j++) {                    down *= 10;                    up *= 10;                    full *= 10;                }                full--;                up--;                down--;                long curAns = (full / a[i] + 1) + (down < 0 ? 0 : (down / a[i] + 1)) - (up / a[i] + 1);                ans = (ans * curAns) % mod;            }            out.println(ans);        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
