import java.util.*;import java.util.stream.*;import java.io.*;import java.math.*;Â public class Main {         static boolean FROM_FILE = false;        static class FastReader {         BufferedReader br;         StringTokenizer st;         public FastReader() {             if (FROM_FILE) {                try {                    br = new BufferedReader(new FileReader("input.txt"));                 } catch (IOException error) {                }               } else {                br = new BufferedReader(new InputStreamReader(System.in));                }        }        String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                 } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }        int nextInt() {             return Integer.parseInt(next());         }        long nextLong() {             return Long.parseLong(next());         }          double nextDouble() {             return Double.parseDouble(next());         }         String nextLine() {             String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                 e.printStackTrace();             }             return str;         }     }    static int max(int... nums) {        int res = Integer.MIN_VALUE;        for (int num: nums) res = Math.max(res, num);        return res;    }    static int min(int... nums) {        int res = Integer.MAX_VALUE;        for (int num: nums) res = Math.min(res, num);        return res;    }        public static void main(String[] args) {         FastReader fr = new FastReader();         PrintWriter out = null;        if (FROM_FILE) {            try {                out = new PrintWriter(new FileWriter("output.txt"));            } catch (IOException error) {                            }        } else {            out = new PrintWriter(new OutputStreamWriter(System.out));        }        new Main().run(fr, out);        out.flush();        out.close();    }         void run(FastReader fr, PrintWriter out) {        int n = fr.nextInt();                int[] v = new int[n], t = new int[n];        for (int i = 0; i < n; i += 1) v[i] = fr.nextInt();        for (int i = 0; i < n; i += 1) t[i] = fr.nextInt();                long[] accum = new long[n + 1];        for (int i = 1; i <= n; i += 1) accum[i] = accum[i - 1] + t[i - 1];                PriorityQueue<Long> pq = new PriorityQueue();        long[] res = new long[n];        for (int i = 0; i < n; i += 1) {            pq.offer(v[i] + accum[i]);            long ans = (long)pq.size() * t[i];            while (!pq.isEmpty() && pq.peek() <= accum[i + 1]) {                long val = pq.poll();                ans -= accum[i + 1] - val;            }            res[i] = ans;        }        out.println(LongStream.of(res).mapToObj(e -> "" + e).collect(Collectors.joining(" ")));    }}
