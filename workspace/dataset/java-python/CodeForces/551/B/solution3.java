import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }      public void solve() throws IOException{         String a = in.next(), b = in.next(), c = in.next();         int na = a.length();        int nb = b.length();        int nc = c.length();         int[] aarr = new int[26];        int[] barr = new int[26];        int[] carr = new int[26];                for(int i = 0; i < na; i++){            aarr[a.charAt(i) - 'a']++;        }         for(int i = 0; i < nb; i++){            barr[b.charAt(i) - 'a']++;        }         for(int i = 0; i < nc; i++){            carr[c.charAt(i) - 'a']++;        }         int n1 = 0;        int n2 = 0;        int res = 0;         for(int i = 0; i < na / nb + 2; i++){             int[] narr = new int[26];            boolean flag = true;             for(int j = 0; j < 26; j++){                narr[j] = aarr[j] - barr[j] * i;                if(narr[j] < 0){                    flag = false;                    break;                }            }             if(flag){                int t = Integer.MAX_VALUE;                for(int j = 0; j < 26; j++){                    if(carr[j] == 0) continue;                    t = Math.min(t, narr[j] / carr[j]);                }                 if(i + t > res){                    n1 = i;                    n2 = t;                    res = i + t;                }                continue;            }             break;         }         //out.println(n1 + " " + b + " " + n2 + " " + c);          String f = String.join("", Collections.nCopies(n1, b)) +                    String.join("", Collections.nCopies(n2, c));         for(int i = 0; i < 26; i++){            int d = aarr[i] - n1 * barr[i] - n2 * carr[i];            if(d == 0) continue;            char[] farr = new char[d];            Arrays.fill(farr, (char)('a' + i));            f += new String(farr);        }         out.println(f);                  return;     }  }
