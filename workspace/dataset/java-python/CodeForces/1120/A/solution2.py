def main():    m, k, n, s = map(int, input().split())    a = list(map(int, input().split()))  # prevbug: input in a line!    b = list(map(int, input().split()))  # prevbug: convert to list    b_dict = {}    for x in b:        b_dict.setdefault(x, 0)        b_dict[x] += 1  # prevbug: b or b_dict     left = 0    right = 0    max_cut = m - n * k    condition_not_met = len(b_dict)    a_dict = {}    while right < m and condition_not_met > 0:        x = a[right]        a_dict.setdefault(x, 0)        a_dict[x] += 1        if x in b_dict and a_dict[x] == b_dict[x]:            condition_not_met -= 1        right += 1  # prevbug: ftl    if condition_not_met > 0:        print(-1)        return     def num_to_remove(lft, rgt):        lft = lft // k * k        num_in_seq = rgt - lft        if num_in_seq < k:            return 0  # prevbug: if sequence is shorter than k, then no need to remove flowers        return num_in_seq - k     def test_plan():        nonlocal left        if num_to_remove(left, right) <= max_cut:            tot = num_to_remove(left, right)            print(tot)            left = left // k * k            while tot > 0:                x = a[left]                if x in b_dict:                    b_dict[x] -= 1                    if b_dict[x] == 0:                        del b_dict[x]                else:                    print(left + 1, end=' ')                    tot -= 1  # prevbug: ftl                left += 1            return True        return False     while True:        while left < right:  # prevbug: should shift left before shifting right            x = a[left]            if x in b_dict and a_dict[x] - 1 < b_dict[x]:                break            else:                a_dict[x] -= 1                if a_dict[x] == 0:                    del a_dict[x]  # prevbug: ftl                left += 1        if test_plan():            return        if right < m:            a_dict.setdefault(a[right], 0)            a_dict[a[right]] += 1            right += 1        else:            break     print(-1)  if __name__ == '__main__':    main()
