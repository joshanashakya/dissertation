//JDopeimport java.util.*;import java.io.*;import java.math.*;public class A{public static void main(String[] omkar) throws Exception{   BufferedReader in = new BufferedReader(new InputStreamReader(System.in));   StringTokenizer st = new StringTokenizer(in.readLine());   StringBuilder sb = new StringBuilder();   int m = Integer.parseInt(st.nextToken());   int k = Integer.parseInt(st.nextToken());int n = Integer.parseInt(st.nextToken());int s = Integer.parseInt(st.nextToken());int u = m-n*k;int[] arr = readArr(m, in, st);Map<Integer, Integer> map = new HashMap<Integer, Integer>();Map<Integer, Integer> map2 = new HashMap<Integer, Integer>();st = new StringTokenizer(in.readLine());int x;for(int i = 0; i < s; i++){   x = Integer.parseInt(st.nextToken());   if(map.containsKey(x))   {      map.put(x, map.get(x)+1);   }   else   {      map.put(x, 1);   }   if(map2.containsKey(x))   {      map2.put(x, map2.get(x)+1);   }   else   {      map2.put(x, 1);   }}Queue<Pair> q = new LinkedList<Pair>();int num = map.size();int y;int val = -1;   for(int i = 0; i < m; i++)   {      x = arr[i];      if(i-u > 0 && (i-u) % k == 0)      {         while(q.size() > 0 && q.peek().b < (i-u))         {            y = q.poll().a;            map.put(y, map.get(y)+1);            if(map.get(y) == 1)            {               num++;            }         }      }      if(map.containsKey(x))      {         map.put(x, map.get(x)-1);         if(map.get(x) == 0)         {            num--;         }         q.add(new Pair(x, i));      }      if(num == 0)      {         val = k*((i-(u))/k);         if(val < 0)         {            val = 0;         }      }      }      if(val == -1)      {         System.out.println("-1");         return;      }      int d = 0;      for(int i = val; i < val+k+u; i++)      {         x = arr[i];         if(!map2.containsKey(x) || map2.get(x) < 1)         {            if(d == u)            {               System.out.println(d);               System.out.println(sb);               return;            }            d++;            sb.append((i+1) + " ");            if(d == u)            {               System.out.println(d);               System.out.println(sb);               return;            }         }         else         {            map2.put(x, map2.get(x)-1);         }      }      System.out.println(d);               System.out.println(sb);            } public static int[] readArr(int N, BufferedReader in, StringTokenizer st) throws Exception      {         int[] arr = new int[N];         st = new StringTokenizer(in.readLine());         for(int i=0; i < N; i++)            arr[i] = Integer.parseInt(st.nextToken());         return arr;      }static class Pair implements Comparable<Pair> {int a;int b;Pair(int a, int b) {this.a = a;this.b = b;}@Overridepublic int compareTo(Pair other) {if (a != other.a) {return a - other.a;} else {return b - other.b;}}}  }
