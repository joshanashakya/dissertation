import java.util.*;import java.io.*;public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int m = in.nextInt(), k = in.nextInt(), n = in.nextInt(), s = in.nextInt();        int max = 500000 + 10;        int[] A = new int[m];        int[] B = new int[max];        for (int i=0;i<m;i++)   A[i] = in.nextInt();        for (int i=0;i<s;i++)   B[in.nextInt()]++;        int start = -1, end = -1, toDo = 0;        for (int i=0;i<max;i++)            if (B[i] > 0)                toDo++;        int done = 0;        int[] count = new int[max];        int i = 0;        int j = 0;        while (j < m)        {            count[A[j]]++;            if (count[A[j]] == B[A[j]])            {                done++;            }            if (done == toDo)            {                if (Math.max(i + k, j + 1) <= m)                {                    int formed = 1 + i / k  + (m - Math.max(i + k, j + 1)) / k;                    if (formed >= n)                    {                        start = i;                        end = j;                    }                }            }            if (done == toDo)            {                if (count[A[i]] == B[A[i]])                    done--;                count[A[i]]--;                if (count[A[j]] == B[A[j]])                    done--;                count[A[j]]--;                i++;            }            else            {                j++;            }        }        if (start != -1)        {            StringBuilder stringBuilder = new StringBuilder();            int left = start % k;            int ans = left;            for (i =0;i < left;i++)                stringBuilder.append(i + 1).append(" ");            if (start + k >= end + 1)            {                int tt = (m - start - k) % k;                ans += tt;                for (i=m;i>=m - tt + 1;i--)                    stringBuilder.append(i).append(" ");            }            else            {                int tt = (m - end - 1) % k;                ans += tt;                for (i=m;i>=m - tt + 1;i--)                    stringBuilder.append(i).append(" ");                int toRemove = end - start + 1 - k;                int[] cc = new int[max];                ans += toRemove;                for (i=start;i <= end;i++)                {                    cc[A[i]] ++;                    if (toRemove == 0)                        break;                    if (B[A[i]] == 0 || cc[A[i]] > B[A[i]])                    {                        stringBuilder.append(i + 1).append(" ");                        toRemove --;                    }                }            }            System.out.println(ans);            System.out.println(stringBuilder);        }        else            System.out.println(-1);    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
