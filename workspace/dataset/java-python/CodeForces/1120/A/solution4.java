import java.util.*;import java.io.*;import java.math.*; public class Main {    public static void main(String[] args) throws IOException {        PrintWriter out = new PrintWriter(System.out);        //Scanner sc = new Scanner();        Reader in = new Reader();        Main solver = new Main();        solver.solve(out, in);        out.flush();        out.close();     }     static long INF = (long)1e15;    static int maxn = 5*(int)1e5+5;    static int mod= 1000000321 ;    static int n,m,k,t,q,d,p,s;            void solve(PrintWriter out, Reader in) throws IOException{        m = in.nextInt();        k = in.nextInt();        n = in.nextInt();        s = in.nextInt();                int[] arr = new int[m];        for (int i = 0; i < m; i++) arr[i] = in.nextInt();        int[] freq = new int[maxn];        for (int i = 0; i < s; i++) freq[in.nextInt()]++;                int[] myf = new int[maxn];        int play = m - n*k, cnt = 0;        for (int i = 0; i < maxn; i++)            if (freq[i] != 0) cnt--;                    int l = 0, r = -1;        for (int i = 0; i < n; i++) {            for (int j = 0; j < k; j++) {                r++;                myf[arr[r]]++;                if (freq[arr[r]] == myf[arr[r]]) cnt++;            }            if (i != 0) {                for (int j = 0; j < k; j++) {                    if (freq[arr[l]] == myf[arr[l]]) cnt--;                    myf[arr[l]]--;                    l++;                }            } else {                for (int j = 0; j < m-n*k; j++) {                    r++;                    myf[arr[r]]++;                    if (freq[arr[r]] == myf[arr[r]]) cnt++;                }            }                        if (cnt == 0) {                int tmp = m-n*k, num = 0;                out.println(tmp);                int[] ans = new int[maxn];                for (int j = l; j <= r && tmp != 0; j++) {                    num = arr[j];                    if (ans[num] < freq[num]) {                        ans[num]++;                    } else {                        out.print((j+1)+" ");                        tmp--;                    }                }                out.println();                return;            }        }                out.println(-1);    }        static class Reader {     private InputStream mIs;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;     public Reader() {        this(System.in);    }     public Reader(InputStream is) {        mIs = is;    }     public int read() {        if (numChars == -1) {            throw new InputMismatchException();     }        if (curChar >= numChars) {            curChar = 0;            try {                numChars = mIs.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (numChars <= 0) {                return -1;            }        }        return buf[curChar++];    }     public String nextLine() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isEndOfLine(c));        return res.toString();    }     public String next() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isSpaceChar(c));        return res.toString();    }     double nextDouble()    {        return Double.parseDouble(next());    }     public long nextLong() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        long res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public int nextInt() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public boolean isSpaceChar(int c) {        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }     public boolean isEndOfLine(int c) {        return c == '\n' || c == '\r' || c == -1;    }     }}
