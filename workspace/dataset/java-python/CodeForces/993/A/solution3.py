#!/usr/bin/env python3# -*- coding: utf-8 -*-quadrate1 = list(map(int, input().split()))quadrate2 = list(map(int, input().split())) def sq2_treug(x1,y1, x2,y2, x3,y3) -> int:    ''' doubled square of triangle with sign. '''    return (x3-x1)*(y2-y1) - (y3-y1)*(x2-x1) def point_in_square(x,y, x1,y1, x2,y2, x3,y3, x4,y4, sq2) -> bool:    sq1 = abs(sq2_treug(x,y, x1,y1, x2,y2)) \        + abs(sq2_treug(x,y, x2,y2, x3,y3)) \        + abs(sq2_treug(x,y, x3,y3, x4,y4)) \        + abs(sq2_treug(x,y, x4,y4, x1,y1))    return sq2 == sq1 # doubled squares of quadratessq21 = 2 * (max(quadrate1[::2]) - min(quadrate1[::2])) \    * (max(quadrate1[1::2]) - min(quadrate1[1::2]))sq22 = (max(quadrate2[::2]) - min(quadrate2[::2])) \    * (max(quadrate2[1::2]) - min(quadrate2[1::2])) inter = any([    point_in_square(quadrate1[2*i], quadrate1[2*i+1], *quadrate2, sq22)    for i in range(4)]) or any([    point_in_square(quadrate2[2*i], quadrate2[2*i+1], *quadrate1, sq21)    for i in range(4)]) or point_in_square(    (max(quadrate1[::2]) + min(quadrate1[::2])) // 2,    (max(quadrate1[1::2]) + min(quadrate1[1::2])) // 2,    *quadrate2, sq22) or point_in_square(    (max(quadrate2[::2]) + min(quadrate2[::2])) // 2,    (max(quadrate2[1::2]) + min(quadrate2[1::2])) // 2,    *quadrate1, sq21)print("YES" if inter else "NO")
