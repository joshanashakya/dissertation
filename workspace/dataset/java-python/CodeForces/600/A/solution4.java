import java.util.*;    import java.io.*;import java.text.DecimalFormat;      public class CodeForces {                        public static void main(String[] args) throws IOException {            Reader.init(System.in);            char s[] = Reader.next().toCharArray();                        ArrayList<StringBuilder> a = new ArrayList();            ArrayList<StringBuilder> b = new ArrayList();                        StringBuilder se = new StringBuilder();            boolean isN = true;                        for(char ch : s){                if(ch == ',' || ch == ';'){                    if(isN && se.length() > 0 && ( se.charAt(0) != '0' || se.length() == 1))                        a.add(se.append(','));                    else                        b.add(se.append(','));                                        se = new StringBuilder();                    isN = true;                    continue;                }                                se.append(ch);                if(!Character.isDigit(ch))                    isN = false;            }                        if(isN && se.length() > 0 && ( se.charAt(0) != '0' || se.length() == 1))                        a.add(se.append(','));                    else                        b.add(se.append(','));                        if(a.isEmpty())                System.out.println("-");            else {                System.out.print("\"");            for(int i = 0; i < a.size(); i++){                if(i == a.size() -1)                    a.get(i).deleteCharAt(a.get(i).length()-1);                                System.out.print(a.get(i));            }            System.out.println("\"");            }                        if(b.isEmpty())                System.out.println("-");            else{                            System.out.print("\"");            for(int i = 0; i < b.size(); i++){                if(i == b.size() -1)                    b.get(i).deleteCharAt(b.get(i).length()-1);                                System.out.print(b.get(i));            }            System.out.println("\"");            }        }                      }        class  Edge implements Comparable<Edge>{         int to;        int from;        int cost;                Edge(int a, int b, int c){            from = a;            to = b;            cost = c;        }         @Override        public int compareTo(Edge t) {            return t.cost - cost;        }    }      class NN implements Comparable<NN>{        int mony;        int f;                NN(int a, int b){            mony = a;            f = b;        }         @Override        public int compareTo(NN t) {            return mony - t.mony;        }            }      class Reader {         static BufferedReader reader;        static StringTokenizer tokenizer;         public static int pars(String x) {            int num = 0;            int i = 0;            if (x.charAt(0) == '-') {                i = 1;            }            for (; i < x.length(); i++) {                num = num * 10 + (x.charAt(i) - '0');            }             if (x.charAt(0) == '-') {                return -num;            }             return num;        }         static void init(InputStream input) {            reader = new BufferedReader(                    new InputStreamReader(input));            tokenizer = new StringTokenizer("");        }         static void init(FileReader input) {            reader = new BufferedReader(input);            tokenizer = new StringTokenizer("");        }         static String next() throws IOException {            while (!tokenizer.hasMoreTokens()) {                tokenizer = new StringTokenizer(                        reader.readLine());            }            return tokenizer.nextToken();        }         static int nextInt() throws IOException {            return pars(next());        }         static long nextLong() throws IOException {            return Long.parseLong(next());        }         static double nextDouble() throws IOException {            return Double.parseDouble(next());        }    } 	 		    	  	  	 		    	 		
