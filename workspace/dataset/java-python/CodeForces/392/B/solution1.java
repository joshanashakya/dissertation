import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.PriorityQueue;import java.util.Scanner; public class Cf392B {    public static void main(String[] args) throws Exception {        Scanner cin = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        PrintWriter cout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        for (int i = 0; i < 3; i++)            for (int j = 0; j < 3; j++)                cost[i][j] = cin.nextInt();        int n = cin.nextInt();        initFF();        cout.println(f(n, 1, 3));        cout.close();    }     private static int[][] cost = new int[3][3];    private static long[][][] ff = new long[41][3][3];     private static void initFF() {        for (int i = 0; i < ff.length; i++) {            for (int j = 0; j < 3; j++) {                for (int k = 0; k < 3; k++) {                    ff[i][j][k] = -1;                }            }        }        for (int i = 0; i < 3; i++) {            for (int j = 0; j < 3; j++) {                ff[0][i][j] = 0;                int gamma = gamma(i, j);                ff[1][i][j] = Math.min(cost[i][j], cost[i][gamma] + cost[gamma][j]);            }        }    } //    private static long f(int k, int x, int y) {//        if (ff[k][x][y] != -1) return ff[k][x][y];//        int gamma = gamma(x, y);//        ff[k][x][y] = f(k - 1, x, gamma) + cost[x][y] + f(k - 1, gamma, y);////        long alt1 = f(k, x, gamma) + f(k, gamma, y);//        long alt1 = f(k - 1, x, y) + cost[x][gamma] + f(k - 1, y, gamma) +//                f(k - 1, gamma, x) + cost[gamma][y] + f(k - 1, x, y);//        ff[k][x][y] = Math.min(ff[k][x][y], alt1);//        long alt2 = f(k - 1, x, gamma) + cost[x][y] + f(k - 1, gamma, x) + f(k - 1, x, y);//        ff[k][x][y] = Math.min(ff[k][x][y], alt2);//        long alt3 = f(k - 1, x, y) + cost[x][gamma] + f(k - 1, y, gamma) +//                f(k - 1, gamma, x) + cost[gamma][y] + f(k - 1, x, y);//        ff[k][x][y] = Math.min(ff[k][x][y], alt3);//        return ff[k][x][y];//    }     private static long f(int k, int x, int y) {        x--;        y--;        if (ff[k][x][y] != -1) return ff[k][x][y];        final int a300 = 0;        final int a003 = 1;        final int a030 = 2;        final int a012 = 3;        final int a021 = 4;        final int a102 = 5;        final int a120 = 6;        final int a201 = 7;        final int a210 = 8;        long[][] g = new long[9][9];        for (int i = 0; i < 9; i++) {            for (int j = 0; j < 9; j++)                g[i][j] = Long.MAX_VALUE / 2 - 10;            g[i][i] = 0;        }        g[a300][a201] = f(k - 1, 1, 3);        g[a300][a210] = f(k - 1, 1, 2);        g[a003][a102] = f(k - 1, 3, 1);        g[a003][a012] = f(k - 1, 3, 2);        g[a030][a120] = f(k - 1, 2, 1);        g[a030][a021] = f(k - 1, 2, 3);         g[a012][a102] = f(k - 1, 2, 1);        g[a012][a003] = f(k - 1, 2, 3);        g[a012][a210] = cost[2][0];         g[a021][a120] = f(k - 1, 3, 1);        g[a021][a030] = f(k - 1, 3, 2);        g[a021][a201] = cost[1][0];         g[a102][a012] = f(k - 1, 1, 2);        g[a102][a003] = f(k - 1, 1, 3);        g[a102][a120] = cost[2][1];         g[a120][a021] = f(k - 1, 1, 3);        g[a120][a030] = f(k - 1, 1, 2);        g[a120][a102] = cost[1][2];         g[a201][a210] = f(k - 1, 3, 2);        g[a201][a300] = f(k - 1, 3, 1);        g[a201][a021] = cost[0][1];         g[a210][a201] = f(k - 1, 2, 3);        g[a210][a300] = f(k - 1, 2, 1);        g[a210][a012] = cost[0][2];         for (int z = 0; z < 9; z++)            for (int i = 0; i < 9; i++)                for (int j = 0; j < 9; j++)                    g[i][j] = Math.min(g[i][j], g[i][z] + g[z][j]);        int source, destination;        if (x == 0) source = a300;        else if (x == 1) source = a030;        else if (x == 2) source = a003;        else throw new IllegalArgumentException();        if (y == 0) destination = a300;        else if (y == 1) destination = a030;        else if (y == 2) destination = a003;        else throw new IllegalArgumentException();        ff[k][x][y] = g[source][destination];        return ff[k][x][y];    }     private static int gamma(int x, int y) {        if (x != 0 && y != 0) return 0;        if (x != 1 && y != 1) return 1;        if (x != 2 && y != 2) return 2;        throw new IllegalArgumentException();    }}
