import java.io.OutputStreamWriter;import java.io.BufferedWriter;import java.io.OutputStream;import java.io.PrintWriter;import java.io.Writer;import java.io.IOException;import java.util.InputMismatchException;import java.util.NoSuchElementException;import java.math.BigInteger;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * @author Árysson Cavalcanti */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }} class TaskB {    public void solve(int testNumber, InputReader in, OutputWriter out) {        int[][] t= IOUtils.readIntTable(in, 3, 3);        int N=in.readInt();        long[][][][] dp=new long[N+1][3][3][3];        for (int n=1; n<=N; n++) for (int i=0; i<3; i++) for (int j=0; j<3; j++) if (j!=i) {            int k=3-i-j;            dp[n][i][j][k]= MiscUtils.min(dp[n-1][i][k][j]+t[i][k]+dp[n-1][j][i][k], dp[n-1][i][j][k]+t[i][j]+dp[n-1][k][j][i]+t[j][k]+dp[n-1][i][j][k]);        }        out.printLine(dp[N][0][1][2]);    }} class InputReader {     private InputStream stream;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;    private SpaceCharFilter filter;     public InputReader(InputStream stream) {        this.stream = stream;    }     public int read() {        if (numChars == -1)            throw new InputMismatchException();        if (curChar >= numChars) {            curChar = 0;            try {                numChars = stream.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (numChars <= 0)                return -1;        }        return buf[curChar++];    }     public int readInt() {        int c = read();        while (isSpaceChar(c))            c = read();        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            if (c < '0' || c > '9')                throw new InputMismatchException();            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public boolean isSpaceChar(int c) {        if (filter != null)            return filter.isSpaceChar(c);        return isWhitespace(c);    }     public static boolean isWhitespace(int c) {        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }     public interface SpaceCharFilter {        public boolean isSpaceChar(int ch);    }} class OutputWriter {    private final PrintWriter writer;     public OutputWriter(OutputStream outputStream) {        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));    }     public void close() {        writer.close();    }     public void printLine(long i) {        writer.println(i);    } } class IOUtils {     public static int[] readIntArray(InputReader in, int size) {        int[] array = new int[size];        for (int i = 0; i < size; i++)            array[i] = in.readInt();        return array;    }     public static int[][] readIntTable(InputReader in, int rowCount, int columnCount) {        int[][] table = new int[rowCount][];        for (int i = 0; i < rowCount; i++)            table[i] = readIntArray(in, columnCount);        return table;    } } class MiscUtils {     public static<T extends Comparable<T>> T min(T first, T second) {        if (first.compareTo(second) <= 0)            return first;        return second;    } }
