import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {		InputReader in = new InputReader(new BufferedInputStream(System.in));		PrintWriter out = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(System.out)));		TaskB solver = new TaskB();		long t1 = System.currentTimeMillis();		solver.solve(1, in, out);		out.flush();		long t2 = System.currentTimeMillis();//		System.err.println(t2 - t1);		out.close(); 	}} class Seg {	long x1;	long y1;	long x2;	long y2; 	public Seg(long x1, long y1, long x2, long y2) {		this.x1 = x1;		this.y1 = y1;		this.x2 = x2;		this.y2 = y2;	} 	void invert() {		long tmp = x1;		x1 = x2;		x2 = tmp;		tmp = y1;		y1 = y2;		y2 = tmp;	}} class TaskB { 	int id[];	int sz[];	double eps = 1e-10; 	void solve(int testNumber, InputReader in, PrintWriter pw) {		int t = in.nextInt();		for (int tt = 0; tt < t; ++tt) {			Seg a = new Seg(in.nextInt(), in.nextInt(), in.nextInt(), in.nextInt());			Seg b = new Seg(in.nextInt(), in.nextInt(), in.nextInt(), in.nextInt());			Seg c = new Seg(in.nextInt(), in.nextInt(), in.nextInt(), in.nextInt());			boolean ans = (ok(a, b, c) || ok(b, c, a) || ok(c, a, b));			pw.println(ans ? "YES" : "NO");		}	} 	boolean ok(Seg a, Seg b, Seg c) {		boolean res = false;		for (int mask = 0; mask < 8; mask++) {			if ((mask & 1) != 0)				a.invert();			if ((mask & 2) != 0)				b.invert();			if ((mask & 4) != 0)				c.invert();			res |= ok1(a, b, c);			if ((mask & 1) != 0)				a.invert();			if ((mask & 2) != 0)				b.invert();			if ((mask & 4) != 0)				c.invert();		}		return res;	} 	long cross(Seg a, Seg b) {		long dx1 = a.x2 - a.x1;		long dy1 = a.y2 - a.y1;		long dx2 = b.x2 - b.x1;		long dy2 = b.y2 - b.y1;		return dx1 * dx2 + dy1 * dy2;	} 	boolean line(Seg a, long x, long y) {		long A = a.y2 - a.y1;		long B = a.x1 - a.x2;		long C = -a.x1 * A - a.y1 * B;		if (A * x + B * y + C != 0)			return false;		if (Math.min(a.x1, a.x2) > x || x > Math.max(a.x1, a.x2))			return false;		if (Math.min(a.y1, a.y2) > y || y > Math.max(a.y1, a.y2))			return false;		return true;	} 	boolean section(Seg a, long x, long y) {		long dis1 = (a.x1 - x) * (a.x1 - x) + (a.y1 - y) * (a.y1 - y);		long dis2 = (a.x2 - x) * (a.x2 - x) + (a.y2 - y) * (a.y2 - y);		if (dis1 > dis2) {			long temp = dis1;			dis1 = dis2;			dis2 = temp;		}		return 16 * dis1 >= dis2;	} 	boolean ok1(Seg a, Seg b, Seg c) {		if (a.x1 != b.x1 || a.y1 != b.y1)			return false;		if (!line(a, c.x1, c.y1) || !line(b, c.x2, c.y2))			return false;		if (cross(a, b) < 0)			return false;		if (!section(a, c.x1, c.y1) || !section(b, c.x2, c.y2))			return false;		return true;	} 	long pow(int n, int m) {		if (m == 0)			return 1;		long ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	} 	double pow(double n, int m) {		if (m == 0)			return 1;		double ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	}} class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
