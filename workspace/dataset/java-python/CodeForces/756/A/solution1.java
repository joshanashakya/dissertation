import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class Main {     private FastScanner scanner = new FastScanner();     public static void main(String[] args) {        new Main().solve();    }     private void solve() {         int n = scanner.nextInt();         int a[] = new int[n], b[] = new int[n];        int used[] = new int[n];         for (int i = 0; i < n; i++) {            a[i] = scanner.nextInt();        }         int cnt[] = new int[2];        for (int i = 0; i < n; i++) {            b[i] = scanner.nextInt();            cnt[b[i]] ++;        }          int c = 0;        for (int i = 0; i < n; i++) {            if (used[i] != 0) {                continue;            }            used[i] = 1;            c ++;             int t = a[i] - 1;            while (t != i) {                used[t] = 1;                t = a[t] - 1;            }        }         if (c == 1) {            c = 0;        }         if (cnt[1] % 2 != 1) {            c++;        }        System.out.print(c);      }       int diff(int a, int b) {        StringBuilder sa = new StringBuilder(String.valueOf(a));        for (int i = 0; i < 3 - sa.length() + 1; i++) {            sa.insert(0, '0');        }         StringBuilder sb = new StringBuilder(String.valueOf(b));        for (int i = 0; i < 3 - sb.length() + 1; i++) {            sb.insert(0, '0');        }        int ans = 0;         for (int i = 0; i < 3; i++) {            if (sa.charAt(i) != sb.charAt(i) ) {                ans ++;            }        }        return ans;    }      public static final <T> void swap(T[] a, int i, int j) {        T t = a[i];        a[i] = a[j];        a[j] = t;    }     class Pair implements Comparable<Pair> {        int a, i;         public Pair(int a, int i) {            this.a = a;            this.i = i;        }         @Override        public int compareTo(Pair o) {            return this.a - o.a;        }    }     long gcd(long a, long b) {        if (b != 0) {            return gcd(b, a % b);        }        return a;    }     long lcm(long a, long b) {        return (a * b) / gcd(a, b);    }     class FastScanner {        public BufferedReader reader;        public StringTokenizer tokenizer;         public FastScanner() {            reader = new BufferedReader(new InputStreamReader(System.in), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }    }}
