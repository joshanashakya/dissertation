import java.util.*; public class Barbecue {    public static class Graph    {        public int V;        ArrayList<Integer> adjList[];          public Graph(int V)        {            this.V = V;            adjList = new ArrayList[V];             for(int i = 0; i < V ; i++){                adjList[i] = new ArrayList<Integer>();            }        }        public void addEdge(int src, int dest, boolean bidirectional)        {            this.adjList[src].add(dest);            if (bidirectional) {            	this.adjList[dest].add(src);            }        }        public void printGraph()        {                   for(int v = 0; v < this.V; v++)            {                System.out.println("Vertex "+ v + ":");                System.out.print("Conntected to ");                for(Integer pCrawl: this.adjList[v]){                    System.out.print(pCrawl + " ");                }                System.out.println("\n");            }        }        public boolean dfs(int s, boolean[] visited, boolean[] recStack) {        	if (recStack[s]) return true;        	if (visited[s]) return false;        	    		visited[s] = true;    		recStack[s] = true;    		//process    		for (int u: adjList[s]) {    			if (dfs(u,visited, recStack)) {    				return true;    			}    		}	    	recStack[s] = false;    		return false;        }    } 	public static void main(String[] args) {		Scanner input = new Scanner(System.in);		int n = input.nextInt();		int[] p = new int[n];		boolean[] visited = new boolean[n];		boolean[] recStack = new boolean[n];				int oneCount = 0;				for (int i = 0; i<n; i++) {			p[i] = input.nextInt()-1;		}		for (int i = 0; i<n; i++) {			if (input.nextInt()==1) oneCount++;		}				int cycleCount = 0;						Graph g = new Graph(n);				for (int i = 0; i<n; i++) {			g.addEdge(i, p[i], false);		} 		for (int i = 0; i<n; i++) {			if (visited[i]==true) continue;			else {				if (g.dfs(i, visited, recStack)) cycleCount++;			}		}		if (cycleCount==1) {			System.out.println(Math.abs(1-oneCount%2));		}		else {			System.out.println(cycleCount+Math.abs(1-oneCount%2));		}	} }
