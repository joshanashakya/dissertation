import static java.util.Arrays.* ;import static java.lang.Math.* ; import java.lang.reflect.Array;import java.util.*;import java.io.*; public class E {     final int MOD = (int)1e9 + 7 ;     int modPow(int a , int e)    {        int res = 1 ;        while(e > 0)        {            if((e & 1) == 1) res = (int)(1L * res * a % MOD) ;            a = (int)(1L * a * a % MOD) ;            e >>= 1 ;        }        return res ;    }    int k ;    int [] p ;    int bt(int idx)    {        if(idx == k)        {            boolean can = true;            boolean vis[] = new boolean[k];            for(int start = 0 ; start < k ; start++)            {                boolean ok = false ;                fill(vis , false);                int s = start ;                while (!vis[s]) {                    vis[s] = true;                    s = p[s];                    ok |= s == 0;                }                can &= ok ;            }            return can ? 1 : 0 ;        }        int tot = 0 ;        for(int i = 0 ; i < k ; i++)        {            p[idx] = i ;            tot += bt(idx + 1) ;            tot %= MOD ;        }        return tot ;    }     void main() throws Exception {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int n = sc.nextInt() ;        k = sc.nextInt() ;        int ans = modPow(n - k , n - k) ;        p = new int [k] ;        int [] calc = {0 , 1 , 2 , 9 ,64 , 625 , 7776 , 117649 , 2097152} ;        ans = (int)(1L * calc[k] * ans % MOD) ;        out.println(ans);        out.flush();        out.close();    }     class Scanner    {        BufferedReader br;        StringTokenizer st;         Scanner(InputStream in)        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() throws Exception        {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         int nextInt() throws Exception { return Integer.parseInt(next()); }         long nextLong() throws Exception { return Long.parseLong(next()); }         double nextDouble() throws Exception { return Double.parseDouble(next());}    }     public static void main (String [] args) throws Exception {(new E()).main();} }
