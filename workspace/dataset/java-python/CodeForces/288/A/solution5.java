import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Vikash Kumar */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        Hackerearth solver = new Hackerearth();        solver.solve(1, in, out);        out.close();    }     static class Hackerearth {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.ni();            int k = in.ni();            int count = n - k;            if (count < 0 || (n > 1 && k == 1)) {                out.println(-1);            } else {                StringBuilder sb = new StringBuilder();                int len = 0;                boolean flag = false;                while (len < count + 2 && len < n) {                    if (len % 2 == 0) {                        sb.append('a');                    } else {                        flag = true;                        sb.append('b');                    }                    len++;                }                len = 1;                char c = (flag) ? 'b' : 'a';                for (int i = 1; i <= k - 2; i++) {                    sb.append((char) (c + len));                    len++;                }                out.println(sb);            }        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }     static class InputReader {        private BufferedReader br;        private StringTokenizer st;         public InputReader(InputStream inputStream) {            br = new BufferedReader(new InputStreamReader(inputStream));        }         public String n() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                }            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(n());        }     }} 
