import java.io.*;import java.util.*; public class B { 	public static void main(String[] args) {		FastScanner sc = new FastScanner();		int n = sc.nextInt();		int m = sc.nextInt();		ArrayList<Integer>[] gb = new ArrayList[n];		ArrayList<Integer>[] gr = new ArrayList[n];		for(int i = 0; i < n; i++) {			gb[i] = new ArrayList<>();			gr[i] = new ArrayList<>();		}		for(int i = 0; i < m; i++) {			int u = sc.nextInt()-1;			int v = sc.nextInt()-1;			String c = sc.next();			if(c.equals("B")){				gb[u].add(v);				gb[v].add(u);			}			else {				gr[u].add(v);				gr[v].add(u);			}		}		//try all blue		ArrayList<Integer> list1 = solve(n, gb, gr);		ArrayList<Integer> list2 = solve(n, gr, gb);		if(list1 == null && list2 == null) {			System.out.println(-1);		}		else if(list1 == null) print(list2);		else if(list2 == null) print(list1);		else {			if(list1.size() < list2.size()) print(list1);			else print(list2);		}			}	static void print(ArrayList<Integer> list) {		StringBuilder sb = new StringBuilder();		for(int u: list) {			sb.append(" "+(u+1));		}		PrintWriter pw = new PrintWriter(System.out);		pw.println(list.size());		sb.replace(0,1,"");		pw.println(sb.toString());		pw.flush();	}		static ArrayList<Integer> solve(int n, ArrayList<Integer>[] g1, ArrayList<Integer>[] g2){		int[] val = new int[n];				Arrays.fill(val, -1);		ArrayList<Integer> sol = new ArrayList<>();		for(int i = 0; i < n; i++) {			if(val[i] < 0) {				LinkedList<Integer> q = new LinkedList<>();				val[i] = 0;				q.add(i);				ArrayList<Integer>[] verts = new ArrayList[2];				verts[0] = new ArrayList<>();				verts[0].add(i);				verts[1] = new ArrayList<>();				while(!q.isEmpty()) {					int u = q.removeFirst();					for(int v: g1[u]) {						if(val[v] < 0) {							val[v] = 1 - val[u]; verts[val[v]].add(v);							q.add(v);						}						else if(val[v] == val[u]) return null;					}					for(int v: g2[u]) {						if(val[v] < 0) {							val[v] = val[u]; verts[val[v]].add(v);							q.add(v);						}						else if(val[v] != val[u]) return null;					}				}				if(verts[0].size() > verts[1].size()) {					sol.addAll(verts[1]);				}				else {					sol.addAll(verts[0]);				}			}		}		return sol;	}		static class FastScanner {        public BufferedReader reader;        public StringTokenizer tokenizer;        public FastScanner() {            reader = new BufferedReader(new InputStreamReader(System.in), 32768);            tokenizer = null;        }        public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {        	return Long.parseLong(next());        }        public double nextDouble() {        	return Double.parseDouble(next());        }        public String nextLine() {        	try {        		return reader.readLine();        	} catch(IOException e) {        		throw new RuntimeException(e);        	}        }    } }
