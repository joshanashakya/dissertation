import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.List;import java.util.Arrays;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author AlexFetisov */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB_CROC solver = new TaskB_CROC();        solver.solve(1, in, out);        out.close();    }     static class TaskB_CROC {        int[] u;        List<Integer> left;        List<Integer> right;        List<Edge>[] g;        int n;         public void solve(int testNumber, InputReader in, PrintWriter out) {            n = in.nextInt();            int m = in.nextInt();             g = new List[n];            for (int i = 0; i < n; ++i) {                g[i] = new ArrayList<Edge>();            }            for (int i = 0; i < m; ++i) {                int a = in.nextInt() - 1;                int b = in.nextInt() - 1;                char c = in.nextString().charAt(0);                g[a].add(new Edge(b, c == 'R' ? 0 : 1));                g[b].add(new Edge(a, c == 'R' ? 0 : 1));            }             List<Integer> res1 = solve(0);            List<Integer> res2 = solve(1);            if (res1 == null) {                res1 = res2;            }            if (res2 != null && res1.size() > res2.size()) {                res1 = res2;            }            if (res1 == null) {                out.println(-1);                return;            }            out.println(res1.size());            for (int i : res1) {                out.print((i + 1) + " ");            }            out.println();        }         private List<Integer> solve(int color) {            u = new int[n];            Arrays.fill(u, -1);            List<Integer> res = new ArrayList<Integer>();            for (int i = 0; i < n; ++i) {                if (u[i] == -1) {                    left = new ArrayList<Integer>();                    right = new ArrayList<Integer>();                     if (!dfs(i, 0, color)) {                        return null;                    }                     if (left.size() < right.size()) {                        res.addAll(left);                    } else {                        res.addAll(right);                    }                }            }            return res;        }         boolean dfs(int v, int side, int c) {            if (u[v] != -1) {                return u[v] == side;            }            u[v] = side;            if (side == 0) {                left.add(v);            } else {                right.add(v);            }            for (Edge e : g[v]) {                int newSide = e.color == c ? side : 1 - side;                if (!dfs(e.to, newSide, c)) {                    return false;                }            }            return true;        }         class Edge {            int to;            int color;             public Edge(int to, int color) {                this.to = to;                this.color = color;            }         }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String nextString() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextString());        }     }} 
