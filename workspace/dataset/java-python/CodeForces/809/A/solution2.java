import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.util.Random;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            ADoYouWantADate solver = new ADoYouWantADate();            solver.solve(1, in, out);            out.close();        }    }     static class ADoYouWantADate {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int[] x = new int[n];            for (int i = 0; i < n; i++) {                x[i] = in.readInt();            }            Randomized.shuffle(x);            Arrays.sort(x);            Modular mod = new Modular(1e9 + 7);            CachedPow pow = new CachedPow(2, mod);             int ans = 0;            for (int i = 1; i < n; i++) {                int l = i;                int r = n - i;                int len = x[i] - x[i - 1];                int set = mod.mul(pow.pow(l) - 1, pow.pow(r) - 1);                ans = mod.plus(ans, mod.mul(len, set));            }            out.println(ans);        }     }     static class Modular {        int m;         public Modular(int m) {            this.m = m;        }         public Modular(long m) {            this.m = (int) m;            if (this.m != m) {                throw new IllegalArgumentException();            }        }         public Modular(double m) {            this.m = (int) m;            if (this.m != m) {                throw new IllegalArgumentException();            }        }         public int valueOf(int x) {            x %= m;            if (x < 0) {                x += m;            }            return x;        }         public int valueOf(long x) {            x %= m;            if (x < 0) {                x += m;            }            return (int) x;        }         public int mul(int x, int y) {            return valueOf((long) x * y);        }         public int plus(int x, int y) {            return valueOf(x + y);        }         public Modular getModularForPowerComputation() {            return new Modular(m - 1);        }         public String toString() {            return "mod " + m;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class CachedPow {        private int[] first;        private int[] second;        private Modular mod;        private Modular powMod;        private static int step = 16;        private static int limit = 1 << step;        private static int mask = limit - 1;         public CachedPow(int x, Modular mod) {            this.mod = mod;            this.powMod = mod.getModularForPowerComputation();            first = new int[limit];            second = new int[Integer.MAX_VALUE / limit + 1];            first[0] = 1;            for (int i = 1; i < first.length; i++) {                first[i] = mod.mul(x, first[i - 1]);            }            second[0] = 1;            int step = mod.mul(x, first[first.length - 1]);            for (int i = 1; i < second.length; i++) {                second[i] = mod.mul(second[i - 1], step);            }        }         public int pow(int exp) {            return mod.mul(first[exp & mask], second[exp >> step]);        }     }     static class RandomWrapper {        private Random random;        public static RandomWrapper INSTANCE = new RandomWrapper(new Random());         public RandomWrapper() {            this(new Random());        }         public RandomWrapper(Random random) {            this.random = random;        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }     static class Randomized {        public static void shuffle(int[] data) {            shuffle(data, 0, data.length - 1);        }         public static void shuffle(int[] data, int from, int to) {            to--;            for (int i = from; i <= to; i++) {                int s = nextInt(i, to);                int tmp = data[i];                data[i] = data[s];                data[s] = tmp;            }        }         public static int nextInt(int l, int r) {            return RandomWrapper.INSTANCE.nextInt(l, r);        }     }} 
