import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.nio.file.Paths;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.StringTokenizer; public class FindingBorders { 	public static void main(String[] args) throws Exception { //		File file = Paths.get("input.txt").toFile();//		if (file.exists()) {//			System.setIn(new FileInputStream(file));//		}		long t = System.currentTimeMillis(); 		FastReader reader = new FastReader(); 		long mod = (long) 1e9 + 7;		int n = reader.nextInt(); 		int[] a = new int[n];		for (int i = 0; i < n; i++) {			a[i] = reader.nextInt();		} 		Arrays.sort(a); 		for (int i = 0; i < a.length / 2; i++) {			int temp = a[i];			a[i] = a[n - i - 1];			a[n - i - 1] = temp;		} 		long sum = 0;		int x = 0; 		long[] pow = new long[n];		pow[0] = 1;		for (int i = 1; i < n; i++) {			pow[i] = (pow[i - 1] * 2) % mod;		} 		for (int val : a) {			n--;			sum += val * pow[n];			sum -= ((val * pow[x])) % mod;			while (sum < 0) {				sum += mod;			}			sum %= mod;			x++;		} 		System.out.println(sum); 	} 	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	}}
