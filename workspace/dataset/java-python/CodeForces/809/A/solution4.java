import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.*; public class Q415A {		BufferedReader reader;    StringTokenizer tokenizer;    PrintWriter out;      int MOD = (int)1e9 + 7;    public void shuffle(int [] arr) {    Random random = new Random();    for (int i = 0; i < arr.length; i++) {      int index = i + random.nextInt(arr.length-i);      int tmp = arr[i];      arr[i] = arr[index];      arr[index] = tmp;    }  } 	public void solve() throws IOException {						int N = nextInt();    int[] X = new int[N];    for (int i = 0; i < N; i++) {      X[i] = nextInt();    }    shuffle(X);        Arrays.sort(X);     long[] modPow = new long[N];    modPow[0] = 1;    for (int i = 1; i < N; i++) {      modPow[i] = (modPow[i-1] * 2) % MOD;    }     long ans = 0;    for (int i = 1; i < N; i++) {      long d = X[i] - X[i-1];       long tmp = (modPow[i]-1) * (modPow[N-i]-1) % MOD;      tmp = (tmp * d) % MOD;       ans = (ans + tmp) % MOD;    }    out.println(ans);	}		/**	 * @param args	 */	public static void main(String[] args) {		new Q415A().run();	}		public void run() {        try {            reader = new BufferedReader(new InputStreamReader(System.in));            tokenizer = null;            out = new PrintWriter(System.out);            solve();            reader.close();            out.close();        } catch (Exception e) {            e.printStackTrace();            System.exit(1);        }    }     int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }     long nextLong() throws IOException {        return Long.parseLong(nextToken());    }     double nextDouble() throws IOException {        return Double.parseDouble(nextToken());    }     String nextToken() throws IOException {        while (tokenizer == null || !tokenizer.hasMoreTokens()) {            tokenizer = new StringTokenizer(reader.readLine());        }        return tokenizer.nextToken();    } }  
