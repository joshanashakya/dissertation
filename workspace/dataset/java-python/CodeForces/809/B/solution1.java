import java.util.*;import java.io.*;import java.math.*; public class Main {    static PrintWriter out;    static Reader in;    public static void main(String[] args) throws IOException {        //out = new PrintWriter(new File("out.txt"));        //PrintWriter out = new PrintWriter(System.out);        //in = new Reader(new FileInputStream("in.txt"));        //Reader in = new Reader();        input_output();        Main solver = new Main();        solver.solve();        out.flush();        out.close();     }     static int INF = (int)2e9+5;    static int maxn = (int)1e5+5;    static int mod=(int)1e9+7 ;    static int n, m, t, q, k;     void solve() throws IOException{        n = in.nextInt();        k = in.nextInt();          int x = bs(1, n, 0), y;        if (x == 1) {            y = bs(2, n, 1);        } else if (x == n) {            y = bs(1, n-1, 0);        } else {            int y1 = bs(1, x-1, 0),                y2 = bs(x+1, n, 1);             out.println("1 "+y1+" "+x);            out.flush();            String tak = in.next();            if (tak.equals("TAK")) {                y = y1;            } else y = y2;        }         out.println("2 "+x+" "+y);    }     //<>     static int bs(int lo, int hi, int tt) {        int mid;        String tak;        if (lo == hi) return lo;         while (lo < hi) {            mid = (lo+hi)/2;             if (tt == 0) out.println("1 "+mid+" "+(mid+1));            else out.println("1 "+(mid+1)+" "+mid);            out.flush();            tak = in.next();             if (tak.equals("TAK")) {                if (tt == 0) hi = mid;                else lo = mid+1;            } else {                if (tt == 0) lo = mid+1;                else hi = mid;            }        }         return lo;    }     static class Reader {         private InputStream mIs;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;            public Reader() {            this(System.in);        }            public Reader(InputStream is) {            mIs = is;        }            public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = mIs.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }            public String nextLine() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        }            public String next() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }            double nextDouble()        {            return Double.parseDouble(next());        }            public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }            public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }            public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }            public boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }     }    static void input_output() throws IOException {        File f = new File("in.txt");        if(f.exists() && !f.isDirectory()) {             in = new Reader(new FileInputStream("in.txt"));        } else in = new Reader();        f = new File("out.txt");        if(f.exists() && !f.isDirectory()) {            out = new PrintWriter(new File("out.txt"));        } else out = new PrintWriter(System.out);    }}
