import java.io.*;import java.util.HashMap;import java.util.Map;import java.util.StringTokenizer;import java.util.TreeSet; public class CodeForces {    public static void main(String[] args) throws FileNotFoundException {        FastIO io = new FastIO();         int shelves = io.nextInt();        int sections = io.nextInt();         TreeSet<Slot> encodedSlots = new TreeSet<>();         for (int i = 1; i <= shelves; i++) {            for (int j = 1; j <= sections; j++) {                encodedSlots.add(new Slot(i, j));            }        }         int queries = io.nextInt();         Map<String, Slot> slotById = new HashMap<>();         for (int q = 0; q < queries; q++) {            int type = io.nextInt();            if (type == 1) {                Slot slot = new Slot(io.nextInt(), io.nextInt());                 String id = io.nextToken();                 Slot freeSlot = encodedSlots.ceiling(slot);                 if (freeSlot != null) {                    encodedSlots.remove(freeSlot);                    slotById.put(id, freeSlot);                }            } else {                String id = io.nextToken();                 Slot occupiedSlot = slotById.get(id);                if (occupiedSlot != null) {                    encodedSlots.add(occupiedSlot);                    slotById.remove(id);                     io.println(occupiedSlot.shelf + " " + occupiedSlot.section);                } else {                    io.println("-1 -1");                }            }        }         io.close();    }     static class Slot implements Comparable<Slot> {        int shelf;        int section;         public Slot(int shelf, int section) {            this.shelf = shelf;            this.section = section;        }         @Override        public int compareTo(Slot o) {            int sd = Integer.compare(shelf, o.shelf);            if (sd != 0) {                return sd;            }            return Integer.compare(section, o.section);        }    }     static class FastIO extends PrintWriter {        BufferedReader br;        StringTokenizer st;         public FastIO() throws FileNotFoundException {            super(new BufferedOutputStream(new FileOutputStream("output.txt")));            br = new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextToken() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {            try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return "";        }    }}
