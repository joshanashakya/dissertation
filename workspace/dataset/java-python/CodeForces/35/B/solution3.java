import java.io.*;import java.util.StringTokenizer;  public class Main {      public static void main(String[] args) throws IOException {        Scanner sc = new Scanner("input.txt");        PrintWriter out = new PrintWriter("output.txt");        int n = sc.nextInt();        int m = sc.nextInt();        int k = sc.nextInt();        String[][] grid = new String[n][m];        loop:        while (k-- > 0) {            String type = sc.next();            if (type.equals("+1")) {                int x = sc.nextInt() - 1;                int y = sc.nextInt() - 1;                String id = sc.next();                for (int i = x; i < n; i++)                    for (int j = i == x ? y : 0; j < m; j++)                        if (grid[i][j] == null) {                            grid[i][j] = id;                            continue loop;                        }            } else {                String id = sc.next();                for (int i = 0; i < n; i++)                    for (int j = 0; j < m; j++)                        if (grid[i][j] != null && grid[i][j].equals(id)) {                            grid[i][j] = null;                            out.println(i + 1 + " " + (j + 1));                            continue loop;                        }                 out.println("-1 -1");            }        }        out.flush();        out.close();    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }         public Scanner(String s) throws FileNotFoundException {            br = new BufferedReader(new FileReader(new File(s)));        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }          public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public long[] nextLongArray(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }          public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public double[] nextDoubleArray(int n) throws IOException {            double[] ans = new double[n];            for (int i = 0; i < n; i++)                ans[i] = nextDouble();            return ans;        }         public short nextShort() throws IOException {            return Short.parseShort(next());        }     }  }
