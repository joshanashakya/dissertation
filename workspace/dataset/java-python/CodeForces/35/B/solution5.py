import sysdef add(x,y,id_t,shelves,track):    element = ((x-1)%n)*m + y - 1;    if shelves[element]:        element +=1        # made the mistake of cycling through them         # only move to the right. No rollbacks         while element!= cap:            if not shelves[element]:                shelves[element] = 1                track.update({id_t:(element//m+1,element%m+1)})                break            element +=1    else:        shelves[element] = 1        track.update({id_t:(x,y)})def remove(id_t,track,shelves):    if id_t not in track:         return False    else:        val = track.pop(id_t,None)        index = ((val[0]-1)%n)*m + val[1] - 1        shelves[index] = 0        return valsys.stdin = open('input.txt')sys.stdout = open('output.txt', 'w')n,m,k = map(int,input().split())shelves,cap= [ 0 for _ in range(n*m)],n*mtrack = {}for _ in range(k):    query = input().split()    if query[0] == '+1':        x,y,id_t = int(query[1]),int(query[2]),query[3]        add(x,y,id_t,shelves,track)    else:        ch = remove(query[1],track,shelves)        if not ch: print(-1,-1)        else: print(ch[0],ch[1])
