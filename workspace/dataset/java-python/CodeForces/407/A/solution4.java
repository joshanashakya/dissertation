/*[ ( ^ _ ^ ) ]*/ import java.io.*;import java.util.*;  public class test {    int INF = (int)1e9;    long MOD = 1000000007;     void solve(InputReader in, PrintWriter out) throws IOException {        int a = in.nextInt();        int b = in.nextInt();        int[] sqrt = new int[5000000];        for(int i=0; i<=2100; i++) {            sqrt[i*i] = i;        }        int as = a * a;        int bs = b * b;        int ss = as + bs;         for(int i=1; i<=a; i++) {            int is = i*i;            if(as<=is || sqrt[as-is]==0) {                continue;            }             int x = i;            int y = sqrt[as-is];             int p = -y;            int q = x;                        int m = sqrt[p*p+q*q];            if(m==0 || (p*b)%m!=0 || (q*b)%m!=0) continue;             p = p * b / m;            q = q * b / m;             if(p==x || q==y) continue;             out.println("YES");            out.println("0 0");            out.println(x+" "+y);            out.println(p+" "+q);            return;        }         out.println("NO");    }         public static void main(String[] args) throws IOException {        InputReader in = new InputReader();        PrintWriter out = new PrintWriter(System.out);        int t = 1;//in.nextInt();        while(t-- >0) {            new test().solve(in, out);        }        out.close();    }        public static void show(Object... o) {        System.out.println(Arrays.deepToString(o));    }        static class InputReader {        static BufferedReader br;        static StringTokenizer st;            public InputReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }                String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }                long nextLong() {            return Long.parseLong(next());        }                double nextDouble() {            return Double.parseDouble(next());        }    }}
