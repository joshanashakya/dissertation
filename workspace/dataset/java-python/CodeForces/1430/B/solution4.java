import java.util.*;import java.io.*; public class Barrels {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Task solver = new Task();        solver.solve(1, in, out);        out.close();    }     static class Task {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int T = in.nextInt();            while(T-- != 0) {                int n = in.nextInt(), k = in.nextInt();                List<Integer> list = new ArrayList();                for(int i=0; i<n; i++) list.add(in.nextInt());                Collections.sort(list, Collections.reverseOrder());                long cnt = 0;                for(int i=0; i<k+1; i++){                    cnt += list.get(i);                }                out.println(cnt);            }        }    }     public static int[] sort(int[] arr) {        List<Integer> list = new ArrayList<Integer>();        for (int i : arr)            list.add(i);        Collections.sort(list);        for (int i = 0; i < list.size(); i++)            arr[i] = list.get(i);        return arr;    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32_768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }    }}
