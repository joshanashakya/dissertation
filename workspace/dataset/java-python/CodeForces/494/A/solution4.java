import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     void run(FastScanner in, PrintWriter out) {         // can replace each with 1 if possible, and replace the        // last one with the remaining ones left open         char[] ca = in.next().toCharArray();        int cnt = 0;        int postCnt = 0;        LinkedList<Integer> ll = new LinkedList<>();        for (char c : ca) {             if (c == '(') {                cnt++;                if (postCnt < 0) postCnt = 1;                else postCnt++;            } else if (c == ')') {                cnt--;                postCnt--;                if (cnt < 0) {                    ll.clear();                    break;                }            } else if (c == '#') {                ll.offerLast(1);                cnt--;                if (cnt < 0) {                    ll.clear();                    break;                }                postCnt = 0;            }        }         // we can't close if there are remaning open paren after the last        // hashtag char        if (postCnt > 0 || ll.isEmpty()) {            out.println(-1);        } else {            ll.offerLast(ll.pollLast() + cnt);            for (int num : ll) out.println(num);        }    }      static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
