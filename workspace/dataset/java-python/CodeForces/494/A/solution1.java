//      これを翻訳している間、あなたはあなたの人生のいくつかの貴重な瞬間を無駄にしました  import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;  public class Solution {    static PrintWriter fop = new PrintWriter(System.out);         public static void main(String[] args) {        FastScanner fsca = new FastScanner();          char a[] = fsca.next().toCharArray() ;        int n = a.length ;        ArrayList<Integer> list = new ArrayList<>() ;         int cnt = 0 ;        int curr = 0 ;        for (int i = 0; i <n ; i++) {            if (a[i] == '#'){                curr = i ;                cnt++ ;            }        }         int bal = 0;        for (int i = curr+1; i <n ; i++) {            if (a[i] == '(')bal++ ;            else bal-- ;        }        if (bal > 0){            System.out.println(-1);            return;        }        bal *= -1 ;             int tt = 0 ;         for (int i = 0; i <n; i++) {            if (a[i] == '(')tt++ ;            else if (a[i] == ')')tt -- ;            else {                if (cnt != 0){                    if (cnt != 1){                        list.add(1);                        tt-- ;                        cnt-- ;                    }                    else {                        cnt-- ;                       if (tt  <= bal || tt == 0){                           System.out.println(-1);                           return;                       }                       else {                           list.add(tt - bal);                           tt = bal ;                       }                    }                 }             }            if (tt <0){                System.out.println(-1);                return;            }        }        if (tt != 0){            System.out.println(-1);        }        else {            for (int i : list)                fop.append(i + "\n") ;        }                      fop.flush();        fop.close();      }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/      static long gcd(long a, long b) {        return (b == 0) ? a : gcd(b, a % b);    }     ;     static int gcd(int a, int b) {        return (b == 0) ? a : gcd(b, a % b);    }      static final Random random = new Random();     static void ruffleSort(int[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }     static void ruffleSort(long[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n);            long temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }      static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[][] readMat(int n, int m) {            int a[][] = new int[n][m];            for (int i = 0; i < n; i++)                for (int j = 0; j < m; j++)                    a[i][j] = nextInt();            return a;        }         char[][] readCharMat(int n, int m) {            char a[][] = new char[n][m];            for (int i = 0; i < n; i++) {                String s = next();                for (int j = 0; j < m; j++)                    a[i][j] = s.charAt(j);            }            return a;        }          int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    }     static void print(int a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }     static void print(long a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }}        
