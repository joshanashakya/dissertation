import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.Stack;import java.util.StringTokenizer; public class A { 	public static void main(String[] args) throws IOException { 		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out); 		int n = sc.nextInt();		Racer[] rs = new Racer[n];		for(int i = 0; i < n; ++i)			rs[i] = new Racer(sc.next(), sc.nextInt());		Arrays.sort(rs);		int m = sc.nextInt();		int[] b = new int[n];		for(int i = 0; i  < m; ++i)			b[i] = sc.nextInt();		Arrays.sort(b);		int vIdx = -1;		String vasyaName = sc.next();		while(!rs[++vIdx].name.equals(vasyaName)); 		out.println(highest(n, vIdx, rs, b) + " " + lowest(n, vIdx, rs, b));		out.close();	}	 	static int highest(int n, int vIdx, Racer[] rs, int[] b)	{		int ans = 1;		int vScore = b[n - 1] + rs[vIdx].pts, fromTop = n - 2, fromBottom = 0;		Stack<Integer> valid = new Stack<>();		for(int i = 0; i < n; ++i)		{			if(i == vIdx)				continue; 			while(fromBottom <= fromTop)			{				int rScore = b[fromBottom] + rs[i].pts;				if(rScore > vScore || rScore == vScore && rs[i].name.compareTo(rs[vIdx].name) < 0)					break;				valid.push(b[fromBottom++]);			}			if(valid.isEmpty())			{				++ans;				--fromTop;					}			else				valid.pop();		} 		return ans;	}			static int lowest(int n, int vIdx, Racer[] rs, int[] b)	{		int ans = n;		int vScore = b[0] + rs[vIdx].pts, fromTop = n - 1, fromBottom = 1;		Stack<Integer> valid = new Stack<>();		for(int i = n - 1; i >= 0; --i)		{			if(i == vIdx)				continue; 			while(fromTop >= fromBottom)			{				int rScore = b[fromTop] + rs[i].pts;				if(rScore < vScore || rScore == vScore && rs[i].name.compareTo(rs[vIdx].name) > 0)					break;				valid.push(b[fromTop--]);			}			if(valid.isEmpty())			{				--ans;				++fromBottom;						}			else				valid.pop();		} 		return ans;	}  	static class Racer implements Comparable<Racer>	{		int pts;		String name; 		Racer(String a, int b) { name = a; pts = b; } 		public int compareTo(Racer r) 		{			if(pts != r.pts)				return r.pts - pts;			return name.compareTo(r.name);		}	} 	static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public Scanner(String s) throws FileNotFoundException{	br = new BufferedReader(new FileReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {return Integer.parseInt(next());} 		public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();} 		public double nextDouble() throws IOException { return Double.parseDouble(next()); } 		public boolean ready() throws IOException {return br.ready();} 	}}
