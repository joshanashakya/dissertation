import java.io.*;import java.util.*; public class Main{	static final boolean _DEBUG = false; 	private static class MyScanner {		BufferedReader br;		StringTokenizer st; 		public MyScanner(BufferedReader _br) {			br = _br;		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (Exception e) {					e.printStackTrace();					return "";				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		} 	} 	static MyScanner   scan;	static PrintWriter out; 	static int debugCount = 0;	static void debug(String msg) {		if (_DEBUG && debugCount < 200) {			out.println(msg);			out.flush();			debugCount++;		}	}	    public static void main (String args[]) throws IOException {//    	scan = new MyScanner(new BufferedReader(new FileReader("test.in")));    	scan = new MyScanner(new BufferedReader(new InputStreamReader(System.in)));    	out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        Main inst = new Main();        inst.execute();        out.close();    }        class RacerComparator implements Comparator<int[]> {		public int compare(int[] o1, int[] o2) {			if (o1[0] == o2[0]) {				return names[o1[1]].compareTo(names[o2[1]]);			}			return o2[0]-o1[0];		}    }        int N, M, root, wor, bes, rootIndex;    HashMap<String, Integer> map;    String[] names;    int[] places;    int[][] racers, temp;        void execute() {    	N = scan.nextInt();    	wor = 1;    	bes = 1;    	names = new String[N];    	places = new int[N];    	racers = new int[N][2];    	temp = new int[N][2];    	map = new HashMap<String, Integer>();    	for (int i = 0; i < N; i++) {    		map.put(names[i] = scan.next(), i);    		racers[i][0] = scan.nextInt();    		racers[i][1] = i;    	}    	M = scan.nextInt();    	for (int i = 0; i < M; i++) {    		places[i] = scan.nextInt();    	}    	root = map.get(scan.next());    	Arrays.sort(places); // In ascending order    	Arrays.sort(racers, new RacerComparator()); // In desending order    	// Find worst    	for (int i = 0; i < N; i++) {    		temp[i][0] = racers[i][0];    		temp[i][1] = racers[i][1];    		if (temp[i][1] == root) {    			temp[i][0] += places[0];    			rootIndex = i;    		}    	}    	Arrays.sort(temp, new RacerComparator());    	int before = -1;    	int index = 1;    	for (int i = 0; i < N && index < N; i++) {    		while (before != -1 && index < N) {    			if (temp[i][0] + places[index] > temp[before][0] ||     					(temp[i][0] + places[index] == temp[before][0] &&     					names[temp[i][1]].compareTo(names[temp[before][1]]) < 0)) {    				wor++;    				index++;    				break;    			}    			index++;    		}    		if (temp[i][1] == root) {    			before = i;    			wor = i+1;    		}    	}    	// End find worst    	// Find best    	for (int i = 0; i < N; i++) {    		temp[i][0] = racers[i][0];    		temp[i][1] = racers[i][1];    		if (temp[i][1] == root) {    			temp[i][0] += places[N-1];    			rootIndex = i;    		}    	}    	Arrays.sort(temp, new RacerComparator());    	before = -1;    	int l = 0;    	int r = N-1;    	for (int i = 0; i < N; i++) {    		if (before != -1) {    			if (temp[i][0] + places[l] > temp[before][0] ||     					(temp[i][0] + places[l] == temp[before][0] &&     					names[temp[i][1]].compareTo(names[temp[before][1]]) < 0)) {    				bes++;    				r--;    			} else {    				l++;    			}    		} else {    			r--;    		}    		if (temp[i][1] == root) {    			before = i;    			bes = i+1;    		}    	}    	    	// End find best    	out.println(bes+" "+wor);    }}
