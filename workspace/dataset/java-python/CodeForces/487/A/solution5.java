import java.io.*;import java.lang.reflect.Array;import java.util.*;import static java.lang.Integer.min;import static java.lang.Long.max;import static java.lang.Long.min; public final class Main {        static FastScanner in=new FastScanner();        static PrintWriter out=new PrintWriter(System.out);         /*        1. Never use sorting on 1-indexed array! or be very careful about negative values and stuff        2. read the statement carefully!        3. What about corner cases a=0?        */         static class Fighter{                int hp;                int atk;                int def;                public Fighter(int hp,int atk,int def) {                        this.hp=hp;                        this.atk=atk;                        this.def=def;                }        }         public static void main(String[]args) {                Fighter yang=new Fighter(in.nextInt(),in.nextInt(),in.nextInt());                Fighter monster=new Fighter(in.nextInt(),in.nextInt(),in.nextInt());                Fighter price=new Fighter(in.nextInt(),in.nextInt(),in.nextInt());                  int ans=Integer.MAX_VALUE;                for(int atk=yang.atk;atk<=200;atk++){                        for(int def=yang.def;def<=100;def++){                                int l=yang.hp,r=(int)1e6;                                while(l<=r){                                        int hp=(l+r)/2;                                        int cost=(atk-yang.atk)*price.atk+(hp-yang.hp)*price.hp+(def-yang.def)*price.def;                                        if(go(new Fighter(hp,atk,def),monster)){                                                ans=min(ans,cost);                                                r=hp-1;                                        }else{                                                l=hp+1;                                        }                                }                         }                }                 out.println(ans);                out.close();        }         static boolean go(Fighter a, Fighter b) {                int x= (int) max(0,b.atk-a.def);                int y= (int) max(0,a.atk-b.def);                if(x!=0&&y!=0){                        if((a.hp+x-1)/x>(b.hp+y-1)/y)return true;                        return false;                }                if(y==0)return false;                if(x==0)return true;                return false;        }          static long lcm(long a,long b, long c){                return lcm(a,lcm(b,c));        }        static long lcm(long a,long b){                return a*b/gcd(a,b);        }        static long gcd(long a,long b) {                if (a == 0) return b;                return gcd(b%a,a);        }        static void printArray(long[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(int[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(String[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(double[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(boolean[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static class Pair implements Comparable<Pair>{                int first,second;                public Pair(int a,int b) {                        first=a;                        second=b;                }                @Override                public int compareTo(Pair o) {                        return first-o.first;                }        }        static class FastScanner{                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));                StringTokenizer st=new StringTokenizer("");                String next(){                        while(!st.hasMoreTokens())                                try{                                        st=new StringTokenizer(br.readLine());                                }catch(IOException e){                                        e.printStackTrace();                                }                        return st.nextToken();                }                int nextInt() {                        return Integer.parseInt(next());                }                int[] nextArray(int n,int m) {                        int[] a=new int[n+m];                        for (int i=m;i<n+m;i++)a[i]=nextInt();                        return a;                }                long nextLong() {                        return Long.parseLong(next());                }                double nextDouble() {                        return Double.parseDouble(next());                }        }}
