import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int m=input.nextInt();            ArrayList<Integer> adj[]=new ArrayList[n+1];            ArrayList<Integer> ad[]=new ArrayList[n+1];            Vertex V[]=new Vertex[n+1];            for(int i=1;i<=n;i++)            {                adj[i]=new ArrayList<>();                ad[i]=new ArrayList<>();                V[i]=new Vertex(i);            }            for(int i=0;i<m;i++)            {                int u=input.nextInt();                int v=input.nextInt();                adj[v].add(u);                ad[u].add(v);            }            int k=input.nextInt();            int a[]=new int[k];            for(int i=0;i<k;i++)            {                a[i]=input.nextInt();            }            bfs(adj,V,a[k-1]);            /*            for(int i=1;i<=n;i++)            {                out.print(V[i].d+" ");            }            out.println();              */            int min=0,max=0;            for(int i=1;i<k;i++)            {                int u=a[i-1];                int v=a[i];                int mind=Integer.MAX_VALUE;                for(int j=0;j<ad[u].size();j++)                {                    int w=ad[u].get(j);                    mind=Math.min(mind,V[w].d);                }                int c=0;                for(int j=0;j<ad[u].size();j++)                {                    int w=ad[u].get(j);                    if(mind==V[w].d)                    {                        c++;                    }                }                if(mind==V[v].d)                {                    if(c>1)                    {                        max++;                    }                }                else                {                    min++;                    max++;                }            }            out.println(min+" "+max);        }        out.close();    }    public static void bfs(ArrayList<Integer> adj[],Vertex V[],int s)    {        V[s].color="gray";        V[s].d=0;        V[s].parent=null;        Queue<Integer> q=new LinkedList<>();        q.add(s);        while(!q.isEmpty())        {            int k=q.poll();            Vertex u=V[k];            for(int i=0;i<adj[k].size();i++)            {                int key=adj[k].get(i);                Vertex v=V[key];                if(v.color=="white")                {                    q.add(key);                    v.color="gray";                    v.d=u.d+1;                    v.parent=u;                }            }            u.color="black";        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}class Vertex{    int key;    int d,f;    String color;    Vertex parent;    Vertex(int key)    {        this.key=key;        this.d=0;        this.f=0;        this.color="white";        this.parent=null;    }}
