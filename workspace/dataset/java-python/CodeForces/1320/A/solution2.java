import java.io.*;import java.util.*; public class Main {	static class FastReader     {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }          String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }	public static void main (String[] args) throws Exception {		FastReader sc = new FastReader();        PrintWriter out = new PrintWriter(System.out);//        int t = sc.nextInt();        int t = 1;        while(t-->0) {			int n = sc.nextInt();			int a[] = new int[n];			for(int i=0;i<n;i++) a[i] = sc.nextInt();			pair b[] = new pair[n];			for(int i=0;i<n;i++) {				b[i] = new pair(a[i],i-a[i]);			}			Arrays.sort(b);			long max = b[0].a, ans = 0;			int prev = b[0].b;			for(int i=1;i<n;i++) {				if(b[i].b == prev) {					max += b[i].a;				}				else {					ans = Math.max(ans, max);					max = b[i].a;					prev = b[i].b;				}			}			ans = Math.max(ans, max);			out.write(ans+"\n");        }		out.close();	}}  class pair implements Comparable<pair>{	int a;	int b;	pair(int a,int b){		this.a = a;		this.b = b;	}	@Override    public int compareTo(pair p){        return this.b - p.b;    }}
