import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        long k = in.nextLong();        long l = 1L;        long r = 100L;        ArrayList<Long> A = new ArrayList<>();        int count = 0;        while (k > 0)        {            long ans = -1;            l = 1;            r = 100;            while (l <= r)            {                long mid = (l + r) / 2;                long cycles = nC3(mid, count);                if (cycles > k)                    r = mid - 1;                else                {                    ans = mid;                    l = mid + 1;                }            }            k -= nC3(ans, count);            A.add(ans);            count ++;        }        StringBuilder stringBuilder = new StringBuilder();        int n = 100;        int[][] G = new int[n][n];        int start = 0;        for (int i=0;i<A.size();i++)        {            if (i == 0)            {                int x = (int)(long)A.get(i);                start = x;                for (int j=0;j<x;j++)                {                    for (int m=0;m<x;m++)                    {                        G[j][m] = 1;                        G[m][j] = 1;                    }                }            }            else            {                int x = (int)(long)A.get(i);                for (int j=0;j<x;j++)                {                    G[start][j] = 1;                    G[j][start] = 1;                }                start++;            }        }        stringBuilder.append(100).append("\n");        for (int i=0;i<100;i++)        {            for (int j=0;j<100;j++)            {                if (i == j)                    stringBuilder.append(0);                else                    stringBuilder.append(G[i][j]);            }            stringBuilder.append("\n");        }        System.out.println(stringBuilder);    }    public static long nC3(long n, int count)    {        long ans = n;        if (count == 0)        {            ans *= (n - 1) * (n - 2);            ans /= 6;            return ans;        }        else        {            ans *= (n - 1);            ans /= 2;            return ans;        }    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
