import java.io.BufferedReader;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.StringTokenizer;import java.util.TreeSet;import java.io.InputStreamReader;import java.io.IOException; public class codeforces {   	public static void main(String[] args) {			     scanner in  = new scanner();     int req = in.nextInt();     int[][] x = new int[101][101];     int[] bet = new int[101];     int[] complete = new int[101];     bet[1]  = 0;     for(int i = 1;i<100;i++)        bet[i+1] = bet[i]+i;     for(int i = 3;i<101;i++)     {    	 complete[i] = i*(i-1)*(i-2)/6;     }     int node = 0;     int comp = Arrays.binarySearch(complete,req);     if(comp<0)    	 comp = -(comp)-2;     for(int i =1;i<=comp;i++)    	 for(int j = 1;j<=comp;j++)    		 x[i][j] = i==j?0:1;     req-=complete[comp];     node+=comp;     while(req>0)     {    	 comp = Arrays.binarySearch(bet,req);    	 if(comp<0)        	 comp = -(comp)-2;    	 node++;    	 for(int i = 1;i<=comp;i++)    	 {    		 if(i!=node)    		 {    		  x[node][i] = 1;    		  x[i][node] = 1;    		 }    		 else    		 {    			 x[node][i+1] = 1;    			 x[i+1][node] = 1;    		 }    	 }    	 req-=bet[comp];     }     System.out.println(node);     for(int i = 1;i<=node;i++)     {    	 for(int j = 1;j<=node;j++)    		 System.out.print(x[i][j]);    	 System.out.println();     }	}}class scanner{	BufferedReader br ;	StringTokenizer st;		public scanner()	{		br = new BufferedReader(new InputStreamReader(System.in));		st = null;	}	 public String next() {	        while (st == null || !st.hasMoreElements()) {	            try {	                st = new StringTokenizer(br.readLine());	            } catch (IOException e) {	                e.printStackTrace();	            }	        }	        return st.nextToken();	    }	public int nextInt()	{		return Integer.parseInt(next());	}	public long nextLong()	{	  return	Long.parseLong(next());	}}
