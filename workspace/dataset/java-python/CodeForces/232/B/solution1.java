import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer; public class Solution{		static final int mod = (int)1e9+7;	static final int N = 105;		    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt();    		long m = fs.nextLong();    		int K = fs.nextInt();    		    		int[] p1 = new int[N];   // stores -- (nCi)^(m/n)    		int[] p2 = new int[N];   // stores -- (nCi)^(m/n+1)    		    		    		int num = 1;    		for(int i=0;i<N;i++) {    			p1[i] = bExp(num, m/n);    			p2[i] = bExp(num, m/n+1);    			num = mul(num, n-i);    			num = mul(num, inv(i+1));    		}    		    		    		//dp[i][k]  --- number of ways in which we can fill k points in first i columns    		int[][] dp = new int[N][N*N];    		     		if(m%n==0) {    			for(int i=0;i<=n;i++) dp[1][i] = p1[i];    		}    		else {    			for(int i=0;i<=n;i++) dp[1][i] = p2[i];    		}    		    		    		for(int i=2;i<=n;i++) {    			int lim = Math.min(n*i, K);    			for(int j=0;j<=lim;j++) {    				if(i<=m%n) {    					for(int k=0;k<=j && k<=n;k++) {    						dp[i][j] = add(dp[i][j], mul(dp[i-1][j-k], p2[k]));    					}    				}    				else {    					for(int k=0;k<=j && k<=n;k++) {    						dp[i][j] = add(dp[i][j], mul(dp[i-1][j-k], p1[k]));    					}    				}    			}    		}    		    		out.println(dp[n][K]);    		    		    		    	}    	    		    		    		    	out.close();    		    }                    static int add(int a, int b) {    	a += b;    	if(a>=mod) return a-mod;    	return a;    }            static int mul(int a, int b) {    	return (int)(((long)a*b)%mod);    }        static int bExp(int a, long n) {    	int res = 1;    	while(n>0) {    		if((n&1)==1) res = mul(res, a);    		a = mul(a, a);    		n = n>>1;    	}    	return res;    }        static int inv(int a) {    	return bExp(a, mod-2);    }                          static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
