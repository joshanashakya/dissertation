import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class Round144B { 	public static long mod = (long)1e9+7;	public static long[] fact;	public static long[] invfact;		public static long nCr(int n, int r) {		return (((fact[n] * invfact[r])%mod) * invfact[n - r])%mod;	}		public static int max = 110;	public static long[][] dp;	public static long[][] pre;	public static int n;	public static long m;		public static void solve() {		fact = new long[max];		invfact = new long[max];		fact[0] = invfact[0] = 1;		for(int i = 1; i < max; i++) {			fact[i] = fact[i - 1] * i;			fact[i] %= mod;			invfact[i] = invfact[i - 1] * ModInverse(i, mod);			invfact[i] %= mod;		}		n = s.nextInt();		m = s.nextLong();		pre = new long[n + 1][n + 1];		for(int i = 1; i < n + 1; i++) {			for(int j = 0; j < n + 1; j++) {				pre[i][j] = fast(nCr(n, j), ((m - i)/(long)n) + 1);			}		}		dp = new long[max][max * max];		for(int i = 0; i < max; i++) {			Arrays.fill(dp[i], -1);		}		int k = s.nextInt();		long ans  = Recur(1, k);		out.println(ans);	}		public static long Recur(int pos, int left) {		if(left == 0) {			return 1;		}		if(pos == n + 1) {			return 0;		}		if(dp[pos][left] != -1) {			return dp[pos][left];		}		long ans = 0;		for(int i = 0; i <= Math.min(left, n); i++) {			ans += (Recur(pos + 1, left - i) * pre[pos][i])%mod;			if(ans >= mod) ans -= mod;		}		return dp[pos][left] = ans;	}		public static long fast(long a, long n) {		if(n == 1) {			return a;		}		long ans = fast(a, n/2L);		ans = (ans * ans);		ans %= mod;		if(n%2 == 1) {			ans = ans * a;			ans %= mod;		}		return ans;	} 	public static void main(String[] args) {		out = new PrintWriter(new BufferedOutputStream(System.out));		s = new FastReader();		solve();		out.close();	}		public static class Triplet {		long gcd;		long x;		long y; 		Triplet(long gcd, long x, long y) {			this.gcd = gcd;			this.x = x;			this.y = y;		}	} 	public static Triplet ExtendedEuclideanAlgo(long a, long b) {		if (a == 0) {			return new Triplet(b, 0, 1);		}		Triplet ans = ExtendedEuclideanAlgo(b % a, a);		long x = ans.y - (b / a) * ans.x;		long y = ans.x;		return new Triplet(ans.gcd, x, y);	} 	public static long ModInverse(long a, long m) {		Triplet ans = ExtendedEuclideanAlgo(a, m);		if (ans.gcd != 1) {			//System.out.println("Multiplicative inverse doesnot exist");			return -1;		} else {			//m is added to handle negative x			long result = (ans.x % m + m) % m;			return result;		}	} 	public static FastReader s;	public static PrintWriter out; 	public static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (Exception e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception e) {				e.printStackTrace();			}			return str;		}	} 	}
