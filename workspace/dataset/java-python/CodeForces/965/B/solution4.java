// package may2020; import java.util.*;import java.lang.*;import java.math.*;import java.io.*; public class C {//	static int a,b;	public static void main(String[] args) throws IOException {		FastReader scn = new FastReader();		OutputStream out = new BufferedOutputStream(System.out);		int t = 1;//		@SuppressWarnings("unchecked")		while(t-->0) {			int n = scn.nextInt();			int k = scn.nextInt();			boolean[][] grid = new boolean[n][n];			for(int i = 0;i<n;i++) {				char[] s = scn.next().toCharArray();				for(int j=0;j<n;j++) {					grid[i][j]=s[j]=='.';				}			}			int[][] ships = new int[n][n];			int max = Integer.MIN_VALUE;			int mr = -1, mc = -1;			for(int  i=0;i<n;i++) {				for(int j=0;j<n;j++) {					int l = j;					while(l>=0&&grid[i][l]&&l>j-k) {						l--;					}					l++;					int r = j;					while(r<n&&grid[i][r]&&r<j+k) {						r++;					}					r--;					int u = i;					while(u>=0&&grid[u][j]&&u>i-k) {						u--;					}					u++;					int d=i;					while(d<n&&grid[d][j]&&d<i+k) {						d++;					}					d--;					//horizontals					if(r-l+1>=k) {						int len = r-l+1;						ships[i][j]+=(len-k+1);					}					if(d-u+1>=k) {						int len = d-u+1;						ships[i][j]+=(len-k+1);					}					if(ships[i][j]>max) {						max=ships[i][j];						mr =i;						mc =j;					}				}			}			mr++;			mc++;			out.write((mr+" "+mc+"\n").getBytes());		}//		System.out.println(41664916690999888l/8);		out.close();	}//	public static int[] merge(int[] one,int[] two){//		int[] res = new int[one.length+two.length];//		int i = 0;//		int j = 0;//		int k = 0;//		//		while(i<one.length&&j<two.length){//			if(one[i]<two[j]){//				res[k] = one[i];//				i++;//				k++;//			}//			else{//				res[k] = two[j];//				j++;//				k++;//			}//		}//		//		if(i==one.length){//			while(j<two.length){//				res[k] = two[j];//				j++;//				k++;//			}//		}//		else{//			while(i<one.length){//				res[k] = one[i];//				k++;//				i++;//			}//		}//		return res;//	}//	public static int[] mergesort(int[] arr, int l, int r){//		if(l==r){//			int[] br = new int[1];//			br[0] = arr[l];//			return br;//		}//		int mid = (l+r)/2;//		int[] fh = mergesort(arr,l,mid);//		int[] sh = mergesort(arr,mid+1,r);//		//		return merge(fh,sh);//	}//	static int ub(long[] a, long val) {//		int l=0, r=a.length;//		//		while(r>l) {//			int x = (r+l)>>1;//			if(val>=a[x]) {//				l=x+1;//			}else {//				r=x;//			}//		}//		return l;//	}//	static int lb(int[] a, int val) {//		int l = 0;//		int r = a.length;//		while(r>l) {//			int x = (l+r)>>1;//			if(a[x]>=val) {//				r=x;//			}else {//				l=x+1;//			}//		}//		return l;//	}	static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }
