import java.io.*;import java.lang.reflect.Array;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*; public class tr1 {	static PrintWriter out;	static StringBuilder sb;	static int n, z, k;	static long mod = 998244353;	static int[][][] memo;	static String s, t;	static int[][] ad;	static TreeMap<Long, Integer>[] gs;	static long inf = Long.MAX_VALUE;	static int ans;	static ArrayList<Integer> o;	static char[][] g;	static boolean[] vis, vis1;	static long[] f;	static int lj;	static int[][] mat; 	public static void main(String[] args) throws Exception {		Scanner sc = new Scanner(System.in);		out = new PrintWriter(System.out);		int n = sc.nextInt();		int k = sc.nextInt();		char[][] grid = new char[n][n];		for (int i = 0; i < n; i++)			grid[i] = sc.nextLine().toCharArray();		long max = 0;		int x = 1;		int y = 1;		for (int i = 0; i < n; i++) {			for (int j = 0; j < n; j++) {				long tem = 0;				int u = 0;				int d = 0;				int r = 0;				int l = 0;				for (int ii = i + 1; ii < n; ii++)					if (grid[ii][j] == '#')						break;					else						d++;				int dpos = i + d;				for (int ii = i; ii >= 0; ii--)					if (grid[ii][j] == '#')						break;					else {						int pos = ii + k - 1;						if (pos < i)							break;						if (pos <= dpos)							tem++;					}				for (int jj = j + 1; jj < n; jj++)					if (grid[i][jj] == '#')						break;					else						r++;				int rpos = j + r;				for (int jj = j; jj >= 0; jj--)					if (grid[i][jj] == '#')						break;					else {						int pos = jj + k - 1;						if (pos < j)							break;						if (pos <= rpos)							tem++;					}				if (tem > max) {					max = tem;					x = i + 1;					y = j + 1;				}			}		}		System.out.println(x+" "+y);		out.flush();	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		} 		public Scanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public char nextChar() throws IOException {			return next().charAt(0);		} 		public Long nextLong() throws IOException {			return Long.parseLong(next());		} 		public int[] nextArrInt(int n) throws IOException {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		public long[] nextArrLong(int n) throws IOException {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		public boolean ready() throws IOException {			return br.ready();		} 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}	}}
