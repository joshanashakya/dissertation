import java.util.*;import java.io.*; public class tr0 {	static PrintWriter out;	static StringBuilder sb;	static int mod = (int) 1e9 + 7;	static long inf = (long) 1e14;	static int n, m, c;	static int[][] ad;	static int[][][] memo;	static boolean f;	static boolean vis[];	static int[] px, Q[];	static HashMap<Integer, Integer> hm; 	public static void main(String[] args) throws Exception {		Scanner sc = new Scanner(System.in);		out = new PrintWriter(System.out);		int k = sc.nextInt();		int n = sc.nextInt();		int s = sc.nextInt();		int p = sc.nextInt();		long lo = 0;		long hi = (long) 1e9;		long ans=0;		while (lo <= hi) {			long i = lo + hi >> 1;			long paper = p * 1l * i;			long in = paper / k;			long kk = in * 1l * s;		//	System.out.println(kk+" "+i);			if(kk>=n) {				ans=i;				hi=i-1;			}			else {				lo=i+1;			}		}	System.out.println(ans);		out.close();	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		} 		public Scanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public char nextChar() throws IOException {			return next().charAt(0);		} 		public Long nextLong() throws IOException {			return Long.parseLong(next());		} 		public int[] nextArrInt(int n) throws IOException {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		public long[] nextArrLong(int n) throws IOException {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		public boolean ready() throws IOException {			return br.ready();		} 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}	}}
