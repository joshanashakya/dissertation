import java.util.*;import java.lang.*;import java.io.*; 	public class FastIO{					BufferedReader br;		StringTokenizer st;				public FastIO(){ // constructor						br = new BufferedReader(new InputStreamReader(System.in));		}				String next(){						while (st == null || !st.hasMoreElements()){				try{					st = new StringTokenizer(br.readLine());				}								catch (IOException e){					e.printStackTrace();				}			}			return st.nextToken();		}				int nextInt(){						return Integer.parseInt(next());		}				long nextLong(){						return Long.parseLong(next());		}				double nextDouble(){			return Double.parseDouble(next());		} 		String nextLine(){						String str = "";			try{								str = br.readLine();			}			catch (IOException e){								e.printStackTrace();			}			return str;		}			public static void main(String[] args) throws IOException {				FastIO io = new FastIO();				// int n = io.nextInt(); -> for int		// double d = io.nextDouble(); -> for double		// String ch = io.next(); -> for one word		// String str = io.nextLine(); -> for the entire line				int n = io.nextInt();		int m = io.nextInt();				int a1 = 0, b1 = 0;				for(int i = 0; i <= n; i++) {			int a = io.nextInt();						if(i == 0) {				a1 = a;			}		}				for(int i = 0; i <= m; i++) {			int b = io.nextInt();						if(i == 0) {				b1 = b;			}		}				if(n > m) {			if((a1 < 0 && b1 < 0) || (a1 > 0 && b1 > 0)) {				System.out.println("Infinity");			}			else {				System.out.println("-Infinity");			}		}				else if(n == m) {			printIrreducible(a1, b1);		}				else {			System.out.println("0/1");		}	 	}	static void printIrreducible(int a1, int b1) {				int hcf = gcd(a1, b1);		int p = a1 / hcf;				int q = b1 / hcf;				if(a1 < 0 && b1 < 0 || a1 > 0 && b1 > 0) {			System.out.println(Math.abs(p) + "/" + Math.abs(q));		}		else {			System.out.println("-" + Math.abs(p) + "/" + Math.abs(q));		}	}		static int gcd(int a, int b) {				if(b == 0) {			return a;		}				return gcd(b, a % b);	}}
