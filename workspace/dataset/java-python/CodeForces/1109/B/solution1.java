import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Random;import java.util.StringTokenizer; public class Main implements Runnable { 	long INF = (long) 1e9 + 7;	int MAXN = (int) 1e6 + 1; 	private void solve() throws IOException {		String st = next();		char s[] = st.toCharArray();		boolean ok = true;		for (int i = 0; i < s.length; ++i) {			if (s[0] != s[i]) {				ok = false;				break;			}		}		if (!ok) {			if (s.length % 2 == 0) {				for (int i = 0; i < s.length; ++i) {					String tmp = st.substring(i + 1, s.length) + st.substring(0, i + 1);					if (!tmp.equals(st) && isPal(tmp)) {						pw.println(1);						return;					}				}				pw.println(2);			} else {				for (int i = 0; i < s.length / 2; ++i) {					if (!isPal(st.substring(0, i + 1))) {						pw.println(2);						return;					}				}				pw.println("Impossible");			}		} else {			pw.println("Impossible");		}	} 	boolean isPal(String s) {		char c[] = s.toCharArray();		for (int i = 0; i < s.length() / 2; ++i) {			if (c[i] != c[s.length() - 1 - i]) {				return false;			}		}		return true;	} 	private void brute() throws Exception {	} 	void test() throws IOException {		Random rnd = new Random();		for (int i = 0; i < 20; ++i) { 			System.err.println();		}	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in), 32768);			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
