import static java.lang.Integer.parseInt;import static java.lang.Long.parseLong;import static java.lang.Double.parseDouble;import static java.lang.Math.PI;import static java.lang.Math.min;import static java.lang.System.arraycopy;import static java.lang.System.exit;import static java.util.Arrays.copyOf; import java.util.LinkedList; import java.math.BigInteger; import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.Set;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.HashMap;import java.util.NoSuchElementException;import java.util.PriorityQueue;import java.util.StringTokenizer;import java.util.Comparator;import java.lang.StringBuilder;import java.util.Collections;public class Solution { 	static int scanInt() throws IOException {		return parseInt(scanString());	} 	static long scanLong() throws IOException {		return parseLong(scanString());	}	static double scanDouble() throws IOException {		return parseDouble(scanString());	} 	static String scanString() throws IOException {		if (tok == null || !tok.hasMoreTokens()) {			tok = new StringTokenizer(in.readLine());		}		return tok.nextToken();	}	static String scanLine() throws IOException {		return in.readLine();	} 	static void printCase(String str) {		out.print("Case #" + test + ": "+str);	} 	static void printlnCase() {		out.println("Case #" + test + ":");	} 	static BufferedReader in;	static PrintWriter out;	static StringTokenizer tok;	static int test;	static StringBuilder str;	public static void main(String[] args) {		try {			long startTime = System.currentTimeMillis(); 			in = new BufferedReader(new InputStreamReader(System.in));			out = new PrintWriter(System.out);			/*int tests = scanInt(); 			for (test = 1; test <= tests; test++) {					int n=scanInt();							}*/						/*String []bank={"ab","abc","cd","def","abcd"};			out.println(countConstruct("abcdef",bank));			String bank2[]={"bo","rd","ate","t","ska","sk","boar"};			out.println(countConstruct("skateboard",bank2));			String bank3[]={"a","p","ent","enter","ot","o","t"};			out.println(countConstruct("enterapotentpot",bank3));			String bank4[]={"e","ee","eee","eeee","eeeee","eeeeee"};			out.println("ans"+countConstruct("eeeeeeeeeeeeeeeeeeeeeeeef",bank4));			String bank5[]={"purp","p","ur","le","purpl","purple"};			allConstruct("purple",bank5);			for(ArrayList<String> data: xyz)				out.println(data);*/							solve();						long endTime   = System.currentTimeMillis();			long totalTime = endTime - startTime;			//System.out.println(totalTime+"  "+System.currentTimeMillis() );			in.close();			out.close();					} catch (Throwable e) {			e.printStackTrace();			exit(1);		}	}	private static void solve() throws IOException{		int t=scanInt();		while(--t>-1){			int n=scanInt();			boolean exist[]=new boolean[1025];			int arr[]=new int[1025];			for(int i=0; i<n;++i){				arr[i]=scanInt();				exist[arr[i]]=true;			}			boolean flag=true;			for(int i=1; i<1024; ++i){				flag=true;				for(int j=0;j<n;++j){					if(!(exist[arr[j]^i])){						flag=false;						break;					}				}				if(flag){					out.println(i);					break;				}			}			if(!flag)				out.println(-1);		}							}					/*		private static void allConstruct(String str, String bank[]){		ArrayList<ArrayList<String>> dp[]= new ArrayList[str.length()+1];		//HashMap<Integer,ArrayList<String>> dp[]=new HashMap[str.length()+1];		dp[0]=new ArrayList<>();				dp[0].add(new ArrayList<>());				for(int i=0; i<=str.length(); ++i){			String temp=str.substring(i);			//out.println(dp[i]);			if(dp[i]!=null){				for(int j=0; j<bank.length; ++j){					if(temp.startsWith(bank[j])){							for(ArrayList<String> data: dp[i]){							ArrayList<String> x=new ArrayList<>(data);							x.add(bank[j]);							if(dp[i+bank[j].length()]==null)								dp[i+bank[j].length()]=new ArrayList<>();							dp[i+bank[j].length()].add(x);							}						}				}			}		}		for(int i=0; i<=str.length(); ++i){			out.println(dp[i]);		}		//return dp;	}	private static int countConstruct(String str, String []bank){		int dp[]=new int[str.length()+1];		dp[0]=1;		for(int i=0; i<=str.length(); ++i){			String temp=str.substring(i);			if(dp[i]!=0){				for(int j=0; j<bank.length; ++j){					if(temp.startsWith(bank[j])){						dp[i+bank[j].length()]+=dp[i];					}				}				for(Integer data: dp){						out.print(data+" ");					}					out.println();			}		}		return(dp[str.length()]);			}	private static boolean canConstruct(String str, String []bank){		boolean dp[]=new boolean[str.length()+1];			dp[0]=true;			for(int i=0;i<=str.length();++i){				String temp=str.substring(i);				if(dp[i]){					for(int j=0; j<bank.length; ++j){						if(temp.startsWith(bank[j])){							dp[i+bank[j].length()]=true;						}					}					/*for(Boolean data: dp){						out.print(data+" ");					}					out.println();				}							}					return dp[str.length()];	} 	*/ }  
