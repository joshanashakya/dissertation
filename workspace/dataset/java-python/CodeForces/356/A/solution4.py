import math,sys## from itertools import permutations, combinations;import heapq,random;#from collections import defaultdict,deque#import bisect as bidef yes():print('YES')def no():print('NO')#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');def I():return (int(sys.stdin.readline()))def In():return(map(int,sys.stdin.readline().split()))def Sn():return sys.stdin.readline().strip()#sys.setrecursionlimit(1500)def dict(a):    d={}     for x in a:        if d.get(x,-1)!=-1:            d[x]+=1        else:            d[x]=1    return ddef find_gt(a, x):    'Find leftmost value greater than x'    i = bi.bisect_left(a, x)    if i != len(a):        return i    else:                    return -1def update(bit,pos,val):    while pos<=n:        bit[pos]+=val        pos=(pos|(pos-1))+1def getsum(bit,x):    su=0    while x>0:        su+=bit[x]        x&= (x-1)    return su def main():    try:        global n        n,nQ=In()        bit=[0 for x in range(n+1)]        ans=[0 for x in range(n+1)]        for i in range(1,n+1):            update(bit,i,1)        for i in range(nQ):            fr,to,win=In()            dec=getsum(bit,fr-1)            add=getsum(bit,to)            while add>dec:                a,b=fr,to                while a<b:                    mid=(a+b)>>1                    if getsum(bit,mid)==dec:                        a=mid+1                    else:                        b=mid                ans[a]=win                update(bit,a,-1)                add-=1            ans[win]=0            update(bit,win,1)        print(*ans[1:])     except:        pass        M = 998244353P = 1000000007 if __name__ == '__main__':    # for _ in range(I()):main()    for _ in range(1):main()#End# #        ******************* All The Best *******************   #
