import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            AKarenAndGame solver = new AKarenAndGame();            solver.solve(1, in, out);            out.close();        }    }     static class AKarenAndGame {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int m = in.readInt();            int[][] mat = new int[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    mat[i][j] = in.readInt();                }            }            int[] a = new int[n];            int[] b = new int[m];             int inf = (int) 1e9;            int ans = inf;             int[] ansA = null;            int[] ansB = null;            for (int i = 0; i <= 500; i++) {                a[0] = i;                for (int j = 0; j < m; j++) {                    b[j] = mat[0][j] - a[0];                }                for (int j = 1; j < n; j++) {                    a[j] = mat[j][0] - b[0];                }                 boolean valid = true;                for (int j = 0; j < n; j++) {                    for (int k = 0; k < m; k++) {                        if (a[j] + b[k] != mat[j][k]) {                            valid = false;                        }                    }                }                 int sum = 0;                 for (int x : a) {                    if (x < 0) {                        valid = false;                    }                    sum += x;                }                for (int x : b) {                    if (x < 0) {                        valid = false;                    }                    sum += x;                }                 if (valid && sum < ans) {                    ans = sum;                    ansA = a.clone();                    ansB = b.clone();                }            }             if (ansA == null) {                out.println(-1);                return;            }             int sum = 0;            for (int x : ansA) {                sum += x;            }            for (int x : ansB) {                sum += x;            }            out.println(sum);            for (int i = 0; i < n; i++) {                for (int j = 0; j < ansA[i]; j++) {                    out.append("row ").println(i + 1);                }            }            for (int i = 0; i < m; i++) {                for (int j = 0; j < ansB[i]; j++) {                    out.append("col ").println(i + 1);                }            }        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }} 
