/* *created by Kraken on 03-05-2020 at 16:00 *///package com.kraken.cf.practice; import java.util.*;import java.io.*; public class A815 {   private static int[] rrow, rcol, crow, ccol;  private static int n, m;   private static long findRow(int[][] mat) {    rrow = new int[n];    rcol = new int[m];    for (int i = 0; i < n; i++) {      int min = Integer.MAX_VALUE;      for (int j = 0; j < m; j++) min = Math.min(min, mat[i][j]);      rrow[i] = min;    }    for (int j = 0; j < m; j++) {      int min = Integer.MAX_VALUE;      for (int i = 0; i < n; i++) min = Math.min(min, mat[i][j] - rrow[i]);      rcol[j] = min;    }    boolean fine = true;    for (int i = 0; i < n; i++) {      for (int j = 0; j < m; j++) {        if (mat[i][j] != rrow[i] + rcol[j]) {          fine = false;          break;        }      }      if (!fine) break;    }    if (!fine) {      return -1;    }    long cnt = 0;    for (int i : rrow) cnt += i;    for (int i : rcol) cnt += i;    return cnt;  }   private static long findCol(int[][] mat) {    crow = new int[n];    ccol = new int[m];    for (int j = 0; j < m; j++) {      int min = Integer.MAX_VALUE;      for (int i = 0; i < n; i++) min = Math.min(min, mat[i][j]);      ccol[j] = min;    }    for (int i = 0; i < n; i++) {      int min = Integer.MAX_VALUE;      for (int j = 0; j < m; j++) min = Math.min(min, mat[i][j] - ccol[j]);      crow[i] = min;    }    boolean fine = true;    for (int i = 0; i < n; i++) {      for (int j = 0; j < m; j++) {        if (mat[i][j] != crow[i] + ccol[j]) {          fine = false;          break;        }      }      if (!fine) break;    }    if (!fine) {      return -1;    }    long cnt = 0;    for (int i : crow) cnt += i;    for (int i : ccol) cnt += i;    return cnt;   }   private static String findAns(int[] row, int[] col, long cnt) {    StringBuilder sb = new StringBuilder();    sb.append(cnt).append("\n");    for (int i = 0; i < n; i++) {      for (int j = 0; j < row[i]; j++)        sb.append("row ").append(i + 1).append("\n");    }    for (int i = 0; i < m; i++) {      for (int j = 0; j < col[i]; j++)        sb.append("col ").append(i + 1).append("\n");    }    return sb.toString();  }   public static void main(String[] args) {    FastReader sc = new FastReader();    n = sc.nextInt();    m = sc.nextInt();    int[][] mat = new int[n][m];    for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {      mat[i][j] = sc.nextInt();    }    long r = findRow(mat);    long c = findCol(mat);    if (r == -1 || c == -1) {      System.out.println(-1);      return;    }    if (r < c) {      System.out.print(findAns(rrow, rcol, r));    } else {      System.out.print(findAns(crow, ccol, c));    }  }   static class FastReader {     BufferedReader br;     StringTokenizer st;     public FastReader() {      br = new BufferedReader(new InputStreamReader(System.in));    }     String next() {      while (st == null || !st.hasMoreElements()) {        try {          st = new StringTokenizer(br.readLine());        }        catch (IOException e) {          e.printStackTrace();        }      }      return st.nextToken();    }     int nextInt() {      return Integer.parseInt(next());    }     long nextLong() {      return Long.parseLong(next());    }     double nextDouble() {      return Double.parseDouble(next());    }     String nextLine() {      String str = "";      try {        str = br.readLine();      }      catch (IOException e) {        e.printStackTrace();      }      return str;    }  }}
