#include<bits/stdc++.h>using namespace std; #define pb push_back#define eb emplace_back#define all(x) x.begin(), x.end()#define srt(x) sort(all(x))#define uni(x) sort(all(x)), x.erase(unique(all(x)), x.end())#define msv(x, v) memset((x), (v), sizeof(x))#define ms(x) memset(x, 0, sizeof(x))#define dbg(x) cerr << #x " = " << (x) << endl typedef long long ll;typedef long double ld;typedef unsigned int uint;typedef unsigned long long ull; typedef pair<int, int> pii;typedef pair<ll, int> pli;typedef pair<int, ll> pil;typedef pair<ll, ll> pll;typedef vector<int> vi;typedef vector<ll> vl;typedef vector<pii> vpii;typedef vector<pil> vpil;typedef vector<pli> vpli;typedef vector<pll> vpll; struct Scanner {     bool hasNext = 1;    bool hasRead = 1;     int nextInt() {        hasRead = 0;        int res = 0;        char flag = 1, ch = getchar();        while (ch != EOF && !isdigit(ch)) {            hasRead = 1;            flag = (ch == '-') ? -flag : flag;            ch = getchar();        }        while (ch != EOF && isdigit(ch)) {            hasRead = 1;            res = res * 10 + (ch - '0');            ch = getchar();        }        if (ch == EOF)            hasNext = 0;        return res * flag;    }     ll nextLL() {        hasRead = 0;        ll res = 0;        char flag = 1, ch = getchar();        while (ch != EOF && !isdigit(ch)) {            hasRead = 1;            flag = (ch == '-') ? -flag : flag;            ch = getchar();        }        while (ch != EOF && isdigit(ch)) {            hasRead = 1;            res = res * 10 + (ch - '0');            ch = getchar();        }        if (ch == EOF)            hasNext = 0;        return res * flag;    }     char nextChar() {        hasRead = 0;        char ch = getchar();        while (ch != EOF && isspace(ch)) {            hasRead = 1;            ch = getchar();        }        if (ch == EOF)            hasNext = 0;        return ch;    }     int nextString(char *str) {        hasRead = 0;        int len = 0;        char ch = getchar();        while (ch != EOF && isspace(ch)) {            hasRead = 1;            ch = getchar();        }        while (ch != EOF && !isspace(ch)) {            hasRead = 1;            str[++len] = ch;            ch = getchar();        }        str[len + 1] = 0;        if (ch == EOF)            hasNext = 0;        return len;    } } sc; ll rd() {    ll x = sc.nextLL();    return x;} void rd(int &x) {    x = sc.nextInt();} void rd(ll &x) {    x = sc.nextLL();} void rd(char &x) {    x = sc.nextChar();} void rd(char* x) {    sc.nextString(x);} template<typename T1, typename T2>void rd(pair<T1, T2> &x) {    rd(x.first);    rd(x.second);} template<typename T>void rd(T *x, int n) {    for (int i = 1; i <= n; ++i)        rd(x[i]);} void printInt(int x) {    if (x < 0) {        putchar('-');        x = -x;    }    if (x >= 10)        printInt(x / 10);    putchar('0' + x % 10);} void printLL(ll x) {    if (x < 0) {        putchar('-');        x = -x;    }    if (x >= 10)        printLL(x / 10);    putchar('0' + x % 10);} void pr(int x, char ch = '\n') {    printInt(x);    putchar(ch);} void pr(ll x, char ch = '\n') {    printLL(x);    putchar(ch);} template<typename T1, typename T2>void pr(pair<T1, T2> x, char ch = '\n') {#ifdef LOCAL    putchar('<');    pr(x.first, ' ');    pr(x.second, '>');    putchar(ch);    return;#endif // LOCAL    pr(x.first, ' ');    pr(x.second, ch);} template<typename T>void pr(T *x, int n) {    for (int i = 1; i <= n; ++i)        pr(x[i], " \n"[i == n]);} template<typename T>void pr(vector<T> &x) {    int n = x.size();    for (int i = 1; i <= n; ++i)        pr(x[i - 1], " \n"[i == n]);} template<typename T>void cmin(T &x, T y) {    if (y < x)        x = y;} template<typename T>void cmax(T &x, T y) {    if (y > x)        x = y;} /* begin */  const int INF = 0x3f3f3f3f;const ll LINF = 0x3f3f3f3f3f3f3f3fLL;const double PI = acos(-1.0);const double EPS = 1e-9;const int MOD = 1000000007;//const int MOD = 998244353; namespace Combinatory {     const int MAXN = 2e5 + 5;     ll inv[MAXN], fac[MAXN], invfac[MAXN];     ll qpow(ll x, ll n) {        ll res = 1;        for (; n; n >>= 1) {            if (n & 1) res = res * x % MOD;            x = x * x % MOD;        }        return res;    }     void init(int n = MAXN - 1) {        inv[1] = 1;        for (int i = 2; i <= n; ++i)            inv[i] = inv[MOD % i] * (MOD - MOD / i) % MOD;        fac[0] = 1, invfac[0] = 1;        for (int i = 1; i <= n; ++i) {            fac[i] = fac[i - 1] * i % MOD;            invfac[i] = invfac[i - 1] * inv[i] % MOD;        }     }     ll A(ll n, ll m) {        if (n < m)            return 0;        return fac[n] * invfac[n - m] % MOD;    }     ll C(ll n, ll m) {        if (n < m)            return 0;        return fac[n] * invfac[n - m] % MOD * invfac[m] % MOD;    } }  int n;int a[200005];ll b[200005];ll c[200005];  struct Solver {     void InitOnce() {        Combinatory::init();    }     void Read() {        rd(n);        rd(a, n);    }     void Solve() {//        dbg(n);        ms(b);        if (n % 4 == 2) {            for (int i = 1; i <= n; ++i)                b[i] = Combinatory::C((n - 2) / 2, (i - 1) / 2);        } else if (n % 4 == 1) {            for (int i = 1; i <= n; i += 2)                b[i] = Combinatory::C((n - 1) / 2, (i - 1) / 2);        } else if (n % 4 == 0) {            for (int i = 1; i <= n; ++i) {                b[i] = Combinatory::C((n - 2) / 2, (i - 1) / 2);                if (i % 2 == 0)                    b[i] = -b[i];            }        } else {            ms(c);            for (int i = 1; i <= n - 1; ++i)                c[i] = Combinatory::C((n - 2) / 2, (i - 1) / 2);            for (int i = 1; i <= n; ++i) {                if (i % 2 == 1)                    b[i] = c[i] - c[i - 1];                else                    b[i] = c[i] + c[i - 1];            }        }//        pr(b, n);        for (int i = 1; i <= n; ++i)            b[i] = (b[i] * a[i] % MOD + MOD) % MOD;//        pr(b, n);        ll sum = 0;        for (int i = 1; i <= n; ++i)            sum += b[i];        sum = (sum % MOD + MOD) % MOD;        pr(sum);    } } solver; /* end */ int main() {#ifdef LOCAL    freopen("A.in", "r", stdin);#endif // LOCAL    solver.InitOnce();    int t = 1;//    t = sc.nextInt();    t = INF;    while (t--) {        solver.Read();        if (!sc.hasRead)            break;        solver.Solve();        if (!sc.hasNext)            break;    }    return 0;} /* n=1x=1 contribution=1 n=2x=1 contribution=1x=2 contribution=1 n=3x=1 contribution=1x=2 contribution=2x=3 contribution=-1 n=4x=1 contribution=1x=2 contribution=-1x=3 contribution=1x=4 contribution=-1 n=5x=1 contribution=1x=2 contribution=0x=3 contribution=2x=4 contribution=0x=5 contribution=1 n=6x=1 contribution=1x=2 contribution=1x=3 contribution=2x=4 contribution=2x=5 contribution=1x=6 contribution=1 n=7x=1 contribution=1x=2 contribution=2x=3 contribution=1x=4 contribution=4x=5 contribution=-1x=6 contribution=2x=7 contribution=-1 n=8x=1 contribution=1x=2 contribution=-1x=3 contribution=3x=4 contribution=-3x=5 contribution=3x=6 contribution=-3x=7 contribution=1x=8 contribution=-1 n=9x=1 contribution=1x=2 contribution=0x=3 contribution=4x=4 contribution=0x=5 contribution=6x=6 contribution=0x=7 contribution=4x=8 contribution=0x=9 contribution=1 n=10x=1 contribution=1x=2 contribution=1x=3 contribution=4x=4 contribution=4x=5 contribution=6x=6 contribution=6x=7 contribution=4x=8 contribution=4x=9 contribution=1x=10 contribution=1 n=11x=1 contribution=1x=2 contribution=2x=3 contribution=3x=4 contribution=8x=5 contribution=2x=6 contribution=12x=7 contribution=-2x=8 contribution=8x=9 contribution=-3x=10 contribution=2x=11 contribution=-1 n=12x=1 contribution=1x=2 contribution=-1x=3 contribution=5x=4 contribution=-5x=5 contribution=10x=6 contribution=-10x=7 contribution=10x=8 contribution=-10x=9 contribution=5x=10 contribution=-5x=11 contribution=1x=12 contribution=-1 n=13x=1 contribution=1x=2 contribution=0x=3 contribution=6x=4 contribution=0x=5 contribution=15x=6 contribution=0x=7 contribution=20x=8 contribution=0x=9 contribution=15x=10 contribution=0x=11 contribution=6x=12 contribution=0x=13 contribution=1 n=14x=1 contribution=1x=2 contribution=1x=3 contribution=6x=4 contribution=6x=5 contribution=15x=6 contribution=15x=7 contribution=20x=8 contribution=20x=9 contribution=15x=10 contribution=15x=11 contribution=6x=12 contribution=6x=13 contribution=1x=14 contribution=1 n=15x=1 contribution=1x=2 contribution=2x=3 contribution=5x=4 contribution=12x=5 contribution=9x=6 contribution=30x=7 contribution=5x=8 contribution=40x=9 contribution=-5x=10 contribution=30x=11 contribution=-9x=12 contribution=12x=13 contribution=-5x=14 contribution=2x=15 contribution=-1 */
