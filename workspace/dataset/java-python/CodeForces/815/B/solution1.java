import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BKarenAndTest solver = new BKarenAndTest();            solver.solve(1, in, out);            out.close();        }    }     static class BKarenAndTest {        public void solve(int testNumber, FastInput in, FastOutput out) {            Modular mod = new Modular(1e9 + 7);            Combination comb = new Combination(200000, mod);            int n = in.readInt();            int[] a = new int[n];            for (int i = 0; i < n; i++) {                a[i] = mod.valueOf(in.readInt());            }            if (n == 1) {                out.println(a[0]);                return;            }             if (n % 2 == 1) {                int[] b = a;                a = new int[n - 1];                for (int i = 0; i < n - 1; i++) {                    if (i % 2 == 0) {                        a[i] = mod.plus(b[i], b[i + 1]);                    } else {                        a[i] = mod.subtract(b[i], b[i + 1]);                    }                }                n--;            }             int sumL = 0;            int sumR = 0;            int time = n / 2 - 1;            for (int i = 0; i < n; i += 2) {                sumL = mod.plus(sumL, mod.mul(a[i], comb.combination(time, i / 2)));            }            for (int i = 1; i < n; i += 2) {                sumR = mod.plus(sumR, mod.mul(a[i], comb.combination(time, i / 2)));            }            int ans;            if ((n - 2) / 2 % 2 == 1) {                ans = mod.subtract(sumL, sumR);            } else {                ans = mod.plus(sumL, sumR);            }             out.println(ans);        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class ModPrimeInverseNumber implements InverseNumber {        int[] inv;         public ModPrimeInverseNumber(int[] inv, int limit, Modular modular) {            this.inv = inv;            inv[1] = 1;            int p = modular.getMod();            for (int i = 2; i <= limit; i++) {                int k = p / i;                int r = p % i;                inv[i] = modular.mul(-k, inv[r]);            }        }         public ModPrimeInverseNumber(int limit, Modular modular) {            this(new int[limit + 1], limit, modular);        }         public int inverse(int x) {            return inv[x];        }     }     static interface IntCombination {    }     static class Modular {        int m;         public int getMod() {            return m;        }         public Modular(int m) {            this.m = m;        }         public Modular(long m) {            this.m = (int) m;            if (this.m != m) {                throw new IllegalArgumentException();            }        }         public Modular(double m) {            this.m = (int) m;            if (this.m != m) {                throw new IllegalArgumentException();            }        }         public int valueOf(int x) {            x %= m;            if (x < 0) {                x += m;            }            return x;        }         public int valueOf(long x) {            x %= m;            if (x < 0) {                x += m;            }            return (int) x;        }         public int mul(int x, int y) {            return valueOf((long) x * y);        }         public int plus(int x, int y) {            return valueOf(x + y);        }         public int subtract(int x, int y) {            return valueOf(x - y);        }         public String toString() {            return "mod " + m;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class Combination implements IntCombination {        final Factorial factorial;        final Modular modular;         public Combination(Factorial factorial) {            this.factorial = factorial;            this.modular = factorial.getModular();        }         public Combination(int limit, Modular modular) {            this(new Factorial(limit, modular));        }         public int combination(int m, int n) {            if (n > m) {                return 0;            }            return modular.mul(modular.mul(factorial.fact(m), factorial.invFact(n)), factorial.invFact(m - n));        }     }     static class Factorial {        int[] fact;        int[] inv;        Modular modular;         public Modular getModular() {            return modular;        }         public Factorial(int[] fact, int[] inv, InverseNumber in, int limit, Modular modular) {            this.modular = modular;            this.fact = fact;            this.inv = inv;            fact[0] = inv[0] = 1;            for (int i = 1; i <= limit; i++) {                fact[i] = modular.mul(fact[i - 1], i);                inv[i] = modular.mul(inv[i - 1], in.inverse(i));            }        }         public Factorial(int limit, Modular modular) {            this(new int[limit + 1], new int[limit + 1], new ModPrimeInverseNumber(limit, modular), limit, modular);        }         public int fact(int n) {            return fact[n];        }         public int invFact(int n) {            return inv[n];        }     }     static interface InverseNumber {        int inverse(int x);     }} 
