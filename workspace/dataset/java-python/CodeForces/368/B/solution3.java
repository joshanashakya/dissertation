import java.util.*;import java.io.*;import java.lang.*;import java.math.*; public class cp{    static BufferedReader br;    static StringTokenizer st;     public static void main(String[] args)throws IOException{         br = new BufferedReader(new InputStreamReader(System.in));        // List<Integer> answer = new ArrayList<Integer>();         // for(int t=Integer.parseInt(br.readLine()); t>0; t--){             st = readLine();            int n = tokenInt();            int m = tokenInt();             st = readLine();            int[] array = readIntArray(n);             int[] l = new int[m];            for (int  i=0; i<m; i++ ) {                st = readLine();                l[i] = tokenInt();            }             // answer.add(new Solver().solve(n, m, array, l));            System.out.println(new Solver().solve(n, m, array, l));        // }         // ListIterator<Integer> it = answer.listIterator();        // while (it.hasNext())            // System.out.println(it.next());     }     static StringTokenizer readLine() throws IOException { return new StringTokenizer(br.readLine()); }    static int tokenInt() { return Integer.parseInt(st.nextToken()); }    static long tokenLong(){ return Long.parseLong(st.nextToken()); }    static double tokenDouble(){ return Double.parseDouble(st.nextToken()); }    static char[] tokenChar(){ return st.nextToken().toCharArray(); }    static int[] readIntArray(int n) {        int[] a=new int[n];        for (int i=0; i<n; i++) a[i]=tokenInt();        return a;    } }  class Solver{    public String solve(int n, int k, int[] array, int[] l) throws IOException{         Set<Integer> distinctValues = new HashSet<Integer>();        int[] ans = new int[n];        for (int i=n-1; i>=0 ; i--) {            distinctValues.add(array[i]);            ans[i] = distinctValues.size();        }         StringBuffer strBuf = new StringBuffer();        for(int i=0; i<l.length;i++){            strBuf.append(ans[l[i]-1]).append("\n");        }         return String.valueOf(strBuf);    }} /* */
