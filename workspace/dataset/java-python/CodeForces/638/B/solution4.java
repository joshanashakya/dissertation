import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Scanner;import java.util.Set;import java.util.Stack; public class TypoCoderDiv1 {    	public static void main(String[] args) {				Scanner in = new Scanner(System.in);				int n = Integer.parseInt(in.nextLine());			List<Set<Integer>> adj = new ArrayList<>();				for(int i=0; i<30; i++) {			adj.add(new HashSet<>());		}				boolean[] cont = new boolean[30];				for(int i=0; i<n; i++) {			char[] c = in.nextLine().toCharArray();						cont[c[0] - 'a'] = true;						for(int j=0; j<c.length-1; j++) {				adj.get(c[j] - 'a').add(c[j+1] - 'a');				cont[c[j] - 'a'] = true;				cont[c[j+1] - 'a'] = true;			}					}						Stack<Integer> stack = new Stack<>();		boolean[] vis = new boolean[30];				for(int i=0; i<30; i++) {			if(!vis[i] && cont[i]) {				topSort(i, stack, vis, adj, cont);			}		}				StringBuilder ans = new StringBuilder();				vis = new boolean[30];		 		while(!stack.isEmpty()) { 			 			int ind = stack.pop(); 			 			if(!vis[ind]) 				dfs(ind, ans, adj, vis); 		}						System.out.println(ans);			}  	private static void dfs(int i, StringBuilder ans, List<Set<Integer>> adj, boolean[] vis) {		vis[i]= true;		ans.append((char) (i + 'a')); 		for(int j : adj.get(i)) {						if(!vis[j])			dfs(j, ans, adj, vis);		}	}   	private static void topSort(int i, Stack<Integer> stack, boolean[] vis, List<Set<Integer>> adj, boolean[]cont) {		vis[i] = true;				for(int j : adj.get(i)) {			if(!vis[j] && cont[j]) {				topSort(j, stack, vis, adj, cont);			}		}				stack.push(i);			}       }
