import java.io.BufferedReader;// import java.io.FileInputStream;// import java.io.FileOutputStream;import java.io.InputStream;import java.io.InputStreamReader;import java.io.IOException;import java.io.PrintWriter;import java.util.*; import static java.util.Arrays.copyOf;import static java.util.Arrays.fill;import static java.util.Arrays.sort;import static java.util.Collections.reverseOrder;import static java.util.Collections.sort; public class Main {    private FastScanner in;    private PrintWriter out;     StringBuilder sb = new StringBuilder();    int[] next;     private void solve() throws IOException {        next = new int[26];        for (int i = 0; i < 26; i++)            next[i] = -1;         char[] s;        boolean[] begin = new boolean[26];        fill(begin, true);        boolean[] used = new boolean[26];        for (int n = in.nextInt(); n-- > 0; ) {            s = in.next().toCharArray();            used[s[0] - 'a'] = true;            for (int i = 0; i + 1 < s.length; i++) {                next[s[i] - 'a'] = s[i + 1] - 'a';                begin[s[i + 1] - 'a'] = false;                used[s[i + 1] - 'a'] = true;            }        }         for (int i = 0; i < 26; i++)            if (begin[i] && used[i])                dfs(i);         out.print(sb.toString());    }     void dfs(int v) {        if (v == -1)            return;        sb.append((char) ('a' + v));        dfs(next[v]);    }     class FastScanner {        StringTokenizer st;        BufferedReader br;         FastScanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         boolean hasNext() throws IOException {            return br.ready() || (st != null && st.hasMoreTokens());        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }         String nextLine() throws IOException {            return br.readLine();        }         boolean hasNextLine() throws IOException {            return br.ready();        }    }     private void run() throws IOException {        in = new FastScanner(System.in); // new FastScanner(new FileInputStream(".in"));        out = new PrintWriter(System.out); // new PrintWriter(new FileOutputStream(".out"));         solve();         out.flush();        out.close();    }     public static void main(String[] args) throws IOException {        new Main().run();    }}
