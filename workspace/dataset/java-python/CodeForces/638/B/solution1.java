import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.TreeSet;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        b638 solver = new b638();        solver.solve(1, in, out);        out.close();    }     static class b638 {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            String[] sub = new String[n];            for (int i = 0; i < n; i++) {                sub[i] = in.next();            }            char[] after = new char[256];            char[] before = new char[256];            boolean[] used = new boolean[256];            for (int i = 0; i < n; i++) {                for (int j = 0; j < sub[i].length(); j++) {                    used[sub[i].charAt(j)] = true;                }                for (int j = 1; j < sub[i].length(); j++) {                    after[sub[i].charAt(j - 1)] = sub[i].charAt(j);                    before[sub[i].charAt(j)] = sub[i].charAt(j - 1);                }            }            TreeSet<Character> startChar = new TreeSet<>();            for (char lastChar = 'a'; lastChar <= 'z'; lastChar++) {                char cur = lastChar;                while (before[cur] != 0) {                    cur = before[cur];                }                if (used[cur]) startChar.add(cur);            }            for (char firstChar : startChar) {                char cur = firstChar;                while (cur != 0) {                    out.print(cur);                    cur = after[cur];                }            }        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
