import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.TreeSet;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        b638 solver = new b638();        solver.solve(1, in, out);        out.close();    }     static class b638 {        boolean[] used;        ArrayList<String> component = new ArrayList<>();        ArrayList<ArrayList<Integer>> neig;        String[] sub;         public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            sub = new String[n];            for (int i = 0; i < n; i++) {                sub[i] = in.next();            }            neig = new ArrayList<>();            for (int i = 0; i < n; i++) {                neig.add(new ArrayList<>());            }            for (int i = 0; i < n; i++) {                for (int j = i + 1; j < n; j++) {                    if (canCon(sub[i], sub[j])) {                        neig.get(i).add(j);                        neig.get(j).add(i);                    }                }            }            used = new boolean[n];            ArrayList<String> fullSubs = new ArrayList<>();            for (int i = 0; i < n; i++) {                component.clear();                dfs(i);                if (!component.isEmpty()) {                    fullSubs.add(glue(component));                }            }            for (String s : fullSubs) out.print(s);        }         boolean canCon(String s1, String s2) {            boolean[] used = new boolean[26];            for (int i = 0; i < s1.length(); i++) {                used[s1.charAt(i) - 'a'] = true;            }            for (int i = 0; i < s2.length(); i++) {                if (used[s2.charAt(i) - 'a']) return true;            }            return false;        }         void dfs(int node) {            if (!used[node]) {                used[node] = true;                component.add(sub[node]);                for (int next : neig.get(node)) {                    dfs(next);                }            }        }         String glue(ArrayList<String> subs) {            TreeSet<String> subSet = new TreeSet<>(subs);            String base = subs.get(0);            while (!subSet.isEmpty()) {                for (String next : subSet) {                    if (canCon(base, next)) {                        base = concat(base, next);                        subSet.remove(next);                        break;                    }                }            }            return base;        }         String concat(String s1, String s2) {            char[] after = new char['z' + 1];            for (int i = 1; i < s1.length(); i++) {                after[s1.charAt(i - 1)] = s1.charAt(i);            }            for (int i = 1; i < s2.length(); i++) {                after[s2.charAt(i - 1)] = s2.charAt(i);            }            StringBuilder res1 = new StringBuilder();            char cur = s1.charAt(0);            while (cur != 0) {                res1.append(cur);                cur = after[cur];            }            StringBuilder res2 = new StringBuilder();            cur = s2.charAt(0);            while (cur != 0) {                res2.append(cur);                cur = after[cur];            }            if (res1.length() > res2.length())                return res1.toString();            return res2.toString();        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
