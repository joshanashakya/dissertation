import java.io.*;import java.util.*; public class Template implements Runnable {     BufferedReader in;    PrintWriter out;    StringTokenizer tok = new StringTokenizer("");     void init() throws FileNotFoundException {        try {            in = new BufferedReader(new FileReader("input.txt"));            out = new PrintWriter("output.txt");        } catch (Exception e) {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(System.out);        }    }     String readString() throws IOException {        while (!tok.hasMoreTokens()) {            try {                tok = new StringTokenizer(in.readLine());            } catch (Exception e) {                return null;            }        }        return tok.nextToken();    }     int readInt() throws IOException {        return Integer.parseInt(readString());    }     int[] readIntArray(int size) throws IOException {        int[] res = new int[size];        for (int i = 0; i < size; i++) {            res[i] = readInt();        }        return res;    }     long readLong() throws IOException {        return Long.parseLong(readString());    }     double readDouble() throws IOException {        return Double.parseDouble(readString());    }     <T> List<T>[] createGraphList(int size) {        List<T>[] list = new List[size];        for (int i = 0; i < size; i++) {            list[i] = new ArrayList<>();        }        return list;    }     public static void main(String[] args) {        new Template().run();        // new Thread(null, new Template(), "", 1l * 200 * 1024 * 1024).start();    }     long timeBegin, timeEnd;     void time() {        timeEnd = System.currentTimeMillis();        System.err.println("Time = " + (timeEnd - timeBegin));    }     long memoryTotal, memoryFree;     void memory() {        memoryFree = Runtime.getRuntime().freeMemory();        System.err.println("Memory = " + ((memoryTotal - memoryFree) >> 10)                + " KB");    }     public void run() {        try {            timeBegin = System.currentTimeMillis();            memoryTotal = Runtime.getRuntime().freeMemory();            init();            solve();            out.close();            if (System.getProperty("ONLINE_JUDGE") == null) {                time();                memory();            }        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     boolean mergeable(String a, String b) {        for (char x : a.toCharArray()) {            for (char y : b.toCharArray()) {                if (x == y) return true;            }        }        return false;    }     String merge(String a, String b) {        char divider = '$';        for (char x : a.toCharArray()) {            for (char y : b.toCharArray()) {                if (x == y) {                    divider = x;                }            }        }        String left1 = a.substring(0, a.indexOf(divider));        String right1 = a.substring(a.indexOf(divider) + 1);         String left2 = b.substring(0, b.indexOf(divider));        String right2 = b.substring(b.indexOf(divider) + 1);         String left = left1.length() > left2.length() ? left1 : left2;        String right = right1.length() > right2.length() ? right1 : right2;        return left + divider + right;    }     void solve() throws IOException {        int n = readInt();        List<String> list = new ArrayList<>();        for (int i = 0; i < n; i++) {            list.add(readString());        }        String s = "";        String answer = "";        while (true) {            if (s.equals("")) {                if (list.size() == 0) break;                s = list.get(0);                list.remove(0);            }            boolean merged = false;            for (int i = 0; i < list.size(); i++) {                if (mergeable(s, list.get(i))) {                    s = merge(s, list.get(i));                    list.remove(i);                    merged = true;                    break;                }            }            if (merged) continue;            answer += s;            s = "";        }        out.println(answer);    } }
