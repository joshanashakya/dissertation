import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*; import javafx.util.Pair; public class Main{        public static void main(String[] args)    {         FastScanner input = new FastScanner();                 int store[] = new int[100001];        long i =1;       long  value =0;       while(value<100001)       {            value =(long) (( Math.pow(2, i)-1)*(Math.pow(2, i-1)));          if(value<100001) store[(int)value] = 1;                   i++;       }       TreeSet<Integer> set = new TreeSet<>(Collections.reverseOrder());                int n = input.nextInt();        for (int j = 1; j <=Math.sqrt(n); j++) {            if(n%j==0)            {                set.add(j);                if(n/j!=j)                {                    set.add(n/j);                }            }        }        for (Integer integer : set) {            if(store[integer]==1)            {                System.out.println(integer);                return;            }        }                   }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
