import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Scanner; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main{    public static void main(String[] args)    {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB    {        public void solve(int testNumber, Scanner in, PrintWriter out)        {            int T = 1;            while (T-- > 0)            {                solveOne(in, out);            }        }         private void solveOne(Scanner in, PrintWriter out)        {            int rows = in.nextInt(), cols = in.nextInt(), Q = in.nextInt();            int[][] M = CPUtils.readIntMatrix(rows, cols, in);            int[] row_sum = new int[rows];            for (int row = 0; row < rows; row++)            {                int cnt = maxWindow(M[row]);                row_sum[row] = cnt;            }            while (Q-- > 0)            {                int r = in.nextInt() - 1, c = in.nextInt() - 1;                M[r][c] = invert(M[r][c]);                int max = maxWindow(M[r]);                row_sum[r] = max;                int ans = 0;                for (int row = 0; row < rows; row++)                {                    ans = Math.max(ans, row_sum[row]);                }                out.println(ans);            }        }         private int invert(int i)        {            return (i == 0) ? 1 : 0;        }         private int maxWindow(int arr[])        {            int max = 0;            for (int i = 0; i < arr.length; i++)            {                int cnt = 0;                while (i < arr.length && arr[i] == 1)                {                    cnt++;                    i++;                }                max = Math.max(max, cnt);            }            return max;        }     }     static class CPUtils    {        public static int[] readIntArray(int size, Scanner in)        {            int[] array = new int[size];            for (int i = 0; i < size; i++)            {                array[i] = in.nextInt();            }            return array;        }         public static int[][] readIntMatrix(int rows, int columns, Scanner in)        {            int[][] matrix = new int[rows][columns];            for (int i = 0; i < rows; i++)            {                matrix[i] = CPUtils.readIntArray(columns, in);            }            return matrix;        }     }} 
