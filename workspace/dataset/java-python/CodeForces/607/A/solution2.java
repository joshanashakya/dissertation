import java.util.Scanner;public class ChainReaction { 	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);				int n = scanner.nextInt();		int[][] beacons = new int[n][2];		for(int i = 0; i < beacons.length; i++) {			beacons[i][0] = scanner.nextInt();			beacons[i][1] = scanner.nextInt();		}		scanner.close();				sortBeacons(beacons);				int[] savedNum = new int[n];		for(int i = 0; i < n; i++) {			//binary search to find leftmost undestroyed beacon			int leftIdx = binarySearchPrevUndestroyed(beacons, i);			if(leftIdx == -1) {				savedNum[i] = 1;				continue;			}			savedNum[i] = 1+savedNum[leftIdx];		}				int minDestroyed = Integer.MAX_VALUE;		for(int i = 0; i < savedNum.length; i++) {			int destroyed = n-savedNum[i];			if(destroyed < minDestroyed) minDestroyed = destroyed;		}		System.out.println(minDestroyed); 	}		private static int binarySearchPrevUndestroyed(int[][] beacons, int i) {		int l = i-beacons[i][1]-1;		if(l < 0) l = 0;		int r = i-1;		int target = beacons[i][0] - beacons[i][1]-1;		while(true) {			if(l > r) return -1;			int idx = (l+r)/2;			if(beacons[idx+1][0] <= target) {				l = idx+1;				continue;			}			if(beacons[idx][0] > target) {				r = idx-1;				continue;			}			return idx;		}	}		private static void sortBeacons(int[][] beacons) {		quickSortRec(beacons, 0, beacons.length-1);	}		private static void quickSortRec(int[][] beacons, int start, int end){		  if(end <= start) return;		  int splitIndex = partition(beacons, start, end);		  quickSortRec(beacons, start, splitIndex);		  quickSortRec(beacons, splitIndex+1, end);	  }		  private static int partition(int[][] beacons, int start, int end){		  int p = (int)(Math.random()*(end-start)+start);		  int pivot = beacons[p][0];		  while(true) {			  while(beacons[start][0] < pivot) start++;			  while(beacons[end][0] > pivot) end--;			  if(end <= start) break;			  int[] temp = beacons[start];			  beacons[start] = beacons[end];			  beacons[end] = temp;			  start++;			  end--;		  }	    return end;	  } }
