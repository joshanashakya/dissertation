//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.Comparator; public class A { 	static class Pair{		int pos,power;		Pair(){}		Pair(int po,int pr){			pos=po;			power=pr;		}	}	static class customSort implements Comparator<Pair>{		public int compare(Pair a,Pair b) {			return a.pos-b.pos;		}	}    public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt();			int dp[]=new int[1000005];			Arrays.fill(dp, 2);			ArrayList<Pair> li=new ArrayList<A.Pair>();			for(int i=0;i<n;i++) {				li.add(new Pair(sc.nextInt(),sc.nextInt()));			}			Collections.sort(li, new customSort());						for(int i=n-1;i>=0;i--) {				int pos =li.get(i).pos;				int pow =li.get(i).power;								int next =lowerBound(li,pos-pow-1,n);//				System.out.println(pos+" "+next);				if(next>=0) {					dp[next] = Math.max(dp[next], dp[pos]+1);				}			}									int maxm =0;			for(int i=0;i<=1000000;i++)				maxm=Math.max(maxm, dp[i]);						ans.append(n+1-maxm+"\n");				}			    System.out.print(ans);	}     static int lowerBound(ArrayList<Pair> li,int pos,int n) {    	int low =0;    	int high=n-1;    	int ans=-1;    	while(low<=high) {    		int mid =(low+high)/2;    		if(li.get(mid).pos<=pos) {    			ans=li.get(mid).pos;    			low=mid+1;    		}    		else {    			high=mid-1;    		}    	}    	    	return ans;    }        static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
