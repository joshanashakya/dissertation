import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Objects;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		static final int maxn = 505;			    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt();    		int[] c = new int[maxn];    		for(int i=0;i<n;i++) c[i] = fs.nextInt();    		    		int[][] dp = new int[maxn][maxn];    		    		for(int len=1;len<=n;len++) {    			for(int i=0;i+len-1<n;i++) {    				int end = i+len-1;    				if(len==1) {    					dp[i][end] = 1;    				}    				else {    					dp[i][end] = 1 + dp[i+1][end];    					if(c[i]==c[i+1]) {    						dp[i][end] = Math.min(dp[i][end], 1 + dp[i+2][end]);    					}    					for(int j=i+2;j<=end;j++) {    						if(c[i]==c[j]) {    							dp[i][end] = Math.min(dp[i][end], dp[i+1][j-1] + dp[j+1][end]);    						}    					}    				}    			}    		}    		    		out.println(dp[0][n-1]);    		    		    	}    	    		    		    		    	out.close();    		    }                                                                                                  static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
