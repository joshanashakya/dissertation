#------------------------------warmup----------------------------import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fraction BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now----------------------------------------------------n = int(input())rooms = []for _ in range(n):    rooms.append(list(map(int, input().split()))) m = int(input())wallpapers = []for _ in range(m):    wallpapers.append(list(map(int, input().split())))  def room_cost(room, wallpapers):    min_cost = 10**18    parimeter = 2 * (room[0] + room[1])    if room[2] == 0:        return 0    for wallpaper in wallpapers:        if wallpaper[1] != 0:            stripes_needed = (parimeter + wallpaper[1] - 1) // wallpaper[1]            stripes_from_one_roll = wallpaper[0] // room[2]            if stripes_from_one_roll == 0:                continue            amount_of_rolls = (stripes_needed + stripes_from_one_roll - 1) // stripes_from_one_roll            min_cost = min([min_cost, amount_of_rolls * wallpaper[2]])    return min_cost  print(sum([room_cost(room, wallpapers) for room in rooms]))
