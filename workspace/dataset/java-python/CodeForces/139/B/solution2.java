import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.IOException;import java.util.InputMismatchException;import java.io.PrintWriter;import java.io.OutputStream;/** * Built using CHelper plug-in * Actual solution is at the top * @author Alex */public class Main{	public static void main(String[] args){		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		OutputWriter out = new OutputWriter(outputStream);		TaskB solver = new TaskB();		solver.solve(1, in, out);		out.close();	}	static class TaskB{		public void solve(int testNumber, InputReader in, OutputWriter out){			int n = in.ri();			IntPair[] walls = new IntPair[n]; //perimter, height			for(int i = 0; i < n; i++) walls[i] = new IntPair(2 * in.ri() + 2 * in.ri(), in.ri());			int m = in.ri();			Paper[] papers = new Paper[m];			for(int i = 0; i < m; i++) {				papers[i] = new Paper();				papers[i].length = in.ri();				papers[i].width = in.ri();				papers[i].price = in.ri();			}			int res = 0;			for(IntPair wall : walls) {				int cost = Integer.MAX_VALUE;				for(Paper paper : papers) {					int strips = paper.length / wall.second;					if(strips == 0) continue;					int totalwidth = strips * paper.width;					int pieces = (wall.first + totalwidth - 1) / totalwidth;					cost = Math.min(cost, pieces * paper.price);				}				res += cost;			}			out.printLine(res);		}		class Paper{			int length;			int width;			int price;		}	}	static class InputReader{		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars;		private SpaceCharFilter filter;		public InputReader(InputStream stream){			this.stream = stream;		}		public int read(){			if(numChars == -1)				throw new InputMismatchException();			if(curChar >= numChars){				curChar = 0;				try{					numChars = stream.read(buf);				} catch(IOException e){					throw new InputMismatchException();				}				if(numChars <= 0)					return -1;			}			return buf[curChar++];		}		public int ri(){			return readInt();		}		public int readInt(){			int c = read();			while(isSpaceChar(c))				c = read();			int sgn = 1;			if(c == '-'){				sgn = -1;				c = read();			}			int res = 0;			do{				if(c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while(!isSpaceChar(c));			return res * sgn;		}		public boolean isSpaceChar(int c){			if(filter != null)				return filter.isSpaceChar(c);			return isWhitespace(c);		}		public static boolean isWhitespace(int c){			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}		public interface SpaceCharFilter{			public boolean isSpaceChar(int ch);		}	}	static class OutputWriter{		private final PrintWriter writer;		public OutputWriter(OutputStream outputStream){			writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));		}		public OutputWriter(Writer writer){			this.writer = new PrintWriter(writer);		}		public void close(){			writer.close();		}		public void printLine(int i){			writer.println(i);		}	}	static class IntPair implements Comparable<IntPair>{		public int first;		public int second;		public IntPair(int first, int second){			this.first = first;			this.second = second;		}		public String toString(){			return "(" + first + "," + second + ")";		}		public boolean equals(Object o){			if(this == o) return true;			if(o == null || getClass() != o.getClass()) return false;			IntPair intPair = (IntPair) o;			return first == intPair.first && second == intPair.second;		}		public int hashCode(){			int result = first;			result = 31 * result + second;			return result;		}		public int compareTo(IntPair o){			if(first < o.first)				return -1;			if(first > o.first)				return 1;			if(second < o.second)				return -1;			if(second > o.second)				return 1;			return 0;		}	}}Â 
