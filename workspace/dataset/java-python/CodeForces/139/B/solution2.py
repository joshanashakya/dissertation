#------------------------------warmup----------------------------import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fraction BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now----------------------------------------------------n=int(input())a=list()for i in range (n):    l,w,h=map(int,input().split())    a.append((l,w,h))m=int(input())b=list()for j in range (m):    l,w,p=map(int,input().split())    b.append((l,w,p))cost=0for i in range (n):    c=1000000000    for j in range (m):        l=b[j][0]        w=b[j][1]        p=b[j][2]        x=a[i][0]        y=a[i][1]        z=a[i][2]        s=l//z        if s==0:            continue        s*=w        #print(s)        pm=2*(x+y)        r=math.ceil(pm/s)        #print(r)        c=min(r*p,c)    cost+=cprint(cost)
