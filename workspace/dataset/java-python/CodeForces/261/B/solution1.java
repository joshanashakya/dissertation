import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		static final int max = 55;	    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt();    		    		int sum = 0;    		int[] a = new int[n];    		for(int i=0;i<n;i++) {    			a[i] = fs.nextInt();    			sum += a[i];    		}    		    		int p = fs.nextInt();    		if(sum<=p) {    			out.println(n);    			out.flush();    			return;    		}    		    		double[] fact = new double[max];    		fact[0] = 1;    		for(int i=1;i<max;i++) fact[i] = fact[i-1]*i;    		    		//dp[i][k] -- no. of ways in which i persons can make length sum k    		long[][] dp = new long[max][max];    		    		double ans = 0;    		    		//iterating over the first person which did not enter the restaurent     		for(int b=0;b<n;b++) {    			for(int i=0;i<max;i++) Arrays.fill(dp[i], 0);    			dp[0][0] = 1;    			    			for(int i=0;i<n;i++) {    				if(i==b) continue;    				for(int j=n-1;j>=0;j--) {    					for(int k=0;k+a[i]<=p;k++) {    						dp[j+1][k+a[i]] += dp[j][k];    					}    				}    			}    			    			double num = 0;    			    			//iterating over the number of persons that shoud enter the restaurent berfore the bth person    			for(int i=0;i<n;i++) {    				//iterating over the sum of lengths    				for(int k=0;k<=p;k++) {    					if(k+a[b]>p && dp[i][k]>0) {    						num += i*dp[i][k]*fact[i]*fact[n-i-1];    					}    				}    			}    			    			ans += num/fact[n];    			    			    		}    		    		out.println(ans);    		    		    		    	}    	    		    		    		    	out.close();    		    }                       static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
