//package main; import java.io.*;import java.util.*;import java.awt.Point;import java.math.BigInteger; public final class Main {    BufferedReader br;    StringTokenizer stk;     public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        long mod = 1000_000_000 + 7;    void run() throws Exception {        int[] have = new int[] {ni(), ni(), ni()};        int[] need = new int[] {ni(), ni(), ni()};        while(modified(have, need)) {}        boolean ok = have[0] >= need[0] && have[1] >= need[1] && have[2] >= need[2];        System.out.println(ok ? "Yes" : "No");    }        boolean modified(int[] H, int[] N) {        for(int i=0; i<3; i++) {            if(H[i] - 2 >= N[i]) {                for(int j=0; j<3; j++) {                    if(i == j) continue;                    if(H[j] < N[j]) {                        H[j]++;                        H[i] -= 2;                        return true;                    }                }            }        }        return false;    }        //Reader & Writer    String nextToken() throws Exception {        if (stk == null || !stk.hasMoreTokens()) {            stk = new StringTokenizer(br.readLine(), " ");        }        return stk.nextToken();    }     String nt() throws Exception {        return nextToken();    }     int ni() throws Exception {        return Integer.parseInt(nextToken());    }     long nl() throws Exception {        return Long.parseLong(nextToken());    }        double nd() throws Exception {        return Double.parseDouble(nextToken());    }}
