import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.HashMap;import java.awt.Point;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int x = in.nextInt();            int y = in.nextInt();            int x0 = in.nextInt();            int y0 = in.nextInt();            String path = in.next();            HashMap<Point, Integer> len = new HashMap<>();            int maxPath = 0;            int curX = x0;            int curY = y0;            len.put(new Point(curX, curY), 0);            for (int i = 0; i < path.length(); i++) {                if (path.charAt(i) == 'U' && curX > 1) {                    curX--;                }                if (path.charAt(i) == 'D' && curX < x) {                    curX++;                }                if (path.charAt(i) == 'L' && curY > 1) {                    curY--;                }                if (path.charAt(i) == 'R' && curY < y) {                    curY++;                }                if (!len.containsKey(new Point(curX, curY))) {                    len.put(new Point(curX, curY), i + 1);                }            }            int[] ans = new int[path.length() + 1];            int full = x * y;            for (int l : len.values()) {                ans[l] = 1;                full--;            }            ans[path.length()] += full;            for (int cur : ans) out.print(cur + " ");        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
