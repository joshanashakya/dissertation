import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author ankur */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        String str;        int n;        int m;        int[][] ar;         public void solve(int testNumber, InputReader in, PrintWriter out) {            int x, y;            n = in.nextInt();            m = in.nextInt();            x = in.nextInt() - 1;            y = in.nextInt() - 1;            ar = new int[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    ar[i][j] = Integer.MAX_VALUE;                }            }            str = in.readString();            //ar[x][y]=0;            dfs(x, y, 0);            int ans[] = new int[str.length() + 1];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    ans[Math.min(ar[i][j], str.length())]++;                }            }            for (int i = 0; i < ans.length; i++) {                out.print(ans[i] + " ");            }          }         void dfs(int x, int y, int pos) {              ar[x][y] = Math.min(ar[x][y], pos);            if (pos >= str.length())                return;            if (str.charAt(pos) == 'U') {                if (x - 1 >= 0)                    dfs(x - 1, y, pos + 1);                else                    dfs(x, y, pos + 1);            }             if (str.charAt(pos) == 'D') {                if (x + 1 < n)                    dfs(x + 1, y, pos + 1);                else                    dfs(x, y, pos + 1);            }            if (str.charAt(pos) == 'L') {                if (y - 1 >= 0)                    dfs(x, y - 1, pos + 1);                else                    dfs(x, y, pos + 1);            }            if (str.charAt(pos) == 'R') {                if (y + 1 < m)                    dfs(x, y + 1, pos + 1);                else                    dfs(x, y, pos + 1);            }         }     }     static class InputReader {        private final InputStream stream;        private final byte[] buf = new byte[8192];        private int curChar;        private int snumChars;         public InputReader(InputStream st) {            this.stream = st;        }         public int read() {            //*-*------clare------//remeber while comparing 2 non primitive data type not used ==//remember Arrays.sort for primitive data has worst time case complexity of 0(n^2) bcoz it uses quick sort              if (snumChars == -1)                throw new InputMismatchException();            if (curChar >= snumChars) {                curChar = 0;                try {                    snumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (snumChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public String readString() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }         public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }} 
