import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigDecimal;import java.math.BigInteger;import java.util.Arrays;import java.util.StringTokenizer; public class Main {	public static void main(String[] args)// throws FileNotFoundException 	{//		System.setIn(new FileInputStream("A-small-practice.in"));//		System.setOut(new PrintStream(new FileOutputStream("out.txt")));		InputReader in = new InputReader();		PrintWriter out = new PrintWriter(System.out);		while(in.hasNext())		{			int n=in.nextInt();			int m=in.nextInt();			long[] x=new long[m+1];			long[] y=new long[m+1];			for(int i=0;i<m;i++)			{				x[i]=in.nextInt();				y[i]=in.nextInt();			}			long[] num=new long[n+1];			Arrays.fill(num, 1);			for(int i=0;i<m;i++)				for(int j=i+1;j<m;j++)					if(y[i]!=y[j] && ((x[j]-x[i])*1L*(y[i]-0))%(y[j]-y[i])==0)					{						long pos=x[i]-((x[j]-x[i])*1L*(y[i]-0))/(y[j]-y[i]);						int nu=0;						if(pos>=1 && pos<=n)						{							int p=(int)pos;							for(int k=0;k<m;k++)								if((x[i]-x[k])*1L*(y[j]-y[k])==(x[j]-x[k])*1L*(y[i]-y[k]))									nu++;							num[p]=Math.max(num[p], nu);						}					}			long ans=0;			for(int i=1;i<=n;i++)				ans+=num[i];			out.println(ans);		}		out.close();	}}/*3 31 31 22 3 * */class InputReader {	BufferedReader buf;	StringTokenizer tok;	InputReader() 	{		buf = new BufferedReader(new InputStreamReader(System.in));	} 	boolean hasNext() 	{		while (tok == null || !tok.hasMoreElements()) 		{			try 			{				tok = new StringTokenizer(buf.readLine());			} 			catch (Exception e) 			{				return false;			}		}		return true;	} 	String next() 	{		if (hasNext())			return tok.nextToken();		return null;	} 	int nextInt() 	{		return Integer.parseInt(next());	} 	long nextLong() 	{		return Long.parseLong(next());	} 	double nextDouble() 	{		return Double.parseDouble(next());	} 	BigInteger nextBigInteger() 	{		return new BigInteger(next());	} 	BigDecimal nextBigDecimal() 	{		return new BigDecimal(next());	}} 						 							   	     	 	  		
