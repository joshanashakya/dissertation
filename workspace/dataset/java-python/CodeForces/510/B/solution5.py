import syssys.setrecursionlimit(3000) def search_cycle(x, y, dex, dey, cor, env, path, check):    if x >= len(env) or y >= len(env[0]):        return False    if x < 0 or y < 0:        return False     currentCor = env[x][y]     if currentCor != cor:        return False    if (x, y) in path:        return True    path.append((x, y))    check[x][y] = True    aux = False    for i in range(4):        if aux:            return True        prox_x = x + list_x[i]        prox_y = y + list_y[i]        if prox_x == dex and prox_y == dey:            continue        aux = search_cycle(prox_x, prox_y, x, y, cor, env, path, check)    return False list_x = [1,-1,0,0]list_y = [0,0,1,-1] n,m = map(int, input().split()) result = "No"env = []check = [] for i in range(n):    row = input()    check.append([False for i in range(m)])    env.append(row) hasCycle = Falsefor i in range(n):    for j in range(m):        if hasCycle:           break        if check[i][j]:            continue        cor = env[i][j]        hasCycle = search_cycle(i, j,-1,-1, cor, env, [], check)    if hasCycle:       result = "Yes"      break print(result)		 			 		  					 	  	 			  		
