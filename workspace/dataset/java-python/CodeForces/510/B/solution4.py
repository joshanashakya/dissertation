firstLine = input().split() rows = int(firstLine[0])columns = int(firstLine[1]) matrix = [] for i in range(rows):  row = list(input())  formatedRow = []  for j in row:    formatedRow.append([j, False])  matrix.append(formatedRow)     def getNextPosition(x, y, matrix, direction):  if(direction == 'up'):    if(x == 0):      return None    else:      return [x - 1, y]  if(direction == 'right'):    if(y == len(matrix[0]) - 1):      return None    else:      return [x, y + 1]  if(direction == 'down'):    if(x == len(matrix) - 1):      return None    else:      return [x + 1, y]  if(direction == 'left'):    if(y == 0):      return None    else:      return [x, y - 1] def findCycle(x, y, matrix, lastDirection):  [color, visited] = matrix[x][y]  matrix[x][y][1] = True   directions = ['up', 'right', 'down', 'left']  prohibitedDirections = ['down', 'left', 'up', 'right']   nextDirections = []   for i in range(len(directions)):    direction = directions[i]    prohibitedDirection = prohibitedDirections[i]    if(prohibitedDirection == lastDirection):      nextDirections.append(None)    else:      nextDirections.append(getNextPosition(x, y, matrix, direction))         deadEnd = True   for i in range(len(directions)):    nextDirection = nextDirections[i]    if(nextDirection != None):      [nextX, nextY] = nextDirection      [nextColor, nextColorVisited] = matrix[nextX][nextY]      if(nextColor == color):        deadEnd = False   if deadEnd:      return False   for i in range(len(directions)):    nextDirection = nextDirections[i]    if(nextDirection == None):      continue     [nextX, nextY] = nextDirection    [nextColor, nextColorVisited] = matrix[nextX][nextY]    if(nextColor == color):      if(nextColorVisited):        return True      else:        nextStep = findCycle(nextX, nextY, matrix, directions[i])        if(nextStep or i == len(directions) -1):          return nextStep           found = Falsefor i in range(len(matrix)):  foundInLoop = False  for j in range(len(matrix[0])):    [color, visited] = matrix[i][j]    if visited:      continue    result = findCycle(i, j, matrix, None)    if(result):      foundInLoop = True      break  if(foundInLoop):    found = True    break if(found):  print('Yes')else:  print('No')       					 	 		   	  	  	    	 	 	
