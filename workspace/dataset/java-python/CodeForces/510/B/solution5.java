import java.util.Scanner; public class Solution0329 {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String[] nums = sc.nextLine().split(" ");        int n = Integer.parseInt(nums[0]);        int m = Integer.parseInt(nums[1]);        String[][] words = new String[n][m];        for (int i = 0; i < n; i++) {            String[] splits = sc.nextLine().split("");            words[i] = splits;        }         int size = n*m;        Union2 union = new Union2(size);        for (int i = 0; i < n; i++) {            for (int j = 1; j < m; j++) {                String f = words[i][j - 1];                String s = words[i][j];                if (f.equals(s)) {                    union.UnionMerge(i*m+j-1, i*m+j);                }            }        }        for (int j = 0; j < m; j++) {            for (int i = 1; i < n; i++) {                if (words[i-1][j].equals(words[i][j])) {                    if (union.UnionFind((i-1)*m+j) != union.UnionFind(i*m+j)){                        union.UnionMerge((i-1)*m+j, i*m+j);                    } else {                        System.out.println("Yes");                        return;                    }                }            }        }        System.out.println("No");    }} // 并查集class Union2 {    public int[] parent;    private int[] rank;     public Union2(int n) {        parent = new int[n];        rank = new int[n];        for (int i = 0; i < n; i++) {            parent[i] = i;            rank[i] = 1;        }    }     public int UnionFind(int x) {        if (parent[x] != x) {            parent[x] = UnionFind(parent[x]);        }        return parent[x];    }     public boolean UnionMerge(int x, int y) {        int rootx = UnionFind(x);        int rooty = UnionFind(y);         if (rootx != rooty) {            if (rank[rootx] > rank[rooty]) {                parent[rooty] = rootx;            } else if (rank[rootx] < rank[rooty]){                parent[rootx] = rooty;            } else {                parent[rootx] = rooty;                rank[rooty]++;            }            return false;        }         return true;    }}  		    			 		  	  	   	 		  			
