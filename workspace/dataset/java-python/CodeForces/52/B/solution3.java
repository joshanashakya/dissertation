import java.io.*; import java.math.*;import java.util.*;import java.awt.Point; public class Main {	//static final long MOD = 998244353L;	//static final long INF = 1000000000000000007L;	static final long MOD = 1000000007L;	//static final int INF = 1000000007;		public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter pw = new PrintWriter(System.out);		int N = sc.ni();		int M = sc.ni();		boolean[][] grid = new boolean[N][M]; //true is asterisk		for (int i = 0; i < N; i++) {			String s = sc.next();			for (int j = 0; j < M; j++) {				if (s.charAt(j)=='*')					grid[i][j] = true;			}		}		int[] rowCnt = new int[N];		int[] colCnt = new int[M];		for (int i = 0; i < N; i++) {			for (int j = 0; j < M; j++) {				if (grid[i][j]) {					rowCnt[i] += 1;					colCnt[j] += 1;				}			}		}				long ans = 0;		for (int i = 0; i < N; i++) {			for (int j = 0; j < M; j++) {				if (grid[i][j]) {					ans += (rowCnt[i]-1)*(colCnt[j]-1);				}			}		}		pw.println(ans);		pw.close(); 	}        public static int[][] sort(int[][] array) {    	//Sort an array (immune to quicksort TLE)		Random rgen = new Random();		for (int i = 0; i < array.length; i++) {		    int randomPosition = rgen.nextInt(array.length);		    int[] temp = array[i];		    array[i] = array[randomPosition];		    array[randomPosition] = temp;		}		Arrays.sort(array, new Comparator<int[]>() {			  @Override        	  public int compare(int[] arr1, int[] arr2) {				  return arr2[0]-arr1[0]; //descending order	          }		});		return array;	}        public static long[][] sort(long[][] array) {    	//Sort an array (immune to quicksort TLE)		Random rgen = new Random();		for (int i = 0; i < array.length; i++) {		    int randomPosition = rgen.nextInt(array.length);		    long[] temp = array[i];		    array[i] = array[randomPosition];		    array[randomPosition] = temp;		}		Arrays.sort(array, new Comparator<long[]>() {			  @Override			  //Descending order        	  public int compare(long[] arr1, long[] arr2) {				  if (arr2[0] < arr1[0])					  return -1;				  if (arr2[0] > arr1[0])					  return 1;				  return 0;	          }		});		return array;	}        static class FastScanner {         BufferedReader br;         StringTokenizer st;           public FastScanner() {             br = new BufferedReader(new InputStreamReader(System.in));         }           String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int ni() {             return Integer.parseInt(next());         }           long nl() {             return Long.parseLong(next());         }           double nd() {             return Double.parseDouble(next());         }           String nextLine() {             String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                e.printStackTrace();             }             return str;         }    }}
