import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author sumit */public class Main {      public static void main(String[] args) {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            InputReader in = new InputReader(inputStream);            OutputWriter out = new OutputWriter(outputStream);            BRightTriangles solver = new BRightTriangles();            solver.solve(1, in, out);            out.close();      }       static class BRightTriangles {            public void solve(int testNumber, InputReader in, OutputWriter out) {                  int n = in.nextInt();                  int m = in.nextInt();                  String[] str = new String[n];                  for (int i = 0; i < n; i++)                        str[i] = in.next();                   int hor[][] = new int[n][m];                  int ver[][] = new int[m][n];                  if (str[0].charAt(0) == '*') {                        ver[0][0] = hor[0][0] = 1;                  }                   for (int i = 0; i < n; i++) {                        for (int j = 0; j < m; j++) {                              if (j == 0 && str[i].charAt(j) == '*')                                    hor[i][j] = 1;                              else if (j > 0 && str[i].charAt(j) == '*')                                    hor[i][j] = hor[i][j - 1] + 1;                              else if (j > 0)                                    hor[i][j] = hor[i][j - 1];                         }                  }                   for (int i = 0; i < m; i++) {                        for (int j = 0; j < n; j++) {                              if (j == 0 && str[j].charAt(i) == '*')                                    ver[i][j] = 1;                              else if (j > 0 && str[j].charAt(i) == '*')                                    ver[i][j] = ver[i][j - 1] + 1;                              else if (j > 0)                                    ver[i][j] = ver[i][j - 1];                        }                  }                    long ans = 0;                  for (int i = 0; i < n; i++) {                        for (int j = 0; j < m; j++) {                              if (str[i].charAt(j) == '*') {                                    ans += (hor[i][j] - 1) * (ver[j][i] - 1);                                     ans += (hor[i][j] - 1) * (ver[j][n - 1] - ver[j][i]);                                     ans += (hor[i][m - 1] - hor[i][j]) * (ver[j][i] - 1);                                     ans += (hor[i][m - 1] - hor[i][j]) * (ver[j][n - 1] - ver[j][i]);                               }                         }                  }                  out.printLine(ans);              }       }       static class OutputWriter {            private final PrintWriter writer;             public OutputWriter(OutputStream outputStream) {                  writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));            }             public OutputWriter(Writer writer) {                  this.writer = new PrintWriter(writer);            }             public void close() {                  writer.close();            }             public void printLine(long i) {                  writer.println(i);            }       }       static class InputReader {            private InputStream stream;            private byte[] buf = new byte[1024];            private int curChar;            private int numChars;             public InputReader(InputStream stream) {                  this.stream = stream;            }             public int read() {                  if (numChars == -1)                        throw new InputMismatchException();                   if (curChar >= numChars) {                        curChar = 0;                        try {                              numChars = stream.read(buf);                        } catch (IOException e) {                              throw new InputMismatchException();                        }                        if (numChars <= 0)                              return -1;                  }                   return buf[curChar++];            }             public int nextInt() {                  int c = read();                   while (isSpaceChar(c))                        c = read();                   int sgn = 1;                   if (c == '-') {                        sgn = -1;                        c = read();                  }                   int res = 0;                   do {                        if (c < '0' || c > '9')                              throw new InputMismatchException();                         res *= 10;                        res += c & 15;                         c = read();                  } while (!isSpaceChar(c));                   return res * sgn;            }             public String next() {                  int c = read();                   while (isSpaceChar(c))                        c = read();                   StringBuilder res = new StringBuilder();                   do {                        res.appendCodePoint(c);                         c = read();                  } while (!isSpaceChar(c));                   return res.toString();            }             public boolean isSpaceChar(int c) {                  return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;            }       }} 
