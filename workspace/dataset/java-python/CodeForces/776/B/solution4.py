'''Github: https://github.com/Devansh3712''' import osimport sysimport mathimport itertoolsfrom io import BytesIO, IOBaseimport os.path # <fast I/O>BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)# </fast I/O> # <template>mod = (10**9)+7pi = 3.14159265358979323846264338327950  def i1():  # int(input())    return int(sys.stdin.readline())  def sf():  # input()    return sys.stdin.readline()  def mi():  # map(int(input()))    return map(int, sys.stdin.readline().split())  def arr():  # list(map(int,input().split()))    return list(map(int, sys.stdin.readline().split()))  def pf(ans):  # print(x)    return sys.stdout.write(str(ans)+"\n")  def gcd(a, b):    if a == 0:        return b    elif b == 0:        return a    if a > b:        return gcd(a % b, b)    else:        return gcd(a, b % a)  def lcm(a, b):    return (a*b)//gcd(a, b)  # </template># <testcases>if(os.path.exists('input_file.txt')):    sys.stdin = open("input_file.txt", "r")    sys.stdout = open("output_file.txt", "w")# </testcases>   def SOE(n):    prime = [True for i in range(n + 1)]     p = 2    while (p * p <= n):         if (prime[p] == True):             for i in range(p * 2, n + 1, p):                 prime[i] = False        p += 1    prime[0]= False    prime[1]= False    return primedef solve(p):    l=[]    n=int(input())    if n==1:print(1)    else:        for i in range(2,n+2):            if i==1:l.append(1)            elif p[i]:l.append(1)            else:l.append(2)    if n==2 or n==1:        print(1)    else:print(2)    for i in l:        print(i,end=" ")      # <solution>tc = 1p=SOE(1000002)for t in range(tc):    solve(p)# <solution>  
