import java.io.*;import java.util.*;import java.math.*;    public class Test{                  public static void process()throws IOException    {                     int n = ni();          int m = ni();           HashMap<Integer,ArrayList<Integer>> map = new                                     HashMap<Integer,ArrayList<Integer>>();          HashSet<Integer> set = new HashSet<Integer>();          for(int i=1;i<=n;i++)          {                ArrayList<Integer> list = new ArrayList<Integer>();                for(int j=1;j<=m;j++)                {                     list.add(ni());                }                map.put(list.get(0),list);                set.add(list.get(0));          }          ArrayList<ArrayList<Integer>> cols = new ArrayList<ArrayList<Integer>>();          for(int i = 1;i<=m;i++)          {                ArrayList<Integer> list = new ArrayList<Integer>();                for(int j=1;j<=n;j++)                {                     list.add(ni());                }                cols.add(list);          }          int i=0;          for(i=0;i<cols.size();i++)          {               if(set.containsAll(cols.get(i)))               {                    break;               }          }          for(Integer x : cols.get(i))          {                ArrayList<Integer> list = map.get(x);                for(Integer z : list)                {                     p(z+" ");                }                pn("");           }             }      static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;         // oj = System.getProperty("ONLINE_JUDGE") != null;        // if(!oj) sc=new AnotherReader(100);         // long s = System.currentTimeMillis();        int t=ni();               while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}
