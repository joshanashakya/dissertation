import java.util.*;import java.io.*;public class Solution implements Runnable {    FastScanner sc;    PrintWriter pw;        final class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            try {                br = new BufferedReader(new InputStreamReader(System.in));                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }        }         public long nlo() {            return Long.parseLong(next());        }         public String next() {            if (st.hasMoreTokens()) return st.nextToken();            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(next());        }         public String nli() {            String line = "";            if (st.hasMoreTokens()) line = st.nextToken();            else try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            while (st.hasMoreTokens()) line += " " + st.nextToken();            return line;        }         public double nd() {            return Double.parseDouble(next());        }    }    public static void main(String[] args) throws Exception    {        new Thread(null,new Solution(),"codeforces",1<<28).start();    }    public void run()    {        sc=new FastScanner();        pw=new PrintWriter(System.out);        try{        solve();}        catch(Exception e)        {            pw.println(e);        }        pw.flush();        pw.close();    }    public long gcd(long a,long b)    {        return b==0L?a:gcd(b,a%b);    }    public long ppow(long a,long b,long mod)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            a%=mod;            tmp%=mod;            b>>=1;        }        return (tmp*a)%mod;    }    public long pow(long a,long b)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            b>>=1;        }        return (tmp*a);    }    public  int gcd(int x,int y)    {        return y==0?x:gcd(y,x%y);    }       //////////////////////////////////    /////////////  LOGIC  ///////////    ////////////////////////////////    public class Node{        Node l;        int val;        Node r;        public Node(int a){            val=a;            l=null;            r=null;        }    }    public class Dll{        Node head;        Node current;        HashMap<Integer,Node> map;        Dll(){            map=new HashMap();            head=null;            current=null;        }        void add(int x){            Node n=new Node(x);            map.put(x,n);            if(head==null){                head=n;                current=n;            }            else{                current.r=n;                n.l=current;                current=current.r;            }        }        Node get(int x){            return map.containsKey(x)==true?map.get(x):null;        }        void delete(int x){            if(map.containsKey(x)){                Node n=map.get(x);                if(n.l!=null){                    n.l.r=n.r;                }                if(n.r!=null){                    n.r.l=n.l;                }            }        }    }    public void solve() throws Exception{        int t=sc.ni();        while(t-->0){        int n=sc.ni();        int k=sc.ni();        Dll ll=new Dll();        int[] brr=new int[k];        for(int i=0;i<n;i++)            ll.add(sc.ni());        HashSet<Integer> set=new HashSet();        for(int i=0;i<k;i++)            set.add(brr[i]=sc.ni());        long ans=1,mod=998244353;        for(int i=0;i<k;i++){            Node nd=ll.get(brr[i]);            int x=nd.l!=null?nd.l.val:-1;            int y=nd.r!=null?nd.r.val:-1;            if((!set.contains(x))&&(x!=-1)){                long tmp=1;                if((!set.contains(y))&&(y!=-1))                tmp++;                ans*=tmp;                ans%=mod;                ll.delete(x);                set.remove(brr[i]);            }            else if((!set.contains(y))&&(y!=-1)){                ll.delete(y);                set.remove(brr[i]);            }            else ans=0;        }        pw.println(ans);    }   }}
