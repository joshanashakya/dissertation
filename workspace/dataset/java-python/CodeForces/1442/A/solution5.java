import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main {    final int INF = 0x3f3f3f3f;    BufferedReader br;    PrintWriter out;    StringTokenizer st;    boolean eof;     public Main() {        br = new BufferedReader(new InputStreamReader(System.in));        out = new PrintWriter(System.out);        solve();        out.close();    }     public static void main(String[] args) {        new Main();    }     private void solve() {        int t = nextInt();        while (t-- > 0) {            int len = nextInt();            int[] num = nextIntArr(len);            int[] up = new int[len];            int[] down = new int[len];            up[0] = 0;            down[0] = num[0];            boolean flag = true;            for (int i = 1; i < len; ++i) {                if (num[i] - up[i - 1] >= 0 &&                        num[i] - up[i - 1] <= down[i - 1]) {                    up[i] = up[i - 1];                    down[i] = num[i] - up[i - 1];                } else if (num[i] - down[i - 1] >= up[i - 1]) {                    up[i] = num[i] - down[i - 1];                    down[i] = down[i - 1];                } else {                    flag = false;                    break;                }            }            outln(flag ? "YES" : "NO");        }     }     private boolean isSorted(int[] num) {        for (int i = 1; i < num.length; i++) {            if (num[i] < num[i - 1])                return false;        }        return true;    }      private void outln(Object o) {        out.println(o);    }     private void out(Object o) {        out.print(o);    }     public long[] nextLongArr(int n) {        long[] res = new long[n];        for (int i = 0; i < n; i++) {            res[i] = nextLong();        }        return res;    }     public int[] nextIntArr(int n) {        int[] res = new int[n];        for (int i = 0; i < n; i++) {            res[i] = nextInt();        }        return res;    }     public String nextToken() {        while (st == null || !st.hasMoreTokens()) {            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                eof = true;                return null;            }        }        return st.nextToken();    }     public String nextString() {        try {            return br.readLine();        } catch (IOException e) {            eof = true;            return null;        }    }     public int nextInt() {        return Integer.parseInt(nextToken());    }     public long nextLong() {        return Long.parseLong(nextToken());    }     public double nextDouble() {        return Double.parseDouble(nextToken());    }  }
