import java.io.*;import java.util.*; public class A implements Runnable{    void solve() throws Exception {    	int n = in.iInt();     	int[] arr = new int[n];     	for(int i = 0;i< n;i++){    		arr[i] = in.iInt();    	}    	out.println(sum(arr));    }    int sum(int[] arr){    	int sum = 0;    	for(int i = 0;i < arr.length;i++){    		sum += Math.abs(arr[i]);    	}    	return sum;    }    void show(Comparable[] array){        for(Comparable x:array)            out.print(x + " ");         out.println();    }    int gcd(int a, int b){        if(b == 0) return a;        return gcd(b, a%b);    }    int lcm(int a, int b){        return (a * b) / gcd(a, b);    }    String fileInName = "";    FastReader in;    PrintWriter out;    public void run() {        try {            if (!fileInName.isEmpty()) {                in = new FastReader(new BufferedReader(new FileReader(fileInName+".in")));                out = new PrintWriter(new BufferedWriter(new FileWriter(fileInName+".out")));            } else {                in = new FastReader(new BufferedReader(new InputStreamReader(System.in)));                out = new PrintWriter(System.out);            }           	int t = 1;            //int t = in.iInt();            while(t-- > 0){                solve();            }        } catch(Exception e) {            throwable = e;        } finally {            out.close();        }    }    static Throwable throwable;    public static void main(String [] args) throws Throwable {        Thread thread = new Thread(null, new A(), "", (1 << 26));        thread.start();        thread.join();        thread.run();        if (throwable != null)            throw throwable;    }    class FastReader {        BufferedReader bf;        StringTokenizer tk = null;        public FastReader(BufferedReader bf) {            this.bf = bf;        }        public Integer iInt() throws Exception {            return Integer.parseInt(sString());        }        public Long lLong() throws Exception {            return Long.parseLong(sString());        }        public Double dDouble() throws Exception {            return Double.parseDouble(sString());        }        public String sString () throws Exception {            if (tk==null || !tk.hasMoreTokens()) {                tk = new StringTokenizer(bf.readLine());            }            if (!tk.hasMoreTokens())                 return sString();            else                return tk.nextToken();        }    }}
