import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        long n = in.nextLong();        long M = (long)(1e9 + 7);        long ans = 0L;        long[][] stirling = countP(4000, 4000, M);        long[][] C = binomialCoeff(4000, 4000, M);        for (long i=0;i<n;i++)        {            long sum = 0L;            for (int j=1;j<=i;j++)                sum = (sum + stirling[(int)i][j]) % M;            ans = (ans + (sum * C[(int)n][(int)i]) % M) % M;        }        System.out.println(ans + 1);    }    public static long[][] binomialCoeff(int n, int k, long M)    {        long C[][] = new long[n+1][k+1];        int i, j;        for (i = 0; i <= n; i++)        {            for (j = 0; j <= Math.min(i, k); j++)            {                if (j == 0 || j == i)                    C[i][j] = 1;                else                    C[i][j] = (C[i-1][j-1] + C[i-1][j]) % M;            }        }        return C;    }    public static long[][] countP(int n, int k, long M)    {        long[][] dp = new long[n+1][k+1];         for (int i = 0; i <= n; i++)            dp[i][0] = 0;        for (int i = 0; i <= k; i++)            dp[0][k] = 0;        for (int i = 1; i <= n; i++)            for (int j = 1; j <= k; j++)                if (j == 1 || i == j)                    dp[i][j] = 1;                else                    dp[i][j] = ((1L * j * dp[i - 1][j]) % M + dp[i - 1][j - 1]) % M;         return dp;    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
