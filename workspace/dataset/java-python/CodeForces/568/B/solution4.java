import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        ProblemBSymmetricAndTransitive solver = new ProblemBSymmetricAndTransitive();        solver.solve(1, in, out);        out.close();    }     static class ProblemBSymmetricAndTransitive {        int mod = (int) 1e9 + 7;        int n;        int[][] dp1;        int[][] dp2;         public void solve(int testNumber, InputReader in, PrintWriter out) {            n = in.readInt();            dp1 = new int[n][n];            dp2 = new int[n][n];            for (int[] i : dp1) Arrays.fill(i, -1);            for (int[] i : dp2) Arrays.fill(i, -1);            out.println(go(0, 0, 0));        }         long go(int p, int g, int s) {            if (p == n) return s;            if (s == 0) if (dp1[p][g] != -1) return dp1[p][g];            if (s == 1) if (dp2[p][g] != -1) return dp2[p][g];            long ans;            ans = (go(p + 1, g, 1) + go(p + 1, g + 1, s) + go(p + 1, g, s) * g) % mod;            if (s == 0) dp1[p][g] = (int) ans;            else dp2[p][g] = (int) ans;            return ans;         }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1)                throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int readInt() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null)                return filter.isSpaceChar(c);            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
