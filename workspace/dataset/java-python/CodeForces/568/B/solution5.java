import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Pradyumn */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        static final int MODULO = (int) (1e9 + 7);         public void solve(int testNumber, FastReader in, PrintWriter out) {            int n = in.nextInt();            int[][] c = new int[n + 1][n + 1];            c[0][0] = 1;            for (int i = 1; i <= n; ++i) {                c[i][0] = 1;                for (int j = 1; j <= n; ++j) {                    c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MODULO;                }            }            long[] bell = new long[Math.max(n + 2, 6)];            bell[0] = bell[1] = 1;            bell[2] = 2;            bell[3] = 5;            for (int i = 3; i <= n; ++i) {                for (int j = 0; j <= i; ++j) {                    bell[i + 1] = (bell[i + 1] + bell[j] * c[i][j]) % MODULO;                }            }            long ans = bell[n + 1] - bell[n];            out.println(ans < 0 ? (ans + MODULO) % MODULO : ans);        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int pnumChars;        private FastReader.SpaceCharFilter filter;         public FastReader(InputStream stream) {            this.stream = stream;        }         private int pread() {            if (pnumChars == -1) {                throw new InputMismatchException();            }            if (curChar >= pnumChars) {                curChar = 0;                try {                    pnumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (pnumChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = pread();            while (isSpaceChar(c))                c = pread();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = pread();            }            int res = 0;            do {                if (c == ',') {                    c = pread();                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = pread();            } while (!isSpaceChar(c));            return res * sgn;        }         private boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         private static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }}
