import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigInteger;import java.util.*; public class Main{    public static boolean check(String s )    {        StringBuilder newS = new StringBuilder(s);       String revs= newS.reverse().toString();        if(s.equals(revs))        {            return true;        }        return false;    }     public static void main(String[] args) throws IOException    {        FastScanner input = new FastScanner();        boolean primes[] = new  boolean[2000001];                   boolean Spelindrome[] = new boolean[2000001];       Arrays.fill(primes, true);       primes[0] = false;       primes[1] = false;        for (int i = 2; i <=Math.sqrt(primes.length); i++) {            for (int j = i*2; j <2000001; j+=i) {                if(primes[j])                {                    primes[j] = false;                }            }        }        for (int i = 1; i <Spelindrome.length; i++) {                                        Spelindrome[i]=check(i+"");                    }        int p = input.nextInt();        int q = input.nextInt();        long pri=0,pal=0,ans=0;        for (int i = 0; i < 2000001; i++) {            if(primes[i])                pri++;            if(Spelindrome[i])                pal++;            if(q*pri<=p*pal)                ans = i;        }        if(ans==0)            System.out.println("Palindromic tree is better than splay tree");                else            System.out.println(ans);                                 }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
