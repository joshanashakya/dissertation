def main():    n = int(input())    adj= [[] for i in range(n)]    roots = list()    for i in range(n):        a = int(input())        if(a != -1):            adj[a-1].append(i)        else:            roots.append(i)     def dfs(s,e,depth=0):        print(s)        for child in adj[s]:            if child!=e:                dfs(child,s)        return depth     def dfs_iter(s):        visited = [False for i in range(n)]        depth = [0 for i in range(n)]# depth of node i        stack=list()        stack.append(s)         while(stack):            s =stack.pop()             if  not visited[s]:                visited[s]=True             for children in adj[s]:                if not visited[children]:                    stack.append(children)                    depth[children] = depth[s]+1        return depth    ans=0    for root in roots:        ans = max(ans,max(dfs_iter(root))+1)    print(ans)if __name__ == '__main__':    main()
