import java.io.*;import java.util.*;public class code implements Runnable{// public class Main{// class code{// public class Solution{        private void solve()throws IOException{        int n=nextInt();        int m=nextInt();        boolean weed[][]=new boolean[n+1][m+1];        int count=0;        int suffix[][]=new int[n+1][m+1];        int prefix[][]=new int[n+1][m+1];        for(int i=1;i<=n;i++){            String s=nextLine();            for(int j=1;j<=m;j++){                prefix[i][j]=prefix[i][j-1];                if(s.charAt(j-1)=='W'){                    prefix[i][j]++;                    count++;                    weed[i][j]=true;                }            }        }        for(int i=1;i<=n;i++){            for(int j=m;j>=1;j--){                suffix[i][j]=(j==m?0:suffix[i][j+1])+(weed[i][j]?1:0);            }        }        int i=1,j=1,dir=1,moves=0;        while(count>0){            if(weed[i][j])                count--;            if(dir==1){                if(i!=n && (j==m || suffix[i][j+1]==0 && suffix[i+1][j+1]==0))                {                    dir=0;                    i++;                }                else{                    j++;                }            }            else{                if(i!=n && prefix[i][j-1]==0 && prefix[i+1][j-1]==0)                {                    dir=1;                    i++;                }                else{                    j--;                }            }            if(count!=0)            moves++;        }        out.println(moves);    }          ///////////////////////////////////////////////////////////     final long mod=(long)(1e9+7);    final int inf=(int)(1e9+1);    final int maxn=(int)(1e6);    final long lim=(long)(1e18);     public void run(){        try{            br=new BufferedReader(new InputStreamReader(System.in));            st=null;            out=new PrintWriter(System.out);             solve();             // int t=nextInt();            // for(int i=1;i<=t;i++){            //     out.print("Case #"+i+": ");            //     solve();            // }             br.close();            out.close();        }catch(Exception e){            e.printStackTrace();            System.exit(1);        }    }    public static void main(String args[])throws IOException{        new code().run();    }     int max(int ... a){        int ret=a[0];        for(int i=1;i<a.length;i++)        ret=Math.max(ret,a[i]);        return ret;    }    int min(int ... a){        int ret=a[0];        for(int i=1;i<a.length;i++)        ret=Math.min(ret,a[i]);        return ret;    }    void debug(Object ... a){        System.out.print("> ");        for(int i=0;i<a.length;i++)        System.out.print(a[i]+" ");        System.out.println();    }    void debug(int a[]){debuga(Arrays.stream(a).boxed().toArray());}    void debug(long a[]){debuga(Arrays.stream(a).boxed().toArray());}    void debuga(Object a[]){        System.out.print("> ");        for(int i=0;i<a.length;i++)        System.out.print(a[i]+" ");        System.out.println();    }    BufferedReader br;    StringTokenizer st;    PrintWriter out;    String nextToken()throws IOException{        while(st==null || !st.hasMoreTokens())        st=new StringTokenizer(br.readLine());        return st.nextToken();    }    String nextLine()throws IOException{        return br.readLine();    }    int nextInt()throws IOException{        return Integer.parseInt(nextToken());    }    long nextLong()throws IOException{        return Long.parseLong(nextToken());    }    double nextDouble()throws IOException{        return Double.parseDouble(nextToken());    }}
