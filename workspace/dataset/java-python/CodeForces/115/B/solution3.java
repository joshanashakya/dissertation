import java.math.*;import java.util.*;import java.io.*; public class B{ 	public static void main( String[] args ) throws Exception	{		Scanner in = new Scanner(System.in);		int test = 10;		if(test == 0) in = new Scanner(new FileReader(file));		String[] str = in.nextLine().split(" "); 		int m = Integer.valueOf(str[0]), n = Integer.valueOf(str[1]);		String[] grid = new String[m];		int[] start = new int[m], end = new int[m];		Arrays.fill(start, -1);		for ( int i = 0; i < m; i++ )		{			grid[i] = in.nextLine();			for(int j = 0; j < n; j++)			{				if(grid[i].charAt(j) == 'W')				{					if(start[i] == -1) start[i] = j;					end[i] = j;				}			}		}		while(m > 0 && start[m - 1] < 0) m--;		// decide for each row		int dir = 1, re = 0, pos = 0;		for(int i = 0; i < m; i++)		{			re += row(pos, start, end, i, dir);			if(start[i] >= 0) pos = dir > 0 ? end[i] : start[i];			re += row(pos, start, end, i + 1, dir);			if(i + 1 < m)			{				if(start[i + 1] >= 0)					pos = dir > 0 ? Math.max(pos, end[i + 1]) : 						Math.min(pos, start[i + 1]);				re++;			}			dir = 1 - dir;		}		System.out.println(re);	} 	static int row(int pos, int[] start, int[] end, int row, int dir)	{		int n = start.length;		if(row >= n) return 0;		if(start[row] < 0) return 0;		if(dir > 0) return Math.max(0, end[row] - pos);		return Math.max(0, pos - start[row]);	} 	static String file = "c:/users/rutter/desktop/java/codeforces/in";}
