#------------------------------warmup----------------------------import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fraction BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now----------------------------------------------------m,n=map(int,input().split())arr=[]s=[]e=[]t=[]move=0row=0cur=0for i in range(m):    a=input()    arr.append(a)for i in range(m):    if 'W' in arr[i]:        s.append(arr[i].find('W'))        e.append(arr[i].rfind('W'))        t.append(i%2)        row=ifor i in range(len(t)):    if t[i]==0:        move+=abs(e[i]-min(s[i],cur))+max(0,cur-s[i])        cur=e[i]    else:        move+=abs(max(cur,e[i])-s[i])+max(0,e[i]-cur)        cur=s[i]print(move+row)
