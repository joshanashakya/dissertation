import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solve {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static void run(long s, long e) {		NumberFormat formatter = new DecimalFormat("#0.00000");		System.out.print("Execution time is " + formatter.format((e - s) / 1000d) + " seconds");		}		static class FastReader {	    BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;	    }		static int gcd(int a, int b) { 		if (b == 0) return a; 		return gcd(b, a % b);  		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }		static void solve(int[] doll, int[] cen, int n, int s) {			int max = -1;			int fl = 0;			int ft = 0;			for(int i =0;i<n;i++) {				if(doll[i] < s && cen[i] != 0 && 100 - cen[i] > max) {					max = 100 - cen[i];					ft = 1;				}				else if(cen[i] == 0 && doll[i] <= s){					fl = 1;				}			}			if(ft != 1 && fl == 1) {				out.println(0);				return;			}			out.println(max);		}		public static void main(String args[]) throws IOException {	    FastReader sc = new FastReader();	    long s1 = System.currentTimeMillis();	    int n = sc.nextInt(), s = sc.nextInt();	    int[] doll = new int[n];	    int[] cen = new int[n];	    	    for(int i = 0;i<n;++i) {	    	doll[i] = sc.nextInt();	    	 cen[i] = sc.nextInt();	    }	    solve(doll, cen, n, s);	    flush();	    long e = System.currentTimeMillis();//	    run(s1,e);	    }	}						
