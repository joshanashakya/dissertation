import java.io.*;import java.lang.*;import java.util.*;import java.math.*; public class code{    static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }       static class FastWriter    {        OutputStream os;         public FastWriter()        {            os = new BufferedOutputStream(System.out);        }         void println(String content)throws IOException        {            print(content);            print("\n");        }         void print(String content)throws IOException        {            os.write(content.getBytes());        }         void flush()throws IOException        {            os.flush();        }    }        static long P = 1000000007L;    public static void main(String args[])throws IOException    {        FastReader scn = new FastReader();         int n = scn.nextInt();        ArrayList<BookUnit> list = new ArrayList<>();        double total_width = 0;        for(int i = 0; i < n; i++)        {            int t = scn.nextInt();            double w = scn.nextInt();            total_width += w;             if(t == 1)            {                BookUnit new_bu = new BookUnit();                new_bu.width = w;                new_bu.section = 1;                new_bu.end = true;                list.add(new_bu);            }            else            {                BookUnit new_bu_1 = new BookUnit();                new_bu_1.width = w/2;                new_bu_1.end = false;                new_bu_1.section = 1;                list.add(new_bu_1);                 BookUnit new_bu_2 = new BookUnit();                new_bu_2.width = w/2;                new_bu_2.section = 2;                new_bu_2.end = true;                list.add(new_bu_2);            }        }        Collections.sort(list);        int n_list = list.size();         int i;        for(i = 0; i < n_list; i++)        {            if( i >= total_width)                break;             total_width = total_width - list.get(i).width;        }         if(list.get(i-1).end)        {            System.out.println(i);            return;        }        else        {            total_width = total_width - list.get(i).width;            int ans = i + 1;                    for(int j = i - 2; j >= 0; j--)            {                if(list.get(j).end && list.get(j).section == 1 && (total_width + list.get(j).width <= ans - 1))                {                    System.out.println(ans - 1);                    return;                }             }                        total_width = total_width + list.get(i).width + list.get(i - 1).width;            for(int j = i - 1; j < n_list; j++)            {                if(list.get(j).end && list.get(j).section == 1 && (total_width - list.get(j).width <= ans - 1))                {                    System.out.println(ans - 1);                    return;                }            }             System.out.println(ans);            return;        }    }     // public static int getMoreThanIndex(ArrayList<Integer> list, int value, int l, int r, int[] X)    // {    //     while( l <= r)    //     {    //         int middle = (l+r)/2;    //         if(X[list.get(middle)] == value)    //             return middle;    //         else if(X[list.get(middle)] < value)    //             l = middle + 1;    //         else    //             r = middle - 1;    //     }     //     return l;    // }} class BookUnit implements Comparable<BookUnit>{    double width;    int section;    boolean end;     public int compareTo(BookUnit bu)    {        if(this.width > bu.width)            return -1;        else if(this.width < bu.width)            return 1;        else return 0;    }} // class Pair// {//     int a, b;//     public Pair(int a, int b)//     {//         this.a = a;//         this.b = b;//     }// } // class Sequence// {//     int start_index, end_index, length; //     void initLength()//     {//         this.length = end_index - start_index + 1;//     }// } // class Node implements Comparable<Node>// {//     int weight;//     int sorted_index;//     ArrayList<Node> neighbors;//     boolean visited;//     public Node()//     {//         neighbors = new ArrayList<>();//     } //     public int compareTo(Node n)//     {//         return this.weight - n.weight;//     } // } // class MutableInt// {//     int count;//     ArrayList<Integer> list;//     public MutableInt()//     {//         list = new ArrayList<>();//     }// } // class TrieNode// {//     HashMap<Character, TrieNode> map;//     boolean visited;//     int cost; //     public TrieNode()//     {//         map = new HashMap<>();//     } //     public TrieNode add(char c, boolean isGood, MutableInt result, int k)//     {//         if(map.containsKey(c))//         {//             TrieNode n = map.get(c);//             return n;//         }//         else//         {//             TrieNode n = new TrieNode();//             if(!isGood)//                 n.cost = this.cost + 1;//             else//                 n.cost = this.cost; //             if(n.cost <= k)//                 result.count = result.count + 1; //             map.put(c, n);//             return n;//         }//     }// }
