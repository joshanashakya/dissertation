import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class B {	static PrintWriter out = new PrintWriter(System.out); 		public static void main(String[] args) {		FS in = new FS();		long R = in.nextLong();		long C = in.nextLong();		long res = solve(Math.min(R, C), Math.max(R, C));		out.println(res);		out.close();	}		static long solve(long r, long c) {		if(r < 3 && c < 3) return 0;		if(r == 1) {			long res = c;			long m = c%6;			if(m != 0) {				if(m <= 3) res -= m;				if(m == 4) res -= 2;				if(m == 5) res -= 1;			}			return res;		}		if(r == 2) {			if(c == 3 || c == 7) return r * (c-1);			return r*c;		}		long res = r*c;		if(res%2 == 0) return res;		return res-1;	}	//	static long solve(long r, long c) {//		if(r > c) {//			long tmp = r;//			r = c;//			c = tmp;//		}//		if(r < 3 && c < 3) return 0;////		long res = 0;//		long sp = (c%2 == 1 ? 1 : 0);//		long s = c/2;//		//		//see if anyone gets left out//		long hd = s + sp;//		if(hd >= 3 || ) res = s*r;		//		res += solve(sp, r);//	}		static class FS{		BufferedReader br;		StringTokenizer st;		public FS() {			br = new BufferedReader(new InputStreamReader(System.in));		}		String next() {			while(st == null || !st.hasMoreElements()) {				try {st = new StringTokenizer(br.readLine());}				catch(Exception e) { throw null;}			}			return st.nextToken();		}		int nextInt() { return Integer.parseInt(next());}		double nextDouble() { return Double.parseDouble(next());}		long nextLong() { return Long.parseLong(next());}		int[] NIA(int n) {			int r[] = new int[n];			for(int i = 0; i < n; i++) r[i] = nextInt();			return r;		}		long[] NLA(int n) {			long r[] = new long[n];			for(int i = 0; i < n; i++) r[i] = nextLong();			return r;		}		char[][] grid(int r, int c){			char res[][] = new char[r][c];			for(int i = 0; i < r; i++) {				char l[] = next().toCharArray();				for(int j = 0; j < c; j++) {					res[i][j] = l[j];				}			}			return res;		}	}	}
