import java.util.*;import java.io.*;public class MainClass{    public static void main(String args[])throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        int n1 = in.nextInt();        int n2 = in.nextInt();        long[] A = new long[n];        for (int i=0;i<n;i++)   A[i] = in.nextLong();        new MergeSortLong().sort(A, 0, n - 1);        long[] B = new long[n];        for (int i=0;i<n;i++)   B[i] = A[n - 1 - i];        long[] sum = new long[n];        sum[0] = B[0];        for (int i=1;i<n;i++)   sum[i] = sum[i - 1] + B[i];        double ans = 0.0d;        long nn1 = n1 * sum[n2 - 1] + n2 * (sum[n1 + n2 - 1] - sum[n2 - 1]);        long nn2 = n2 * sum[n1 - 1] + n1 * (sum[n1 + n2 - 1] - sum[n1 - 1]);        System.out.println(Math.max(nn1,nn2) / ((double)(1L * n1 * n2)));    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}class MergeSortLong{    // Merges two subarrays of arr[].    // First subarray is arr[l..m]    // Second subarray is arr[m+1..r]    void merge(long arr[], int l, int m, int r) {        // Find sizes of two subarrays to be merged        int n1 = m - l + 1;        int n2 = r - m;         /* Create temp arrays */        long L[] = new long[n1];        long R[] = new long[n2];         /*Copy data to temp arrays*/        for (int i = 0; i < n1; ++i)            L[i] = arr[l + i];        for (int j = 0; j < n2; ++j)            R[j] = arr[m + 1 + j];          /* Merge the temp arrays */         // Initial indexes of first and second subarrays        int i = 0, j = 0;         // Initial index of merged subarry array        int k = l;        while (i < n1 && j < n2) {            if (L[i] <= R[j]) {                arr[k] = L[i];                i++;            } else {                arr[k] = R[j];                j++;            }            k++;        }         /* Copy remaining elements of L[] if any */        while (i < n1) {            arr[k] = L[i];            i++;            k++;        }         /* Copy remaining elements of R[] if any */        while (j < n2) {            arr[k] = R[j];            j++;            k++;        }    }     // Main function that sorts arr[l..r] using    // merge()    void sort(long arr[], int l, int r) {        if (l < r) {            // Find the middle point            int m = (l + r) / 2;             // Sort first and second halves            sort(arr, l, m);            sort(arr, m + 1, r);             // Merge the sorted halves            merge(arr, l, m, r);        }    }} 
