import java.util.*;import java.io.*; public class A1145 {    private StreamTokenizer in;    private PrintWriter out;     public static void main(String[] args) throws IOException {        new A1145().run();    }     private void run() throws IOException {        in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));        out = new PrintWriter(System.out);         execute();         out.flush();    }     private void execute() throws IOException {        final int n = nextInt();        final int[] arr = new int[n];         for (int i = 0; i < n; i++) {            arr[i] = nextInt();        }         final int length = solve(arr, 0, arr.length);        out.print(length);    }     public int solve(int[] arr, int start, int end) throws IOException {        if (end - start < 2) {            return 1;        }         if (isSorted(arr, start, end)) {            return end - start;        }         final int middle = start + (end - start) / 2;         final int leftLength = solve(arr, start, middle);        final int rightLength = solve(arr, middle, end);         return Math.max(leftLength, rightLength);    }     private boolean isSorted(int[] arr, int start, int end) {        final int[] original = Arrays.copyOfRange(arr, start, end);        final int[] subArray = Arrays.copyOf(original, original.length);         Arrays.sort(subArray);         return Arrays.equals(original, subArray);    }      private String nextString() throws IOException {        in.nextToken();         return in.sval;    }     private long nextLong() throws IOException {        in.nextToken();         return (long) in.nval;    }     private int nextInt() throws IOException {        in.nextToken();         return (int) in.nval;    }}
