import sun.security.provider.certpath.Vertex; import java.io.*;import java.util.*; public class B {     private static class Solution implements Runnable {         private static final long modulo = 1000000007;          private void solve() {             int n = in.nextInt();            int[][] a = new int[n + 1][n + 1];            int[] t = new int[n + 1];             for (int i = 1; i <= n; i++) {                char[] s = in.nextLine().toCharArray();                for (int j = 1; j <= n; j++) {                    a[i][j] = s[j - 1] - '0';                }            }             for (int i = 1; i <= n; i++) {                t[i] = in.nextInt();            }             ArrayList<Integer> res = new ArrayList<>(110);            for (int i = 1; i <= n; i++) {                for (int j = 1; j <= n; j++) {                    if (t[j] == 0) {                        res.add(j);                        for (int k = 1; k <= n; k++) {                            t[k] -= a[j][k];                        }                    }                }            }             Collections.sort(res);            out.println(res.size());            res.stream().forEach(c -> out.print(c + " "));         }         private long inverse(long a) {            long result = 1;            int n = (int) modulo - 2;            while (n != 0) {                if ((n & 1) == 1)                    result = (result * a) % modulo;                a = (a * a) % modulo;                n >>= 1;            }            return result;        }         private long pow(long a, long n) {            if (n == 0) return 1;            if (n % 2 == 0) {                long ans = pow(a, n / 2);                return ans * ans;            } else {                return a * pow(a, n - 1);            }        }         private void closeStreams() {            in.close();            out.close();        }         @Override        public void run() {            solve();            closeStreams();        }         private final FastScanner in = new FastScanner();        private final PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));    }      public static void main(String[] args) {        Thread thread = new Thread(null, new Solution(), "solution", 1 << 27);        thread.setPriority(Thread.MAX_PRIORITY);        thread.start();    }      public static class FastScanner {         private BufferedReader br;        private StringTokenizer st;         public FastScanner() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         void close() {            try {                br.close();            } catch (IOException e) {                e.printStackTrace();            }        }     }}
