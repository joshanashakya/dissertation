import java.util.*;import java.io.*; public class Main {    private StreamTokenizer in;    private PrintWriter out;     public static void main(String[] args) throws IOException {        new Main().run();    }     private String substring(String str, int idx, int len) {        return str.substring(idx, str.offsetByCodePoints(idx, len));    }     private void run() throws IOException {        in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));        out = new PrintWriter(System.out);         solve();         out.flush();    }     private int nextInt() throws IOException {        in.nextToken();         return (int)in.nval;    }     private String nextString() throws IOException {        in.nextToken();         return in.sval;    }     private void solve() throws IOException {        final int rows = nextInt();        final int cols = nextInt();         // fill the map        char[][] map = new char[rows][];        for (int i = 0; i < rows; i++) {            final String line = nextString();             map[i] = line.toCharArray();        }         // TODO: for debug         //for (int row = 0; row < rows; row++) {        //    out.print(Arrays.toString(map[row]));        //    out.println();        //}         final int count = getFacesCount(rows, cols, map);        //out.print("count = ");        out.println(count);    }     private int getFacesCount(int n, int m, char[][] map) {        if (n < 2 || m < 2) {            return 0;        }         final int SUM = 10;         int count = 0;        for (int i = 0; i < n - 1; i++) {            for (int j = 0; j < m - 1; j++) {                final boolean isFace = isFace(i, j, map);                 if (isFace) {                    count++;                 }            }        }         return count;    }     private boolean isFace(int i, int j, char[][]map) {        final Set<Character> set = new HashSet<>(Arrays.asList('f', 'a', 'c', 'e'));         final List<Character> chars = Arrays.asList(            map[i][j],            map[i][j + 1],            map[i + 1][j],            map[i + 1][j + 1]        );         for (Character ch : chars) {            if (set.contains(ch)) {                set.remove(ch);            } else {                return false;            }        }         return set.isEmpty();    }}
