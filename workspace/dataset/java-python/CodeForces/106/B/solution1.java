import java.util.*;import java.io.*;public class A { 	static Scanner sc = new Scanner(System.in);	static PrintWriter pw = new PrintWriter(System.out);	static Quadruple[] q;	public static void main(String[] args) throws IOException{		int n = sc.nextInt();		q = new Quadruple[n];		for (int i = 0;i < n;i++)			q[i] = new Quadruple(sc.nextInt(),sc.nextInt(),sc.nextInt(),sc.nextInt());		for (int i = 0;i < n;i++){			for (int j = 0;j < n;j++){				if (i != j && q[i] != null && q[j] != null) {					if (q[i].speed < q[j].speed && q[i].ram < q[j].ram && q[i].hdd < q[j].hdd)						q[i] = null;				}			}		}		int index = 0;		int min = Integer.MAX_VALUE;		for (int i = 0;i < n;i++){			if (q[i] != null && min > q[i].cost) {				min = q[i].cost;				index = i + 1;			}		}		pw.println(index);		pw.flush();		pw.close();	} 	static class Quadruple {		int speed;		int ram;		int hdd;		int cost; 		public Quadruple(int speed,int ram,int hdd,int cost){			this.speed = speed;			this.ram = ram;			this.hdd = hdd;			this.cost = cost;		}	}	static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public long[] nextLongArrayPri(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         public Long[] nextLongArray(int n) throws IOException {            Long[] a = new Long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public boolean ready() throws IOException {            return br.ready();        }    }}
