import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;/** * @author Lin * @version 1.0 * @date 2020/12/13 16:56 */public class DZYLovesSequences{	public static void main(String[] args) throws IOException	{		StringBuffer stringBuffer = new StringBuffer();		int n = Reader.nextInt();		long ans = 0;		//两行数组输入		int[] an = new int[n];		int[][] dp = new int[n][3];		for (int i = 0; i < n; i++)		{			an[i] = Reader.nextInt();		}		if (n == 1)		{			ans = 1;		}else		{			dp[0][0] = 1;			dp[0][1] = 1;			dp[0][2] = 1;			if (an[1] > an[0])			{				dp[1][0] = 2;				dp[1][1] = 2;				dp[1][2] = 2;			}else			{				dp[1][0] = 1;				dp[1][1] = 2;				dp[1][2] = 2;			}			ans = 2;			for (int i = 2; i < n; i++)			{				if (an[i] > an[i - 1])				{					dp[i][0] = dp[i - 1][0] + 1;					dp[i][1] = dp[i - 1][0] + 1;					dp[i][2] = dp[i - 1][2] + 1;					if (an[i] > an[i - 2] + 1)					{						dp[i][2] = Math.max(dp[i - 1][1] + 1, dp[i][2]);					} 				} else				{					dp[i][0] = 1;					dp[i][1] = dp[i - 1][0] + 1;					if (an[i] > an[i - 2] + 1)					{						dp[i][2] = dp[i - 1][1] + 1;					} else					{						dp[i][2] = 2;					}				}				ans = Math.max(Math.max(dp[i][2], dp[i][1]), ans);			}		} 		stringBuffer.append(ans + "\n");		System.out.println(stringBuffer.toString());	}	static class Reader {		static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));		static StringTokenizer tokenizer = new StringTokenizer("");		static String nextLine() throws IOException		{// 读取下一行字符串			return reader.readLine();		}		static String next() throws IOException {// 读取下一个字符串			while (!tokenizer.hasMoreTokens()) {				tokenizer = new StringTokenizer(reader.readLine());			}			return tokenizer.nextToken();		} 		static int nextInt() throws IOException {// 读取下一个int型数值			return Integer.parseInt(next());		}		static long nextLong() throws IOException {// 读取下一个int型数值			return Long.parseLong(next());		}		static double nextDouble() throws IOException {// 读取下一个double型数值			return Double.parseDouble(next());		}	}}
