def STR(): return list(input())def INT(): return int(input())def MAP(): return map(int, input().split())def MAP2():return map(float,input().split())def LIST(): return list(map(int, input().split()))def STRING(): return input()import stringimport sysfrom heapq import heappop , heappushfrom bisect import *from collections import deque , Counterfrom math import *from itertools import permutations , accumulatedx = [-1 , 1 , 0 , 0  ]dy = [0 , 0  , 1  , - 1]#visited = [[False for i in range(m)] for j in range(n)]#sys.stdin = open(r'input.txt' , 'r')#sys.stdout = open(r'output.txt' , 'w')#for tt in range(INT()):  def check_rows(g , n ):    st = []    for i in g :        sm = 0        for j in i :            sm += j        st.append(sm)     return st def check_col(g , n ):    st = []    for i in range(n):        sm = 0        for j in range(n):            sm += (g[j][i])        st.append(sm)    return st def dig1(g , n ):    st = []    sm = 0    for i in range(n):        for j in range(n):            if i == j :                sm += (g[i][j])    st.append(sm)    return st def dig2(g, n):    st = []    sm = 0    for i in range(n):        for j in range(n):            if i + j + 1 == n :                sm += g[i][j]    st.append(sm)     return st  n = INT()g = []for i in range(n):    s = LIST()    g.append((s)) #print(g)k = []pos = []for i in range(n):    sm = 0    for j in range(n):        sm += g[i][j]        if g[i][j] == 0 :            pos.append([i , j])    k.append(sm) k.sort()#print(k)if len(k) == 1 :    print(1)    exit(0) k1 = k[0]k2 = k[1]k3 = k2 - k1p1 = pos[0][0]p2 = pos[0][1]g[p1][p2] = k3  r1 = (check_rows(g , n))r2 = (check_col(g , n))r3 = (dig1(g , n))r4 = (dig2(g , n)) #print(r1)#print(r2)#print(r3)#print(r4) if len(set(r1)) == len(set(r2)) == len(set(r3)) == len(set(r4)) == 1 and k3 > 0 and r1[0] == r2[0] == r3[0] == r4[0] == k2:    print(k3)else:    print('-1')  
