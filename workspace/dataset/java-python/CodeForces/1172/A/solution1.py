import java.io.*;import java.util.*; public class A { 	public static Reader sc = new Reader();	//public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	static void shitty() {		TreeSet<Integer> hand = new TreeSet<Integer>();		Queue<Integer> q = new LinkedList<Integer>();		for (int i = 0; i < n; i++) {			hand.add(a[i]);			q.add(b[i]);		}		int moves = 0;		while (!q.isEmpty() && q.peek() != 1) {			hand.remove(0);			if (hand.size() == 0) break;			q.add(hand.first());			hand.pollFirst();			hand.add(q.poll());			moves++;		}		if (q.size() == n) {			boolean works = true;			for (int i = 1; i <= n; i++) {				if (i != q.poll()) {					works = false;					break;				}			}			if (works) {				out.println(moves);				out.close();				System.exit(0);			}				} 	}	static int n;	static int[] a, b, posOut;	public static void main(String[] args) throws IOException {		//BufferedReader br = new BufferedReader(new FileReader("input.in")); 		 n = sc.nextInt();		a = new int[n];		b =new int[n];		posOut = new int[n+1];		for (int i = 0; i < n; i++) {			a[i] = sc.nextInt();			posOut[a[i]] = -1000000;		}		for (int i = 0; i < n; i++) {			b[i] = sc.nextInt();			posOut[b[i]] = i;		}		shitty();					int sol = 0;		int lp =0;		int posp = 1;		for (; lp < n; lp++) {			posOut[b[lp]] = -100000;			while (posp <= n && posp - posOut[posp] + lp > 0) {				posp++;			}			if (posp > n) {				sol += n;				break;			}			sol++;		}		out.println(sol+1);				out.close();	} 	static long ceil(long a, long b) {		return (a + b - 1) / b;	} 	static long powMod(long base, long exp, long mod) {		if (base == 0 || base == 1)			return base;		if (exp == 0)			return 1;		if (exp == 1)			return base % mod;		long R = powMod(base, exp / 2, mod) % mod;		R *= R;		R %= mod;		if ((exp & 1) == 1) {			return base * R % mod;		} else			return R % mod;	} 	static long pow(long base, long exp) {		if (base == 0 || base == 1)			return base;		if (exp == 0)			return 1;		if (exp == 1)			return base;		long R = pow(base, exp / 2);		if ((exp & 1) == 1) {			return R * R * base;		} else			return R * R;	} 	static class Reader {		final private int BUFFER_SIZE = 1 << 16;		private DataInputStream din;		private byte[] buffer;		private int bufferPointer, bytesRead; 		public Reader() {			din = new DataInputStream(System.in);			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		} 		public Reader(String file_name) throws IOException {			din = new DataInputStream(new FileInputStream(file_name));			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		} 		public String readLine() throws IOException {			byte[] buf = new byte[64]; // line length 			int cnt = 0, c;			while ((c = read()) != -1) {				if (c == '\n') {					break;				}				buf[cnt++] = (byte) c;			}			return new String(buf, 0, Integer.max(cnt - 1, 0));		} 		public int nextInt() throws IOException {			int ret = 0;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read();			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9'); 			if (neg)				return -ret;			return ret;		} 		public long nextLong() throws IOException {			long ret = 0;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read();			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		} 		public double nextDouble() throws IOException {			double ret = 0, div = 1;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read(); 			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9'); 			if (c == '.') {				while ((c = read()) >= '0' && c <= '9') {					ret += (c - '0') / (div *= 10);				}			} 			if (neg)				return -ret;			return ret;		} 		private void fillBuffer() throws IOException {			bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);			if (bytesRead == -1)				buffer[0] = -1;		} 		private byte read() throws IOException {			if (bufferPointer == bytesRead)				fillBuffer();			return buffer[bufferPointer++];		} 		public void close() throws IOException {			if (din == null)				return;			din.close();		}	} 	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));}
