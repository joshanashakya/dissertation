import java.util.*;import java.io.*;public class Solution implements Runnable {    FastScanner sc;    PrintWriter pw;        final class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            try {                br = new BufferedReader(new InputStreamReader(System.in));                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }        }         public long nlo() {            return Long.parseLong(next());        }         public String next() {            if (st.hasMoreTokens()) return st.nextToken();            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(next());        }         public String nli() {            String line = "";            if (st.hasMoreTokens()) line = st.nextToken();            else try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            while (st.hasMoreTokens()) line += " " + st.nextToken();            return line;        }         public double nd() {            return Double.parseDouble(next());        }    }    public static void main(String[] args) throws Exception    {        new Thread(null,new Solution(),"codeforces",1<<28).start();    }    public void run()    {        sc=new FastScanner();        pw=new PrintWriter(System.out);        try{        solve();}        catch(Exception e)        {            pw.println(e);        }        pw.flush();        pw.close();    }    public long gcd(long a,long b)    {        return b==0L?a:gcd(b,a%b);    }    public long ppow(long a,long b,long mod)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            a%=mod;            tmp%=mod;            b>>=1;        }        return (tmp*a)%mod;    }    public long pow(long a,long b)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            b>>=1;        }        return (tmp*a);    }    public  int gcd(int x,int y)    {        return y==0?x:gcd(y,x%y);    }       //////////////////////////////////    /////////////  LOGIC  ///////////    ////////////////////////////////       public void solve() throws Exception{     int n=sc.ni();     int[] arr=new int[n];     int[] brr=new int[n+1];     Arrays.fill(brr,-1);     for(int i=0;i<n;i++)     brr[sc.ni()]++;     for(int i=0;i<n;i++)     arr[i]=sc.ni();     if(f(arr,brr.clone())!=-1){         pw.println(f(arr,brr.clone()));         return;     }     else{         int ans=n,max=0;         for(int i=0;i<n;i++)             if(arr[i]!=0)                 max=Math.max(max,Math.max(0,i+1-(arr[i]-1)));         ans=ans+max;         pw.println(ans);     }    }    public int f(int[] arr,int[] brr){        int n=arr.length;        int p=-1;        for(int i=0;i<n;i++)        if(arr[i]==1)        p=i;        if(p==-1)        return -1;        for(int i=p+1;i<n;i++)            if(arr[i]!=(arr[i-1]+1))            return -1;        int q=0;        for(int i=arr[n-1]+1;i<=n;i++){            if(brr[i]==-1)            return -1;            brr[arr[q++]]=0;        }        return p;    }}
