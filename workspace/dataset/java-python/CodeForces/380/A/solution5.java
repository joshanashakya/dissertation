#include <iostream>#include <vector>#include<iomanip>#include <cstring>#include <string.h>#include <iterator>#include <math.h>#include <set>#include <queue>#include <stack>#include <algorithm>#include <tuple>#include <limits.h>#include <string>#include <bitset>#include <map>#include <numeric>#include<unordered_map>  #define endl cout<<"\n"#define lli long long int#define ld long double#define M_PI (3.14159265358979323846264338327950288)#define MOD (1000000007) using namespace std; //fast-exponentiation-llilli expo_fast(lli a, lli b) {	a = a;	lli result = 1;	while (b) {		//multiplyint(tos(result), a);		if (b & 1)result = (result * a);		b >>= 1;		a = (a*a);	}	return (result);}  void take_in(vector<lli> *arr) {	for (int i = 0; i < arr->size(); i++)cin >> (*(arr))[i];} void disp_arr(vector<lli>* arr) {	for (int i = 0; i < arr->size(); i++)cout << (*(arr))[i] << " ";} lli gcd(lli a, lli b){	if (b == 0)		return a;	return gcd(b, a % b); } /* Iterative Function to calculate (x^y)%p in O(log y) */lli power(lli x, unsigned lli y, lli p){	lli res = 1;      // Initialize result 	x = x % p;  // Update x if it is more than or  				// equal to p 	while (y > 0)	{		// If y is odd, multiply x with result 		if (y & 1)			res = (res*x) % p;		// y must be even now 		y = y >> 1; 		x = (x*x) % p;	}	return res;} vector<lli> l(100005), r(100005), type2(100005, 0),type2_index,Row(100005); lli bin(lli x,int m,int start ,int end) {	int mid = (start + end) / 2;	int index = type2_index[mid];	if (l[index] <= x && r[index] >= x) {		return index;	}	else if (l[index] > x)return bin(x, m, start, mid-1);	else return bin(x, m, mid+1, end);}  int main(){	ios_base::sync_with_stdio(false);	cin.tie(NULL);	cout.tie(NULL);	//freopen("input.txt", "r", stdin);	//freopen("output.txt", "w", stdout);	int m; cin >> m;	lli index = 1;	multimap<lli, lli> mmap;	for (int i = 1; i <= m; i++) {		int x; cin >> x;		type2[i ] = x - 1;		l[i] = index;		if (x == 2) {			type2_index.push_back(i);			lli R,c; cin >> R>>c;			Row[i] = R;			index += (R*c);			r[i] = index - 1;		}		else {			lli val; cin >> val; mmap.insert(make_pair(index, val));			index++;		}	}	int n; cin >> n;	for (int i = 0; i < n; i++) {		lli x; cin >> x;		if (mmap.find(x) != mmap.end()) {			cout << (*mmap.find(x)).second<<" ";		}		else {			lli ret;			while (true) {				ret = bin(x, m, 0, type2_index.size() - 1);				lli translated_idx = (x - l[ret]) % (Row[ret] ) ;				translated_idx++;				if (mmap.find(translated_idx)==mmap.end()) {					x = translated_idx;				}				else {					cout << (*mmap.find(translated_idx)).second << " ";					break;				}			}		} 	}	//system("PAUSE");}
