import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.BufferedReader;import java.io.InputStreamReader; public class Two {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.call(in,out);         out.close();    }     static class TaskA {        public void call(InputReader in, PrintWriter out) {            int n , a , b;            n = in.nextInt();            LinkedList<Integer> ll = new LinkedList<>();            for (int i = 0; i <n ; i++) {                ll.add(in.nextInt());            }            for (int i = 0; i <ll.size()-1 ; i++) {                a = ll.get(i);                b = ll.get(i+1);                if(a>b){                    if(divisible(a ,b)){                        ll.add(i+1 ,1 );                        i++;                    }                }                else {                    if(divisible(b ,a)){                        ll.add(i+1 ,1 );                        i++;                    }                }             }            out.println(ll.size() - n );            for (int i = 0; i <ll.size();i++) {                out.print(ll.get(i)+" ");            }        }         public boolean divisible(int a , int b){            if(a%b==0 && b!=1)                return true;            if(a%b==0 && b==1)                return false;            for (int i = 2; i*i <=b ; i++) {                if(b%i==0){                    if(a%i==0 || a%(b/i)==0 )                        return true;                }            }            return false;        }    }     static final Random random=new Random();     static void shuffleSort(int[] arr) {        int n=arr.length;        for (int i=0; i<n; i++) {            int a=random.nextInt(n), temp=arr[a];            arr[a]=arr[i];            arr[i]=temp;        }        Arrays.sort(arr);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }     }}
