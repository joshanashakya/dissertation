import java.util.*; public class ICPC {    public static void main(String[] args) {        //boolean[] primes=new ICPC().primes(100000);        Scanner sc = new Scanner(System.in);        int n=sc.nextInt();        int m=sc.nextInt();        String[] ar=new String[n];        int[][] count =new int[m][5];        for(int i=0;i<n;i++){            ar[i]=sc.next();            for(int j=0;j<m;j++){                char ch=ar[i].charAt(j);                if(ch=='A'){                    count[j][0]++;                }else if(ch=='B'){                    count[j][1]++;                }else if(ch=='C'){                    count[j][2]++;                }else if(ch=='D'){                    count[j][3]++;                }else if(ch=='E'){                    count[j][4]++;                }            }        }         int[] marks =new int[m];        for(int i=0;i<m;i++){            marks[i]=sc.nextInt();        }        long sum=0;        for(int i=0;i<m;i++){            int max=Integer.MIN_VALUE;            for(int j=0;j<5;j++){                if(count[i][j]>=max){                    max=count[i][j];                }            }            sum=sum+max*marks[i];        }        System.out.println(sum);      }     static int countSetBits(int n) {        int count = 0;        while (n > 0) {            count += n & 1;            n >>= 1;        }        return count;    }     public List<Integer> getDivisors(int n) {        List<Integer> list = new ArrayList<>();        for (int d = 2; d * d <= n; d++) {            while (n % d == 0) {                list.add(d);                n /= d;            }        }        if (n > 1) {            list.add(n);        }        return list;    }     public int lcm(int n1, int n2) {        int gcd = 1;        for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0)                gcd = i;        }         int lcm = (n1 * n2) / gcd;        return lcm;    }     public boolean[] primes(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            for (int j = i * i; j <= n; j += i) {                p[j] = false;            }        }        return p;    }      public int primeFactor(int n) {        int c = 0;         while (n % 2 == 0) {            n /= 2;            c++;        }        //  System.out.println(n);        return c;     }} 			 	 	 							  	    	  	  	 	
