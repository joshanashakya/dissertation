/* * Remember a 7.0 student can know more than a 10.0 student. * Grades don't determine intelligence, they test obedience.  * I Never Give Up. */import java.util.*;import java.io.*; import static java.lang.System.out;import static java.util.Arrays.*;import static java.lang.Math.*;public class ContestMain {	private static Reader in=new Reader();	private static StringBuilder ans=new StringBuilder();	private static long MOD=1000000007;//10^9+7 //	private static final int N=(int)100001;//	private static final double PI=3.1415;//	private static ArrayList<Integer> v[]=new ArrayList[N];//	private static long color[]=new long[2]; //For Graph Coloring//	private static boolean mark[]=new boolean [N];//	private static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));//	private static void dfs(int node){mark[node]=true;for(int x:v[node]){if(!mark[x]){dfs(x);}}}	private static long powmod(long x,long n,long m){		if(n==0)return 1;		else if(n%2==0)return(powmod((x*x)%m,n/2,m));		else return (x*(powmod((x*x)%m,(n-1)/2,m)))%m;	}Â 	public static void solve(int p,int x){				}	public static void main(String[] args) throws IOException{		int val[]={0,1,2,3,4,5,6,7,8,9}; //Possibility of the least significant digit		int ca[]=new int[10];		StringBuilder num[]=new StringBuilder[10]; 		int p=in.nextInt();		int x=in.nextInt();		int temp;		for(int i=1;i<=p;i++){			for(int j=1;j<=9;j++){				if(num[j]==null)num[j]=new StringBuilder();				num[j].append(val[j]);				temp=val[j];				val[j]=((x*val[j])+ca[j])%10;				ca[j]=((x*temp)+ca[j])/10;			}		}		int i=1;		for(i=1;i<=9;i++){			if(num[i].charAt(p-1)-48!=0&&num[i].charAt(0)-48==val[i]&&ca[i]==0){				out.println(num[i].reverse());				break;			}		}		if(i==10)out.println("Impossible");	}	static class Reader{        BufferedReader br;        StringTokenizer st;         public Reader()        {            br = new BufferedReader(new                     InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}  
