import java.io.*;import java.util.StringTokenizer;  public class Main {     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int p = sc.nextInt(), x = sc.nextInt();        char[] ans = null;        for (int last = 1; last <= 9 && ans == null; last++)            ans = check(p, last, x);        out.println(ans == null ? "Impossible" : new String(ans));        out.flush();        out.close();    }     static char[] check(int n, int last, int x) {        char[] ans = new char[n];        int carry = 0;        int first = last;        for (int i = n - 1; i >= 0; i--) {            ans[i] = (char) ('0' + last);            int cur = (carry + last * x);            last = cur % 10;            carry = cur / 10;        }        if (first == last && carry == 0 && ans[0] != '0') return ans;        return null;    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }         public Scanner(String s) throws FileNotFoundException {             br = new BufferedReader(new FileReader(new File(s)));        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }          public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public long[] nextLongArray(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }          public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public double[] nextDoubleArray(int n) throws IOException {            double[] ans = new double[n];            for (int i = 0; i < n; i++)                ans[i] = nextDouble();            return ans;        }         public short nextShort() throws IOException {            return Short.parseShort(next());        }     } }
