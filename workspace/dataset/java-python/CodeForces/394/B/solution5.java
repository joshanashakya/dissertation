import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.IOException;import java.io.PrintWriter;import java.util.StringTokenizer; public class B394{	public static void main(String[] args){		InputReader in = new InputReader();		PrintWriter out = new PrintWriter(System.out);		final long start = System.currentTimeMillis();		new Task1().solve(in, out);		final long duration = System.currentTimeMillis()-start;		out.close();	} 	static class Task1{		public void solve(InputReader in, PrintWriter out){			int p=in.nextInt(), x=in.nextInt();						int[] ans;			for(int last=1; last<=9; last++){				ans = new int[p];				ans[p-1] = last;				int carry = 0; 				for(int i=p-2; i>=0; i--){					int temp = (ans[i+1]*x + carry);					ans[i] = temp%10;					carry = temp/10;				} 				if((ans[0]*x+carry)==ans[p-1] && ans[0]!=0){					//out.println(carry);					for(int i:ans){						out.print(i);					}					out.println();					return;				}			}			out.println("Impossible");		}	} 	static class InputReader{		private BufferedReader reader;		private StringTokenizer tokenizer;				public InputReader(){			reader = new BufferedReader(new InputStreamReader(System.in));			tokenizer = null;		} 		public String next(){			while(tokenizer==null || !tokenizer.hasMoreTokens()){				try{					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e){					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt(){			return (int)Integer.parseInt(next());		} 		public long nextLong(){			return (long)Long.parseLong(next());		} 		public double nextDouble(){			return (double)Double.parseDouble(next());		} 		public String nextLine(){			String s = null;			try{				s = reader.readLine();			} catch(Exception e){				throw new RuntimeException(e);			}			return s;		}	}}
