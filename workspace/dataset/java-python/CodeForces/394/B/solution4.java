import java.io.*;import java.math.BigInteger;import java.util.*; public class Template implements Runnable {     BufferedReader in;    PrintWriter out;    StringTokenizer tok = new StringTokenizer("");     void init() throws FileNotFoundException {        try {            in = new BufferedReader(new FileReader("input.txt"));            out = new PrintWriter("output.txt");        } catch (Exception e) {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(System.out);        }    }     String readString() throws IOException {        while (!tok.hasMoreTokens()) {            try {                tok = new StringTokenizer(in.readLine());            } catch (Exception e) {                return null;            }        }        return tok.nextToken();    }     int readInt() throws IOException {        return Integer.parseInt(readString());    }     int[] readIntArray(int size) throws IOException {        int[] res = new int[size];        for (int i = 0; i < size; i++) {            res[i] = readInt();        }        return res;    }     long readLong() throws IOException {        return Long.parseLong(readString());    }     double readDouble() throws IOException {        return Double.parseDouble(readString());    }     <T> List<T>[] createGraphList(int size) {        List<T>[] list = new List[size];        for (int i = 0; i < size; i++) {            list[i] = new ArrayList<>();        }        return list;    }     public static void main(String[] args) {        new Template().run();        // new Thread(null, new Template(), "", 1l * 200 * 1024 * 1024).start();    }     long timeBegin, timeEnd;     void time() {        timeEnd = System.currentTimeMillis();        System.err.println("Time = " + (timeEnd - timeBegin));    }     long memoryTotal, memoryFree;     void memory() {        memoryFree = Runtime.getRuntime().freeMemory();        System.err.println("Memory = " + ((memoryTotal - memoryFree) >> 10)                + " KB");    }     public void run() {        try {            timeBegin = System.currentTimeMillis();            memoryTotal = Runtime.getRuntime().freeMemory();            init();            solve();            out.close();            if (System.getProperty("ONLINE_JUDGE") == null) {                time();                memory();            }        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     void print(int a, int b, int c) {        while (a-- > 0) out.print("|");        out.print("+");        while (b-- > 0) out.print("|");        out.print("=");        while (c-- > 0) out.print("|");        out.close();        System.exit(0);    }     void solve() throws IOException {        int[][] base = new int[10][10];        String[][] answer = new String[10][10];        for (int len = 1; ; len++) {            boolean allDone = true;            for (int last = 1; last < 10; last++) {                for (int i = 1; i < 10; i++) {                    if (answer[last][i] == null) allDone = false;                }            }            if (allDone) break;            for (int last = 1; last < 10; last++) {                for (int i = 1; i < 10; i++) {                    if (answer[last][i] != null) continue;                    String ans = solve(len, i, last);                    if (ans != null) {                        base[last][i] = len;                        answer[last][i] = ans;                    }                }            }            if (len > 1000) {                break;            }        }         int p = readInt();        int x = readInt();        String ans = solve(p, x, base, answer);        if (ans == null) {            out.println("Impossible");            return;        }        out.println(ans); ////        for (int len = 1; len < 1000; len++) {//            for (int x = 1; x <= 9; x++) {//                String a = solve(len, x);//                String b = solve(len, x, base, answer);//                if (a == b) continue;//                if (a == null || b == null || !a.equals(b)) {//                    throw new RuntimeException(len + " " + x);//                }//                System.err.println("solve " + len + " " + x + " " + solve(len, x) + " " + solve(len, x, base, answer));//            }//        }//        int p = readInt();//        int x = readInt();//        String answer = solve(p, x);//        if (answer == null) {//            out.println("Impossible");//        } else {//            out.println(answer);//        }    }     String solve(int p, int x, int[][] base, String[][] answer) {        for (int last = 1; last <= 9; last++) {            String result = solve(p, x, base, answer, last);            if (result != null) return result;        }        return null;    }     String solve(int p, int x, int[][] base, String[][] answer, int last) {        if (base[last][x] == 0) return null;        if (p % base[last][x] != 0) {            return null;        }        StringBuilder sb = new StringBuilder();        int count = p / base[last][x];        while (count-- > 0) {            sb.append(answer[last][x]);        }        return sb.toString();    }     String solve(int p, int x) {        for (int last = 1; last <= 9; last++) {            String result = solve(p, x, last);            if (result != null) return result;        }        return null;    }     String solve(int p, int x, int last) {        if (p == 1 && x == 1) return "1";        String currentAnswer = null;        BigInteger numerator = v(x).subtract(v(10).pow(p - 1)).multiply(v(last));        BigInteger denominator = v(1).subtract(v(10).multiply(v(x)));        if (denominator.equals(BigInteger.ZERO)) return null;        if (denominator.compareTo(BigInteger.ZERO) < 0) {            denominator = denominator.negate();            numerator = numerator.negate();        }         if (numerator.mod(denominator).equals(BigInteger.ZERO)) {            BigInteger a = numerator.divide(denominator);            String astr = a.toString();            if (astr.length() != p - 1) {                return null;            }            String result = astr + last;            if (currentAnswer == null || result.compareTo(currentAnswer) < 0) {                currentAnswer = result;            }        }        return currentAnswer;    }     BigInteger v(int x) {        return BigInteger.valueOf(x);    }     int solve2(int len, int x) {        for (int i = 1; ; i++) {            String s = "" + i;            if (s.length() > len) return -1;            if (s.length() < len) continue;            String next = s.charAt(s.length() - 1) + s.substring(0, s.length() - 1);            if (Integer.parseInt(next) == Integer.parseInt(s) * x) return i;        }    }  }
