import java.util.*;import java.io.*; public class Main {     public static void main(String[] args) throws Exception {        input.init(System.in);        HashMap<Integer, int[]> map = new HashMap();        int num = input.nextInt();        ArrayList<Integer> list = new ArrayList();        int[][] arr = new int[num][];        for (int i = 0; i < arr.length; i++) {            arr[i] = new int[input.nextInt()];        }        for (int i = 0; i < arr.length; i++) {            for (int j = 0; j < arr[i].length; j++) {                arr[i][j] = input.nextInt();                list.add(arr[i][j]);                map.put(arr[i][j], new int[]{i, j});            }        }        Collections.sort(list);        StringBuilder sb = new StringBuilder();        int swaps = 0;        int temp;        int[] temp2 = new int[2];        int k = 0 ;         for (int i = 0; i < arr.length; i++) {            for (int j = 0; j < arr[i].length; j++) {                if (arr[i][j] != list.get(k)) {                    temp2 = map.get(list.get(k));                     temp = arr[i][j];                    arr[i][j] = list.get(k);                    arr[temp2[0]][temp2[1]] = temp;                     sb.append((i + 1) + " " + (j + 1) + " " + (temp2[0] + 1) + " " + (temp2[1] + 1) + " " + "\n");                     map.put(list.get(k), map.get(arr[temp2[0]][temp2[1]]));                                       map.put(arr[temp2[0]][temp2[1]], temp2);                    map.get(list.get(k));                     swaps++;                }                k++;            }        }        System.out.println(swaps);        System.out.print(sb);    }} //    public static int bestSchedule(int N, int K, int[] workingDays){//        Arrays.sort(workingDays);//        //    }//<editor-fold defaultstate="collapsed" desc="input">class input {     static java.io.BufferedReader reader;    static java.util.StringTokenizer tokenizer;     static void init(java.io.InputStream input) {        reader = new java.io.BufferedReader(new java.io.InputStreamReader(input));        tokenizer = new java.util.StringTokenizer("");    }     static String next() throws Exception {        while (!tokenizer.hasMoreTokens()) {            tokenizer = new java.util.StringTokenizer(reader.readLine());        }        return tokenizer.nextToken();    }     static int nextInt() throws Exception {        return Integer.parseInt(next());    }     static long nextLong() throws Exception {        return Long.parseLong(next());    } }//</editor-fold>
