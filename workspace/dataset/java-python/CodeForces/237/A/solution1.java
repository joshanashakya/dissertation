import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.HashMap;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        AFreeCash solver = new AFreeCash();        solver.solve(1, in, out);        out.close();    }     static class AFreeCash {        static HashMap<AFreeCash.Pair, Integer> multiset = new HashMap<AFreeCash.Pair, Integer>();         static void add(AFreeCash.Pair x) {            if (multiset.containsKey(x)) {                multiset.put(x, multiset.get(x) + 1);            } else {                multiset.put(x, 1);            }        }         public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();             for (int i = 0; i < n; i++) {                add(new AFreeCash.Pair(in.nextInt(), in.nextInt()));            }            int max = 0;            for (AFreeCash.Pair p : multiset.keySet()) {                max = Math.max(max, multiset.get(p));            }            out.println(max);        }         static class Pair {            int a;            int b;             Pair(int a, int b) {                this.a = a;                this.b = b;            }             public boolean equals(Object o) {                if (o instanceof AFreeCash.Pair) {                    AFreeCash.Pair p = (AFreeCash.Pair) o;                    return p.a == a && p.b == b;                }                return false;            }             public int hashCode() {                return new Integer(a).hashCode() * 31 + new Integer(b).hashCode();            }         }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }} 
