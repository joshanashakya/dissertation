import java.io.*;import java.util.*;  public class p2 {    //Reader from https://www.geeksforgeeks.org/fast-io-for-competitive-programming/	static class Reader { 		final private int BUFFER_SIZE = 1 << 16; 		private DataInputStream din; 		private byte[] buffer; 		private int bufferPointer, bytesRead;  		public Reader() { 			din = new DataInputStream(System.in); 			buffer = new byte[BUFFER_SIZE]; 			bufferPointer = bytesRead = 0; 		}  		public Reader(String file_name) throws IOException { 			din = new DataInputStream(new FileInputStream(file_name)); 			buffer = new byte[BUFFER_SIZE]; 			bufferPointer = bytesRead = 0; 		}  		public String readLine() throws IOException { 			byte[] buf = new byte[64]; // line length 			int cnt = 0, c; 			while ((c = read()) != -1) 			{ 				if (c == '\n') 					break; 				buf[cnt++] = (byte) c; 			} 			return new String(buf, 0, cnt); 		}  		public int nextInt() throws IOException { 			int ret = 0; 			byte c = read(); 			while (c <= ' ') 				c = read(); 			boolean neg = (c == '-'); 			if (neg) 				c = read(); 			do			{ 				ret = ret * 10 + c - '0'; 			} while ((c = read()) >= '0' && c <= '9');  			if (neg) 				return -ret; 			return ret; 		}  		public long nextLong() throws IOException { 			long ret = 0; 			byte c = read(); 			while (c <= ' ') 				c = read(); 			boolean neg = (c == '-'); 			if (neg) 				c = read(); 			do { 				ret = ret * 10 + c - '0'; 			} 			while ((c = read()) >= '0' && c <= '9'); 			if (neg) 				return -ret; 			return ret; 		}  		public double nextDouble() throws IOException { 			double ret = 0, div = 1; 			byte c = read(); 			while (c <= ' ') 				c = read(); 			boolean neg = (c == '-'); 			if (neg) 				c = read();  			do { 				ret = ret * 10 + c - '0'; 			} 			while ((c = read()) >= '0' && c <= '9');  			if (c == '.') 			{ 				while ((c = read()) >= '0' && c <= '9') 				{ 					ret += (c - '0') / (div *= 10); 				} 			}  			if (neg) 				return -ret; 			return ret; 		}  		private void fillBuffer() throws IOException { 			bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); 			if (bytesRead == -1) 				buffer[0] = -1; 		}  		private byte read() throws IOException { 			if (bufferPointer == bytesRead) 				fillBuffer(); 			return buffer[bufferPointer++]; 		}  		public void close() throws IOException { 			if (din == null) 				return; 			din.close(); 		}     }     private static int[][] dir1 = new int[][]{{1, 0}, {0, 1}};    private static int[][] dir2 = new int[][]{{-1, 0}, {0, 1}};    private static HashMap<String, Integer> map;     public static int recur(int n, int m, int[][] arr, int r1, int c1, int r2, int c2, boolean crossed) {        if(r1 < 0 || r1 >= n || c1 < 0 || c1 >= m || r2 < 0 || r2 >= n || c2 < 0 || c2 >= m) {            return 0;        }         String key = r1 + "_" + c1 + "_"  + r2 + "_" + c2 + "_" + crossed;         // if(map.containsKey(key)) {        //     return map.get(key);        // }         if(crossed) {            if(r2 > r1 ) {                return 0;            }        } else {            if(r1 > r2) {                return 0;            }        }         int ans = 0;        boolean flag = crossed;        if(crossed) {            if(r1 == r2 && c1 == c2) {                return 0;            } else {                ans += arr[r1][c1];                ans += arr[r2][c2];            }        } else {            if(!(r1 == r2 && c1 == c2)) {                ans += arr[r1][c1];                ans += arr[r2][c2];            } else {                flag = true;            }        }                 int max = 0;         for(int k1 = 0 ; k1 < dir1.length ; k1++) {            for(int k2 = 0 ; k2 < dir2.length ; k2++) {                int nr1 = dir1[k1][0] + r1;                int nc1 = dir1[k1][1] + c1;                int nr2 = dir2[k2][0] + r2;                int nc2 = dir2[k2][1] + c2;                max = Math.max(max, recur(n, m, arr, nr1, nc1, nr2, nc2, flag));            }        }         ans += max;        map.put(key, ans);        return ans;    }     public static void printArr(int[][] arr) {        System.out.println("Printing.....");        for(int i = 0 ; i < 4 ; i++) {            for(int j  = 0 ; j < 4 ; j++) {                System.out.print(arr[i][j] + " ");            }            System.out.println();        }    }     public static int solve(int n, int m, int[][] arr) {        if(n == 0 || m == 0) {            return 0;        }        int max = 1005;        int[][] boy1 = new int[max][max];        int[][] boy2 = new int[max][max];        int[][] girl1 = new int[max][max];        int[][] girl2 = new int[max][max];         // start to mid        for(int i = 1 ; i <= n ; i++) {            for(int j = 1 ; j <= m ; j++) {                boy1[i][j] = Math.max(boy1[i-1][j], boy1[i][j-1]) + arr[i-1][j-1];            }        }         // end to mid        for(int i = n ; i >= 1 ; i--) {            for(int j = m ; j >= 1 ; j--) {                boy2[i][j] = Math.max(boy2[i+1][j], boy2[i][j+1]) + arr[i-1][j-1];            }        }          // start to mid        for(int i = n ; i >= 1 ; i--) {            for(int j = 1 ; j <= m ; j++) {                girl1[i][j] = Math.max(girl1[i+1][j], girl1[i][j-1]) + arr[i-1][j-1];            }        }         // end to mid        for(int i = 1 ; i <= n ; i++) {            for(int j = m ; j >= 1 ; j--) {                girl2[i][j] = Math.max(girl2[i-1][j], girl2[i][j+1]) + arr[i-1][j-1];            }        }         // printArr(boy1);        // printArr(boy2);        // printArr(girl1);        // printArr(girl2);         int ans = 0;         for(int i = 2 ; i < n ; i++) {            for(int j = 2 ; j < m ; j++) {                int op1 = boy1[i][j-1] + boy2[i][j+1] + girl1[i+1][j] + girl2[i-1][j];                int op2 = boy1[i-1][j] + boy2[i+1][j] + girl1[i][j-1] + girl2[i][j+1];                ans = Math.max(ans, Math.max(op1, op2));            }        }        return ans;    }        public static void main(String[] args) throws Exception {        Reader s=new Reader();         int n = s.nextInt();        int m = s.nextInt();        int[][] arr = new int[n][m];         for(int i = 0 ; i < n ; i++) {            for(int j = 0 ; j < m ; j++) {                arr[i][j] = s.nextInt();            }        }        System.out.println(solve(n, m, arr));    }}
