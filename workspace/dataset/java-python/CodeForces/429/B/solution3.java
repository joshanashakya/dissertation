/* * akshaygupta26 */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class B {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt(),m=sc.nextInt();						long arr[][]=new long[n][m];			for(int i=0;i<n;i++) for(int j=0;j<m;j++) arr[i][j]=sc.nextLong();						long dp1[][]=new long[n][m];			long dp1i[][]=new long[n][m];						long dp2[][]=new long[n][m];			long dp2i[][]=new long[n][m];						for(int i=0;i<n;i++) {				for(int j=0;j<m;j++) {					if(i == 0 && j == 0) {						dp1[i][j] =arr[i][j];continue;					}					if(i == 0) {						dp1[i][j]=dp1[i][j-1]+arr[i][j];continue;					}					if(j == 0) {						dp1[i][j]=dp1[i-1][j]+arr[i][j];continue;					}										dp1[i][j] =Math.max(dp1[i-1][j], dp1[i][j-1])+arr[i][j];				}			}						for(int i=n-1;i>=0;i--) {				for(int j=0;j<m;j++) {					if(i == n-1 && j ==0) {						dp2[i][j] =arr[i][j];continue;					}					if(i == n-1) {						dp2[i][j]=dp2[i][j-1]+arr[i][j];continue;					}					if(j == 0) {						dp2[i][j]=dp2[i+1][j]+arr[i][j];continue;					}										dp2[i][j] =Math.max(dp2[i+1][j], dp2[i][j-1])+arr[i][j];				}			}						for(int i=n-1;i>=0;i--) {				for(int j=m-1;j>=0;j--) {					if(i == n-1 && j == m-1) {						dp1i[i][j]=arr[i][j];continue;					}					if(i == n-1) {						dp1i[i][j]=dp1i[i][j+1]+arr[i][j];continue;					}					if(j == m-1) {						dp1i[i][j]=dp1i[i+1][j]+arr[i][j];continue;					}										dp1i[i][j] =Math.max(dp1i[i+1][j], dp1i[i][j+1])+arr[i][j];				}			}						for(int i=0;i<n;i++) {				for(int j=m-1;j>=0;j--) {					if(i == 0 && j == m-1) {						dp2i[i][j] =arr[i][j];continue;					}					if(i == 0) {						dp2i[i][j]=dp2i[i][j+1]+arr[i][j];continue;					}					if(j == m-1) {						dp2i[i][j]=dp2i[i-1][j]+arr[i][j];continue;					}										dp2i[i][j] =Math.max(dp2i[i-1][j], dp2i[i][j+1])+arr[i][j];				}			}						long maxm=0l;			for(int i=1;i<n-1;i++) {				for(int j=1;j<m-1;j++) {					long op1 = dp1[i-1][j]+dp1i[i+1][j]+dp2[i][j-1]+dp2i[i][j+1];					long op2 = dp2[i+1][j]+dp2i[i-1][j]+dp1[i][j-1]+dp1i[i][j+1];					maxm = Math.max(maxm, Math.max(op1, op2));				}			}						ans.append(maxm+"\n");				}			    System.out.print(ans);	}         static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
