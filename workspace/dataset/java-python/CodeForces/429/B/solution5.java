 import java.util.Scanner; import static java.lang.Math.max; public class Main {  public static void main(String[] args) {    Scanner sc = new Scanner(System.in);    int n = sc.nextInt();    int m = sc.nextInt();    int[][] a = new int[n][m];    for (int i = 0; i < n; i++) {      for (int j = 0; j < m; j++) {        a[i][j] = sc.nextInt();      }    }     solve(a, n, m);    sc.close();  }   private static void solve(int[][] a, int n, int m) {     int[][] dp1 = new int[n][m];    int[][] dp2 = new int[n][m];    int[][] dp3 = new int[n][m];    int[][] dp4 = new int[n][m];     for (int i = 0; i < n; i++) {      for (int j = 0; j < m; j++) {        if (i == 0 && j == 0) {          dp1[i][j] = 0;        } else {          dp1[i][j] =              Math.max(                  Math.max(dp1[i][j], i != 0 ? dp1[i - 1][j] + a[i - 1][j] : 0),                  j != 0 ? dp1[i][j - 1] + a[i][j - 1] : 0);        }      }    }     for (int i = n - 1; i >= 0; --i) {      for (int j = m - 1; j >= 0; --j) {        if (i == n - 1 && j == m - 1) {          dp2[i][j] = 0;        } else {          dp2[i][j] =              Math.max(                  Math.max(dp2[i][j], i != n - 1 ? dp2[i + 1][j] + a[i + 1][j] : 0),                  j != m - 1 ? dp2[i][j + 1] + a[i][j + 1] : 0);        }      }    }     for (int i = 0; i < n; i++) {      for (int j = m - 1; j >= 0; --j) {        if (i == 0 && j == m - 1) {          dp3[i][j] = 0;        } else {          dp3[i][j] =              Math.max(                  Math.max(dp3[i][j], i != 0 ? dp3[i - 1][j] + a[i - 1][j] : 0),                  j != m - 1 ? dp3[i][j + 1] + a[i][j + 1] : 0);        }      }    }    for (int i = n - 1; i >= 0; i--) {      for (int j = 0; j < m; j++) {        if (i == n - 1 && j == 0) {          dp4[i][j] = 0;        } else {          dp4[i][j] =              Math.max(                  Math.max(dp4[i][j], i != n - 1 ? dp4[i + 1][j] + a[i + 1][j] : 0),                  j != 0 ? dp4[i][j - 1] + a[i][j - 1] : 0);        }      }    }     int max = Integer.MIN_VALUE;    for (int i = 1; i < n - 1; i++) {      for (int j = 1; j < m - 1; j++) {        max =            max(                max,                dp1[i - 1][j]                    + a[i - 1][j]                    + dp2[i + 1][j]                    + a[i + 1][j]                    + dp3[i][j + 1]                    + a[i][j + 1]                    + dp4[i][j - 1]                    + a[i][j - 1]);        max =            max(                max,                dp1[i][j - 1]                    + a[i][j - 1]                    + dp2[i][j + 1]                    + a[i][j + 1]                    + dp3[i - 1][j]                    + a[i - 1][j]                    + dp4[i + 1][j]                    + a[i + 1][j]);      }    }    System.out.println(max);  }}
