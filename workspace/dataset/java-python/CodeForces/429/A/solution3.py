import math,sys#from itertools import permutations, combinations;import heapq,random;from collections import defaultdict,dequeimport bisect as bidef yes():print('YES')def no():print('NO')def I():return (int(sys.stdin.readline()))def In():return(map(int,sys.stdin.readline().split()))def Sn():return sys.stdin.readline().strip()#sys.setrecursionlimit(1500)def dict(a):    d={}     for x in a:        if d.get(x,-1)!=-1:            d[x]+=1        else:            d[x]=1    return ddef find_gt(a, x):    'Find leftmost value greater than x'    i = bi.bisect_left(a, x)    if i != len(a):        return i    else:                    return -1        def main():    try:        n=I()        d=defaultdict(list)        for i in range(n-1):            a,b=In()            d[a].append(b)            d[b].append(a)        a=[0]+list(In())        b=[0]+list(In())        parent=[-1]*(n+1)        visit=[False]*(n+1)        dp=[0]*(n+1)        q=deque([1])        parent[1]=0        ans=[]        cnt=0        while q:            node=q.popleft()            if visit[node]:continue;            if a[node]^dp[parent[parent[node]]]!=b[node]:                ans.append(node)                dp[node]=1^dp[parent[parent[node]]]                cnt+=1            else:                dp[node]=dp[parent[parent[node]]]            visit[node]=True            for x in d[node]:                if not visit[x]:                    q.appendleft(x)                    parent[x]=node        print(cnt)        # print(dp)        for x in ans:            print(x)Â     except:        pass        M = 998244353P = 1000000007 if __name__ == '__main__':    # for _ in range(I()):main    for _ in range(1):main()#        *******************    All The Best    *******************   #
