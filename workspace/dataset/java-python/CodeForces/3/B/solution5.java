import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer;import java.io.BufferedReader;import java.util.Comparator;import java.util.Collections;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        StringColoring solver = new StringColoring();        solver.solve(1, in, out);        out.close();    }     static class StringColoring {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            int v = in.nextInt();            ArrayList<int[]> kayak = new ArrayList<>();            ArrayList<int[]> cam = new ArrayList<>();            for (int i = 0; i < N; i++) {                int ti = in.nextInt();                if (ti == 1) {                    kayak.add(new int[]{i + 1, in.nextInt()});                } else {                    cam.add(new int[]{i + 1, in.nextInt()});                }            }            Collections.sort(kayak, new Comparator<int[]>() {                 public int compare(int[] ints, int[] t1) {                    return Integer.compare(t1[1], ints[1]);                }            });            Collections.sort(cam, new Comparator<int[]>() {                 public int compare(int[] ints, int[] t1) {                    return Integer.compare(t1[1], ints[1]);                }            });            int[] prefCam = new int[cam.size()];            int set = 0;            int max = 0;            if (cam.size() == 0 || v == 1) {                set = Math.min(v, kayak.size());                for (int i = 0; i < Math.min(v, kayak.size()); i++) {                    max += kayak.get(i)[1];                }            } else {                prefCam[0] = cam.get(0)[1];                for (int i = 1; i < prefCam.length; i++) {                    prefCam[i] = prefCam[i - 1] + cam.get(i)[1];                }                max = prefCam[Math.min(v / 2 - 1, prefCam.length - 1)];                int cur = 0;                for (int i = 0; i < kayak.size(); i++) {                    int space = (v - i - 1) / 2;                    if (space < 0) {                        break;                    }                    cur += kayak.get(i)[1];                    if (max < cur + (space == 0 ? 0 : prefCam[Math.min(space - 1, prefCam.length - 1)])) {                        max = cur + (space == 0 ? 0 : prefCam[Math.min(space - 1, prefCam.length - 1)]);                        set = i + 1;                    }                 }            }            out.println(max);            StringBuilder str = new StringBuilder();            for (int i = 0; i < set; i++) {                str.append(kayak.get(i)[0] + " ");            }            int space = (v - set) / 2;            for (int i = 0; i < Math.min(cam.size(), space); i++) {                str.append(cam.get(i)[0] + " ");            }            out.println(str.toString());        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
