"""#If FastIO not needed, use this and don't forget to strip#import sys, math#input = sys.stdin.readline""" import osimport sysfrom io import BytesIO, IOBaseimport heapq as h from bisect import bisect_left, bisect_rightimport time from types import GeneratorTypeBUFSIZE = 8192 class FastIO(IOBase):    newlines = 0     def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") from collections import defaultdict as dd, deque as dq, Counter as dcimport math, string #start_time = time.time() def getInts():    return [int(s) for s in input().split()] def getInt():    return int(input()) def getStrs():    return [s for s in input().split()] def getStr():    return input() def listStr():    return list(input()) def getMat(n):    return [getInts() for _ in range(n)] def isInt(s):    return '0' <= s[0] <= '9' MOD = 10**9 + 7  """What is the maximum P we can get into the lorry or volume V, such that the vehicles have either volume 1 or 2 depending on typeFor any given value of kayaks, 0 to max_kayaks, there is an associated max number of catamarans""" def solve():    N, V = getInts()    kayaks, cats = [], []    for n in range(N):        t, p = getInts()        if t == 1:            kayaks.append((p,n+1))        else:            cats.append((p,n+1))    kayaks.sort(reverse=True)    cats.sort(reverse=True)    k_pref = [0]    curr = 0    for k,k2 in kayaks:        curr += k        k_pref.append(curr)    c_pref = [0]    curr = 0    for c,c2 in cats:        curr += c        c_pref.append(curr)    ans = 0    ans_k = ans_c = 0    for k in range(0,len(kayaks)+1):        if k > V: break        tmp = k_pref[k]        rem_vol = V - k        num_cats = min(rem_vol//2,len(cats))        tmp += c_pref[num_cats]        if tmp > ans:            ans = tmp            ans_k = k            ans_c = num_cats    print(ans)    ans_str = []    for i in range(ans_k):        ans_str.append(kayaks[i][1])    for i in range(ans_c):        ans_str.append(cats[i][1])    print(*ans_str)    return    #for _ in range(getInt()):#print(solve())solve()  #print(time.time()-start_time)
