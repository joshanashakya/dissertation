# Author : nitish420 --------------------------------------------------------------------import osimport sysfrom io import BytesIO, IOBase def main():    n,v=map(int,input().split())    a,b=[],[]    for i in range(n):        t,p=map(int,input().split())        if t==1:            a.append([p,i+1])        else:            b.append([p,i+1])    a.sort()    a=a[::-1]    b.sort()    b=b[::-1]    na,nb=len(a),len(b)    l,r=0,0    ans=[]    val=0     while v:        if v>=2 :            if l<na-1 and r<nb:                if a[l][0]>b[r][0] :                    val+=a[l][0]                    v-=1                    ans.append(a[l][1])                    l+=1                elif a[l][0]+a[l+1][0]>b[r][0]:                    # val+=a[l][0]+a[l+1][0]                    val+=a[l][0]                    v-=1                    ans.append(a[l][1])                    # ans.append(a[l+1][1])                    l+=1                     else:                    val+=b[r][0]                    ans.append(b[r][1])                    v-=2                    r+=1            elif l==na-1 and r<nb:                if a[l][0]>b[r][0]:                    val+=a[l][0]                    v-=1                    ans.append(a[l][1])                    l+=1                else:                    val+=b[r][0]                    v-=2                    ans.append(b[r][1])                    r+=1            elif l<na:                val+=a[l][0]                v-=1                ans.append(a[l][1])                l+=1            elif r<nb:                val+=b[r][0]                ans.append(b[r][1])                v-=2                r+=1            else:                break        else:            if l<na:                ans.append(a[l][1])                val+=a[l][0]                v-=1                l+=1            else:                break    print(val)    print(*ans)  # 20 19# 2 47# 1 37# 1 48# 2 42# 2 48# 1 38# 2 47# 1 48# 2 47# 1 41# 2 46# 1 28# 1 49# 1 45# 2 34# 1 43# 2 29# 1 46# 2 45# 2 18  # region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = 'x' in file.mode or 'r' not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b'\n') + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode('ascii'))        self.read = lambda: self.buffer.read().decode('ascii')        self.readline = lambda: self.buffer.readline().decode('ascii')  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip('\r\n')  # endregion if __name__ == '__main__':    main()
