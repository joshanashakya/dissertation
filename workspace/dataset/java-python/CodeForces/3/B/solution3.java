import java.util.ArrayList;import java.util.Collections;import java.util.Scanner; public class Solution { 	public static void main(String[] args) {		Scanner sc = new Scanner(System.in);		int wbn = sc.nextInt();		int lwc = sc.nextInt();		waterBorn[] wb = new waterBorn[wbn];		ArrayList<waterBorn> wb1 = new ArrayList<waterBorn>();		ArrayList<waterBorn> wb2 = new ArrayList<waterBorn>(); 		int t1 = 0;		for (int i = 0; i < wbn; i++) {			wb[i] = new waterBorn(sc.nextInt(), sc.nextInt(), i + 1);			if (wb[i].t == 1)				wb1.add(wb[i]);			else				wb2.add(wb[i]);		}		sc.close(); 		long start = System.nanoTime();		// System.out.println(lwc);		// printArray(wb);		Collections.sort(wb1);		Collections.sort(wb2);		ArrayList<Integer> load = findMaxLoad(wb1, wb2, lwc);		System.out.println(load.get(0)); 		for (int i = 0; i < load.get(1); i++)			System.out.print(wb1.get(wb1.size() - 1 - i).p + " "); 		for (int i = 0; i < load.get(2); i++)			System.out.print(wb2.get(wb2.size() - 1 - i).p + " "); 		System.out.println("");		//System.out.println("Elapsed : " + (double) (System.nanoTime() - start) / 1000000 + " ms.");	} 	private static ArrayList<Integer> findMaxLoad(ArrayList<waterBorn> wb1, ArrayList<waterBorn> wb2, int lwc) {		ArrayList<Integer> finalLoad = new ArrayList<Integer>();		int i1, ofOnes, sumOnes, sumTwos, ofTwos, bestC, bestOnes, bestTwos, maxC = 0;		ofTwos = 0;		bestC = 0;		bestOnes = 0; 		for (int i = 0; i < lwc && wb1.size() - 1 - i >= 0; i++) {			bestC += wb1.get(wb1.size() - 1 - i).c;			bestOnes++;		}		i1 = wb1.size() - bestOnes;		ofOnes = bestOnes;		bestTwos = 0;		sumOnes = bestC;		sumTwos = 0; 		for (int i2 = wb2.size() - 1; i2 >= 0 && ofOnes - 2 * ofTwos <= lwc; i2--) {			ofTwos++;			sumTwos += wb2.get(i2).c;			while (lwc - ofOnes - 2 * ofTwos < 0 && i1 < wb1.size()) {				ofOnes--;				sumOnes -= wb1.get(i1++).c;			}			if (sumOnes + sumTwos > bestC && ofOnes + 2 * ofTwos <= lwc) {				bestC = sumOnes + sumTwos;				bestOnes = ofOnes;				bestTwos = ofTwos;			}		} 		finalLoad.add(0, bestC);		finalLoad.add(1, bestOnes);		finalLoad.add(2, bestTwos);		return finalLoad;	} 	private static void printArray(ArrayList<waterBorn> wbt) {		for (waterBorn e : wbt)			System.out.print(e + ";");		System.out.println("");	} } class waterBorn implements Comparable<waterBorn> {	int t;	int c;	int p; 	public waterBorn(int t, int c, int p) {		this.t = t;		this.c = c;		this.p = p;	} 	@Override	public int compareTo(waterBorn arg0) {		if (this.c < arg0.c)			return -1;		if (this.c > arg0.c)			return 1;		return 0;	} 	@Override	public String toString() {		return "waterBorn [t=" + t + ", c=" + c + ", p=" + p + "]";	}}
