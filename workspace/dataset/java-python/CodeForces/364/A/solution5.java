import java.util.*;import java.io.*;import static java.lang.Math.*; public class Main{    /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }     public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);    public static final int MOD = (int)1e9 + 7;     public static void main(String[] args)    {        // Use long to prevent overflow        int[] occurances = new int[36001];        long totalOccurances = 0;        int a = in.nextInt();        char[] str = in.nextLine().toCharArray();        int n = str.length;                int[] pref = new int[n];        pref[0] = str[0]-'0';                for (int i = 1; i < n; i++)        {            pref[i] = pref[i - 1] + (str[i]-'0');        }                for (int i = 0; i < n; i++)        {            for (int j = 0; j <= i; j++)            {                occurances[pref[i] - (j - 1 > -1 ? pref[j - 1] : 0)]++;                totalOccurances++;            }        }                long answer = 0;        for (int i = 0; i < n; i++)        {            for (int j = 0; j <= i; j++)            {                int curSum = pref[i] - (j - 1 > -1 ? pref[j - 1] : 0);                                if (curSum == 0 && a == 0)                {                    answer += totalOccurances;                }                                else if (curSum != 0 && a % curSum == 0)                {                    answer += a / curSum < occurances.length ? occurances[a / curSum] : 0;                }            }        }                out.println(answer);                out.close();    }   }             
