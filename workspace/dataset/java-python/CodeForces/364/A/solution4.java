import java.io.*;import java.lang.reflect.Array;import java.util.*;import static java.lang.Integer.min;import static java.lang.Long.max; public final class Main {        static FastScanner in=new FastScanner();        static PrintWriter out=new PrintWriter(System.out);         /*        Never use sorting on 1-indexed array! or be very careful about negative values and stuff        read the statement carefully!        What about corner cases a=0?        */        public static void main(String[]args) {                int a=in.nextInt();                String s=in.next();                int n=s.length();                Map<Integer,Integer>map=new HashMap<>();                for (int i=0;i<n;i++){                        int sum=0;                        for (int j=i;j<n;j++){                                sum+=s.charAt(j)-'0';                                map.put(sum, map.getOrDefault(sum, 0) + 1);                        }                }                 long ans=0;                if(a==0){                        ans=(long)map.getOrDefault(0,0)*n*(n+1)/2;                        ans*=2;                        ans-=(long)map.getOrDefault(0,0)*(long)map.getOrDefault(0,0);                }else for (int i=0;i<n;i++){                        int sum=0;                        for (int j=i;j<n;j++){                                sum+=s.charAt(j)-'0';                                if(sum!=0&&a%sum==0){                                        ans+=map.getOrDefault(a/sum,0);                                }                        }                }                  out.println(ans);                out.close();        }            static long lcm(long a,long b, long c){                return lcm(a,lcm(b,c));        }        static long lcm(long a,long b){                return a*b/gcd(a,b);        }        static long gcd(long a,long b) {                if (a == 0) return b;                return gcd(b%a,a);        }        static void printArray(long[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(int[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(String[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(double[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(boolean[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static class Pair implements Comparable<Pair>{                int first,second;                public Pair(int a,int b) {                        first=a;                        second=b;                }                @Override                public int compareTo(Pair o) {                        return first-o.first;                }        }        static class FastScanner{                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));                StringTokenizer st=new StringTokenizer("");                String next(){                        while(!st.hasMoreTokens())                                try{                                        st=new StringTokenizer(br.readLine());                                }catch(IOException e){                                        e.printStackTrace();                                }                        return st.nextToken();                }                int nextInt() {                        return Integer.parseInt(next());                }                int[] nextArray(int n,int m) {                        int[] a=new int[n+m];                        for (int i=m;i<n+m;i++)a[i]=nextInt();                        return a;                }                long nextLong() {                        return Long.parseLong(next());                }                double nextDouble() {                        return Double.parseDouble(next());                }        }}
