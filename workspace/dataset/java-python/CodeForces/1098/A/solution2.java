import java.io.*;import java.util.*; public class Main {    static int flag=0;    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            ArrayList<Integer> adj[]=new ArrayList[n+1];            Vertex V[]=new Vertex[n+1];            for(int i=1;i<=n;i++)            {                adj[i]=new ArrayList<>();            }            for(int i=2;i<=n;i++)            {                int p=input.nextInt();                adj[p].add(i);                adj[i].add(p);            }            for(int i=1;i<=n;i++)            {                int s=input.nextInt();                V[i]=new Vertex(i,s,0);            }            bfs(adj,V,1);            V[1].a=V[1].s;            if(flag==1)            {                out.println(-1);            }            else            {                for(int i=2;i<=n;i++)                {                    if(V[i].s!=-1)                    {                        int s=V[i].parent.a+V[i].parent.parent.s;                        V[i].a=V[i].s-s;                    }                }                long ans=0;                for(int i=1;i<=n;i++)                {                    ans+=V[i].a;                }                out.println(ans);            }        }        out.close();    }    public static void bfs(ArrayList<Integer> adj[],Vertex V[],int s)    {        V[s].color="gray";        V[s].d=0;        V[s].parent=null;        Queue<Integer> q=new LinkedList<>();        q.add(s);        while(!q.isEmpty())        {            int k=q.poll();            Vertex u=V[k];            int min=Integer.MAX_VALUE;            for(int i=0;i<adj[k].size();i++)            {                int key=adj[k].get(i);                Vertex v=V[key];                if(v.color=="white")                {                    min=Math.min(min,v.s);                    q.add(key);                    v.color="gray";                    v.d=u.d+1;                    v.parent=u;                }            }            if(u.s==-1)            {                if(min==Integer.MAX_VALUE)                {                    u.a=0;                }                else                {                    u.a=min-u.parent.s;                    if(u.a<0)                    {                        flag=1;                    }                }            }            u.color="black";        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}class Vertex{    int key;    int d,f,s,a;    String color;    Vertex parent;    Vertex(int key,int s,int a)    {        this.s=s;        this.a=a;        this.key=key;        this.d=0;        this.f=0;        this.color="white";        this.parent=null;    }}
