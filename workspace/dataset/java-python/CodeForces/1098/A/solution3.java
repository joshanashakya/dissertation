import java.awt.*;import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.lang.reflect.Array;import java.util.Arrays; public class water {    public static long sum=0;    public static boolean ok=true;        public static int  dps(int a[][],int sx[],int x,int poi){            int add=-1;            if(sx[poi]!=-1&&sx[poi]<x){                ok=false;            }            else if(sx[poi]>=x){                add=sx[poi]-x;                sum+=add;                x=sx[poi];            }             if(a[poi].length==1){             }            else{                int add2=-1;                int lon=a[poi].length-2;                for(int i=1;i<a[poi].length;i++){                    int add3=dps(a,sx,x,a[poi][i]);                    if(add3==-1){                        lon--;                    }                    else if(add2==-1){                        add2=add3;                    }                    else if(add3<add2)                        add2=add3;                }                if(add2>=0&&add==-1){                    //System.out.println("lon"+lon);                    sum-=add2*(lon);                    add=add2;                }              }            return add;         }    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastInput input = new FastInput(inputStream);        FastOutput out = new FastOutput(outputStream);        int n = input.scanInt();        int a[][]=new int [n+1][];        int x[]=new int [n];        int len[]=new int[n+1];        int sx[]=new int [n+1];        for(int i=1;i<n;i++){            x[i]= input.scanInt();            len[x[i]]++;        }         for(int i=1;i<n+1;i++){            a[i]=new int[len[i]+1];        }        for(int i=1;i<n;i++){             a[x[i]][len[x[i]]--]=i+1;        }        for(int i=1;i<n+1;i++){            sx[i]= input.scanInt();        }        dps(a,sx,0,1);        if(ok)        System.out.println(sum);        else            System.out.println("-1");        out.close();    }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;        public FastInput(InputStream is) {            this.is = is;        }        private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }        public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }        public String next() {            return readString();        }        public int scanInt() {            int sign = 1;            skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }            int val = 0;            while (next >= '0' && next <= '9') {                val = val * 10 + next - '0';                next = read();            }            return (sign*val);        }         public String readString(StringBuilder builder) {            skipBlank();            while (next > 32) {                builder.append((char) next);                next = read();            }            return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }    static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }        public FastOutput append(int c) {            cache.append(c);            return this;        }        public FastOutput println(int c) {            return append(c).println();        }        public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            //cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }  }  
