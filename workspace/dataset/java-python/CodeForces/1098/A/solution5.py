#Code by Sounak, IIESTS#------------------------------warmup---------------------------- import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fractionimport collectionsfrom itertools import permutationsfrom collections import defaultdictimport threading   BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0        def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None         def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now-----------------------------------------------------n = int(input())p = [1] + list(map(int, input().split()))s = list(map(int, input().split()))p = [i-1 for i in p]for i in range(1,n):    if s[i] != -1 and (s[p[i]] == -1 or s[p[i]] > s[i]):        s[p[i]] = s[i]a = [s[0]]+[0]*(n-1)for i in range(1,n):    if s[i] == -1:        a[i] = 0    else:        a[i] = s[i]-s[p[i]]        if a[i] < 0:            print(-1)            quit()print(sum(a))
