import java.io.*;import java.util.*;import java.math.*;import java.lang.*; import static java.lang.Math.*; public class Main implements Runnable {    static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private SpaceCharFilter filter;        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1)                throw new InputMismatchException();             if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                 if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         public int nextInt() {            int c = read();             while (isSpaceChar(c))                c = read();             int sgn = 1;             if (c == '-') {                sgn = -1;                c = read();            }             int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));             return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;             do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public double nextDouble() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E')                    return res * Math.pow(10, nextInt());                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E')                        return res * Math.pow(10, nextInt());                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }         public String readString() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));             return res.toString();        }         public boolean isSpaceChar(int c) {            if (filter != null)                return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public String next() {            return readString();        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);        }    }     public static void main(String args[]) throws Exception {        new Thread(null, new Main(), "Main", 1 << 26).start();    }     void cal(int l, int r, int row, int[][] count) {        if (row < 0 || l > r)            return;         if (l == r) {            ans++;            return;        }         if (r - l == count[row][r] - count[row][l]) {            cal(l + 1, r - 1, row - 1, count);        } else            return;    }     int ans = 0;     public void run() {        InputReader sc = new InputReader(System.in);        PrintWriter w = new PrintWriter(System.out);         int t = sc.nextInt();        while (t-- > 0) {            ans = 0;            int n = sc.nextInt();            int m = sc.nextInt();             char[][] arr = new char[n][m];             for (int i = 0; i < n; i++) {                String s = sc.next();                for (int j = 0; j < m; j++) {                    arr[i][j] = s.charAt(j);                }            }             int count[][] = new int[n][m];            for (int i = 0; i < m; i++)                count[n - 1][i] = (arr[n - 1][i] == '*') ? 1 : 0;             for (int i = n - 2; i >= 0; i--) {                for (int j = 0; j < m; j++) {                    if (arr[i][j] == '*') {                        if (j == 0 || j == m - 1) {                            count[i][j] = 1;                        } else {                            count[i][j] = Math.min(Math.min(count[i + 1][j + 1], count[i + 1][j - 1]), count[i + 1][j])                                    + 1;                        }                    }                }            }             for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    ans += count[i][j];                }            }             // int last = 0;            // for (int i = n - 1; i >= 0; i--) {            // last = -1;            // for (int j = 0; j < m; j++) {            // if (count[i][j] > 0) {            // for (int k = j + 2; k < m; k += 2) {            // if (count[i][k] > 0 && count[i][k] > count[i][j]) {            // cal(j, k, i, count);            // } else            // break;            // }            // }            // // cal(last, j, i, count);            // }            // }             // for (int i = 0; i < n; i++) {            // for (int j = 0; j < m; j++) {            // w.print(count[i][j] + " ");            // }            // w.println();            // }             w.println(ans);         }         w.close();    }}
