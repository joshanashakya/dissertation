import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, FastReader in, PrintWriter out) {            int n = in.nextInt();            int m = 5;            int[][] a = in.nextIntMap(n, m);            int[] solved = new int[m];            int[] cost = new int[m];            int[] score = new int[n];            for (int[] aa : a) {                for (int i = 0; i < m; ++i) {                    if (aa[i] == -1) continue;                    ++solved[i];                }            }             for (int bots = 0; bots <= 31 * n; ++bots) {                for (int j = 0; j < m; ++j) {                    int total = n + bots;                    int cur = solved[j];                    if (a[0][j] != -1 && a[1][j] != -1 && a[0][j] > a[1][j]) {                        cur += bots;                    }                    cost[j] = 500;                    while (cost[j] < 500 * 6 && 2 * cur <= total) {                        cost[j] += 500;                        cur <<= 1;                    }                }                for (int i = 0; i < 2; ++i) {                    score[i] = 0;                    for (int j = 0; j < m; ++j) {                        if (a[i][j] == -1) continue;                        score[i] += cost[j] / 250 * (250 - a[i][j]);                    }                }                if (score[0] > score[1]) {                    out.println(bots);                    return;                }            }            out.println(-1);        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int pnumChars;         public FastReader(InputStream stream) {            this.stream = stream;        }         private int pread() {            if (pnumChars == -1) {                throw new InputMismatchException();            }            if (curChar >= pnumChars) {                curChar = 0;                try {                    pnumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (pnumChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = pread();            while (isSpaceChar(c))                c = pread();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = pread();            }            int res = 0;            do {                if (c == ',') {                    c = pread();                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = pread();            } while (!isSpaceChar(c));            return res * sgn;        }         public int[] nextIntArray(int n) {            int[] array = new int[n];            for (int i = 0; i < n; i++) {                array[i] = nextInt();            }            return array;        }         public int[][] nextIntMap(int n, int m) {            int[][] array = new int[n][];            for (int i = 0; i < n; i++) {                array[i] = nextIntArray(m);            }            return array;        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }} 
