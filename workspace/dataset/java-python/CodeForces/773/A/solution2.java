import java.io.BufferedReader;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.StringTokenizer;  public class Main {      public static class node {        public BigInteger val;     public node() {        this.val = BigInteger.ZERO;    }}     static BigInteger one = new BigInteger("-1");    public static BigInteger extend_gcd(BigInteger a, BigInteger b,                                        node x, node y, BigInteger d) {        if (b.equals(BigInteger.ZERO)) {            x.val = d.divide(a);            y.val = BigInteger.ZERO;            return a;        }        else {            BigInteger r = extend_gcd(b, a.mod(b), y, x, d);            y.val = y.val.subtract(x.val.multiply(a.divide(b)));            return r;        }    }     public static void main(String args[]) throws Exception {         BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer s=new StringTokenizer(buf.readLine());         int t = Integer.parseInt(s.nextToken());        for(int i=0;i<t;i++) {            s = new StringTokenizer(buf.readLine());            BigInteger a = new BigInteger(s.nextToken());            BigInteger b = new BigInteger(s.nextToken());            BigInteger p = new BigInteger(s.nextToken());            BigInteger q = new BigInteger(s.nextToken());            if (p.equals(BigInteger.ZERO)) {                if (a.equals(BigInteger.ZERO)) System.out.println(0);                else System.out.println(-1);                continue;            }            if (p.equals(q)) {                System.out.println(a.equals(b) ? 0 : -1); continue;            }             BigInteger g = b.multiply(p).subtract(a.multiply(q));            node X = new node();            node Y = new node();            BigInteger x=BigInteger.ZERO,y=BigInteger.ZERO;            extend_gcd(q,p,X,Y,g);            x = X.val;            y = Y.val.multiply(one);             x = x.mod(p);            if (x.compareTo(BigInteger.ZERO) < 0) x= x.add(p);            y = q.multiply(x).subtract(g).divide(p);            if (y.compareTo(BigInteger.ZERO) < 0) {                y=y.mod(q); if (y.compareTo(BigInteger.ZERO) < 0) y=y.add(q);                x = p.multiply(y).add(g).divide(q);            }            if (y.compareTo(x)<0) {                BigInteger lk = x.subtract(y).divide(q.subtract(p));                x=x.add(lk.multiply(p));                y=y.add(lk.multiply(q));                if (y.compareTo(x) < 0) {                    x=x.add(p); y=y.add(q);                }            }            System.out.println(y);        }    }  }
