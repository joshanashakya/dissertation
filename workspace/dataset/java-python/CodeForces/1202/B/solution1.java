import java.util.*;import java.io.*;import java.math.*; public class Main { 	static PrintWriter pw = new PrintWriter(System.out); 	public static void main(String[] args) throws IOException, InterruptedException {		Scanner sc = new Scanner(System.in);		char[] in = sc.next().toCharArray();		int[] arr = new int[in.length];		for (int i = 0; i < in.length; i++) {			arr[i] = in[i] - '0';		}		long[][] mat = new long[10][10];		for (int i = 0; i < mat.length; i++) {			for (int j = i; j < mat.length; j++) {				int[][] dist = dist(i, j);				long sum = 0;				boolean can = true;				for (int k = 0; k < arr.length - 1; k++) {					if (dist[arr[k]][arr[k + 1]] == (int) 1e9) {						can = false;						break;					} else						sum += dist[arr[k]][arr[k + 1]];				}				mat[j][i] = mat[i][j] = can ? sum : -1;			}		}		for (int i = 0; i < mat.length; i++) {			for (int j = 0; j < mat.length; j++) {				pw.print(mat[i][j] + " ");			}			pw.println();		}//		dist(1, 3);		pw.close();	} 	static int[][] dist(int x, int y) {		int[][] dist = new int[10][10];		for (int i = 0; i < 10; i++) {			Arrays.fill(dist[i], (int) 1e9);//			TreeMap<Integer, Integer> tm = new TreeMap<>();//			tm.put((i + x) % 10, 0);//			tm.put((i + y) % 10, 0);//			while (!tm.isEmpty()) {//				pw.println(tm);//				int a = tm.firstKey(), b = tm.get(a);//				dist[i][a] = Math.min(b, dist[i][a]);//				tm.remove(a);//				if (dist[i][(a + x) % 10] > b + 1 && !tm.containsKey((a + x) % 10)) {//					tm.put((a + x) % 10, b + 1);//				}//				if (dist[i][(a + y) % 10] > b + 1 && !tm.containsKey((a + y) % 10)) {//					tm.put((a + y) % 10, b + 1);//				}//			}			boolean[][] arr = new boolean[10][10];			arr[0][(i + x) % 10] = true;			arr[0][(i + y) % 10] = true;			for (int j = 0; j < 10; j++) {				for (int k = 0; k < 10; k++) {					if (arr[j][k]) {						dist[i][k] = Math.min(dist[i][k], j);						if (j<9) {							arr[j + 1][(k + x) % 10] = true;							arr[j + 1][(k + y) % 10] = true;							}					}				}			}		}//		for (int i = 0; i < dist.length; i++) {//			for (int j = 0; j < dist.length; j++) {//				pw.print(dist[i][j] + " ");//			}//			pw.println();//		}		return dist;	} 	public static class pair implements Comparable<pair> {		long x;		long y; 		public pair(long x, long y) {			this.x = x;			this.y = y;		} 		public String toString() {			return x + " " + y;		} 		public boolean equals(Object o) {			if (o instanceof pair) {				pair p = (pair) o;				return p.x == x && p.y == y;			}			return false;		} 		public int hashCode() {			return new Double(x).hashCode() * 31 + new Double(y).hashCode();		} 		public int compareTo(pair other) {			if (this.x == other.x) {				return Long.compare(this.y, other.y);			}			return Long.compare(this.x, other.x);		}	} 	public static class tuble implements Comparable<tuble> {		int x;		int y;		int z; 		public tuble(int x, int y, int z) {			this.x = x;			this.y = y;			this.z = z;		} 		public String toString() {			return x + " " + y + " " + z;		} 		public int compareTo(tuble other) {			if (this.x == other.x) {				if (this.y == other.y)					return this.z - other.z;				return this.y - other.y;			} else {				return this.x - other.x;			}		}	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public Scanner(FileReader r) {			br = new BufferedReader(r);		} 		public boolean hasNext() {			// TODO Auto-generated method stub			return false;		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public double nextDouble() throws IOException {			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if (x.charAt(0) == '-') {				neg = true;				start++;			}			for (int i = start; i < x.length(); i++)				if (x.charAt(i) == '.') {					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				} else {					sb.append(x.charAt(i));					if (dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg ? -1 : 1);		} 		public boolean ready() throws IOException {			return br.ready();		} 	}}
