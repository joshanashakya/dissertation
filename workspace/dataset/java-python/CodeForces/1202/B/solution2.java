//package codeforces.educational70; import java.io.*;import java.util.*; public class B {    public static void main(String[] args) {//        try {//            FastScanner in = new FastScanner(new FileInputStream("src/input.in"));//            PrintWriter out = new PrintWriter(new FileOutputStream("src/output.out"));         FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);             solve(1,in,out);//        } catch (IOException e) {//            e.printStackTrace();//        }    }     private static void solve(int q, FastScanner in, PrintWriter out) {        for (int qq = 0; qq < q; qq++) {            String s=in.next();            int[][] comb = new int[10][10];            for(int i = 0; i < s.length() - 1; i++) {                comb[s.charAt(i) - '0'][s.charAt(i + 1) - '0']++;            }            //x,y,a,b            int[][][][] minInsert = new int[10][10][10][10];            for(int x = 0; x < 10; x++) {                for(int y = 0; y < 10; y++) {                    for(int a = 0; a < 10; a++) {                        Arrays.fill(minInsert[x][y][a], Integer.MAX_VALUE);                    }                }            }            for(int x = 0; x < 10; x++) {                for(int y = 0; y < 10; y++) {                    for(int a = 0; a < 10; a++) {                        for(int cntx = 0; cntx < 10; cntx++) {                            for(int cnty = 0; cnty < 10; cnty++) {//                                if(x == 6 && y == 8 && a == 8 && cntx == 1 && cnty == 0) {//                                    out.print("a");//                                }                                if(cntx + cnty == 0) {                                    continue;                                }                                int b = (a + cntx * x + cnty * y) % 10;                                minInsert[x][y][a][b] = Math.min(minInsert[x][y][a][b], cntx + cnty);                            }                        }                    }                }            } //            out.println(minInsert[6][8][0][8]);//            out.println(minInsert[6][8][8][4]);//            out.println(minInsert[6][8][4][0]);//            out.println(comb[0][8]);//            out.println(comb[8][4]);//            out.println(comb[4][0]);//            for(int i = 0; i < 10; i++) {//                for(int j = 0; j < 10; j++) {//                    out.print(minInsert[6][8][i][j] + " ");//                }//                out.println();//            }            int[][] ans = new int[10][10];            for(int x = 0; x < 10; x++) {                for(int y = 0; y < 10; y++) {//                    if(x == 6 && y == 8) {//                        out.println();//                    }                    boolean can = true;                    for(int i = 0; i < 10; i++) {                        for(int j = 0; j < 10; j++) {                            if(comb[i][j] > 0 && minInsert[x][y][i][j] == Integer.MAX_VALUE) {                                ans[x][y] = -1;                                can = false;                                break;                            }                            else {                                ans[x][y] += comb[i][j] * (minInsert[x][y][i][j] - 1);                            }                        }                        if(!can) {                            break;                        }                    }                }            }            for(int x = 0; x < 10; x++) {                for(int y = 0; y < 10; y++) {                    out.print(ans[x][y] + " ");                }                out.println();            }        }        out.close();    } //    static int bfs(int x, int y, int s, int t) {//        boolean[] seen = new boolean[10];//        int dist = 0;//        Deque<Integer> q = new ArrayDeque<>();//        q.addLast(s);//        seen[s] = true;//        boolean reach = false;////        while(q.size() > 0) {//            int sz = q.size();//            for(int i = 0; i < sz; i++) {//                int curr = q.pollFirst();//                if(curr == t) {//                    reach = true;//                    break;//                }//                if(!seen[(curr + x) % 10]) {//                    q.addLast((curr + x) % 10);//                    seen[(curr + x) % 10] = true;//                }//                if(!seen[(curr + y) % 10]) {//                    q.addLast((curr + y) % 10);//                    seen[(curr + y) % 10] = true;//                }//            }//            if(reach) {//                break;//            }//            dist++;//        }//        return reach ? dist : -1;//    }     private static class FastScanner {        BufferedReader br;        StringTokenizer st;         FastScanner(InputStream stream) {            try {                br = new BufferedReader(new InputStreamReader(stream));            } catch (Exception e) {                e.printStackTrace();            }        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         Integer[] nextIntArray(int n) {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++) {                a[i] = nextInt();            }            return a;        }         Long[] nextLongArray(int n) {            Long[] a = new Long[n];            for (int i = 0; i < n; i++) {                a[i] = nextLong();            }            return a;        }    }}  
