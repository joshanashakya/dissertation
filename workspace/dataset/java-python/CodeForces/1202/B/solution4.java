import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.Arrays;import java.util.InputMismatchException; public class Main { 	private static final String NO = "NO";	private static final String YES = "YES";	InputStream is;	PrintWriter out;	String INPUT = ""; 	private static final long MOD = 998244353L;	private static final int MAX = 100000; 	void solve() {		StringBuffer sb = new StringBuffer(); 		int[] a = getInts();		long[][] ret = new long[10][10];		for (int i = 0; i <= 9; i++)			for (int j = i; j <= 9; j++) {				int[][] tr = getTr(i, j);				long ans = 0;				for (int k = 1; k < a.length; k++) {					int c = tr[a[k - 1]][a[k]];					if (c >= MAX) {						ans = -1;						break;					} else						ans += c - 1;				}				ret[i][j] = ret[j][i] = ans;			}		for (int i = 0; i <= 9; i++) {			for (int j = 0; j <= 9; j++)				sb.append(ret[i][j]).append(' ');			sb.append(System.lineSeparator());		}		out.println(sb);	} 	private int[][] getTr(int i, int j) {		int[][] ret = new int[10][10];		for (int r = 0; r < 10; r++) {			Arrays.fill(ret[r], MAX);			ArrayDeque<Integer> q = new ArrayDeque<Integer>();			q.add(r);			int dep = 0;			while (!q.isEmpty()) {				int sz = q.size();				for (int c = 0; c < sz; c++) {					Integer t = q.poll();					if (ret[r][t] == MAX) {						if (dep > 0)							ret[r][t] = dep;						q.add((t + i) % 10);						q.add((t + j) % 10);					}				}				dep++;			}		}		return ret;	} 	private int[] getInts() {		char[] a = ns().toCharArray();		int[] ret = new int[a.length];		for (int i = 0; i < a.length; i++)			ret[i] = a[i] - '0';		return ret;	} 	long power(long a, long b) {		long x = 1, y = a;		while (b > 0) {			if (b % 2 != 0) {				x = (x * y) % MOD;			}			y = (y * y) % MOD;			b /= 2;		}		return x % MOD;	} 	private long gcd(long a, long b) {		while (a != 0) {			long tmp = b % a;			b = a;			a = tmp;		}		return b;	} 	void run() throws Exception {		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());		out = new PrintWriter(System.out); 		long s = System.currentTimeMillis();		solve();		out.flush();		if (!INPUT.isEmpty())			tr(System.currentTimeMillis() - s + "ms");	} 	public static void main(String[] args) throws Exception {		new Main().run();	} 	private byte[] inbuf = new byte[1024];	public int lenbuf = 0, ptrbuf = 0;	private boolean vis[]; 	private int readByte() {		if (lenbuf == -1)			throw new InputMismatchException();		if (ptrbuf >= lenbuf) {			ptrbuf = 0;			try {				lenbuf = is.read(inbuf);			} catch (IOException e) {				throw new InputMismatchException();			}			if (lenbuf <= 0)				return -1;		}		return inbuf[ptrbuf++];	} 	private boolean isSpaceChar(int c) {		return !(c >= 33 && c <= 126);	} 	private int skip() {		int b;		while ((b = readByte()) != -1 && isSpaceChar(b))			;		return b;	} 	private double nd() {		return Double.parseDouble(ns());	} 	private char nc() {		return (char) skip();	} 	private String ns() {		int b = skip();		StringBuilder sb = new StringBuilder();		while (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != '									// ')			sb.appendCodePoint(b);			b = readByte();		}		return sb.toString();	} 	private char[] ns(int n) {		char[] buf = new char[n];		int b = skip(), p = 0;		while (p < n) {			if (!(isSpaceChar(b)))				buf[p++] = (char) b;			b = readByte();		}		return n == p ? buf : Arrays.copyOf(buf, p);	} 	private char[][] nm(int n, int m) {		char[][] map = new char[n][];		for (int i = 0; i < n; i++)			map[i] = ns(m);		return map;	} 	private int[] na(int n) {		int[] a = new int[n];		for (int i = 0; i < n; i++)			a[i] = ni();		return a;	} 	private Integer[] na2(int n) {		Integer[] a = new Integer[n];		for (int i = 0; i < n; i++)			a[i] = ni();		return a;	} 	private int[][] na(int n, int m) {		int[][] a = new int[n][];		for (int i = 0; i < n; i++)			a[i] = na(m);		return a;	} 	private Integer[][] na2(int n, int m) {		Integer[][] a = new Integer[n][];		for (int i = 0; i < n; i++)			a[i] = na2(m);		return a;	} 	private int ni() {		int num = 0, b;		boolean minus = false;		while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))			;		if (b == '-') {			minus = true;			b = readByte();		} 		while (true) {			if (b >= '0' && b <= '9') {				num = num * 10 + (b - '0');			} else {				return minus ? -num : num;			}			b = readByte();		}	} 	private long nl() {		long num = 0;		int b;		boolean minus = false;		while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))			;		if (b == '-') {			minus = true;			b = readByte();		} 		while (true) {			if (b >= '0' && b <= '9') {				num = num * 10 + (b - '0');			} else {				return minus ? -num : num;			}			b = readByte();		}	} 	private static void tr(Object... o) {		System.out.println(Arrays.deepToString(o));	}}
