import java.io.IOException;import java.util.*;import java.util.Arrays;import java.util.Scanner;Â public class Bit_year{		public static void main(String[] args) throws IOException {				Scanner sc = new Scanner(System.in);		int T  =sc.nextInt();		while(T-->0)		{			int n  =sc.nextInt();			LinkedList<Integer>[] adj = new LinkedList[n+1];			for(int i=1;i<=n;i++)adj[i]=new LinkedList();			Set<Integer> prince = new HashSet<Integer>();			for(int i=1;i<=n;i++)			{				int s = sc.nextInt();				while(s-->0)				{					adj[i].add(sc.nextInt());				}				Collections.sort(adj[i]);				prince.add(i);			}			boolean[] visited = new boolean[n+1];			boolean[] visitedD = new boolean[n+1];			for(int i=1;i<=n;i++)			{				Iterator itr = adj[i].listIterator();				while(itr.hasNext())				{					int m = (int)itr.next();					if(!visited[m])					{						visited[m]=true;						prince.remove(m);						visitedD[i]=true;						break;					}				}			}			//System.out.println("Left over prince = "+prince.toString());			boolean found=false;			int dd=-1,prin=-1;			for(int i=1;i<=n;i++)			{				if(!visitedD[i])				{					for(int pr : prince)					{						if(!adj[i].contains(pr))						{							dd=i;							prin=pr;							found=true;							break;						}					}				}				if(found)break;			}						if(!found)			{				System.out.println("OPTIMAL");			}			else			{				System.out.println("IMPROVE");				System.out.println(dd+" "+prin);			}		}	}}
