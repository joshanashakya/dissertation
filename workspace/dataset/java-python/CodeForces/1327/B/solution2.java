import java.io.BufferedWriter;import java.io.IOException;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Scanner;Â public class PrincessesAndPrinces {    public static void main(String[] args) {                Scanner scanner = new Scanner(System.in);        int test = scanner.nextInt();        try (BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out))) {                outerLoop:            while (test-- > 0) {                int n = scanner.nextInt();                boolean[] isReserved = new boolean[n + 1];                List<Integer> single = new ArrayList<>();                HashSet<Integer> singleP = new HashSet<>();                List<List<Integer>> priority = new ArrayList<>(n + 1);                priority.add(new ArrayList<>());                for (int i = 1; i <= n; i++) {                    singleP.add(i);                    int k = scanner.nextInt();                    List<Integer> t = new ArrayList<>(k);                    for (int j = 1; j <= k; j++) {                        int temp = scanner.nextInt();                        t.add(temp);                    }                    priority.add(t);                }                for (int i = 1; i <= n; i++) {                    boolean flag = false;                    for (int j : priority.get(i)) {                        if (!isReserved[j]) {                            isReserved[j] = true;                            flag = true;                            singleP.remove(j);                            break;                        }                    }                    if (!flag) {                        single.add(i);                    }                }                if (single.size() == 0) {                    output.write("OPTIMAL\n");                } else {                    for (int i : single) {                        for (int j : singleP) {                            if (!priority.get(i).contains(j)) {                                output.write("IMPROVE\n");                                output.write(i + " " + j + "\n");                                continue outerLoop;                            }                        }                    }                    output.write("OPTIMAL\n");                }                            }            output.flush();        } catch (IOException e) {                                }            }}
