import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     static int n, m, k;    static int[][] map;     public void solve() throws IOException{         n = in.nextInt(); m = in.nextInt(); k = in.nextInt();        map = new int[n][m];                for(int i = 0; i < k; i++){            int x = in.nextInt() - 1;            int y = in.nextInt() - 1;            map[x][y] = 1;             if((check(x - 1, y) && check(x - 1, y - 1) && check(x, y - 1)) ||               (check(x - 1, y) && check(x - 1, y + 1) && check(x, y + 1)) ||               (check(x + 1, y) && check(x + 1 ,y + 1) && check(x, y + 1)) ||               (check(x + 1, y) && check(x + 1, y - 1) && check(x, y - 1))){                out.print(i + 1);                return;            }        }         out.println(0);        return;    }       public boolean check(int x, int y){        return x >= 0 && x < n && y >= 0 && y < m && (map[x][y] == 1);    }   }
