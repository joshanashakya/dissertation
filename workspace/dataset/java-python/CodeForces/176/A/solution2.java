 import java.lang.reflect.Array;import java.util.*; public class Main {    private static Scanner in = new Scanner(System.in);         public static void main(String[] args) {         int n = in.nextInt();        int m = in.nextInt();        int k = in.nextInt();         List<Al> alList = new ArrayList<>();         for(int i = 0; i < n; i++){            String s = in.next();            Al al = new Al(s);            for(int j = 0; j < m; j++){                int num1 = in.nextInt();                int num2 = in.nextInt();                int num3 = in.nextInt();                al.list.add(new A(num1,num2,num3));            }            alList.add(al);        }         Vector<Integer> vector1 = new Vector<>();         for(int i = 0; i < n; i++){            Al ali = alList.get(i);            for(int j = 0; j < n; j++){                Al alj = alList.get(j);                vector1.add(ali.getPrice(alj,k));            }        }        int ans1 = 0;        for(int i = 0; i < vector1.size(); i++){            ans1 = Math.max(ans1,vector1.get(i));        }        System.out.println(ans1);    }}  class A{     int ip;    int np;    int w;     public A( int ip, int np,int w) {        this.w = w;        this.ip = ip;        this.np = np;    } } class C implements Comparable{    int dp;    int index;     public int getDp() {        return dp;    }     public void setDp(int dp) {        this.dp = dp;    }     public int getIndex() {        return index;    }     public void setIndex(int index) {        this.index = index;    }     @Override    public String toString() {        return "C{" +                "dp=" + dp +                ", index=" + index +                '}';    }     @Override    public int compareTo(Object o) {        C c = (C) o;        if(this.dp > c.dp){            return -1;        }else if(this.dp < c.dp){            return 1;        }else            return 0;    }} class Al{    String ALName;    List<A> list = new ArrayList<>();     public Al(String ALName) {        this.ALName = ALName;    }     public String getALName() {        return ALName;    }     public void setALName(String ALName) {        this.ALName = ALName;    }     public List<A> getList() {        return list;    }     public void setList(List<A> list) {        this.list = list;    }     public int getPrice(Al al,int k){        int len = al.list.size();        Vector<C> cs = new Vector<>();         for(int i = 0; i < len; i++){            C c = new C();            c.dp = al.list.get(i).np - this.list.get(i).ip;            c.index = i;            cs.add(c);        }         Collections.sort(cs);         int j = 0;        int ans = 0;        while (k > 0 && j < len){            if(cs.get(j).dp > 0){                if(k < this.list.get(cs.get(j).index).w){                    ans = ans + cs.get(j).dp * k;                    k = 0;                    break;                }else{                    ans = ans + cs.get(j).dp * this.list.get(cs.get(j).index).w;                    k -= this.list.get(cs.get(j).index).w;                }            }            j++;        }         return ans;    }}       	 	      	 	  	   			  			
