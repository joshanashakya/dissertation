/* * akshaygupta26 */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.*;public class B {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		double zero=0;				double fact[]=new double[12];		fact[0]=fact[1]=1;		for(double i=2;i<=11;i++)			fact[(int)i]=fact[(int)i-1]*i;						while(test-->0)		{			char str1[]=sc.next().toCharArray();			char str2[]=sc.next().toCharArray();			int n=str1.length;			int pos1=0;			int neg1=0;			int pos2=0;			int neg2=0;			int extra=0;			for(int i=0;i<n;i++) {				if(str1[i] == '+') ++pos1;				else ++neg1;				if(str2[i] == '+') ++pos2;				else if(str2[i] == '-')++neg2;				else ++extra;			}						int posNeeded =0;			int negNeeded =0;						if(pos1>pos2) posNeeded+=pos1-pos2;			else negNeeded+=pos2-pos1;						if(neg1>neg2) negNeeded+=neg1-neg2;			else posNeeded+=neg2-neg1;						while(posNeeded+negNeeded<extra) {				++posNeeded;				++negNeeded;			}						if(posNeeded+negNeeded >extra) {								ans.append(String.format("%.12f", zero)+"\n");continue;			}						double favorable =((double)fact[posNeeded+negNeeded])/((double)fact[posNeeded] *(double)fact[negNeeded]);			double total = Math.pow(2, posNeeded+negNeeded);			double res =favorable/total;						ans.append(String.format("%.12f", res)+"\n");								}			    System.out.print(ans);	}             static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
