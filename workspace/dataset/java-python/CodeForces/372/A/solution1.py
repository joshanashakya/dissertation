import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)pr = lambda x:	xdef input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def solve():  	A = []	for _ in range(int(input())):		n, = aj()		A.append(n)	A.sort(reverse = True)	n = len(A)	ptr = n // 2	ans = n	for i in range(n // 2):		while ptr < n and A[ptr] * 2 > A[i]:			ptr += 1		if ptr < n and A[ptr] * 2 <= A[i]:			ans -= 1		ptr += 1	print(ans)   try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')	from aj import *except:	pass solve()
