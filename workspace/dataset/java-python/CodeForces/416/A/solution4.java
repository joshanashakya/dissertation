import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Scanner;import java.util.*;public class Main{static class FastReader{BufferedReader br;StringTokenizer st;public FastReader(){br = new BufferedReader(newInputStreamReader(System.in));}String next(){while (st == null || !st.hasMoreElements()){try{st = new StringTokenizer(br.readLine());}catch (IOException e){e.printStackTrace();}}return st.nextToken();}int nextInt(){return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}String nextLine(){String str = "";try{str = br.readLine();}catch (IOException e){e.printStackTrace();}return str;}}  public static void main(String[] args){FastReader fs=new FastReader();int n = fs.nextInt(); long lessthan = 2 * 1000 * 1000 * 1000;  // mxlong greaterthan = -1*lessthan;   // mn  while(n-- > 0){    String[] s = fs.nextLine().split(" ");    long num = Long.parseLong(s[1]);    String s1 = new String("");                        if( s[0].compareTo("<=")==0 )    {        if(s[2].compareTo("Y")==0)        {            lessthan = Math.min( lessthan, num );        }        else        {            greaterthan = Math.max(greaterthan,num+1 );        }    }    else if(s[0].compareTo(">=")==0)    {        if(s[2].compareTo("N")==0)        {            lessthan = Math.min(lessthan, num-1 );        }        else        {            greaterthan = Math.max(greaterthan,num);        }    }    else if(s[0].compareTo("<")==0)    {        if(s[2].compareTo("Y")==0)        {            lessthan = Math.min(lessthan, num-1 );        }        else        {            greaterthan = Math.max(greaterthan,num);        }    }    else    {        if(s[2].compareTo("N")==0)        {            lessthan = Math.min( lessthan, num );        }        else        {            greaterthan = Math.max(greaterthan,num+1 );        }    }} if( lessthan < greaterthan ){    System.out.println("Impossible");}else{    System.out.println(greaterthan);} }} 
