import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Arrays;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BArtUnion solver = new BArtUnion();        solver.solve(1, in, out);        out.close();    }     static class BArtUnion {        static int[][] grid;        static int n;        static int m;        static long[][] dp;         public void solve(int testNumber, InputReader in, OutputWriter out) {            m = in.nextInt();            n = in.nextInt();            grid = new int[m][n];            for (int i = 0; i < m; i++) {                for (int j = 0; j < n; j++) {                    grid[i][j] = in.nextInt();                }            }            dp = new long[m][n];            for (long[] row : dp) Arrays.fill(row, -1);            time(m - 1, n - 1);            for (int i = 0; i < m; i++) {                out.print(dp[i][n - 1] + " ");            }        }         static long time(int r, int c) {            if (r < 0 || c < 0) return 0;            if (dp[r][c] != -1) return dp[r][c];            return dp[r][c] = grid[r][c] + Math.max(time(r, c - 1), time(r - 1, c));        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void close() {            writer.close();        }     }} 
