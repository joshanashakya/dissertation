//package que_a; import java.io.*;import java.util.*;import java.math.*; public class utkarsh {     InputStream is;    PrintWriter out;        long mod = (long) (1e9 + 7), inf = (long) (3e18);        class pair {        int F, S;        pair(int f, int s) {            F = f;  S = s;        }    }        void solve() {        int n = ni();        int az = ni(), a[] = na(az);        int bz = ni(), b[] = na(bz);        int c[][] = new int[2][n];        for(int i = 1; i < n; i++) {            c[0][i] = az;   c[1][i] = bz;        }        int dp[][] = new int[3][n];        Queue <pair> q = new ArrayDeque<>();        q.add(new pair(0, 0));  q.add(new pair(1, 0));        dp[0][0] = dp[1][0] = 2;        while(!q.isEmpty()) {            pair p = q.poll();            if(dp[p.F][p.S] == 2) {                if(p.F == 0) {                    for(int x : b) {                        int v = (p.S + n - x) % n;                        if(dp[1][v] == 0) {                            dp[1][v] = 1;   q.add(new pair(1, v));                        }                    }                } else {                    for(int x : a) {                        int v = (p.S + n - x) % n;                        if(dp[0][v] == 0) {                            dp[0][v] = 1;   q.add(new pair(0, v));                        }                    }                }            } else {                if(p.F == 0) {                    for(int x : b) {                        int v = (p.S + n - x) % n;                        c[1][v]--;                        if(dp[1][v] == 0 && c[1][v] == 0) {                            dp[1][v] = 2;   q.add(new pair(1, v));                        }                    }                } else {                    for(int x : a) {                        int v = (p.S + n - x) % n;                        c[0][v]--;                        if(dp[0][v] == 0 && c[0][v] == 0) {                            dp[0][v] = 2;   q.add(new pair(0, v));                        }                    }                }            }        }        for(int i = 0; i < 2; i++) {            int t = 0;            for(int j = 1; j < n; j++) {                out.print(dp[i][j] == 1 ? "Win " : (dp[i][j] == 2 ? "Lose " : "Loop "));            }            out.println();        }    }        long mp(long b, long e) {        long r = 1;        while(e > 0) {            if((e&1) == 1)  r = (r * b) % mod;            b = (b * b) % mod;            e >>= 1;        }        return r;    }     //---------- I/O Template ----------        public static void main(String[] args) { new utkarsh().run(); }    void run() {         is = System.in;        out = new PrintWriter(System.out);        solve();        out.flush();    }        byte input[] = new byte[1024];    int len = 0, ptr = 0;        int readByte() {         if(ptr >= len) { ptr = 0;             try { len = is.read(input); }             catch(IOException e) { throw new InputMismatchException(); }             if(len <= 0) { return -1; }         } return input[ptr++];    }    boolean isSpaceChar(int c) { return !( c >= 33 && c <= 126 ); }    int skip() {         int b = readByte();         while(b != -1 && isSpaceChar(b)) { b = readByte(); }         return b;    }        char nc() { return (char)skip(); }    String ns() {         int b = skip();         StringBuilder sb = new StringBuilder();         while(!isSpaceChar(b)) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    String nLine() {         int b = skip();         StringBuilder sb = new StringBuilder();         while( !(isSpaceChar(b) && b != ' ') ) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    int ni() {         int n = 0, b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         if(b == -1) { return -1; }  //no input         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }    long nl() {         long n = 0L;    int b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }     double nd() { return Double.parseDouble(ns()); }    float nf() { return Float.parseFloat(ns()); }    int[] na(int n) {         int a[] = new int[n];         for(int i = 0; i < n; i++) { a[i] = ni(); }         return a;    }    char[] ns(int n) {         char c[] = new char[n];         int i, b = skip();         for(i = 0; i < n; i++) {             if(isSpaceChar(b)) { break; }             c[i] = (char)b; b = readByte();         } return i == n ? c : Arrays.copyOf(c,i);    }}
