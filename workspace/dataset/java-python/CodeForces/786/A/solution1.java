import java.io.*;import java.util.*; public class A implements Runnable {	public static void main (String[] args) {new Thread(null, new A(), "_cf", 1 << 28).start();} 	public void run() {		FastScanner fs = new FastScanner();		PrintWriter out = new PrintWriter(System.out);		System.err.println(""); 		int n = fs.nextInt();		int[][] moves = new int[2][];		for(int i = 0; i < 2; i++) {			int k = fs.nextInt();			moves[i] = new int[k];			for(int j = 0; j < k; j++) moves[i][j] = fs.nextInt();		}		int[][] state = new int[2][n];		for(int[] e : state) Arrays.fill(e, -1);		state[0][0] = state[1][0] = 0;				ArrayDeque<Integer> bfs = new ArrayDeque<>();		bfs.add(0); bfs.add(0); bfs.add(1); bfs.add(0); 		int[][] stateHits = new int[2][n];		while(!bfs.isEmpty()) {			int turn = bfs.pollFirst(), pos = bfs.pollFirst();			boolean winning = state[turn][pos] > 0;			for(int i = 0; i < moves[turn^1].length; i++) {				int npos = pos - moves[turn^1][i];				if(npos < 0) npos += n;				if(state[turn^1][npos] != -1) continue;				if(!winning) {					state[turn^1][npos] = 1;					bfs.addLast(turn^1); bfs.addLast(npos);				}				else {					stateHits[turn^1][npos]++;					if(stateHits[turn^1][npos] == moves[turn^1].length) {						state[turn^1][npos] = 0;						bfs.addLast(turn^1); bfs.addLast(npos);					}				}			}		} 		String[] print = {"Loop", "Lose", "Win"};		for(int i = 0; i < 2; i++) {			for(int j = 1; j < n; j++) {				out.print(print[state[i][j]+1] + " ");			}			out.println();		} 		out.close();	} 	class FastScanner {		BufferedReader br;		StringTokenizer st;		public FastScanner() {			br = new BufferedReader(new InputStreamReader(System.in));			st = new StringTokenizer("");		}		String next() {			if(st.hasMoreTokens()) return st.nextToken();			try { st = new StringTokenizer(br.readLine()); } catch (Exception e) {}			return next();		}		int nextInt() {			return Integer.parseInt(next());		}	}}
