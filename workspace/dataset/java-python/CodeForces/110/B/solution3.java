/*If you want to aim high, aim highDon't let that studying and grades consume youJust live life young******************************If I'm the sun, you're the moonBecause when I go up, you go down*******************************I'm working for the day I will surpass you**************************************** */   import java.util.*;import java.awt.Point;import java.lang.Math; import java.util.Arrays;import java.util.Scanner;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.OutputStream;import java.util.Comparator;import java.math.BigInteger;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.stream.IntStream;         public class Main {                 static Scanner in = new Scanner(System.in);      static PrintWriter out = new PrintWriter(System.out);      public static void main(String[] args) {            Musk solver = new Musk();                                     solver.solve();                          out.close();    	 }        	    static class Musk {       public void solve() {            int N = in.nextInt();        StringBuilder output = new StringBuilder();        for (int n=0; n<N; n++) {            char c = (char) ('a' + (n%4));            output.append(c);        }        System.out.println(output);                }    }     	     public int factorial(int n) {            int fact = 1;            int i = 1;           while(i <= n) {             fact *= i;             i++;           }            return fact;    }             public static long gcd(long x,long y)    {    	if(x%y==0)    		return y;    	else    		return gcd(y,x%y);    }    public static int gcd(int x,int y)    {    	if(x%y==0)    		return y;    	else     		return gcd(y,x%y);    }    public static int abs(int a,int b)    {    	return (int)Math.abs(a-b);    }    public static long abs(long a,long b)    {    	return (long)Math.abs(a-b);    }    public static int max(int a,int b)    {    	if(a>b)    		return a;    	else    		return b;    }    public static int min(int a,int b)    {    	if(a>b)    		return b;    	else     		return a;    }    public static long max(long a,long b)    {    	if(a>b)    		return a;    	else    		return b;    }    public static long min(long a,long b)    {    	if(a>b)    		return b;    	else     		return a;    }              public static long pow(long n,long p,long m)    {    	 long  result = 1;    	  if(p==0)    	    return 1;    	if (p==1)    	    return n;    	while(p!=0)    	{    	    if(p%2==1)    	        result *= n;    	    if(result>=m)    	    result%=m;    	    p >>=1;    	    n*=n;    	    if(n>=m)    	    n%=m;    	}    	return result;    }    public static long pow(long n,long p)    {    	long  result = 1;    	  if(p==0)    	    return 1;    	if (p==1)    	    return n;    	while(p!=0)    	{    	    if(p%2==1)    	        result *= n;	        	    p >>=1;    	    n*=n;	        	}    	return result;         }         static long sort(int a[]){           int n=a.length;    	int b[]=new int[n];	    	return mergeSort(a,b,0,n-1);             }         static long mergeSort(int a[],int b[],long left,long right){         long c=0;         if(left<right){             long mid=left+(right-left)/2;    	 c= mergeSort(a,b,left,mid);    	 c+=mergeSort(a,b,mid+1,right);    	 c+=merge(a,b,left,mid+1,right);          }	    	return c;	     }    static long merge(int a[],int  b[],long left,long mid,long right){         long c=0;int i=(int)left;int j=(int)mid; int k=(int)left;         while(i<=(int)mid-1&&j<=(int)right){               if(a[i]<=a[j]){                   b[k++]=a[i++];               }              else{                    b[k++]=a[j++];c+=mid-i;              }         }                  while (i <= (int)mid - 1)                    b[k++] = a[i++];          while (j <= (int)right)                 b[k++] = a[j++];         for (i=(int)left; i <= (int)right; i++)     	        a[i] = b[i];    	        return c;          }               static class InputReader extends BufferedReader {        public InputReader(InputStream st) {            super(new InputStreamReader(st));        }         public String readLine() {            try {                return super.readLine();            } catch (IOException e) {                return null;            }        }         private int readByte() {            try {                return read();            } catch (IOException e) {                throw new RuntimeException();            }        }         public int ni() {            int num = 0, b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }             while (true) {                if (b >= '0' && b <= '9') {                    num = num * 10 + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public int[] na(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = ni();            return a;        }     }        }  
