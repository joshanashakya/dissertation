from collections import Counter as C,defaultdict as D,deque as Qfrom operator import itemgetter as Ifrom itertools import product as P,permutations as PERMUTfrom bisect import bisect_left as BL,bisect_right as BR,insort as INSORTfrom heapq import heappush as HPUSH,heappop as HPOPfrom math import floor as MF,ceil as MC, gcd as MG,factorial as F,sqrt as SQRT, inf as INFINITY,log as LOGfrom sys import stdin, stdoutINPUT=stdin.readlinePRINT=stdout.writeL=list;M=map def Player1():	print("") def Player2():	print("") def Yes():	PRINT("Yes\n") def No():	PRINT("No\n") def IsPrime(n): 	for i in range(2,MC(SQRT(n))+1):		if n%i==0:			return False	return True def Factors(x): 	ans=[] 	for i in range(1,MC(SQRT(x))+1):		if x%i==0:			ans.append(i)			if x%(x//i)==0:				ans.append(x//i)	return ansdef CheckPath(source,destination,g):	visited=[0]*101	q=Q()	q.append(source)	visited[source]=1	while q:		node=q.popleft()		if node==destination:			return 1		for v in g[node]:			if not visited[v]:				q.append(v)				visited[v]=1	return 0def Sieve(n):	prime=[1]*(n+1)	p=2	while p*p<=n:		if prime[p]:			for i in range(p*p,n+1,p):				prime[i]=0		p+=1	primes=[]	for p in range(2,n+1):		if prime[p]:			primes.append(p)	return primes def Prefix(a,n):	p=[]	for i in range(n):		if i==0:			p.append(a[0])		else:			p.append(p[-1]+a[i])	return pdef Suffix(a,n):	s=[0]*n	for i in range(n-1,-1,-1):		if i==n-1:			s[i]=a[i]		else:			s[i]=s[i+1]+a[i]	return sdef Spf(n):	spf=[0 for i in range(n)]	spf[1]=1	for i in range(2,n):		spf[i]=i	for i in range(4,n,2):		spf[i]=2	for i in range(3,MC(SQRT(n))+1):		if spf[i]==i:			for j in range(i*i,n,i):				if spf[j]==j:					spf[j]=i	return spf def DFS(g,s,visited,ans):	visited[s]=1		for u,c in g[s]: 		if visited[u]:			continue 		if c==ans[s]: 			if c==1:				ans[u]=2			else:				ans[u]=1		else:			ans[u]=c		DFS(g,u,visited,ans)  def lcm(a,b): 	return (a*b)//(MG(a,b))def Kadane(numbers): 	max_so_far=-INFINITY	max_ending_here=0	max_element=-INFINITY	for i in range(len(numbers)):		max_ending_here=max(max_ending_here+numbers[i],0)		max_so_far=max(max_ending_here,max_so_far)		max_element=max(max_element,numbers[i])	if max_so_far==0:		max_so_far=max_element	return max_so_far  def subset(start,a,res,ans):	res.append(ans)	for i in range(start,9):		subset(i+1,a,res,ans+[a[i]])  def Main(): 	for _ in range(int(INPUT())): 		n,r=M(int,INPUT().split( ))		a=sorted(M(int,INPUT().split( )))		d={}		arr=[]		for v in a:			if v not in d:				arr.append(v)			d[v]=1		minus=0;ans=0		for i in range(len(arr)-1,-1,-1):			check=arr[i]-minus			if check>0:				ans+=1				minus+=r		PRINT("%d\n"%(ans))           Main() 'mysql -u root -p'
