//stan hu taoimport static java.lang.Math.max;import static java.lang.Math.min;import static java.lang.Math.abs;import java.util.*;import java.io.*;import java.math.*;Â public class x1042B{    static final int INF = (Integer.MAX_VALUE-420)/3;    public static void main(String hi[]) throws Exception    {        BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(infile.readLine());        int N = Integer.parseInt(st.nextToken());        int[] best = new int[32];        Arrays.fill(best, INF);        for(int i=0; i < N; i++)        {            st = new StringTokenizer(infile.readLine());            int cost = Integer.parseInt(st.nextToken());            char[] a = st.nextToken().toCharArray();            int mask = 0;            for(char c: a)            {                mask |= (1<<(c-'A'));                best[(1<<(c-'A'))] = min(best[(1<<(c-'A'))], cost);            }            best[mask] = min(best[mask], cost);        }        int[] dp = new int[8];        Arrays.fill(dp, INF);        dp[0] = 0;        for(int mask=0; mask < 8; mask++)        {            for(int b=0; b < 3; b++)                if((mask&(1<<b)) > 0)                {                    int submask = mask-(1<<b);                    dp[mask] = min(dp[mask], dp[submask]+best[1<<b]);                }            dp[mask] = min(dp[mask], best[mask]);            if(debug)System.out.println(best[mask]);        }        if(dp[7] == INF)            dp[7] = -1;        System.out.println(dp[7]);    }    static boolean debug = false;    public static int[] readArr(int N, BufferedReader infile, StringTokenizer st) throws Exception    {        int[] arr = new int[N];        st = new StringTokenizer(infile.readLine());        for(int i=0; i < N; i++)            arr[i] = Integer.parseInt(st.nextToken());        return arr;    }}
