import java.io.*;import java.util.*;import java.math.*; public class B {    public static void main(String[] args) throws IOException {        FastScanner fs=new FastScanner();        PrintWriter out = new PrintWriter(System.out);        // int T = 1;         int T=fs.nextInt();        for (int tt=0; tt<T; tt++) {            int n = fs.nextInt();            int[] arr = fs.readArray(n);            int total=0,maxTogether=0;            boolean[] isPV = new boolean[n];            for (int i=1; i<n-1; i++) {                if (arr[i-1]>arr[i] && arr[i+1]>arr[i]) {                    isPV[i]=true;                    total++;                }                if (arr[i-1]<arr[i] && arr[i+1]<arr[i]) {                    isPV[i]=true;                    total++;                }            }            int best = total;             for (int i=1; i<n-1; i++) {                 boolean l=false,r=false;                                if (i+2<n) {                    r=checkPeakTrough(arr[i-1], arr[i+1], arr[i+2]);                    // out.println(r);                }                int minus = 0;                if (isPV[i]) {                    minus++;                }                if (isPV[i-1]) {                    minus++;                }                if (isPV[i+1]&&!r) {                    minus++;                }                if (!isPV[i+1]&&r) {                    minus--;                }                 best = Math.min(best, total-minus);                 l=false;r=false;                if (i-2>=0) {                    l=checkPeakTrough(arr[i-2], arr[i-1], arr[i+1]);                    // out.println(l);                 }                minus = 0;                if (isPV[i]) {                    minus++;                }                if (isPV[i-1]&&!l) {                    minus++;                }                if (isPV[i+1]) {                    minus++;                }                if (!isPV[i-1]&&l) {                    minus--;                }                best = Math.min(best, total-minus);            }            out.println(best);        }                out.close();    }     static boolean checkPeakTrough(int a, int b, int c) {        return a>b && c>b || a<b && c<b;    }     static final Random random=new Random();        static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    } }
