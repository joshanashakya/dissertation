import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer; public class HillAndValleys {  	public static int HV(int[] a) { 		int n = a.length;		int mask[] = new int[n];		/// 0 not hill nor valley , 1 hill , 2 valley 		for (int i = 1; i < n - 1; i++) {			if (a[i] > a[i - 1] && a[i] > a[i + 1])				mask[i] = 1;			else if (a[i] < a[i - 1] && a[i] < a[i + 1])				mask[i] = 2;		}		int max =0;		for (int i = 1; i < n - 1; i++) {			int tempMax = 0;			if (mask[i] == 1) {///// hill				if (mask[i - 1] == 2 && mask[i + 1] == 2) {/// both sides are valley					tempMax = 3;				} else if (mask[i - 1] == 2) {					tempMax = 2;					if (i + 2 < n && a[i + 1] > a[i + 2] && a[i + 1] > a[i - 1]) {						tempMax = 1;					} else if (i + 2 < n && a[i + 1] < a[i + 2] && a[i + 1] < a[i - 1]) {						tempMax = 1;					}				} else if (mask[i + 1] == 2) {					tempMax = 2;					if (i - 2 >= 0 && a[i - 1] > a[i - 2] && a[i - 1] > a[i + 1]) {						tempMax = 1;					} else if (i - 2 >= 0 && a[i - 1] < a[i - 2] && a[i - 1] < a[i + 1]) {						tempMax = 1;					}				} else {					tempMax = 1;				}			} else if (mask[i] == 2) {//// valley				if (mask[i - 1] == 1 && mask[i + 1] == 1) {/// both sides are valley					tempMax = 3;				} else if (mask[i - 1] == 1) {					tempMax = 2;					if (i + 2 < n && a[i + 1] > a[i + 2] && a[i + 1] > a[i - 1]) {						tempMax = 1;					} else if (i + 2 < n && a[i + 1] < a[i + 2] && a[i + 1] < a[i - 1]) {						tempMax = 1;					}				} else if (mask[i + 1] == 1) {					tempMax = 2;					if (i - 2 >= 0 && a[i - 1] > a[i - 2] && a[i - 1] > a[i + 1]) {						tempMax = 1;					} else if (i - 2 >= 0 && a[i - 1] < a[i - 2] && a[i - 1] < a[i + 1]) {						tempMax = 1;					}				} else {					tempMax = 1;				} 			} else {/// neither nor				tempMax = 0;			}          if(tempMax>max)max=tempMax;		}		int count = 0 ; 		for(int i = 0 ; i < n ; i++) {			if(mask[i]!=0)count++;		}		return count-max; 	}   	public static void main(String[] args) {		FastScanner sc = new FastScanner(System.in);		int t = sc.nextInt();		for (; t > 0; t--) {			int n = sc.nextInt();			int a[] = new int[n];			for (int i = 0; i < n; i++)				a[i] = sc.nextInt();		     System.out.println(HV(a));		} 	} 	static class FastScanner {		BufferedReader br;		StringTokenizer st; 		FastScanner(InputStream stream) {			try {				br = new BufferedReader(new InputStreamReader(stream));			} catch (Exception e) {				e.printStackTrace();			}		} 		String next() {			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() { 			return Long.parseLong(next());		}	} }
