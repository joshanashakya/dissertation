import java.io.*;import java.util.*;import java.util.concurrent.ThreadLocalRandom; import static java.lang.Math.abs;import static java.lang.Math.max; /** * Created by Katushka on 11.03.2020. */public class C {    static int[] readArray(int size, InputReader in) {        int[] a = new int[size];        for (int i = 0; i < size; i++) {            a[i] = in.nextInt();        }        return a;    }     static long[] readLongArray(int size, InputReader in) {        long[] a = new long[size];        for (int i = 0; i < size; i++) {            a[i] = in.nextLong();        }        return a;    }      public static void main(String[] args) {        InputReader in = new InputReader(System.in);        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         int n = in.nextInt();        int[][] starts = new int[1000001][2];        int[][] ends = new int[1000001][2];        Set<Integer> allNums = new HashSet<>();        for (int i =0; i < n; i++) {            int pair[] = new int[]{in.nextInt(), in.nextInt()};            starts[pair[0]] = pair;            ends[pair[1]] = pair;            allNums.add(pair[0]);            allNums.add(pair[1]);        }         allNums.remove(0);        int[] ans = new int[n];        int[] cur = starts[0];        int i = 1;        while (cur[1] != 0) {            ans[i] = cur[1];            cur = starts[cur[1]];            allNums.remove(ans[i]);            i += 2;        }         int e = allNums.iterator().next();        cur = starts[e];        List<Integer> tail = new ArrayList<>();        tail.add(e);        while (cur[1] != 0) {            tail.add(cur[1]);            cur = starts[cur[1]];        }        List<Integer> head = new ArrayList<>();        cur = ends[tail.get(0)];        while (cur[0] != 0) {            head.add(cur[0]);            cur = ends[cur[0]];        }         i = 0;        for (int j = head.size() - 1; j >= 0 ;j--) {            ans[i] = head.get(j);            i += 2;        }        for (Integer elem : tail) {            ans[i] = elem;            i += 2;        }        StringBuilder str = new StringBuilder();        for (int k : ans) {            str.append(k).append(" ");        }        out.println(str);        out.close();    }     private static long solveDummy3(long[] a) {        long max = 0;        for (int i = 0; i < a.length; i++) {            for (int j = i + 1; j < a.length; j++) {                for (int k = j + 1; k < a.length; k++) {                    if ((a[i] | a[j] | a[k]) > max) {                        max = (a[i] | a[j] | a[k]);                    }                }            }        }        return max;    }     private static long solveDummy2(long[] a) {        long max = 0;        for (int i = 0; i < a.length; i++) {            for (int j = i + 1; j < a.length; j++) {                if ((a[i] | a[j]) > max) {                    max = (a[i] | a[j]);                }             }        }        return max;    }     private static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextString() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public char nextChar() {            return next().charAt(0);        }    }}
