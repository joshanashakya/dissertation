//package algoprog.level5.d.a; import java.io.*;import java.util.StringTokenizer; public class TreeHash {     public static void main(String[] args) throws IOException {        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int height = Integer.parseInt(br.readLine());         final int[] counts = readArray(br, height + 1);         int count = counts[0];        int wrongIdx = -1;         for (int i = 1; i < counts.length; i++) {            count += counts[i];            if (counts[i] > 1 && counts[i - 1] > 1) {                wrongIdx = i;            }        }         if (wrongIdx == -1) {            System.out.println("perfect");            return;        }         int[] a1 = new int[count];        int[] a2 = new int[count];        a1[0] = 0;        a2[0] = 0;         int j = 1;        for (int i = 1; i < counts.length; i++) {            int prev = j;            for (int k = 0; k < counts[i]; k++) {                a1[j] = prev;                a2[j] = prev;                j++;            }            if (wrongIdx == i) {                a2[j - 1] = prev - 1;            }        }         final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));        bw.write("ambiguous\n");         for (int k : a1) {            bw.write(k + " ");        }        bw.write("\n");         for (int k : a2) {            bw.write(k + " ");        }        bw.flush();    }     private static int[] readArray(BufferedReader br, int n) throws IOException {        int[] arr = new int[n];        final StringTokenizer st = new StringTokenizer(br.readLine());        for (int i = 0; i < n; i++) {            arr[i] = Integer.parseInt(st.nextToken());        }        return arr;    }}
