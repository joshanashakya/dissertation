    import java.io.BufferedReader;    import java.io.IOException;    import java.io.InputStreamReader;    import java.io.PrintWriter;    import java.util.Arrays;    import java.util.LinkedList;    import java.util.StringTokenizer;         public class HashingTrees {    	public static BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));    	public static StringTokenizer st;    	public static PrintWriter pw = new PrintWriter(System.out);    	final static boolean debugmode = true;    	public static int k = 7;    	public static long STMOD = 1000000000 + k;     	public static void main(String[] args) throws IOException{    		int height = getInt();    		int cn = 1;    		int[] q = readArray(height + 1);    		int roots = 0;    		int[] nodeConc = new int[sum(q)];    		int[] nodeConc2 = new int[sum(q)];    		nodeConc[0] = 0;    		nodeConc2[0] = 0;    		boolean isUnique = true;    		    		LinkedList<Integer> prev = new LinkedList<Integer>();    		prev.add(0);    		for(int h = 1;h < height + 1;h++){    			    			LinkedList<Integer> newPrev = new LinkedList<Integer>();    			    			if(prev.size() > 1 && q[h] > 1){    				    				if(isUnique){    					isUnique = false;    					int tomap1 = prev.get(0);    					int tomap2 = prev.get(1);    				    					for(int i = 0;i<q[h]-1;i++){    						nodeConc[cn] = tomap1 + 1;    						nodeConc2[cn] = tomap2 + 1;    						newPrev.add(cn);    						cn += 1;    						    					}    					nodeConc[cn] = tomap1 + 1;    					nodeConc2[cn] = tomap1 + 1;    					newPrev.add(cn);    					cn += 1;    				}    				else{    					int tomap = prev.get(0);    					for(int i = 0;i<q[h];i++){    						nodeConc[cn] =tomap + 1;    						nodeConc2[cn] = tomap + 1;    						newPrev.add(cn);    						cn += 1;    					}    				}    			}    			else{    				int toMap = prev.get(0);    				for(int i = 0;i<q[h];i++){    					nodeConc[cn] = toMap + 1;    					nodeConc2[cn] = toMap + 1;    					newPrev.add(cn);    					cn += 1;    				}    			}    			prev = newPrev;    		}    		    		if(isUnique){    			pw.println("perfect");    		}    		else{    			System.out.println("ambiguous");    			for(int i = 0;i<nodeConc.length;i++){    				pw.print(nodeConc[i]+" ");    			}    			pw.println("");    			for(int i = 0;i<nodeConc2.length;i++){    				pw.print(nodeConc2[i]+" ");    			}    			pw.println("");    		}    		pw.close();    	}    	public static int sum(int[] r){    		int a = 0;    		for(int v : r){    			a += v;    		}    		return a;    	}    	public int GCD(int a, int b) {    		   if (b==0) return a;    		   return GCD(b,a%b);    	}    	public double log(int k, int v){    		return Math.log(k)/Math.log(v);    	}    	public static void debug(String toPrint){    		if(!debugmode) {return;}    		pw.println("[DEBUG]: "+toPrint);    	}    	public static void  submit(int[] k){    		pw.println(Arrays.toString(k));    		pw.close();    	}    	public static void submit(int p){    		pw.println(Integer.toString(p));    		pw.close();    	}    	public static void submit(String k){    		pw.println(k);    		pw.close();    	}    	public static void submit(double u){    		pw.println(Double.toString(u));    		pw.close();    	}    	public static void submit(long lng){    		pw.println(Long.toString(lng));    		pw.close();    		    	}    	public static int getInt() throws IOException{    		if (st != null && st.hasMoreTokens()){    			return Integer.parseInt(st.nextToken());    		}    		st = new StringTokenizer(sc.readLine());    		return Integer.parseInt(st.nextToken());    	}    	public static long getLong() throws IOException{    		if (st != null && st.hasMoreTokens()){    			return Long.parseLong(st.nextToken());    		}    		st = new StringTokenizer(sc.readLine());    		return Long.parseLong(st.nextToken());    	}    	public static double getDouble()throws IOException{    		if (st != null && st.hasMoreTokens()){    			return Double.parseDouble(st.nextToken());    		}    		st = new StringTokenizer(sc.readLine());    		return Double.parseDouble(st.nextToken());    	}    	public static String getString()throws IOException{    		if(st != null && st.hasMoreTokens()){    			return st.nextToken();    		}    		st = new StringTokenizer(sc.readLine());    		return st.nextToken();    	}    	public static String getLine() throws IOException{    		return sc.readLine();    	}    	public static int[][] readMatrix(int lines,int cols) throws IOException{    		int[][] matrr = new int[lines][cols];    		for (int i = 0;i < lines;i++){    			for(int j = 0;j < cols;j++){    				matrr[i][j] = getInt();    			}    		}    		return matrr;    	}    	public static int[] readArray(int lines) throws IOException{    		int[] ar = new int[lines];		    		for (int i = 0;i<lines;i++) ar[i] =getInt();    		return ar;    	}    	    }
