import java.io.*;import java.util.*; public class practice {	static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     }  		public static void main(String[] args) throws IOException {						Scanner scn=new Scanner(System.in);			String s=" "+scn.next();			int[] count=new int[s.length()+5];			int[] stack=new int[s.length()+5];			int top=1,sol=0,l=0,r=0;;			for(int i=1;i<s.length();i++){				count[i]=count[i-1]+(s.charAt(i)=='['?1:0);				if(s.charAt(i)=='('||s.charAt(i)=='[')stack[top++]=i;				else if((s.charAt(i)==']'&&s.charAt(stack[top-1])!='[')||(s.charAt(i)==')'&&s.charAt(stack[top-1])!='(')){					top=0;stack[top++]=i;				}				else{					top--;					if(sol<count[i]-count[stack[top-1]]){						sol=count[i]-count[stack[top-1]];						l=stack[top-1];r=i;					}				}							}			System.out.println(sol);			if(sol>0){			for(int i=l+1;i<=r;i++){				System.out.print(s.charAt(i));			}			}					}	} 
