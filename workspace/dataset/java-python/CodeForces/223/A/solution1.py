#include<bits/stdc++.h>using namespace std;#define ll long long#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)#define pb push_back#define pob pop_back#define MP make_pair#define MT make_tuple#define rep(i,a,b) for(int i=a;i<b;i++)#define Rep(i,a,b) for(int i=a;i<=b;i++)#define rept(it,v) for(auto it=v.begin();it!=v.end();it++)#define pre(i,a,b) for(int i=a;i>=b;i--)#define all(v) v.begin(),v.end()#define F first#define S second#define sz(x) (int)x.size()#define endl "\n"#define ct continue#define ub upper_bound#define fill(a,b) memset(a,b,sizeof(a))#define lb lower_bound#define bs binary_search#define pii pair<int,int>#define mod 1000000007bool sortbysec(pair<int,int> a, pair<int,int> b){    if(a.second!=b.second) return a.second>b.second;    else return a.first<b.first;}int main(){ll i,j,best,left,right;string s;    cin>>s;    ll b[s.size()+1];    if(s[0]=='[')    b[0]=1;    else    b[0]=0;    stack<ll> st;    for(i=1;i<s.size();i++)    {        if(s[i]=='[')        {            b[i]=b[i-1]+1;        }        else        b[i]=b[i-1];    }    best=0,left=0,right=0;    for(i=0;i<s.size();i++)    {        if(st.empty())        {            st.push(i);        }        else        {            if(s[i]=='['||s[i]=='(')            {                st.push(i);            }            else            {                if(s[i]==']'&&s[st.top()]=='[')                {                    st.pop();                    if(st.empty())                    {                        best=b[i];                        left=0;                        right=i+1;                    }                    else                    {                        if(b[i]-b[st.top()]>best)                        {                            best=b[i]-b[st.top()];                            left=st.top()+1;                            right=i+1;                        }                    }                }                else if(s[i]==')'&&s[st.top()]=='(')                {                    st.pop();                                        if(st.empty())                    {                        best=b[i];                        left=0;                        right=i+1;                    }                    else                    {                        if(b[i]-b[st.top()]>best)                        {                            best=b[i]-b[st.top()];                            left=st.top()+1;                            right=i+1;                        }                    }                }                else                {                    st.push(i);                }            }        }    }    cout<<best<<endl;    for(i=left;i<right;i++)    cout<<s[i];}
