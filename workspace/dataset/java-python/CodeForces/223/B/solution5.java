import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*; public class Task2 {     public static void main(String[] args) throws IOException {         new Task2().solve();     }     int mod = 1000000007;     PrintWriter out;     int n;    int m;     ArrayList<Integer>[] g;     void solve() throws IOException {         //Reader in = new Reader("in.txt");        //out = new PrintWriter( new BufferedWriter(new FileWriter("output.txt")) );        Reader in = new Reader();        PrintWriter out = new PrintWriter( new BufferedWriter(new OutputStreamWriter(System.out)) );         //BufferedReader br = new BufferedReader( new FileReader("in.txt") );        //BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );         String s = in.nextLine();        String t = in.nextLine();         if (t.length() > s.length()) {             System.out.println("No");            return;        }                 boolean ok = true;         int[] a1 = check(s, t);         StringBuilder sb = new StringBuilder(s);        s = sb.reverse().toString();         sb = new StringBuilder(t);        t = sb.reverse().toString();         int[] a2 = check(s, t);         for (int i = 0; i < s.length(); i++) {             if (a1[i] == -1 || a2[i] == -1)                ok = false;        }         int n = s.length();         if (ok) {             for (int i = 0; i < s.length(); i++) {                 int pos = a1[i];                 if (t.length() - pos > a2[n-i-1]+1) {                     //System.err.println(i+" "+pos+" "+a2[n-i-1]);                    ok = false;                }            }        }         if (ok)            out.println("Yes");        else            out.println("No");         out.flush();        out.close();    }     int[] check(String s, String t) {         int[] a = new int[s.length()];        int pos = 0;         Arrays.fill(a, -1);         int n = s.length();         for (int i = 0; i < t.length(); i++) {             while (pos < n && s.charAt(pos) != t.charAt(i))                pos++;             if (pos == n)                break;             a[pos] = i;            pos++;        }         int[] was = new int[255];         Arrays.fill(was, -1);         boolean ok = true;         for (int i = 0; i < n; i++) {             if (a[i] == -1) {                 if (was[s.charAt(i)] == -1) {                     ok = false;                    break;                }                 a[i] = was[s.charAt(i)];            }              was[s.charAt(i)] = a[i];        }         return a;    }     class Pair implements Comparable<Pair>{         int a;        int b;          Pair(int a, int b) {             this.a = a;            this.b = b;        }         public int compareTo(Pair p) {             if (b > p.b)                return 1;             if (b < p.b)                return -1;             return 0;        }         //		@Override        //		public boolean equals(Object o) {        //			Pair p = (Pair) o;        //			return a == p.a && b == p.b;        //		}        //        //		@Override        //		public int hashCode() {        //			return Integer.valueOf(a).hashCode() + Integer.valueOf(b).hashCode();        //		}     }     class Reader {         BufferedReader  br;        StringTokenizer tok;         Reader(String file) throws IOException {            br = new BufferedReader( new FileReader(file) );        }         Reader() throws IOException {            br = new BufferedReader( new InputStreamReader(System.in) );        }         String next() throws IOException {             while (tok == null || !tok.hasMoreElements())                tok = new StringTokenizer(br.readLine());            return tok.nextToken();        }         int nextInt() throws NumberFormatException, IOException {            return Integer.valueOf(next());        }         long nextLong() throws NumberFormatException, IOException {            return Long.valueOf(next());        }         double nextDouble() throws NumberFormatException, IOException {            return Double.valueOf(next());        }         String nextLine() throws IOException {            return br.readLine();        }     } }
