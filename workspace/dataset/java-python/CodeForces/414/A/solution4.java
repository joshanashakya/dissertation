import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Pranay2516 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        AMashmokhAndNumbers solver = new AMashmokhAndNumbers();        solver.solve(1, in, out);        out.close();    }     static class AMashmokhAndNumbers {        public void solve(int testNumber, FastReader in, PrintWriter out) {            int n = in.nextInt(), k = in.nextInt();            if (k < n / 2) {                out.println(-1);            } else {                if (k == n / 2) {                    for (int i = 1; i < n + 1; ++i) {                        out.print(i + " ");                    }                } else {                    if (n == 1) {                        out.println(k == 0 ? 1 : -1);                        return;                    }                    int factor = k - n / 2 + 1;                    out.print(factor + " " + 2 * factor + " ");                    int j = 1;                    for (int i = 0; i < n / 2 - 1; ++i) {                        while (j == factor || j + 1 == factor || j == 2 * factor || j + 1 == 2 * factor) j++;                        out.print(j + " " + (j + 1) + " ");                        j += 2;                    }                    if (n % 2 == 1) {                        while (j == factor || j == 2 * factor) j++;                        out.print(j + " ");                    }                }                out.println();            }        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private FastReader.SpaceCharFilter filter;         public FastReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
