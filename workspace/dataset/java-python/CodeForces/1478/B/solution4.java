// 23-Mar-2021import java.util.*;import java.io.*; public class Q {	static class FastReader { 		BufferedReader br;		StringTokenizer st; 		private FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		int[] nextIntArray(int n) {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		int[] nextIntArrayOne(int n) {			int[] a = new int[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextInt();			return a;		} 		long[] nextLongArray(int n) {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		long[] nextLongArrayOne(int n) {			long[] a = new long[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextLong();			return a;		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	public static void main(String[] args) {		FastReader s = new FastReader();		StringBuilder str = new StringBuilder(); 		int t = s.nextInt(); 		while (t-- > 0) {			int n = s.nextInt(),d = s.nextInt();						int num = d * 10;						ArrayList<Integer> arr = new ArrayList<>();						for(int i = 0; 10 * i + d < num; i++) {				arr.add(10 * i + d);			}									Set<Integer> val = new HashSet<>();						solve(arr,val,0);						while(n-- > 0) {				int cur = s.nextInt();				if(cur >= num || val.contains(cur)) {					str.append("YES\n");				}else {					str.append("NO\n");				}			}								}		System.out.println(str);	} 	private static void solve(ArrayList<Integer> arr, Set<Integer> val, int i) {		if(i > 90) {			return;		}						for(int k = 0; k < arr.size();k++) {			if(arr.get(k) + i < 90 ) {				val.add(arr.get(k) + i);				solve(arr, val, i + arr.get(k));			}		}		} }
