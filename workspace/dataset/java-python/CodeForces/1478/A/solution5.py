import bisectimport

math   # import itertools# import heapq# from queue import PriorityQueue, LifoQueue, SimpleQueueimport syssys.setrecursionlimit(1500) # import sys.stdout.flush() use for interactive problemsalpha = 'abcdefghijklmnopqrstuvwxyz'ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'inf = 1e17mod = 10**9+7  # Max = 10**6# primes = []# prime = [True for i in range(10**6+1)]# p = 2# while (p * p <= Max+1):##     # If prime[p] is not#     # changed, then it is a prime#     if (prime[p] == True):##         # Update all multiples of p#         for i in range(p * p, Max+1, p):#             prime[i] = False#     p += 1## for p in range(2, Max+1):#     if prime[p]:#         primes.append(p)  def solve(n,arr):    cnts = dict()     for i in range(n):        if arr[i] not in cnts:            cnts[arr[i]] = 1        else:            cnts[arr[i]] += 1    Max = 1    for ele in cnts:        Max = max(Max,cnts[ele])    return Max    pass      t = int(input())ans = []for _ in range(t):    n = int(input())    #N,K = map(int, input().split())    # a,b = map(int, input().split())    # s1 = input()    # s2 = input()    # arr = list(input())    arr = [int(x) for x in input().split()]    # c = [int(x) for x in input().split()]     # b = [int(x) for x in input().split()]    # s = input()    # t = input()    # options = [int(x) for x in input().split()]    # grid = []    # for j in range(r):    #     grid.append([int(x) for x in input().split()])      ans.append(solve(n,arr))    # for row in dp:    #     print(row)# print(ans)for i in range(t):    print(ans[i])
