import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;import java.util.Scanner;import java.util.*;import java.util.stream.Collectors;Â public class absolute {	static List<Integer> primes;	static int[] nextprime;	static void sieveOfEratosthenes()    {		int n = 100004;        boolean prime[] = new boolean[n + 1];        for (int i = 0; i <= n; i++)            prime[i] = true;         for (int p = 2; p * p <= n; p++)         {            if (prime[p] == true)             {                for (int i = p * p; i <= n; i += p)                    prime[i] = false;            }        }        int next=2,pos=0;        nextprime[0]=nextprime[1]=2;        for (int i = n; i >= 2; i--)        {            if (prime[i] == true)            {            	nextprime[i]=i;            	next=i;            }            else            {            	nextprime[i]=next;            }                    }    }	public static int binary(int n)	{		int st=0,end=primes.size()-1,pos=-1;		while(st<=end)		{			int mid = st + (end-st)/2;			if(primes.get(mid)>n)			{				pos=mid;				end=mid-1;			}			else				st = mid+1;		}		//System.out.println(n+" "+pos);		return primes.get(pos);	}	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner sc=  new Scanner(System.in);		int n = sc.nextInt();		int m = sc.nextInt();		int[][] mat = new int[n][m];		int[][] matsum = new int[n][m];		int[][] matvert = new int[n][m];		nextprime = new int[100005];		for(int i=0;i<n;i++)		{			for(int j=0;j<m;j++)				mat[i][j]=sc.nextInt();		}		primes = new ArrayList<Integer>();		sieveOfEratosthenes();		int min=Integer.MAX_VALUE;		//for(int i=0;i<=20;i++)System.out.print(nextprime[i]+" ");		for(int i=0;i<n;i++)		{				for(int j=0;j<m;j++)			{				if(primes.contains(mat[i][j]))continue;				else				{					matsum[i][j] = nextprime[mat[i][j]]-mat[i][j];				}			}		}		matvert[0] = matsum[0].clone();		for(int i=0;i<n;i++)		{				int sum=0;			for(int j=0;j<m;j++)			{				sum += matsum[i][j];				if(i>0)				{					matvert[i][j] = matvert[i-1][j] + matsum[i][j];				}			}			min = Math.min(min, sum);		}				for(int i=0;i<m;i++)		{							min = Math.min(min, matvert[n-1][i]);		}				System.out.println(min);		}}
