import java.io.*;import java.util.*;public class Ishu{    static Scanner scan = new Scanner(System.in);    static BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));     static void tc() throws Exception    {    int n = scan.nextInt();    int[] a = new int[n + 2];    int i;    for(i=1;i<=n;++i)        a[i] = scan.nextInt();            int[] dpip = new int[n + 2];    int[] dpdp = new int[n + 2];    int[] dpis = new int[n + 2];    int[] dpds = new int[n + 2];        dpip[1] = 1;    for(i=2;i<=n;++i)            {        dpip[i] = 1;        if(a[i] > a[i-1])            dpip[i] += dpip[i-1];          }    dpdp[1] = 1;    for(i=2;i<=n;++i)        {        dpdp[i] = 1;        if(a[i] < a[i-1])            dpdp[i] += dpdp[i-1];        }        dpis[n] = 1;        for(i=n-1;i>=1;--i)          {        dpis[i] = 1;        if(a[i] > a[i+1])            dpis[i] += dpis[i+1];        }      dpds[n] = 1;    for(i=n-1;i>=1;--i)        {        dpds[i] = 1;        if(a[i] < a[i+1])            dpds[i] += dpds[i+1];        }        int ans = 0;        int[] maxp = new int[n + 2];    int[] maxs = new int[n + 2];        maxp[1] = Math.max(dpip[1], dpdp[1]);    for(i=1;i<=n;++i)            {        maxp[i] = Math.max(dpip[i], dpdp[i]);        maxp[i] = Math.max(maxp[i], maxp[i-1]);        }    maxs[n] = Math.max(dpis[n], dpds[n]);    for(i=n-1;i>=1;--i)        {        maxs[i] = Math.max(dpis[i], dpds[i]);        maxs[i] = Math.max(maxs[i], maxs[i+1]);        }            for(i=1;i<=n;++i)          {        int ml = dpip[i];        int mr = dpis[i];        int M = Math.max(ml, mr);                int l = i - dpip[i] + 1;        int r = i + dpis[i] - 1;                int maxl = maxp[l];        int maxr = maxs[r];                if(maxl >= M || maxr >= M);        else if(ml == mr && ml % 2 == 1)            ++ans;        }      output.write(ans + "\n");    output.flush();    }    public static void main(String[] args) throws Exception    {    int t = 1;    //t = scan.nextInt();    while(t-- > 0)        tc();    }}//  B     A//1 2 3 4 7 6 5//            //B       A   //1 2 3 4 9 8 7 6 5//7 6 5 4 1 2 3Â 
