import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; import static java.util.Collections.sort;import static java.lang.Math.sqrt;import static java.lang.Math.pow;import static java.lang.Math.abs;import java.util.Comparator;import java.util.ArrayList;import java.util.Locale; public class Test {    public static void main(String[] args) {         Reader input = new Reader();        PrintWriter out = new PrintWriter(System.out);        int t = input.nextInt();         while (t-->0) {             int n = input.nextInt();            ArrayList<int[]> miners = new ArrayList<>(n);            ArrayList<int[]> diamonds = new ArrayList<>(n);                         for (int i = 0; i < 2 * n; i++) {                                int x = abs(input.nextInt());                int y = abs(input.nextInt());                if (x == 0) {                    diamonds.add(new int[]{x, y});                                    } else {                    miners.add(new int[]{x, y});                }            }                        sort(miners, new CP());            sort(diamonds, new CP());            double result = 0;            for (int i = 0; i < n; i++) {                result += dist(miners.get(i), diamonds.get(i));            }            out.printf(Locale.UK, "%.15f\n", result);        }        out.close();    }      static double dist(int[] a, int[] b) {         return sqrt((double)(pow(a[0] - b[0], 2) + pow(a[1] - b[1], 2)));    }     static class CP implements Comparator<int[]> {        @Override        public int compare(int[] a, int[] b) {            if (a[0] == 0) {                if (a[1] > b[1]) {                    return 1;                } else if (a[1] < b[1]) {                    return -1;                }            }             else {                if (a[0] > b[0]) {                    return 1;                } else if (a[0] < b[0]) {                    return -1;                }             }            return 0;        }    }     static class Reader {                BufferedReader br;        StringTokenizer st;         public Reader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {             while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException ex) {                    ex.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {             String str = "";            try {                str = br.readLine();            } catch (IOException ex) {                ex.printStackTrace();            }            return str;        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }    }}
