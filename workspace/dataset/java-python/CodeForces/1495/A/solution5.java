import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;  public class a_706 { 	public static void main(String[] args) throws Exception {		// TODO Auto-generated method stub 		FastScanner in = new FastScanner(System.in);		OutputStream outputStream = System.out;		PrintWriter out = new PrintWriter(outputStream);				int T = in.nextInt();		Solver A = new Solver(in, out); 				for(int aa = 0; aa < T; aa++) {			A.answer(aa + 1);		}						out.close();	}		static class Solver {		FastScanner in;		PrintWriter out;				int N;		double [] miner, diamond; 		public Solver(FastScanner in, PrintWriter out) {			this.in = in;			this.out = out;		}				public void answer(int aa) throws Exception {			N = in.nextInt();			miner = new double [N];			diamond = new double [N];						int mp = 0;			int dp = 0;						for(int i = 0; i < 2*N; i++) {				double x = in.nextDouble();				double y = in.nextDouble();								if(x == 0) {					miner[mp] = Math.abs(y);					mp++;				} else {					diamond[dp] = Math.abs(x);					dp++;				}			}						Arrays.sort(miner);			Arrays.sort(diamond);						double ans = 0;			for(int i = 0; i < N; i++) {				ans += Math.sqrt(miner[i]*miner[i] + diamond[i]*diamond[i]);			}						out.println(ans);		}					} 	static class FastScanner {		BufferedReader br;		StringTokenizer st; 		public FastScanner(InputStream stream) {			br = new BufferedReader(new InputStreamReader(stream));			st = new StringTokenizer("");		} 		public FastScanner(String fileName) throws Exception {			br = new BufferedReader(new FileReader(new File(fileName)));			st = new StringTokenizer("");		} 		public String next() throws Exception {			while (!st.hasMoreTokens()) {				st = new StringTokenizer(br.readLine());			}			return st.nextToken();		} 		public int nextInt() throws Exception {			return Integer.parseInt(next());		} 		public long nextLong() throws Exception {			return Long.parseLong(next());		} 		public Double nextDouble() throws Exception {			return Double.parseDouble(next());		} 		public String nextLine() throws Exception {			if (st.hasMoreTokens()) {				StringBuilder str = new StringBuilder();				boolean first = true;				while (st.hasMoreTokens()) {					if (first) {						first = false;					} else {						str.append(" ");					}					str.append(st.nextToken());				}				return str.toString();			} else {				return br.readLine();			}		}	}	}
