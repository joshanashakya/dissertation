import java.io.*;import java.util.*; public class MainClass{    static long[] dp;    static long[] A;    static int[] depth;    static int D = 0;    static int[][] par;    static int[] B;    static int[] ans;    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        A = new long[n];        B = new int[n];        dp  = new long[n];        ans = new int[n];        for (int i=0;i<n;i++)   A[i] = in.nextLong();        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];        ArrayList<Long>[] cost = (ArrayList<Long>[])new ArrayList[n];        for (int i=0;i<n;i++)   adj[i] = new ArrayList<>();        for (int i=0;i<n;i++)   cost[i] = new ArrayList<>();        for (int i=0;i<n - 1;i++)        {            int x = in.nextInt() - 1;            adj[x].add(i + 1);            cost[x].add(in.nextLong());        }        explore(adj, cost, 0, 0);         D = Integer.numberOfTrailingZeros(Integer.highestOneBit(n));        par = new int[D + 1][n];        depth = new int[n];        for (int[] dd:par)            Arrays.fill(dd, -1);        ArrayDeque<Integer> q = new ArrayDeque<>();        boolean[] visited = new boolean[n];        q.add(0);        visited[0] = true;        while (q.size() > 0)        {            int v = q.poll();            for (int u: adj[v]) if (!visited[u])            {                visited[u] = true;                q.add(u);                par[0][u] = v;                depth[u] = depth[v] + 1;            }        }         for (int k=1;k<=D;k++)        {            for (int i=0;i<n;i++)            {                int mid = par[k - 1][i];                if (mid != -1)                    par[k][i] = par[k - 1][mid];            }        }         for (int i=0;i<n;i++)        {            int l = 0;            int r = n;            int ans = 0;            while (l <= r)            {                int mid = (l + r) / 2;                int parent = walk(i, mid);                if (parent != -1 && dp[i] - A[i] <= dp[parent])                {                    ans = mid;                    l = mid + 1;                }                else                    r = mid - 1;            }            int parent = walk(i, ans);            int parentParent = walk(parent, 1);            int iParent = walk(i, 1);            if (parentParent != -1)                B[parentParent] --;            if (iParent != -1)                B[iParent] ++;        }        find(adj, 0);        StringBuilder stringBuilder = new StringBuilder();        for (int i=0;i<n;i++)            stringBuilder.append(ans[i]).append(" ");        System.out.println(stringBuilder);    }    public static int find(ArrayList<Integer>[] adj, int v)    {        int ans = B[v];        for (int u: adj[v])        {            ans += find(adj, u);        }        MainClass.ans[v] += ans;        return ans;    }    public static void explore(ArrayList<Integer>[] adj, ArrayList<Long>[] cost, int v, long costToVertex)    {        dp[v] = costToVertex;        for (int i=0;i<adj[v].size();i++) explore(adj, cost, adj[v].get(i), costToVertex + cost[v].get(i));    }    public static int walk(int i, int k)    {        for (int d=0;d<=D && i!=-1;d++)            if (((1 << d) & k) > 0)                i = par[d][i];        return i;    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
