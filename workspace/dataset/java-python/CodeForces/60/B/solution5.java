import java.util.LinkedList;import java.util.Queue;import java.util.Scanner; public class Solution {     static class Coordinate {        int x, y, z;        public Coordinate(int x, int y, int z) {            this.x = x;            this.y = y;            this.z = z;         }     }      static int x_trans[] = {1,-1, 0, 0, 0, 0};    static int y_trans[] = {0, 0, 1,-1, 0, 0};    static int z_trans[] = {0, 0, 0, 0, 1,-1};     public static void main(String[] args) {        Scanner in = new Scanner(System.in);         int Z = in.nextInt(), Y = in.nextInt(), X = in.nextInt();        boolean map[][][] = new boolean[X][Y][Z];        boolean visited[][][] = new boolean[X][Y][Z];         in.nextLine();        in.nextLine();         for(int z = 0; z < Z; ++z) {            for(int y = 0; y < Y; ++y) {                String line = in.nextLine();                for(int x = 0; x < X; ++x) {                    map[x][y][z] = line.charAt(x)=='.';                    visited[x][y][z] = false;                }            }            in.nextLine();        }         int s_y = in.nextInt()-1;        int s_x = in.nextInt()-1;        Coordinate start = new Coordinate(s_x, s_y, 0);         Queue<Coordinate> q = new LinkedList<>();        q.add(start);         int volume = 0;         while(!q.isEmpty()) {            Coordinate c = q.remove();             // CHECK BOUNDS            if(c.x < 0 || c.x >= X ||                    c.y < 0 || c.y >= Y ||                    c.z < 0 || c.z >= Z) continue;              if(visited[c.x][c.y][c.z]) continue;            visited[c.x][c.y][c.z] = true;             if(!map[c.x][c.y][c.z]) continue;             volume++;            for(int d = 0; d < 6; ++d) {               q.add(new Coordinate(c.x + x_trans[d], c.y + y_trans[d], c.z + z_trans[d]));           }        }          System.out.println(volume);    }}
