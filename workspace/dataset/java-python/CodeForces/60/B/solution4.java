import java.util.*; public class force {     static int k;    static int n;    static int m;     public static void main(String[] args) {        Scanner in = new Scanner(System.in);         k = in.nextInt();        n = in.nextInt();        m = in.nextInt();         char[][][] plate = new char[k][n][m];        in.nextLine();        in.nextLine();        for (int i=0;i<k;i++) {            for (int j=0;j<n;j++) {                String line = in.nextLine();                for (int z=0;z<line.length();z++) {                    plate[i][j][z] = line.charAt(z);                }            }            in.nextLine();        }         int tapr = in.nextInt() - 1;        int tapc = in.nextInt() - 1;         boolean[][][] visited = new boolean[k][n][m];         int[][] move = {            {-1, 0, 0},            {1, 0, 0},            {0, -1, 0},            {0, 1, 0},            {0, 0, -1},            {0, 0, 1}        };         Queue<Triple> q = new LinkedList<>();        q.offer(new Triple(0, tapr, tapc));        int count = 0;        while (!q.isEmpty()) {            //System.out.println("asdf");            Triple u = q.poll();            //if (visited[u.x][u.y][u.z]) continue;            visited[u.x][u.y][u.z] = true;            count++;            for (int i=0;i<move.length;i++) {                int newx = u.x + move[i][0];                int newy = u.y + move[i][1];                int newz = u.z + move[i][2];                if (inbounds(newx, newy, newz) &&                    !visited[newx][newy][newz] &&                    plate[newx][newy][newz] != '#') {                                        //System.out.println("here");                    visited[newx][newy][newz] = true;                    q.offer(new Triple(newx, newy, newz));                }            }        }         System.out.println(count);     }     static boolean inbounds(int x, int y, int z) {        return x >= 0 && x < k && y >= 0 && y < n && z >= 0 && z < m;    }} class Triple {    int x, y, z;     public Triple(int x, int y, int z) {        this.x = x;        this.y = y;        this.z = z;    }}
