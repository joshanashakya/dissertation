import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {        char[] ca = in.next().toCharArray();        int[] a = new int[ca.length];        for (int i = 0; i < ca.length; i++) {            a[i] = ca[i]-'0';        }          int cnt = 6;        for (int i = 0; i <= 9; i++) {            for (int j = 0; j <= 9; j++) {                for (int k = 0; k <= 9; k++) {                    for (int m = 0; m <= 9; m++) {                        for (int n = 0; n <= 9; n++) {                            for (int o = 0; o <= 9; o++) {                                 if (i+j+k == m+n+o) {                                    int cost = 6;                                    if (i == a[0]) cost--;                                    if (j == a[1]) cost--;                                    if (k == a[2]) cost--;                                    if (m == a[3]) cost--;                                    if (n == a[4]) cost--;                                    if (o == a[5]) cost--;                                    cnt = Math.min(cnt, cost);                                }                             }                        }                    }                }            }        }         out.println(cnt);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
