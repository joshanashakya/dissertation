import java.util.Scanner; public class Middle {    public static void main(String[] args) {        Scanner in = new Scanner(System.in);        int n = in.nextInt();        long[] arr = new long[ n];        in.nextLine();        for (int i = 0; i < n ; i++) {            arr[i] = in.nextInt();        }        mergeSort(arr,0,n-1);        long res = findMiddle(arr,n);        System.out.printf(String.valueOf(res));    }     public static void mergeSort(long[] arr, int start, int end) {        //判断拆分的不为最小单位        if (end - start > 0) {            //再一次拆分，知道拆成一个一个的数据            mergeSort(arr, start, (start + end) / 2);            mergeSort(arr, (start + end) / 2 + 1, end);            //记录开始/结束位置            int left = start;            int right = (start + end) / 2 + 1;            //记录每个小单位的排序结果            int index = 0;            long[] result = new long[end - start + 1];            //如果查分后的两块数据，都还存在            while (left <= (start + end) / 2 && right <= end) {                //比较两块数据的大小，然后赋值，并且移动下标                if (arr[left] <= arr[right]) {                    result[index] = arr[left];                    left++;                } else {                    result[index] = arr[right];                    right++;                }                //移动单位记录的下标                index++;            }            //当某一块数据不存在了时            while (left <= (start + end) / 2 || right <= end) {                //直接赋值到记录下标                if (left <= (start + end) / 2) {                    result[index] = arr[left];                    left++;                } else {                    result[index] = arr[right];                    right++;                }                index++;            }            //最后将新的数据赋值给原来的列表，并且是对应分块后的下标。            for (int i = start; i <= end; i++) {                arr[i] = result[i - start];            }        }    }     private static long findMiddle(long[] arr, int n) {        int middle = n/2;        if (n%2==0){            middle=n/2-1;        }        if (n==0){            return 0;        }         return arr[middle];    }} 		   				   		 		    				 			
