import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Deque;import java.io.ObjectInputStream.GetField;import java.io.OutputStreamWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Scanner;import java.util.Set;import java.util.StringTokenizer;import java.util.TimeZone;import java.util.TreeMap;import java.text.*; public class Main {	public static void main(String[] args) throws IOException {		FastReader in = new FastReader();		BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));		in.next();		int m = in.nextInt(), k = in.nextInt();		out.write((m * (m - 1)) / 2 + "\n");		for (int i = 1; i < m; i++)			for (int j = i + 1; j <= m; j++)				out.write((k == 0 ? i + " " + j : j + " " + i) + "\n");		out.close(); 	} } class FastReader {	BufferedReader br;	StringTokenizer st; 	public FastReader() {		br = new BufferedReader(new InputStreamReader(System.in)); 	} 	public FastReader(File f) throws FileNotFoundException {		br = new BufferedReader(new FileReader(f));	} 	String next() {		while (st == null || !st.hasMoreElements()) {			try {				st = new StringTokenizer(br.readLine()); 			} catch (IOException e) {				e.printStackTrace();			} 		} 		return st.nextToken(); 	} 	int nextInt() { 		return Integer.parseInt(next());	} 	double nextDouble() { 		return Double.parseDouble(next());	} 	long nextLong() { 		return Long.parseLong(next());	} 	String nextLine() {		String str = "";		try {			str = br.readLine(); 		} catch (IOException e) { 			e.printStackTrace();		}		return str; 	} 	boolean ready() throws IOException {		return br.ready();	}}
