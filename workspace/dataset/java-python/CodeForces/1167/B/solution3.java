/*Keep solving problems.*/ import java.util.*;import java.io.*; public class Interactive {   BufferedReader br;  PrintWriter out;  StringTokenizer st;  boolean eof;  final long MOD = 1000L * 1000L * 1000L + 7;  int[] dx = {0, -1, 0, 1};  int[] dy = {1, 0, -1, 0};   void solve() {    int[] mul = new int[4];    for (int i = 1; i < 5; i++) {      mul[i - 1] = print(0, i);    }     int[] divide = {23, 15, 42, 16, 8, 4};    Set<Integer> all = new HashSet<>();    for (int v : divide) {      all.add(v);    }    for (int i = 0; i < divide.length; i++) {      boolean valid = true;      for (int v : mul) {        if (v % divide[i] != 0) {          valid = false;        }      }      if (valid) {        int[] res = new int[6];        res[0] = divide[i];        for (int j = 1; j < 5; j++) {          res[j] = mul[j - 1] / res[0];        }        int left = -1;        for (int j = 0; j < 5; j++) {          all.remove(res[j]);        }        for (int v : all) {          left = v;        }        res[5] = left;        out("! ");        for (int v : res) {          out(v + " ");        }        outln("");        return;      }    }  }   int print(int i, int j) {    outln("? " + (1 + i) + " " + (1 + j));    return nextInt();  }     void shuffle(int[] a) {    int n = a.length;    for(int i = 0; i < n; i++) {      int r = i + (int) (Math.random() * (n - i));      int tmp = a[i];      a[i] = a[r];      a[r] = tmp;    }  }   long gcd(long a, long b) {    while(a != 0 && b != 0) {      long c = b;      b = a % b;      a = c;    }    return a + b;  }   private void outln(Object o) {    out.println(o);    out.flush();  }  private void out(Object o) {    out.print(o);    out.flush();  }  public Interactive() throws IOException {    br = new BufferedReader(new InputStreamReader(System.in));    out = new PrintWriter(System.out);    solve();    out.close();  }  public static void main(String[] args) throws IOException {    new Interactive();  }   public long[] nextLongArr(int n) {    long[] res = new long[n];    for(int i = 0; i < n; i++)      res[i] = nextLong();    return res;  }  public int[] nextIntArr(int n) {    int[] res = new int[n];    for(int i = 0; i < n; i++)      res[i] = nextInt();    return res;  }  public String nextToken() {      while (st == null || !st.hasMoreTokens()) {        try {          st = new StringTokenizer(br.readLine());        } catch (Exception e) {          eof = true;          return null;        }      }      return st.nextToken();  }  public String nextString() {    try {      return br.readLine();    } catch (IOException e) {      eof = true;      return null;    }  }  public int nextInt() {      return Integer.parseInt(nextToken());  }  public long nextLong() {      return Long.parseLong(nextToken());  }  public double nextDouble() {      return Double.parseDouble(nextToken());  }}  
