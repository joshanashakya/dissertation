import java.io.*;import java.util.*; /** *   author: over_flow *   created: 10/1/20 10:50 PM EST**/public class NewClassTest42 {    static final int LINE_LENGTH = 64;  // change if necessary    static final JIN ti = new JIN(LINE_LENGTH);    static final JOUT to = new JOUT();       public static void solve() throws IOException {        int n = ti.i(), x = ti.i(), y = ti.i();        int[] ar = ti.ari(n);        TreeMap<Integer, Integer> m = new TreeMap<>();        for (int i = 0; i <= y && i < n; i++) {            m.put(ar[i], m.getOrDefault(ar[i], 0) + 1);        }        for (int i = 0; i < n; i++) {            Map.Entry<Integer, Integer> e = m.firstEntry();            if (e == null || (ar[i] == e.getKey() && e.getValue() == 1)) {                to.putl(i + 1);                return;            }            if (i+y+1 < n) {                m.put(ar[i+y+1], m.getOrDefault(ar[i+1+y], 0) + 1);            }            if (i-x > -1) {                if (m.get(ar[i-x]) > 1) {                    m.put(ar[i-x], m.get(ar[i-x]) - 1);                } else {                    m.remove(ar[i-x]);                }            }        }    }        public static void main(String[] args) throws IOException {//        int t = ti.i();//        while (t-- > 0)            solve();         ti.close();        to.close();    }       static class JIN {        final private DataInputStream din;        final private int lineLength;        final private int BUFFER_SIZE = 1 << 16;        final private byte[] buffer;        private int bufferPointer, bytesRead;        public JIN(int len) {            din = new DataInputStream(System.in);            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;            lineLength = len;        }        public JIN(String fileName, int len) throws IOException {            din = new DataInputStream(new FileInputStream(fileName));            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;            lineLength = len;        }        public String ln() throws IOException {            byte[] buf = new byte[lineLength];            int cnt = 0;            byte c;            while ((c = read()) != -1) {                if (c == '\n') break;                buf[cnt++] = c;            }            return new String(buf, 0, cnt);        }        public String str() throws IOException {            byte[] buf = new byte[lineLength];            int cnt = 0;            byte c;            while ((c = read()) != -1) {                if (c == '\n' || c == ' ') break;                buf[cnt++] = c;            }            return new String(buf, 0, cnt);        }        public int i() throws IOException {            int ret = 0;            byte c = read();            while (c <= ' ') c = read();            boolean neg = (c == '-');            if (neg) c = read();            do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');            return neg ? -ret : ret;        }        public long l() throws IOException {            long ret = 0;            byte c = read();            while (c <= ' ') c = read();            boolean neg = (c == '-');            if (neg) c = read();            do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');            return neg ? -ret : ret;        }        public double d() throws IOException {            double ret = 0, div = 1;            byte c = read();            while (c <= ' ') c = read();            boolean neg = (c == '-');            if (neg) c = read();            do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');            if (c == '.') while ((c = read()) >= '0' && c <= '9') ret += (c - '0') / (div *= 10);            return neg ? -ret : ret;        }        public int[] ari(int n) throws IOException {            int[] ar = new int[n];            for (int i = 0; i < n; i++) ar[i] = i();            return ar;        }        public long[] arl(int n) throws IOException {            long[] ar = new long[n];            for (int i = 0; i < n; i++) ar[i] = l();            return ar;        }        public double[] ard(int n) throws IOException {            double[] ar = new double[n];            for (int i = 0; i < n; i++) ar[i] = d();            return ar;        }        private void fillBuffer() throws IOException {            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);            if (bytesRead == -1) buffer[0] = -1;        }        private byte read() throws IOException {            if (bufferPointer == bytesRead) fillBuffer();            return buffer[bufferPointer++];        }        public void close() throws IOException {            din.close();        }    }    static class JOUT {        final private DataOutputStream dout;        final private int BUFFER_SIZE = 1 << 16;        final private byte[] buffer;        private int bufferPointer;        public JOUT() {            dout = new DataOutputStream(System.out);            buffer = new byte[BUFFER_SIZE];            bufferPointer = 0;        }        public JOUT(String fileName) throws IOException {            dout = new DataOutputStream(new FileOutputStream(fileName));            buffer = new byte[BUFFER_SIZE];            bufferPointer = 0;        }        public void put(String s) throws IOException {            writeBytes(s.getBytes());        }        public void put(char c) throws IOException {            put(String.valueOf(c));        }        public void put(int i) throws IOException {            put(String.valueOf(i));        }        public void put(long l) throws IOException {            put(String.valueOf(l));        }        public void put(double d) throws IOException {            put(String.valueOf(d));        }        public void put(int[] ar, String sep) throws IOException {            for (int i : ar) {                put(i);                put(sep);            }        }        public void put(long[] ar, String sep) throws IOException {            for (long l : ar) {                put(l);                put(sep);            }        }        public void put(double[] ar, String sep) throws IOException {            for (double d : ar) {                put(d);                put(sep);            }        }        public void put(Object[] ar, String sep) throws IOException {            for (Object o : ar) {                put(o.toString());                put(sep);            }        }        public void put(Collection<Object> ar, String sep) throws IOException {            for (Object o : ar) {                put(o.toString());                put(sep);            }        }        public void putl(String s) throws IOException {            put(s);            put("\n");        }        public void putl(char c) throws IOException {            put(String.valueOf(c));            put("\n");        }        public void putl(int i) throws IOException {            put(String.valueOf(i));            put("\n");        }        public void putl(long l) throws IOException {            put(String.valueOf(l));            put("\n");        }        public void putl(double d) throws IOException {            put(String.valueOf(d));            put("\n");        }        public void putl() throws IOException {            put("\n");        }        public void writeBytes(byte[] b) throws IOException {            if (bufferPointer + b.length >= BUFFER_SIZE) flush();            for (byte value : b) buffer[bufferPointer++] = value;        }        public void flush() throws IOException {            dout.write(buffer, 0, bufferPointer);            dout.flush();            bufferPointer = 0;        }        public void close() throws IOException {            flush();            dout.close();        }    }}
