import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; import static java.lang.Math.floorMod;  public final class CountPairs {     static class MyScanner {        private BufferedReader br;        private StringTokenizer st;         MyScanner() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }     }     private static int compl(long x, long k, long p) {        return (int) floorMod(floorMod(floorMod(floorMod(x*x, p) * x, p)*x, p) - floorMod(x*k, p), p);    }     public static void main(String[] args) {         MyScanner sc = new MyScanner();         int n = sc.nextInt(), p = sc.nextInt(), k = sc.nextInt();        int a[] = new int[n];         HashMap<Integer, Integer> b = new HashMap<>();         for (int i=0; i<n; ++i) {            a[i] = sc.nextInt();        }         for (int i=0; i<n; ++i) {            int newb = compl(a[i], k, p);            b.put(newb, 1 + b.getOrDefault(newb, 0));        }         long result = 0;        for (int i=0; i<n; ++i) {            int newb = compl(a[i], k, p);            result += b.get(newb) - 1;        }         System.out.println(result / 2);    }}
