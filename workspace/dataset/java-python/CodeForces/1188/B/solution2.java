import  java.io.*;import  java.math.*;import java.nio.Buffer;import java.sql.SQLSyntaxErrorException;import  java.util.*;import  java.text.*;import java.util.stream.Collectors; public class Main {     public  static  int c(int n,int m){        int count=1;        for(int i=1;i<=m;i++){            count*=(n-i+1);        }        for(int i=2;i<=m;i++){            count=count/i;        }        return count;    }    public static void reset(){        System.out.println("R");    }    public  static boolean query(int x){        Scanner cin = new Scanner(System.in);        System.out.printf("? %d\n",x+1);        String str=cin.next();        char s[]=str.toCharArray();        if(s[0]=='Y'){            return true;        }        else{            return false;        }    }    public  static long dis(long x,long y,long x1,long y1){        return Math.abs(x-x1)+Math.abs(y-y1);    }    static final char[] VALUES = { 'S', 'E', 'T' };     static int[][][][]dp=new int[105][100][100][2];    static int []num;    static int MOD = 1000000007;     public static long bigMod(long n,long k,long p){        long ans=1;        while(k>0){            if((k&1)==1){                ans=(ans*n)%p;            }            n=(n*n)%p;            k=k>>1;        }        return ans;    }    public static void main(String[] args) {        Scanner cin = new Scanner(System.in);        long n=cin.nextLong();        long p=cin.nextLong();        long k=cin.nextLong();        Map<Long ,Long> mp=new HashMap<Long,Long>();        long ans=0;        for(long i=0;i<n;i++){            long a=cin.nextLong();            long b=bigMod(a,4,p)-(k*a)%p;            if(b<0){                b+=p;            }            if(mp.containsKey(b)){                ans+=mp.get(b);                long val=mp.get(b);                val++;                 mp.put(b,val);            }            else{                mp.put(b,(long) 1);            }        }        System.out.println(ans);     }    public  static int slove(int idx,int odd,int even,int lst){            if(odd<0||even<0){                return Integer.MAX_VALUE;            }            if(idx==num.length){                return 0;            }            if(dp[idx][odd][even][lst]!=0){                return dp[idx][odd][even][lst];            }            int res=Integer.MAX_VALUE;            if(num[idx]!=0){                res=slove(idx+1,odd,even,num[idx]%2);                res+=num[idx]%2==lst?0:1;                dp[idx][odd][even][lst]=res;            }            else{                res=slove(idx+1,odd-1,even,0);                int r=slove(idx+1,odd,even-1,1);                if(res!=Integer.MAX_VALUE)res+= lst==0?0:1;                if(r!=Integer.MAX_VALUE) r+= lst==0?1:0;                dp[idx][odd][even][lst]=Math.min(res, r);            }            return dp[idx][odd][even][lst];        }    public static String compute(String x,String y){        StringBuilder result=new StringBuilder();        for(int i=0;i<x.length();i++){            char a=x.charAt(i);            char b=y.charAt(i);             char ch;            if(a==b){                ch=a;            }            else{                for(int j=0;;j++){                    if(VALUES[j]!=a&&VALUES[j]!=b){                        ch=VALUES[j];                        break;                    }                }            }            result.append(ch);        }        return result.toString();     }    } 	 	 	   	 	 					 	  	   			  	
