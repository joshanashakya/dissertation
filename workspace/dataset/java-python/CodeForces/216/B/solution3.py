from collections import defaultdictfrom collections import dequeclass graph:    def __init__(self,V):        self.nodes = defaultdict(list)        self.V = V        self.edges = []    def addEdge(self,u,v):        self.nodes[u].append(v)        self.nodes[v].append(u) #for undirected        def isbipartite(self,visited,startnode):        colors = [-1 for x in range(self.V)]        colors[0] = 0        q = deque([startnode])        while q:            curr = q.popleft()            if not visited[curr]:                for neighbor in self.nodes[curr]:                    if colors[neighbor]!=colors[curr] or colors[neighbor]==-1:                        colors[neighbor] = int(not colors[curr])                         q.append(neighbor)                    else:                        colors[neighbor] = 2                visited[curr] = True        return colors size,e = [int(x) for x in input().split()]g = graph(size)for i in range(e):    u,v = [int(x) for x in input().split()]    g.addEdge(u-1,v-1)visited = [False for x in range(size)]finalcolors = []for startnode in range(0,size):    if not visited[startnode]:        finalcolors.extend(g.isbipartite(visited,startnode))toremove = finalcolors.count(2)if (size-toremove)%2==0:    print(toremove)else:    print(toremove+1)
