from collections import defaultdictn , m = map(int, input().split())graph = defaultdict(list)is_vis = [False] * (n+1)sol =0def dfs(node, par, path):    if is_vis[node]:        return path % 2 != 0     is_vis[node] = True     for sub_node in graph[node]:        if sub_node != par:            path += 1             if dfs(sub_node, node, path):                 return 1     return 0  for i in range(0, m):    l , r = map(int, input().split())    graph[l].append(r)    graph[r].append(l) for key in graph.keys():    if not is_vis[key]:        sol += dfs(key, -1, 0) print(sol + ((n-sol) % 2 != 0))
