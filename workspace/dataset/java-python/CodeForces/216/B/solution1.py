import pdb def correct_colouring(x0, edges, visited, colouring):    s = [x0]    visited[x0] = True    colouring[x0] = 1    while s:        x = s.pop()        for neigh in edges[x]:            if not visited[neigh]:                visited[neigh] = True                colouring[neigh] = -colouring[x]                s.append(neigh)            elif colouring[neigh] == colouring[x]:                return False    return True def solve():    n, m = map(int, input().split())    edges = [[] for _ in range(n+1)]    for _ in range(m):        i, j = map(int, input().split())        edges[i].append(j)        edges[j].append(i)    visited = [False for _ in range(n+1)]    colouring = [0 for _ in range(n+1)]    removed = 0    for x0 in range(1, n+1):        if not visited[x0]:            correct = correct_colouring(x0, edges, visited, colouring)             if not correct:                removed += 1    if (n - removed)% 2:        removed += 1    print(removed)         if __name__ == '__main__':    solve()
