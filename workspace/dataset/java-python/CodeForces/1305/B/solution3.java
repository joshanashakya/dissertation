//WHEN IN DOUBT , USE BRUTE FORCE !!!!!!!!!import java.lang.String;import java.io.*;import java.util.*;import java.util.StringTokenizer;//class Main    //AtCoder()Bt//class Solution // Codechefpublic class Solution2 //Codeforces{    public static void main(String args[])    {        try {            FastReader sc = new FastReader();            int TT = 1;//sc.nextInt();            for(int hehe=1 ; hehe  <= TT ; hehe++){                String str=sc.nextLine();int max=2;                int cnt=0;                List<Set<Integer>> ll=new ArrayList<>();                while(true){                    int op=0,cl=0,cntOP=0,cntCl=0;                    int opArr[]=new int[str.length()];                    int clArr[]=new int[str.length()];                    for(int i=0;i<str.length();i++){                        if(str.charAt(i)=='(') {                            if (i != 0 && str.charAt(i) == '(')                                opArr[i] = opArr[i - 1] + 1;                            else if (str.charAt(i) == '(')                                opArr[i] = 1;                            clArr[i] = (i == 0) ? 0 : clArr[i - 1];                        }                        else {                            if (i != 0)                                clArr[i] = clArr[i - 1] + 1;                            else if (str.charAt(i) == '(')                                clArr[i] = 1;                            opArr[i] = (i == 0) ? 0 : opArr[i - 1];                        }                    }                    max=0;int ind=-1;                    //printArray(clArr);printArray(opArr);                    for(int i=0;i<str.length();i++){                        int JJ=Math.max(-5 , Math.min(opArr[i]                                ,clArr[str.length()-1]-clArr[i]));                        if(JJ > max){                            max=JJ;                            ind=i;                        }                    }                    if(max==0){                        sopln(0);                        break;                    }                    max=2*max;                    //sopln(max);                    Set<Integer> l=new TreeSet<>();                    StringBuilder b=new StringBuilder(str);                     sopln(1);sopln(max);                    Vector<Integer> vec=new Vector<>();                    for(int i=0;i<str.length();i++){                        if(str.charAt(i)=='(' && op<(max/2) && i <= ind){                            //sop((i+1)+" ");                            vec.add(i+1);                            op++;                        }                    }                    for(int i=str.length()-1;i>=0;i--){                        if(str.charAt(i)==')' && cl<(max/2) && i > ind){                            //sop((i+1)+" ");                            vec.add(i+1);                            cl++;                        }                    }                    Collections.sort(vec);                    for(Integer i : vec){                        sop(i+" ");                    }                    //ll.add(l);                    break;                }            }            //out.flush();        }catch (Exception e) {            sopln(e.toString());        }    }     public final static int d = 256;    static int MOD = 1000000007;    static final double PI = Math.PI;    private static BufferedReader in = new BufferedReader (new InputStreamReader (System.in));    private static PrintWriter out = new PrintWriter (new OutputStreamWriter (System.out));    static class FastReader{        BufferedReader br;        StringTokenizer st;        public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         char nextChar()        {            try {                return (char) (br.read());            }catch (IOException e){                return '~';            }        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }    static void sop(Object o){System.out.print(o);}    static double ceil(double d){        return Math.ceil(d);    }    static double floor(double d){        return Math.floor(d);    }    static double round(double d){        return Math.round(d);    }    static void sopln(Object o){System.out.println(o);}    static void printArray(long[] arr){        for(int i=0;i<arr.length;i++){            sop(arr[i]+" ");        }        sopln("");    }    static void printArray(int[] arr){        for(int i=0;i<arr.length;i++){            sop(arr[i]+" ");        }        sopln("");    }}
