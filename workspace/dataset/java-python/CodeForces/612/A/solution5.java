import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.util.TreeSet; public class Main {      public static void main(String[] args) throws IOException {        Scanner s = new Scanner(System.in);        int n = s.nextInt(),p=s.nextInt(),q=s.nextInt();        String word = s.next();         boolean flag = false;          for(int i=0;i<=n;i++){            int pp = i;            int qq = (n-(pp*Math.min(p,q)))/Math.max(p,q);             if(pp>=0 && qq>=0 && (pp*p)+(qq*q)==n){                flag = true;                 System.out.println(pp+qq);                //System.out.println(i);                 int j=0,last=0;                 for(;j<pp*p;j+=p){                    System.out.println(word.substring(j,j+p));                    last = j+p;                }                    j = last;                 for(;j<n;j+=q){                    System.out.println(word.substring(j,j+q));                }                 break;            }              else if(pp>=0 && qq>=0 && (pp*q)+(qq*p)==n){                flag = true;                 System.out.println(pp+qq);                 int j=0,last=0;                 for(;j<pp*q;j+=q){                    System.out.println(word.substring(j,j+q));                    last = j+q;                }                 j = last;                 for(;j<n;j+=p){                    System.out.println(word.substring(j,j+p));                }                 break;            }         }         if(!flag) System.out.println(-1);        }  }  class Scanner{    StringTokenizer st;    BufferedReader br;     public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));}     public String next() throws IOException    {        while (st == null || !st.hasMoreTokens())            st = new StringTokenizer(br.readLine());        return st.nextToken();    }     public int nextInt() throws IOException {return Integer.parseInt(next());}     public long nextLong() throws IOException {return Long.parseLong(next());}     public String nextLine() throws IOException {return br.readLine();}     public double nextDouble() throws IOException    {        String x = next();        StringBuilder sb = new StringBuilder("0");        double res = 0, f = 1;        boolean dec = false, neg = false;        int start = 0;        if(x.charAt(0) == '-')        {            neg = true;            start++;        }        for(int i = start; i < x.length(); i++)            if(x.charAt(i) == '.')            {                res = Long.parseLong(sb.toString());                sb = new StringBuilder("0");                dec = true;            }            else            {                sb.append(x.charAt(i));                if(dec)                    f *= 10;            }        res += Long.parseLong(sb.toString()) / f;        return res * (neg?-1:1);    }     public boolean ready() throws IOException {return br.ready();}  }
