import java.io.*;import java.util.StringTokenizer; /** * _140B * θ(n^2) time * θ(n^2) space * * @author artyom */public class _140B implements Runnable {    private BufferedReader in;    private StringTokenizer tok;     private Object solve() throws IOException {        int n = nextInt();        int[][] rs = new int[n][n];        int[] p = new int[n];        for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                rs[i][j] = nextInt();            }        }        for (int i = 0; i < n; i++) {            p[i] = nextInt();        }        int[] z = new int[n + 1];        for (int i = 1; i < n; i++) {            for (int j = 0; j < i; j++) {                if (p[j] < p[i]) {                    if (z[p[i]] == 0) {                        z[p[i]] = p[j];                    } else {                        z[p[i]] = -1;                        break;                    }                }            }        }        StringBuilder sb = new StringBuilder();        for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                if (rs[i][j] != i + 1 && (z[rs[i][j]] == 0 || z[rs[i][j]] == i + 1)) {                    sb.append(rs[i][j]);                    if (i < n - 1) {                        sb.append(' ');                    }                    break;                }            }        }        return sb;    }     //--------------------------------------------------------------    public static void main(String[] args) {        new _140B().run();    }     @Override    public void run() {        try {            in = new BufferedReader(new InputStreamReader(System.in));            tok = null;            PrintStream out = System.out;            out.print(solve());            in.close();        } catch (IOException e) {            System.exit(0);        }    }     private String nextToken() throws IOException {        while (tok == null || !tok.hasMoreTokens()) {            tok = new StringTokenizer(in.readLine());        }        return tok.nextToken();    }     private int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }     private long nextLong() throws IOException {        return Long.parseLong(nextToken());    }}
