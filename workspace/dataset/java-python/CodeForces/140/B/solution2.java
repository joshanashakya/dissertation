import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        b140 solver = new b140();        solver.solve(1, in, out);        out.close();    }     static class b140 {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int[][] pref = new int[n][n];            int[][] prefLvl = new int[n][n + 1];            for (int i = 0; i < n; i++) {                for (int j = 0; j < n; j++) {                    pref[i][j] = in.nextInt();                    prefLvl[i][pref[i][j]] = j;                }                prefLvl[i][0] = n + 2;            }            int[] mainPref = new int[n];            for (int i = 0; i < n; i++) {                mainPref[i] = in.nextInt();            }            boolean[] mainPrefUsed = new boolean[n + 1];            int[][] mainPrefByTime = new int[n][2];            int[][] canSend = new int[n][n];            for (int i = 0; i < n; i++) {                int used = 0;                mainPrefUsed[i + 1] = true;                for (int j = 0; j < n; j++) {                    if (mainPrefUsed[mainPref[j]]) {                        mainPrefByTime[i][used] = mainPref[j];                        used++;                        if (used == 2) break;                    }                }                for (int j = 0; j < n; j++) {                    if (j + 1 == mainPrefByTime[i][0]) {                        canSend[i][j] = mainPrefByTime[i][1];                    } else {                        canSend[i][j] = mainPrefByTime[i][0];                    }                }            }            for (int j = 0; j < n; j++) {                int ansInd = canSend[0][j];                for (int i = 0; i < n; i++) {                    if (prefLvl[j][ansInd] > prefLvl[j][canSend[i][j]]) {                        ansInd = canSend[i][j];                    }                }                out.print(ansInd + " ");            }        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
