import java.io.DataInputStream;import java.io.FileInputStream;import java.io.IOException;import java.util.Scanner;Â public class Main {		static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     } 		public static void main(String[] args) throws Exception	{		Reader s=new Reader();				long mod=998244353;				int n=s.nextInt();				int[] a=new int[n+1];				for(int i=1;i<n+1;i++)		{			a[i]=s.nextInt();		}				int M=200;				long[][][] dp=new long[2][201][2];				for (int j = 0; j <= M; ++j) {			dp[0][j][1] = 1;		}		for (int i = 1; i <= n; ++i) {			for (int j = 1; j <= M; ++j) {				if (a[i] == -1 || a[i] == j) {					dp[1][j][0] = dp[0][j - 1][0] + dp[0][j - 1][1];					dp[1][j][0] %= mod;					dp[1][j][1] = dp[0][M][1] - dp[0][j - 1][1];					dp[1][j][1] += dp[0][j][0] - dp[0][j - 1][0] + 2 * mod;					dp[1][j][1] %= mod;				}								for (int t = 0; t < 2; ++t) {					dp[1][j][t] += dp[1][j - 1][t];					dp[1][j][t] %= mod;				}			}						for(int j=0;j<M+1;j++)			{				dp[0][j][0]=dp[1][j][0];				dp[0][j][1]=dp[1][j][1];								dp[1][j][0]=0;				dp[1][j][1]=0;			}		}				System.out.println(dp[0][M][1]);			}	}
