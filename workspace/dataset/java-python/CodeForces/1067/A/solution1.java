import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);         new Main().run(in, out);        out.close();    }     public static long mod = 998244353L;     void run(FastScanner in, PrintWriter out) {         int N = in.nextInt();        // N = 100_000;         int[] a = new int[N];        for (int i = 0; i < N; i++) a[i] = in.nextInt();         // Random r = new Random();        // for (int i = 0; i < N; i++) a[i] = r.nextInt(100) <= 0 ? -1 : r.nextInt(200)+1;          long[][][] dp = new long[2][2][201];        if (a[0] != -1) {            dp[0][0][a[0]] = 1;        } else {            for (int i = 1; i <= 200; i++) {                dp[0][0][i] = 1;            }        }        for (int i = 1; i < N; i++) {             Arrays.fill(dp[i%2][0], 0);            Arrays.fill(dp[i%2][1], 0);             if (a[i] == -1) {                // if k 0, i get contribution from those less than me, that are also 0 or 1                long s = 0;                for (int v = 1; v <= 200; v++) {                    dp[i%2][0][v] = s;                    s = (s + dp[(i-1)%2][0][v] + dp[(i-1)%2][1][v]) % mod;                }                 // if k 1, i get contribution from values greater than me                // i can still go eq                s = 0;                for (int v = 1; v <= 200; v++) s = (s + dp[(i-1)%2][1][v]) % mod;                for (int v = 1; v <= 200; v++) {                    dp[i%2][1][v] = (s + dp[(i-1)%2][0][v]) % mod;                    s = (((s - dp[(i-1)%2][1][v])%mod)+mod)%mod;                }            } else {                 long s = 0;                for (int v = 1; v < a[i]; v++) {                    s = (s + dp[(i-1)%2][0][v] + dp[(i-1)%2][1][v]) % mod;                }                dp[i%2][0][a[i]] = s;                 s = 0;                for (int v = a[i]; v <= 200; v++) s = (s + dp[(i-1)%2][1][v]) % mod;                dp[i%2][1][a[i]] = (s + dp[(i-1)%2][0][a[i]]) % mod;            }        }         if (a[N-1] != -1) {            long s = dp[(N-1)%2][1][a[N-1]];            System.out.println(s);        } else {            long s = 0;            for (int i = 1; i <= 200; i++) {                s = (s + dp[(N-1)%2][1][i]) % mod;            }            System.out.println(s);        }     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
