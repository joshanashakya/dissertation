import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;Â public class Solveaproblem {    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        int n = Integer.parseInt(reader.readLine());        StringTokenizer sToken = new StringTokenizer(reader.readLine());        int[] arr = new int[n];        for (int i=0; i<n; i++) arr[i] = Integer.parseInt(sToken.nextToken());        int[][] dp = new int[201][2];        int[][] pref = new int[201][2];        int mod = 998244353;        for (int i = 1; i<=200; i++) {            if (arr[0]==-1 || arr[0]==i) dp[i][0] = 1;            pref[i][0] = (pref[i-1][0] + dp[i][0]) % mod;            if (pref[i][0]<0) pref[i][0]+= mod;        }        for (int i=1; i<n; i++) {            int[][] newdp = new int[201][2];            for (int j=200; j>0; j--) {                if (!(arr[i]==-1 || arr[i]==j)) continue;                newdp[j][0] = (pref[j-1][0] + pref[j-1][1]) % mod;                if (newdp[j][0]<0) newdp[j][0]+= mod;                newdp[j][1] = ((dp[j][0] + pref[200][1]) % mod - pref[j-1][1]) % mod;                if (newdp[j][1]<0) newdp[j][1]+= mod;            }            for (int j=1; j<=200; j++) {                dp[j] = Arrays.copyOf(newdp[j], 2);                pref[j][0] = (pref[j-1][0] + dp[j][0]) % mod;                if (pref[j][0]<0) pref[j][0]+= mod;                pref[j][1] = (pref[j-1][1] + dp[j][1]) % mod;                if (pref[j][1]<0) pref[j][1]+= mod;            }        }        int res = 0;        for (int i=1; i<=200; i++) {            res = (res + dp[i][1]) % mod;            if (res<0) res+= mod;        }        PrintWriter writer = new PrintWriter(System.out);        writer.print(res);        writer.close();    }}
