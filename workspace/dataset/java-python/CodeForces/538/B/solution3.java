import java.util.*;import java.math.*;import java.io.*; // Arrays.sort();//char[] a=fs.next().toCharArray(); public class B_Quasi_Binary {    public static void main(String[] args) {        FastScanner fs = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        String n = fs.next();        int max = 0;        for (int i = 0; i < n.length(); i++) {            int a = Integer.valueOf("" + n.charAt(i));            if (a > max) {                max = a;            }        }        System.out.println(max);        while (max > 0) {            String t = "";            for (int i = 0; i < n.length(); i++) {                int a = Integer.valueOf("" + n.charAt(i));                if (a > 0) {                    t += 1;                } else {                    t += 0;                }            }            System.out.print(t + " ");            n = "" + (Integer.valueOf(n) - Integer.valueOf(t));            max--;        }         out.close();    }     static void sort(int[] a) {        ArrayList<Integer> l = new ArrayList<>();        for (int i : a)            l.add(i);        Collections.sort(l);        for (int i = 0; i < a.length; i++)            a[i] = l.get(i);    }     static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         StringBuilder nextsb() {            StringBuilder sb = new StringBuilder(next());            return sb;        }         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                }            return st.nextToken();        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
