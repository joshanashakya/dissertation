import java.util.*;import java.lang.*;import java.math.*;import java.io.*;import java.util.HashSet;import java.util.Scanner;import java.util.Set;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.text.DecimalFormat;import java.lang.Math;import java.util.Iterator; public class C47{    static class Pair implements Comparable<Pair>{		int v;		int i;		public Pair(int v, int i) {			this.v = v;			this.i = i;		}		@Override		public int compareTo(Pair o) {			// TODO Auto-generated method stub			return this.v-o.v;		}	}	public static boolean isPrime(long n){	    if(n < 2){	        return false;	    }	    if(n%2==0){	        return n==2;	    }	    if(n%3==0){	        return n==3;	    }	    long i = 5;	    long h = (long)Math.floor(Math.sqrt(n)+1);	    while(i <= h){	        if(n%i==0){	            return false;	        }	        if(n%(i+2)==0){	            return false;	        }	        i += 6;	    }	    return true;	}	public static int gcd(int a, int b){	    return b==0? a:gcd(b, a%b);	}	public static long bSearch(int n,ArrayList<Long> A){	    int s = 0;	    int e = A.size()-1;	    while(s<=e){	        int m = s+(e-s)/2;	        if(A.get(m)==(long)n){	            return A.get(m);	        }	        else if(A.get(m)>(long)n){	            e = m-1;	        }	        else{	            s = m+1;	        }	    }	    return A.get(s);	}	static class Point implements Comparable<Point>{		int x;		int y;		public Point(int x, int y){			this.x = x;			this.y = y;		}		@Override		public int compareTo(Point o) {			// TODO Auto-generated method stub			if(this.x==o.x){			    return this.y-o.y;			}			return this.x-o.x;		}	}	public static void main(String[] args) {		Scanner sc = new Scanner(System.in);		String s = sc.next();		int[] count = new int[10];		for(int i = 0; i < s.length(); i++){		    count[s.charAt(i)-'0']++;		}		count[1]--;count[6]--;count[8]--;count[9]--;		int mod = 0;		StringBuffer ans = new StringBuffer("");		for(int i = 1; i <= 9; i++){		    while(count[i]-->0){		        mod *= 10;		        mod += i;		        mod %= 7;		        ans.append(i);		    }		}		mod *= 10000;		mod %= 7;		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();		hm.put(7, 1869);        hm.put(1, 1968);        hm.put(2, 1689);        hm.put(3, 6198);        hm.put(4, 1698);        hm.put(5, 1986);        hm.put(6, 1896);        for(int i = 1; i <= 7; i++){            if((mod+hm.get(i))%7==0){                ans.append(hm.get(i));                break;            }        }        while(count[0]-->0){            ans.append(0);        }        System.out.println(ans);	}}Â 
