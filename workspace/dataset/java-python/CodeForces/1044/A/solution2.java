import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int m=input.nextInt();            long v[]=new long[n+1];            for(int i=0;i<n;i++)            {                v[i]=input.nextInt();            }            v[n]=(int)1e9;            n++;            long h[]=new long[m];            int x=0;            for(int i=0;i<m;i++)            {                long x1=input.nextInt();                long x2=input.nextInt();                long y=input.nextInt();                if(x1==1)                {                    h[x]=x2;                    x++;                }            }            m=x;            mergeSort(v,0,n-1);            mergeSort(h,0,m-1);            int j=m-1;            long count=0;            long min=Long.MAX_VALUE;            for(int i=n-1;i>=0;i--)            {                long p=v[i];                int in=-1;                for(int k=j;k>=0;k--)                {                    if(h[k]<p)                    {                        in=k;                        break;                    }                }                count+=(long)j-(long)(in+1)+1;                min=Math.min(min,count+i);                j=in;            }            out.println(min);        }        out.close();    }    public static void mergeSort(long a[],int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort(a,p,q);            mergeSort(a,q+1,r);            merge(a,p,q,r);        }    }    public static void merge(long a[],int p,int q,int r)    {        int n1=q-p+2;        long L[]=new long[n1];        int n2=r-q+1;        long R[]=new long[n2];        for(int i=p;i<=q;i++)        {            L[i-p]=a[i];        }        L[n1-1]=Integer.MAX_VALUE;        for(int i=q+1;i<=r;i++)        {            R[i-q-1]=a[i];        }        R[n2-1]=Integer.MAX_VALUE;        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L[x]<=R[y])            {                a[i]=L[x];                x++;            }            else            {                a[i]=R[y];                y++;            }        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
