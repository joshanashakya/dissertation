# ------------------- fast io --------------------import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------- fast io --------------------from math import gcd, ceil def pre(s):    n = len(s)    pi = [0] * n    for i in range(1, n):        j = pi[i - 1]        while j and s[i] != s[j]:            j = pi[j - 1]        if s[i] == s[j]:            j += 1        pi[i] = j    return pi  def prod(a):    ans = 1    for each in a:        ans = (ans * each)    return ans def lcm(a, b): return a * b // gcd(a, b)  def binary(x, length=16):    y = bin(x)[2:]    return y if len(y) >= length else "0" * (length - len(y)) + y from heapq import heappop, heappush  def dijkstra(n, graph, start):    """ Uses Dijkstra's algortihm to find the shortest path between in a graph. """    dist, parents = [float("inf")] * n, [-1] * n    dist[start] = 0     queue = [(0, start)]    while queue:        path_len, v = heappop(queue)        if path_len == dist[v]:            for w, edge_len in graph[v]:                if edge_len + path_len < dist[w]:                    dist[w], parents[w] = edge_len + path_len, v                    heappush(queue, (edge_len + path_len, w))     return dist  for _ in range(int(input()) if True else 1):    n = int(input())    graph = [[] for __ in range(n+1)]    for i in range(n-1):        x, y = map(int, input().split())        graph[x] += [(y,1)]        graph[y] += [(x,1)]    k1 = int(input())    x = list(map(int, input().split()))    k2 = int(input())    y = list(map(int, input().split()))    print(f"B {y[0]}", flush=True)    ans = int(input())    dik = dijkstra(n+1, graph, ans)    minn = 999999    ans = 0    for i in x:        if dik[i] < minn:            minn = dik[i]            ans = i    print(f"A {ans}", flush=True)    b = int(input())    if b in y:        print(f"C {ans}", flush=True)    else:        print("C -1", flush=True)
