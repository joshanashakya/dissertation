import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Random;import java.util.StringTokenizer;import java.util.TreeMap;Â public class Solution{		static ArrayList<Integer>[] adjlist;	static int[] dis;	static final int inf = (int)1e9;	static final int maxn = 1005;		    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	adjlist = new ArrayList[maxn];    	for(int i=0;i<maxn;i++) adjlist[i] = new ArrayList<Integer>();    	ArrayList<Integer> x = new ArrayList<Integer>();    	ArrayList<Integer> y = new ArrayList<Integer>();    	    	dis = new int[maxn];    		    	int tt = fs.nextInt();    	while(tt-->0) {    		    		int n = fs.nextInt();    		    		for(int i=0;i<n;i++) adjlist[i].clear();    		    		    		for(int i=0;i<n-1;i++) {    			int u = fs.nextInt()-1, v = fs.nextInt()-1;    			adjlist[u].add(v);    			adjlist[v].add(u);    		}    		    		int k1 = fs.nextInt();    		x.clear();    		for(int i=0;i<k1;i++) {    			x.add(fs.nextInt());    		}    		    		    		int k2 = fs.nextInt();    		y.clear();    		for(int i=0;i<k2;i++) {    			y.add(fs.nextInt());    		}    		    		    		    		    		out.println("B "+y.get(0));    		out.flush();    		    		int src = fs.nextInt()-1;    		dis[src] = 0;    		    		dfs(src, -1);    		    		    		int min = (int)1e9;    		int cv = -1;    		    		for(int k: x) {    			if(dis[k-1]<min) {    				min = dis[k-1];    				cv = k-1;    			}    		}    		    		out.println("A "+(cv+1));    		out.flush();    		int p = fs.nextInt();    		    		if(y.contains(p)) {    			out.println("C "+(cv+1));    		}    		else {    			out.println("C -1");    		}    		    		out.flush();    		    		    		    		    		    		    		    		    	}    	    		    		    		    	out.close();    		    }                      //finding the distances    static void dfs(int v, int par) {    	for(int u: adjlist[v]) {    		if(u!=par) {    			dis[u] = 1 + dis[v];    			dfs(u, v);    		}    	}    }                                static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
