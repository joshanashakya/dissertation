import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.math.BigInteger;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.Map.Entry;import java.util.Random;import java.util.Set;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.Vector;  public class Solve {	static int mod= 1000000007;	static long [][]ncr ; 	public static void main(String[] args) throws Exception {		 PrintWriter out = new PrintWriter(System.out);		 Scanner sc = new Scanner(System.in);		 int n =sc.nextInt();		 int a[]=new int[2*n-1];		 int sum=0;		 int min=4000000;		 int SUM=0;		 int c=0;		 ArrayList<Integer>aa = new ArrayList<>();		 for(int i=0;i<2*n-1;i++) {			 a[i]=sc.nextInt();			 SUM+=a[i];			if(a[i]<0) {				c++;				min=Math.min(min, a[i]*-1);				sum+=-1*a[i];			}			else {				min=Math.min(min, a[i]); 				aa.add(a[i]);				sum+=a[i];			}		 }		 int max1= SUM;		 if(c%2==1 && c%n!=0 && n%2==0)			 sum-=2*min;		 int max2= sum;		 int max3=max2; 		 if(aa.size()>=n-1 && c%2==1) {			 Collections.sort(aa);			 int x = 0 ;			 for(int i=0;i<n-1;i++)				 x+=aa.get(i);			 if(min>x) {				 max3+=2*min;				 max3-=2*x;			 }		 }		// System.out.println(min);		 		 		 System.out.println(Math.max(max3,Math.max(max1, max2)));		 		 		 							} 	private static void ncrbuild(int n, int k) {		ncr= new long[n+4][k+4];		for(int i=1;i<=n;i++) {			for(int j=0; j<=i;j++) {				if(j==0 ||i==j )					ncr[i][j]=1L;				else {					ncr[i][j]=(ncr[i-1][j-1]%mod+ncr[i-1][j]%mod)%mod;				}			}		}			}	   		 	  }                     			  class point implements Comparable{	int x ,y,z;	point(int x,int y,int z)	{		this.x=x;		this.y=y;		this.z=z;	}	@Override	public int compareTo(Object arg0) {				point u =((point)arg0);				return -this.z+u.z;	}} 	  	    	    	       class Scanner {	StringTokenizer st;	BufferedReader br; 	public Scanner(InputStream s) {		br = new BufferedReader(new InputStreamReader(s));	} 	public Scanner(String f) throws FileNotFoundException {		br = new BufferedReader(new FileReader(f));	} 	public String next() throws IOException {		while (st == null || !st.hasMoreTokens())			st = new StringTokenizer(br.readLine());		return st.nextToken();	} 	public int nextInt() throws IOException {		return Integer.parseInt(next());	} 	public long nextLong() throws IOException {		return Long.parseLong(next());	} 	public String nextLine() throws IOException {		return br.readLine();	} 	public double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	public boolean ready() throws IOException {		return br.ready();	} 	public int[] nextIntArray(int n) throws IOException {		int[] a = new int[n];		for (int i = 0; i < n; i++)			a[i] = nextInt();		return a;	} 	public int[] nextIntArray1(int n) throws IOException {		int[] a = new int[n + 1];		for (int i = 1; i <= n; i++)			a[i] = nextInt();		return a;	} 	public int[] shuffle(int[] a, int n) {		int[] b = new int[n];		for (int i = 0; i < n; i++)			b[i] = a[i];		Random r = new Random();		for (int i = 0; i < n; i++) {			int j = i + r.nextInt(n - i);			int t = b[i];			b[i] = b[j];			b[j] = t;		}		return b;	} 	public int[] nextIntArraySorted(int n) throws IOException {		int[] a = nextIntArray(n);		a = shuffle(a, n);		Arrays.sort(a);		return a;	} 	public long[] nextLongArray(int n) throws IOException {		long[] a = new long[n];		for (int i = 0; i < n; i++)			a[i] = nextLong();		return a;	} 	public long[] nextLongArray1(int n) throws IOException {		long[] a = new long[n + 1];		for (int i = 1; i <= n; i++)			a[i] = nextLong();		return a;	} 	public long[] nextLongArraySorted(int n) throws IOException {		long[] a = nextLongArray(n);		Random r = new Random();		for (int i = 0; i < n; i++) {			int j = i + r.nextInt(n - i);			long t = a[i];			a[i] = a[j];			a[j] = t;		}		Arrays.sort(a);		return a;	}}
