import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        int d = in.nextInt();        int[] A = new int[n];        for (int i=1;i<n - 1;i++)   A[i] = in.nextInt();        int[] X = new int[n];        int[] Y = new int[n];        for (int i=0;i<n;i++)        {            X[i] = in.nextInt();            Y[i] = in.nextInt();        }        int l = 0;        int r = 50000000;        int ans = Integer.MAX_VALUE;        boolean x = check(X, Y, A, 2000, d);        while (l <= r)        {            int mid = (l + r) / 2;            if(check(X, Y, A, mid, d))            {                ans = mid;                r = mid - 1;            }            else    l = mid + 1;        }        System.out.println(ans);    }    public static boolean check(int[] X, int[] Y, int[] A, int startCoins, int d)    {        int n = X.length;        PriorityQueue<Game> pq = new PriorityQueue<>();        HashSet<Integer> h = new HashSet<>();        boolean flag = false;        pq.add(new Game(0, 0));        while (!pq.isEmpty())        {            Game ob = pq.poll();            int index = ob.index;            int coins = ob.coins;            int x1 = X[index];  int y1 = Y[index];            if (h.contains(index))                continue;            else            {                h.add(index);                if (coins < 0) continue;                if (index == 0)                    coins += startCoins;                else if (index == n - 1)                {                    flag = true;                    break;                }                else                    coins += A[index];                for (int i=0;i<n;i++)                {                    int x2 = X[i];  int y2 = Y[i];                    int dist = Math.abs(x2 - x1) + Math.abs(y2 - y1);                    dist *= d;                    int reachCoins = coins - dist;                    pq.add(new Game(i, reachCoins));                }            }        }        return flag;    }}class Game implements Comparable<Game>{    int index;    int coins;     public Game(int index, int coins)    {        this.index = index;        this.coins = coins;    }     @Override    public int compareTo(Game ob)    {        if (this.coins < ob.coins)            return 1;        else if (this.coins > ob.coins)            return -1;        return 0;    }     @Override    public boolean equals(Object ob)    {        if (ob == null)            return false;        if (!(ob instanceof Game))            return false;        if (this == ob)            return true;        Game obj = (Game)ob;        if (this.index == obj.index)            return true;        return false;    }     @Override    public int hashCode()    {        return this.index;    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
