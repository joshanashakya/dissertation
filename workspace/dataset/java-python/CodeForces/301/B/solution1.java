import java.io.*;import java.util.*; public class Main {    static PrintWriter out = new PrintWriter(System.out);    static Scanner sc = new Scanner(System.in);    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));    long mod = 998244353;    long inv2 =1;    int step = 1;    long[] ans;     List<int[]>[] graph;      public static void main(String[] args) throws IOException {        Main main = new Main();         main.solve();//        long ans = main.solve();         out.flush();    }    void solve() throws IOException {        // use Dij        int n = sc.nextInt(), d = sc.nextInt();        int[] a = new int[n];        for(int i=1; i<n-1; i++) a[i] = sc.nextInt();        int[][] pos = new int[n][];        for(int i=0; i<n; i++) pos[i] = new int[]{sc.nextInt(), sc.nextInt()};        graph = new List[n];        for(int i=0; i<n; i++) graph[i] = new LinkedList<>();        for(int i=0; i<n; i++){            for(int j=0; j<n; j++){                if(j==i) continue;                int dist = d*(Math.abs(pos[i][0]-pos[j][0])+Math.abs(pos[i][1]-pos[j][1]));                graph[i].add(new int[]{j, dist-a[j]});             }        }        long[] dist = new long[n];        Arrays.fill(dist, Long.MAX_VALUE/10);        dist[0] = 0;        PriorityQueue<State> pq = new PriorityQueue<>(n*n, Comparator.comparingLong(s1->s1.dis));        pq.add(new State(0,0));        while(pq.size()>0){            State cur = pq.poll();            int idx = cur.pos;            long val = cur.dis;            if(dist[cur.pos]<val) continue;            if(idx==n-1) break;            for(int[] e:graph[idx]){                int to = e[0], cost = e[1];                if(dist[to]>val+cost){                    dist[to] = val+cost;                    pq.add(new State(to, dist[to]));                }            }        }        out.println(dist[n-1]);    }    class State{        int pos; long dis;        public State(int p, long d){this.pos = p; this.dis = d;}    }     int paIn(String s){return Integer.parseInt(s);}}
