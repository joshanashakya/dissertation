import java.io.*;import java.math.BigInteger;import java.util.*;     public class Main {	 	public static class FastReader {		BufferedReader br;		StringTokenizer root;		 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (root == null || !root.hasMoreTokens()) {				try {					root = new StringTokenizer(br.readLine());				} catch (Exception addd) {					addd.printStackTrace();				}			}			return root.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception addd) {				addd.printStackTrace();			}			return str;		}	}		public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));		public static FastReader sc = new FastReader(); 	static int mod = (int) (1e9+7),MAX=(int) (2e5);    static List<Integer>[] edges; 		public static void main(String[] args){			    int n = sc.nextInt();	    int d = sc.nextInt();	    long[][] dp = new long[n+1][n+1];	    int[] a = new int[n+1];	    int[] x = new int[n+1];	    int[] y = new int[n+1];	   	    for(int i=2;i<=n-1;++i) a[i] = sc.nextInt();	    for(int i=1;i<=n;++i) {	    	x[i] = sc.nextInt();	    	y[i] = sc.nextInt();	    }	    for(int i=1;i<=n;++i) {	    	for(int j=1;j<=n;++j) {	    		if(i == j) dp[i][j] = Integer.MAX_VALUE;	    		else dp[i][j] = d*(Math.abs(x[i] - x[j]) + Math.abs(y[i] - y[j])) - a[i];	    	}	    }	    	    for(int k=1;k<=n;++k) {	    	for(int i=1;i<=n;++i) {	    		for(int j=1;j<=n;++j) {	    			if(i!=j && j!=k && k!=i)	    				dp[i][j] = Math.min(dp[i][j],dp[i][k] + dp[k][j]);	    		}	    	}	    }	    out.print(dp[1][n]);	    out.close();	}  }   
