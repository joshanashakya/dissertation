import java.util.*;import java.util.jar.JarOutputStream; public class Practise {     public static int[][] dp;     public static void main(String[] args) {        //top- down approch        //fibonacci         Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int[]  arr =new int[n+1];        for(int i=2;i<=n;i++)        {            arr[i]=sc.nextInt();         }        int i=n;        List<Integer>  list = new ArrayList<>();      //  list.add(n);        while(i>=1)        {            list.add(i);            i=arr[i];        }        Collections.reverse(list);        for(int j=0;j<list.size();j++)            System.out.print(list.get(j)+" ");     //    System.out.println(s.length()-(i));     //   System.out.println(Math.max(ans,s.length()-i));      }     private static boolean checkPalindorme(String s) {        int  i=0;        int  j=s.length()-1;        while(i<=j)        {            if(s.charAt(i)!=s.charAt(j))            {                return false;            }else            {                i++;                j--;            }        }        return true;      }      private static int BinarySearch(int a, int[] aa) {        int l = 0;        int h = aa.length - 1;        while (l <= h) {            int mid = l + (h - l) / 2;            if (aa[mid] == a)                return mid;            else if (aa[mid] > a) {                h = mid - 1;            } else {                l = mid + 1;            }        }        return l;    }     private static int pow(int a, int ans, int p) {        int res = 1;        while (ans != 0) {            if (ans % 2 == 1) {                res = ((res * a) % p);            }            ans /= 2;            a = ((a * a) % p);        }        return res;    }     private static long Gcd(long i, long n) {        if (n == 0)            return i;        else return Gcd(n, i % n);    }     public static void answer(int[] arr, int l, int r, int k) {        int pivot = (int) (Math.random() * (r - l + 1)) + l;     } }      		  	      		 	 		  	 		
