import java.io.*;import java.util.*; public class Main {     private void solve(InputReader in, PrintWriter out) {        int n = in.nextInt();        int cnt = 0;        Map<String, Integer> m = new HashMap<>();        List<Integer> arr = new ArrayList<>(n);        for (int i = 0; i < n; i++) {            String s = in.next();            if (!m.containsKey(s)) {                m.put(s, cnt++);            }            arr.add(m.get(s));        }         List<List<Integer>> perms = generateAll(arr);         int k = in.nextInt();        int prev = -1;        int idx = -1;        for (int i = 0; i < k; i++) {            int size = in.nextInt();            List<Integer> q = new ArrayList<>(size);            for (int j = 0; j < size; j++) {                String s = in.next();                if (!m.containsKey(s)) {                    m.put(s, cnt++);                }                q.add(m.get(s));            }             for (int j = 0; j < perms.size(); j++) {                if (isOk(perms.get(j), q)) {                    if ((prev < 0 || prev > getSs(perms.get(j)))) {                        prev = getSs(perms.get(j));                        idx = i + 1;                    }                }            }        }         if (prev < 0) {            out.println("Brand new problem!");        } else {            out.println(idx);            out.print("[:");            int zz = n * (n - 1) / 2 - prev + 1;            for (int cc = 0; cc < zz; cc++) {                out.print("|");            }            out.println(":]");        }    }     private int getSs(List<Integer> arr) {        int ans = 0;        for (int i = 0; i < arr.size(); i++) {            for (int j = 0; j < i; j++) {                if (arr.get(i) < arr.get(j)) {                    ans++;                }            }        }        return ans;    }     private boolean isOk(List<Integer> a, List<Integer> b) {        int prev = 0;        for (int x: a) {            boolean ok = false;            for (int i = prev; i < b.size(); i++) {                if (b.get(i) == x) {                    prev = i + 1;                    ok = true;                    break;                }            }             if (!ok) {                return false;            }        }        return true;    }     private List<List<Integer>> generateAll(List<Integer> arr) {        List<List<Integer>> ans = new ArrayList<>();        ans.add(new ArrayList<>(arr));        while (true) {            arr = getNext(arr);            if (arr == null) {                break;            }            ans.add(new ArrayList<>(arr));        }        return ans;    }     private List<Integer> getNext(List<Integer> arr) {        int i = arr.size() - 2;        while (i >= 0 && arr.get(i) > arr.get(i + 1)) i--;        if (i < 0) {            return null;        }         int j = i + 1;        for (int k = i + 2; k < arr.size(); k++) {            if (arr.get(k) > arr.get(i) && arr.get(k) < arr.get(j)) {                j = k;            }        }         int dop = arr.get(i);        arr.set(i, arr.get(j));        arr.set(j, dop);        Collections.sort(arr.subList(i + 1, arr.size()));        return arr;    }     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        new Main().solve(in, out);        out.close();    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     }}
