import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.InputStreamReader;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.StringTokenizer; public class B202{	static final boolean FILE_IO = false;	static final String output_file = "output.txt";	static final String input_file = "input.txt"; 	public static void main(String[] args){		InputReader in = new InputReader();		PrintWriter out;		if(FILE_IO){			try{				out = new PrintWriter(output_file);			} catch(FileNotFoundException e){				throw new RuntimeException(e);			}		} else {			out = new PrintWriter(System.out);		}		final long start = System.currentTimeMillis();		new Task1().solve(in, out);		final long duration = System.currentTimeMillis()-start;		out.close();	} 	static class Task1{		static final String sequence = "0123";		static ArrayList<String> permutations; 		public void solve(InputReader in, PrintWriter out){			int n=in.nextInt();			HashMap<String, Integer> map = new HashMap<String, Integer>();			permutations = new ArrayList<String>(); 			for(int i=0; i<n; i++){				String temp=in.next();				map.put(temp, i);			} 			findPermutations("", sequence.substring(0, n));			int[] inversions = new int[permutations.size()];			for(int i=0; i<permutations.size(); i++){				inversions[i] = numberOfInversions(permutations.get(i));				//out.println(permutations.get(i)+" "+inversions[i]);			} 			int m=in.nextInt(), index=-1, max=((n+1)*(n+2))/2;			for(int i=0; i<m; i++){				int k=in.nextInt();				String s="";				for(int j=0; j<k; j++){					String temp=in.next();					if(map.containsKey(temp)){						s+=map.get(temp);					}				} 				//satisfying each permutations				for(int seq=0; seq<permutations.size(); seq++){					String curr=permutations.get(seq);					int kk=0;					for(int j=0; j<s.length(); j++){						if(s.charAt(j)==curr.charAt(kk)) kk++;						if(kk==n) break;					}					if(kk==n){						if(max>inversions[seq]){							max = inversions[seq];							index = i;						}					}				}				//out.println(index+" "+max);			} 			if(index==-1){				out.println("Brand new problem!");				return;			}			out.println((index+1));			int p = (n*(n-1))/2;			p += 1-max;			out.print("[:");			for(int i=0; i<p; i++){				out.print("|");			}			out.println(":]");		} 		void findPermutations(String prefix, String txt){			int n=txt.length();			if(n==0) permutations.add(prefix);			else{				for(int i=0; i<n; i++){					findPermutations(prefix+txt.charAt(i), txt.substring(0, i)+txt.substring(i+1, n));				}			}		} 		int numberOfInversions(String txt){			int ans=0;			for(int i=0; i<txt.length(); i++){				for(int j=i; j<txt.length(); j++){					if(txt.charAt(i)>txt.charAt(j)) ans++;				}			}			return ans;		} 		int factorial(int n){			if(n<=1) return 1;			return n*factorial(n-1);		}	} 	static class InputReader{		private BufferedReader reader;		private StringTokenizer tokenizer;				public InputReader(){			if(FILE_IO){				try{					reader = new BufferedReader(new FileReader(input_file));				} catch(FileNotFoundException e){					throw new RuntimeException(e);				}			} else {				reader = new BufferedReader(new InputStreamReader(System.in));			}			tokenizer = null;		} 		public String next(){			while(tokenizer==null || !tokenizer.hasMoreTokens()){				try{					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e){					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt(){			return (int)Integer.parseInt(next());		} 		public long nextLong(){			return (long)Long.parseLong(next());		} 		public double nextDouble(){			return (double)Double.parseDouble(next());		} 		public String nextLine(){			String s = null;			try{				s = reader.readLine();			} catch(Exception e){				throw new RuntimeException(e);			}			return s;		}	}}
