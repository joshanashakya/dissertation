import java.util.*;import java.io.*; public class P202B {   private static void solve() {    int n = nextInt();     int[][][] order = {        {            { 1 }        },        {            { 1, 2 },            { 2, 1 }        },         {            { 1, 2, 3 },            { 1, 3, 2 },            { 2, 1, 3 },            { 2, 3, 1 },            { 3, 1, 2 },            { 3, 2, 1 }        },        {            { 1, 2, 3, 4 },            { 1, 2, 4, 3 },            { 1, 3, 2, 4 },            { 1, 3, 4, 2 },            { 1, 4, 2, 3 },            { 1, 4, 3, 2 },            { 2, 1, 3, 4 },            { 2, 1, 4, 3 },            { 2, 3, 1, 4 },            { 2, 3, 4, 1 },            { 2, 4, 1, 3 },            { 2, 4, 3, 1 },            { 3, 1, 2, 4 },            { 3, 1, 4, 2 },            { 3, 2, 1, 4 },            { 3, 2, 4, 1 },            { 3, 4, 1, 2 },            { 3, 4, 2, 1 },            { 4, 1, 2, 3 },            { 4, 1, 3, 2 },            { 4, 2, 1, 3 },            { 4, 2, 3, 1 },            { 4, 3, 1, 2 },            { 4, 3, 2, 1 }        }    };     String[] words = new String[n];     for (int i = 0; i < n; i++) {      words[i] = next();    }     List<List<String>> archive = new ArrayList<>();     int m = nextInt();    for (int i = 0; i < m; i++) {      int cnt = nextInt();      List<String> line = new ArrayList<>();      for (int j = 0; j < cnt; j++) {        line.add(next());      }      archive.add(line);    }     List<List<String>> perms = new ArrayList<>();     for (int i = 0; i < order[n - 1].length; i++) {      List<String> perm = new ArrayList<>();      for (int j = 0; j < order[n - 1][i].length; j++) {        perm.add(words[order[n - 1][i][j] - 1]);      }      perms.add(perm);    }     int p = 0;    int index = -1;     if (n == 1) {      for (int j = 0; j < archive.size() && p == 0; j++) {        for (int i = 0; i < perms.size(); i++) {          List<String> perm = perms.get(i);          for (int k = 0; k < archive.get(j).size() && p == 0; k++) {            if (perm.get(0).equals(archive.get(j).get(k))) {              p = 1;              index = j;            }          }        }      }    } else if (n == 2) {      int ansInv = 10;      for (int j = 0; j < archive.size(); j++) {        List<String> ar = archive.get(j);        for (int i = 0; i < perms.size(); i++) {          List<String> perm = perms.get(i);          for (int k = 0; k < ar.size(); k++) {            if (perm.get(0).equals(archive.get(j).get(k))) {              for (int k1 = 0; k1 < ar.size(); k1++) {                if (perm.get(1).equals(archive.get(j).get(k1))) {                  int inv = 0;                   Map<String, Integer> map1 = new HashMap<>();                  Map<String, Integer> map2 = new HashMap<>();                   for (int l = 0; l < 2; l++) {                    map1.put(words[l], l);                  }                   for (int l = 0; l < 2; l++) {                    map2.put(perm.get(l), l);                  }                   for (int l1 = 0; l1 < 2; l1++) {                    for (int l2 = l1 + 1; l2 < 2; l2++) {                      if (map1.get(words[l1]) < map1.get(words[l2]) && map2.get(words[l1]) > map2.get(words[l2])) {                        inv++;                      }                      if (map1.get(words[l1]) > map1.get(words[l2]) && map2.get(words[l1]) < map2.get(words[l2])) {                        inv++;                      }                    }                  }                   if (ansInv > inv) {                    ansInv = inv;                  }                }              }            }          }        }        if (p < 2 - ansInv) {          p = 2 - ansInv;          index = j;        }      }    } else if (n == 3) {      for (int j = 0; j < archive.size(); j++) {        List<String> ar = archive.get(j);        int ansInv = 10;        for (int i = 0; i < perms.size(); i++) {          List<String> perm = perms.get(i);          for (int k = 0; k < ar.size(); k++) {            if (perm.get(0).equals(ar.get(k))) {              for (int k1 = k + 1; k1 < ar.size(); k1++) {                if (perm.get(1).equals(ar.get(k1))) {                  for (int k2 = k1 + 1; k2 < ar.size(); k2++) {                    if (perm.get(2).equals(ar.get(k2))) {                      int inv = 0;                       Map<String, Integer> map1 = new HashMap<>();                      Map<String, Integer> map2 = new HashMap<>();                       for (int l = 0; l < 3; l++) {                        map1.put(words[l], l);                      }                       for (int l = 0; l < 3; l++) {                        map2.put(perm.get(l), l);                      }                       for (int l1 = 0; l1 < 3; l1++) {                        for (int l2 = l1 + 1; l2 < 3; l2++) {                          if (map1.get(words[l1]) < map1.get(words[l2]) && map2.get(words[l1]) > map2.get(words[l2])) {                            inv++;                          }                          if (map1.get(words[l1]) > map1.get(words[l2]) && map2.get(words[l1]) < map2.get(words[l2])) {                            inv++;                          }                        }                      }                       if (ansInv > inv) {                        ansInv = inv;                      }                    }                  }                }              }            }          }        }        if (p < 4 - ansInv) {          p = 4 - ansInv;          index = j;        }      }    } else {      for (int j = 0; j < archive.size(); j++) {        List<String> ar = archive.get(j);        int ansInv = 10;        for (int i = 0; i < perms.size(); i++) {          List<String> perm = perms.get(i);          for (int k = 0; k < ar.size(); k++) {            if (perm.get(0).equals(archive.get(j).get(k))) {              for (int k1 = k + 1; k1 < ar.size(); k1++) {                if (perm.get(1).equals(archive.get(j).get(k1))) {                  for (int k2 = k1 + 1; k2 < ar.size(); k2++) {                    if (perm.get(2).equals(archive.get(j).get(k2))) {                      for (int k3 = k2 + 1; k3 < ar.size(); k3++) {                        if (perm.get(3).equals(archive.get(j).get(k3))) {                          int inv = 0;                           Map<String, Integer> map1 = new HashMap<>();                          Map<String, Integer> map2 = new HashMap<>();                           for (int l = 0; l < 4; l++) {                            map1.put(words[l], l);                          }                           for (int l = 0; l < 4; l++) {                            map2.put(perm.get(l), l);                          }                           for (int l1 = 0; l1 < 4; l1++) {                            for (int l2 = l1 + 1; l2 < 4; l2++) {                              if (map1.get(words[l1]) < map1.get(words[l2]) && map2.get(words[l1]) > map2.get(words[l2])) {                                inv++;                              }                              if (map1.get(words[l1]) > map1.get(words[l2]) && map2.get(words[l1]) < map2.get(words[l2])) {                                inv++;                              }                            }                          }                           if (ansInv > inv) {                            ansInv = inv;                          }                        }                      }                    }                  }                }              }            }          }        }        if (p < 7 - ansInv) {          p = 7 - ansInv;          index = j;        }      }    }     if (p == 0) {      System.out.println("Brand new problem!");    } else {      System.out.println(index + 1);      System.out.print("[:");      for (int i = 0; i < p; i++) {        System.out.print("|");      }      System.out.println(":]");    }  }   private static void run() {    br = new BufferedReader(new InputStreamReader(System.in));    out = new PrintWriter(System.out);     solve();     out.close();  }   private static StringTokenizer st;  private static BufferedReader br;  private static PrintWriter out;   private static String next() {    while (st == null || !st.hasMoreElements()) {      String s;      try {        s = br.readLine();      } catch (IOException e) {        return null;      }      st = new StringTokenizer(s);    }    return st.nextToken();  }   private static int nextInt() {    return Integer.parseInt(next());  }   private static long nextLong() {    return Long.parseLong(next());  }   public static void main(String[] args) {    run();  }}
