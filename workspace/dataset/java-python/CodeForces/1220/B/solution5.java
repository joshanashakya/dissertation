import java.util.*;import java.io.*;public class EdB {	static long[] mods = {1000000007, 998244353, 1000000009};	static long mod = mods[0];	public static MyScanner sc;    public static PrintWriter out;	public static void main(String[] omkar) throws Exception{		// TODO Auto-generated method stub 		sc = new MyScanner(); 		out = new PrintWriter(System.out); 		int n = sc.nextInt(); 		int[][] grid = new int[n][n]; 		for(int j = 0;j<n;j++){ 			grid[j] = readArrayInt(n); 		} 		long lcm = (long)grid[0][n-1]*(long)grid[1][n-1]/gcd(grid[0][n-1], grid[1][n-1]); 		long[] array = new long[n]; 		for(int j = 1;j<n;j++){ 			array[j] = (long)grid[0][j]*(lcm/(long)grid[0][n-1]); 		} 		array[0] = grid[1][0]*(lcm/(long)(grid[1][n-1])); 		long gcd = array[0]; 		for(int j = 1;j<n;j++){ 			gcd = gcd(gcd, array[j]); 		} 		long val = grid[0][1]; 		long div = array[0]/gcd; 		div*=array[1]/gcd; 		val/=div; 		val = (long)Math.sqrt(val+0.0001); 		for(int j = 0;j<n;j++){ 			out.print(val*array[j]/gcd + " "); 		} 		out.println(); 			 		 		out.close();	 	}	public static long gcd(long a, long b){ 	      if (b == 0) 	        return a; 	      return gcd(b, a % b);  	    }	public static void sort(int[] array){		ArrayList<Integer> copy = new ArrayList<Integer>();		for (int i : array)			copy.add(i);		Collections.sort(copy);		for(int i = 0;i<array.length;i++)			array[i] = copy.get(i);	}	static String[] readArrayString(int n){		String[] array = new String[n];		for(int j =0 ;j<n;j++)			array[j] = sc.next();		return array;	}	static int[] readArrayInt(int n){    	int[] array = new int[n];    	for(int j = 0;j<n;j++)    		array[j] = sc.nextInt();    	return array;    }	static int[] readArrayInt1(int n){		int[] array = new int[n+1];		for(int j = 1;j<=n;j++){			array[j] = sc.nextInt();		}		return array;	}	static long[] readArrayLong(int n){		long[] array = new long[n];		for(int j =0 ;j<n;j++)			array[j] = sc.nextLong();		return array;	}	static double[] readArrayDouble(int n){		double[] array = new double[n];		for(int j =0 ;j<n;j++)			array[j] = sc.nextDouble();		return array;	}	static int minIndex(int[] array){		int minValue = Integer.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static int minIndex(long[] array){		long minValue = Long.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static int minIndex(double[] array){		double minValue = Double.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static long power(long x, long y){		if (y == 0)			return 1;		if (y%2 == 1)			return (x*power(x, y-1))%mod;		return power((x*x)%mod, y/2)%mod;	}	static void verdict(boolean a){        out.println(a ? "YES" : "NO");    }    public static class MyScanner {        BufferedReader br;        StringTokenizer st;        public MyScanner() {            br = new BufferedReader(new InputStreamReader(System.in));        }        String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                }                 catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt() {            return Integer.parseInt(next());        }        long nextLong() {            return Long.parseLong(next());        }        double nextDouble() {            return Double.parseDouble(next());        }        String nextLine() {            String str = "";            try{                str = br.readLine();            }             catch (IOException e) {                e.printStackTrace();            }            return str;        }            }	}Â //StringJoiner sj = new StringJoiner(" "); //sj.add(strings)//sj.toString() gives string of those stuff w spaces or whatever that sequence is
