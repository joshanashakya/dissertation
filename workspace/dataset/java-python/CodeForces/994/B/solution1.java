import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.AbstractCollection;import java.util.PriorityQueue;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BKnightsOfAPolygonalTable solver = new BKnightsOfAPolygonalTable();        solver.solve(1, in, out);        out.close();    }     static class BKnightsOfAPolygonalTable {        int n;        int k;        int[][] arr;        PriorityQueue<Integer> pq;         public void readInput(Scanner sc) {            n = sc.nextInt();            k = sc.nextInt();            arr = new int[n][3];            for (int i = 0; i < n; i++)                arr[i][0] = sc.nextInt();            for (int i = 0; i < n; i++) {                arr[i][1] = sc.nextInt();                arr[i][2] = i;            }        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            int q = 1;            while (q-- > 0) {                readInput(sc);                Arrays.sort(arr, (a, b) -> a[0] - b[0]);                long[] ans = new long[n];                long sum = 0;                pq = new PriorityQueue<>();                for (int i = 0; i < n; i++) {                    ans[arr[i][2]] = sum + arr[i][1];                    if (pq.size() < k) {                        pq.add(arr[i][1]);                        sum += arr[i][1];                    } else if (!pq.isEmpty() && pq.peek() < arr[i][1]) {                        sum -= pq.poll();                        sum += arr[i][1];                        pq.add(arr[i][1]);                    }                }                for (int i = 0; i < n; i++)                    pw.print(ans[i] + " ");            }        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
