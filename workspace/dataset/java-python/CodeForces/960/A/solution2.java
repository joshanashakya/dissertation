   //import javax.print.DocFlavor;//import javax.swing.*;//import javax.swing.text.StyleContext;//import java.awt.image.AreaAveragingScaleFilter;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger;import java.nio.charset.IllegalCharsetNameException;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.*;import java.util.LinkedList;import java.util.logging.SimpleFormatter;  public   class main2 {      static long solver(int A[] , int range[][] ,int n , int m){        int ct = 0 ;        long sum = 0 ;         for (int i = 0; i <n ; i++) {            ct = 0 ;            for (int j = 0; j <m ; j++) {                if (range[j][0] <= i && range[j][1] >= i)                    ct++ ;            }//            if (ct != 0 && A[i] <0)//                sum += A[i] ;//            else            if (A[i] >0)            sum += (long) ct*A[i] ;         }            return sum ;    }      public static void main(String[] args) {         PrintWriter fop = new PrintWriter(System.out);        FastScanner fsca = new FastScanner();         int a_count = 0 ; int b_count = 0 ; int c_count = 0 ;        int first_b = -1 ;        int first_c = -1 ;        boolean flag = false ;         char A[] = fsca.next().toCharArray();        for (int i = 0; i <A.length ; i++) {            if (i != A.length-1 && A[i] > A[i+1]){                flag = true ;                break;            }            if (A[i] == 'a')a_count++ ;            else if (A[i] == 'b') {                if (first_b == -1)                    first_b = i ;                b_count++ ; }            else {                if (first_c == -1)                    first_c = i ;                c_count++ ;            }        }          if (A[0] != 'a' || a_count == 0 || b_count ==0 || c_count == 0 || (a_count != c_count && b_count != c_count) || flag)            fop.println("NO");        else if (first_b > first_c)            fop.println("NO");        else            fop.println("YES");                     fop.flush();        fop.close();        }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/  //        static void divisor_List(int n){//            for (int i = 1; i*i <=n ; i++) {////                if (n%i == 0){//                    list.add(i);//                }//                if (n/i != i)//                    list.add(n/i);////            }//        }       static void sieve(int n){        boolean[] flag = new boolean[n] ;         for (int i=2 ; i*i<n ; i++){            if (flag[i])                continue;            else                for (int j= i*i ; j<=n ; j+= i){                    flag[j] = true;                }        }      }    static int gcd(int a , int b){        if (b > a){            int tenp = b ;            b = a ;            a = tenp ;        }        int temp = 0 ;        while (b != 0){            a %= b ;            temp = b ;            b = a ;            a = temp ;        }        return a ;    }     static long gcd1( long a , long b){        if (b > a){            long tenp = b ;            b = a ;            a = tenp ;        }        long temp = 0 ;        while (b != 0){            a %= b ;            temp = b ;            b = a ;            a = temp ;        }        return a ;    }          static final Random random=new Random();     static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort        for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long[] readLongArray(int n){            long[] a = new long[n];            for (int i=0 ; i<n ; i++)                a[i] = nextLong() ;            return a ;        }        long nextLong() {            return Long.parseLong(next());        }    }      }    
