import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = 'x' in file.mode or 'r' not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b'\n') + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode('ascii'))        self.read = lambda: self.buffer.read().decode('ascii')        self.readline = lambda: self.buffer.readline().decode('ascii')  def inp():    return sys.stdin.readline().rstrip()  def mpint():    return map(int, inp().split(' '))  def itg():    return int(inp())  # ############################## importclass MaxHeapTransform(int):    def __lt__(self, other):        return self >= other  # ############################## mainfrom heapq import *  def main():    n, k1, k2 = mpint()    aa = list(mpint())    bb = list(mpint())    hp = [(MaxHeapTransform(abs(aa[i] - bb[i])), i) for i in range(n)]    heapify(hp)     for _ in range(k1):        mx = heappop(hp)        num, i = mx        num = MaxHeapTransform(abs(num - 1))        if aa[i] < bb[i]:            aa[i] += 1        else:            aa[i] -= 1        heappush(hp, (num, i))     hp = [(MaxHeapTransform(abs(aa[i] - bb[i])), i) for i in range(n)]    heapify(hp)     for _ in range(k2):        mx = heappop(hp)        num, i = mx        num = MaxHeapTransform(abs(num - 1))        if bb[i] < aa[i]:            bb[i] += 1        else:            bb[i] -= 1        heappush(hp, (num, i))     print(sum(((a - b) ** 2 for a, b in zip(aa, bb))))  DEBUG = 0URL = '' if __name__ == '__main__':    # 0: normal, 1: runner, 2: interactive, 3: debug    if DEBUG == 1:        import requests        from ACgenerator.Y_Test_Case_Runner import TestCaseRunner         runner = TestCaseRunner(main, URL)        inp = runner.input_stream        print = runner.output_stream        runner.checking()    else:        if DEBUG != 3:            sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)        if DEBUG:            _print = print              def print(*args, **kwargs):                _print(*args, **kwargs)                sys.stdout.flush()        main()# Please check!
