import java.util.*;import java.io.*;//import java.lang.*;  public class ranjan{     //public static Read cin;    public static InputReader cin;    public static PrintWriter cout;    public static boolean[] visited;    public static final long b = (long)1e9+7;    public static int fileread = 0;         public static void main(String ...arg) throws IOException    {        /*console writer*/        cout = new PrintWriter(new BufferedOutputStream(System.out));        /*Debug Reader*/        //Scan cin =new Scan();        if(fileread == 1)        {            try            {            //cin = new Read(new FileInputStream(new File("in3.txt")));            cin = new InputReader(new FileInputStream(new File("in3.txt")));            }            catch (IOException error){}        }        else{            //cin = new Read(System.in);            cin = new InputReader(System.in);        }                int n = cin.nextInt();        int k = cin.nextInt()+cin.nextInt();        int[] arr = new int[n];        for(int i=0;i<n;i++)            arr[i] = cin.nextInt();        long E = 0;        for(int i=0;i<n;i++)        {            arr[i] = Math.abs(arr[i] - cin.nextInt());            E += Math.pow(arr[i],2);        }                PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){            @Override            public int compare(Integer a,Integer b)            {                return b-a;            }        });        for(int i=0;i<n;i++)            pq.add(arr[i]);        while(pq.peek()!=0 && k>0 && E>0)        {            int top = pq.poll();            E += Math.pow(top-1,2) - Math.pow(top,2);            pq.add(top-1);            k--;        }         if(k%2 == 1)            E+= Math.pow(pq.peek()-1,2) - Math.pow(pq.peek(),2);        cout.print(E);                cout.close();    }        public static long mod_pow(long x,long n,long mod) {		long res=1;		while(n>0) {			if((n&1)==1)res=res*x%mod;			x=x*x%mod;			n>>=1;		}		return res;	}      static class InputReader {        final InputStream is;        final byte[] buf = new byte[1024];        int pos;        int size;         public InputReader(InputStream is) {            this.is = is;        }         public int nextInt() {            int c = read();            while (isWhitespace(c))                c = read();            int sign = 1;            if (c == '-') {                sign = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res = res * 10 + c - '0';                c = read();            } while (!isWhitespace(c));            return res * sign;        }         int read() {            if (size == -1)                throw new InputMismatchException();            if (pos >= size) {                pos = 0;                try {                    size = is.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (size <= 0)                    return -1;            }            return buf[pos++] & 255;        }         static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     } static class RecursionLimiter {    public static long maxLevel = 1549;     public static void emerge() {        if (maxLevel == 0)            return;        try {            throw new IllegalStateException("Too deep, emerging");        } catch (IllegalStateException e) {            if (e.getStackTrace().length > maxLevel + 1)                throw e;        }    }}  static class Scan {        private byte[] buf=new byte[1024];        private int index;        private InputStream in;        private int total;        public Scan()        {            in=System.in;        }        public int scan()throws IOException        {            if(total<0)            throw new InputMismatchException();            if(index>=total)            {                index=0;                total=in.read(buf);                if(total<=0)                return -1;            }            return buf[index++];        }        public int scanInt()throws IOException        {            int integer=0;            int n=scan();            while(isWhiteSpace(n))            n=scan();            int neg=1;            if(n=='-')            {                neg=-1;                n=scan();            }            while(!isWhiteSpace(n))            {                if(n>='0'&&n<='9')                {                    integer*=10;                    integer+=n-'0';                    n=scan();                }                else throw new InputMismatchException();            }            return neg*integer;        }        public double scanDouble()throws IOException        {            double doub=0;            int n=scan();            while(isWhiteSpace(n))            n=scan();            int neg=1;            if(n=='-')            {                neg=-1;                n=scan();            }            while(!isWhiteSpace(n)&&n!='.')            {                if(n>='0'&&n<='9')                {                    doub*=10;                    doub+=n-'0';                    n=scan();                }                else throw new InputMismatchException();            }            if(n=='.')            {                n=scan();                double temp=1;                while(!isWhiteSpace(n))                {                    if(n>='0'&&n<='9')                    {                        temp/=10;                        doub+=(n-'0')*temp;                        n=scan();                    }                    else throw new InputMismatchException();                }            }            return doub*neg;        }        public String scanString()throws IOException        {            StringBuilder sb=new StringBuilder();            int n=scan();            while(isWhiteSpace(n))            n=scan();            while(!isWhiteSpace(n))            {                sb.append((char)n);                n=scan();            }            return sb.toString();        }        private boolean isWhiteSpace(int n)        {            if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)            return true;            return false;        }    } } class Read{    private BufferedReader br;    private StringTokenizer st;     public Read(InputStream is)    { br = new BufferedReader(new InputStreamReader(is)); }     String next()    {        while (st == null || !st.hasMoreElements())        {            try {st = new StringTokenizer(br.readLine());}            catch(IOException e)                {e.printStackTrace();}        }        return st.nextToken();    }     int nextInt()    { return Integer.parseInt(next()); }     long nextLong()    { return Long.parseLong(next()); }     double nextDouble()    { return Double.parseDouble(next()); }     String nextLine()    {        String str = "";        try {str = br.readLine();}        catch(IOException e)            {e.printStackTrace();}        return str;    }}  
