import sysfrom collections import deque#from functools import lru_cache#from fractions import Fraction as ffrom copy import *from bisect import *	#from heapq import *from math import gcd,ceil,sqrtfrom itertools import permutations as prm,productfrom random import *def eprint(*args):    print(*args, file=sys.stderr)zz=1 sys.setrecursionlimit(10**5)if zz:	input=sys.stdin.readlineelse:		sys.stdin=open('input.txt', 'r')	sys.stdout=open('all.txt','w')di=[[-1,0],[1,0],[0,1],[0,-1]] def string(s):	return "".join(s)def fori(n):	return [fi() for i in range(n)]	def inc(d,c,x=1):	d[c]=d[c]+x if c in d else xdef bo(i):	return ord(i)-ord('A')	def li():	return [int(xx) for xx in input().split()]def fli():	return [float(x) for x in input().split()]	def comp(a,b):	if(a>b):		return 2	return 2 if a==b else 0		def gi():		return [xx for xx in input().split()]def gtc(tc,ans):	print("Case #"+str(tc)+":",ans)	def cil(n,m):	return n//m+int(n%m>0)	def fi():	return int(input())def pro(a): 	return reduce(lambda a,b:a*b,a)		def swap(a,i,j): 	a[i],a[j]=a[j],a[i]	def si():	return list(input().rstrip())	def mi():	return 	map(int,input().split())			def gh():	sys.stdout.flush()def isvalid(i,j,n,m):	return 0<=i<n and 0<=j<m def bo(i):	return ord(i)-ord('a')	def graph(n,m):	for i in range(m):		x,y=mi()		a[x].append(y)		a[y].append(x)  t=1 while t>0:	t-=1	n=fi()	a=li()	b=[i for i in range(n)]	a.sort()	d={}	for i in a:		inc(d,i)	r=[]	for i in d:		r.append([d[i],i])	r.sort()	if max(r)[0]>=3:		print("cslnb")	elif len(r)>1 and r[-1][0]>=2 and r[-2][0]>=2:		print("cslnb")	elif a.count(0)==2 or (r[-1][0]==2 and a.count(r[-1][1]-1)):		print("cslnb")		else:				c=0		for i in range(n):			c+=max(0,a[i]-b[i])		print("sjfnb" if c%2 else "cslnb")		
