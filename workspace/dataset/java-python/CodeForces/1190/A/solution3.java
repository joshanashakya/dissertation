//package main; import java.io.*;import java.util.*; public final class Main {    BufferedReader br;    StringTokenizer stk;     public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        long mod = 998244353;        void run() throws Exception {        long n = nl(), m = ni(), k = nl();        PriorityQueue<Long> queue = new PriorityQueue<>();        for(int i = 0; i < m; i++) queue.add(nl() - 1);                long left = 0, right = k - 1, operations = 0, discarded = 0;        while(!queue.isEmpty()) {            operations++;                        int count = 0;            while(queue.peek() - discarded >= left && queue.peek() - discarded <= right) {                queue.remove();                count++;                if(queue.isEmpty()) break;            }                        discarded += count;            if(count == 0) {                //adjust current range                left = ((queue.peek() - discarded) / k) * k;                right = left + k - 1;                operations--;            }                        //System.out.println("Removed : " + count + " --> (L, R) := " + left + " " + right + " Queue : " + queue + " Discarded : " + discarded);        }                System.out.println(operations);    }        //Reader & Writer    String nextToken() throws Exception {        if (stk == null || !stk.hasMoreTokens())            stk = new StringTokenizer(br.readLine(), " ");        return stk.nextToken();    }     String nt() throws Exception {        return nextToken();    }     int ni() throws Exception {        return Integer.parseInt(nextToken());    }     long nl() throws Exception {        return Long.parseLong(nextToken());    }        double nd() throws Exception {        return Double.parseDouble(nextToken());    }        //Some Misc methods    int get(int l, int r, int[] a) {        return l == 0 ? a[r] : a[r] - a[l - 1];    }        void shuffle(int[] a) {        Random r = new Random();        for(int i = 0; i < a.length; i++) {            int idx = r.nextInt(a.length);            int temp = a[i];            a[i] = a[idx];            a[idx] = temp;        }    }        void reverse(char[] a) {        for(int i = 0, j = a.length - 1; i < j; i++, j--) {            char temp = a[i];            a[i] = a[j];            a[j] = temp;        }    }}
