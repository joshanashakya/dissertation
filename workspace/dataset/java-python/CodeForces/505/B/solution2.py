import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictI = lambda : int(sys.stdin.buffer.readline())Neo = lambda : list(map(int, sys.stdin.buffer.readline().split())) n,m = Neo()Color = defaultdict(set) G = defaultdict(set)     C = set() def addEdge(a,b):    G[a].add(b)    G[b].add(a)    def addColor(a,b,c):    Color[(a,b)].add(c)    Color[(b,a)].add(c)    C.add(c)    for i in range(m):    a,b,c = Neo()    addColor(a,b,c)    addEdge(a,b)    vis = [False]*(n+1)Ans = []    def fun(node,dest,vis,grp):    if not grp:        return    if node == dest:        for i in grp:            Ans.append(i)        return    vis[node] = True    for i in G.get(node,[]):        if not vis[i]:            newvis = vis.copy()            z = grp.intersection(Color[node,i])            fun(i,dest,newvis,z) for i in range(I()):    a,b = Neo()    vis = [False]*(n+1)    grp = C.copy()    fun(a,b,vis,grp)    print(len(set(Ans)))    Ans =[]
