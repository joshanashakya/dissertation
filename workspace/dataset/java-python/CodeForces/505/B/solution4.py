import math,sys,bisect,heapqfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulate#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1#def input(): return sys.stdin.readline().strip()input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__ilele = lambda: map(int,input().split())alele = lambda: list(map(int, input().split()))ilelec = lambda: map(int1,input().split())alelec = lambda: list(map(int1, input().split()))def list2d(a, b, c): return [[c] * b for i in range(a)]def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) n,m = ilele()Color = defaultdict(set) G = defaultdict(set)     C = set() def addEdge(a,b):    G[a].add(b)    G[b].add(a)    def addColor(a,b,c):    Color[(a,b)].add(c)    Color[(b,a)].add(c)    C.add(c)    for i in range(m):    a,b,c = ilele()    addColor(a,b,c)    addEdge(a,b)    vis = [False]*(n+1)Ans = []    def fun(node,dest,vis,grp):    #print(node,vis,grp)    if not grp:        return    if node == dest:        for i in grp:            Ans.append(i)        return    vis[node] = True    for i in G.get(node,[]):        #print(i)        if not vis[i]:            newvis = vis.copy()            #newvis[c] =True            z = grp.intersection(Color[node,i])            #print(z)            fun(i,dest,newvis,z)            #print(Color,G)for i in range(int(input())):    a,b = ilele()    vis = [False]*(n+1)    grp = C.copy()    fun(a,b,vis,grp)    #print(Ans)    print(len(set(Ans)))    Ans =[]              
