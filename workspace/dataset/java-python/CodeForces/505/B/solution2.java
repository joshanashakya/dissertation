import java.io.*;import java.util.*;import java.math.*;   public class Test{     static boolean[] visited;    static boolean[][][] graph;     public static boolean dfs(int a, int b, int color)    {         visited[a] = true;         if(a==b)         {               return true;         }         boolean ans = false;         for(int i=1;i<=100;i++)         {              if(graph[a][i][color] && !visited[i])              {                   ans = ans||dfs(i,b,color);              }         }         return ans;    }     public static void process()throws IOException    {          int n = ni();          int m = ni();          graph = new boolean[101][101][101];          for(int i=0;i<m;i++)          {               int u = ni();               int v = ni();               int color = ni();               graph[u][v][color] = true;               graph[v][u][color] = true;          }          int q = ni();          while(q-->0)          {               int count=0;               int a = ni();               int b = ni();               for(int j=0;j<=100;j++)               {                    visited = new boolean[102];                    if(dfs(a,b,j))                    {                         count++;                    }               }               pn(count);          }                        }      static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;         // oj = System.getProperty("ONLINE_JUDGE") != null;        // if(!oj) sc=new AnotherReader(100);         // long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}
