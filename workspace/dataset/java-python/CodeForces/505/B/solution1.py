import osimport sysfrom io import BytesIO, IOBaseBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")#'%.9f'%ans##########################################################from collections import defaultdictdef dfs(s,f):    if s==v:        return True    vis[s]=1      for i in g[s]:        if vis[i[0]]==0 and i[1]==f:            if(dfs(i[0],f)):                return True     return False      #for _ in range(int(input())):#n = int(input())n,m = map(int, input().split())g=[[] for i in range(n+2)]for i in range(m):    u,v,d = map(int, input().split())    g[u].append([v,d])    g[v].append([u,d])q= int(input())for _ in range(q):    u, v= map(int, input().split())    cnt=0    for i in range(1,101):        vis=[0]*101        if (dfs(u,i)):            cnt+=1    print(cnt)      #g=[[] for i in range(n+1)]    #arr = list(list(map(int, input().split())))             
