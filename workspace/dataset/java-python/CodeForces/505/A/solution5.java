import java.util.*;import java.math.*;import java.io.*; public class MakePalindrom{ 	public static void main(String[] args) throws Exception{		Scanner pm = new Scanner(System.in);		int[] hash = new int[26];		String s = pm.next();		int k = s.length();		StringBuffer sb = new StringBuffer(s);		if(k == 1){			System.out.println(sb.append(sb));			return;		}		for(int i=0;i<k;i++) {			int po = (int)s.charAt(i) - 97;			hash[po]++;			//int -> Integer.parseInt(br.readLine());			/*int[] -> String str = br.readLine();					   String[] astr = str.split(" ");					   for(int i=0;i<n;i++)					   	   arr[i] = Integer.parseInt(astr[i]);*/ 		} //end of test case		//int max = Arrays.stream(hash).max().orElse(0);		int cnt = 0;		ArrayList<Character> pos = new ArrayList<>();		ArrayList<Character> pl = new ArrayList<>();		for(int i=0;i<k;i++)				pl.add(s.charAt(i));		ArrayList<Character> pl2 = new ArrayList<>();		for(int i=0;i<k;i++)				pl2.add(s.charAt(i));		int a = 0;		int nom = 0;		int flag = 0;		int ins = 0;		int n = pl.size();		int pt1 = 0;		int pt2 = n-1;		while(true){			//System.out.println(pl.get(pt1)+" "+pl.get(pt2));			if(pl.get(pt1) == pl.get(pt2) ){				pt1++;				pt2--;				//continue;			}			else if(nom == 0) {								nom = 1;				pl.add(pt2+1,pl.get(pt1));				ins = 1;				pt1++;			}			else if(nom == 1) {				flag = 1;				break;			}			//a++;			if(pt1 == pt2 - 1 || pt1 >= pt2)				break;			//System.out.println(pl);		}		pt1 = 0;		pt2 = n-1;		nom = 0;		int flag2=0;		int check2 = 0;		int ins2 = 0;		while(true){			//System.out.println(pl.get(pt1)+" "+pl.get(pt2));			if(pl2.get(pt1) == pl2.get(pt2) ){				pt1++;				pt2--;				//continue;			}			else if(nom == 0) {								nom = 1;				pl2.add(pt1,pl2.get(pt2));				ins2 = 1;				pt1++;			}			else if(nom == 1) {				flag2 = 1;				break;			}			//a++;			if(pt1 == pt2 - 1 || pt1 >= pt2)				break;			//System.out.println(pl);		}		if(ins == 0 && n % 2 == 0){			pl.add(n/2,'a');		}		if(ins2 == 0 && n % 2 == 0){			pl2.add(n/2,'a');		}		if(ins == 0 && n % 2 == 1){			pl.add(n/2,pl.get(n/2));		}		if(ins2 == 0 && n % 2 == 1){			pl2.add(n/2,pl2.get(n/2));		}		StringBuilder b1 = new StringBuilder();		pl.forEach(b1::append);		StringBuilder b2 = new StringBuilder();		pl2.forEach(b2::append);		boolean c1 = isPal(b1.toString());		boolean c2 = isPal(b2.toString()); 		//System.out.println(flag);		//System.out.println(pl2);				if(!c1 && !c2)			System.out.println("NA");		else if(c1)			System.out.println(b1.toString());		else			System.out.println(b2.toString());		// else if(ins == 0 && n % 2 == 1)		// 	flag = 1;		// if(flag == 1)		// 	System.out.println("NA");		// else{			  //  			System.out.println(b);		// } 	} //end of main() 	static boolean isPal(String str)     {           // Pointers pointing to the beginning         // and the end of the string         int i = 0, j = str.length() - 1;           // While there are characters toc compare         while (i < j) {               // If there is a mismatch             if (str.charAt(i) != str.charAt(j))                 return false;               // Increment first pointer and             // decrement the other             i++;             j--;         }           // Given string is a palindrome         return true;     }} //end of class
