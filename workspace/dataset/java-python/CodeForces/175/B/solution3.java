import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.OutputStreamWriter;import java.math.BigDecimal;  import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.Map.Entry;import java.util.PriorityQueue;import java.util.TreeSet;   public final class CF_115_B{	static boolean verb=true;	static void log(Object X){if (verb) System.err.println(X);}	static void log(Object[] X){if (verb) {for (Object U:X) System.err.print(U+" ");System.err.println("");}}	static void log(int[] X){if (verb) {for (int U:X) System.err.print(U+" ");System.err.println("");}}	static void logWln(Object X){if (verb) System.err.print(X);}	static void info(Object o){	System.out.println(o);}	static void output(Object o){outputWln(""+o+"\n");	}	static void outputWln(Object o){try {out.write(""+ o);} catch (Exception e) {}}  	static int MX=Integer.MAX_VALUE;		static class Composite implements Comparable<Composite>{				int idx;		int v;		String name;				public int compareTo(Composite X){			if (v!=X.v)				return X.v-v;			return idx-X.idx;		} 		public Composite(int idx, int v, String name) {			this.idx = idx;			this.v = v;			this.name = name;		} 					}    	// Global vars	static BufferedWriter out;	static InputReader reader;   	static void process() throws Exception {   		out = new BufferedWriter(new OutputStreamWriter(System.out));		reader=new InputReader(System.in); 				int n=reader.readInt(); 		Composite[] ar=new Composite[n];		HashMap<String,Integer> hm=new HashMap<String,Integer>();		ArrayList<String> lst=new ArrayList<String>();		for (int i=0;i<n;i++){			String s=reader.readString();			int v=reader.readInt();			Integer z=hm.get(s);			if (z==null) {				z=0;				lst.add(s);			}			hm.put(s, Math.max(z,v));					}		int L=lst.size();		int[] score=new int[L];		for (int i=0;i<L;i++) {			score[i]=hm.get(lst.get(i));			log(lst.get(i)+" "+score[i]);		}		log("==========");		output(L);				// stupid algo		for (int i=0;i<L;i++){						int infEq=0;			int sup=0;						for (int j=0;j<L;j++){				if (score[i]>=score[j])					infEq++;				if (score[j]>score[i])					sup++;			}						String res="";			if (sup*10>5*L)				res="noob";			else				if (infEq*10>=5*L && sup*10>2*L)					res="random";				else					if (infEq*10>=8*L && sup*10>L)						res="average";					else						if (infEq*10>=9*L && sup*100>L)							res="hardcore";						else							if (infEq*100>=99*L)								res="pro";							else								res="bug";			log(lst.get(i)+" "+infEq+" "+sup+" "+L);			output(lst.get(i)+" "+res);					}						try {			out.close();		}		catch (Exception e){}  	}  	public static void main(String[] args) throws Exception {		process(); 	} 	static final class InputReader {		private final InputStream stream;		private final byte[] buf = new byte[1024];		private int curChar;		private int numChars; 		public InputReader(InputStream stream) {			this.stream = stream;		} 		private int read() throws IOException {			if (curChar >= numChars) {				curChar = 0;				numChars = stream.read(buf);				if (numChars <= 0) {					return -1;				}			}			return buf[curChar++];		}  		public final String readString() throws IOException {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res=new StringBuilder();			do {				res.append((char)c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public final int readInt() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			int res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		} 		public final long readLong() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			long res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		}   		private boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}	}  }
