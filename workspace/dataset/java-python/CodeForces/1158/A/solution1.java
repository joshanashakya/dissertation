import  java.io.*;import  java.math.*;import java.nio.Buffer;import java.sql.SQLSyntaxErrorException;import  java.util.*;import  java.text.*;import java.util.stream.Collectors; public class Main {     public  static  int c(int n,int m){        int count=1;        for(int i=1;i<=m;i++){            count*=(n-i+1);        }        for(int i=2;i<=m;i++){            count=count/i;        }        return count;    }    public static void reset(){        System.out.println("R");    }    public  static boolean query(int x){        Scanner cin = new Scanner(System.in);        System.out.printf("? %d\n",x+1);        String str=cin.next();        char s[]=str.toCharArray();        if(s[0]=='Y'){            return true;        }        else{            return false;        }    }    public  static long dis(long x,long y,long x1,long y1){        return Math.abs(x-x1)+Math.abs(y-y1);    }    static final char[] VALUES = { 'S', 'E', 'T' };     static int[][][][]dp=new int[105][100][100][2];    static int []num;    static int MOD = 1000000007;     public static long bigMod(long n,long k,long p){        long ans=1;        while(k>0){            if((k&1)==1){                ans=(ans*n)%p;            }            n=(n*n)%p;            k=k>>1;        }        return ans;    }    public static int n,m;    private static boolean can(int k) {        int e = m-1;        for (int i = n-1;i >= 0;i--) {            if (num[i] <= e) {                int d = Math.min(k,e - num[i]);                e = num[i] + d;            }            else {                int nu = m-num[i];                if (nu > k) return false;                nu += e;                int d = Math.min(nu,k);                e = (num[i] + d)%m;            }        }        return true;    }    public  static double PI=Math.atan(1.0)*4;    public static void main(String[] args) {        Scanner cin = new Scanner(System.in);        /*int T=cin.nextInt();        while(T-->0){            String str=cin.next();            char s[]=str.toCharArray();            int sum=0;            int m=1;            for(int i=s.length-1;i>=0;i--){                 if(s[i]>='0'&&s[i]<='9'){                    sum+=m*(s[i]-'0');                }                else if(s[i]>='A'&&s[i]<='Z'){                    sum+=m*(s[i]-'A'+10);                }                m=m*16;            }           // System.out.println(sum);            StringBuilder st=new StringBuilder();            while(sum>0){                char x=(char)(sum%8+'0');                st.append(x);                sum=sum/8;             }            String m1=st.toString();            System.out.println(new StringBuffer(m1).reverse().toString());         }*/        int n=cin.nextInt();        int m=cin.nextInt();        long num[]=new long[n];        long nu[]=new long[m];        for(int i=0;i<n;i++){            num[i]=cin.nextLong();        }        for(int i=0;i<m;i++){            nu[i]=cin.nextLong();        }        Arrays.sort(num);Arrays.sort(nu);        if(num[n-1]>nu[0]){            System.out.println("-1");        }        else{            long sum=0;            if(num[n-1]==nu[0]){                for(int i=0;i<n-1;i++){                    sum+=num[i]*m;                }                for(int i=0;i<m;i++){                    sum+=nu[i];                }            }            else{                for(int i=0;i<n-1;i++){                    sum+=num[i]*m;                }                sum=sum-num[n-2]+nu[0]+num[n-1];                for(int i=1;i<m;i++){                    sum+=nu[i];                }             }            System.out.println(sum);        }     }    public  static int slove(int idx,int odd,int even,int lst){            if(odd<0||even<0){                return Integer.MAX_VALUE;            }            if(idx==num.length){                return 0;            }            if(dp[idx][odd][even][lst]!=0){                return dp[idx][odd][even][lst];            }            int res=Integer.MAX_VALUE;            if(num[idx]!=0){                res=slove(idx+1,odd,even,num[idx]%2);                res+=num[idx]%2==lst?0:1;                dp[idx][odd][even][lst]=res;            }            else{                res=slove(idx+1,odd-1,even,0);                int r=slove(idx+1,odd,even-1,1);                if(res!=Integer.MAX_VALUE)res+= lst==0?0:1;                if(r!=Integer.MAX_VALUE) r+= lst==0?1:0;                dp[idx][odd][even][lst]=Math.min(res, r);            }            return dp[idx][odd][even][lst];        }    public static String compute(String x,String y){        StringBuilder result=new StringBuilder();        for(int i=0;i<x.length();i++){            char a=x.charAt(i);            char b=y.charAt(i);             char ch;            if(a==b){                ch=a;            }            else{                for(int j=0;;j++){                    if(VALUES[j]!=a&&VALUES[j]!=b){                        ch=VALUES[j];                        break;                    }                }            }            result.append(ch);        }        return result.toString();     }    } 	       	 	  	 		  	 		      		
