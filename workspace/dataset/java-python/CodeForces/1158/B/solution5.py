import sysfrom math import *from fractions import gcdreadints=lambda:map(int, input().strip('\n').split())   def hasUnique(s,n,k):    freq = {}     for i in range(n-k+1):        x = s[i:i+k]        if x not in freq: freq[x]=0        freq[x]+=1     for k in freq:        if freq[k] == 1:            return True    return False def good(s,n,k):    for i in range(1,k):        if hasUnique(s,n,i):            return False    freq={}    for i in range(n-k+1):        x = s[i:i+k]        if x not in freq: freq[x]=0        freq[x]+=1     st = set()    for x in freq:        if freq[x]==1:            if len(st)>0: return False            st.add(x)    return len(st) == 1 def gen(i,s,n,k):    if i==n:        if good(s,n,k):            print(s)    else:        gen(i+1,s+'0',n,k)        gen(i+1,s+'1',n,k)     #gen(0,'',5,3)  # for n in range(3,9):#     for k in range(1,n+1):#         if (n%2 != k%2):#             print(n,k,'skip')#             print()#             continue#         print(n,k)#         gen(0,'',n,k)#         print()    n,k = readints()  if  n == k:    print('0' * n)    sys.exit(0) s = '' while len(s) < n:    r = int((n-k)//2)    s = s + (('0'*r) + '1') s = s[:n]print(s)
