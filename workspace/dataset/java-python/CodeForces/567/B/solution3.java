import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solve {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static void run(long s, long e) {		NumberFormat formatter = new DecimalFormat("#0.00000");		System.out.print("Execution time is " + formatter.format((e - s) / 1000d) + " seconds");		}		static int gcd(int a, int b) { 			if (b == 0) return a; 			return gcd(b, a % b);  		}		static long gcd(long a, long b) { 			if (b == 0) return a; 			return gcd(b, a % b);  		}		static long lcm(long a, long b) { 			return a*b/gcd(a, b);  		}		static class FastReader {	     static BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }		    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public long[] readLongArray(int n) {	    	long[] arr = new long[n];	    	for(int i=0; i<n; ++i)	    		arr[i]=nextLong();	    	return arr;	    }	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;		    }	    static char nc() {			try{				int b;				while ((b = br.read()) != -1 && (b == ' ' || b == '\r' || b == '\n'));				if(b == -1)					return 0;				return (char) b;			}catch (IOException e){			}			return 0;		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }		static void solve(char ch, int nu){					}		public static void main(String args[]) throws IOException {	    FastReader sc = new FastReader();	    long s1 = System.currentTimeMillis();	    int n = sc.nextInt();	    Set<Integer> set = new HashSet<>();	    int in = 0;	    int max = -1;	    int emp = 0;	    while(n-- > 0 ) {	    	char ch = sc.nc();	    	int nu = sc.nextInt();	    	if(!set.contains(nu) && ch == '+') {	    		if(emp == 0) {	    			in++;	    		}	    		else {	    			emp--;	    		}	    		set.add(nu);	    	}	    	else if(!set.contains(nu) && ch == '-') {	    		set.add(nu);	    		in++;	    		emp++;	    	}	    	else if(set.contains(nu) && ch == '+') {	    		if(emp == 0) {	    			in++;	    		}	    		else {	    			emp--;	    		}	    	}	    	else if( ch == '-') {	    		emp++;	    	}	    }	    out.println(in);	    flush();	    long e = System.currentTimeMillis();//	    run(s1,e);	    }	}						
