//I AM THE CREED/* //I AM THE CREED/* package codechef; // don't place package name! */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*;import java.awt.Point;public class Main{    static final Random random=new Random();    public static void main(String[] args) throws IOException     {         Scanner input=new Scanner(System.in);        while(input.hasNext()){            //if we have n people, and want to send them in tandem kayek, sorting and sending            //them is the best arrangement.            //Brute force the pair which will be send using special kayek, and compute the regular            //cost over the remaning. Minimum computed over all pairs is our answer            int n=input.nextInt();            n=2*n;            Integer[] l=new Integer[n];            for(int i=0;i<n;i++){                l[i]=input.nextInt();            }            int min=Integer.MAX_VALUE;            for(int i=0;i<n;i++){                for(int j=i+1;j<n;j++){                    Integer[] temp=new Integer[n-2];                    int ind=0;                    for(int k=0;k<n;k++){                        if(k!=i && k!=j){                            temp[ind]=l[k];                            ind++;                        }                    }                    int ans=0;                    Arrays.sort(temp);                    for(int k=0;k<temp.length-1;k+=2){                        ans+=Math.abs(temp[k+1]-temp[k]);                    }                    min=Math.min(min, ans);                    ans=0;                    for(int k=1;k<temp.length-2;k+=2){                        ans+=Math.abs(temp[k+1]-temp[k]);                    }                    ans+=Math.abs(temp[temp.length-1]-temp[0]);                    min=Math.min(min, ans);                }            }            System.out.println(min);        }            }    static boolean isPrime(int n)    {         // Check if number is less than        // equal to 1        if (n <= 1)            return false;         // Check if number is 2        else if (n == 2)            return true;         // Check if n is a multiple of 2        else if (n % 2 == 0)            return false;         // If not, then just check the odds        for (int i = 3; i <= Math.sqrt(n); i += 2)         {            if (n % i == 0)                return false;        }        return true;    }    static int gcd(int a, int b)    {        if (a == 0)            return b;         return gcd(b % a, a);     }         // method to return LCM of two numbers    static int lcm(int a, int b)    {        return (a / gcd(a, b)) * b;    }         //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate    static void ruffleSort(int [] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			int temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}    //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate.    static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}		long nextLong() {			return Long.parseLong(next());		}	}        }
