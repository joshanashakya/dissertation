import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int N;    int[] a;    void run(FastScanner in, PrintWriter out) {        N = in.nextInt()*2;        a = new int[N];        for (int i = 0; i < a.length; i++) a[i] = in.nextInt();        Arrays.sort(a);         int[][] dp = new int[N+1][3];        for (int[] d : dp) Arrays.fill(d, Integer.MAX_VALUE);        for (int i = 0; i < 3; i++) dp[0][i] = 0;         // i-2, i-1, i        for (int i = 0; i < N; i++) {             if (i%2 == 0) {                // odd number                // can only populate ..[1]                dp[i+1][1] = dp[i][0];                if (i-2 >= 0) {                    dp[i+1][1] = Math.min(dp[i+1][1], a[i]-a[i-1] + dp[i-2][0]);                }                if (i-1 >= 0) {                    dp[i+1][1] = Math.min(dp[i+1][1], a[i]-a[i-1] + dp[i-1][1]);                }            } else {                 // even                // populate [0], [2]                 dp[i+1][0] = a[i]-a[i-1] + dp[i-1][0];                 dp[i+1][2] = dp[i][1];                if (i-2 >= 0) {                    dp[i+1][2] = Math.min(dp[i+1][2], a[i]-a[i-1] + dp[i-2][1]);                }                if (i-2 >= 0) {                    dp[i+1][2] = Math.min(dp[i+1][2], a[i]-a[i-1] + dp[i-1][2]);                }            }            // System.out.println(a[i] + " " + Arrays.toString(dp[i+1]));        }         // for (int[] d : dp) {        //     System.out.println(Arrays.toString(d));        // }         out.println(dp[N][2]);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
