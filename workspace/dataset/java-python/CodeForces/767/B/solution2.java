import java.io.*;import java.util.*; public class a {    public static void main(String[] args) throws IOException {        FastReader scan = new FastReader();        //PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("taming.out")));        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        Task solver = new Task();        //int t = scan.nextInt();        int t = 1;        for(int i = 1; i <= t; i++) solver.solve(i, scan, out);        out.close();    }    static class Task {        public void solve(int testNumber, FastReader sc, PrintWriter pw) {        	long st = sc.nextLong();        	long en = sc.nextLong();        	long c = sc.nextLong();        	int n = sc.nextInt();        	long[] arr = new long[n];        	for(int j=0;j<n;j++){        		arr[j]=sc.nextLong();        	}        	long[] et = new long[n];        	if(n==0){        		pw.println(st+" ");        		return;        	}        	et[0]=Math.max(arr[0],st);        	et[0]+=c;        	for(int j=1;j<n;j++){        		et[j]=Math.max(et[j-1],arr[j]);        		et[j]+=c;        	}        	if(arr[0]>st){        		pw.println(st);        		return;        	}        	if(et[n-1]<=en-c){        		pw.println(en-c);        		return;        	}        	long min = Long.MAX_VALUE;        	long ans = 0;        	for(int i=0;i<n;i++){        		long stc = arr[i]-1;        		long ete = 0;        		if(i==0)ete = st;        		else ete = et[i-1];        		if(ete>en)continue;        		if(min>(ete-stc)){        			min=ete-stc;        			ans = stc;        		}        	}        	pw.println(ans);        }     }    static class tup implements Comparable<tup>{        int a, b,c;        tup(){};        tup(int a, int b, int c){            this.a=a;            this.b=b;            this.c=c;        }         @Override        public int compareTo( tup o2) {            return o2.b!=b?Integer.compare(o2.b,b):Integer.compare(o2.a,a);        }    }    static void shuffle(long[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            long temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }    static void shuffle(int[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            int temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         public FastReader(String s) throws FileNotFoundException {            br = new BufferedReader(new FileReader(new File(s)));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    } }
