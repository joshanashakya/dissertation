import java.util.*;import java.io.*; public class Main {	public static void main(String args[]) {new Main().run();} 	FastReader in = new FastReader();	PrintWriter out = new PrintWriter(System.out);	void run(){		work();		out.flush();	}	long mod=998244353;	long gcd(long a,long b) {		return a==0?b:gcd(b%a,a);	}	void work() {		long s=nl(),e=nl(),t=nl();		int n=in.nextInt();		if(n==0) {			out.println(e-t);			return;		}		long[] A=na(n);		long min=e,ret=0;		long cur=s;//wait time		long pre=0;		for(int i=0,j=0;j<n;) {			long v=A[j];			long r=Math.min(e-t, v-1);			if(r>=0) {				if(min>cur-(r-pre)) {					min=cur-(r-pre);					ret=r;					if(min<=0)break;				}			}			int cnt=0;			while(j<n&&A[j]==v) {				cnt++;				j++;			}			cur-=(v-pre);			cur+=cnt*t;			if(cur+A[i]+t>e)break;			pre=A[i];			if(j==n) {				if(A[i]+cur<=e-t) {					ret=e-t;				}			}			i=j;		}		out.println(ret);	}			//input	private ArrayList<Integer>[] ng(int n, int m) {		ArrayList<Integer>[] graph=(ArrayList<Integer>[])new ArrayList[n];		for(int i=0;i<n;i++) {			graph[i]=new ArrayList<>();		}		for(int i=1;i<=m;i++) {			int s=in.nextInt()-1,e=in.nextInt()-1;			graph[s].add(e);			graph[e].add(s);		}		return graph;	}		private ArrayList<long[]>[] ngw(int n, int m) {		ArrayList<long[]>[] graph=(ArrayList<long[]>[])new ArrayList[n];		for(int i=0;i<n;i++) {			graph[i]=new ArrayList<>();		}		for(int i=1;i<=m;i++) {			long s=in.nextLong()-1,e=in.nextLong()-1,w=in.nextLong();			graph[(int)s].add(new long[] {e,w});			graph[(int)e].add(new long[] {s,w});		}		return graph;	} 	private int ni() {		return in.nextInt();	} 	private long nl() {		return in.nextLong();	} 	private long[] na(int n) {		long[] A=new long[n];		for(int i=0;i<n;i++) {			A[i]=in.nextLong();		}		return A;	}	private int[] nia(int n) {		int[] A=new int[n];		for(int i=0;i<n;i++) {			A[i]=in.nextInt();		}		return A;	}}	 class FastReader{	BufferedReader br;	StringTokenizer st; 	public FastReader()	{		br=new BufferedReader(new InputStreamReader(System.in));	}  	public String next() 	{		while(st==null || !st.hasMoreElements())//回车，空行情况		{			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				e.printStackTrace();			}		}		return st.nextToken();	} 	public int nextInt() 	{		return Integer.parseInt(next());	} 	public long nextLong()	{		return Long.parseLong(next());	}}
