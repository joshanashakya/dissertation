import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.math.BigDecimal;import java.math.BigInteger;import java.util.Arrays;import java.util.StringTokenizer;public class Main{	public static InputReader in=new InputReader(System.in);	public static PrintWriter out =new PrintWriter(new OutputStreamWriter(System.out));		public static void main(String[] args) throws IOException	{		while(in.hasNext())		{			int t=in.nextInt();			while(t-->0) 			{				int n=in.nextInt(),m=in.nextInt();				int a[]=new int[n+1],b[]=new int[n+1],p[]=new int[n+1];				for(int i=1; i<=n; i++)		        {		           a[i]=in.nextInt();;		            b[i]=a[i];		        }		        for(int i=1; i<=m; i++)		        {		            p[i]=in.nextInt();		        }		        for(int j=1; j<=n; j++)		        {		            for(int i=1; i<=m; i++)		            {		                if(a[p[i]]>a[p[i]+1])		                {		                   a[p[i]]= a[p[i]]^a[p[i]+1];		                   a[p[i]+1]= a[p[i]]^a[p[i]+1];		                   a[p[i]]= a[p[i]]^a[p[i]+1];		                }		            }		        }		        Arrays.sort(b);		        int flag=1;		        for(int i=1;i<=n; i++)		        {		            if(a[i]!=b[i])		            {		                flag=0;		                break;		            }		        }		        System.out.println(flag==1?"YES":"NO");			}		}		out.close();	}	public static class InputReader	{		private BufferedReader in;		private StringTokenizer  Tokenizer;		public InputReader(InputStream stream)		{			in=new BufferedReader(new InputStreamReader(stream),32768);			Tokenizer=null;		}		public String next() throws IOException		{			while(Tokenizer==null || !Tokenizer.hasMoreTokens())			{				Tokenizer=new StringTokenizer(in.readLine());			}			return Tokenizer.nextToken();		}				public int nextInt()throws IOException		{			return Integer.valueOf(next());		}		public Long nextLong()throws IOException		{			return Long.valueOf(next());		}				public String nextLine()throws IOException		{			while(Tokenizer==null || !Tokenizer.hasMoreTokens())			{				Tokenizer=new StringTokenizer(in.readLine(),"\n");				if(!Tokenizer.hasMoreTokens())return "\n";			}			return Tokenizer.nextToken("\n");		}				public BigInteger nextBigInteger()throws IOException		{			return new BigInteger(next());		}				public BigDecimal nextBigDecimal()throws IOException		{			return new BigDecimal(next());		}				public double nextDouble()throws IOException		{			return Double.valueOf(next());		}		boolean hasNext()		{			while(Tokenizer==null || !Tokenizer.hasMoreTokens())			{				try				{					Tokenizer=new StringTokenizer(in.readLine());				} catch (Exception e)				{					return false;					// TODO: handle exception				}			}			return true;		}	}}  				  		   		    	 	 			 		 	
