import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {         int N = in.nextInt();        int P = in.nextInt();        String s = in.next();        char[] ca = s.toCharArray();         boolean found = false;         for (int i = N-1; i >= 0; i--) {             for (char c = (char)(ca[i]+1); c < 'a'+P; c++) {                 if (i-1 >= 0 && ca[i-1] == c) continue;                if (i-2 >= 0 && ca[i-2] == c) continue;                 if (P == 2 && N > 2) continue;                if (P == 1 && N > 1) continue;                 found = true;                ca[i] = c;                for (int j = i+1; j < N; j++) {                    for (char c2 = 'a'; c2 < 'a'+P; c2++) {                        if (j-1 >= 0 && ca[j-1] == c2) continue;                        if (j-2 >= 0 && ca[j-2] == c2) continue;                        ca[j] = c2;                        break;                    }                }                break;            }            if (found) break;        }         if (found) {            out.println(new String(ca));        } else {            out.println("NO");        }      }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
