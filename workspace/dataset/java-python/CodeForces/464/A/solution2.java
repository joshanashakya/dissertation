import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            ANoToPalindromes solver = new ANoToPalindromes();            solver.solve(1, in, out);            out.close();        }    }     static class ANoToPalindromes {        int[] s;        int[][][][] dp;        int[][][][] choice;        int p;         public boolean dp(int i, int l2, int l1, int floor) {            if (i == s.length) {                return floor == 1 ? false : true;            }            if (dp[i][l2][l1][floor] == -1) {                dp[i][l2][l1][floor] = 0;                for (int j = 0; j < p; j++) {                    if (floor == 1 && s[i] > j) {                        continue;                    }                    if (l2 == j || l1 == j) {                        continue;                    }                    if (dp(i + 1, l1, j, floor == 1 && s[i] == j ? 1 : 0)) {                        dp[i][l2][l1][floor] = 1;                        choice[i][l2][l1][floor] = j;                        break;                    }                }            }            return dp[i][l2][l1][floor] == 1;        }         public void calc(int i, int l2, int l1, int floor, StringBuilder sb) {            if (i == s.length) {                return;            }            assert dp[i][l2][l1][floor] == 1;            int j = choice[i][l2][l1][floor];            sb.append((char) ('a' + j));            calc(i + 1, l1, j, floor == 1 && j == s[i] ? 1 : 0, sb);        }         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            p = in.ri();            s = new int[n];            for (int i = 0; i < n; i++) {                s[i] = in.rc() - 'a';            }            dp = new int[n][p + 1][p + 1][2];            choice = new int[n][p + 1][p + 1][2];            SequenceUtils.deepFill(dp, -1);            if (!dp(0, p, p, 1)) {                out.println("NO");                return;            }            StringBuilder ans = new StringBuilder(n);            calc(0, p, p, 1, ans);            out.println(ans);        }     }     static class SequenceUtils {        public static void deepFill(Object array, int val) {            if (!array.getClass().isArray()) {                throw new IllegalArgumentException();            }            if (array instanceof int[]) {                int[] intArray = (int[]) array;                Arrays.fill(intArray, val);            } else {                Object[] objArray = (Object[]) array;                for (Object obj : objArray) {                    deepFill(obj, val);                }            }        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public char rc() {            return readChar();        }         public char readChar() {            skipBlank();            char c = (char) next;            next = read();            return c;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(Object c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println(Object c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
