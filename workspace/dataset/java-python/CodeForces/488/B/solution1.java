import java.util.*;import java.io.*; public class a {    static boolean check(List<Integer> list){        int mean=list.get(0)+list.get(1)+list.get(2)+list.get(3);        int fnl=list.get(3)-list.get(0);        if(mean!=4*fnl)return false;        if((list.get(1)+list.get(2))!=2*fnl)return false;        return true;    }    public static void main(String [] argument) throws IOException{        FastScanner sc=new FastScanner();        int n=sc.nextInt();        if(n==0){            System.out.println("YES\n1\n1\n3\n3");            return;        }        int [] a=sc.nextIntArray(n);        Arrays.sort(a);         if(n==4){            int mean=a[0]+a[1]+a[2]+a[3];            if(mean%4!=0){                System.out.println("NO");                return;            }            mean=mean/4;            if((a[3]-a[0])!=mean){                System.out.println("NO");                return;            }            if((a[1]+a[2])%2!=0 || (a[1]+a[2])/2 !=mean){                System.out.println("NO");                return;            }             System.out.println("YES");            return;        }         else if(n==1){            System.out.println("YES");            System.out.println(a[0]+"\n"+3*a[0]+"\n"+3*a[0]);            return;        }        else if(n==2){            for(int i=1;i<=1500;i++){                for(int j=1;j<=1500;j++){                    List<Integer> list=new ArrayList<>();                    list.add(i);                    list.add(j);                    list.add(a[0]);                    list.add(a[1]);                    list.sort((x,y)->x-y);                     if(check(list)){                        System.out.println("YES");                        System.out.println(i+"\n"+j);                        return;                    }                }            }             System.out.println("NO");        }        else{            for(int i=1;i<=1500;i++){                List<Integer> list=new ArrayList<>();                list.add(i);                list.add(a[0]);                list.add(a[1]);                list.add(a[2]);                list.sort((x,y)->x-y);                if(check(list)){                    System.out.println("YES");                    System.out.println(i);                    return;                }            }             System.out.println("NO");        }     } }                   class FastScanner{	    private int BUFFER_SIZE = 1 << 16;      private  DataInputStream din;      private  byte[] buffer;      private int bufferPointer, bytesRead;      public FastScanner() {       din = new DataInputStream(System.in);       buffer = new byte[BUFFER_SIZE];       bufferPointer = bytesRead = 0;   }    public FastScanner( String file_name) throws IOException {       din = new DataInputStream(new FileInputStream(file_name));       buffer = new byte[BUFFER_SIZE];       bufferPointer = bytesRead = 0;   }      public String readLine() throws IOException {        byte[] buf = new byte[64];       int cnt = 0, c;       while ((c = read()) != -1) {           if (c == '\n')               break;           buf[cnt++] = (byte) c;       }       return new String(buf, 0, cnt);   }      public String next() throws IOException{        byte c = read();       while(Character.isWhitespace(c)){           c = read();       }              StringBuilder builder = new StringBuilder();       builder.append((char)c);       c = read();       while(!Character.isWhitespace(c)){           builder.append((char)c);           c = read();       }              return builder.toString();   }    public int nextInt() throws IOException {       int ret = 0;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();       do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');        if (neg)           return -ret;       return ret;   }      public int[] nextIntArray( int n) throws IOException {        int arr[] = new int[n];       for(int i = 0; i < n; i++){           arr[i] = nextInt();       }       return arr;   }    public long nextLong() throws IOException {       long ret = 0;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();       do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');       if (neg)           return -ret;       return ret;   }      public long[] nextLongArray( int n) throws IOException {        long arr[] = new long[n];       for(int i = 0; i < n; i++){           arr[i] = nextLong();       }       return arr;   }    public char nextChar() throws IOException{       byte c = read();       while(Character.isWhitespace(c)){           c = read();       }       return (char) c;	   }      public double nextDouble() throws IOException {       double ret = 0, div = 1;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();        do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');        if (c == '.') {           while ((c = read()) >= '0' && c <= '9') {               ret += (c - '0') / (div *= 10);           }       }        if (neg)           return -ret;       return ret;   }      public double[] nextDoubleArray( int n) throws IOException {        double arr[] = new double[n];       for(int i = 0; i < n; i++){           arr[i] = nextDouble();       }       return arr;   }    private void fillBuffer() throws IOException {       bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);       if (bytesRead == -1)           buffer[0] = -1;   }    private byte read() throws IOException {       if (bufferPointer == bytesRead)           fillBuffer();       return buffer[bufferPointer++];   }    public void close() throws IOException {       if (din == null)           return;       din.close();   } }                                    
