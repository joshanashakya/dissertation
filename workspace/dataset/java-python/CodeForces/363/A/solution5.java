/*    @Rohan    Basic Template    key->brahmastra*/import java.io.*;import java.util.*;import java.math.*;import java.lang.*;import java.lang.Math.*;public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Solver solver = new Solver();        solver.solve(1, in, out);        out.close();    }     static class Solver {        public void solve(int testNumber, InputReader sc, PrintWriter out) {                String  s = sc.next();                HashMap<Integer, String> map = new HashMap<Integer, String>();                map.put(0,"O-|-OOOO");                map.put(1,"O-|O-OOO");                map.put(2,"O-|OO-OO");                map.put(3,"O-|OOO-O");                map.put(4,"O-|OOOO-");                map.put(5,"-O|-OOOO");                map.put(6,"-O|O-OOO");                map.put(7,"-O|OO-OO");                map.put(8,"-O|OOO-O");                map.put(9,"-O|OOOO-");                for(int i = s.length()-1; i > -1; i--){                     int a = Integer.parseInt(s.charAt(i)+"");                    out.println(map.get(a));                }        }    }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1)                throw new InputMismatchException();             if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                 if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public String nextLine() {            String str = "";            try {                str = br.readLine();            }            catch (IOException e) {                e.printStackTrace();            }            return str;        }         public int nextInt() {            int c = read();             while (isSpaceChar(c))                c = read();             int sgn = 1;             if (c == '-') {                sgn = -1;                c = read();            }             int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));             return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;                        do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));                return res * sgn;        }         public double nextDouble() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E')                    return res * Math.pow(10, nextInt());                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E')                        return res * Math.pow(10, nextInt());                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }          public String readString() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            }             while (!isSpaceChar(c));                        return res.toString();        }         public boolean isSpaceChar(int c) {            if (filter != null)                return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }        public String next(){            return readString();        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);        }    }}
