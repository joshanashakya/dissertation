//Created by Aminul on 4/10/2020. import java.io.*;import java.util.*; import static java.lang.Math.*; public class I_2 {    static int n, m, x, y, a, b;     public static void main(String[] args) throws Exception {        Scanner in = new Scanner(System.in);        PrintWriter pw = new PrintWriter(System.out);        n = in.nextInt();        m = in.nextInt();        x = in.nextInt();        y = in.nextInt();        a = in.nextInt();        b = in.nextInt();        int g = gcd(a, b);        a /= g;        b /= g;         long res[] = solve(0, max(n, m));        pw.println(res[0] + " " + res[1] + " " + res[2] + " " + res[3]);         pw.close();    }     static long[] brute(long l, long r) {        while (r >= l) {           // debug(r, check(r));            if (check(r)) {                long[] res = new long[]{lastValidX1, lastValidY1, lastValidX1 + r * a, lastValidY1 + r * b};                return res;            }            r--;        }        return null;    }     static long[] solve(long l, long r) {        long mid, res[] = null, temp[];        while (l <= r) {            mid = (l + r) >> 1;            if (check(mid)) {                res = new long[]{lastValidX1, lastValidY1, lastValidX1 + mid * a, lastValidY1 + mid * b};                l = mid + 1;            } else {                r = mid - 1;            }        }        return res;    }     static long lastValidX1, lastValidY1;     static boolean check(long factor) {        lastValidX1 = findX1(max(0, x - factor * a), min(n, x + factor * a), factor);        lastValidY1 = findY1(max(0, y - factor * b), min(m, y + factor * b), factor);        return lastValidX1 != -1 && lastValidY1 != -1;    }     static final long INF = (long) 1e18;     static long findX1(long l, long r, long factor) { //use long/int/double where necessary        long m1, m2;        while (r - l > 5) {            m1 = (2 * l + r) / 3;            m2 = (l + 2 * r) / 3;            long p = INF, q = INF;            {                long x1 = m1, x2 = x1 + factor * a;                if (x1 >= 0 && x2 <= n && x1 <= x && x <= x2) {                    p = max(abs(x1 - x), abs(x2 - x));                }            }            {                long x1 = m2, x2 = x1 + factor * a;                if (x1 >= 0 && x2 <= n && x1 <= x && x <= x2) {                    q = max(abs(x1 - x), abs(x2 - x));                }            }               if (p > q) l = m1;            else r = m2;        }        long min = INF, res = -1;        for (; l <= r; l++) {            long x1 = l, x2 = x1 + factor * a, p = INF;            if (x1 >= 0 && x2 <= n && x1 <= x && x <= x2) {                p = max(abs(x1 - x), abs(x2 - x));            }            if (p < min) {                min = p;                res = x1;            }        }        return res;    }      static long findY1(long l, long r, long factor) { //use long/int/double where necessary        long m1, m2;        while (r - l > 5) {            m1 = (2 * l + r) / 3;            m2 = (l + 2 * r) / 3;            long p = INF, q = INF;            {                long y1 = m1, y2 = y1 + factor * b;                if (y1 >= 0 && y2 <= m && y1 <= y && y <= y2) {                    p = max(abs(y1 - y), abs(y2 - y));                }            }            {                long y1 = m2, y2 = y1 + factor * b;                if (y1 >= 0 && y2 <= m && y1 <= y && y <= y2) {                    q = max(abs(y1 - y), abs(y2 - y));                }            }            if (p > q) l = m1;            else r = m2;        }        long min = INF, res = -1;        for (; l <= r; l++) {            long y1 = l, y2 = y1 + factor * b, p = INF;            if (y1 >= 0 && y2 <= m && y1 <= y && y <= y2) {                p = max(abs(y1 - y), abs(y2 - y));            }            if (p < min) {                min = p;                res = y1;            }        }        return res;    }      static int boolToInt(boolean b) {        return b ? 1 : 0;    }     static boolean isValid(long x1, long x2, long y1, long y2) {        return x1 >= 0 && x2 >= 0 && x1 <= x2 && x2 <= n && y1 >= 0 && y2 >= 0 && y1 <= y2 && y2 <= m                && x1 <= x && x <= x2 && y1 <= y && y <= y2;    }     static int gcd(int p, int q) {        if (q == 0) return p;        else return gcd(q, p % q);    }      static void debug(Object... obj) {        System.err.println(Arrays.deepToString(obj));    }}          	  		 		 				 	    	
