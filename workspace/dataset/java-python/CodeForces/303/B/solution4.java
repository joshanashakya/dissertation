import java.io.*;import java.util.Locale;import java.util.StringTokenizer; public class A implements Runnable {     private static final boolean ONLINE_JUDGE = System.getProperty("ONLINE_JUDGE") != null;     private BufferedReader in;    private PrintWriter out;    private StringTokenizer tok = new StringTokenizer("");     private void init() throws FileNotFoundException {        Locale.setDefault(Locale.US);        String fileName = "";        if (ONLINE_JUDGE && fileName.isEmpty()) {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(System.out);        } else {            if (fileName.isEmpty()) {                in = new BufferedReader(new FileReader("input.txt"));                out = new PrintWriter("output.txt");            } else {                in = new BufferedReader(new FileReader(fileName + ".in"));                out = new PrintWriter(fileName + ".out");            }        }    }     String readString() {        while (!tok.hasMoreTokens()) {            try {                tok = new StringTokenizer(in.readLine());            } catch (Exception e) {                return null;            }        }        return tok.nextToken();    }     int readInt() {        return Integer.parseInt(readString());    }     long readLong() {        return Long.parseLong(readString());    }     double readDouble() {        return Double.parseDouble(readString());    }     int[] readIntArray(int size) {        int[] a = new int[size];        for (int i = 0; i < size; i++) {            a[i] = readInt();        }        return a;    }     public static void main(String[] args) {        //new Thread(null, new _Solution(), "", 128 * (1L << 20)).start();        new A().run();    }     long timeBegin, timeEnd;     void time() {        timeEnd = System.currentTimeMillis();        System.err.println("Time = " + (timeEnd - timeBegin));    }     @Override    public void run() {        try {            timeBegin = System.currentTimeMillis();            init();            solve();            out.close();            time();        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     int gcd(int a, int b) {        return a == 0 ? b : gcd(b % a, a);    }     private void solve() {        int n = readInt();        int m = readInt();        int x = readInt();        int y = readInt();        int a = readInt();        int b = readInt();         int gcd = gcd(a, b);        a /= gcd;        b /= gcd;         int width = 0;        int height = 0;        int left = 0, right = n / a;        while (left <= right) {            int mid = (left + right) >> 1;            long curWidth = 1l * a * mid;            if (curWidth <= n) {                long curHeight = 1l * mid * b;                if (curHeight <= m) {                    width = (int) curWidth;                    height = (int) curHeight;                    left = mid + 1;                } else {                    right = mid - 1;                }            } else {                right = mid - 1;            }        }         int x1 = x - width / 2 - width % 2;        if (x1 < 0) {            x1 = 0;        }        if (x1 + width > n) {            x1 = n - width;        }         int y1 = y - height / 2 - height % 2;        if (y1 < 0) {            y1 = 0;        }        if (y1 + height > m) {            y1 = m - height;        }         int xAns = x1;        int yAns = y1;        String answer = xAns + " " + yAns + " " + (xAns + width) + " " + (yAns + height);         final int delta = 10;        for (int xx = x1 - delta; xx <= x1 + delta; xx++) {            for (int yy = y1 - delta; yy <= y1 + delta; yy++) {                if (xx >= 0 && xx + width <= n && yy >= 0 && yy + height <= m &&                        xx <= x && x <= xx + width && yy <= y && y <= yy + height) {                    long distAns = getDistSqr(2 * x, 2 * y, 2 * xAns + width, 2 * yAns + height);                    long distCur = getDistSqr(2 * x, 2 * y, 2 * xx + width, 2 * yy + height);                    if (distCur < distAns) {                        xAns = xx;                        yAns = yy;                        answer = xAns + " " + yAns + " " + (xAns + width) + " " + (yAns + height);                    } else if (distCur == distAns) {                        String curAnswer = xx + " " + yy + " " + (xx + width) + " " + (yy + height);                        if (curAnswer.compareTo(answer) < 0) {                            xAns = xx;                            yAns = yy;                            answer = xAns + " " + yAns + " " + (xAns + width) + " " + (yAns + height);                        }                    }                }            }        }         out.println(answer);    }     long getDistSqr(int x1, int y1, int x2, int y2) {        if (x2 < 0 || y2 < 0) {            System.err.println("hell");        }        long dx = x1 - x2;        long dy = y1 - y2;        return dx * dx + dy * dy;    }}
