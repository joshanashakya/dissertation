import java.io.*;import java.math.BigInteger;import java.util.ArrayList;import java.util.HashMap;import java.util.StringTokenizer; public class multipliers {    static public HashMap<Integer,Integer> factor(int in){        HashMap<Integer,Integer> result = new HashMap<>();        for(int i=2;i*i<=in;i++){            if(in%i==0){                int count=0;                while(in%i==0){                    count++;                    in/=i;                }                result.put(i,count);            }        }        if(in!=1){            result.put(in,1);        }        return result;    }     static public void factor(int in, HashMap<Integer,Integer> a){        HashMap<Integer,Integer> result = new HashMap<>();        for(int i=2;i*i<=in;i++){            if(in%i==0){                int count=0;                while(in%i==0){                    count++;                    in/=i;                }                if(a.containsKey(i))                    a.put(i,a.remove(i)+count);                else                    a.put(i,count);            }        }        if(in!=1){            if(a.containsKey(in))                a.put(in,a.remove(in)+1);            else                a.put(in,1);         }     }static int base=0;    static int MOD= (int) (1e9+7);//    static int[][] dp = new int[2000][2000];    static public long choose(int n, int r){//        if(n<0||r<0)//            return 0;//        if (n == r)//                return 1;//            if (r == 0)//                return 1;//            if (dp[n][r] != 0)//                return dp[n][r];////            return dp[n][r] = (choose(n - 1, r - 1) + choose(n - 1, r)) % MOD;        int count = r;        int cur = n;        long ans = 1;        while(count>0){            ans*= cur;            ans%=MOD;            cur--;            count--;        }        for(int i=2;i<=r;i++){            ans*=BigInteger.valueOf(i).modInverse(BigInteger.valueOf(MOD)).longValueExact();            ans%=MOD;        }//        System.out.print("FInished");        return ans;    }    public static void main(String[] args) throws IOException {          BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        int size = Integer.parseInt(br.readLine());        int[] in = new int[size];        StringTokenizer tokenizer = new StringTokenizer(br.readLine());        for(int i=0;i<size;i++){            in[i]=Integer.parseInt(tokenizer.nextToken());        }        HashMap<Integer,Integer> allFactors = factor(in[0]);         for(int i=1;i<size;i++)            factor(in[i],allFactors);//        System.out.println(allFactors);        int[] exp = new int[allFactors.size()];        int index=0;        int maxVal=0;        for(int val:allFactors.values()){            exp[index]=val;            index++;            maxVal=Math.max(maxVal,val);        }        int buckets= size;        long product=1;        for(int e:exp){            product*=choose(buckets+e-1,buckets-1);            product%=MOD;        }        System.out.println(product); //        ArrayList<Integer> primes = new ArrayList<>();      }}
