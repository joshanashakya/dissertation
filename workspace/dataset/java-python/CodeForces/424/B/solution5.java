//JDopeimport java.util.*;import java.io.*;import java.math.*;public class B{public static void main(String[] omkar) throws Exception{   BufferedReader in = new BufferedReader(new InputStreamReader(System.in));   StringTokenizer st = new StringTokenizer(in.readLine());   StringBuilder sb = new StringBuilder();   int n = Integer.parseInt(st.nextToken());   int s = Integer.parseInt(st.nextToken());   Pair[] pairs = new Pair[n];   int x, y, k;   for(int i = 0; i < n; i++)   {      st = new StringTokenizer(in.readLine());      x = Integer.parseInt(st.nextToken());      y = Integer.parseInt(st.nextToken());      k = Integer.parseInt(st.nextToken());      pairs[i] = new Pair(x*x+y*y, k);    }     Arrays.sort(pairs);   double temp = rad(pairs, s);   if(temp < 0)   {      System.out.println("-1");      return;   }   System.out.println(temp);        } public static double rad(Pair[] pairs, int s) {   long total = s;   int ind = 0;   double rad = 0;   while(ind < pairs.length && total < 1000000)   {      total += pairs[ind].b;      rad = Math.sqrt(pairs[ind].a);      ind++;   }   if(total < 1000000)   {      return -1;   }   return rad; } public static int[] readArr(int N, BufferedReader in, StringTokenizer st) throws Exception      {         int[] arr = new int[N];         st = new StringTokenizer(in.readLine());         for(int i=0; i < N; i++)            arr[i] = Integer.parseInt(st.nextToken());         return arr;      }static class Pair implements Comparable<Pair> {int a;int b;Pair(int a, int b) {this.a = a;this.b = b;}@Overridepublic int compareTo(Pair other) {if (a != other.a) {return a - other.a;} else {return b - other.b;}}}  }
