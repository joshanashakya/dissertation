import java.lang.*;import java.util.*;import java.io.*; public class Codeforces {     public void solve()throws IOException{        FastScanner fs = new FastScanner();        StringBuilder print = new StringBuilder();        int n = fs.nextInt(), pop = fs.nextInt();        Places[]places = new Places[n];        for(int i=0;i<n;i++){            int x = fs.nextInt(), y = fs.nextInt(), p = fs.nextInt();            float d = x*x+y*y;            places[i] = new Places(d,p);        }        Arrays.sort(places, (o1, o2) -> {            if(o1.r != o2.r)return (int)(o1.r - o2.r);            else return o2.pop - o1.pop;        });        for(int i=0;i<n;i++){            pop += places[i].pop;            if(pop >= 1000000){                System.out.printf("%.6f%n",Math.sqrt(places[i].r));                return;            }        }        System.out.println("-1");    }    class Places{        float r;        int pop;        Places(float r,int pop){            this.r = r;            this.pop = pop;        }    }    public static void main(String[]args)throws IOException{        try {            new Codeforces().solve();        }catch (Exception e){//            return;            e.printStackTrace();        }    }    static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }        String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }         int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    }}
