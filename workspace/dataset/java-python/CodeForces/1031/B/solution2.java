//package codeforces.practice.oneVone.Oct28_2020; import java.io.*;import java.util.*; public class C {    static InputReader in;    static PrintWriter out;     public static void main(String[] args) {        //initReaderPrinter(true);        initReaderPrinter(false);        //solve(in.nextInt());        solve(1);    }     static void solve(int testCnt) {        for (int testNumber = 0; testNumber < testCnt; testNumber++) {            int n = in.nextInt();            Integer[] a = in.nextIntArray(n - 1);            Integer[] b = in.nextIntArray(n - 1);            int[][] aa = new int[n - 1][2], bb = new int[n - 1][2];            for(int i = 0; i < n - 1; i++) {                aa[i][0] = a[i] & 1;                bb[i][0] = b[i] & 1;                aa[i][1] = (a[i] >>> 1) & 1;                bb[i][1] = (b[i] >>> 1) & 1;            }            int[] ans = null;            boolean can = true;            for(int start = 0; start <= 3; start++) {                can = true;                int[] t = new int[n];                t[0] = start;                for(int i = 1; i < n; i++) {                    int[] prevD = new int[2], currD = new int[2];                    boolean[] locked = new boolean[2];                    prevD[0] = t[i - 1] & 1;                    prevD[1] = t[i - 1] >>> 1;                    for(int j = 0; j < 2; j++) {                        //if a[i - 1]'s current digit is 0, then t[i - 1] and t[i]'s digits at the same position                        //must be 0                        if(aa[i - 1][j] == 0) {                            if(prevD[j] != 0) {                                can = false;                                break;                            }                            currD[j] = 0;                            locked[j] = true;                        }                        //else, if t[i - 1]'s digit is 0, then t[i]'s matching digit must be 1                        else {                            if(prevD[j] == 0) {                                currD[j] = 1;                                locked[j] = true;                            }                        }                        //if b[i - 1]'s current digit is 0, then t[i - 1] and t[i] can not be 1 at the same time                        if(bb[i - 1][j] == 0) {                            if(prevD[j] != 0 && currD[j] != 0) {                                can = false;                                break;                            }                        }                        //else, t[i - 1] and t[i] must be 1 at the same time                        else {                            if(prevD[j] == 0 || (currD[j] == 0 && locked[j])) {                                can = false;                                break;                            }                            currD[j] = 1;                            locked[j] = true;                        }                    }                    if(!can) {                        continue;                    }                    t[i] = currD[0] + (currD[1] << 1);                }                if(can) {                    ans = t;                    break;                }            }            if(can) {                out.println("YES");                for(int v : ans) {                    out.print(v + " ");                }                out.println();            }            else {                out.println("NO");            }         }        out.close();    }     static void initReaderPrinter(boolean test) {        if (test) {            try {                in = new InputReader(new FileInputStream("src/input.in"));                out = new PrintWriter(new FileOutputStream("src/output.out"));            } catch (IOException e) {                e.printStackTrace();            }        } else {            in = new InputReader(System.in);            out = new PrintWriter(System.out);        }    }     static class InputReader {        BufferedReader br;        StringTokenizer st;         InputReader(InputStream stream) {            try {                br = new BufferedReader(new InputStreamReader(stream), 32768);            } catch (Exception e) {                e.printStackTrace();            }        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         Integer[] nextIntArray(int n) {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++) {                a[i] = nextInt();            }            return a;        }         Long[] nextLongArray(int n) {            Long[] a = new Long[n];            for (int i = 0; i < n; i++) {                a[i] = nextLong();            }            return a;        }    }}  
