import java.util.*;import java.io.*; public class CF {    private static int[][] prefixSums;    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));         StringTokenizer st = new StringTokenizer(br.readLine());        int n = Integer.parseInt(st.nextToken());        int m = Integer.parseInt(st.nextToken());         prefixSums = new int[n][m];         int[][] image = new int[n][m];        for (int i = 0; i < n; i++) {            String line = br.readLine();            for (int j = 0; j < m; j++) {                image[i][j] = line.charAt(j) - '0';            }        }         prefixSums[0][0] = image[0][0];        for (int j = 1; j < m; j++) {            prefixSums[0][j] = prefixSums[0][j - 1] + image[0][j];        }         for (int i = 1; i < n; i++) {            prefixSums[i][0] = prefixSums[i - 1][0] + image[i][0];            for (int j = 1; j < m; j++) {                prefixSums[i][j] = prefixSums[i][j - 1] - prefixSums[i - 1][j - 1] + prefixSums[i - 1][j] + image[i][j];            }        }         int min = Integer.MAX_VALUE;         int maxK = Math.max(n, m);        for (int i = 2; i <= maxK; i++) {            min = Math.min(min, getNumChanges(i));            //System.out.println(i + ": " + getNumChanges(i));        }         pw.println(min);        pw.close();    }     private static int getNumChanges(int k) {        int ret = 0;         int nCeil = prefixSums.length;        int mCeil = prefixSums[0].length;         if (nCeil % k != 0) {            nCeil += (k - prefixSums.length % k);        }         if (mCeil % k != 0) {            mCeil += (k - prefixSums[0].length % k);        }         for (int i = k - 1; i < nCeil; i += k) {            for (int j = k - 1; j < mCeil; j += k) {                //arr[i - k + 1][j - k + 1] = 'Y';                //arr[i][j] = 'X';                int sum = getAreaSum(i - k + 1, j - k + 1, i, j);                ret += Math.min(k * k - sum, sum);            }        }         return ret;    }     private static int getAreaSum(int up, int left, int down, int right) {        down = Math.min(down, prefixSums.length - 1);        right = Math.min(right, prefixSums[0].length - 1);         int ret = prefixSums[down][right];        if (left - 1 >= 0) {            ret -= prefixSums[down][left - 1];        }        if (up - 1 >= 0) {            ret -= prefixSums[up - 1][right];        }        if (left - 1 >= 0 && up - 1 >= 0) {            ret += prefixSums[up - 1][left - 1];        }         return ret;    }}
