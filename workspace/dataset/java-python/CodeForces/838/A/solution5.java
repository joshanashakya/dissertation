import java.util.*;import java.util.stream.Collectors;  public class Main {     static int[][] dp;    static int n;    static int m;     public static void main(String[] args) {        Scanner in = new Scanner(System.in);        n = in.nextInt();        m = in.nextInt();        int[][] arr = new int[n][m];        dp = new int[n + 1][m + 1];         for (int i = 0; i < n; i++) {            String str = in.next();            for (int j = 0; j < m; j++) {                arr[i][j] = str.charAt(j) - 48;            }        }         for (int i = 1; i <= n; i++) {            for (int j = 1; j <= m; j++) {                dp[i][j] = arr[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];            }        }         int min = Integer.MAX_VALUE;        for (int k = 2; k < Math.max(n, m); k++) {            int sum = 0;            for (int i = k; i <= n + k; i += k) {                for (int j = k; j <= m + k; j += k) {                    int v = count(i - k + 1, j - k + 1, i, j);                    sum += Math.min(v, k * k - v);                }            }            if (sum < min) min = sum;        }        p(min);    }     static int count(int i1, int j1, int i2, int j2) {        return dp[Math.min(i2, n)][Math.min(j2, m)] - dp[Math.min(i2, n)][Math.min(j1 - 1, m)] - dp[Math.min(i1 - 1, n)][Math.min(j2, m)] + dp[Math.min(i1 - 1, n)][Math.min(j1 - 1, m)];    }     static class Pair {        int x;        int y;         public Pair(int x, int y) {            this.x = x;            this.y = y;        }    }     public static int GCD(int a, int b) {        while (b != 0) {            int tmp = a % b;            a = b;            b = tmp;        }        return a;    }     public static void p(Object str) {        System.out.println(str);    }     public static void pa(List<Object> objs) {        String str = "";        for (Object obj : objs) {            str += obj.toString() + " ";        }    }}
