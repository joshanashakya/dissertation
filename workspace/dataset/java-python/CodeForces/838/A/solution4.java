import java.util.*;import java.io.*;import java.math.*;import java.util.regex.*; public class Ind17 {     static Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));    static Reader fastInput = new Reader();     public static void main(String[] args) throws IOException {        int n = input.nextInt();        int m = input.nextInt();        String[] img = new String[n];        for (int i = 0; i < n; i++) {            img[i] = input.next();        }        int[][] map = new int[n][m];        map[0][0] = img[0].charAt(0) == '1' ? 1 : 0;        for (int i = 1; i < n; i++) {            map[i][0] = map[i - 1][0] + (img[i].charAt(0) == '1' ? 1 : 0);        }        for (int i = 1; i < m; i++) {            map[0][i] = map[0][i - 1] + (img[0].charAt(i) == '1' ? 1 : 0);        }        for (int y = 1; y < n; y++) {            for (int x = 1; x < m; x++) {                map[y][x] = map[y - 1][x] + map[y][x - 1] - map[y - 1][x - 1] + (img[y].charAt(x) == '1' ? 1 : 0);            }        }        int minK = Integer.MAX_VALUE;        for (int i = 2; i <= n; i++) {            int k = 0;            for (int x = 0; x < m; x += i) {                for (int y = 0; y < n; y += i) {                    /*int k1 = 0, xlen = Math.min(x + i, m), ylen = Math.min(y + i, n);                    for (int lx = x; lx < xlen; lx++) {                        for (int ly = y; ly < ylen; ly++) {                            if (img[ly].charAt(lx) == '1') {                                k1++;                            }                        }                    }*/                    int xlen = Math.min(x + i - 1, m - 1), ylen = Math.min(y + i - 1, n - 1);                    int t = (x > 0) ? map[ylen][x - 1] : 0;                    int l = (y > 0) ? map[y - 1][xlen] : 0;                    int tl = (x > 0 && y > 0) ? map[y - 1][x - 1] : 0;                    int k1 = map[ylen][xlen] - t - l + tl;                    k += Math.min(k1, i * i - k1);                }            }            if (minK > k) {                minK = k;            }        }        System.out.println(minK);    }     static class Reader {         final private int BUFFER_SIZE = 1 << 16;        private DataInputStream din;        private byte[] buffer;        private int bufferPointer, bytesRead;         public Reader() {            din = new DataInputStream(System.in);            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }         public Reader(String file_name) throws IOException {            din = new DataInputStream(new FileInputStream(file_name));            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }         public String readLine() throws IOException {            byte[] buf = new byte[64]; // line length            int cnt = 0, c;            while ((c = read()) != -1) {                if (c == '\n') {                    break;                }                buf[cnt++] = (byte) c;            }            return new String(buf, 0, cnt);        }         public int nextInt() throws IOException {            int ret = 0;            byte c = read();            while (c <= ' ') {                c = read();            }            boolean neg = (c == '-');            if (neg) {                c = read();            }            do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');             if (neg) {                return -ret;            }            return ret;        }         public long nextLong() throws IOException {            long ret = 0;            byte c = read();            while (c <= ' ') {                c = read();            }            boolean neg = (c == '-');            if (neg) {                c = read();            }            do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');            if (neg) {                return -ret;            }            return ret;        }         public double nextDouble() throws IOException {            double ret = 0, div = 1;            byte c = read();            while (c <= ' ') {                c = read();            }            boolean neg = (c == '-');            if (neg) {                c = read();            }             do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');             if (c == '.') {                while ((c = read()) >= '0' && c <= '9') {                    ret += (c - '0') / (div *= 10);                }            }             if (neg) {                return -ret;            }            return ret;        }         private void fillBuffer() throws IOException {            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);            if (bytesRead == -1) {                buffer[0] = -1;            }        }         private byte read() throws IOException {            if (bufferPointer == bytesRead) {                fillBuffer();            }            return buffer[bufferPointer++];        }         public void close() throws IOException {            if (din == null) {                return;            }            din.close();        }    }}
