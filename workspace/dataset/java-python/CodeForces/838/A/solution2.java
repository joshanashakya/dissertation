import java.io.*;import java.util.*;public class Main{        static class BI{        final private int BUFFER_SIZE = 1 << 16;        private DataInputStream dis;        private byte[] buffer;        private int bufferPointer, bytesRead;                //********Constructors*********\\                public BI() {            dis = new DataInputStream(System.in);            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }        public BI(String file_name) throws IOException {            dis = new DataInputStream(new FileInputStream(file_name));            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }                //*******Reads a line until new line character************\\                public String readLine() throws IOException {            byte[] buf = new byte[1<<25];            int cnt = 0, c;            while ((c = read()) != -1) {                if (c == '\n') break;                buf[cnt++] = (byte) c;            }            return new String(buf, 0, cnt);        }                //*******Reads a string Until First Space************\\                public String nextString() throws IOException {            // Skip all whitespace characters from the stream            byte c = read();            while(Character.isWhitespace(c)){                c = read();            }            StringBuilder builder = new StringBuilder();            builder.append((char)c);            c = read();            while(!Character.isWhitespace(c)){                builder.append((char)c);                c = read();            }            return builder.toString();        }                //*******Reads a Integer************\\                public int nextInt() throws IOException {            int ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');            if (neg)                return -ret;            return ret;        }                //*******Reads a Integer************\\                public long nextLong() throws IOException {            long ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');            if (neg)                return -ret;            return ret;        }                //*******Reads a Char************\\                public char nextChar() throws IOException{            byte c = read();            while(Character.isWhitespace(c)){                c = read();            }            return (char) c;        }                //*******Reads a Double************\\                public double nextDouble() throws IOException {            double ret = 0, div = 1;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do {                ret = ret * 10 + c - '0';            } while ((c = read()) >= '0' && c <= '9');            if (c == '.') {                while ((c = read()) >= '0' && c <= '9') {                    ret += (c - '0') / (div *= 10);                }            }            if (neg)			return -ret;			return ret;        }                //*******Reads an array of double values************\\                public double[] nextDoubleArray(int n) throws IOException {            double arr[] = new double[n];            for(int i = 0; i < n; i++){                arr[i] = nextDouble();            }            return arr;        }                //*******Reads an array of long integers************\\                public long[] nextLongArray(int n) throws IOException {            long arr[] = new long[n];            for(int i = 0; i < n; i++){                arr[i] = nextLong();            }            return arr;        }                //*******Reads an array of Integers************\\                public int[] nextIntArray(int n) throws IOException {            int arr[] = new int[n];            for(int i = 0; i < n; i++){                arr[i] = nextInt();            }            return arr;        }                //*******Fills the buffer from input stream************\\                private void fillBuffer() throws IOException {            bytesRead = dis.read(buffer, bufferPointer = 0, BUFFER_SIZE);            if (bytesRead == -1)            buffer[0] = -1;        }        private byte read() throws IOException {            if (bufferPointer == bytesRead)            fillBuffer();            return buffer[bufferPointer++];        }        public void close() throws IOException {            if (dis == null) return;            dis.close();        }            }        //**********************CODE IS HERE*****************************\\        static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }    public static int[] generatePrimes(int n) {		boolean[] prime = new boolean[n + 1];		Arrays.fill(prime, 2, n + 1, true);		for (int i = 2; i * i <= n; i++)			if (prime[i])				for (int j = i * i; j <= n; j += i)					prime[j] = false;		int[] primes = new int[n + 1];		int cnt = 0;		for (int i = 0; i < prime.length; i++)			if (prime[i])				primes[cnt++] = i;		return Arrays.copyOf(primes, cnt);	}	static int a[][];	static int get(int x1,int y1,int x2,int y2){	    if(x1>0 && y1>0) return a[x2][y2] - a[x1-1][y2] - a[x2][y1-1] + a[x1-1][y1-1];	    else if(x1>0) return a[x2][y2] - a[x1-1][y2];	    else if(y1>0) return a[x2][y2] - a[x2][y1-1];	    return a[x2][y2];	}    public static void main(String args[])throws IOException{        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));//bw.write("Shubham Pandey\n");                BI in=new BI();                int n = in.nextInt();        int m = in.nextInt();        a = new int[n][m];        for(int i=0;i<n;i++){            String s = in.nextString();            for(int j=0;j<m;j++){                a[i][j] = s.charAt(j)=='0'?0:1;            }        }        for(int i=0;i<n;i++){            for(int j=1;j<m;j++){                a[i][j] += a[i][j-1];            }        }        for(int i=1;i<n;i++){            for(int j=0;j<m;j++){                a[i][j] +=a[i-1][j];            }        }        int cnt=0,sum=0;        int primes[] = generatePrimes(Math.min(n,m));        int len = primes.length;        int ans = Integer.MAX_VALUE;        for(int p:primes){            sum=0;            for(int i=0;i<n;i+=p){                for(int j=0;j<m;j+=p){                    cnt = get(i,j,Math.min(n,i+p)-1,Math.min(m,j+p)-1);                    sum+=Math.min(cnt,p*p-cnt);                }            }            ans = Math.min(sum,ans);        }        bw.write(ans+"\n");        bw.flush();    }}
