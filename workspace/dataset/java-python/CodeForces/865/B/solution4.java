import java.util.*;import java.io.*; public class Main {	public static void main(String args[]) {new Main().run();} 	FastReader in = new FastReader();	PrintWriter out = new PrintWriter(System.out);	void run(){		work();		out.flush();	}	long mod=998244353;	long gcd(long a,long b) {		return b==0?a:gcd(b,a%b);	}	void work() {		int n=in.nextInt();		long s=in.nextLong();		long[][] A=new long[n][];		long c1=0,c2=0,sum=0,ret=0;		for(int i=0;i<n;i++) {			long k=in.nextLong();			long p1=in.nextLong();			long p2=in.nextLong();			if(p1>p2) {				c1+=k;				ret+=k*p1;			}else {				c2+=k;				ret+=k*p2;			} 			A[i]=new long[] {k,p1,p2};			sum+=k;		}		long r1=c1==0?0:((c1-1)/s+1);		long r2=c2==0?0:((c2-1)/s+1);		if(r1+r2==(sum-1)/s+1) {			out.println(ret);			return;		}		long r=0;		r=Math.max(r, find(c1-c1/s*s,A,ret,1));//c1减少		r=Math.max(r, find((c2/s+1)*s-c2,A,ret,1));		r=Math.max(r, find(c2-c2/s*s,A,ret,2));//c2减少		r=Math.max(r, find((c1/s+1)*s-c1,A,ret,2));		out.println(r);	}	private long find(long num, long[][] A, long ret, int type) {		if(num<0)return -1;		PriorityQueue<long[]> pq=new PriorityQueue<>(new Comparator<long[]>() {			public int compare(long[] a1,long[] a2) {				return (int)(a1[1]-a2[1]);			}		});		for(long[] a:A) {			if(type==1) {				if(a[1]>a[2]) {					pq.add(new long[] {a[0],a[1]-a[2]});				}			}else {				if(a[2]>=a[1]) {					pq.add(new long[] {a[0],a[2]-a[1]});				}			}		}		while(pq.size()>0) {			long[] q=pq.poll();			if(num>q[0]) {				num-=q[0];				ret-=q[0]*q[1];			}else {				ret-=num*q[1];				return ret;			}		}		return 0;	}}	   class FastReader{	BufferedReader br;	StringTokenizer st; 	public FastReader()	{		br=new BufferedReader(new InputStreamReader(System.in));	} 	public String next() 	{		if(st==null || !st.hasMoreElements())		{			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				e.printStackTrace();			}		}		return st.nextToken();	} 	public int nextInt() 	{		return Integer.parseInt(next());	} 	public long nextLong()	{		return Long.parseLong(next());	}}
