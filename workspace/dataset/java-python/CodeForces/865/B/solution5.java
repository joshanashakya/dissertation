import java.io.*;import java.util.*; public class Main {    public void solve() {        int n = ni(), s = ni();        C[] a = new C[n];        long tot = 0;        for (int i = 0; i < n; i++) {            a[i] = new C(ni(), ni(), ni());            tot += a[i].c;        }        long rem = (tot / s + (tot % s == 0 ? 0 : 1)) * s - tot;        Arrays.sort(a, (x, y) -> Long.compare(x.p, y.p));         int l = 0, r = n - 1;        long ans = 0;         long cur = s;        for (int i = 0; i < n && a[i].p <= 0; i++) {            cur -= Math.min(a[i].c, cur);            if (cur == 0 || i + 1 < n && a[i + 1].p > 0 && cur <= rem) {                int cur2 = s;                for (int j = l; j <= i; j++) {                    long x = Math.min(a[j].c, cur2);                    a[j].c -= x;                    cur2 -= x;                    ans += x * a[j].p2;                }                l = i;                cur = s - a[i].c;                if (cur <= 0) {                    long t = a[i].c / s;                    ans += t * s * a[i].p2;                    a[i].c -= t * s;                    cur = s - a[i].c;                }                if (i + 1 < n && a[i + 1].p > 0 && a[i].c + rem >= s) {                    ans += a[i].c * a[i].p2;                    a[i].c = 0;                }            }        }         cur = s;        for (int i = n - 1; i >= 0 && a[i].p > 0; i--) {            cur -= Math.min(a[i].c, cur);            if (cur == 0 || i - 1 >= 0 && a[i - 1].p <= 0 && cur <= rem) {                int cur2 = s;                for (int j = r; j >= i; j--) {                    long x = Math.min(a[j].c, cur2);                    a[j].c -= x;                    cur2 -= x;                    ans += x * a[j].p1;                }                r = i;                cur = s - a[i].c;                if (cur <= 0) {                    long t = a[i].c / s;                    ans += t * s * a[i].p1;                    a[i].c -= t * s;                    cur = s - a[i].c;                }                if (i - 1 >= 0 && a[i - 1].p <= 0 && a[i].c + rem >= s) {                    ans += a[i].c * a[i].p1;                    a[i].c = 0;                }            }        }        long ans1 = 0, ans2 = 0;        for (int i = l; i <= r; i++) {            ans1 += a[i].p1 * a[i].c;            ans2 += a[i].p2 * a[i].c;        }        ans += Math.max(ans1, ans2);        write(ans + "\n");    }     class C {        public long p, p1, p2, c;        public C(int x, int y, int z) {            c = x;            p1 = y;            p2 = z;            p = p1 - p2;        }    }       public static void main(String[] args) {        Main m = new Main();        m.solve();        try {            m.out.close();        } catch (IOException e) {}    }     BufferedReader in;    BufferedWriter out;    StringTokenizer tokenizer;    public Main() {        in = new BufferedReader(new InputStreamReader(System.in));        out = new BufferedWriter(new OutputStreamWriter(System.out));    }    public String n() {        if (tokenizer == null || !tokenizer.hasMoreTokens()) {            try {                tokenizer = new StringTokenizer(in.readLine());            } catch (IOException e) {}        }        return tokenizer.nextToken();    }    public int ni() {        return Integer.parseInt(n());    }    public long nl() {        return Long.parseLong(n());    }    public void write(String s) {        try {            out.write(s);        } catch (IOException e) {}    }}
