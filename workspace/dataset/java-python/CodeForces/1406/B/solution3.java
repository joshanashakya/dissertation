import java.awt.image.AreaAveragingScaleFilter;import java.util.*; public class StackBracket {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int t = sc.nextInt();        for (int i = 0; i < t; i++) {            int n = sc.nextInt();            if (n != 5) {                int[] ar = new int[n];                for (int j = 0; j < n; j++) {                    int num = sc.nextInt();                    ar[j] = num;                }                Arrays.sort(ar);                long max=Long.MIN_VALUE;                for(int j=0;j<n;j++){                    long h=ar[j];                    for(int k=1;k<=4;k++){                        h=h*ar[(j+k)%n];                    }                    max=Math.max(max,h);                }                System.out.println(max);                /*System.out.println(Arrays.toString(ar));                long[][] dp = new long[n][6];                for (int j = 0; j < n; j++) {                    for (int k = 0; k <= 5; k++) {                        dp[j][k] = Integer.MIN_VALUE;                    }                }                getAns(ar, 5, dp, n - 1, 1);                long max = Integer.MIN_VALUE;                for (int j = 0; j < n; j++) {                    max = Math.max(max, dp[j][5]);                    System.out.println(Arrays.toString(dp[j]));                }                System.out.println(max);*/            } else {                long mul = 1;                for (int j = 0; j < n; j++) {                    int num = sc.nextInt();                    mul = mul * num;                }                System.out.println(mul);            }          }      }      public static long getAns(int[] ar, int c, long[][] dp, int i, int sign) {        if (i < 0) {            return 1;        }         if (c <= 0) {            return 1;        }         dp[i][c] = Math.max(dp[i][c], Math.max(ar[i] * getAns(ar, c - 1, dp, i - 1, sign), getAns(ar, c, dp, i - 1, 1)));        return dp[i][c];    }      public static long power(long a, long b, long c) {        long ans = 1;        while (b != 0) {            if (b % 2 == 1) {                ans = ans * a;                ans %= c;            }            a = a * a;            a %= c;            b /= 2;        }        return ans;    }     public static long power1(long a, long b, long c) {        long ans = 1;        while (b != 0) {            if (b % 2 == 1) {                ans = multiply(ans, a, c);            }            a = multiply(a, a, c);            b /= 2;         }        return ans;     }     public static long multiply(long a, long b, long c) {        long res = 0;        a %= c;        while (b > 0) {            if (b % 2 == 1) {                res = (res + a) % c;            }            a = (a + a) % c;            b /= 2;        }         return res % c;     }     public static long totient(long n) {        long result = n;        for (long i = 2; i * i <= n; i++) {            if (n % i == 0) {                //sum=sum+2*i;                while (n % i == 0) {                    n /= i;                    // sum=sum+n;                }                result -= result / i;             }        }        if (n > 1) {            result -= result / n;         }        return result;    }      public static long gcd(long a, long b) {        if (b == 0) {            return a;        } else {            return gcd(b, a % b);        }    }     public static boolean[] primes(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            if (p[i]) {                for (int j = i * i; j <= n; j += i) {                    p[j] = false;                }            }         }        return p;    } }
