# by the authority of GOD     author: manhar singh sachdev # import os,sysfrom io import BytesIO, IOBasefrom math import sqrt def main():    a,b,c = map(int,input().split())    if a == b == c == 0:        print(-1)    elif a == b == 0:        print(0)    elif a == 0:        print(1)        print('%.10f'%(-c/b))    else:        d2 = b*b-4*a*c        if d2 < 0:            print(0)        elif d2 == 0:            print(1)            print('%.10f'%(-b/(2*a)))        else:            d = sqrt(d2)            print(2)            if a > 0:                print('%.10f'%((-b-d)/(2*a)))                print('%.10f'%((-b+d)/(2*a)))            else:                print('%.10f'%((-b+d)/(2*a)))                print('%.10f'%((-b-d)/(2*a))) # Fast IO RegionBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")if __name__ == "__main__":    main()
