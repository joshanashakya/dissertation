 import java.io.*;import java.util.*;  public class GFG {    static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } static long nCr(int n, int r)    {         // p holds the value of n*(n-1)*(n-2)...,        // k holds the value of r*(r-1)...        long p = 1, k = 1;         // C(n, r) == C(n, n-r),        // choosing the smaller value        if (n - r < r) {            r = n - r;        }         if (r != 0) {            while (r > 0) {                p *= n;                k *= r;                 // gcd of p, k                long m = __gcd(p, k);                 // dividing by gcd, to simplify                // product division by their gcd                 // saves from the overflow                p /= m;                k /= m;                 n--;                r--;            }             // k should be simplified to 1            // as C(n, r) is a natural number            // (denominator should be 1 ) .        }        else {            p = 1;        }         // if our approach is correct p = ans and k =1      return p;    }     static long __gcd(long n1, long n2)    {        long gcd = 1;         for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0) {                gcd = i;            }        }        return gcd;    }	public static void main (String[] args) {	 FastReader sc=new FastReader();	 int n=sc.nextInt();	int arr[]=new int[26];long total=0;	 for(int i=1;i<=n;i++)	 {	     String s= sc.nextLine();	     arr[(int)(s.charAt(0))-97]++;	 }	 for(int i=0;i<26;i++)	 {	    // System.out.println(arr[i]);	    if(arr[i]>1)	    {	        int n1=arr[i]/2;	        int n2=arr[i]-n1;	        // System.out.println(n1);	        //System.out.println(n2);	        if(n1>1)	       total=total+( (nCr(n1,2)));	       if(n2>1)	       total=total+( (nCr(n2,2)));	        // System.out.println((nCr(n1,2))); 	       //System.out.println((nCr(n2,2)));	       	    }	 }	  // System.out.println((nCr(1,2))); 	 System.out.println(total); }}
