# MasterKali from sys import stdinfrom collections import Counter, defaultdict, dequefrom math import sqrt, factorial, log10, log, floor, ceilfrom itertools import permutations, combinations, combinations_with_replacement, productfrom string import ascii_lowercase input = stdin.readlinedef li(): return list(map(int, input().split()))def lis(): return list(map(str, input().split()))def mp(): return map(int, input().split())def inp(): return int(input())def inps(): return str(input().strip())def pr(n): return stdout.write(str(n)+"\n") def primes(pmax):	D = {}	q = 2	while q <= pmax:		if q not in D:			yield q			D[q*q] = [q]		else:			for p in D[q]:				D.setdefault(p+q, []).append(p)			del D[q]		q+=1 def gcd(i, j):	while j > 0:		i, j = j, i%j	return i  INF = float('inf') def char(x):	a = ascii_lowercase	return a.index(x) def solve():	n = inp()	cnt = [0]*26	for i in range(n):		s = inps()		cnt[char(s[0])] += 1		res = 0	for mx in cnt:		if mx < 2: continue		first_half = mx//2		second_half = mx//2 + (1 if mx&1 else 0)		res += (first_half*(first_half-1))//2 + (second_half*(second_half-1))//2	print(res)     t = 1for i in range(t):		solve() 
