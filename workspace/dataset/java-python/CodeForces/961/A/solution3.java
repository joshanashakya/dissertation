import java.util.*;  public class Practise {     //public static int[][] dp;     public static void main(String[] args) {        //top- down approch        //fibonacci         Scanner sc = new Scanner(System.in); //right most a[i]>=q;//        long[]  dp = new long[100001];//        for(int i=0;i<=100000;i++){//            dp[i]=-1;//        }//        int  n =sc.nextInt();        int m = sc.nextInt();        int[]  frq= new int[n+1];        for(int i=1;i<=m;i++){            int a= sc.nextInt();            frq[a]++;        }        int min=Integer.MAX_VALUE;        for(int  i=1;i<=n;i++){            if(frq[i]<min){                min=frq[i];            }        }        System.out.println(min);     }    public static long fact(long[] dp ,int n ){        int max=(int)Math.pow(10,9)+7;        if(n==1|| n==0){            return 1;        }else if(dp[n]!=-1){            return dp[n];        }else {            return dp[n]= (n*fact(dp,n-1))%(max);        }    }       private static int CountLeft(int x, int[] arr) {        int l=-1;        int r =arr.length;        while(r>l+1){            int mid=l+(r-l)/2;            if(arr[mid]<=x){                l=mid;             }else                r=mid;         }        return  l;    }     private static int CountRight(int x ,int[] arr) {        int l=-1;        int r=arr.length;        while(r>l+1){            int mid=(l)+(r-l)/2;            if(arr[mid]>=x){                r=mid;            }else                l=mid;        }        return r;      }     private static boolean check(String toString) {        Stack<Character>  st=new Stack<>();        for(int  i=0;i<toString.length();i++){            if(toString.charAt(i)=='('){                st.push(toString.charAt(i));            }else if(st.isEmpty()){                return false;            }else            {                st.pop();            }        }        return st.isEmpty();    }  }   			  	     	  	 							 				
