import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=input.nextInt();        while(T-->0)        {            int n=input.nextInt();            int p[]=new int[2*n];            TreeSet<Integer> set=new TreeSet<>(Comparator.reverseOrder());            for(int i=0;i<2*n;i++)            {                p[i]=input.nextInt();                set.add(p[i]);            }            int x=set.first();            int count=0;            ArrayList<Integer> list=new ArrayList<>();            for(int i=2*n-1;i>=0;i--)            {                count++;                set.remove(p[i]);                if(p[i]==x)                {                    list.add(count);                    count=0;                    if(set.size()==0)                    {                        break;                    }                    x=set.first();                }            }            boolean dp[][]=new boolean[list.size()][2*n+1];            for(int i=0;i<list.size();i++)            {                for(int j=0;j<=2*n;j++)                {                    if(i==0)                    {                        if(j==list.get(i))                        {                            dp[i][j]=true;                        }                        else                        {                            if(j==0)                            {                                dp[i][j]=true;                            }                            else                            {                                dp[i][j]=false;                            }                        }                    }                    else                    {                        if(j==0)                        {                            dp[i][j]=true;                        }                        else                        {                            if(list.get(i)>j)                            {                                dp[i][j]=dp[i-1][j];                            }                            else                            {                                dp[i][j]=dp[i-1][j]|dp[i-1][j-list.get(i)];                            }                        }                    }                }            }            int flag=0;            for(int i=0;i<list.size();i++)            {                if(dp[i][n]==true)                {                    flag=1;                    break;                }            }            if(flag==1)            {                out.println("YES");            }            else            {                out.println("NO");            }        }        out.close();    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {             return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
