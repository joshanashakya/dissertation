 import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.StringTokenizer; public class N1381B {	static Boolean[][] memo;	static int[][]p;	//static int x,y;	static int[]a;	static int n,m,k;	static ArrayList<Integer>sizes;	public static void main(String[]args) throws IOException {		Scanner sc=new Scanner(System.in);		PrintWriter out=new PrintWriter(System.out);		int t=sc.nextInt();		while(t-->0) {		    n=sc.nextInt();			a=new int[2*n];			for(int i= 0;i<2*n;i++) {				a[i]=sc.nextInt();			}			int[]f=new int[n],g=new int[n];			int max=2*n;			boolean[]v=new boolean[2*n+1];			sizes=new ArrayList();			int last=2*n-1;			for(int i=2*n-1;i>=0;i--) {				v[a[i]]=true;				if(a[i]==max) {					int chunk=last-i+1;					last=i-1;					int k=max;					while(k>=0&&v[k])k--;					max=k;					sizes.add(0,chunk);				}			}			memo=new Boolean[sizes.size()][n+1];			out.println(solve(0,n)?"YES":"NO");		}		out.close();	}    private static boolean solve(int i, int n) {		if(i==sizes.size()) {			return n==0;		}		if(memo[i][n]!=null) {			return memo[i][n];		}		boolean ch1=false;		if(sizes.get(i)<=n) {			ch1=solve(i+1,n-sizes.get(i));		}		boolean ch2=solve(i+1,n);		return memo[i][n]=ch1||ch2;		}    //	private static void fillNeg() {//		for(int i=0;i<memo.length;i++){//			for(int j=0;j<memo[i].length;j++) {//				Arrays.fill(memo[i][j],-1);//			}//		}//	}	static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		public boolean hasNext() {return st.hasMoreTokens();}		public int nextInt() throws IOException {return Integer.parseInt(next());}				public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();}					public boolean ready() throws IOException {return br.ready(); }  	} }
