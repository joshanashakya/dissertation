import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def solve():	G = defaultdict(list) 	def addEdge(a,b):		G[a].append(b)		G[b].append(a) 	def dfs(node):		d = deque()		d.append(node)		vis[node] = True		T = []		S = []		tot = 0;wt = 0		while d:			x = d.pop()			S.append(B[x-1])			T.append(W[x-1])			# tot += B[x-1]			# wt += W[x-1]			for i in G.get(x,[]):				if not vis[i]:					vis[i] = True					d.append(i)		# if len(S) > 1:		# 	S.append(tot)		# 	T.append(wt) 		return S,T 	n,m,w =aj()	W = aj()	B = aj()	vis = [False]*(n+1) 	for i in range(m):	    u,v = aj()	    addEdge(u,v)	A1 = []	A2 = []	Id = 1	for i in range(1,n+1):		if not vis[i]:			c,d = dfs(i)			A1.append(c)			A2.append(d)	# print(A1)	# print(A2)	# print(w)	# dp = {}	# def fun(pos = 0,wt = 0):	# 	if wt > w:	# 		return -float('inf')	# 	if pos >= len(A1):	# 		return 0	# 	z = dp.get((pos,wt),-1)	# 	if z!= -1:	# 		return z	# 	ans = 0	# 	c2 = 0	# 	for i in range(len(A1[pos])):	# 		c2 = max(c2,A1[pos][i] + fun(pos+1,wt + A2[pos][i]))	# 	c3 = fun(pos + 1,wt)	# 	z =  max(c2,c3)	# 	dp[(pos,wt)] = z	# 	return z 	dp = [[0]*(w+1) for i in range(len(A1)+1)]	for i in range(len(A1)):		weight_sum = sum(x for x in A2[i])		beauty_sum = sum(x for x in A1[i])		for j in range(w + 1):			dp[i][j] = max(beauty_sum + dp[i - 1][j - weight_sum]				if weight_sum <= j else 0, dp[i - 1][j]) 			for k in range(len(A1[i])):				dp[i][j] = max(dp[i][j], (dp[i - 1][j - A2[i][k]] +					A1[i][k] if A2[i][k] <= j else 0))	# print(fun())	print(dp[len(A1)-1][w])  try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
