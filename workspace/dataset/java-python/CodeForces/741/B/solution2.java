import java.util.*;import java.io.*;import java.io.BufferedReader; public class Z_A{	public static long mod= 1000000007;	public static Debug db; 	public static void main(String[] args) throws IOException {		InputReader in = new InputReader(System.in);		PrintWriter out = new PrintWriter(System.out);		Autocompletion solver = new Autocompletion();		db=new Debug(System.getSecurityManager()==null);		solver.solve(1, in, out);		out.close();	}	static class Autocompletion { 		public void solve(int testNumber, InputReader in, PrintWriter out) {			int n=in.nextInt();			int m=in.nextInt();			int w=in.nextInt();			int warr[]=in.nextIntArr(n);			int b[]=in.nextIntArr(n);			UnionFind uf=new UnionFind(n);			for(int i=0;i<m;i++) {				int x=in.nextInt()-1;				int y=in.nextInt()-1;				uf.combine(x, y);//				System.out.println(x+" "+y);			}			ArrayList<Pair>[] set=new ArrayList[n];						int dp[]=new int[w+1];			int dprev[]=new int[w+1];//			System.out.println(Arrays.toString(uf.id));			for(int i=0;i<n;i++) {				uf.id[i]=uf.findParent(i);			}//			System.out.println(Arrays.toString(uf.id));			for(int i=0;i<n;i++)set[i]=new ArrayList<>();			for(int i=0;i<n;i++)set[uf.id[i]].add(new Pair(warr[i],b[i]));//			for(int i=0;i<n;i++) {//				for(Pair j:set[i])System.out.print("as "+j.x+" "+j.y);//				System.out.println();//			}			for(int i=0;i<n;i++) {				int bsum=0;				int wsum=0;				for(int j=set[i].size()-1;j>=0;j--) {//try one each					for(int k=w-set[i].get(j).x;k>=0;k--) {						dp[k+set[i].get(j).x]=Math.max(dp[k+set[i].get(j).x], dprev[k]+set[i].get(j).y);					}					wsum+=set[i].get(j).x;					bsum+=set[i].get(j).y;				}				for(int k=w-wsum;k>=0;k--) {//try all					dp[k+wsum]=Math.max(dp[k+wsum], dprev[k]+bsum);				}								for(int j=0;j<=w;j++) {					dprev[j]=dp[j];				}				db.debug("dp", dp);				db.debug("dprev", dprev);			}			int ret=0;			for(int i=0;i<=w;i++) {				ret=Math.max(ret, dp[i]);			}			out.println(ret);		}	}static class UnionFind {		int[] id;		int[] size;		UnionFind(int size){			id=new int[size];			this.size=new int[size];			for(int i=0;i<size;i++) {				id[i]=i;				this.size[i]=1;			}		}		void combine(int node1, int node2) {			int i=findParent(node1);			int j=findParent(node2);//			if(i==j)return; use if connecting the same component			if(size[i]<size[j]) {				id[i]=j;//				size[i]=j; idk why this is here, didnt work in mootube				size[j]+=size[i];			}			else {				id[j]=i;				size[i]+=size[j];			}		}		boolean isConnected(int node1, int node2) {			return findParent(node1)==findParent(node2);		}		int findParent(int node1) {			while(node1!=id[node1]) {				id[node1]=id[id[node1]];				node1=id[node1];			}			return node1;		}	} 	static class Pair implements Comparable<Pair>{		int x;		int y;		Pair(int a, int b){			x=a;			y=b;		}		@Override		public int compareTo(Pair arg0) {			if(arg0.x!=x)return x-arg0.x;			return y-arg0.y;		}	}	static class Triple implements Comparable<Triple>{		int x;		int y;		int z;		Triple(int a, int b, int c){			x=a;			y=b;			z=c;		}		@Override		public int compareTo(Triple arg0) {			if(arg0.x!=x)return x-arg0.x;			return y-arg0.y;		}	} 	static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {        	return Long.parseLong(next());        }        public int[] nextIntArr(int n) {        	int arr[]=new int[n];        	for(int i=0;i<n;i++) {        		arr[i]=this.nextInt();        	}        	return arr;        }        public long[] nextLongArr(int n) {        	long arr[]=new long[n];        	for(int i=0;i<n;i++) {        		arr[i]=this.nextLong();        	}        	return arr;        }    }	public static class Debug {        private boolean allowDebug;         public Debug(boolean allowDebug) {            this.allowDebug = allowDebug;        }         private void outputName(String name) {            System.out.print(name + " = ");        }         public void debug(String name, int x) {            if (!allowDebug) {                return;            }             outputName(name);            System.out.println("" + x);        }         public void debug(String name, long x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println("" + x);        }         public void debug(String name, double x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println("" + x);        }         public void debug(String name, int[] x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println(Arrays.toString(x));        }         public void debug(String name, long[] x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println(Arrays.toString(x));        }         public void debug(String name, double[] x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println(Arrays.toString(x));        }                public void debug(String name, Pair[] x) {            if (!allowDebug) {                return;            }            outputName(name);            StringBuilder sb = new StringBuilder("[");            int cnt=0;            for(Pair y:x) {            	sb.append("("+y.x+","+y.y+')');            	if (cnt != x.length-1)sb.append(", ");            	cnt++;            }            System.out.println(sb.append("]").toString());        }         public void debug(String name, Object x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println("" + x);        }         public void debug(String name, Object... x) {            if (!allowDebug) {                return;            }            outputName(name);            System.out.println(Arrays.deepToString(x));        }    }}
