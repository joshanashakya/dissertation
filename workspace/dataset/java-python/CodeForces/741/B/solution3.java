import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author maheshwari29 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BArpasWeakAmphitheaterAndMehrdadsValuableHoses solver = new BArpasWeakAmphitheaterAndMehrdadsValuableHoses();        solver.solve(1, in, out);        out.close();    }     static class BArpasWeakAmphitheaterAndMehrdadsValuableHoses {        static boolean visited[];        static ArrayList<Integer> arr[];        static ArrayList<Integer> temp;         public void solve(int testNumber, InputReader in, OutputWriter out) {            int i, j;            int n = in.ni();            int m = in.ni();            int w = in.ni();            long a[] = in.nla(n);            long b[] = in.nla(n);            arr = new ArrayList[n];            visited = new boolean[n];            for (i = 0; i < n; i++)                arr[i] = new ArrayList<Integer>();            for (i = 0; i < m; i++) {                int p = in.ni() - 1;                int q = in.ni() - 1;                arr[p].add(q);                arr[q].add(p);            }            ArrayList<BArpasWeakAmphitheaterAndMehrdadsValuableHoses.pair> temp2 = new ArrayList<>();            long dp[] = new long[w + 1];            for (i = 0; i < n; i++) {                if (!visited[i]) {                    temp = new ArrayList<Integer>();                    dfs(i);                     int beauty = 0, weight = 0;                    for (int c : temp) {                        beauty += b[c];                        weight += a[c];                    }                     long arr2[] = new long[w + 1];                    for (j = 0; j <= w; j++)                        arr2[j] = dp[j];                    for (j = w; j >= weight; j--) {                        if (j - weight >= 0)                            dp[j] = Math.max(dp[j], arr2[j - weight] + beauty);                    }                    temp2.add(new BArpasWeakAmphitheaterAndMehrdadsValuableHoses.pair(weight, beauty));                    for (j = w; j >= 0; j--) {                        for (int c : temp) {                            if (j - a[c] >= 0)                                dp[j] = Math.max(dp[j], arr2[j - (int) a[c]] + b[c]);                        }                    }                 }            }             long max = 0;            //for(pair c:temp2)            //     out.println(c.x+" "+c.y);            //out.println(dp);            for (i = 0; i <= w; i++)                max = Math.max(max, dp[i]);            out.println(max);        }         public void dfs(int a) {            if (visited[a])                return;            visited[a] = true;            temp.add(a);            for (int c : arr[a])                dfs(c);         }         static class pair implements Comparable<BArpasWeakAmphitheaterAndMehrdadsValuableHoses.pair> {            long x;            long y;             public pair(long x, long y) {                this.x = x;                this.y = y;            }             public int compareTo(BArpasWeakAmphitheaterAndMehrdadsValuableHoses.pair arg0) {                if (x < arg0.x) return -1;                else if (x == arg0.x) {                    if (y < arg0.y) return -1;                    else if (y > arg0.y) return 1;                    else return 0;                } else return 1;            }         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(long i) {            writer.println(i);        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int ni() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nl() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public long[] nla(int n) {            long[] array = new long[n];            for (int i = 0; i < n; ++i) array[i] = nl();            return array;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
