import java.io.*;import java.util.*; public class p741a {    static class Pair    {        public int a,b;        public Pair(int a, int b)        {            this.a=a;            this.b=b;        }    }    public static long hcf(long a, long b)    {        if(a==0 || b==0)            return a+b;        return hcf(b,a%b);    }    public static long lcm(long a, long b)    {        return (a*b)/hcf(a,b);    }	public static void main(String[] args)throws IOException {        InputReader in = new InputReader(System.in);        PrintWriter out = new PrintWriter(System.out);        int n = in.nextInt();        int arr[] = new int[n];        for(int i=0;i<n;i++)            arr[i]=in.nextInt()-1;        long rep[] = new long[n];        Arrays.fill(rep,-1);        long lc = 1;		for(int i=0;i<n;i++)        {            int v=i;            for(int j=0;j<n;j++)            {                v=arr[v];                if(v==i)                {                    long val = ((j+1)%2!=0) ? (j+1) : (j+1)/(int)2;                    // if((j+1))                    // long val = (long)Math.min(1,(j+1)/(int)2);                    rep[i]=val; lc=lcm(rep[i],lc);                    break;                }            }        }        // for(int i=0;i<n;i++)            // out.print(rep[i]+" ");        // out.println();        for(int i=0;i<n;i++)        {            // long val=-1;            // if(rep[i]!=-1)                // val = lc/rep[i];            if(rep[i]==-1)            {                out.println(-1); out.close(); return;            }        }        out.println(lc);        out.close();	}    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     } }
