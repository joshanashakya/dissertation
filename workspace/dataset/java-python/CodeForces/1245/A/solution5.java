// package may2020; import java.util.*;import java.lang.*;import java.math.*;import java.io.*; public class C {	public static void main(String[] args) throws IOException {		FastReader scn = new FastReader();		OutputStream out = new BufferedOutputStream(System.out);		int tc=scn.nextInt();		while(tc-->0) {			int a= scn.nextInt(),b=scn.nextInt();									if(a==1||b==1) {				out.write("Finite\n".getBytes());				continue;			}						if(gcd(a,b)!=1) {				out.write("Infinite\n".getBytes());			}else {				out.write("Finite\n".getBytes());			}					}		out.close();	}	static long gcd(long a, long b) {		if(a==0)			return b;		return gcd(b%a,a);	}	static int lowerBound(int[] a, int x) {		int l = -1, r = a.length;		while (r - l > 1) {			int c = (l + r) / 2;			if (a[c] < x) {				//if (a[c] > x) {				l = c;			} else {				r = c;			}		}		return r;	} 	static int upperBound(int[] a, int x) {		int l = -1, r = a.length;		while (r - l > 1) {			int c = (l + r) / 2;			if (a[c] <= x) {				l = c;			} else {				r = c;			}		}		return r;	}	static <T> int upperBound(List<T> ls, T x) throws RuntimeException {		if (ls.size() == 0)			return -1;		if (ls.get(0) instanceof Integer) {			return ~Collections.binarySearch(ls, x, (t1, t2) -> ((Integer) t1).compareTo((Integer) t2) > 0 ? 1 : -1);		} else if (ls.get(0) instanceof Long) {			return ~Collections.binarySearch(ls, x, (t1, t2) -> ((Long) t1).compareTo((Long) t2) > 0 ? 1 : -1);		} else if (ls.get(0) instanceof Double) {			return ~Collections.binarySearch(ls, x, (t1, t2) -> ((Double) t1).compareTo((Double) t2) > 0 ? 1 : -1);		} else {			System.err.println(					String.format("%s:Arey Maa chudi padi hai", Thread.currentThread().getStackTrace()[1].getMethodName()));			throw new RuntimeException();		}	}	public static int[] merge(int[] one,int[] two){		int[] res = new int[one.length+two.length];		int i = 0;		int j = 0;		int k = 0;				while(i<one.length&&j<two.length){			if(one[i]<two[j]){				res[k] = one[i];				i++;				k++;			}			else{				res[k] = two[j];				j++;				k++;			}		}				if(i==one.length){			while(j<two.length){				res[k] = two[j];				j++;				k++;			}		}		else{			while(i<one.length){				res[k] = one[i];				k++;				i++;			}		}		return res;	}	public static int[] mergesort(int[] arr, int l, int r){		if(l==r){			int[] br = new int[1];			br[0] = arr[l];			return br;		}		int mid = (l+r)/2;		int[] fh = mergesort(arr,l,mid);		int[] sh = mergesort(arr,mid+1,r);				return merge(fh,sh);	} //	public static long lcm(long a,long b) {//		return a/gcd(a,b)*b;//	}	static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }
