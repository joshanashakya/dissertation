import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.HashSet;import java.util.StringTokenizer;public class A {    void solve(){        int n;        n = readInt();        int[] left = new int[n];        int[] right = new int[n];        for(int i = 0;i<n;i++){            left[i] = readInt() - 1;            right[i] = readInt() - 1;        }         boolean[] used = new boolean[n];        int now = 0;        while(now < n){            int l = now;            int r = now;            while(l != -1){                used[l] = true;                l = left[l];            }            while(r != -1){                used[r] = true;                if(right[r] == -1) break;                r = right[r];            }             for(;now < n;now++){                if(!used[now] && left[now] == -1){                    left[now] = r;                    right[r] = now;                    break;                }            }        }         for(int i = 0;i<n;i++){            out.println((left[i] + 1) + " " + (right[i] + 1));        }    }    public static void main(String[] args) {        new A().run();    }     private void run() {        try {            init();            solve();            out.close();        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     private BufferedReader in;    private StringTokenizer tok = new StringTokenizer("");     private PrintWriter out;     private void init() {        in = new BufferedReader(new InputStreamReader(System.in));        out = new PrintWriter(System.out); //        try {//            in = new BufferedReader(new FileReader("absum.in"));//            out = new PrintWriter(new File("absum.out"));//        } catch (FileNotFoundException e) {//            e.printStackTrace();//        }    }     private String readLine() {        try {            return in.readLine();        } catch (IOException e) {            throw new RuntimeException(e);        }    }     private String readString() {        while (!tok.hasMoreTokens()) {            String nextLine = readLine();            if (nextLine == null) return null;            tok = new StringTokenizer(nextLine);        }         return tok.nextToken();    }     private int readInt() {        return Integer.parseInt(readString());    }     private long readLong() {        return Long.parseLong(readString());    }}
