import java.util.*;import java.io.*;import java.math.BigInteger; public class tr0 {	static PrintWriter out;	static StringBuilder sb;	static int mod = 1000000007;	static long inf = (long) 1e16;	static int n, m;	static ArrayList<Integer>[] ad;	static long[][][] memo;	static boolean f;	static boolean vis[];	static int[] sub;	static char[] a;	static ArrayList<Long> ar; 	public static void main(String[] args) throws Exception {		Scanner sc = new Scanner(System.in);		out = new PrintWriter(System.out);		long k = sc.nextLong();		long d = sc.nextLong();		long t = sc.nextLong();		if (k % d == 0 || t <= k) {			System.out.println((double) t);		} else {			double w = k + (d - k % d) / 2d;			double w1 = k + (d - k % d);		//	System.out.println(w+" "+w1);			double ans = (long) (t / w);		//	System.out.println(ans);			double re = t % w;		//	System.out.println(re);			double ree = 0;			if (re <= k)				ree = re;			else {				ree = k + (re - k) * 2d;			}			System.out.println(w1 * ans + ree);		}		out.flush();	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		} 		public Scanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public char nextChar() throws IOException {			return next().charAt(0);		} 		public Long nextLong() throws IOException {			return Long.parseLong(next());		} 		public int[] nextArrInt(int n) throws IOException {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		public long[] nextArrLong(int n) throws IOException {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		public boolean ready() throws IOException {			return br.ready();		} 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}	}}
