import java.util.*;import java.io.*;public class EdA {	static long[] mods = {1000000007, 998244353, 1000000009};	static long mod = mods[0];	public static MyScanner sc;    public static PrintWriter out;    static Map<State, ArrayList<State>> graph;    static Map<Integer, ArrayList<Integer>> outgraph;    static int[][] dp;    static Set<Integer> currDFS;	public static void main(String[] omkar) throws Exception{		// TODO Auto-generated method stub 		sc = new MyScanner(); 		out = new PrintWriter(System.out); 		int n = sc.nextInt(); 		int m = sc.nextInt(); 		graph = new HashMap<State, ArrayList<State>>(); 		outgraph = new HashMap<Integer, ArrayList<Integer>>(); 		for(int j= 1;j<=n;j++){ 			graph.put(new State(j, 0),  new ArrayList<State>()); 			graph.put(new State(j, 1),  new ArrayList<State>()); 			outgraph.put(j,  new ArrayList<Integer>()); 		} 		for(int j =1;j<=n;j++){ 			int num = sc.nextInt(); 			for(int k = 0;k<num;k++){ 				int adj = sc.nextInt(); 				graph.get(new State(j, 0)).add(new State(adj, 1)); 				graph.get(new State(j, 1)).add(new State(adj, 0)); 				outgraph.get(j).add(adj); 			} 		} 		Map<State, State> parents = new HashMap<State, State>(); 		int s = sc.nextInt(); 		ArrayDeque<State> bfs = new ArrayDeque<State>(); 		bfs.add(new State(s, 1)); 		Set<State> seen = new HashSet<State>(); 		seen.add(new State(s, 1)); 		while(!bfs.isEmpty()){ 			State v = bfs.remove(); 			for(State child : graph.get(v)){ 				if (!seen.contains(child)){ 					parents.put(child,  v); 					bfs.add(child); 					seen.add(child); 				} 			} 		} 		boolean found = false; 		int j; 		for(j =1;j<=n;j++){ 			if (seen.contains(new State(j, 0)) && graph.get(new State(j, 0)).size() == 0){ 				found = true; 				break; 			} 		} 		if (found){ 			out.println("Win"); 			State temp = new State(j, 0); 			ArrayList<Integer> ans = new ArrayList<Integer>(); 			while(parents.containsKey(temp)){ 				ans.add(temp.v); 				temp = parents.get(temp); 			} 			ans.add(s); 			Collections.reverse(ans); 			for(int k : ans) 				out.print(k + " "); 			out.println(); 		} 		else{ 			currDFS = new HashSet<Integer>(); 			out.println(isCycle(s, -1) ? "Draw" : "Lose"); 		} 		 		out.println(); 			 		 		out.close();	 	}	public static boolean isCycle(int v, int p){		currDFS.add(v);		for(int j : outgraph.get(v)){			if (currDFS.contains(j))				return true;			if (isCycle(j, v))				return true;		}		currDFS.remove(v);		return false;	}	static class State{		private int v;		private int parity;		public State(int v, int parity){			this.v = v;			this.parity = parity;		}		@Override		public boolean equals(Object other){			return this.hashCode() == other.hashCode();		}		@Override		public int hashCode(){			return parity*100001+v;		}			}	public static void sort(int[] array){		ArrayList<Integer> copy = new ArrayList<Integer>();		for (int i : array)			copy.add(i);		Collections.sort(copy);		for(int i = 0;i<array.length;i++)			array[i] = copy.get(i);	}	static String[] readArrayString(int n){		String[] array = new String[n];		for(int j =0 ;j<n;j++)			array[j] = sc.next();		return array;	}	static int[] readArrayInt(int n){    	int[] array = new int[n];    	for(int j = 0;j<n;j++)    		array[j] = sc.nextInt();    	return array;    }	static int[] readArrayInt1(int n){		int[] array = new int[n+1];		for(int j = 1;j<=n;j++){			array[j] = sc.nextInt();		}		return array;	}	static long[] readArrayLong(int n){		long[] array = new long[n];		for(int j =0 ;j<n;j++)			array[j] = sc.nextLong();		return array;	}	static double[] readArrayDouble(int n){		double[] array = new double[n];		for(int j =0 ;j<n;j++)			array[j] = sc.nextDouble();		return array;	}	static int minIndex(int[] array){		int minValue = Integer.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static int minIndex(long[] array){		long minValue = Long.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static int minIndex(double[] array){		double minValue = Double.MAX_VALUE;		int minIndex = -1;		for(int j = 0;j<array.length;j++){			if (array[j] < minValue){				minValue = array[j];				minIndex = j;			}		}		return minIndex;	}	static long power(long x, long y){		if (y == 0)			return 1;		if (y%2 == 1)			return (x*power(x, y-1))%mod;		return power((x*x)%mod, y/2)%mod;	}    public static class MyScanner {        BufferedReader br;        StringTokenizer st;        public MyScanner() {            br = new BufferedReader(new InputStreamReader(System.in));        }        String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                }                 catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt() {            return Integer.parseInt(next());        }        long nextLong() {            return Long.parseLong(next());        }        double nextDouble() {            return Double.parseDouble(next());        }        String nextLine() {            String str = "";            try{                str = br.readLine();            }             catch (IOException e) {                e.printStackTrace();            }            return str;        }            }	}Â //StringJoiner sj = new StringJoiner(" "); //sj.add(strings)//sj.toString() gives string of those stuff w spaces or whatever that sequence is
