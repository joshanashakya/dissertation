import java.io.*;import java.math.BigInteger;import java.util.*; public class Main { 	public static class FastReader {		BufferedReader br;		StringTokenizer root;		 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (root == null || !root.hasMoreTokens()) {				try {					root = new StringTokenizer(br.readLine());				} catch (Exception addd) {					addd.printStackTrace();				}			}			return root.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception addd) {				addd.printStackTrace();			}			return str;		}	}		public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));		public static FastReader sc = new FastReader(); 	static int mod = (int) (1e9+7),MAX=(int) (3e5);    static List<Integer>[] edges;    static int n,m;    static boolean cycle;    static boolean[] vis;    static int[] viscnt;    static List<Integer> path;    	public static void main(String[] args) {		n = sc.nextInt();		m = sc.nextInt();		edges = new ArrayList[n+1];		vis = new boolean[n+1];		viscnt = new int[n+1];		for(int i=0;i<=n;++i) edges[i] = new ArrayList<>();		for(int i=1;i<=n;++i) {			int c = sc.nextInt();			for(int j=1;j<=c;++j) {				int v = sc.nextInt();				edges[i].add(v);			}		}		int chip = sc.nextInt();		cycle = false;		path = new ArrayList<>();		dfs(chip,0);		if(cycle) out.print("Draw");		else out.print("Lose");	     		out.close();   } 	private static void dfs(int v, int len) {		vis[v] = true;		viscnt[v]++;		path.add(v);				if(edges[v].size() == 0 && len%2 == 1) {			out.println("Win");			for(int x : path) out.print(x+" ");			out.close();			System.exit(0);		}				for(int node : edges[v]) {			if(vis[node]) cycle = true;			if(viscnt[node] < 2) dfs(node,len+1);		}		vis[v] = false;		path.remove(path.size()-1);	}	 }
