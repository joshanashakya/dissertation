import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;import java.util.*; public class CF576A {    public static void main(String[] args) {        FastReader input = new FastReader();        PrintWriter pw = new PrintWriter(System.out);         boolean[] prime = new boolean[1000+1];        Arrays.fill(prime,true);         prime[0] = false;        prime[1] = false;         for(int i = 2;i <= 1000;i++){            if(prime[i]){                for(int j = i * i;j <= 1000;j += i){                    prime[j] = false;                }            }        }         int x = input.nextInt();         ArrayList<Integer> list = new ArrayList<>();        for(int i = 2;i <= x;i++){            if(prime[i]){                for(int j = i;j <= x;j *= i){                    if(j <= x){                        list.add(j);                    }                }            }        }         System.out.println(list.size());        for(int i : list)            System.out.print(i + " ");            // ****If sorting is required, use ArrayList        // *** If string concatenation is required, use StringBuffer        // ** check for overflow        // ** Check for case with min value        // ** check for case with max value         pw.flush();        pw.close();    }     static void sort(int[] arr){        ArrayList<Integer> list = new ArrayList<Integer>();        for(int i : arr)            list.add(i);        Collections.sort(list);        for(int i = 0;i < list.size();i++){            arr[i] = list.get(i);        }        return;    }     static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
