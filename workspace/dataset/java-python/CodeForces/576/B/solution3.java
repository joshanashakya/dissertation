import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int[] p = new int[n];             for (int i = 0; i < n; ++i)                p[i] = in.nextInt() - 1;             for (int i = 0; i < n; ++i) {                if (p[i] == i) {                    out.println("YES");                    for (int j = 0; j < n; ++j)                        if (j != i)                            out.println((i + 1) + " " + (j + 1));                    return;                }            }             boolean[] used = new boolean[n];            int[] from = new int[n - 1], to = new int[n - 1];            int top = 0;             boolean noSolution = true;             outer:            for (int i = 0; i < n; ++i) {                if (p[p[i]] == i) {                    noSolution = false;                    int j = p[i];                    used[i] = used[j] = true;                     from[0] = i;                    to[0] = j;                    top++;                     for (int k = 0; k < n; ++k) {                        if (!used[k]) {                            int cnt = 0;                            for (int l = k; !used[l]; l = p[l]) {                                used[l] = true;                                cnt++;                                from[top] = cnt % 2 == 0 ? i : j;                                to[top++] = l;                            }                            if (cnt % 2 == 1) {                                noSolution = true;                                break outer;                            }                        }                    }                    break;                }            }             if (noSolution) {                out.println("NO");            } else {                out.println("YES");                for (int i = 0; i < n - 1; ++i)                    out.println((from[i] + 1) + " " + (to[i] + 1));            }        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1)                throw new UnknownError();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new UnknownError();                }                if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int nextInt() {            return Integer.parseInt(next());        }         public String next() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuffer res = new StringBuffer();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));             return res.toString();        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }} 
