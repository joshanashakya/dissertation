import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Tarek */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BBornThisWay solver = new BBornThisWay();        solver.solve(1, in, out);        out.close();    }     static class BBornThisWay {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int m = in.nextInt();            long ta = in.nextLong();            long tb = in.nextLong();            int k = in.nextInt();            long a[] = new long[n];            long[] b = new long[m];            for (int i = 0; i < n; i++) {                a[i] = in.nextLong();            }            for (int i = 0; i < m; i++) {                b[i] = in.nextLong();            }            if (k >= n) {                out.println("-1");                return;            }            int c = 0;            int res = -1;            for (int i = 0; i <= k; i++) {                long when = a[i] + ta;                while (c < b.length && b[c] < when) c++;                int fin = c + k - i;                if (fin >= b.length) {                    out.println("-1");                    return;                }                res = Math.max((int) (b[fin] + tb), res);            }            out.println(res);        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public long nextLong() {            return Long.parseLong(next());        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
