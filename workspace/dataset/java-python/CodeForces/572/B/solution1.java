import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.InputStreamReader;import java.util.Stack;import java.util.AbstractMap;import java.util.Vector;import java.util.TreeMap;import java.util.StringTokenizer;import java.util.Map;import java.util.Map.Entry;import java.io.BufferedReader;import java.util.Collections;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        GOrderBook solver = new GOrderBook();        solver.solve(1, in, out);        out.close();    }     static class GOrderBook {        int n;        int s;        TreeMap<Integer, Integer> buy;        TreeMap<Integer, Integer> sell;         public void readInput(Scanner sc) {            n = sc.nextInt();            s = sc.nextInt();            buy = new TreeMap<>(Collections.reverseOrder());            sell = new TreeMap<>();            for (int i = 0; i < n; i++) {                char c = sc.next().charAt(0);                int x = sc.nextInt();                int y = sc.nextInt();                if (c == 'B') {                    buy.put(x, buy.getOrDefault(x, 0) + y);                } else {                    sell.put(x, sell.getOrDefault(x, 0) + y);                }            }        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            readInput(sc);            Stack<String> st = new Stack<>();            for (int i = 0; i < s && !sell.isEmpty(); i++) {                Map.Entry<Integer, Integer> entry = sell.pollFirstEntry();                st.add("S " + entry.getKey() + " " + entry.getValue());            }            while (!st.isEmpty())                pw.println(st.pop());            for (int i = 0; i < s && !buy.isEmpty(); i++) {                Map.Entry<Integer, Integer> entry = buy.pollFirstEntry();                pw.println("B " + entry.getKey() + " " + entry.getValue());            }        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }}   		 				 				   					 			 				
