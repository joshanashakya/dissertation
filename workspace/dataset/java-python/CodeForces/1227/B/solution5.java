//I AM THE CREED/* //I AM THE CREED/* package codechef; // don't place package name! */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*;import java.awt.Point;public class Main{    static long mod=1000000007;    public static void main(String[] args) throws IOException     {         Scanner input=new Scanner(System.in);        input.nextInt();        while(input.hasNext()){            int n=input.nextInt();            int[] prefix=new int[n];            int ptr=1;            for(int i=0;i<n;i++){                prefix[i]=input.nextInt();            }            StringBuilder sol=new StringBuilder();            HashSet<Integer> added=new HashSet<>();            boolean possible=true;            for(int i=0;i<n;i++){                if(i==0){                    sol.append(prefix[i]+" ");                    added.add(prefix[i]);                    continue;                }                if(prefix[i]>prefix[i-1]){                    sol.append(prefix[i]+" ");                    added.add(prefix[i]);                    continue;                }                if(prefix[i]==prefix[i-1] && prefix[i]==1){                    possible=false;                    continue;                }                while(ptr<=n && added.contains(ptr)){                    ptr++;                }                if(ptr>n || ptr>prefix[i]){                    possible=false;                    continue;                }                sol.append(ptr+" ");                added.add(ptr);            }            if(possible==false || added.size()<n){                System.out.println(-1);            }            else{                System.out.println(sol.toString());            }        }            }    static long pow(long a, long b){        if(b==1){            return a%mod;        }        return (pow(a, b-1)*a)%mod;    }    static long dfs(ArrayList<ArrayList<Integer>> g, HashSet<Integer> v, int n, HashMap<String, Integer> col){        if(v.contains(n)){            return (long)(0);        }        long tot=1;        v.add(n);        for(int children:g.get(n)){            if(col.get(Integer.toString(n)+","+Integer.toString(children))==1){                continue;            }            tot+=dfs(g, v, children, col);        }        return tot;    }    //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate    static void ruffle_sort(long[] a) {		// shandom_ruffle		Random r=new Random();		int n=a.length;		for (int i=0; i<n; i++) {			int oi=r.nextInt(i);			long temp=a[i];			a[i]=a[oi];			a[oi]=temp;		} 		// sort		Arrays.sort(a);	}    //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate.    static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}		long nextLong() {			return Long.parseLong(next());		}	}        }
