import java.io.*;import java.util.StringTokenizer; public class Main {    public static void main(String[] args) throws IOException {        InputReader inputReader = new InputReader(System.in);        PrintWriter outputWriter = new PrintWriter(System.out);        Task task = new Task();        task.solve(1, inputReader, outputWriter);        outputWriter.close();    }     public static class DSU {        private int n;        private int[] d;        private int Numroot;         public DSU(final int _n) {            n = _n;            Numroot = n;            d = new int[n];            for (int i = 0; i < n; ++i) {                d[i] = i;            }        }         public int Find(int u) {            if (u == d[u]) return d[u];            return d[u] = Find(d[u]);        }         public boolean Merge(int u, int v) {            u = Find(u);            v = Find(v);            if (u == v) return false;            d[u] = v;            Numroot--;            return true;        }         public int CountRoot() {            return Numroot;        }    }     public static class Task {        private DSU dsu;         public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int[] dx = new int[1000];            int[] dy = new int[1000];            for (int i = 0; i < 1000; ++i) {                dx[i] = dy[i] = -1;            }            dsu = new DSU(n);            for (int i = 0; i < n; ++i) {                int x = in.nextInt() - 1;                int y = in.nextInt() - 1;                if (dx[x] == -1) dx[x] = i;                else dsu.Merge(dx[x], i);                if (dy[y] == -1) dy[y] = i;                else dsu.Merge(dy[y], i);            }            out.print(dsu.CountRoot() - 1);        }    }     public static class InputReader {        public BufferedReader bufferReader;        public StringTokenizer token;         public InputReader(InputStream stream) {            bufferReader = new BufferedReader(new InputStreamReader(stream), 1 << 15);            token = null;        }         public String next() {            while (token == null || !token.hasMoreTokens()) {                try {                    token = new StringTokenizer(bufferReader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return token.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }    }}
