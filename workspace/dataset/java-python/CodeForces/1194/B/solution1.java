import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class Zad1194B { 	public static void main(String[] args) {		// TODO Auto-generated method stub		FastReader sc = new FastReader();		PrintWriter out = new PrintWriter(System.out);				int q = sc.nextInt();		while(q-->0) {			 int n = sc.nextInt();			 int m = sc.nextInt();			 			 char ch[][] = new char[n][m];			 for(int i = 0;i<n;i++) {				 String s = sc.nextLine();				 ch[i] = s.toCharArray();			 }			 int line[] = new int[n];			 for(int i = 0;i<n;i++) {				 int currLine = 0;				 for(int j = 0;j<m;j++) {					 if(ch[i][j]=='*') {						 currLine++;					 }				 }				line[i] = currLine;			 }			 int column[] = new int[m];			 for(int i = 0;i<m;i++) {				 int currColumn = 0;				 for(int j = 0;j<n;j++) {					 if(ch[j][i]=='*') {						 currColumn++;					 }				 }				column[i] = currColumn;			 }			 int answer = Integer.MAX_VALUE;			 for(int i = 0;i<n;i++) {				 for(int j = 0;j<m;j++) {					int tempAnswer = m + n - column[j]-line[i];					if(ch[i][j]=='.') {						 tempAnswer--;					}					answer = Math.min(answer, tempAnswer);				 }			 }			 out.println(answer);		}		out.close();	}	static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	} }
