from typing import List, Set, Dictdef map2home(n: int, m: int, map_in: List[List[str]], turns: int) -> List[list]:	def validate(i, j): 		return True if  0 <= i < n and 0 <= j < m and map_in[i][j] != -1 else False  	def check(i, j, count): 		if end == (i, j):  			return 1 if count <= turns else -1			else:			return 0  	# mapping	for i in range(n):		for j in range(m): 			if map_in[i][j] == "*":				map_in[i][j] = -1			elif map_in[i][j] == ".":				map_in[i][j] = turns + 1			elif map_in[i][j] == "S":				map_in[i][j] = -1				start = i, j			elif map_in[i][j] == "T":				map_in[i][j] = turns + 1				end = i, j 	#  each element in stack: i, j, dir, and #_of_turns	stack = [(*start, ["left_rt", "up_down"], -1)]  	while stack:		temp = [] 		for curr_i, curr_j, direction, count in stack:  			if count == 1:				if curr_i == end[0] and direction == "left_rt":					if curr_j < end[1]:						right = curr_j + 1						while validate(curr_i, right):   							if check(curr_i, right, count) == 1:								return "YES"							elif check(curr_i, right, count) == -1:								return "NO" 							right += 1    					else:						left = curr_j - 1						while validate(curr_i, left):  							if check(curr_i, left, count) == 1:								return "YES"							elif check(curr_i, left, count) == -1:								return "NO"							left -= 1  				elif curr_j == end[1] and direction == "up_down":					if curr_i < end[0]:						down = curr_i + 1						while validate(down, curr_j):  							if check(down, curr_j, count) == 1:								return "YES"							elif check(down, curr_j, count) == -1:								return "NO"							down += 1 					else:						up = curr_i - 1						while validate(up, curr_j):  							if check(up, curr_j, count) == 1:								return "YES"							elif check(up, curr_j, count) == -1:								return "NO"							up -= 1  			else:				if "up_down" in direction: 					# up					up = curr_i - 1					while validate(up, curr_j): 						map_in[up][curr_j] = count + 1 if count + 1 < map_in[up][curr_j] else map_in[up][curr_j]						temp += [(up, curr_j, "left_rt", count + 1)] 						if check(up, curr_j, count ) == 1:							return "YES"						elif check(up, curr_j, count) == -1:							return "NO"						up -= 1 					# down					down = curr_i + 1					while validate(down, curr_j): 						map_in[down][curr_j] = count + 1 if count + 1 < map_in[down][curr_j] else map_in[down][curr_j]						temp += [(down, curr_j, "left_rt", count + 1)] 						if check(down, curr_j, count) == 1:							return "YES"						elif check(down, curr_j, count) == -1:							return "NO"						down += 1  				if "left_rt" in direction: 					# left 					left = curr_j - 1					while validate(curr_i, left): 						map_in[curr_i][left] = count + 1 if count + 1 < map_in[curr_i][left] else map_in[curr_i][left]						temp += [(curr_i, left, "up_down", count + 1)] 						if check(curr_i, left, count) == 1:							return "YES"						elif check(curr_i, left, count) == -1:							return "NO"						left -= 1  		  					# right 					right = curr_j + 1					while validate(curr_i, right):  						map_in[curr_i][right] = count + 1 if count + 1 < map_in[curr_i][right] else map_in[curr_i][right]						temp += [(curr_i, right, "up_down", count + 1)] 						if check(curr_i, right, count + 1) == 1:							return "YES"						elif check(curr_i, right, count + 1) == -1:							return "NO" 						right += 1    		stack = temp 	return "NO"  if __name__ == "__main__":	n, m = map(int, input().split())	map_ = [list(input()) for _ in range(n)]	result = map2home(n, m, map_, turns=2)	print(result)
