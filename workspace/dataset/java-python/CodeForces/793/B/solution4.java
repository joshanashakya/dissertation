import java.util.*;import java.io.*;public class Main implements Runnable{    FastScanner sc;    PrintWriter pw;    final class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            try {                br = new BufferedReader(new InputStreamReader(System.in));                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }        }         public long nlo() {            return Long.parseLong(next());        }         public String next() {            if (st.hasMoreTokens()) return st.nextToken();            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(next());        }         public String nli() {            String line = "";            if (st.hasMoreTokens()) line = st.nextToken();            else try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            while (st.hasMoreTokens()) line += " " + st.nextToken();            return line;        }         public double nd() {            return Double.parseDouble(next());        }    }    public static void main(String[] args)    {        new Thread(null,new Main(),"codeforces",1<<26).start();    }    public void run()    {        sc=new FastScanner();        pw=new PrintWriter(System.out);       solve();        pw.flush();        pw.close();    }    public long gcd(long a,long b)    {        return b==0L?a:gcd(b,a%b);    }    public long ppow(long a,long b,long mod)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            a%=mod;            tmp%=mod;            b>>=1;        }        return (tmp*a)%mod;    }    public  int gcd(int x,int y)    {        return y==0?x:gcd(y,x%y);    }    //////////////////////////////////    /////////////  LOGIC  ///////////    ////////////////////////////////        public void solve()    {        int n=sc.ni();        int m=sc.ni();        char[][] arr=new char[n][];        for(int i=0;i<n;i++)        arr[i]=sc.next().toCharArray();        int[][] brr=new int[n][m];        for(int i=0;i<n;i++)        Arrays.fill(brr[i],-1);        for(int i=0;i<n;i++)        for(int j=0;j<m;j++)        if(arr[i][j]=='*')        brr[i][j]=-2;        for(int i=0;i<n;i++)        {            for(int j=0;j<m;j++)            if(arr[i][j]=='S'||arr[i][j]=='T')            dop(arr,i,j,brr);        }        int res=-1;        for(int i=0;i<n;i++)        {            int x=-2;            for(int j=0;j<m;j++)            {                if(brr[i][j]==-2)                x=-2;                else if(brr[i][j]==-1)                continue;                else if(brr[i][j]==0)                {                    if(x==1)                    res=0;                    else                    x=0;                }                else                {                    if(x==0)                    res=0;                    else                    x=1;                }            }        }        for(int j=0;j<m;j++)        {            int x=-2;            for(int i=0;i<n;i++)            {                if(brr[i][j]==-2)                x=-2;                else if(brr[i][j]==-1)                continue;                else if(brr[i][j]==0)                {                    if(x==1)                    res=0;                    else                    x=0;                }                else                {                    if(x==0)                    res=0;                    else                    x=1;                }            }        }        if(res==0)        pw.println("YES");        else        pw.println("NO");    }    public void dop(char[][] arr,int x,int y,int[][] brr)    {        int n=arr.length;        int m=arr[0].length;        int p=0;        if(arr[x][y]=='T')        p=1;        brr[x][y]=p;        int k=x-1;        while(k>=0&&arr[k][y]=='.')        {brr[k][y]=p;        k--;}                k=x+1;        while(k<n&&arr[k][y]=='.')        {brr[k][y]=p;        k++;}                k=y-1;        while(k>=0&&arr[x][k]=='.')        {brr[x][k]=p;        k--;}        k=y+1;        while(k<m&&arr[x][k]=='.')        {brr[x][k]=p;        k++;}    }}
