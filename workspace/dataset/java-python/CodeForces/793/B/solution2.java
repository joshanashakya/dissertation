import java.io.*;import java.util.*; public class F {    //Solution by Sathvik Kuthuru    public static void main(String[] args) {        FastReader scan = new FastReader();        PrintWriter out = new PrintWriter(System.out);        Task solver = new Task();        int t = 1;        for(int tt = 1; tt <= t; tt++) solver.solve(tt, scan, out);        out.close();    }     static class Task {        int n, m;        char[][] s;        int sy, sx, ey, ex;        int[] dy = {-1, 0, 1, 0}, dx = {0, 1, 0, -1};         public void solve(int testNumber, FastReader scan, PrintWriter out) {            n = scan.nextInt();            m = scan.nextInt();            s = new char[n][m];            int[][][] dist = new int[n][m][4];            for(int i = 0; i < n; i++) {                s[i] = scan.next().toCharArray();                for(int j = 0; j < m; j++) {                    Arrays.fill(dist[i][j], 100);                    if(s[i][j] == 'S') {                        sy = i;                        sx = j;                    }                    else if(s[i][j] == 'T') {                        ey = i;                        ex = j;                    }                }            }            boolean[][][] visited = new boolean[n][m][4];            PriorityQueue<Edge> queue = new PriorityQueue<>();            for(int i = 0; i < 4; i++) {                dist[sy][sx][i] = 0;                queue.add(new Edge(sy, sx, i, 0));            }            while(!queue.isEmpty()) {                Edge curr = queue.poll();                if(visited[curr.y][curr.x][curr.dir]) continue;                visited[curr.y][curr.x][curr.dir] = true;                //out.println(curr.y + " " + curr.x + " " + " " + curr.dir + " " +    curr.weight);                for(int i = 0; i < 2; i++) {                    int nextDir = (curr.dir + i) % 4;                    if(curr.weight + 1 < dist[curr.y][curr.x][nextDir]) {                        dist[curr.y][curr.x][nextDir] = curr.weight + 1;                        queue.add(new Edge(curr.y, curr.x, nextDir, curr.weight + 1));                    }                }                for(int i = 0; i < 2; i++) {                    int nextDir = (curr.dir - i + 4) % 4;                    if(curr.weight + 1 < dist[curr.y][curr.x][nextDir]) {                        dist[curr.y][curr.x][nextDir] = curr.weight + 1;                        queue.add(new Edge(curr.y, curr.x, nextDir, curr.weight + 1));                    }                }                int nextY = curr.y + dy[curr.dir], nextX = curr.x + dx[curr.dir];                if(nextX >= 0 && nextY >= 0 && nextY < n && nextX < m && s[nextY][nextX] != '*') {                    if(curr.weight < dist[nextY][nextX][curr.dir]) {                        dist[nextY][nextX][curr.dir] = curr.weight;                        queue.add(new Edge(nextY, nextX, curr.dir, curr.weight));                    }                }            }            int res = Integer.MAX_VALUE;            for(int i = 0; i < 4; i++) res = Math.min(res, dist[ey][ex][i]);            if(res <= 2) out.println("YES");            else out.println("NO");            //out.println(res);        }          static class Edge implements Comparable<Edge> {            int y, x, dir, weight;             public Edge(int a, int b, int c, int d) {                y = a;                x = b;                dir = c;                weight = d;            }             @Override            public int compareTo(Edge edge) {                return Integer.compare(weight, edge.weight);            }        }    }     static void shuffle(int[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            int temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }     static void shuffle(long[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            long temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }     static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         public FastReader(String s) throws FileNotFoundException {            br = new BufferedReader(new FileReader(new File(s)));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    } }
