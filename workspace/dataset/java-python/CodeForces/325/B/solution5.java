import java.math.BigDecimal;import java.math.BigInteger;import java.math.MathContext;import java.math.RoundingMode;import java.util.Scanner; public class Main {	public static BigInteger two = new BigInteger("2");	public static BigInteger four = new BigInteger("4");	public static BigInteger eight = new BigInteger("8");	public static BigDecimal sqrt(BigDecimal number) {		BigDecimal _2 = BigDecimal.valueOf(2.0);		int precision = 100;		MathContext mc = new MathContext(precision, RoundingMode.HALF_UP);		BigDecimal x = number;		int cnt = 0;		while (cnt < 100) {			x = x.add(number.divide(x, mc)).divide(_2, mc);			++cnt;		}		return x;	}	public static void main(String[] args) {		BigInteger n;		Scanner sc = new Scanner(System.in);		n = sc.nextBigInteger();		sc.close(); 		BigInteger last = new BigInteger("-1");				boolean flag = false;				BigInteger p2 = BigInteger.ONE;		BigInteger m, delta, fz;		for (int i = 0; i < 64; ++i) {			m = p2.subtract(BigInteger.ONE);			delta = m.multiply(m).multiply(four).subtract(m.multiply(four)).add(BigInteger.ONE).add(n.multiply(eight));			if (delta.compareTo(BigInteger.ZERO) >= 0) {				BigDecimal dd = new BigDecimal(delta);				BigDecimal sdd = sqrt(dd);				if (sdd.toBigInteger().pow(2).compareTo(delta) == 0) {					fz = BigInteger.ZERO.subtract(m.add(m).subtract(BigInteger.ONE)).add(sdd.toBigInteger());					if (fz.mod(two).compareTo(BigInteger.ZERO) == 0 && fz.divide(two).mod(two).compareTo(BigInteger.ZERO) != 0) {						flag = true;						BigInteger ans = fz.divide(two).multiply(p2);						if (ans.compareTo(last) > 0) {							System.out.println(ans.toString());							last = ans;						}					}				}			}			p2 = p2.multiply(two);		}		if (!flag)			System.out.println("-1");	}}
