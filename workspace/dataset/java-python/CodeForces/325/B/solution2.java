import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.math.BigInteger;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            long n = in.nextLong();            ArrayList<BigInteger> ans = new ArrayList<>();            BigInteger c = BigInteger.valueOf(-2).multiply(BigInteger.valueOf(n));            BigInteger two = BigInteger.valueOf(2);            loop:            for (int i = 0; i < 70; i++) {                BigInteger off = BigInteger.ONE.shiftLeft(i).subtract(BigInteger.ONE);                BigInteger b = two.multiply(off).subtract(BigInteger.ONE);                BigInteger d2 = b.multiply(b).subtract(BigInteger.valueOf(4).multiply(c));                BigInteger d = sqrt(d2);                BigInteger x = d.subtract(b).divide(two);                if (x.mod(two).longValue() == 1) {                    if (x.multiply(off).add(x.multiply(x.subtract(BigInteger.ONE)).divide(two))                            .equals(BigInteger.valueOf(n))) {                        ans.add(x.multiply(BigInteger.ONE.shiftLeft(i)));                    }                }            }            if (ans.isEmpty()) {                out.println(-1);            } else {                for (BigInteger cur : ans) {                    out.println(cur);                }            }        }         BigInteger sqrt(BigInteger a) {            BigInteger two = BigInteger.valueOf(2);            BigInteger left = BigInteger.ONE;            BigInteger right = a;            while (right.subtract(left).compareTo(BigInteger.ONE) == 1) {                BigInteger mid = right.add(left).divide(two);                if (mid.multiply(mid).compareTo(a) <= 0) {                    left = mid;                } else {                    right = mid;                }            }            return left;        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public long nextLong() {            return Long.parseLong(next());        }     }} 
