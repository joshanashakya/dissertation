import java.io.OutputStreamWriter;import java.io.BufferedWriter;import java.util.Comparator;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Random;import java.io.Writer;import java.util.HashSet;import java.util.List;import java.io.IOException;import java.util.Arrays;import java.util.InputMismatchException;import java.util.ArrayList;import java.util.NoSuchElementException;import java.math.BigInteger;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * @author Alex */public class Main {	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		OutputWriter out = new OutputWriter(outputStream);		TaskA solver = new TaskA();		solver.solve(1, in, out);		out.close();	}} class TaskA {    public void solve(int testNumber, InputReader in, OutputWriter out){	    int n = in.ri();	    int[] x1 = new int[n], y1 = new int[n], x2 = new int[n], y2 = new int[n];	    IOUtils.readIntArrays(in, x1, y1, x2, y2);	    int minx = ArrayUtils.minElement(x1), maxx = ArrayUtils.maxElement(x2);	    int miny = ArrayUtils.minElement(y1), maxy = ArrayUtils.maxElement(y2);	    int totalarea = 0;	    for(int i = 0; i < n; i++) totalarea += (x2[i] - x1[i]) * (y2[i] - y1[i]);	    int xdist = maxx - minx, ydist = maxy - miny;	    if (xdist != ydist || (totalarea) != (xdist*ydist)) out.printLine("NO");	    else out.printLine("YES");    }} class InputReader {	private InputStream stream;	private byte[] buf = new byte[1024];	private int curChar;	private int numChars;	private SpaceCharFilter filter; 	public InputReader(InputStream stream) {		this.stream = stream;	} 	public int read() {		if (numChars == -1)			throw new InputMismatchException();		if (curChar >= numChars) {			curChar = 0;			try {				numChars = stream.read(buf);			} catch (IOException e) {				throw new InputMismatchException();			}			if (numChars <= 0)				return -1;		}		return buf[curChar++];	}	public int ri(){		return readInt();	} 	public int readInt() {		int c = read();		while (isSpaceChar(c))			c = read();		int sgn = 1;		if (c == '-') {			sgn = -1;			c = read();		}		int res = 0;		do {			if (c < '0' || c > '9')				throw new InputMismatchException();			res *= 10;			res += c - '0';			c = read();		} while (!isSpaceChar(c));		return res * sgn;	}	public boolean isSpaceChar(int c) {		if (filter != null)			return filter.isSpaceChar(c);		return isWhitespace(c);	} 	public static boolean isWhitespace(int c) {		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	}	public interface SpaceCharFilter {		public boolean isSpaceChar(int ch);	}} class OutputWriter {	private final PrintWriter writer; 	public OutputWriter(OutputStream outputStream) {		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));	}	public void print(Object...objects) {		for (int i = 0; i < objects.length; i++) {			if (i != 0)				writer.print(' ');			writer.print(objects[i]);		}	}	public void printLine(Object...objects) {		print(objects);		writer.println();	}	public void close() {		writer.close();	}} class IOUtils {	public static void readIntArrays(InputReader in, int[]... arrays) {		for (int i = 0; i < arrays[0].length; i++) {			for (int j = 0; j < arrays.length; j++)				arrays[j][i] = in.readInt();		}	}} class ArrayUtils {	public static int maxElement(int[] array) {		return maxElement(array, 0, array.length);	} 	public static int maxElement(int[] array, int from, int to) {		int result = Integer.MIN_VALUE;		for (int i = from; i < to; i++)			result = Math.max(result, array[i]);		return result;	}	public static int minPosition(int[] array) {		return minPosition(array, 0, array.length);	}	public static int minPosition(int[] array, int from, int to) {        if (from >= to)            return -1;        int min = array[from];        int result = from;        for (int i = from + 1; i < to; i++) {            if (array[i] < min) {                min = array[i];                result = i;            }        }        return result;    }	public static int minElement(int[] array) {		return array[minPosition(array)];	}} 
