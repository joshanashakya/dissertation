import java.util.*;  import java.io.*;    public class Main {		public static void main(String[] args) throws IOException 	{ 						BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));		StringTokenizer s = new StringTokenizer(br.readLine());		int n=Integer.parseInt(s.nextToken());		int k=Integer.parseInt(s.nextToken());				s = new StringTokenizer(br.readLine());		int ar[]=new int[n];		int freq[]=new int[n+1];		int last[]=new int[n+1];		int next[]=new int[n+1];		for(int i=0;i<ar.length;i++) {			ar[i]=Integer.parseInt(s.nextToken());			freq[ar[i]]++;					}		Arrays.fill(last, 82);		int count=0;		for(int i=1;i<=n;i++) {			if(freq[i]>0)				count++;		}		if(count<=k) {			pw.println(count);			pw.close();		}		for(int i=n-1;i>=0;i--) {			next[i]=last[ar[i]];			last[ar[i]]=i;		}//		for(int i=0;i<n;i++) {//			pw.println(next[i]);//		}		Set<Integer>hm=new HashSet<>();		int ans=0;				PriorityQueue<Pair>pq=new PriorityQueue<>((a,b)-> b.j-a.j);		for(int i=0;i<ar.length;i++) {			if(pq.size()<k) {				if(!hm.contains(ar[i])) {					hm.add(ar[i]);					ans++;					pq.add(new Pair(ar[i],next[i]));				}	else {					pq.remove(new Pair(ar[i],i));					pq.add(new Pair(ar[i],next[i]));				}							}else {				if(!hm.contains(ar[i])) {					ans++;					int val=pq.poll().i;					hm.remove(val);					pq.add(new Pair(ar[i],next[i]));					hm.add(ar[i]);				}else {					pq.remove(new Pair(ar[i],i));					pq.add(new Pair(ar[i],next[i]));				}			}		}		pw.println(ans);				pw.close();			}	}class Pair{	int i;	int j;	Pair(int i,int j){		this.i=i;		this.j=j;	}	 @Override	  public boolean equals(Object o){	    if(o instanceof Pair){	      Pair c = (Pair)o;	      return i == c.i && j == c.j;	    }	    return false;	  }}
