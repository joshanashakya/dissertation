import java.io.*;import java.util.*; public class A implements Runnable {	public static void main (String[] args) {new Thread(null, new A(), "_cf", 1 << 28).start();}		public void run() {		FastScanner fs = new FastScanner();		PrintWriter out = new PrintWriter(System.out);		System.err.println("Go!"); 		int a = fs.nextInt();		String str = fs.next();		int last = 0;		ArrayList<Summand> list = new ArrayList<>();		for(int i = 0; i < str.length(); i++) {			String sub = str.substring(i, i + 3);			boolean added = false;			if(sub.equals("++a")) {				list.add(new Summand(str.substring(last, i + 3), last, i + 3));				added = true;			}			else if(sub.equals("a++")) {				list.add(new Summand(str.substring(last, i + 3), last, i + 3));				added = true;			}			if(added) {				last = i + 4;				i += 3;			}		}		boolean[] used = new boolean[str.length()];		for(int i = 0; i < list.size(); i++) {			int li = list.get(i).L, ri = list.get(i).R;			for(int j = li; j < ri; j++) used[j] = true;		}		for(int i = 0, num = 0; i < str.length(); i++) if(!used[i]) {			int mult = str.charAt(i) == '-' ? -1 : 1;			list.get(num+1).co *= mult;			num++;		}		Collections.sort(list);		int res = 0;		for(int i = 0; i < list.size(); i++) {			Summand now = list.get(i);			if(now.type == 1) now.fVal = now.co * (++a);			else now.fVal = now.co * a++;			res += now.fVal;		}		System.out.println(res);		out.close();	}		class Summand implements Comparable<Summand>{		int co, type; //0 = a++ | 1 = ++a		int L, R, fVal;		Summand(String s, int i, int j) {			L = i; R = j;			if(s.contains("*")) {				String[] split = s.split("[*]");				co = Integer.parseInt(split[0]);				if(split[1].contains("a++")) {					type = 0;				}				else {					type = 1;				}			}			else {				co = 1;				if(s.contains("a++")) type = 0;				else type = 1;			}		}		public String toString() {			return String.format("%d * a Type = %d", co, type);		}		public int compareTo(Summand s) {			if(s.co == co) {				int myVal = co + (type * co);				int hisVal = s.co + (s.type * s.co);				return Integer.compare(myVal, hisVal);			}			else {				return Integer.compare(co, s.co);			}		}	}		class FastScanner {		public int BS = 1<<16;		public char NC = (char)0;		byte[] buf = new byte[BS];		int bId = 0, size = 0;		char c = NC;		double num = 1;		BufferedInputStream in; 		public FastScanner() {			in = new BufferedInputStream(System.in, BS);		} 		public FastScanner(String s) throws FileNotFoundException {			in = new BufferedInputStream(new FileInputStream(new File(s)), BS);		} 		public char nextChar(){			while(bId==size) {				try {					size = in.read(buf);				}catch(Exception e) {					return NC;				}                				if(size==-1)return NC;				bId=0;			}			return (char)buf[bId++];		} 		public int nextInt() {			return (int)nextLong();		} 		public long nextLong() {			num=1;			boolean neg = false;			if(c==NC)c=nextChar();			for(;(c<'0' || c>'9'); c = nextChar()) {				if(c=='-')neg=true;			}			long res = 0;			for(; c>='0' && c <='9'; c=nextChar()) {				res = (res<<3)+(res<<1)+c-'0';				num*=10;			}			return neg?-res:res;		} 		public double nextDouble() {			double cur = nextLong();			return c!='.' ? cur:cur+nextLong()/num;		} 		public String next() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c>32) {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public String nextLine() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c!='\n') {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public boolean hasNext() {			if(c>32)return true;			while(true) {				c=nextChar();				if(c==NC)return false;				else if(c>32)return true;			}		}				public int[] nextIntArray(int n) {			int[] res = new int[n];			for(int i = 0; i < n; i++) res[i] = nextInt();			return res;		}			} 	}
