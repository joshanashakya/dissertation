import re class Term:  def __init__(self, factor, type):    self.factor = factor    self.type = type  def __str__(self):    return '(%d * %s)' % (self.factor, self.type) a = int(input())s = '+' + input().strip()terms = []pos = 0while pos != len(s):  sign = 1  if s[pos] == '-':    sign = -1  factor = 1  if re.match('\d', s[pos + 1]):    start = pos + 1    pos = start + 1    while s[pos] != '*':      pos += 1    factor = int(s[start:pos])  pos += 4  term_type = 'pre'  if s[pos - 3: pos] == 'a++':    term_type = 'post'  terms.append(Term(sign * factor, term_type)) terms.sort(key = lambda term: term.factor)#print(', '.join(map(str, terms)))result = 0for term in terms:  if term.type == 'pre':    a += 1  result += term.factor * a  if term.type == 'post':    a += 1 print(result)
