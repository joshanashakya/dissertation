import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main{	static ArrayList<ArrayList<Integer>> g =new ArrayList<>() ;	static long dp[][] =new long[(int)1e5][2] ,v[] =new long[(int)1e5] ; 	public static void main(String[] args) {		new Thread(null, new Runnable() {			public void run() {                solve();            }        }, "1", 1 << 26).start();	}	static void solve () {		FastReader fr =new FastReader();	PrintWriter op =new PrintWriter(System.out);  		int n =fr.nextInt() ,i ,j ,k ;  		for (i =0 ; i<n ; ++i)	g.add (new ArrayList<>()) ;  		for (i =1 ; i<n ; ++i) { 			j =fr.nextInt()-1 ;	k =fr.nextInt()-1 ; 			g.get(j).add(k) ;	g.get(k).add(j) ; 		}  		for (i =0 ; i<n ; ++i)	v[i] =fr.nextLong() ;  		dfs (0,-1) ;	dp[0][0] += dp[0][1] ;  		op.println(dp[0][0]) ;	op.flush();	op.close();	}	static void dfs (int n , int p) {		int i ,j ;	long a =0 ,b =0 ; 		for (i =0 ; i<g.get(n).size() ; ++i) {			j =g.get(n).get(i) ;	if (j==p)	continue; 			dfs (j,n) ; 			a =Math.max(a,dp[j][0]) ;	b =Math.max(b,dp[j][1]) ;		} 		v[n] += (a-b) ; 		if (v[n]<0)	dp[n][0] =-v[n] ;		else 	dp[n][1] =v[n] ; 		dp[n][0] += a ;	dp[n][1] += b ;	}	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br =new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st==null || (!st.hasMoreElements())) 			{				try				{					st =new StringTokenizer(br.readLine());				}				catch(IOException e)				{					e.printStackTrace();				}							}			return st.nextToken();		} 		String nextLine() {			String str =""; 			try			{				str =br.readLine();			}			catch(IOException e)			{				e.printStackTrace();			} 			return str;		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next()) ;		}	}}
