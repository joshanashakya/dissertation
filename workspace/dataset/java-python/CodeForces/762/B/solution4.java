//package main; import java.io.*;import java.util.*;import java.math.*; public final class Main {    BufferedReader br;    StringTokenizer stk;        public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        long mod = 998244353;    StringBuilder res = new StringBuilder(1000005);    void run() throws Exception {        int u = ni(), p = ni(), up = ni();        PriorityQueue<Device> queue = new PriorityQueue<>();        int n = ni();        for(int i = 0; i < n; i++) {            long cost = nl();            String T = nt();            int type = 0;            if(T.charAt(0) == 'U') {                type = 1;            } else {                type = 2;            }            queue.add(new Device(cost, type));        }        long total = 0, count = 0;        while(!queue.isEmpty()) {            Device dev = queue.remove();            if(dev.type == 1) {                if(u > 0) {                    u--;                    count++;                    total += dev.cost;                } else if(up > 0) {                    up--;                    count++;                    total += dev.cost;                }            } else {                if(p > 0) {                    p--;                    count++;                    total += dev.cost;                } else if(up > 0) {                    up--;                    count++;                    total += dev.cost;                }            }        }                System.out.println(count + " " + total);    }        class Device implements Comparable<Device> {        long cost, type;        public Device(long cost, long type) {            this.cost = cost;            this.type = type;        }        @Override        public int compareTo(Device dev) {            return Long.compare(cost, dev.cost);        }    }        //Reader & Writer    String nt() throws Exception {        if (stk == null || !stk.hasMoreTokens())            stk = new StringTokenizer(br.readLine(), " ");        return stk.nextToken();    }     char[] nc() throws Exception {        return nt().toCharArray();    }     int ni() throws Exception {        return Integer.parseInt(nt());    }     long nl() throws Exception {        return Long.parseLong(nt());    }        double nd() throws Exception {        return Double.parseDouble(nt());    }        //Some Misc methods    long get(int l, int r, long[] a) {        return l == 0 ? a[r] : a[r] - a[l - 1];    }        void shuffle(long[] a) {        Random r = new Random();        for(int i = 0; i < a.length; i++) {            int idx = r.nextInt(a.length);            long temp = a[i];            a[i] = a[idx];            a[idx] = temp;        }    }        void reverse(long[] a) {        for(int i = 0, j = a.length - 1; i < j; i++, j--) {            long temp = a[i];            a[i] = a[j];            a[j] = temp;        }    }        void print(int[] a) {        System.out.println(Arrays.toString(a));    }}
