//package algorithm.div623; import java.util.Scanner; /** * Created with: IntelliJ IDEA * Function: * User: zhangzhe041@ke.com * Date: 2020-03-04 22:05:34 */public class DoubleElimination {     int max = 2 << 17 + 100;    int[] fans;    int[][][][] dp;    int n ;    public DoubleElimination(){        Scanner in = new Scanner(System.in);        String[] str = in.nextLine().split(" ");        n = Integer.parseInt(str[0]);        int k = Integer.parseInt(str[1]);        fans = new int[(1 << n) + 1];        for(int i = 0; i < k; i++){            int x = in.nextInt();            fans[x - 1] = 1;        }        init1();        for(int i = 1; i <= n; i++){            for(int j = 0; j < (1 << n); j += (1 << i)){                if(i == 1){                    for(int m = 0; m < 2; m++){                        for(int l = 0; l < 2; l++){                            if((m + l) == (fans[j] + fans[j + 1])){                                dp[i][j][m][l] = ((fans[j] + fans[j + 1]) > 0) ? 1 : 0;                            }                        }                    }                }else{                    for(int x1 = 0; x1 < 2; x1++){                        for(int y1 = 0; y1 < 2; y1++){                            for(int x2 = 0; x2 < 2; x2++){                                for(int y2 = 0; y2 < 2; y2++){                                    int cost = dp[i - 1][j][x1][y1] + dp[i - 1][j + (1 <<( i - 1))][x2][y2];                                    if(x1 + x2 > 0) cost++;                                    if(y1 + y2 > 0) cost++;                                    dp[i][j][x1][x2] = Math.max(dp[i][j][x1][x2], cost + (x2 + y1 > 0 ? 1 : 0));                                    dp[i][j][x1][x2] = Math.max(dp[i][j][x1][x2], cost + (x2 + y2 > 0 ? 1 : 0));                                     dp[i][j][x1][y1] = Math.max(dp[i][j][x1][y1], cost + (x2 + y1 > 0 ? 1 : 0));                                    dp[i][j][x1][y2] = Math.max(dp[i][j][x1][y2], cost + (x2 + y2 > 0 ? 1 : 0));                                     dp[i][j][x2][x1] = Math.max(dp[i][j][x2][x1], cost + (x1 + y1 > 0 ? 1 : 0));                                    dp[i][j][x2][x1] = Math.max(dp[i][j][x2][x1], cost + (x1 + y2 > 0 ? 1 : 0));                                     dp[i][j][x2][y1] = Math.max(dp[i][j][x2][y1], cost + (x1 + y1 > 0 ? 1 : 0));                                    dp[i][j][x2][y2] = Math.max(dp[i][j][x2][y2], cost + (x1 + y2 > 0 ? 1 : 0));                                }                            }                        }                    }                }             }        }        int ans = 0;        for(int i = 0; i < 2; i++){            for(int j = 0; j < 2; j++){                int cost = dp[n][0][i][j];                if(i + j > 0) cost++;                ans = Math.max(ans, cost);            }        }        System.out.println(ans);    }    public void init1(){        dp = new int[n + 1][1 << n][2][2];        for(int i = 1 ; i <= n; i++){            for(int j = 0; j < (1 << n); j++){                for(int m = 0; m < 2; m++){                    for(int n = 0; n < 2; n++){                        dp[i][j][m][n] = -1000;                    }                }            }        }    }     public static void main(String[] args) {        new DoubleElimination();    }}
