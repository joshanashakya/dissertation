//package main; import java.io.*;import java.util.*;import java.awt.Point;import java.math.BigInteger; public final class Main {    BufferedReader br;    StringTokenizer stk;     public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        void run() throws Exception {        long n = nl(), m = nl() << 3;        long[] a = new long[(int)n];        HashSet<Long> set = new HashSet<>();        for(int i=0; i<n; i++) {            a[i] = nl();            set.add(a[i]);        }                long low = 1, high = set.size();        while(high - low > 8) {            long K = (high + low) >> 1;            long k = (long)Math.ceil(Math.log(K)/Math.log(2));            long totalRequired = n * k;            if(totalRequired <= m) {                low = K;            } else {                high = K;            }        }                long distinct = -1;        for(long i=high; i>=low; i--) {            long k = (long)Math.ceil(Math.log(i)/Math.log(2));            long totalRequired = n * k;            if(totalRequired <= m) {                distinct = i; break;            }        }                long[] arr = convert(a);        for(int i=1; i<arr.length; i++) arr[i] += arr[i-1];        //pl(Arrays.toString(arr));        long fptr = 0, bptr = distinct - 1, min = Integer.MAX_VALUE;        while(bptr < arr.length) {            //pl(fptr + " " + bptr);            long N = n - getSum(arr, (int)fptr, (int)bptr);            min = Math.min(min, N);            fptr++; bptr++;        }                pl(min);    }        void shuffle(long[] a) {        Random r = new Random();        for(int i=0; i<a.length; i++) {            int idx = r.nextInt(a.length);            long temp = a[idx];            a[idx] = a[i];            a[i] = temp;        }    }        long getSum(long[] a, int l, int r) {        return l == 0 ? a[r] : a[r] - a[l - 1];    }        long[] convert(long[] a) {        shuffle(a);        Arrays.sort(a);        Stack<Pair> stack = new Stack<>();        stack.push(new Pair(a[0], 1));        for(int i=1; i<a.length; i++) {            if(stack.peek().a == a[i]) {                stack.peek().b++;            } else {                stack.push(new Pair(a[i], 1));            }        }        long[] ret = new long[stack.size()];        while(!stack.isEmpty()) ret[stack.size() - 1] = stack.pop().b;        return ret;    }        class Pair {        long a, b;        public Pair(long a, long b) {            this.a = a;            this.b = b;        }    }        //Reader & Writer    String nextToken() throws Exception {        if (stk == null || !stk.hasMoreTokens()) {            stk = new StringTokenizer(br.readLine(), " ");        }        return stk.nextToken();    }     String nt() throws Exception {        return nextToken();    }     String ns() throws Exception {        return br.readLine();    }     int ni() throws Exception {        return Integer.parseInt(nextToken());    }     long nl() throws Exception {        return Long.parseLong(nextToken());    }     double nd() throws Exception {        return Double.parseDouble(nextToken());    }     void p(Object o) {        System.out.print(o);    }     void pl(Object o) {        System.out.println(o);    }}
