# ------------------- fast io --------------------import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192 class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------- fast io --------------------import mathn,i=map(int,input().split())vals=sorted(map(int,input().split()))bits=8*idist=[vals[0]];mult=[1]for s in range(1,n):    if vals[s]==dist[-1]:        mult[-1]+=1    else:        dist.append(vals[s]);mult.append(1)#we need to find our Kq=len(dist);k=1for s in range(q,0,-1):    num=math.ceil(math.log2(s))*n    if num<=bits:        k=s        break#now just check all the contigous segments of length k and we're donepref=[mult[0]]for s in range(1,q):    pref.append(pref[-1]+mult[s])suf=[mult[-1]]for s in range(q-2,-1,-1):    suf.append(suf[-1]+mult[s])nums=q-k;ans=10**9for s in range(nums+1):    left=s    right=nums-s    cv=0    if left>0:        cv+=pref[s-1]    if right>0:        cv+=suf[right-1]    ans=min(ans,cv)print(ans)
