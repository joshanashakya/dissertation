//JDopeimport java.util.*;import java.io.*;import java.math.*;public class A{public static void main(String[] omkar) throws Exception{   BufferedReader in = new BufferedReader(new InputStreamReader(System.in));   StringTokenizer st = new StringTokenizer(in.readLine());   StringBuilder sb = new StringBuilder();   int n = Integer.parseInt(st.nextToken());   int m = Integer.parseInt(st.nextToken());   int[] arr = readArr(n, in, st);   double maxK = Math.pow(2, (8*m)/n);   Map<Integer, Integer> map = new HashMap<Integer, Integer>();   for(int i = 0; i < n; i++)   {      if(!map.containsKey(arr[i]))      {         map.put(arr[i], 1);      }      else      {         map.put(arr[i], map.get(arr[i]) + 1);      }   }   Integer[] vals = map.keySet().toArray(new Integer[1]);   Arrays.sort(vals);   int[] vals2 = new int[vals.length];   for(int i = 0; i < vals.length; i++)   {      vals2[i] = map.get(vals[i]);   }   if(vals2.length <= maxK)   {      System.out.println("0");      return;   }   int maxk = (int)(maxK);   int[] sums = new int[vals2.length - maxk + 1];   for(int i = 0; i < maxk; i++)   {      sums[0] += vals2[i];   }   int max = sums[0];   for(int i = 1; i < sums.length; i++)   {      sums[i] = sums[i-1];      sums[i] -= vals2[i-1];      sums[i] += vals2[i-1+maxk];      max = Math.max(sums[i], max);   }   System.out.println((n-max));           } public static int[] readArr(int N, BufferedReader in, StringTokenizer st) throws Exception      {         int[] arr = new int[N];         st = new StringTokenizer(in.readLine());         for(int i=0; i < N; i++)            arr[i] = Integer.parseInt(st.nextToken());         return arr;      }static class Pair implements Comparable<Pair> {final int a;final int b;Pair(int a, int b) {this.a = a;this.b = b;}@Overridepublic int compareTo(Pair other) {if (a != other.a) {return (a - other.a);} else {return (b - other.b);}}}  }
