import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter; public class water {    public static void main(String[] args) {         InputStream inputStream = System.in;//        OutputStream outputStream = System.out;        FastInput input = new FastInput(inputStream);//        FastOutput out =new FastOutput(outputStream);        int n = input.scanInt();        int a[]=new int[n];        int b[]=new int [n];         for(int i=0;i<n;i++){            a[i]= input.scanInt();            b[i]=-1;        }        int q= input.scanInt();        int c[]=new int [q];            int y;            int z;            int x;            int poi=0;            for (int i = 0; i < q; i++) {                x = input.scanInt();                if (x == 1) {                    y = input.scanInt();                    z = input.scanInt();                    b[y-1]=poi;                    a[y-1]=z;                } else {                    y = input.scanInt();                    c[poi++]=y;                }            }            if(poi>1){                for(int i=poi-2;i>=0;i--){                    if(c[i]<c[i+1]){                        c[i]=c[i+1];                    }                }            }             for (int i = 0; i < n; i++) {                if(b[i]==-1&&c[0]>a[i])                    System.out.println(c[0] + " ");                else if(b[i]==-1){                    System.out.println(a[i] + " ");                }                else if(c[b[i]]>a[i])                    System.out.println(c[b[i]]+" ");                else                    System.out.println(a[i]+" ");            }     }    static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String next() {            return readString();        }         public int scanInt() {            int sign = 1;            skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }            int val = 0;            while (next >= '0' && next <= '9') {                val = val * 10 + next - '0';                next = read();            }            return (sign*val);        }         public String readString(StringBuilder builder) {            skipBlank();            while (next > 32) {                builder.append((char) next);                next = read();            }            return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }    static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(1 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(String c) {            cache.append(c);            return this;        }        public FastOutput append(int c) {            cache.append(c);            return this;        }        public FastOutput println(int c) {            return append(c).println();        }        public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {             this.flush();            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }  }  
