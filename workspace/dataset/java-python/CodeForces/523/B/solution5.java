import java.io.*;import java.util.InputMismatchException; public class Main {    private static class InputReader    {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private SpaceCharFilter filter;         public InputReader(InputStream stream)        {            this.stream = stream;        }         public int read()        {            if (numChars == -1)                throw new InputMismatchException();            if (curChar >= numChars)            {                curChar = 0;                try                {                    numChars = stream.read(buf);                } catch (IOException e)                {                    throw new InputMismatchException();                }                if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int readInt()        {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-')            {                sgn = -1;                c = read();            }            int res = 0;            do            {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public String readString()        {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do            {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }        public double readDouble() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E')                    return res * Math.pow(10, readInt());                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E')                        return res * Math.pow(10, readInt());                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }        public long readLong() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }        public boolean isSpaceChar(int c)        {            if (filter != null)                return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public String next()        {            return readString();        }         public interface SpaceCharFilter        {            public boolean isSpaceChar(int ch);        }    }     private static class OutputWriter    {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream)        {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer)        {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects)        {            for (int i = 0; i < objects.length; i++)            {                if (i != 0)                    writer.print(' ');                writer.print(objects[i]);            }        }         public void printLine(Object... objects)        {            print(objects);            writer.println();        }         public void close()        {            writer.close();        }         public void flush()        {            writer.flush();        }    }     public static void main(String[] args) {        InputReader sc = new InputReader(System.in);        OutputWriter out = new OutputWriter(System.out);         int n = sc.readInt();        int T = sc.readInt();        double c = sc.readDouble();         int[] a = new int[n+1];        double[] means = new double[n+1];        double[] realTops = new double[n+1];          means[0] = 0.0;        realTops[0] = 0.0;        for (int i = 1; i <= n; i++) {            a[i] = sc.readInt();            means[i] = (means[i-1] + (double)a[i]/T)/c;            realTops[i] = realTops[i-1] + a[i];        }         int m = sc.readInt();         int p;         double approx;        double error;         double real;        for (int j = 1; j <= m; j++) {            p = sc.readInt();            approx = means[p];            real = (realTops[p]-realTops[p-T])/T;            error = Math.abs(approx-real)/real;             out.printLine(String.format("%.6f %.6f %.6f", real, approx, error));        }        out.close();    }}
