# by the authority of GOD     author: manhar singh sachdev # import os,sysfrom io import BytesIO, IOBase def main():    n,m = map(int,input().split())    arr = [[i*m+j for j in range(1,m+1)] for i in range(n)]    if m >= 4:        print('YES')        for i in range(n):            k,k1 = [],[]            for j in range(0,m,2):                k.append(arr[i][j])            for j in range(1,m,2):                k1.append(arr[i][j])            if not i&1:                if m == 4:                    arr[i] = k[::-1]+k1[::-1]                else:                    arr[i] = k+k1            else:                arr[i] = k1+k        for i in arr:            print(*i)    elif n >= 4:        print('YES')        for i in range(m):            k,k1 = [],[]            for j in range(0,n,2):                k.append(arr[j][i])            for j in range(1,n,2):                k1.append(arr[j][i])            if not i&1:                if n == 4:                    for ind,x in enumerate(k[::-1]+k1[::-1]):                        arr[ind][i] = x                else:                    for ind,x in enumerate(k+k1):                        arr[ind][i] = x            else:                for ind,x in enumerate(k1+k):                    arr[ind][i] = x        for i in arr:            print(*i)    elif n == 1 and m == 1:        print('YES')        print(1)    elif n == 3 and m == 3:        print('YES')        print(9,3,5)        print(2,7,1)        print(4,6,8)    else:        print('NO') #Fast IO RegionBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == '__main__':    main()
