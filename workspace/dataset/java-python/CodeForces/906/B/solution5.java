import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.stream.IntStream;import java.util.Arrays;import java.io.IOException;import java.util.stream.Collectors;import java.io.InputStreamReader;import java.util.Objects;import java.util.stream.Stream;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            int M = in.nextInt();             int[][] ans = new int[N][M];             for (int i = 0; i < N; i++) {                for (int j = 0; j < M; j++) {                    ans[i][j] = 1 + M * i + j;                }            }            boolean swap = false;             if (N > M) {                int tmp = N;                N = M;                M = tmp;                swap = true;                ans = rotate(ans);            }             if (N == 1 && M == 1) {                ans = new int[][]{{1}};            } else if (N == 1 && M == 4) {                ans = new int[][]{{3, 1, 4, 2}};            } else if (N == 1 && M >= 5) {                int cnt = 0;                for (int c = 0; c < M; c += 2) {                    ans[0][cnt++] = c + 1;                }                for (int c = 1; c < M; c += 2) {                    ans[0][cnt++] = c + 1;                }            } else if (N == 3 && M == 3) {                ans = new int[][]{{6, 1, 8}, {7, 5, 3}, {2, 9, 4}};            } else if (N >= 2 && M >= 4) {                 for (int r = 0; r < N; r += 2) {                    int[] cols = new int[M];                    for (int c = 0; c < M; c++) {                        cols[c] = ans[r][(c + 2) % M];                    }                    for (int c = 0; c < M; c++) {                        ans[r][c] = cols[c];                    }                }                 for (int c = 0; c < M; c += 2) {                    int[] rows = new int[N];                    for (int r = 0; r < N; r++) {                        rows[r] = ans[(r + 1) % N][c];                    }                    for (int r = 0; r < N; r++) {                        ans[r][c] = rows[r];                    }                }            } else {                out.println("NO");                return;            }             out.println("YES");             if (swap) {                ans = rotate(ans);                int tmp = N;                N = M;                M = tmp;            }             for (int r = 0; r < N; r++) {                out.println(Arrays.stream(ans[r]).mapToObj(Objects::toString).collect(Collectors.joining(" ")));            }        }         private int[][] rotate(int[][] arr) {            int R = arr.length;            int C = arr[0].length;            int[][] ans = new int[C][R];            for (int r = 0; r < R; r++) {                for (int c = 0; c < C; c++) {                    ans[c][r] = arr[r][c];                }            }            return ans;        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
