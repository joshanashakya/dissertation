import java.io.*;import java.util.*; public class B implements Runnable {     private static final boolean ONLINE_JUDGE = System.getProperty("ONLINE_JUDGE") != null;     private BufferedReader in;    private PrintWriter out;    private StringTokenizer tok = new StringTokenizer("");     private void init() throws FileNotFoundException {        Locale.setDefault(Locale.US);        String fileName = "";        if (ONLINE_JUDGE && fileName.isEmpty()) {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(System.out);        } else {            if (fileName.isEmpty()) {                in = new BufferedReader(new FileReader("input.txt"));                out = new PrintWriter("output.txt");            } else {                in = new BufferedReader(new FileReader(fileName + ".in"));                out = new PrintWriter(fileName + ".out");            }        }    }     String readString() {        while (!tok.hasMoreTokens()) {            try {                tok = new StringTokenizer(in.readLine());            } catch (Exception e) {                return null;            }        }        return tok.nextToken();    }     int readInt() {        return Integer.parseInt(readString());    }     long readLong() {        return Long.parseLong(readString());    }     double readDouble() {        return Double.parseDouble(readString());    }     int[] readIntArray(int size) {        int[] a = new int[size];        for (int i = 0; i < size; i++) {            a[i] = readInt();        }        return a;    }     public static void main(String[] args) {        //new Thread(null, new A(), "", 128 * (1L << 20)).start();        new B().run();    }     long timeBegin, timeEnd;     void time() {        timeEnd = System.currentTimeMillis();        System.err.println("Time = " + (timeEnd - timeBegin));    }     @Override    public void run() {        try {            timeBegin = System.currentTimeMillis();            init();            solve();            out.close();            time();        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     private int aiverson(boolean good) {        return good ? 1 : 0;    }     final static String SPACE = " ";    final static String DOTS = "...";     private void solve() throws IOException {        String str = in.readLine();        str = str.replaceAll("[.]{3}", "a");        while (str.contains("  ")) {            str = str.replace("  ", " ");        }        while (str.contains(" ,")) {            str = str.replace(" ,", ",");        }        while (str.contains("a ")) {            str = str.replace("a ", "a");        }          char[] s = str.toCharArray();        StringBuilder answer = new StringBuilder();        int n = s.length;         for (int i = 0; i < n; i++) {            if (s[i] == ',') {                answer.append(s[i]).append(SPACE);                continue;            }            if (s[i] == 'a') {                answer.append(SPACE).append(DOTS);                continue;            }            answer.append(s[i]);        }         String answerString = answer.toString().trim();        while (answerString.contains("  ")) {            answerString = answerString.replace("  ", " ");        }        out.println(answerString);    }}
