import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;import java.util.TreeSet;   public class Abood2B { 	static ArrayList<TreeSet<Integer>> ans; 	static void add(TreeSet<Integer> set) { 		for (int i = 0; i < ans.size(); i++) {			boolean cur = ans.get(i).size() == set.size();			if(cur)				for(Integer x : set)					if(!ans.get(i).contains(x)) {						cur = false;						break;					} 			if(cur)				return; 		} 		ans.add(set); 	}  	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out);  		StringBuilder sb = new StringBuilder();		int last = 2; 		String s = sc.nextLine();  		for (int i = 0; i < s.length(); i++) {			if(s.charAt(i) == ' ')				continue; 			 			if(i == s.length())				break; 			if(s.charAt(i) == '.') {				if(last != 2)					sb.append(" ");				sb.append("...");				last = 3;				i += 2;			} 			if(i == s.length())				break; 			if(s.charAt(i) == '0') {				if(last == 1){					sb.append(" ");				}				i++;				sb.append("0");				last = 1;				while(i < s.length() && s.charAt(i) <= '9' && s.charAt(i) >= '0')					i++; 				if(i == s.length())					break;			}						if(s.charAt(i) <= '9' && s.charAt(i) >= '0' && last == 1)				sb.append(" "); 			while(i < s.length() && s.charAt(i) <= '9' && s.charAt(i) >= '0'){				sb.append("" + s.charAt(i));				i++;				last = 1;			}			if(i == s.length())				break; 			if(s.charAt(i) == ','){				sb.append(", ");				last = 2;			} 		} 		out.println(sb.toString().trim());		out.flush();		out.close();	}    	static class Scanner    	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));} 		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {return Integer.parseInt(next());} 		public long nextLong() throws IOException {return Long.parseLong(next());} 		public String nextLine() throws IOException {return br.readLine();}  		public double nextDouble() throws IOException		{			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if(x.charAt(0) == '-')			{				neg = true;				start++;			}			for(int i = start; i < x.length(); i++)				if(x.charAt(i) == '.')				{					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				}				else				{					sb.append(x.charAt(i));					if(dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg?-1:1);		} 		public boolean ready() throws IOException {return br.ready();}   	} }
