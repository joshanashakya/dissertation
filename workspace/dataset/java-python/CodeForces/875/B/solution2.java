import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BSortingTheCoins solver = new BSortingTheCoins();            solver.solve(1, in, out);            out.close();        }    }     static class BSortingTheCoins {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int[] p = new int[n];            for (int i = 0; i < n; i++) {                p[i] = in.readInt() - 1;            }            DSU dsu = new DSU(n);            out.append(1).append(' ');            boolean[] covered = new boolean[n];            for (int i = 0; i < n; i++) {                covered[p[i]] = true;                if (p[i] - 1 >= 0 && covered[p[i] - 1]) {                    dsu.merge(p[i] - 1, p[i]);                }                if (p[i] + 1 < n && covered[p[i] + 1]) {                    dsu.merge(p[i] + 1, p[i]);                }                int oneCnt = i + 1;                if (covered[n - 1]) {                    oneCnt -= dsu.size[dsu.find(n - 1)];                }                out.append(oneCnt + 1).append(' ');            }        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 20];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class DSU {        protected int[] p;        protected int[] rank;        int[] size;         public DSU(int n) {            p = new int[n];            rank = new int[n];            size = new int[n];            reset();        }         public final void reset() {            for (int i = 0; i < p.length; i++) {                p[i] = i;                rank[i] = 0;                size[i] = 1;            }        }         public final int find(int a) {            if (p[a] == p[p[a]]) {                return p[a];            }            return p[a] = find(p[a]);        }         public final void merge(int a, int b) {            a = find(a);            b = find(b);            if (a == b) {                return;            }            if (rank[a] == rank[b]) {                rank[a]++;            }            if (rank[a] > rank[b]) {                p[b] = a;                size[a] += size[b];            } else {                p[a] = b;                size[b] += size[a];            }        }     }} 
