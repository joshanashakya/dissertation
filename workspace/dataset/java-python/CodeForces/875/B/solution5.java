import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author ijxjdjd */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        SortingTheCoins solver = new SortingTheCoins();        solver.solve(1, in, out);        out.close();    }     static class SortingTheCoins {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            boolean[] arr = new boolean[N];            out.println(1);            int last = N - 1;            for (int i = 1; i <= N; i++) {                arr[in.nextInt() - 1] = true;                while (last >= 0 && arr[last]) {                    last--;                }                out.println(i - (N - last - 1) + 1);            }        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
