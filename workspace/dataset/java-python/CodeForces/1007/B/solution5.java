import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.HashSet;import java.util.StringTokenizer;Â public class B2 {	public static void main(String[] args) throws Exception{		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));				int t = Integer.parseInt(br.readLine());		//StringTokenizer st = new StringTokenizer(br.readLine());		//bw.write(solve(n)+"\n");//adds 50 new each time		//long f =System.nanoTime();		ArrayList<HashSet<Integer>> factors = new ArrayList<HashSet<Integer>>();		for(int i=0;i<=100000;++i){			factors.add(new HashSet<Integer>());		}		for(int i=1;i<=100000;++i){			for(int j = i;j<=100000;j+=i){				factors.get(j).add(i);			}		}				/*		int max = 0;		for(int i=0;i<factors.length;++i){			max=Math.max(fcounts[i], max);		}		System.err.println(max);		*/		boolean[][] workies = new boolean[8][3];		for(int j=0;j<3;++j){			for(int i=0;i<8;++i){				workies[i][j]= (i>>j &1) == 1; 			}		}					while(t-->0){			StringTokenizer st = new StringTokenizer(br.readLine());			HashSet<Integer> aSet = factors.get(Integer.parseInt(st.nextToken()));			HashSet<Integer> bSet = factors.get(Integer.parseInt(st.nextToken()));			HashSet<Integer> cSet = factors.get(Integer.parseInt(st.nextToken()));									int ab = 0;			int bc = 0;			int ca = 0;			int abc= 0;			int aOn = 0;			int bOn = 0;			int cOn = 0;			for(int x : aSet){				if(bSet.contains(x)){					if(cSet.contains(x)){						++abc;					}					else{						++ab;					}				}				else{					if(cSet.contains(x)){						++ca;					}					else{						++aOn;					}				}			}			for(int x:bSet){				if(cSet.contains(x)){					++bc;				}				else{					++bOn;				}			}			bc -= abc;			bOn -= ab;			cOn = cSet.size()-ca-bc-abc;			int total=0;			int[] counts = {0,aOn,bOn,ab,cOn,ca,bc,abc};						for(int i=1;i<8;i++){				for(int j=i;j<8;++j){					for(int k=j;k<8;++k){						if(works(64*i+8*j+k)){													if(i==j||j==k){ 								if(i==k){									total+= counts[i]*counts[i] + (counts[i]*(counts[i]-1)*(counts[i]-2))/6;										 // 1 or 2                 3								}								else{									if(i==j){										total+=counts[k]*(counts[i]*(counts[i]+1))/2;									}									else{										total+=counts[i]*(counts[k]*(counts[k]+1))/2;									}								}							}							else{								total+= counts[i]*counts[j]*counts[k];							}						}											}				}			}						bw.write(total+"\n");		}		//long e = System.nanoTime();				bw.flush();				//System.err.println(e-f);	}	static boolean works(int a,int b,int c){		int[] test = {a,b,c};		boolean[][] v = new boolean[3][3];		for(int j=0;j<3;++j){			for(int i=0;i<3;++i){				v[i][j]= (test[i]>>j &1) == 1; 			}		}		return (v[0][0]&&( (v[1][1]&&v[2][2]) || (v[1][2]&&v[2][1])))|| (v[0][1] &&((v[1][0]&&v[2][2])||(v[1][2]&&v[2][0]))) || ( v[0][2] && ( (v[1][0]&&v[2][1])||(v[1][1] && v[2][0]) )   );			}	static boolean works(boolean[] a,boolean[] b,boolean[] c){		boolean[][] v = {a,b,c};		return (v[0][0]&&( (v[1][1]&&v[2][2]) || (v[1][2]&&v[2][1])))|| (v[0][1] &&((v[1][0]&&v[2][2])||(v[1][2]&&v[2][0]))) || ( v[0][2] && ( (v[1][0]&&v[2][1])||(v[1][1] && v[2][0]) )   );			}	static boolean works(int x){		return ((x &0124) ==0124)||				((x &0142) ==0142)||				((x &0214) ==0214)||				((x &0241) ==0241)||				((x &0412) ==0412)||				((x &0421) ==0421);									}}
