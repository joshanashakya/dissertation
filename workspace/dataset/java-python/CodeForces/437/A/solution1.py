def STR(): return list(input())def INT(): return int(input())def MAP(): return map(int, input().split())def MAP2():return map(float,input().split())def LIST(): return list(map(int, input().split()))def STRING(): return input()import stringimport sysfrom heapq import heappop , heappushfrom bisect import *from collections import deque , Counter , defaultdictfrom math import *from itertools import permutations , accumulatedx = [-1 , 1 , 0 , 0  ]dy = [0 , 0  , 1  , - 1]#visited = [[False for i in range(m)] for j in range(n)]#sys.stdin = open(r'input.txt' , 'r')#sys.stdout = open(r'output.txt' , 'w')#for tt in range(INT()): #Code def check1(l):    r = 0    m = []    for i in range(4):        c = 0        for j in range(4):            if (i != j):                if (l[j] >= 2 * l[i]):                    c +=1        if (c == 3):            r +=1            m.append(i)    if r == 1 :        return m    else:        return -1 def check2(l):    r = 0    m = []    for i in range(4):        c = 0        for j in range(4):            if (i != j):                if (2 * l[j] <= l[i]):                    c +=1        if (c == 3):            r +=1            m.append(i)     if r == 1:        return m    else:        return -1 v = []for i in range(4):    x = STRING()    x = x[2:]    v.append(len(x)) k1 = check1(v)k2 = check2(v)flag = ['A' , 'B' , 'C' , 'D'] if (k1 != -1 and k2 == -1  ):    print(flag[k1[0]]) elif (k1 ==-1 and k2 != -1 ):    print(flag[k2[0]]) else:    print('C') 
