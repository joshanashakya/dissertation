import java.io.*;import java.util.*;public class Asd {static PrintWriter w=new PrintWriter(System.out);static FastScanner s=new FastScanner(); 	public static void main(String[] args) {				//int t=s.nextInt();             int t=1;		while(t-->0)                {		    solve();		}	       w.close();        }        /* Function to print all the permutations of the string        static String swap(String str, int i, int j)        {        char ch;        char[] array = str.toCharArray();        ch = array[i];        array[i] = array[j];        array[j] = ch;        return String.valueOf(array);       }          static void permute(String str,int low,int high)    {        if(low == high)            list.add(Long.parseLong(str));         int i;        for(i = low; i<=high; i++){            str = swap(str,low,i);            permute(str, low+1,high);            str = swap(str,low,i);        }    }        use  permute(str2,0,str2.length()-1); to perform combinations        */           public static void solve()        {        String str1=s.next();        String str2=s.next();        String str3=s.next();        String str4=s.next();        int len1=str1.length()-2;        int len2=str2.length()-2;        int len3=str3.length()-2;        int len4=str4.length()-2;        ArrayList<Integer> list=new ArrayList<>();        int arr[]=new int[4];        arr[0]=len1; arr[01]=len2; arr[02]=len3; arr[3]=len4;         Arrays.sort(arr);         if(arr[0]<=arr[1]/2&&arr[1]<=arr[2]/2&&arr[2]<=arr[3]/2)         {     w.println("C");return;}         if(arr[0]<=arr[1]/2&&arr[0]<=arr[2]/2&&arr[0]<=arr[3]/2)             list.add(arr[0]);         if(arr[3]>=arr[0]*2&&arr[3]>=arr[2]*2&&arr[3]>=arr[1]*2)             list.add(arr[3]);         if(list.size()>=2)              {     w.println("C");return;}             int min=Math.min(len1,Math.min(len2,Math.min(len3,len4)));             int max=Math.max(len1,Math.max(len2,Math.max(len3,len4)));             int c1=0;             if(min<=len1/2)                 c1++;             if(min<=len2/2)                 c1++;             if(min<=len3/2)                 c1++;                 if(min<=len4/2)                 c1++;             if(c1==3)             {                                  if(min==len1){                 w.println("A");return;}                                  if(min==len2){                 w.println("B");return;}                                  if(min==len3){                 w.println("C");return;}                                  if(min==len4){                 w.println("D");return;}             }             c1=0;             if(max>=len1*2)                 c1++;             if(max>=len2*2)                 c1++;             if(max>=len3*2)                 c1++;                 if(max>=len4*2)                 c1++;             if(c1==3)             {                                  if(max==len1){                 w.println("A");return;}                                  if(max==len2){                 w.println("B");return;}                                  if(max==len3){                 w.println("C");return;}                                  if(max==len4){                 w.println("D");return;}             }             w.println("C");        }              static long gcd(long a, long b)    {      if (b == 0)        return a;      return gcd(b, a % b);     }        static int noofdivisors(int n)        {            //it counts no of divisors of every number upto number n                        int arr[]=new int[n+1];              for(int i=1;i<=(n);i++)			for(int j=i;j<=(n);j=j+i)				arr[j]++;             return arr[0];        }                                  static char[] reverse(char arr[])        {            char[] b = new char[arr.length];         int j = arr.length;         for (int i = 0; i < arr.length; i++) {             b[j - 1] = arr[i];             j = j - 1;         }        return b;        }                	static long factorial(int n)        {            long su=1;            for(int i=1;i<=n;i++)                su*=(long)i;            return su;        }	static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		public String next() {			while (!st.hasMoreElements())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}		int[] readArray(int n) {			int[] a=new int[n]; 			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}				int nextInt () {			return Integer.parseInt(next());		}                long nextLong () {			return Long.parseLong(next());		}                double nextDouble () {			return Double.parseDouble(next());		}	} }
