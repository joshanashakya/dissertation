def STR(): return list(input())def INT(): return int(input())def MAP(): return map(int, input().split())def MAP2():return map(float,input().split())def LIST(): return list(map(int, input().split()))def STRING(): return input()import stringimport sysfrom heapq import heappop , heappushfrom bisect import *from collections import deque , Counter , defaultdictfrom math import *from itertools import permutations , accumulatedx = [-1 , 1 , 0 , 0  ]dy = [0 , 0  , 1  , - 1]#visited = [[False for i in range(m)] for j in range(n)]#sys.stdin = open(r'input.txt' , 'r')#sys.stdout = open(r'output.txt' , 'w')#for tt in range(INT()):  #CODE def convert_to_Bin(num):    arr = []    while num > 0 :        arr.append(num % 2)        num//=2    d = ''    for i in range(len(arr)-1,-1,-1):        d+=str(arr[i])    return d def convert_to_d(num):    base = 1    res = 0    while num > 0 :        last_digit = num % 10        res += last_digit * base        base*=2        num//=10     return res  sm  , limit = MAP()arr = [] for i in range(1 , limit + 1):    if (i % 2 != 0 ):        arr.append((i , 1))     else:        k = bin(i).replace('0b' , '')        #k = convert_to_Bin(i)        index = 0        s = []        for j in range(len(k)-1,-1,-1):            s.append(k[j])            if k[j] == '1':                index = j                break         x = list(reversed(s))        y = ''.join(x)        z = convert_to_d(int(y))        arr.append((i , z))  arr.sort(key=lambda x : x[1] , reverse= True)cnt = 0res = 0ans = []for i in range(len(arr)):    if res + arr[i][1] <= sm:        cnt+=1        res += arr[i][1]        ans.append(arr[i][0]) #print(res)if res!= sm:    print(-1)else:    print(cnt)    print(*ans)    
