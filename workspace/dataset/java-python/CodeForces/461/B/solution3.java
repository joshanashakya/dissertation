import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static int mod = 1000000007;      int N;    List<Integer>[] adj;    long[][] dp;    int[] c;    void run(FastScanner in, PrintWriter out) {         N = in.nextInt();        adj = new List[N];        dp = new long[N][2];        c = new int[N];        for (int i = 0 ; i < adj.length; i++) adj[i] = new ArrayList<>();         for (int v = 1; v < N; v++) {            int u = in.nextInt();            adj[u].add(v);            adj[v].add(u);        }         for (int i = 0; i < N; i++) c[i] = in.nextInt();         go(0, -1);        out.println(dp[0][1]);    }     void go(int u, int p) {         // if (adj[u].size() == 1 && p != -1) {        //     dp[u][0] = 1;        //     if (c[u] == 1) dp[u][1] = 1;        //     return;        // }        dp[u][0] = 1;        dp[u][1] = 0;         long sum = 1;        long rec = 1;        long propBlackFromWhite = 0;        for (int v : adj[u]) {            if (v == p) continue;            go(v, u);             sum = (sum * dp[v][0])%mod;             propBlackFromWhite = (propBlackFromWhite*dp[v][0])%mod;            propBlackFromWhite = (propBlackFromWhite + (rec*dp[v][1])) % mod;            rec = (rec * dp[v][0])%mod;         }         //white        if (c[u] == 0) {            dp[u][0] = (sum + propBlackFromWhite) % mod;            dp[u][1] = propBlackFromWhite;        } else {            dp[u][0] = sum;            dp[u][1] = sum;        }    }       static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
