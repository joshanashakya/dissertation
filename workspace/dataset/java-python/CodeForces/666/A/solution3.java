import java.io.*;import java.util.*; public class main {public static void solucion(String strPalabra) {        List<String> ans = new ArrayList<>();        //System.out.println(strPalabra);         //2        String temp = "";        for (int i = strPalabra.length() - 1; (i) > 4; i = i - 2) {            if (i != 5) {                 //System.out.println("temp: " + temp);                //System.out.println(strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i));                if (temp.equals(strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i))) {                    temp = "";                    //.out.println("bbbbbbbbbbbbbbb");                    break;                } else {                    temp = strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i);                    //System.out.println("new temp: " + temp);                }                 if (!ans.contains(strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i))) {                    ans.add(strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i));                 }                //System.out.println(strPalabra.charAt(i-1)+""+strPalabra.charAt(i));            }            //System.out.println(strPalabra.length()-1-i);            //System.out.println(strPalabra.charAt(i));            if (temp == "") {                break;            }        }        temp = "";        int par = 0;        if (strPalabra.length() % 2 == 1) {            par = 6;        } else {            par = 5;        }        for (int i = par; i < strPalabra.length() - 3; i += 2) {             if (!ans.contains(strPalabra.charAt(i) + "" + strPalabra.charAt(i + 1))) {                ans.add(strPalabra.charAt(i) + "" + strPalabra.charAt(i + 1));            }            // System.out.println(strPalabra.charAt(i)+""+strPalabra.charAt(i+1));         }        //3        temp = "";        for (int i = strPalabra.length() - 1; (i) > 5; i = i - 3) {            if (i > 6) {                if (temp.equals(strPalabra.charAt(i - 2) + "" + strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i))) {                    temp = "";                    //.out.println("bbbbbbbbbbbbbbb");                    break;                } else {                    temp = strPalabra.charAt(i - 2) + "" + strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i);                    //System.out.println("new temp: " + temp);                }                if (!ans.contains(strPalabra.charAt(i - 2) + "" + strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i))) {                    ans.add(strPalabra.charAt(i - 2) + "" + strPalabra.charAt(i - 1) + "" + strPalabra.charAt(i));                }                //System.out.println(strPalabra.charAt(i-2)+""+strPalabra.charAt(i-1)+""+strPalabra.charAt(i));            }            //System.out.println(strPalabra.length()-1-i);            //System.out.println(strPalabra.charAt(i));            if (temp == "") {                break;            }        }        temp = "";        for (int i = 5; i < strPalabra.length() - 4; i += 1) {             if (!ans.contains(strPalabra.charAt(i) + "" + strPalabra.charAt(i + 1) + "" + strPalabra.charAt(i + 2))) {                ans.add(strPalabra.charAt(i) + "" + strPalabra.charAt(i + 1) + "" + strPalabra.charAt(i + 2));            }            //System.out.println(strPalabra.charAt(i)+""+strPalabra.charAt(i+1)+""+strPalabra.charAt(i+2));         }        //System.out.println("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh");        Collections.sort(ans);        System.out.println(ans.size());         for (String s : ans) {            System.out.println(s);        }    }     public static void main(String[] args) {         Scanner input = new Scanner(System.in);        /*         String strPalabra = input.nextLine();         if (strPalabra.length() < 6) {         System.out.println(0);         } else {         solucion(strPalabra);         }*/        char[] strPalabra = input.nextLine().toCharArray();         int length = strPalabra.length;         Set<String> collectionAnswe = new HashSet<>();        List<String> arrAnsw = new ArrayList<>();         String temp = "";        //Par        boolean[] par = new boolean[length + 1];        par[length - 2] = true;         //Triple        boolean[] triple = new boolean[length + 1];        triple[length - 3] = true;         for (int i = length - 4; i >= 0; i--) {            par[i] = triple[i + 2] || ((par[i + 2] && !boolBack(strPalabra, i, 2)));             triple[i] = par[i + 3] || ((triple[i + 3] && !boolBack(strPalabra, i, 3)));        }         for (int i = 5; i < length; i++) {            if (par[i]) {                String s = new String(strPalabra).substring(i, i + 2);                 if (!collectionAnswe.contains(s)) {                    collectionAnswe.add(s);                    arrAnsw.add(s);                }            }             if (triple[i]) {                String s = new String(strPalabra).substring(i, i + 3);                if (!collectionAnswe.contains(s)) {                    collectionAnswe.add(s);                    arrAnsw.add(s);                }             }        }         Collections.sort(arrAnsw);        System.out.println(arrAnsw.size());         for (String s : arrAnsw) {            System.out.println(s);        }     }     public static boolean boolFoward(char[] strInput, int charAt1, int charAt3, int charAt2, int charAt4) {        for (int i = charAt1; i < charAt3; i++) {            if (strInput[i] != strInput[charAt2 + (i - charAt1)]) {                return false;                //break;            }        }         return true;    }     public static boolean boolTriple(char[] strInput, int charAt1, int charAt3, int charAt2, int charAt4) {        for (int i = charAt1; i < charAt3 + 2; i += 2) {            if (strInput[i] != strInput[charAt2 + (i - charAt1)]) {                return false;                //break;            }        }         return true;    }     public static boolean boolBack(char[] strINput, int charAt1, int charAt2) {         for (int i = 0; i < charAt2; i++) {            if (strINput[charAt1 + i] != strINput[charAt1 + i + charAt2]) {                return false;            }        }         return true;    } }
