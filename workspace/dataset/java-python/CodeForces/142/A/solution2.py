import java.io.*;import java.util.*; import static java.lang.Math.*; public class Main {    FastScanner in;    PrintWriter out;     static final String FILE = "";     List<Long> vals = new ArrayList<>();    List<Integer> counts = new ArrayList<>();    List<Long> list = new ArrayList<>();     void gen(int v, long cur) {        if (v == vals.size()) {            list.add(cur);            return;        }         gen(v + 1, cur);        for (int i = 0; i < counts.get(v); i++) {            cur *= vals.get(v);            gen(v + 1, cur);        }    }     void work(long v) {        for (long i = 2; i <= sqrt(v); i++) {            if (v % i == 0) {                int cnt = 0;                while (v % i == 0) {                    cnt++;                    v /= i;                }                vals.add(i);                counts.add(cnt);            }        }         if (v != 1) {            vals.add(v);            counts.add(1);        }         gen(0, 1);    }     void solve() {        long n = in.nextInt();        work(n);         long mini = Long.MAX_VALUE, maxi = Long.MIN_VALUE;         for (Long a : list) {            for (Long b : list) {                if (n % (a * b) != 0)                    continue;                long c = n / a / b;                 mini = min(mini, (a + 2) * (b + 2) * (c + 1) - a * b * c);                mini = min(mini, (a + 2) * (b + 1) * (c + 2) - a * b * c);                mini = min(mini, (a + 1) * (b + 2) * (c + 2) - a * b * c);                 maxi = max(maxi, (a + 2) * (b + 2) * (c + 1) - a * b * c);                maxi = max(maxi, (a + 2) * (b + 1) * (c + 2) - a * b * c);                maxi = max(maxi, (a + 1) * (b + 2) * (c + 2) - a * b * c);            }        }         out.print(mini + " " + maxi);    }     public void run() {        if (FILE.equals("")) {            in = new FastScanner(System.in);            out = new PrintWriter(System.out);        } else {            try {                in = new FastScanner(new FileInputStream(FILE +                        ".in"));                out = new PrintWriter(new FileOutputStream(FILE +                        ".out"));            } catch (FileNotFoundException e) {                e.printStackTrace();            }        }        solve();        out.close();    }     public static void main(String[] args) {        (new Main()).run();    }     class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream is) {            br = new BufferedReader(new InputStreamReader(is));        }         public String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public String nextLine() {            st = null;            try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();                return null;            }        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public float nextFloat() {            return Float.parseFloat(next());        }    } }
