import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;  public class A { 		public static void main(String[] args) throws IOException{				Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out); 		int n = sc.nextInt();		long max = 0;		divisors = new ArrayList<>();		getDivisors(n);		long min = (long)1e15;		int s = divisors.size();		for(int i = 0; i < s; i++)			for(int j = i; j < s; j++)			{				int d1 = divisors.get(i), d2 = divisors.get(j);				if(1l * d1 * d2 > n)					break;								if( n/(d1*d2)!=n/(double)(d1*d2))					continue;								long res = 1l * (d1+2) * (d2+2) * (n / (d1*d2)+1);				max = Math.max(max, res);				min = Math.min(min, res);			}		min -= n;		max -= n;		out.println(min+" "+max);		out.flush();	} 	static ArrayList<Integer> divisors;		static void getDivisors(int n)	{		divisors = new ArrayList<>();		for(int i = 1; i <= (int)Math.sqrt(n); i++)			if(n % i == 0)			{				divisors.add(i);				divisors.add(n / i);			}	}		static class Scanner 	{		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream System){	br = new BufferedReader(new InputStreamReader(System));	}		public String next() throws IOException 		{			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine());			return st.nextToken();		}		public String nextLine()throws IOException{return br.readLine();}		public int nextInt() throws IOException {return Integer.parseInt(next());}		public double nextDouble() throws IOException {return Double.parseDouble(next());}		public char nextChar()throws IOException{return next().charAt(0);}		public Long nextLong()throws IOException{return Long.parseLong(next());}		public boolean ready() throws IOException{return br.ready();}		public void waitForInput(){for(long i = 0; i < 3e9; i++);}	}}
