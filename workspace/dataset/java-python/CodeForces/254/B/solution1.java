import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.time.LocalDate;import java.util.HashMap;import java.util.Map;import java.util.StringTokenizer;  public class Main { 	public static void main(String[] args) throws IOException { 		FastReader in = new FastReader(new File("input.txt"));		PrintWriter out = new PrintWriter(new File("output.txt"));		//		FastReader in = new FastReader();//		PrintWriter out = new PrintWriter(System.out);		int n = in.nextInt();				int[][] arr = new int[2][367];		while(n-->0) {			int m = in.nextInt();			int d = in.nextInt();			int p = in.nextInt();			int t = in.nextInt();						int dayOfYear = LocalDate.of(2013, m, d).getDayOfYear();						if(dayOfYear-t>0) {				arr[0][dayOfYear-t]+=p;				arr[0][dayOfYear]-=p;			}			else {				int prev = t-(dayOfYear-1);				arr[0][dayOfYear]-=p;				int st = LocalDate.ofYearDay(2012, 366-prev+1).getDayOfYear();				arr[1][st]+=p;			}		}				for(int i = 1;i<arr[1].length;i++) {			arr[1][i]+=arr[1][i-1];		}				arr[0][1]+=arr[1][366];		for(int i=2;i<arr[0].length;i++) {			arr[0][i]+=arr[0][i-1];		}				int mx = 0;		for(int i=0;i<arr.length;i++){			for(int j=1;j<arr[i].length;j++) {				//out.print(arr[i][j]+" ");				mx = Math.max(arr[i][j], mx);			}			//out.println();		}        out.println(mx); 		out.close();	}		static class FastReader {			        BufferedReader br;        StringTokenizer st;         public FastReader() {        	            br = new BufferedReader(new                    InputStreamReader(System.in));        }                public FastReader(File file) throws FileNotFoundException {        	        	br = new BufferedReader(        			new FileReader(file));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }	        	 } }
