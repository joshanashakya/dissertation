#!/usr/bin/env pythonimport osimport sysfrom io import BytesIO, IOBase#from bisect import bisect_left as bl                #c++ lowerbound bl(array,element)#from bisect import bisect_right as br               #c++ upperbound br(array,element) from itertools import groupbydef main():    # sys.stdin = open('input.txt', 'r')    # sys.stdout = open('output.txt', 'w')    n=int(input())    nums1=[int(x) for x in input()]    nums2=[int(x) for x in input()]    both1,both0,a0b1,a1b0=0,0,0,0    for x in range(len(nums1)):        if nums1[x]==nums2[x]==1:            both1+=1        elif nums1[x]==nums2[x]==0:            both0+=1        elif nums1[x]==0 and nums2[x]==1:            a0b1+=1        else:            a1b0+=1    for x in range(a0b1+1):        for y in range(a1b0+1):            a=(both1+a0b1-y-x)//2            b=n//2-x-y-a            if (both1+a0b1-y-x)%2==0 and a>=0 and a<=both1 and b>=0 and b<=both0:                ans=[]                for z in range(len(nums1)):                    if nums1[z]==0 and nums2[z]==1 and x>0:                        x-=1                        ans.append(z+1)                    if nums1[z]==1 and nums2[z]==0 and y>0:                        y-=1                        ans.append(z+1)                    if nums1[z]==1 and nums2[z]==1 and a>0:                        a-=1                        ans.append(z+1)                    if nums1[z]==0 and nums2[z]==0 and b>0:                        b-=1                        ans.append(z+1)                print(*ans)                 return                        print(-1)           #-----------------------------BOSS-------------------------------------!# region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # endregion if __name__ == "__main__":    main()
