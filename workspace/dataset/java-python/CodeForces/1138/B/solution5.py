import osimport sysfrom io import BytesIO, IOBasefrom collections import defaultdict, deque, Counter, OrderedDictimport threading def main():    n = int(input())    c = input()    a = input()    D = [0,0,0,0]    S = [[] for _ in range(4)]    A = []    for i in range(n):        if c[i] == '0' and a[i] == '0':D[0]+=1;A.append(0);S[3].append(i)        if c[i] == '1' and a[i] == '0':D[1]+=1;S[0].append(i);A.append(1)        if c[i] == '0' and a[i] == '1':D[2]+=1;S[1].append(i);A.append(2)        if c[i] == '1' and a[i] == '1':D[3]+=1;S[2].append(i);A.append(3)    for t in range(n//2+1):        ans = []        x, y = 0, D[2]+D[3]        for i in range(len(S[2])):            if x != t and len(ans) != n//2 and y > t:                ans.append(S[2][i]+1);x+=1; y-=1        for i in range(len(S[0])):            if x != t and len(ans) != n//2:                ans.append(S[0][i]+1);x+=1        for i in range(len(S[1])):            if y > t and len(ans) != n//2:                ans.append(S[1][i]+1); y-=1        if len(ans) != n//2 and len(S[3]) >= n//2 - len(ans):            for i in range(n//2-len(ans)):                ans.append(S[3][i]+1)        if x == t and y == t and len(ans) == n//2:            print(*sorted(ans));exit()    print(-1)   BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # endregion if __name__ == "__main__":    """threading.stack_size(40960000)    thread = threading.Thread(target=main)    thread.start()"""    main()
