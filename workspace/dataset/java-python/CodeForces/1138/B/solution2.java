import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            String s1=input.next();            String s2=input.next();            Stack<Integer> c=new Stack<>();            Stack<Integer> a=new Stack<>();            Stack<Integer> both=new Stack<>();            Stack<Integer> neither=new Stack<>();            for(int i=0;i<n;i++)            {                if(s1.charAt(i)=='1' && s2.charAt(i)=='0')                {                    c.push(i+1);                }                else if(s1.charAt(i)=='0' && s2.charAt(i)=='1')                {                    a.push(i+1);                }                else if(s1.charAt(i)=='1' && s2.charAt(i)=='1')                {                    both.push((i+1));                }                else                {                    neither.push((i+1));                }            }            int flag=0;            while(both.size()>0)            {                if(a.size()==c.size() && both.size()==1)                {                    flag=1;                    break;                }                else                {                    if(c.size()<=a.size())                    {                        int v=both.pop();                        c.push(v);                    }                    else                    {                        int v=both.pop();                        a.push(v);                    }                }            }            int d=Math.abs(a.size()-c.size());            if(d>neither.size())            {                out.println(-1);            }            else            {                if(flag==0)                {                    if(c.size()<a.size())                    {                        for(int i=0;i<d;i++)                        {                            int v=a.pop();                            c.push(v);                        }                    }                    else if(c.size()>a.size())                    {                        for(int i=0;i<d;i++)                        {                            int v=c.pop();                            a.push(v);                        }                    }                }                else                {                    ArrayList<Integer> clown=new ArrayList<>(c);                    int f=0;                    int index=0;                    for(int i=0;i<clown.size();i++)                    {                        int p=clown.get(i);                        if(s1.charAt(p-1)=='1' && s2.charAt(p-1)=='0')                        {                            index=p;                            f=1;                            break;                        }                    }                    if(f==1)                    {                        c=new Stack<>();                        for(int i=0;i<clown.size();i++)                        {                            int p=clown.get(i);                            if(p!=index)                            {                                c.push(p);                            }                        }                        a.push(index);                        c.push(both.pop());                    }                    else                    {                        ArrayList<Integer> acro=new ArrayList<>(a);                        for(int i=0;i<acro.size();i++)                        {                            int p=acro.get(i);                            if(s1.charAt(p-1)=='0' && s2.charAt(p-1)=='1')                            {                                index=p;                                f=1;                                break;                            }                        }                        if(f==1)                        {                            a=new Stack<>();                            for(int i=0;i<acro.size();i++)                            {                                int p=acro.get(i);                                if(p!=index)                                {                                    a.push(p);                                }                            }                            c.push(index);                            a.push(both.pop());                        }                        else                        {                            System.out.println(-1);                            return;                        }                    }                }                while(neither.size()>0)                {                    if(c.size()<=a.size())                    {                        int v=neither.pop();                        c.push(v);                    }                    else                    {                        int v=neither.pop();                        a.push(v);                    }                }                if(c.size()!=a.size())                {                    out.println(-1);                }                else                {                    while(c.size()>0)                    {                        out.print(c.pop()+" ");                    }                }            }        }        out.close();    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;        public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }        String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt()        {            return Integer.parseInt(next());        }        long nextLong()        {            return Long.parseLong(next());        }        double nextDouble()        {            return Double.parseDouble(next());        }        String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
