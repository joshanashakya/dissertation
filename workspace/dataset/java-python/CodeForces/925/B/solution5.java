import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        b925 solver = new b925();        solver.solve(1, in, out);        out.close();    }     static class b925 {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int x1 = in.nextInt();            int x2 = in.nextInt();            serv[] servs = new serv[n];            for (int i = 0; i < n; i++) {                servs[i] = new serv(in.nextInt(), i + 1);            }            Arrays.sort(servs, (serv f, serv s) -> f.pow - s.pow);            for (int i = 0; i < n; i++) {                for(int swap=0;swap<2;swap++) {                    double minPow1 = servs[i].pow;                    int k1 = (int) Math.ceil(x1 / minPow1);                    if (i + k1 < n) {                        double minPow2 = servs[i + k1].pow;                        if (minPow2 * (n - i - k1) >= x2) {                            int k2 = (int) Math.ceil(x2 / minPow2);                            out.println("Yes");                            if(swap==0) {                                out.println(k1 + " " + k2);                                for (int j = 0; j < k1; j++) {                                    out.print(servs[i + j].id + " ");                                }                                out.println();                                for (int j = 0; j < k2; j++) {                                    out.print(servs[i + k1 + j].id + " ");                                }                            }else{                                out.println(k2 + " " + k1);                                for (int j = 0; j < k2; j++) {                                    out.print(servs[i + k1 + j].id + " ");                                }                                out.println();                                for (int j = 0; j < k1; j++) {                                    out.print(servs[i + j].id + " ");                                }                            }                            return;                        }                    }                    int tmp = x1;                    x1 = x2;                    x2 = tmp;                }            }            out.println("No");        }         class serv {            int pow;            int id;             serv(int c, int n) {                pow = c;                id = n;            }         }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }}
