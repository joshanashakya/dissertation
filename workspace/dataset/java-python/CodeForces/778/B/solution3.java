import java.io.*;import java.util.Arrays;import java.util.HashMap;import java.util.Map;import java.util.StringTokenizer; import static java.lang.Integer.parseInt; /** * 778B * θ(n*m) time * O(n*m) space * * @author artyom */public class _778B implements Runnable {    private BufferedReader in;     private Object solve() throws IOException {        String[] s = nextToken();        int n = parseInt(s[0]), m = parseInt(s[1]);        Map<String, boolean[][]> map = new HashMap<>();        boolean[][] a = new boolean[2][m];        Arrays.fill(a[1], true);        map.put("?", a);        for (int i = 0; i < n; i++) {            String[] t = nextToken();            boolean[][] x = new boolean[2][m];            if (t.length == 3) {                for (int j = 0; j < m; j++) {                    x[0][j] = x[1][j] = t[2].charAt(j) == '1';                }            } else {                boolean[][] y = map.get(t[2]), z = map.get(t[4]);                switch (t[3]) {                    case "AND":                        for (int j = 0; j < m; j++) {                            x[0][j] = y[0][j] & z[0][j];                            x[1][j] = y[1][j] & z[1][j];                        }                        break;                    case "OR":                        for (int j = 0; j < m; j++) {                            x[0][j] = y[0][j] | z[0][j];                            x[1][j] = y[1][j] | z[1][j];                        }                        break;                    default:                        for (int j = 0; j < m; j++) {                            x[0][j] = y[0][j] ^ z[0][j];                            x[1][j] = y[1][j] ^ z[1][j];                        }                }            }            map.put(t[0], x);        }        map.remove("?");        StringBuilder min = new StringBuilder(), max = new StringBuilder();        for (int i = 0; i < m; i++) {            int k = 0, l = 0;            for (boolean[][] x : map.values()) {                if (x[0][i]) {                    k++;                }                if (x[1][i]) {                    l++;                }            }            if (k > l) {                min.append(1);                max.append(0);            } else if (l > k) {                min.append(0);                max.append(1);            } else {                min.append(0);                max.append(0);            }        }        return min + "\n" + max;    }     //--------------------------------------------------------------    public static void main(String[] args) {        new _778B().run();    }     @Override    public void run() {        try {            in = new BufferedReader(new InputStreamReader(System.in));            System.out.print(solve());            in.close();        } catch (IOException e) {            System.exit(0);        }    }     private String[] nextToken() throws IOException {        return in.readLine().split(" ");    }}
