import time #start_time = time.time()#def TIME_(): print(time.time()-start_time) import os, sysfrom io import BytesIO, IOBasefrom types import GeneratorTypefrom bisect import bisect_left, bisect_rightfrom collections import defaultdict as dd, deque as dq, Counter as dcimport math, string, heapq as hBUFSIZE = 8192 class FastIO(IOBase):    newlines = 0    def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0) class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii") sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") def getInt(): return int(input())def getStrs(): return input().split()def getInts(): return list(map(int,input().split()))def getStr(): return input()def listStr(): return list(input())def getMat(n): return [getInts() for _ in range(n)]def getBin(): return list(map(int,list(input())))def isInt(s): return '0' <= s[0] <= '9'def ceil_(a,b): return a//b + (a%b > 0) MOD = 10**9 + 7 """An increasing sequence such that every subsequent XOR op increases it further Capped at D Each successive element must have one or more bits set past the highest bit so far E.g. 1101Next number must be e.g. 10XXX If D <= 10**9, then the sequence has length at most 30 1 B = 12 B = 23 B = 31 2 B = 1 31 3 B = 1 2""" MAXN = 31C = [[0 for j in range(MAXN)] for i in range(MAXN)]for i in range(MAXN):    C[i][0] = C[i][i] = 1for i in range(1,MAXN):    for j in range(1,i):        C[i][j] = (C[i-1][j-1] + C[i-1][j]) % MOD def solve():    D, MOD = getInts()    len_D = len(bin(D)[2:])    num = [1]    curr = 1    for i in range(2,len_D):        curr *= 2        num.append(curr)    curr *= 2    num.append(D-curr+1)    #In any given sequence, I have X+1 options per bucket, where X is the size of the bucket. Then subtract 1 for the empty array    ans = 1    for n in num:        ans *= (n+1)        ans %= MOD    ans -= 1    return ans % MOD for _ in range(getInt()):    print(solve())    #solve() #TIME_()
