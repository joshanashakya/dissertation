def main():        # Seems like a[i] must have its most significant bit to be 1 more than that    # of a[i-1].        t=int(input())    allans=[]    for _ in range(t):        d,m=readIntArr()                dMSB=0        d2=d        while d2>0:            dMSB+=1            d2=d2>>1                nWaysAtThisMSB=[0 for _ in range(dMSB+1)]        for msb in range(1,dMSB):            nWaysAtThisMSB[msb]=pow(2,msb-1,m)        #last msb only has d-(2**(dMSB-1)-1) ways        nWaysAtThisMSB[dMSB]=(d-(2**(dMSB-1)-1))%m                #Sum up product of all subsequences in nWaysAtThisMSB        dp=[0 for _ in range(dMSB+1)]        for i in range(1,dMSB+1):            dp[i]+=dp[i-1] #don't take current MSB            dp[i]%=m            dp[i]+=nWaysAtThisMSB[i]#take current MSB alone            dp[i]%=m            dp[i]+=dp[i-1]*nWaysAtThisMSB[i]#take current MSB with previous items            dp[i]%=m                allans.append(dp[dMSB])            multiLineArrayPrint(allans)        return    #import sys#input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)import sysinput=lambda: sys.stdin.readline().rstrip("\r\n") #FOR READING STRING/TEXT INPUTS. def oneLineArrayPrint(arr):    print(' '.join([str(x) for x in arr]))def multiLineArrayPrint(arr):    print('\n'.join([str(x) for x in arr]))def multiLineArrayOfArraysPrint(arr):    print('\n'.join([' '.join([str(x) for x in y]) for y in arr])) def readIntArr():    return [int(x) for x in input().split()] inf=float('inf')MOD=10**9+7 main()
