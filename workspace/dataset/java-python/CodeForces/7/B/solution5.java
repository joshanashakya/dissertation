//Problem: Memory Manager (https://codeforces.com/problemset/problem/7/B)//Status: Not accepted import java.util.*;import java.io.*; public class _0007B {    private static BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));    private static StringTokenizer st;        private static int identifierNum = 0;     public static void main(String[] args) throws IOException {        st = new StringTokenizer(infile.readLine());        int numOperations = Integer.parseInt(st.nextToken());        int numBytes = Integer.parseInt(st.nextToken());         boolean[] bytes = new boolean[numBytes];        Map<Integer, ArrayList<Integer>> identifierToBlock = new HashMap<Integer, ArrayList<Integer>>();        for(int i = 0; i < numOperations; i++) {            st = new StringTokenizer(infile.readLine());            String operation = st.nextToken();            if(operation.equals("alloc"))                alloc(Integer.parseInt(st.nextToken()), bytes, numBytes, identifierToBlock);            else if(operation.equals("erase"))                erase(Integer.parseInt(st.nextToken()), bytes, identifierToBlock);            else                defragment(bytes, numBytes, identifierToBlock);        }    }        private static void alloc(int numToAllocate, boolean[] bytes, int numBytes, Map<Integer, ArrayList<Integer>> identifierToBlock) {        ArrayList<Integer> temp = new ArrayList<Integer>(2);        int startIndex;        boolean found = false;        label: for(startIndex = 0; startIndex < numBytes; startIndex++)            if(!bytes[startIndex]) {                for(int j = startIndex; j < startIndex + numToAllocate; j++)                    if(j >= numBytes || bytes[j])                        continue label;                found = true;                break label;            }                    if(found) {            for(int i = startIndex; i < startIndex + numToAllocate; i++)                bytes[i] = true;            temp.add(startIndex);            temp.add(numToAllocate);            identifierNum++;            System.out.println(identifierNum);            identifierToBlock.put(identifierNum, temp);        }        else            System.out.println("NULL");    }     private static void erase(int x, boolean[] bytes, Map<Integer, ArrayList<Integer>> identifierToBlock) {        if(!identifierToBlock.containsKey(x)) {            System.out.println("ILLEGAL_ERASE_ARGUMENT");            return;        }         ArrayList<Integer> temp = identifierToBlock.get(x);        for(int i = temp.get(0); i < temp.get(0) + temp.get(1); i++)            bytes[i] = false;        identifierToBlock.remove(x);    }     private static void defragment(boolean[] bytes, int numBytes, Map<Integer, ArrayList<Integer>> identifierToBlock) {        int currIndex = 0;        for(int i = 0; i < numBytes; i++)            if(bytes[i]) {                int identifier = 0;                for(int temp : identifierToBlock.keySet())                    if(identifierToBlock.get(temp).get(0) == i) {                        identifier = temp;                        break;                    }                identifierToBlock.get(identifier).set(0, currIndex);                for(int j = i; j < i + identifierToBlock.get(identifier).get(1); j++) {                    boolean temp = bytes[currIndex];                    bytes[currIndex] = bytes[j];                    bytes[j] = temp;                    currIndex++;                }                i += identifierToBlock.get(identifier).get(1) - 1;            }    }}
