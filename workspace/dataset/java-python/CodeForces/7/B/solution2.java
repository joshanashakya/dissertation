import java.io.*;import java.util.*;import java.math.*; public class B {    static int cc = 1;     public static void main(String[] args) throws IOException {        FastScanner fs=new FastScanner();        PrintWriter out = new PrintWriter(System.out);        // int T = 1;         int T=fs.nextInt();        int M=fs.nextInt();        long[] arr = new long[M];        Arrays.fill(arr, Long.MIN_VALUE);        int rem = M;        for (int tt=0; tt<T; tt++) {            String s = fs.next();            if (s.startsWith("alloc")) {                // alloc                int space = fs.nextInt();                if (space>rem) {                    out.println("NULL");                }                else {                    out.println(allocate(arr, space));                }             }            else if (s.startsWith("erase")) {                // erase                int idx = fs.nextInt();                boolean res = erase(arr, idx);                if (!res) {                    out.println("ILLEGAL_ERASE_ARGUMENT");                }            }            else {                defrag(arr);                // defrag            }            // out.println(Arrays.toString(arr));        }                out.close();    }    static void defrag(long[] arr) {        long[] arr2 = new long[arr.length];        Arrays.fill(arr2,Long.MIN_VALUE);        int k =0;        for (int i=0; i<arr.length; i++) {            if (arr[i]!=Long.MIN_VALUE) {                arr2[k++]=arr[i];            }        }        for (int i=0; i<arr.length; i++) {            arr[i]=arr2[i];        }     }     static boolean erase(long[] arr, int idx) {        boolean res = false;        for (int i=0; i<arr.length; i++) {            if (arr[i]==idx) {                res=true;                arr[i]=Long.MIN_VALUE;            }        }        return res;    }     static String allocate(long[] arr, int space) {        int counter=0;        int maxCounter=0, maxIdx=0;        for (int i=0; i<arr.length; i++) {            if (arr[i]!=Long.MIN_VALUE) {                counter = 0;            }            else {                counter++;            }            if (counter>maxCounter) {                maxCounter=counter;                maxIdx=i;                if (counter==space) {                    break;                }            }        }        if (counter<space) {            return "NULL";        }        else {            for (int i=maxIdx; i>maxIdx-space; i--) {                arr[i]=cc;            }        }        return (cc++)+"";    }      static final Random random=new Random();        static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    } }
