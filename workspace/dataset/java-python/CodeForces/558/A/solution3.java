import java.util.*;import java.io.*;/** * * @author alanl */public class Main{    static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));    static StringTokenizer st;    static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    public static void main(String[] args) throws IOException{        int n = readInt(), neg = 0, pos = 0;        ArrayList<edge>arr = new ArrayList(), arr1 = new ArrayList();        for(int i = 0; i<n; i++){            int a = readInt(), b = readInt();            if(a<0){                neg++;                arr1.add(new edge(a, b));            }            else{                pos++;                arr.add(new edge(a, b));            }        }        Collections.sort(arr);        Collections.sort(arr1, Collections.reverseOrder());        long ans = 0;        int val = Math.min(pos, neg);        for(int i = 0; i<val; i++){            ans+=arr.get(0).w;            ans+=arr1.get(0).w;            arr.remove(0);            arr1.remove(0);        }        if(arr.size()!=0&&arr1.size()!=0){            ans+=Math.max(arr.get(0).w, arr1.get(0).w);        }        else if(arr.size()!=0)ans+=arr.get(0).w;        else if(arr1.size()!=0)ans+=arr1.get(0).w;        println(ans);    }    static class edge implements Comparable<edge>{        int v;        long w;        edge(int v0, long w0){            v = v0;            w = w0;        }        @Override        public int compareTo(edge e){            return v-e.v;        }    }    static String next () throws IOException {        while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(input.readLine().trim());        return st.nextToken();    }    static long readLong () throws IOException {        return Long.parseLong(next());    }    static int readInt () throws IOException {        return Integer.parseInt(next());    }    static double readDouble () throws IOException {        return Double.parseDouble(next());    }    static char readChar () throws IOException {        return next().charAt(0);    }    static String readLine () throws IOException {        return input.readLine().trim();    }    static void print(Object b) {        System.out.print(b);    }    static void println(Object b) {        System.out.println(b);    }    static void println() {        System.out.println();    }}
