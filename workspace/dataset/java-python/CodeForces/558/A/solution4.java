import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class CF558A {     static class Tree{        int pos;        int val;        Tree(int pos,int val){            this.pos = pos;            this.val = val;        }    }    public static void main(String[] args) {        FastReader input = new FastReader();        PrintWriter pw = new PrintWriter(System.out);         int n = input.nextInt();         LinkedList<Tree> neg = new LinkedList<Tree>();        LinkedList<Tree> pos = new LinkedList<Tree>();         for(int i = 1;i <= n;i++){            int x = input.nextInt();            int val = input.nextInt();            if(x < 0){                neg.add(new Tree(x,val));            }            else                pos.add(new Tree(x,val));        }         long ans1 = 0;        long ans2 = 0;         Collections.sort(neg, new Comparator<Tree>() {            @Override            public int compare(Tree o1, Tree o2) {                if(o1.pos == o2.pos)                return 0;                else if(o1.pos < o2.pos)                    return 1;                else                    return -1;            }        });          Collections.sort(pos, new Comparator<Tree>() {            @Override            public int compare(Tree o1, Tree o2) {                if(o1.pos == o2.pos)                return 0;                else if(o1.pos < o2.pos)                    return -1;                else                    return 1;            }        });            LinkedList<Tree> neg2 = new LinkedList<>(neg);        LinkedList<Tree> pos2 = new LinkedList<>(pos);              int i = 0;             while (true){                if(i % 2  == 0){                    if(neg.size() != 0){                        ans1 += neg.poll().val;                    }                    else                        break;                }                else{                    if(pos.size() != 0){                        ans1 += pos.poll().val;                    }                    else                        break;                }                i++;            }              i = 0;             while (true){                if(i % 2  == 0){                    if(pos2.size() != 0){                        ans2 += pos2.poll().val;                    }                    else                        break;                }                else{                    if(neg2.size() != 0){                        ans2 += neg2.poll().val;                    }                    else                        break;                }                i++;            }             pw.println(Math.max(ans1,ans2));           pw.flush();        pw.close();    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
