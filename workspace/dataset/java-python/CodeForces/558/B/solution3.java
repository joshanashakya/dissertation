import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }      public void solve() throws IOException{         int n = in.nextInt();        int[] aa = new int[n];        for(int i = 0; i < n; i++){            aa[i] = in.nextInt();        }         HashMap<Integer, List<Integer>> map = new HashMap<>();         for(int i = 0; i < n; i++){            int num = aa[i];            if(map.containsKey(num)){                List<Integer> ls = map.get(num);                ls.set(1, i + 1);                ls.set(2, ls.get(2) + 1);            }else{                List<Integer> ls = new ArrayList<>();                ls.add(i);                ls.add(i + 1);                ls.add(1);                map.put(num, ls);            }        }         int maxCnt = 0;        int minDist = Integer.MAX_VALUE;        int res = -1;         for(Integer key : map.keySet()){             List<Integer> ls = map.get(key);            int l = ls.get(0);            int r = ls.get(1);            int cnt = ls.get(2);             if(cnt > maxCnt){                maxCnt = cnt;                minDist = r - l;                res = key;            }else if(cnt == maxCnt && (r - l < minDist)){                minDist = r - l;                res = key;            }         }                List<Integer> ls = map.get(res);        out.println((ls.get(0) + 1) + " " + ls.get(1));      }   }
