import java.io.*;import java.util.HashMap;import java.util.StringTokenizer;import java.util.concurrent.atomic.AtomicInteger; public class G {    public static void main(String[] args) {        int n = io.nextInt();        HashMap<Integer, Data> array = new HashMap<>();        for (int i = 1; i <= n; i++) {            int elem = io.nextInt();            Data data = array.getOrDefault(elem, new Data());            data.freq++;            data.start = Math.min(data.start, i);            data.stop  = Math.max(data.stop, i);            array.put(elem, data);        }          AtomicInteger max = new AtomicInteger(Integer.MIN_VALUE),                      l   = new AtomicInteger(1),                      r   = new AtomicInteger(n),                      ans = new AtomicInteger(Integer.MAX_VALUE);        array.forEach((k, data) -> max.set(Math.max(max.get(), data.freq)));        array.forEach((k, data) -> {            if (data.freq == max.get())                if (data.stop - data.start < ans.get()) {                    l.set(data.start);                    r.set(data.stop);                    ans.set(r.get() - l.get());                }        });         io.println(l + " " + r);        io.flush(); io.println();    }     static class Data {        int freq = 0, start =(int) 1e7, stop = 0;        public String toString() {           return start + " " + stop;        }    }      static FastIO io = new FastIO(System.in);     static class FastIO extends PrintWriter {        private BufferedReader br;        private StringTokenizer tk;        private FileReader fr;         FastIO(InputStream in) {            this();            br = new BufferedReader(new InputStreamReader(in));        }         FastIO(String location) {            this();            try {br = new BufferedReader(new FileReader(location));}            catch (IOException e) {println(e); flush();}        }         private FastIO() {            super(System.out);            tk = new StringTokenizer("");        }         String nextLine() {            try {                return br.readLine();            } catch (IOException ignored) { }             return nextLine();        }         String next() {            if (hasNext())                return tk.nextToken();            else                tk = new StringTokenizer(nextLine());             return next();        }         boolean hasNext() {            return tk.hasMoreTokens();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         int[] nextIntArray(int length) {            int[] array = new int[length];            for (int i = 0; i < array.length; i++) {                array[i] = nextInt();            }            return array;        }         void exit() {            try {                super.close();                br.close();            } catch (IOException ignored) { }        }    }} 	 	 		 		 	 			   		 			 	   		
