import java.util.*;import java.io.*; public class CFA {  BufferedReader br;  PrintWriter out;  StringTokenizer st;  boolean eof;  private static final long MOD = 1000L * 1000L * 1000L + 7;  private static final int[] dx = {0, -1, 0, 1};  private static final int[] dy = {1, 0, -1, 0};  private static final String yes = "Yes";  private static final String no = "No";   void solve() {//    int T = nextInt();    int T = 1;    for (int i = 0; i < T; i++) {        helper();    }  }   Set<Pair<Integer, Integer>> segments;  int n;  void helper() {    n = nextInt();    int m = nextInt();    segments = new HashSet<>();    for (int i = 0; i < m; i++) {      int first = nextInt() - 1;      int second = nextInt() - 1;      segments.add(new Pair<>(Math.min(first, second), Math.max(first, second)));    }     for (int i = 1; i * i <= n; i++) {      if (n % i == 0) {        boolean b = check(i);        if (b) {          outln(yes);          return;        }        if (i != 1) {          b = check(n / i);          if (b) {            outln(yes);            return;          }        }      }    }    outln(no);  }   boolean check(int dist) {    for (Pair<Integer, Integer> point : segments) {      int first = (point.first + dist) % n;      int second = (point.second + dist) % n;      int min = Math.min(first, second);      int max = Math.max(first, second);      Pair<Integer, Integer> needed = new Pair<>(min, max);      if (!segments.contains(needed)) {        return false;      }    }    return true;  }   class Pair<A, B> {    A first;    B second;     public Pair(A first, B second) {      this.first = first;      this.second = second;    }     public int hashCode() {      int hashFirst = first != null ? first.hashCode() : 0;      int hashSecond = second != null ? second.hashCode() : 0;       return (hashFirst + hashSecond) * hashSecond + hashFirst;    }     public boolean equals(Object other) {      if (other instanceof Pair) {        Pair otherPair = (Pair) other;        return            ((this.first == otherPair.first ||                (this.first != null && otherPair.first != null &&                    this.first.equals(otherPair.first))) &&                (this.second == otherPair.second ||                    (this.second != null && otherPair.second != null &&                        this.second.equals(otherPair.second))));      }       return false;    }     public String toString() {      return "(" + first + ", " + second + ")";    }  }   void shuffle(int[] a) {    int n = a.length;    for(int i = 0; i < n; i++) {        int r = i + (int) (Math.random() * (n - i));        int tmp = a[i];        a[i] = a[r];        a[r] = tmp;    }  }  int gcd(int a, int b) {    while(a != 0 && b != 0) {        int c = b;        b = a % b;        a = c;    }    return a + b;  }  private void outln(Object o) {      out.println(o);  }  private void out(Object o) {      out.print(o);  }  private void formatPrint(double val) {      outln(String.format("%.9f%n", val));  }  public CFA() {    br = new BufferedReader(new InputStreamReader(System.in));    out = new PrintWriter(System.out);    solve();    out.close();  }  public static void main(String[] args) {      new CFA();  }   public long[] nextLongArr(int n) {    long[] res = new long[n];    for(int i = 0; i < n; i++)        res[i] = nextLong();    return res;  }  public int[] nextIntArr(int n) {    int[] res = new int[n];    for(int i = 0; i < n; i++)        res[i] = nextInt();    return res;  }  public String nextToken() {    while (st == null || !st.hasMoreTokens()) {        try {            st = new StringTokenizer(br.readLine());        } catch (Exception e) {            eof = true;            return null;        }    }    return st.nextToken();  }  public String nextString() {    try {        return br.readLine();    } catch (IOException e) {        eof = true;        return null;    }  }  public int nextInt() {      return Integer.parseInt(nextToken());  }  public long nextLong() {      return Long.parseLong(nextToken());  }  public double nextDouble() {        return Double.parseDouble(nextToken());    }}
