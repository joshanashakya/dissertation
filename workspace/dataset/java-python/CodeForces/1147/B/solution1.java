import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {         // z function?         int N = in.nextInt();        int M = in.nextInt();         Set<Integer>[] s = new Set[N];        for (int i = 0; i < N; i++) s[i] = new HashSet<>();         for (int i = 0; i < M; i++) {            int u = in.nextInt()-1;            int v = in.nextInt()-1;             if (u > v) {                int temp = u;                u = v;                v = temp;            }             if (v-u == N/2 && N%2 == 0) {                s[u].add(v-u);                s[v].add(v-u);            } else if (v-u <= N/2) {                s[u].add(v-u);            } else {                s[v].add((N-v) + u);            }        }         int[] z = new int[N];        int l = 0;        int r = 0;        for (int i = 1; i < N; i++) {            if (i <= r) {                z[i] = Math.min(z[i-l], r-i+1);            }             while (i+z[i] < N && s[i+z[i]].equals(s[z[i]])) {                z[i]++;            }             if (i+z[i]-1 > r) {                r = i+z[i]-1;                l = i;            }        }         // System.out.println(Arrays.toString(z));         for (int i = 1; i < N; i++) {            if (N%i == 0 && i+z[i] == N) {                out.println("Yes");                return;            }        }        out.println("No");     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
