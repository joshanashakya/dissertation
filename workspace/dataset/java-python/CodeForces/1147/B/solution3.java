 import java.util.HashMap;import java.util.HashSet;import java.util.Scanner; public class ChladniFigure {	static class Pair	{		int a;		int b;		int done = 0;				public Pair(int a0, int b0)		{			a = Math.min(a0, b0);			b = Math.max(a0, b0);		}				public String toString()		{			return ("(" + a + " " + b + ")");		}	}		static int n, m;	static HashMap<Integer, HashSet<Integer>> map = new HashMap<>();	static HashSet<Pair> set = new HashSet<>();		static HashMap<Integer, HashMap<Integer, Pair>> maptoobj = new HashMap<>();			static void addpair(int a, int b)	{		if(a > b)		{			int temp = a;			a = b;			b = temp;		}				if(!map.containsKey(a))		{			map.put(a, new HashSet<Integer>());			maptoobj.put(a,  new HashMap<>());		}				map.get(a).add(b);		Pair pair = new Pair(a,b);		set.add(pair);		maptoobj.get(a).put(b, pair);	}		static boolean checkpair(int a, int b)	{		if(a > b)		{			int temp = a;			a = b;			b = temp;		}		return (map.containsKey(a) && map.get(a).contains(b));	} 	public static void main(String[] args) 	{		Scanner sc = new Scanner(System.in);				n = sc.nextInt();		int startn = n;				//get prime factors of n		HashSet<Integer> ps = new HashSet<>();		for(int d = 2; d <= n; d++)		{			if(n%d==0)ps.add(d);			while(n%d==0)			{				n/=d;			}		}		n = startn;//		System.out.println(ps);				m = sc.nextInt();						for(int i = 0; i < m; i++)		{			int a = sc.nextInt();			int b = sc.nextInt();						//add pair a, b			addpair(a,b);		}				int doneid = 0;		for(int p : ps)		{ ////			System.out.println("Prime " + p);			boolean allfoundforthisprime = true;			doneid++;//			System.out.println("Set " + set);			for(Pair pair : set)			{ //for each new pair...				if(pair.done < doneid)				{//					System.out.println("New pair " + pair.a + " " + pair.b);					boolean allfound = true;					//jumps										int na = pair.a;					int nb = pair.b;					while(true)					{						na = (na+(n/p));//						System.out.println("calculating " + (n));						while(na>n)na-=n;						nb = (nb+(n/p));						while(nb>n)nb-=n;						//						System.out.println("nanb " + na + " " + nb);												int smalln = Math.min(na, nb);						int bign = Math.max(na, nb);						if(maptoobj.containsKey(smalln) && maptoobj.get(smalln).containsKey(bign))						{//							System.out.println("Pair " + pair.a + " " + pair.b + " is pals with " + smalln + " " + bign);							maptoobj.get(smalln).get(bign).done = doneid;						}						else						{//							System.out.println("Pair " + pair.a + " " + pair.b + " needed pal " + smalln + " " + bign);							allfound = false;							break;						}												//full circle						if(na == pair.a && nb == pair.b)break;					}										if(!allfound)					{						allfoundforthisprime = false;						break;					}										pair.done = doneid;				}			}						if(allfoundforthisprime)			{				System.out.println("Yes");				return;			}		}		System.out.println("No");	} }
