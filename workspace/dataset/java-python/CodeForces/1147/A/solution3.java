//package com.pb.codeforces.practice; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.HashSet;import java.util.StringTokenizer; public class CF1147A {	public static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		public String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		} 		public String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	}		public static void main(String[] args) {		FastReader in = new FastReader();		PrintWriter out = new PrintWriter(System.out);		int n = in.nextInt(); int k = in.nextInt();		int[] qarr = new int[k];		for(int i=0; i<k; i++)			qarr[i] = in.nextInt()-1;		boolean[] narr = new boolean[n];		HashSet<Integer>[] set = new HashSet[n];		for(int i=0; i<n; i++)			set[i] = new HashSet<Integer>();		for(int i=qarr.length-1; i>=0; i--) {			narr[qarr[i]] = true;			if(qarr[i] != n-1 && narr[qarr[i]+1])				set[qarr[i]].add(qarr[i]+1);			if(qarr[i] != 0 && narr[qarr[i]-1])				set[qarr[i]].add(qarr[i]-1);			set[qarr[i]].add(qarr[i]);		}		int ans = 0;		for(int i=0; i<n; i++) {			if(i == 0 || i == n-1)				ans += (Math.min(2, n) - set[i].size());			else				ans += (3 - set[i].size());		}		out.println(ans);		out.flush();		out.close();	}}
