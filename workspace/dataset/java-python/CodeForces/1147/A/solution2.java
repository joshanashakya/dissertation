import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.List;import java.util.StringTokenizer; public class Main implements Runnable { 	int INF = (int) 1e9;	List<Integer> edges[];	int anc[][];	int ts[], te[];	int t; 	private void solve() throws IOException {		int n = nextInt();		int k = nextInt();		int a[] = new int[k];		int cnt[] = new int[n];		int fp[] = new int[n];		int lp[] = new int[n];		Arrays.fill(fp, -1);		Arrays.fill(lp, -1);		for (int i = 0; i < k; ++i) {			a[i] = nextInt();			a[i]--;			if (cnt[a[i]] == 0)				fp[a[i]] = i;			lp[a[i]] = i;			cnt[a[i]]++;		}		if (n == 1) {			pw.println(0);			return;		}		int ans = 0;		for (int i = 0; i < n; ++i) {			if (cnt[i] == 0) {				if (i == 0 || i == n - 1) {					ans += 2;				} else {					ans += 3;				}			} else {//				System.err.println(fp[41] + " " + lp[42] + " " + lp[40]);				if (i == 0) {					if (fp[i] > lp[i + 1])						ans++;				} else if (i == n - 1) {					if (fp[i] > lp[i - 1])						ans++;				} else {					if (fp[i] > lp[i + 1])						ans++;					if (fp[i] > lp[i - 1])						ans++;				}			}		}		pw.println(ans);	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in));			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
