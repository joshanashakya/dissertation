# Author : nitish420 --------------------------------------------------------------------import osimport sysfrom io import BytesIO, IOBase# mod=10**9+7# sys.setrecursionlimit(10**6)mxm=70  def nOftwos(x):    n=0        while x:        if x%2==0:            x//=2            n+=1        else:            break        return n def nOffives(x):    n=0        while x:        if x%5==0:            x//=5            n+=1        else:            break        return n   def main():    n=int(input())    arr=[]    for _ in range(n):        arr.append(list(map(int,input().split())))        dp1=[[0 for _ in range(n+1)]for _ in range(n+1)]    dp2=[[0 for _ in range(n+1)]for _ in range(n+1)]     zeror=-1    zeroc=-1        for r in range(1,n+1):        for c in range(1,n+1):            if arr[r-1][c-1]==0:                zeror=r                zeroc=c                # print("YES")            if r==1 :                dp2[r][c]=dp2[r][c-1]+nOffives(arr[r-1][c-1])                dp1[r][c]=dp1[r][c-1]+nOftwos(arr[r-1][c-1])                dp1[r-1][c]=mxm                dp2[r-1][c]=mxm            elif c==1:                dp1[r][c]=dp1[r-1][c]+nOftwos(arr[r-1][c-1])                dp2[r][c]=dp2[r-1][c]+nOffives(arr[r-1][c-1])                dp1[r][c-1]=mxm                dp2[r][c-1]=mxm            else:                            dp1[r][c]=min(dp1[r-1][c],dp1[r][c-1])+nOftwos(arr[r-1][c-1])                dp2[r][c]=min(dp2[r-1][c],dp2[r][c-1])+nOffives(arr[r-1][c-1])        z=min(dp1[n][n],dp2[n][n])     # for item in dp1:    #     print(*item)    # print()    # for item in dp2:    #     print(*item)     flag=0     if zeroc !=-1 :        if z>1:            z=1            flag=1        print(z)    if flag:        ans=[]        r,c=zeror,zeroc         for i in range(c-1):            ans.append("R")        for i in range(r-1):            ans.append("D")        for i in range(n-c):            ans.append("R")        for i in range(n-r):            ans.append("D")                 print(*ans,sep="")            else:        if dp1[n][n]<dp2[n][n]:            ans=[]            r,c=n,n            while r!=1 or c!=1:                 if dp1[r-1][c]<=dp1[r][c-1] :                    ans.append("D")                    r-=1                else :                    ans.append("R")                    c-=1            ans=ans[::-1]            print(*ans,sep="")        else:            ans=[]            r,c=n,n            while r!=1 or c!=1:                 if dp2[r-1][c]<=dp2[r][c-1] :                    ans.append("D")                    r-=1                else :                    ans.append("R")                    c-=1            ans=ans[::-1]            print(*ans,sep="")  # 3# 4 10 5# 10 9 4# 6 5 3    # region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = 'x' in file.mode or 'r' not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b'\n') + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode('ascii'))        self.read = lambda: self.buffer.read().decode('ascii')        self.readline = lambda: self.buffer.readline().decode('ascii')  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip('\r\n')   # endregion if __name__ == '__main__':    main()
