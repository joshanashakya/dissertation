import java.util.*;import java.io.*;import java.lang.*;  public class graph {    static long mod=10000_00007;        public static void main(String[] args) throws Exception{        InputStreamReader ip=new InputStreamReader(System.in);        BufferedReader br = new BufferedReader(ip);		// int t = Integer.parseInt(br.readLine());		StringBuilder sb = new StringBuilder(); 		// while (t-- > 0) {            String[] str = (br.readLine()).trim().split(" ");            int n = Integer.parseInt(str[0]);            int m=Integer.parseInt(str[1]);            int k = Integer.parseInt(str[2]);                        int[][] arr=new int[m][3];             for(int i=0;i<m;i++){                str = (br.readLine()).trim().split(" ");                arr[i][0]=Integer.parseInt(str[0]);                arr[i][1]=Integer.parseInt(str[1]);                arr[i][2]=Integer.parseInt(str[2]);            }                        if(k==0){                System.out.println(-1);                 return;            }             boolean[] flr=new boolean[n+1];            str = (br.readLine()).trim().split(" ");            for(int i=0;i<k;i++){                int idx=Integer.parseInt(str[i]);                flr[idx]=true;            }             int ans=Integer.MAX_VALUE;             for(int i=0;i<m;i++){                if((flr[arr[i][0]] && !flr[arr[i][1]]) || (!flr[arr[i][0]] && flr[arr[i][1]])){                    ans=Math.min(ans,arr[i][2]);                }            }             if(ans==Integer.MAX_VALUE){                System.out.println(-1);            }else{                System.out.println(ans);            }        // }    }}       // public static void main(String[] args) throws Exception{    //     InputStreamReader ip=new InputStreamReader(System.in);    //     BufferedReader br = new BufferedReader(ip);	// 	int t = Integer.parseInt(br.readLine());	// 	StringBuilder sb = new StringBuilder(); 	// 	while (t-- > 0) {    //         int n = Integer.parseInt(br.readLine());    //         String str = (br.readLine()).trim();     //         int cw=0,acw=0,bh=0;    //         int ans=0;    //         for(int i=0;i<n;i++){    //             if(str.charAt(i)=='-'){    //                 if(str.charAt(((i-1)+n)%n)==str.charAt(i)){    //                     ans++;    //                 }else{    //                     ans+=2;    //                 }    //                 bh++;    //             }else if(str.charAt(i)=='>'){    //                 cw++;    //             }else{    //                 acw++;    //             }    //         }     //         if(acw==n || cw==n || bh==n){    //             System.out.println(n);    //         }else if((acw+bh)==n || (cw+bh)==n){    //             System.out.println(n);    //         }else{    //             System.out.println(ans);    //         }    //     }    //     }     // }  //      public static void main(String[] args) throws Exception{//         InputStreamReader ip=new InputStreamReader(System.in);//         BufferedReader br = new BufferedReader(ip);// 		// int t = Integer.parseInt(br.readLine());// 		StringBuilder sb = new StringBuilder(); // 		// while (t-- > 0) {// 			String[] arrp = (br.readLine()).trim().split(" ");           //             int n = Integer.parseInt(arrp[0]);//             int m= Integer.parseInt(arrp[1]);            //             String[] str = (br.readLine()).trim().split(" ");//             int[] cost=new int[n+1];//             for(int i=0;i<n;i++){//                 cost[i+1]=Integer.parseInt(str[i]);//             }//             long ans=0;//             for(int i=0;i<m;i++){//                 str = (br.readLine()).trim().split(" "); //                 int u=Integer.parseInt(str[0]);//                 int v=Integer.parseInt(str[1]);//                 ans+=Math.min(cost[u],cost[v]);//             } //             System.out.println(ans);//         // }//     }// }     //     public static long binexp(long a,long b){//         long res=1;//         while(b>0){//             if((b&1)==1){//                 res=res*a;  res=res%mod;//             }//             a=a*a; a=a%mod;//             b>>=1;//         }//         return res;//     }//     public static void main(String[] args) throws Exception{//         InputStreamReader ip=new InputStreamReader(System.in);//         BufferedReader br = new BufferedReader(ip);// 		int n = Integer.parseInt(br.readLine());//         // StringBuilder sb = new StringBuilder();        //         long fact=1;//         for(int i=1;i<=n;i++){//             fact=((long)(fact*(long)(i)));//             fact=fact%mod;//         } //         long ump=binexp(2, n-1);//(long)(Math.pow(2, n-1));//         ump=ump%mod;//         long ans=fact-ump;//         if(ans<0){ans+=mod;}//         System.out.println(ans);//     }// }       // public static void main(String[] args) throws Exception{    //     InputStreamReader ip=new InputStreamReader(System.in);    //     BufferedReader br = new BufferedReader(ip);	// 	// int t = Integer.parseInt(br.readLine());	// 	StringBuilder sb = new StringBuilder(); 	// 	// while (t-- > 0) {	// 		String[] arrp = (br.readLine()).trim().split(" ");               //         int n = Integer.parseInt(arrp[0]);    //         int m= Integer.parseInt(arrp[1]);                //         boolean[] invalid=new boolean[n+1];    //         for(int i=0;i<m;i++){    //             String[] pr = (br.readLine()).trim().split(" ");    //             int val=Integer.parseInt(pr[0]);    //             invalid[val]=true;    //             val=Integer.parseInt(pr[1]);    //             invalid[val]=true;    //         }    //         int valid=-1;    //         for(int i=1;i<=n;i++){    //             if(!invalid[i]){valid=i; break;}    //         }                 //         System.out.println(n-1);    //         for(int i=1;i<=n;i++){    //             if(i!=valid){System.out.println(valid+" "+i);}    //         }    //     }    // }     //Q1  //     static int mcost=0;//     public static void dfs(ArrayList<ArrayList<Integer>> graph,int s,boolean[] visited,int[] cost){//         mcost=Math.min(mcost,cost[s-1]);//         visited[s]=true;//         for(int nbr:graph.get(s)){//             if(visited[nbr]==false){//                 dfs(graph,nbr,visited,cost);//             }//         }//     }//     public static void main(String[] args) throws Exception{//         InputStreamReader ip=new InputStreamReader(System.in);//         BufferedReader br = new BufferedReader(ip);// 		// int t = Integer.parseInt(br.readLine());// 		StringBuilder sb = new StringBuilder(); // 		// while (t-- > 0) {// 			String[] arrp = (br.readLine()).trim().split(" ");           //             int n = Integer.parseInt(arrp[0]);//             int m= Integer.parseInt(arrp[1]);            //             String[] strs = (br.readLine()).trim().split(" ");//             int[] cost=new int[n];//             ArrayList<ArrayList<Integer>> graph=new ArrayList<>();//             graph.add(new ArrayList<>());//             for(int i=0;i<n;i++){//                 cost[i]=Integer.parseInt(strs[i]);//                 graph.add(new ArrayList<>());//             }             //             for(int i=0;i<m;i++){//                 arrp = (br.readLine()).trim().split(" ");//                 int u = Integer.parseInt(arrp[0]);//                 int v= Integer.parseInt(arrp[1]); //                 (graph.get(u)).add(v);//                 (graph.get(v)).add(u);//             } //             //dfs//             boolean[] visited=new boolean[n+1];//             long ans=0;//             for(int i=1;i<=n;i++){//                 if(visited[i]==false){//                     mcost=Integer.MAX_VALUE;//                     dfs(graph,i,visited,cost);//                     ans+=mcost;//                 }//             } //             System.out.println(ans);//         // }//     }// }  
