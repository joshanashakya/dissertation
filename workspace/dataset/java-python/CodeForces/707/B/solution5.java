import java.io.*;import java.math.*;import java.security.*;import java.text.*;import java.time.LocalTime;import java.util.*;import java.util.concurrent.*;import java.util.regex.*;  import java.math.*;   public class A { 	static boolean found;	    public static void main(String[] args) {        	FastScanner scan = new FastScanner();    	    	int t = 1;//scan.nextInt();    	for(int tt=0; tt<t; tt++) {    		int n = scan.nextInt(), m = scan.nextInt(), k = scan.nextInt();    		Graph g = new Graph(n);    		for(int l=0; l<m; l++) {    			int i = scan.nextInt(), j = scan.nextInt(), weight = scan.nextInt();    			g.addEdge(i-1, j-1, weight);    		}    		int best = Integer.MAX_VALUE;    		boolean [] used = new boolean [n];    		int [] nodes = new int[k];    		    		for(int i=0; i<k; i++) {    			int node = scan.nextInt()-1;    			nodes[i] = node;    			used[node] = true;    		}    		    		for(int l=0; l<k; l++) {    			int currentNode = nodes[l];    		 for(int j=0; j<g.adj[currentNode].size(); j++) {    				int node = g.adj[currentNode].get(j).node;    				if(!used[node])     					best = Math.min(best, g.adj[currentNode].get(j).weight);    			}    		}    		if(best == Integer.MAX_VALUE) best = -1;    		System.out.println(best);    	}    }            public static void sort(int [] a) {    	ArrayList<Integer> b = new ArrayList<>();    	for(int i: a) b.add(i);    	Collections.sort(b);    	for(int i=0; i<a.length; i++) a[i]= b.get(i);    }        static class Graph {    	private int n;    	private ArrayList<Pair> adj[];    	public Graph(int n) {    		this.n = n;    		adj = new ArrayList[n];    		for(int i=0; i<n; i++)    			adj[i] = new ArrayList<>();    	}    	public void addEdge(int u, int v, int weight) {    		adj[u].add(new Pair(v, weight));    		adj[v].add(new Pair(u, weight));    	}    }        static class Pair {    	int node, weight;    	public Pair(int node, int weight) {    		this.node = node;    		this.weight = weight;    	}    }      static class FastScanner{    	    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");    	String next() {    		while(!st.hasMoreTokens())    			try {    				st = new StringTokenizer(br.readLine());    			} catch (IOException e){    				e.printStackTrace();    			}    		return st.nextToken();    	}    	    	int nextInt() {    		return Integer.parseInt(next());    	}    	    	int [] readArray(int n) {    		int [] a = new int[n];    		for(int i=0; i<n ; i++) a[i] = nextInt();    		return a;    	}    	    	long nextLong() {    		return Long.parseLong(next());    	}    	    	    }       } 
