import java.util.Arrays;import java.util.HashMap;import java.util.Scanner;import java.util.Vector;import javafx.util.Pair; public class NewClass { 	static int n11 = 100000;	static boolean a11[] = new boolean[n11 + 1];	static Vector<Long> v11 = new Vector(); 	static int gcd(int a, int b) {		if (b == 0) {			return a;		}		return gcd(b, a % b);	} 	static void seive() {		//a=new boolean[n+1];		for (int i = 0; i < n11; i++) {			a11[i] = true;		} 		for (int i = 2; i < Math.sqrt(n11); i++) {			if (a11[i] == true) {				for (int j = i * i; j <= n11; j += i) {					a11[j] = false;				}			}		} 		for (int i = 2; i < n11; i++) {			if (a11[i] == true) {				v11.add((long) i);			}		}		//System.out.println(v.size());	} 	public static void main(String[] args) {		Scanner fs = new Scanner(System.in); 		long xx = fs.nextLong(); 		out:		for (int ii = 0; ii < xx; ii++) {			int n = fs.nextInt();			int k = fs.nextInt();			Vector<Pair<Integer, Integer>> v = new Vector();			for (int i = 0; i < n; i++) {				v.add(new Pair(fs.nextInt(), fs.nextInt()));			}			for (int i = 0; i < n; i++) {				int total = 0;				for (int j = 0; j < n; j++) {					if ((Math.abs(v.get(i).getKey() - v.get(j).getKey()) + Math.abs(v.get(i).getValue() - v.get(j).getValue())) <= k) {						total++;					}				}				if (total == n) {					System.out.println(1);					continue out;				}			}			System.out.println(-1);		}	}}
