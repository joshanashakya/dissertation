import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.Arrays;import java.util.Deque;import java.util.Map;import java.util.Set;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; public class ProblemG12B {    public static void main(String[] args) throws Exception {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        PrintWriter writer = new PrintWriter(System.out);         int t = Integer.parseInt(reader.readLine());        for (int tt = 0; tt < t; tt++) {            StringTokenizer info = new StringTokenizer(reader.readLine());            int n = Integer.parseInt(info.nextToken());            int k = Integer.parseInt(info.nextToken());            Point[] points = new Point[n];            for (int i = 0; i < n; i++) {                StringTokenizer tokenizer = new StringTokenizer(reader.readLine());                int x = Integer.parseInt(tokenizer.nextToken());                int y = Integer.parseInt(tokenizer.nextToken());                points[i] = new Point(x, y);            }            boolean good = false;            for (int i = 0; i < n; i++) {                int maxDistance = 0;                for (int j = 0; j < n; j++) {                    int distance = Math.abs(points[i].x - points[j].x) + Math.abs(points[i].y - points[j].y);                    maxDistance = Math.max(maxDistance, distance);                }                if (maxDistance <= k) {                    good = true;                }            }            writer.println(good ? "1" : "-1");        }                 reader.close();        writer.close();    }    static class Point {        int x, y;        public Point(int x, int y) {            this.x = x;            this.y = y;        }    }}
