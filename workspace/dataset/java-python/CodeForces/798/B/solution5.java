import java.util.*;import java.io.*;/** * * @author alanl */public class Solve {Â     /**     * @param args the command line arguments     */    static BufferedReader input = new BufferedReader(new InputStreamReader(System.in));    static StringTokenizer st;    static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    public static void main(String[] args) throws IOException{        int n = readInt();        String[]arr = new String[n];        int[]freq = new int[26];        for(int i = 0; i<n; i++){            arr[i] = readLine();            if(i==0){                for(int j = 0; j<arr[i].length(); j++){                    freq[arr[i].charAt(j)-'a']++;                }            }            else{                int[]freq1 = new int[26];                for(int j = 0; j<arr[i].length(); j++){                    freq1[arr[i].charAt(j)-'a']++;                }                for(int j = 0; j<26; j++){                    if(freq[j]!=freq1[j]){                        println(-1);                        return;                    }                }            }        }        int ans = Integer.MAX_VALUE;        StringBuilder sb = new StringBuilder(arr[0]);        for(int i = 0; i<=arr[0].length(); i++){            int cnt = 0;            boolean flag1 = true;            for(int j = 0; j<n; j++){                boolean flag = false;                StringBuilder sub = new StringBuilder(arr[j]);                for(int k = 0; k<=arr[j].length(); k++){                    if(sub.toString().equals(sb.toString())){                        flag = true;                        break;                    }                    cnt++;                    char cur = sub.charAt(0);                    sub.deleteCharAt(0);                    sub.append(cur);                }                if(!flag){                    flag1 = false;                    break;                }            }            if(flag1)ans = Math.min(ans, cnt);            char cur = sb.charAt(0);            sb.deleteCharAt(0);            sb.append(cur);        }        if(ans!=Integer.MAX_VALUE)println(ans);        else println(-1);    }    static String next () throws IOException {        while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(input.readLine().trim());        return st.nextToken();    }    static long readLong () throws IOException {        return Long.parseLong(next());    }    static int readInt () throws IOException {        return Integer.parseInt(next());    }    static double readDouble () throws IOException {        return Double.parseDouble(next());    }    static char readChar () throws IOException {        return next().charAt(0);    }    static String readLine () throws IOException {        return input.readLine().trim();    }    static void print(Object b) {        System.out.print(b);    }    static void println(Object b) {        System.out.println(b);    }    static void println() {        System.out.println();    }}
