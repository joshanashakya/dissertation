import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;  public class Main {    static int i, j, k, n, m, t, y, x, sum;    static long mod = 998244353;    static FastScanner fs = new FastScanner();    static PrintWriter out = new PrintWriter(System.out);      public static void main(String[] args) {         n = fs.nextInt();        m = fs.nextInt();         long[] a = new long[n];        long[] b = new long[n];         for (i = 0; i < n; i++) {            a[i] = fs.nextInt();        }        for (i = 0; i < n; i++) {            b[i] = fs.nextInt();        }         Arrays.sort(a);        Arrays.sort(b);         long ans = m+5;         for(i=0;i<n;i++){             long d = (b[0]-a[i]+m)%m;             if(isEqual(a,b,i,d)){                ans = Math.min(ans, d);            }         }        out.println(ans);         out.close();     }      private static boolean isEqual(long[] a, long[] b, int offset, long diff) {         int f=0;         for(int j =0;j<n;j++){            int k = (j+i)%n;             if(((a[k]+diff)%m) != b[j])            {                f=1;                break;            }         }         return f == 0;    }     static long exp(long base, long pow) {        if (pow == 0) return 1;        long half = exp(base, pow / 2);        if (pow % 2 == 0) return mul(half, half);        return mul(half, mul(half, base));    }     static long mul(long a, long b) {        return a * b % mod;    }     static long add(long a, long b) {        return (a + b) % mod;    }     static long modInv(long x) {        return exp(x, mod - 2);    }     static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     static class Pair implements Comparable<Pair> {        long first, second;         public Pair(int first, int second) {            this.first = first;            this.second = second;        }         public int compareTo(Pair o) {            return Long.compare(first, o.first);        }     }  }
