//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class B {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt();			int m=sc.nextInt();			int rems[]=new int[n];			HashMap<Integer,Integer> map=new HashMap<>();						for(int i=0;i<n;i++) {				rems[i]=sc.nextInt();				map.put(rems[i],map.getOrDefault(rems[i], 0)+1);			}			int tobe[]=new int[n];			for(int i=0;i<n;i++) tobe[i]=sc.nextInt();			int minm =Integer.MAX_VALUE;		outer:	for(int from=0;from<n;from++) {				int X =whatToAdd(rems[from],tobe[0],m);				if(X > minm ) continue;				HashMap<Integer,Integer> temp=new HashMap<>();				temp.putAll(map);								temp.put(rems[from],map.get(rems[from])-1);								for(int j=1;j<n;j++) {															int toAdd =whatToAdd(X,tobe[j],m);//					System.out.println(X+" -> "+tobe[j]+" Needed: "+toAdd);					if(!temp.containsKey(toAdd) || (temp.get(toAdd) == 0)) {						continue outer;					}					else {						temp.put(toAdd,temp.get(toAdd)-1);					}				}//				System.out.println("Map :"+map);//System.out.println("Temp Map: "+temp);								minm = Math.min(X,minm);							}			ans.append(minm+"\n");				}			    System.out.print(ans);	}         static int whatToAdd(int from,int tobe,int m) {    	int X =0;		if(from>tobe) {			int div = ((from/m));			int toAdd=0;			if(div * m != from) {				toAdd =(div+1)*m -from;			}			toAdd +=tobe;			X=toAdd;		}		if(from<tobe) {			X =tobe-from;		}		return X;    }        static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
