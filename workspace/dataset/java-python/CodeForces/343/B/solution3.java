import java.io.*;import java.util.*;import java.util.stream.*; public class ACM {    public static void main(String args[]) throws FileNotFoundException, IOException {        Scanner x = new Scanner(System.in);        String s=x.next();        StackDynamicArray <Character> sd=new StackDynamicArray<Character>();       for (int i = 0; i < s.length(); i++) {            if(sd.isEmpty())sd.push(s.charAt(i));            else if(sd.topp().equals(s.charAt(i))) sd.pop();            else sd.push(s.charAt(i));        }        //sd.FixSize();       if(sd.isEmpty()) System.out.println("YES");       else System.out.println("NO");     }     public static class StackDynamicArray<T> {        int top=-1;        Object [] StackDynamicArray;        int count=0;        int size=1;        public StackDynamicArray() {            StackDynamicArray = new Object[1];        }        public void push(Object element){            if(!isFull()){                ensureCapacity(size+1);                top++;                size++;                StackDynamicArray[top]=element;            }            else                System.out.println("Stack is Full");        }        public T pop(){            T item=(T) StackDynamicArray[top];            top--;            size--;            //ensureCapacitypop(size);            return item;        }        public void FixSize(){            ensureCapacitypop(size);        }        public boolean isFull(){            if(top==size-1) return true;            else return false;        }        public boolean isEmpty(){            if(top==-1) return true;            else return false;        }        public void Print(){            for (int i = 0; i <StackDynamicArray.length ; i++) {                if(top!=-1) {                    T item = (T) StackDynamicArray[top];                    top--;                    System.out.println(item);                }                else                    break;            }        }        public T topp(){            T item = (T) StackDynamicArray[top];            return item;        }        public void ensureCapacity(int MinCapacity){            int OldCapacity=StackDynamicArray.length;            if(MinCapacity>OldCapacity){                int NewCapacity=OldCapacity*2;                StackDynamicArray= Arrays.copyOf(StackDynamicArray,NewCapacity);            }        }        public void ensureCapacitypop(int MinCapacity){            int MaxCapacity=StackDynamicArray.length;            while(top<MaxCapacity){                StackDynamicArray= Arrays.copyOf(StackDynamicArray,MaxCapacity/2);                MaxCapacity=StackDynamicArray.length;            }        }        public int ArraySize(){            return StackDynamicArray.length;        }     } }   
