import java.io.*; import java.util.*; public class Solution {	 public static void main(String[] args) throws Exception    {		 FastReader fr=new FastReader();				 int n=fr.nextInt();		 int m=fr.nextInt();		 String s=fr.next();		 String t=fr.next();		 boolean contains=false;		 int idx=-1;		 for(int i=0;i<s.length();i++) {			 if(s.charAt(i)=='*') {				 contains=true;			       idx=i;			 }		 }		 		 if(!contains) {			 if(n!=m||!s.equals(t))				 System.out.println("NO");			 else				 System.out.println("YES");		 }		 else {			 if(m<(n-1))				 System.out.println("NO");			 else {				if(m==n-1) {					int j=0;					boolean pos=true;					for(int i=0;i<s.length();i++) {						if(s.charAt(i)=='*')							continue;						if(s.charAt(i)!=t.charAt(j)) {							pos=false;							break;						}						j++;					}					if(pos)						System.out.println("YES");					else						System.out.println("NO");				}				else {				 boolean pos=true;				 for(int i=0;i<idx;i++) {					 if(s.charAt(i)!=t.charAt(i)) {						 pos=false;						 break;					 }				 }				 if(pos==false)					 System.out.println("NO");				 else {					 int j=m-1;					 for(int i=n-1;i>idx;i--) {						 if(s.charAt(i)!=t.charAt(j)) {							 pos=false;							 break;						 }						 j--;					 }					 if(pos==true)						 System.out.println("YES");					 else						 System.out.println("NO");				 }				}				 			 }		 }		                  }	 	 	 	public static boolean check(String s) {//balanced para		Stack<Character> st=new Stack<>();		//System.out.println(s);		for(char c:s.toCharArray()) {			if(c=='(')				st.push(c);			else {				if(st.isEmpty())					return false;				else if(st.peek()=='(')					st.pop();			}		}		if(!st.isEmpty())			return false;		else			return true;	}	 	 	 public static void print(String str) {		 System.out.println(str);	 }	public static int[] getFreq(String s) {		int a[]=new int[26];		for(int i=0;i<s.length();i++) {			a[s.charAt(i)-'a']++;		}		return a;			}	 	 public static boolean isPrime(int n) {		 		 for(int i=2;(i*i)<=n;i++) {			 if(n%i==0)				 return false;		 }		 return true;	 }            	                                } class Pair{	 int x;	 int y;	 long cost;	 Pair(int x,int y,long cost){		 this.x=x;		 this.y=y;		 this.cost=cost;	 } }		 		 	     class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br = new BufferedReader(new                InputStreamReader(System.in));    }     String next()    {        while (st == null || !st.hasMoreElements())        {            try            {                st = new StringTokenizer(br.readLine());            }            catch (IOException e)            {                e.printStackTrace();            }        }        return st.nextToken();    }     int nextInt()    {        return Integer.parseInt(next());    }     long nextLong()    {        return Long.parseLong(next());    }     double nextDouble()    {        return Double.parseDouble(next());    }     String nextLine()    {        String str = "";        try        {            str = br.readLine();        }        catch (IOException e)        {            e.printStackTrace();        }        return str;    }} 
