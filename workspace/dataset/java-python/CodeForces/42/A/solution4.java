import java.io.*;import java.util.*; public class CodeForces {    public static void main(String[] args) {        FastIO io = FastIO.create();         int n = io.nextInt();         int maxVolume = io.nextInt();         int[] p = new int[n];         for (int i = 0; i < n; i++) {            p[i] = io.nextInt();        }         double max = Double.MAX_VALUE;         for (int i = 0; i < n; i++) {            double available = io.nextInt();            max = Math.min(max, available / p[i]);        }         double possible = 0;        for (int i = 0; i < n; i++) {            possible += p[i] * max;        }         double answer = Math.min(possible, maxVolume);         io.println(answer);         io.close();    }     static class FastIO extends PrintWriter {        BufferedReader br;        StringTokenizer st;         public FastIO(InputStream is, OutputStream os) {            super(new BufferedOutputStream(os));            br = new BufferedReader(new InputStreamReader(is));        }         public static FastIO create() {            return new FastIO(System.in, System.out);        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextToken() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {            try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return "";        }    }}
