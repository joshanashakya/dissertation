import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;public class test6 { 	public static final int mod=1000000007;		static LinkedList<Integer> idx=new LinkedList<>();	static int a,b,n;	static String s;	static int dp[];	public static void main(String[] args) throws IOException {				BufferedReader sc=new BufferedReader(new InputStreamReader(System.in));		//Scanner sc=new Scanner(System.in);		PrintWriter out=new PrintWriter(System.out);						s=sc.readLine();		n=s.length();		if(n<=2 || s.charAt(0)=='.') {out.print("NO");out.flush();return;}				int a=-2;		boolean poss=true;		boolean isp=false;		for(int i=0;i<n;i++) {						if(s.charAt(i)=='.') {				if(i-a<=2) {					poss=false;					break;				}				a=i;			}		}		if(a==-2 || !poss) {out.print("NO");out.flush();return;}		dp=new int[n+1];		Arrays.fill(dp, -1);		int prev=0;		if(solve(0)) {				out.println("YES");			for(int e:idx) {				out.println(s.substring(prev,e));				prev=e;			}			if(idx.isEmpty()) out.print(s);			else			out.print(s.substring(idx.peekLast()));		} else {			out.print("NO");		}				out.flush();		out.close();	}		static boolean solve(int id) {		if(id==n) {dp[id]=1;return true;}		if(dp[id]>-1) return dp[id]==0?false:true;		int pidx=id;		boolean f=false;		for(int i=id;i<Math.min(n, id+9);i++) {			if(s.charAt(i)=='.') {pidx=i;f=true;break;}		}		if(!f) {			dp[id]=0;			return false;		}		if(pidx==n-1) {dp[id]=0;return false;}		if(n-pidx<=4) {dp[id]=1;return true;}		for(int i=pidx+1;i<Math.min(pidx+4, n);i++) {			idx.add(i+1);			boolean poss=solve(i+1);			if(!poss) {				idx.removeLast();							} else {				dp[id]=1;				return true;			}		}		dp[id]=0;		return false;	}		static boolean[] sieveOfEratosthenes(int n)     {                 boolean prime[] = new boolean[n+1];         for(int i=0;i<n;i++)             prime[i] = true;                   for(int p = 2; p*p <=n; p++)         {             if(prime[p] == true)             {                 for(int i = p*2; i <= n; i += p)                     prime[i] = false;             }         }                  return prime;    } 		boolean isPrime(long n) {	    if(n < 2) return false;	    if(n == 2 || n == 3) return true;	    if(n%2 == 0 || n%3 == 0) return false;	    long sqrtN = (long)Math.sqrt(n)+1;	    for(long i = 6L; i <= sqrtN; i += 6) {	        if(n%(i-1) == 0 || n%(i+1) == 0) return false;	    }	    return true;	}		public static int binarySearch(int arr[], int l, int r, int x) 	{ 	    while (l <= r) { 	        int m = l + (r - l) / 2; 	  	        // Check if x is present at mid 	        if (arr[m] == x) 	            return m; 	  	        // If x greater, ignore left half 	        if (arr[m] < x) 	            l = m + 1; 	  	        // If x is smaller, ignore right half 	        else	            r = m - 1; 	    } 	  	    // if we reach here, then element was 	    // not present 	    return -1; 	} 			public static int first(int arr[], int low, int high, int x)     {         if (high >= low) {             int mid = low + (high - low) / 2;             if ((mid == 0 || x > arr[mid - 1]) && arr[mid] == x)                 return mid;             else if (x > arr[mid])                 return first(arr, (mid + 1), high, x);             else                return first(arr, low, (mid - 1), x);         }         return -1;     }		public static int last(int arr[], int low, int high, int x, int n)     {         if (high >= low) {             int mid = low + (high - low) / 2;             if ((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x)                 return mid;             else if (x < arr[mid])                 return last(arr, low, (mid - 1), x, n);             else                return last(arr, (mid + 1), high, x, n);         }         return -1;     } 		public static int gcd(int A, int B) {	    if(B==0)	        return A;	    else	        return gcd(B, A % B);	}		public static class Pair{		int l=0;		int r=0;		Pair(int a,int b){			l=a;			r=b;		}			}	} 
