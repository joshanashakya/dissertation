import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastI in = new FastI(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BDubiousCyrpto solver = new BDubiousCyrpto();        solver.solve(1, in, out);        out.close();    }     static class BDubiousCyrpto {        public void solve(int testNumber, FastI sc, PrintWriter out) {            int t = sc.nextInt();            loop:            while (t > 0) {                t--;                int l = sc.nextInt();                int r = sc.nextInt();                long m = sc.nextLong();                for (int a = l; a <= r; a++) {                    long n = m / a;                    long rest = m % a;                    if (n != 0) {                        if (rest <= r - l) {                            out.println(a + " " + (l + rest) + " " + l);                            continue loop;                        }                    }                    rest -= a;                    if (Math.abs(rest) <= r - l) {                        out.println(a + " " + l + " " + (l - rest));                        continue loop;                    }                }            }        }     }     static class FastI {        BufferedReader br;        StringTokenizer st;         public FastI(InputStream inputStream) {            br = new BufferedReader(new                    InputStreamReader(inputStream));         }         public String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     }} 
