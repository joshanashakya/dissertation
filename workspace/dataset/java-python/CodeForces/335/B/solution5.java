import java.io.*;import java.util.*;import java.util.stream.Stream; public class Main implements Runnable {    static final int MOD = (int) 1e9 + 7;    static final int MI = (int) 1e9;    static final long ML = (long) 1e18;    static final Reader in = new Reader();    static final PrintWriter out = new PrintWriter(System.out);    StringBuilder answer = new StringBuilder();     public static void main(String[] args) {        new Thread(null, new Main(), "persefone", 1 << 32).start();    }     @Override    public void run() {        solve();        printf();        flush();    }      void solve() {        char[] s = " ".concat(in.next()).toCharArray();        int n = s.length - 1;        if (n >= 2600) {            int[] cnt = new int[26];            for (int i = 1; i <= n; i++) {                cnt[s[i] - 'a']++;            }            for (int i = 0; i < 26; i++) {                if (cnt[i] >= 100) {                    for (int j = 0; j < 100; j++) {                        add((char) (i + 97));                    }                    return;                }            }        }         int[][] dp = new int[n + 1][n + 1];        for (int j = 1; j <= n; j++) {            dp[j][j] = 1;            for (int i = j - 1; i > 0; i--) {                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);                if (s[i] == s[j]) {                    dp[i][j] = Math.max(dp[i][j], 2 + dp[i + 1][j - 1]);                }            }        }        if (dp[1][n] == 1) {            printf(s[1]);            return;        }         int max = dp[1][n];         for (int i = 1; i <= n; i++) {            for (int j = i + 1; j <= n; j++) {                if (s[i] != s[j]) {                    dp[i][j] = 0;                }            }        }         String ans = getAns(dp, s, 1, n, max, "");         if (max < 100) {            char[] res = new char[max];            for (int i = 0; i < ans.length(); i++) {                if (i != ans.length() - 1) {                    res[i] = res[max - i - 1] = ans.charAt(i);                } else {                    if (2 * ans.length() == max) {                        res[i] = res[i + 1] = ans.charAt(i);                    } else {                        res[i] = ans.charAt(i);                    }                }            }            printf(res);            return;        }         char[] res = new char[100];        for (int i = 0; i < 50; i++) {            res[i] = res[99 - i] = ans.charAt(i);        }         printf(res);     }     public String getAns(int[][] dp, char[] s, int low, int high, int len, String ans) {        if (low > high) return ans;        outer:        for (int j = high; j > 0; j--) {            for (int i = low; i <= j; i++) {                if (dp[i][j] == len) {                    ans += s[j];                    ans += getAns(dp, s, i + 1, j - 1, len - 2, "");                    break outer;                }            }        }        return ans;    }     void printf() {        out.print(answer);    }     void close() {        out.close();    }     void flush() {        out.flush();    }     void printf(Stream<?> str) {        str.forEach(o -> add(o, " "));        add("\n");    }      void printf(Object... obj) {        printf(false, obj);    }     void printfWithDescription(Object... obj) {        printf(true, obj);    }      private void printf(boolean b, Object... obj) {         if (obj.length > 1) {            for (int i = 0; i < obj.length; i++) {                if (b) add(obj[i].getClass().getSimpleName(), " - ");                if (obj[i] instanceof Collection<?>) {                    printf((Collection<?>) obj[i]);                } else if (obj[i] instanceof int[][]) {                    printf((int[][]) obj[i]);                } else if (obj[i] instanceof long[][]) {                    printf((long[][]) obj[i]);                } else if (obj[i] instanceof double[][]) {                    printf((double[][]) obj[i]);                } else printf(obj[i]);            }            return;        }         if (b) add(obj[0].getClass().getSimpleName(), " - ");        printf(obj[0]);    }     void printf(Object o) {        if (o instanceof int[])            printf(Arrays.stream((int[]) o).boxed());        else if (o instanceof char[])            printf(new String((char[]) o));        else if (o instanceof long[])            printf(Arrays.stream((long[]) o).boxed());        else if (o instanceof double[])            printf(Arrays.stream((double[]) o).boxed());        else if (o instanceof boolean[]) {            for (boolean b : (boolean[]) o) add(b, " ");            add("\n");        } else            add(o, "\n");    }     void printf(int[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(long[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(double[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(boolean[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(Collection<?> col) {        printf(col.stream());    }     <T, K> void add(T t, K k) {        if (t instanceof Collection<?>) {            ((Collection<?>) t).forEach(i -> add(i, " "));        } else if (t instanceof Object[]) {            Arrays.stream((Object[]) t).forEach(i -> add(i, " "));        } else            add(t);        add(k);    }      <T> void add(T t) {        answer.append(t);    }     static class Reader {        private BufferedReader br;        private StringTokenizer st;         Reader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         Reader(String fileName) throws FileNotFoundException {            br = new BufferedReader(new FileReader(fileName));        }         boolean isReady() throws IOException {            return br.ready();        }         String next() {            try {                while (st == null || !st.hasMoreTokens()) {                    st = new StringTokenizer(br.readLine());                }            } catch (IOException e) {                e.printStackTrace();            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] nextIntArray(int n) {            int[] arr = new int[n];            for (int i = 0; i < n; i++)                arr[i] = nextInt();            return arr;        }         long nextLong() {            return Long.parseLong(next());        }         String nextLine() {            String s = "";            try {                s = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return s;        }    }}
