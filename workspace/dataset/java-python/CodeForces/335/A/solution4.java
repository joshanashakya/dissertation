import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.List;import java.util.StringTokenizer; public class Main implements Runnable { 	int INF = (int) 1e9;	List<Integer> edges[];	int anc[][];	int ts[], te[];	int t; 	private void solve() throws IOException {		String s = next();		int n = nextInt();		int cnt[] = new int[26];		int dist = 0;		for (int i = 0; i < s.length(); ++i) {			char ch = s.charAt(i);			if (cnt[ch - 'a'] == 0) {				dist++;			}			cnt[ch - 'a']++;		}		if (n < dist) {			pw.println(-1);			return;		}		int l = 0;		int r = s.length();		while (r - l > 1) {			int mid = (l + r) >> 1;			int tot = 0;			for (int i = 0; i < 26; ++i) {				tot += ((cnt[i] + mid - 1) / mid);			}			if (tot > n) {				l = mid;			} else {				r = mid;			}		}		pw.println(r);		int need = 0;		for (int i = 0; i < 26; ++i) {			need += (cnt[i] + r - 1) / r;			for (int j = 0; j < (cnt[i] + r - 1) / r; ++j) {				pw.print((char) ('a' + i));			}		}		while (need < n) {			pw.print('x');			need++;		}	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in));			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
