import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class CF335A {    static final int CHARS = 26;     public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         char[] s = sc.nextToken().toCharArray();        int n = sc.nextInt();         int[] occs = new int[CHARS];        int distinct = 0;        for (char ch : s) {            if (occs[ch - 'a'] == 0)                distinct++;            occs[ch - 'a']++;        }        if (distinct > n) {            pw.println(-1);            pw.flush();            return;        }         int lo = 1, hi = 1000;        while (lo <= hi) {            int mid = (lo + hi) / 2;            int n1 = 0;            for (int occ : occs)                if (occ > 0)                    n1 += (occ + mid - 1) / mid; // Math.ceil(occ/sheets)            if (n1 > n)                lo = mid + 1;            else                hi = mid - 1;        }         int sheets = lo;        pw.println(sheets);        StringBuilder sb = new StringBuilder();        for (int i = 0; i < CHARS; i++) {            int x = (occs[i] + sheets - 1) / sheets;            while (x-- > 0)                sb.append((char) ('a' + i));        }        while (sb.length() < n)            sb.append('a');        pw.println(sb);        pw.flush();    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
