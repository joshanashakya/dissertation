import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;Â public class pre469 {    static ArrayList<Integer>nodes[];    static boolean isCycle(int node,boolean visited[]){        if(visited[node]) return true;        else {            visited[node] = true;            for(int i:nodes[node]){                boolean k = isCycle(i,visited);                if(k) return true;            }            visited[node] = false;            return false;        }    }    static String findTopologicalOrder(int node,String s,boolean visited[]) {        if(visited[node]) return s;        visited[node] = true;        for(int i: nodes[node]){            s = findTopologicalOrder(i,s,visited);        }        return (char)(node+'A')+s;    }    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        String s;         nodes = new ArrayList[26];        for(int i=0;i<nodes.length;i++) nodes[i] = new ArrayList<>();        while((s = reader.readLine()) != null) {            if (s.length() == 0) break;            if (s.charAt(1) == '>') nodes[s.charAt(2) - 'A'].add(s.charAt(0) - 'A');            else nodes[s.charAt(0) - 'A'].add(s.charAt(2) - 'A');        }        for(int i=0;i<26;i++){            boolean k = isCycle(i,new boolean[26]);            if(k){                System.out.println("Impossible");                return;            }        }        ArrayList<String> store = new ArrayList<>();        for(int i=0;i<26;i++){            if(nodes[i].size()>0)store.add(findTopologicalOrder(i,"",new boolean[26]));        }        int size = Integer.MIN_VALUE,index=0;        for(int i=0;i<store.size();i++){            if(size<store.get(i).length()){                index = i;                size = store.get(i).length();            }        }        System.out.println(store.get(index));    }}
