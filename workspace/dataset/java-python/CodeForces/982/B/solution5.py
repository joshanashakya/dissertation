z,zz=input,lambda:list(map(int,z().split()))fast=lambda:stdin.readline().strip()zzz=lambda:[int(i) for i in fast().split()]szz,graph,mod,szzz=lambda:sorted(zz()),{},10**9+7,lambda:sorted(zzz())from string import *from re import *from collections import *from queue import *from sys import *from collections import *from math import *from heapq import *from itertools import *from bisect import *from collections import Counter as ccfrom math import factorial as ffrom bisect import bisect as bsfrom bisect import bisect_left as bslfrom itertools import accumulate as acdef lcd(xnum1,xnum2):return (xnum1*xnum2//gcd(xnum1,xnum2))def prime(x):    p=ceil(x**.5)+1    for i in range(2,p):        if (x%i==0 and x!=2) or x==0:return 0    return 1def dfs(u,visit,graph):    visit[u]=1    for i in graph[u]:        if not visit[i]:            dfs(i,visit,graph)def output(answer):    stdout.write(str(answer))###########################---Test-Case---#################################"""   If you Know me , Then you probably don't know me !  """###########################---START-CODING---############################## num=int(z()) arr=zzz() new_arr=[(i,j+1) for j,i in enumerate(arr)]new_arr=sorted(new_arr) passenger=fast() que=deque() ans=[0]*2*num  left=0right=num-1le=0 for i in range(2*num):    if passenger[i]=='0':        ans[i]=new_arr[left][1]        que.append(new_arr[left][1])        left+=1        le+=1            else:        if le>=1:            ans[i]=que[-1]            que.pop()            le-=1        else:            ans[i]=new_arr[right][1]            que.append(new_arr[right][1])            right-=1            le+=1print(*ans)                                                                                                             
