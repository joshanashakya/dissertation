import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        ALuckySumOfDigits solver = new ALuckySumOfDigits();        solver.solve(1, in, out);        out.close();    }     static class ALuckySumOfDigits {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            if (n % 7 == 0) {                int q = n / 7;                while (q > 0) {                    out.print(7);                    q--;                }            } else {                int a = n % 7;                int c7 = n / 7;                int c4 = 0;                int flag = 0;                while (a <= n) {                    if (a % 4 == 0) {                        c4 = a / 4;                        flag = 1;                        break;                    }                    c7--;                    a += 7;                }                if (flag == 0) out.println(-1);                else {                    for (int i = 0; i < c4; i++) {                        out.print(4);                    }                    for (int i = 0; i < c7; i++) {                        out.print(7);                    }                }            }        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void print(int i) {            writer.print(i);        }         public void println(int i) {            writer.println(i);        }     }} 
