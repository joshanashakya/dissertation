import java.io.BufferedReader;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintStream;import java.io.PrintWriter;import java.text.DecimalFormat;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.PriorityQueue;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{			static ArrayList<Long> list;	    public static void main(String[] args) throws IOException {    			    	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		long l1 = fs.nextLong(), r1 = fs.nextLong(), l2 = fs.nextLong(), r2 = fs.nextLong();    		int k = fs.nextInt();    		    		list = new ArrayList<Long>();    		    		lucky(0);    		list.add((long)2e9);    		    		Collections.sort(list);    		int n = list.size();    		    		double ans = 0;    		    		for(int i=1;i<n-k;i++) {    			int j = i + k - 1;    			ans += (double)inter(l1, r1, list.get(i-1)+1, list.get(i))*inter(l2, r2, list.get(j), list.get(j+1)-1);    			ans += (double)inter(l2, r2, list.get(i-1)+1, list.get(i))*inter(l1, r1, list.get(j), list.get(j+1)-1);    			if(k==1 && l1<=list.get(i) && r1>=list.get(i) && l2<=list.get(i) && r2>=list.get(i)) ans--;    		}    		    		ans /= (double)(r1-l1+1)*(r2-l2+1);    		    		System.out.println(ans);    		    		    		    		    		    	}    	    		    		    		    	out.close();    		    }                static long inter(long a, long b, long c, long d) {    	return Math.max(0L, Math.min(b,  d) - Math.max(a, c) + 1);    }            static void lucky(long x) {    	if(x>(long)1e9) return;    	list.add(x);    	lucky(x*10+4);    	lucky(x*10+7);    }                                  static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
