import itertools as it   all_lucky = [] for length in range(1, 10):    for comb in it.product(['7', '4'], repeat=length):        all_lucky += [int(''.join(comb))] all_lucky.sort() # print(len(all_lucky)) pl, pr, vl, vr, k = map(int, input().split()) result = 0 def inters_len(a, b, c, d):    a, b = sorted([a, b])    c, d = sorted([c, d])    return (max([a, c]), min([b, d])) def check_for_intervals(pl, pr, vl, vr):    global result    for i in range(1, len(all_lucky) - k):        le, re = i, i + k - 1         a, b = inters_len(all_lucky[le - 1] + 1, all_lucky[le], pl, pr)        left_len = max([0, b - a + 1])        c, d = inters_len(all_lucky[re], all_lucky[re + 1] - 1, vl, vr)        right_len = max([0, d - c + 1])         result += (left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1))         if b == c and left_len * right_len > 1e-6:            result -= (1 / (pr - pl + 1) / (vr - vl + 1)) / 2      a, b = inters_len(0, all_lucky[0], pl, pr)    left_len = max([0, b - a + 1])    c, d = inters_len(all_lucky[k - 1], all_lucky[k] - 1, vl, vr)    right_len = max([0, d - c + 1])     #print((left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1)))    #print(left_len, right_len)    result += (left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1))     if b == c and left_len * right_len > 1e-6:        result -= (1 / (pr - pl + 1) / (vr - vl + 1)) / 2     a, b = inters_len(all_lucky[-(k + 1)] + 1, all_lucky[-k], pl, pr)    left_len = max([0, b - a + 1])    c, d = inters_len(all_lucky[-1], 10**9, vl, vr)    right_len = max([0, d - c + 1])     #print((left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1)))    result += (left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1))     if b == c and left_len * right_len > 1e-6:        result -= (1 / (pr - pl + 1) / (vr - vl + 1)) / 2   #print(all_lucky[:5]) if k != len(all_lucky):    check_for_intervals(pl, pr, vl, vr)    check_for_intervals(vl, vr, pl, pr)else:    a, b = inters_len(0, all_lucky[0], pl, pr)    left_len = max([0, b - a + 1])    c, d = inters_len(all_lucky[-1], 10**9, vl, vr)    right_len = max([0, d - c + 1])    result += (left_len / (pr - pl + 1)) * (right_len / (vr - vl + 1))     if b == c and left_len * right_len > 1e-6:        result -= (1 / (pr - pl + 1) / (vr - vl + 1)) / 2     a, b = inters_len(0, all_lucky[0], vl, vr)    left_len = max([0, b - a + 1])    c, d = inters_len(all_lucky[-1], 10**9, pl, pr)    right_len = max([0, d - c + 1])    result += (left_len / (vr - vl + 1)) * (right_len / (pr - pl + 1))     if b == c and left_len * right_len > 1e-6:        result -= (1 / (pr - pl + 1) / (vr - vl + 1)) / 2 print(result)    # Made By Mostafa_Khaled
