import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Vector;import java.util.Scanner;import java.util.Collections; /** * Built using CHelper plug-in * Actual solution is at the top * * @author islammohsen */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        Vector<Integer> vec = new Vector<>();         void generate(long number) {            if (number > (long) 1e9)                return;            vec.add((int) number);            generate(number * 10 + 4);            generate(number * 10 + 7);        }         int length(int l, int r) {            if (l > r)                return 0;            return r - l + 1;        }         int intersect(int l1, int r1, int l2, int r2) {            int l = Math.max(l1, l2);            int r = Math.min(r1, r2);            return length(l, r);        }         public void solve(int testNumber, Scanner in, PrintWriter out) {            int pl = in.nextInt(), pr = in.nextInt(), vl = in.nextInt(), vr = in.nextInt(), k = in.nextInt();            generate(4);            generate(7);            Collections.sort(vec);            double ans = 0;            for (int i = k - 1; i < vec.size(); i++) {                int bfl, bfr, afl, afr, idx = i - k + 1;                bfr = vec.elementAt(idx);                if (idx - 1 < 0)                    bfl = 1;                else                    bfl = vec.elementAt(idx - 1) + 1;                afl = vec.elementAt(i);                if (i + 1 == vec.size())                    afr = (int) 1e9;                else                    afr = vec.elementAt(i + 1) - 1;                //first choice                ans += ((double) intersect(bfl, bfr, pl, pr) / length(pl, pr))                        * ((double) intersect(afl, afr, vl, vr) / length(vl, vr));                //second choice                ans += ((double) intersect(bfl, bfr, vl, vr) / length(vl, vr))                        * ((double) intersect(afl, afr, pl, pr) / length(pl, pr));                if (k == 1)                    ans -= ((double) intersect(vec.elementAt(i), vec.elementAt(i), pl, pr) / length(pl, pr))                            * ((double) intersect(vec.elementAt(i), vec.elementAt(i), vl, vr) / length(vl, vr));            }            out.printf("%.12f", ans);        }     }} 
