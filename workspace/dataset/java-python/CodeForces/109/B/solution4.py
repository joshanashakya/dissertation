import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int pl = in.nextInt(), pr = in.nextInt(), vl = in.nextInt(), vr = in.nextInt(), k = in.nextInt();            int[] lucky = genLucky();            double ans = 0;            for (int i = 1; i + k < 1024; ++i) {                int xl = lucky[i - 1] + 1;                int xr = lucky[i];                int yl = lucky[i + k - 1];                int yr = lucky[i + k] - 1;                ans += prob(xl, xr, pl, pr) * prob(yl, yr, vl, vr);                ans += prob(yl, yr, pl, pr) * prob(xl, xr, vl, vr);                if (k == 1) {                    ans -= prob(xr, xr, pl, pr) * prob(xr, xr, vl, vr);                }            }            out.println(ans);        }         int[] genLucky() {            int[] c = new int[1024];            for (int len = 1, k = 1; len <= 9; ++len) {                for (int msk = 0; msk < 1 << len; ++msk) {                    int a = 0;                    for (int j = 0, b = msk, f = 1; j < len; ++j, b >>= 1, f *= 10) {                        if ((b & 1) == 0) {                            a += f * 4;                        } else {                            a += f * 7;                        }                    }                    c[k++] = a;                }            }            c[c.length - 1] = (int) (2e9);            return c;        }         double prob(int x, int y, int l, int r) {            if (x < l) x = l;            if (y > r) y = r;            if (x > y) return 0;            return 1.0 * (y - x + 1) / (r - l + 1);        }     }     static class InputReader {        private StringTokenizer tokenizer;        private BufferedReader reader;         public InputReader(InputStream inputStream) {            reader = new BufferedReader(new InputStreamReader(inputStream));        }         private void fillTokenizer() {            if (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (Exception e) {                    throw new RuntimeException(e);                }            }        }         public String next() {            fillTokenizer();            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
