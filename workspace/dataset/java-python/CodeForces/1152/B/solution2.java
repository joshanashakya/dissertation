import java.util.*;import java.io.*;import java.math.*; public class Main{     final static int mod = 1000000007;    static FastReader sc;    static PrintWriter out;     public static void solution() throws IOException    {        long n = sc.nextInt();        long len = Long.toBinaryString(n).length();//        out.println(Long.toBinaryString(n));        StringBuilder s = new StringBuilder();        long count = 0;        for (long mask = len - 1; mask >= 0; mask--)        {            if ((n & (1 << mask)) == 0)            {                n = n ^ ((1 << (mask+1))-1);                count++;                s.append((mask + 1) + " ");                if(((n + 1) & n) == 0) break;                n++;                count++;                if(((n + 1) & n) == 0) break;//                out.println("mask = \t" + Long.toBinaryString((1 << (mask+1))-1) + "\nn = \t" + Long.toBinaryString(n));            }        }        out.println(count);        out.println(s.toString());//        out.println("n = " + n);//        out.println("n base 2 = " + Long.toBinaryString(n));    }     // GCD    public static int __gcd(int a, int b)    {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.intValue();    }     public static long __gcd(long a, long b)    {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.longValue();    }     public static void main(String args[]) throws IOException    {        long start = 0, end = 0;        try        {            File output = new File("output.txt");            sc = new FastReader();            if (output.exists())            {                out = new PrintWriter(new FileOutputStream("output.txt"));                start = System.nanoTime();            } else            {                out = new PrintWriter(System.out);            }             int test_cases = 1;//            test_cases = sc.nextInt();            while (test_cases-- > 0)            {                solution();            }            if (output.exists())            {                end = System.nanoTime();                out.println("Execution time: " + (end - start) / 1000000 + " ms");            }            out.flush();            out.close();        } catch (Exception e)        {            out.println("Exception: " + e);            out.flush();            out.close();            return;        }    }     // Fast IO    static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader() throws FileNotFoundException        {            File in = new File("input.txt");            if (in.exists())            {                br = new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));            } else            {                br = new BufferedReader(new InputStreamReader(System.in));            }        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                } catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         float nextFloat()        {            return Float.parseFloat(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            } catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
