import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.TreeMap;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BGeorgeAndRound solver = new BGeorgeAndRound();        solver.solve(1, in, out);        out.close();    }     static class BGeorgeAndRound {        static TreeMap<Integer, Integer> multiset = new TreeMap<Integer, Integer>();         static void add(int x) {            if (multiset.containsKey(x)) {                multiset.put(x, multiset.get(x) + 1);            } else {                multiset.put(x, 1);            }        }         static void remove(int x) {            multiset.put(x, multiset.get(x) - 1);            if (multiset.get(x) == 0) {                multiset.remove(x);            }        }         public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt(), m = in.nextInt();            int[] a = in.nextIntArray(n);            int[] b = in.nextIntArray(m);            for (int i = 0; i < m; i++) {                add(b[i]);            }            int count = 0;            for (int i = n - 1; i >= 0; i--) {                 if (multiset.higherKey(a[i] - 1) != null) {//                out.println(multiset.higherKey(a[i]-1));                    int t = multiset.higherKey(a[i] - 1);                    remove(t);                } else count++;            }            out.println(count);        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int[] nextIntArray(int n) {            int[] array = new int[n];            for (int i = 0; i < n; ++i) array[i] = nextInt();            return array;        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }} 
