import java.util.*; public class Absolutezero {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String s = sc.next();        String t = sc.next();        String[] s1 = s.split(":");        String[] t1 = t.split(":");        int h1 = Integer.parseInt(s1[0]);        int m1 = Integer.parseInt(s1[1]);         int h2 = Integer.parseInt(t1[0]);        int m2 = Integer.parseInt(t1[1]);        // if (h1 >= h2 && m1 >= m2) {            int ansh = h1 - h2;            int ansm = m1 - m2;            if(ansm<0){                ansm=60+ansm;                ansh--;            }            if(ansh<0){                ansh=24+ansh;            }            String a1 = ansh + "";            String a2 = ansm + "";            if (ansh >= 0 && ansh <= 9) {                a1 = "0" + a1;            }            if (ansm >= 0 && ansm <= 9) {                a2 = "0" + a2;            }             System.out.println(a1 + ":" + a2);        /* else if (h1 >= h2 && m1 < m2) {            int diff=m2-m1;            int ansh = h1 - h2;            int ansm=0;            if(m1-diff>=0){                ansm=60-diff;                ansh-=1;                if(ansh<0){                    ansh=23;                }            }else {                ansh-=1;                if(ansh<0){                    ansh=23;                }                ansm=60+(m1-diff);            }            String a1 = ansh + "";            String a2 = ansm + "";            if (ansh >= 0 && ansh <= 9) {                a1 = "0" + a1;            }            if (ansm >= 0 && ansm <= 9) {                a2 = "0" + a2;            }            System.out.println(a1 + ":" + a2);         }else if(h1<h2 && m1>=m2){             int diff=h2-h1;            int ansh = 24 - diff;            int ansm = m1 - m2;            String a1 = ansh + "";            String a2 = ansm + "";            if (ansh >= 0 && ansh <= 9) {                a1 = "0" + a1;            }            if (ansm >= 0 && ansm <= 9) {                a2 = "0" + a2;            }             System.out.println(a1 + ":" + a2);         }else {            int diff=m2-m1;            int ansh = 24- (h2 - h1);             int ansm=0;            if(m1-diff>=0){                ansm=m1-diff;            }else {                ansh-=1;                if(ansh<0){                    ansh=23;                }                ansm=60+(m1-diff);            }            String a1 = ansh + "";            String a2 = ansm + "";            if (ansh >= 0 && ansh <= 9) {                a1 = "0" + a1;            }            if (ansm >= 0 && ansm <= 9) {                a2 = "0" + a2;            }            System.out.println(a1 + ":" + a2);        }*/      }     public List<Integer> almostp(int n) {        List<Integer> list = new ArrayList<>();        for (int i = 2; i * i <= n; i++) {            if (n % i == 0) {                while (n % i == 0) {                    n = n / i;                }                list.add(i);            }        }        if (n > 1) {            list.add(n);        }        return list;    }     static int countSetBits(int n) {        int count = 0;        while (n > 0) {            count += n & 1;            n >>= 1;        }        return count;    }     public List<Integer> getDivisors(int n) {        List<Integer> list = new ArrayList<>();        for (int d = 2; d * d <= n; d++) {            int c = 0;            if (n % d == 0) {                while (n % d == 0) {                    n /= d;                    c++;                }                if (c == 1) {                    list.add(d);                }            }        }        if (n > 1) {            list.add(n);        }        return list;    }     public int lcm(int n1, int n2) {        int gcd = 1;        for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0)                gcd = i;        }         int lcm = (n1 * n2) / gcd;        return lcm;    }     public List<Long> primes(int n) {        boolean[] p = new boolean[n + 1];        long h = n * n;        List<Long> list = new ArrayList<>();        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            if (p[i]) {                //  list.add((long)(i*i));                for (int j = i * i; j <= n; j += i) {                    p[j] = false;                }            }        }         List<Integer> list1 = new ArrayList<>();         for (int i = 2; (long) (i * i) <= h; i++) {            if (p[i]) {                list.add(((long) (i * i)));            }        }        return list;    }     public int primeFactor(int n) {        int c = 0;         while (n % 2 == 0) {            n /= 2;            c++;        }        //  System.out.println(n);        return c;     }     public boolean[] primes1(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            for (int j = i * i; j <= n; j += i) {                p[j] = false;            }        }        return p;    }     public List<Integer> testt(int n) {         List<Integer> longs = new ArrayList<>();        process:        for (int p = 1; p <= n; p++) {            // System.out.println(i);            int i = p;            //List<Integer> ls=new ArrayList<>();            int count = 0;            for (int j = 2; j * j <= i; j++) {                int c = 0;                if (i % j == 0) {                    while (i % j == 0) {                        i /= j;                        c++;                    }                    if (c == 1) {                        count++;                    }                    if (count >= 2) {                        longs.add(p);                        continue process;                    }                }            }             if (i > 1) {                count++;            }            if (count >= 2) {                longs.add(p);                continue process;            }         }         //Collections.sort(longs);          return longs;    }}
