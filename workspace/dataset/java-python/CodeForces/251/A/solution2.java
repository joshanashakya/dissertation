import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.TreeSet;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        APointsOnLine solver = new APointsOnLine();        solver.solve(1, in, out);        out.close();    }     static class APointsOnLine {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            int d = in.nextInt();            long ans = 0;            int arr[] = new int[n];            TreeSet<APointsOnLine.Pair> set = new TreeSet<>();            for (int i = 0; i < n; i++) {                arr[i] = in.nextInt();                set.add(new APointsOnLine.Pair(arr[i], i));            }            for (int i = 2; i < n; i++) {                APointsOnLine.Pair p = new APointsOnLine.Pair(arr[i] - d - 1, i);                if (set.higher(p) == null) continue;                int ind = set.higher(p).b;                if (i - ind < 2) continue;                ans += (long) ((long) (i - ind) * (i - ind - 1) / 2);            }            out.println(ans);        }         static class Pair implements Comparable<APointsOnLine.Pair> {            int a;            int b;             Pair(int a, int b) {                this.a = a;                this.b = b;            }             public int compareTo(APointsOnLine.Pair v) {                return Integer.compare(a, v.a);            }         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(long i) {            writer.println(i);        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
