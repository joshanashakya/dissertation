import java.io.*;import java.util.*;Â public class Main {		void solve() {		int n = in.nextInt();		int k = in.nextInt();		int[] q = new int[n];		int[] s = new int[n];		int[] p = new int[n];		for (int i = 0; i < n; ++i) {			q[i] = in.nextInt() - 1;		}		for (int i = 0; i < n; ++i) {			s[i] = in.nextInt() - 1;		}		for (int i = 0; i < n; ++i) {			p[i] = i;		}		boolean can = false;		for (int i = 0; i < n; ++i) {			if (s[i] != p[i]) {				can = true;			}		}		int tmp[] = new int[n];		boolean canBackward = false;		for (int i = 0; i < n; ++i) {			tmp[q[i]] = p[i];		}		for (int i = 0; i < n; ++i) {			if (s[i] != tmp[i]) {				canBackward = true;			}		}		boolean canForward = false;		for (int i = 0; i < n; ++i) {			tmp[i] = p[q[i]];		}		for (int i = 0; i < n; ++i) {			if (s[i] != tmp[i]) {				canForward = true;			}		}		if (!can) {			out.println("NO");		} else {			{				int step = 0;				while (step <= k) {					boolean found = true;					for (int i = 0; i < n; ++i) {						if (p[i] != s[i]) {							found = false;						}					}					if (found) {						if ((k - step) % 2 == 0) {							if (step == k || step > 1 || (step == 1 && canBackward)) {								out.println("YES");								return;							}						}						break;					}					for (int i = 0; i < n; ++i) {						tmp[i] = p[q[i]];					}					for (int i = 0; i < n; ++i) {						p[i] = tmp[i];					}					++step;				}			}			for (int i = 0; i < n; ++i) {				p[i] = i;			}			{				int step = 0;				while (step <= k) {					boolean found = true;					for (int i = 0; i < n; ++i) {						if (p[i] != s[i]) {							found = false;						}					}					if (found) {						if ((k - step) % 2 == 0) {							if (step == k || step > 1 || (step == 1 && canForward)) {								out.println("YES");								return;							}						}						break;					}					for (int i = 0; i < n; ++i) {						tmp[q[i]] = p[i];					}					for (int i = 0; i < n; ++i) {						p[i] = tmp[i];					}					++step;				}			}			out.println("NO");		}	}		void run() {		in = new InputReader(System.in);		out = new PrintWriter(System.out);		solve();		out.close();	}		InputReader in;	PrintWriter out;		class InputReader {		BufferedReader br;		StringTokenizer st;				InputReader(InputStream is) {			br = new BufferedReader(new InputStreamReader(is));			st = null;		}				String next() {			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}	}		public static void main(String[] args) {		new Main().run();	}}
