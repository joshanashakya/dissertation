//I AM THE CREED/* //I AM THE CREED/* package codechef; // don't place package name! */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.StringTokenizer; import java.util.*;import java.awt.Point;public class Main{    static final Random random=new Random();    public static void main(String[] args) throws IOException     {         Scanner input=new Scanner(System.in);        while(input.hasNext()){            int n=input.nextInt();            int[] ct=new int[100001];            int[] l=new int[n];            for(int i=0;i<n;i++){                int val=input.nextInt();                ct[val]++;                if(ct[val]+val==n+1){                    ct[val]=1;                }                l[i]=val;            }            boolean possible=true;            for(int i=0;i<100001;i++){                if(ct[i]!=0){                    if((ct[i]+i)!=n){                        possible=false;                    }                }            }            if(possible==false){                System.out.println("Impossible");                continue;            }            System.out.println("Possible");            HashSet<Integer> seen=new HashSet<>();            StringBuilder sb=new StringBuilder();            HashMap<Integer, Integer> map=new HashMap<>();            int col=0;            for(int i=0;i<n;i++){                if((ct[l[i]]+l[i])==l[i]){                    col++;                    sb.append(col+" ");                    seen.add(l[i]);                    ct[l[i]]=n-l[i];                    ct[l[i]]--;                    map.put(l[i], col);                    continue;                }                if(seen.contains(l[i])){                    sb.append(map.get(l[i])+" ");                    ct[l[i]]--;                    continue;                }                col++;                map.put(l[i], col);                sb.append(col+" ");                seen.add(l[i]);                ct[l[i]]--;            }            System.out.println(sb.toString());                    }            }    static boolean isPrime(int n)    {         // Check if number is less than        // equal to 1        if (n <= 1)            return false;         // Check if number is 2        else if (n == 2)            return true;         // Check if n is a multiple of 2        else if (n % 2 == 0)            return false;         // If not, then just check the odds        for (int i = 3; i <= Math.sqrt(n); i += 2)         {            if (n % i == 0)                return false;        }        return true;    }    static int gcd(int a, int b)    {        if (a == 0)            return b;         return gcd(b % a, a);     }         // method to return LCM of two numbers    static int lcm(int a, int b)    {        return (a / gcd(a, b)) * b;    }         //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate    static void ruffleSort(int [] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			int temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}    //Credits to SecondThread(https://codeforces.com/profile/SecondThread) for this tempelate.    static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}		long nextLong() {			return Long.parseLong(next());		}	}        }
