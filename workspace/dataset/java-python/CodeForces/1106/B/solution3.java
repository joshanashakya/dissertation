import java.util.*; import java.io.*; public class Main {		public static void solve(InputReader in ) {		int n = in.readInt(), m = in.readInt(); 		int a[] = new int[n+1]; 		int c[] = new int[n+1]; 		PriorityQueue<pair> pq = new PriorityQueue<>(); 				for(int i = 1; i<=n; i++) {			a[i] = in.readInt();		}				for(int i = 1; i<=n; i++) {			c[i] = in.readInt(); 			pq.add(new pair(c[i],i)); 		}				for(int i = 1; i<=m; i++) {			int t = in.readInt() , d = in.readInt();			if(d <= a[t]) {				a[t] -= d; 				System.out.println(1l *d * c[t]); 							}			else {				boolean flag = false; 				long ans = 1l * a[t] * c[t]; 				d -= a[t]; 				a[t] = 0; 				while(!pq.isEmpty()) {					while(!pq.isEmpty() && a[(int) pq.peek().second] == 0) pq.poll(); 					if(pq.isEmpty()) break; 					pair now = pq.peek(); 					if(d <= a[(int)now.second]) {						a[(int)now.second] -= d; 						ans += d * now.first; 						flag = true;						System.out.println(ans); 						break; 					}					else {						ans += a[(int)now.second] * now.first; 						d -= a[(int)now.second];						a[(int)now.second] = 0; 						pq.poll(); 					}				}				if(!flag)					System.out.println(0); 			}		}	}		public static void main(String[] args) {		InputReader in = new InputReader(System.in);		int t = 1; 		while (t-- > 0)			solve(in);	}} class InputReader{	private InputStream stream;	private byte[] buf = new byte[1024];	private int curChar;	private int numChars;	private SpaceCharFilter filter; 	 public InputReader(InputStream stream) {		this.stream = stream;	}      public int read() {		if (numChars == -1)			throw new InputMismatchException();		if (curChar >= numChars) {			curChar = 0;			try {				numChars = stream.read(buf);			} catch (IOException e) {				throw new InputMismatchException();			}			if (numChars <= 0)				return -1;		}		return buf[curChar++];	}      public int readInt() {		int c = read();		while (isSpaceChar(c))			c = read();		int sgn = 1;		if (c == '-') {			sgn = -1;			c = read();		}		int res = 0;		do {			if (c < '0' || c > '9')				throw new InputMismatchException();			res *= 10;			res += c - '0';			c = read();		} while (!isSpaceChar(c));		return res * sgn;	}      public String readString() {		int c = read();		while (isSpaceChar(c))			c = read();		StringBuilder res = new StringBuilder();		do {			res.appendCodePoint(c);			c = read();		} while (!isSpaceChar(c));		return res.toString();	}      public long readLong() {		int c = read();		while (isSpaceChar(c)) {			c = read();		}		int sgn = 1;		if (c == '-') {			sgn = -1;			c = read();		}		long res = 0;		do {			if (c < '0' || c > '9') {				throw new InputMismatchException();			}			res *= 10;			res += c - '0';			c = read();		} while (!isSpaceChar(c));		return res * sgn;	}	     public boolean isSpaceChar(int c) {		if (filter != null)			return filter.isSpaceChar(c);		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	}          public String next() {		return readString();	}         public interface SpaceCharFilter {		public boolean isSpaceChar(int ch);	}}class pair implements Comparable<pair> {	long first; 	long second; 	pair(long a, long b ) {		this.first = a;		this.second = b;	}    public long getFirst() {    	return first;     }    public long getSecond() {    	return second;     }	public String toString() {		return first + " " + second;	} 	public boolean equals(Object o) {		return o instanceof pair && ((pair) o).first == first && ((pair) o).second == second;	} 	public int compareTo(pair a) {		return Long.compare(first, a.first); 	}	public int hashCode() {		return (31 * (int) first + (int) second); 	}}
