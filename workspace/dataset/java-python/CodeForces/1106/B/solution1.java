import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;  public class Main {    static int i, j, k, n, m, t, y, x, sum=0;    static long mod = 1000000007;    static FastScanner fs = new FastScanner();    static PrintWriter out = new PrintWriter(System.out);    static String str;    static long ans=0;     public static void main(String[] args) {        t = 1;         while (t-- >0){            n = fs.nextInt();           m = fs.nextInt();            int[] availability = new int[n];           List<Pair> lestCostList = new ArrayList<>();           int[] cost = new int[n];           int totalItems = 0;           long[] ans = new long[m];            for(i=0;i<n;i++){               availability[i] = fs.nextInt();           }             for(i=0;i<n;i++){                cost[i] = fs.nextInt();                lestCostList.add(new Pair(i,cost[i]));                totalItems+=cost[i];            }             Collections.sort(lestCostList);             j=0;             for(i=0;i<m;i++){                int a,b;                 a = fs.nextInt();                a--;                b = fs.nextInt();                 if(availability[a]>=b){                    ans[i] = 1L*cost[a]*b;                    availability[a]-=b;                }                 else{                    int k = b-availability[a];                    ans[i]=1L*cost[a]*availability[a];                    availability[a]=0;                     while (k>0 && j<lestCostList.size()){                        int cheapIn = lestCostList.get(j).first;                         if(availability[cheapIn]>=k){                            ans[i]+=(1L*cost[cheapIn]*k);                            availability[cheapIn]-=k;                            k=0;                        }                         else{                            ans[i]+=(1L*cost[cheapIn]*availability[cheapIn]);                            k-=availability[cheapIn];                            availability[cheapIn]=0;                            j++;                        }                    }                     if(j==lestCostList.size())                        ans[i]=0;                }            }             for(i=0;i<m;i++){                out.println(ans[i]);            }          }         out.close();    }       private static void initialize(long[] arr, long val){         int n = arr.length;         for(int i = 0;i<n;i++){            arr[i]=val;        }    }       static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     static class Pair implements Comparable<Pair> {        int first, second;         public Pair(int first, int second) {            this.first = first;            this.second = second;        }         public int compareTo(Pair o) {            if(second== o.second)                return Integer.compare(first, o.first);            return Integer.compare(second, o.second);        }     }     static void ruffleSort(int[] a) {        //ruffle        int n=a.length;        Random r=new Random();        for (int i=0; i<a.length; i++) {            int oi=r.nextInt(n), temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }         //then sort        Arrays.sort(a);    }  }
