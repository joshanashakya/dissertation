import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.TreeSet;import java.util.Objects;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /* * Copyright (c) --> Arpit * Date Created : 2/8/2020 * Have A Good Day ! */ /* * Built using CHelper plug-in * Actual solution is at the top * * @author Arpit */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BLunarNewYearAndFoodOrdering solver = new BLunarNewYearAndFoodOrdering();        solver.solve(1, in, out);        out.close();    }        static class BLunarNewYearAndFoodOrdering {        public void solve(int testNumber, FastReader r, OutputWriter out) {                        int n = r.nextInt(), m = r.nextInt();                        long dishes[] = r.nextLongArray(n);            long cost[] = r.nextLongArray(n);                        TreeSet<Pair> pq = new TreeSet<>();            for (int i = 0; i < n; i++) pq.add(new Pair(i, dishes[i], cost[i]));                        while (m-- > 0) {                                int type = r.nextInt() - 1;                long total = r.nextLong();                                long ans = 0;                                Pair p = new Pair(type, dishes[type], cost[type]);                                if (dishes[type] > total) {                                        pq.remove(p);                    dishes[type] -= total;                    p.dishes = dishes[type];                    pq.add(p);                    ans += (total * cost[type]);                    total = 0;                                    } else if (dishes[type] == total) {                                        pq.remove(p);                    dishes[type] = 0;                    ans += (total * cost[type]);                    total = 0;                                    } else {                                        if (dishes[type] != 0) {                                                ans += (dishes[type] * cost[type]);                        pq.remove(p);                        total -= dishes[type];                        dishes[type] = 0;                                            }                                        while (!pq.isEmpty() && total > 0) {                                                p = pq.pollFirst();                                                if (p.dishes > total) {                                                        ans += (total * p.cost);                            p.dishes -= total;                            dishes[p.idx] = p.dishes;                            pq.add(p);                            total = 0;                                                    } else if (p.dishes == total) {                                                        ans += (total * p.cost);                            dishes[p.idx] = 0;                            total = 0;                                                    } else {                                                        ans += (p.dishes * p.cost);                            total -= p.dishes;                            dishes[p.idx] = 0;                                                    }                                            }                                        if (total > 0) ans = 0;                                    }                                out.println(ans);                            }        }                class Pair implements Comparable<Pair> {            int idx;            long dishes;            long cost;                        public Pair(int idx, long type, long cost) {                this.idx = idx;                this.dishes = type;                this.cost = cost;            }                        public int compareTo(Pair o) {                if (cost == o.cost) {                    return (idx - o.idx);                }                return (int) (cost - o.cost);            }                        public String toString() {                return "{id:" + idx +                        ",dishes:" + dishes +                        ",cost:" + cost +                        '}';            }                        public boolean equals(Object o) {                if (this == o) return true;                if (o == null || getClass() != o.getClass()) return false;                Pair pair = (Pair) o;                return idx == pair.idx &&                        dishes == pair.dishes &&                        cost == pair.cost;            }                        public int hashCode() {                return Objects.hash(idx, dishes, cost);            }                    }            }        static class OutputWriter {        private final PrintWriter writer;                public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }                public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }                public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                writer.print(objects[i]);                if (i != objects.length - 1) writer.print(" ");            }        }                public void println(Object... objects) {            print(objects);            writer.println();        }                public void close() {            writer.close();        }            }        static class FastReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private FastReader.SpaceCharFilter filter;                public FastReader(InputStream stream) {            this.stream = stream;        }                public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }                public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }                public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }                public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }                public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }                public long[] nextLongArray(int n) {            long[] array = new long[n];            for (int i = 0; i < n; ++i) array[i] = nextLong();            return array;        }                public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);                    }            }} 
