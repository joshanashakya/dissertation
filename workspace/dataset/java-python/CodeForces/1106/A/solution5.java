import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /* * Copyright (c) --> Arpit * Date Created : 1/8/2020 * Have A Good Day ! */ /** * Built using CHelper plug-in * Actual solution is at the top * * @author Arpit */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        ALunarNewYearAndCrossCounting solver = new ALunarNewYearAndCrossCounting();        solver.solve(1, in, out);        out.close();    }        static class ALunarNewYearAndCrossCounting {        public void solve(int testNumber, FastReader r, OutputWriter out) {            int n = r.nextInt();            char mat[][] = new char[n][n];            for (int i = 0; i < n; i++) {                mat[i] = r.next().toCharArray();            }//        int ele[][] = new int[n][n];            int cnt = 0;//        for (int i = 0; i < n; i++) {//            for (int j = 0; j < n; j++) {//                ele[i][j] = cnt++;//            }//        }//        HashSet<Integer> set = new HashSet<>();//        cnt = 0;            for (int i = 0; i < n; i++) {                for (int j = 0; j < n; j++) {                    if (mat[i][j] == 'X') {                        if ((i - 1 >= 0 && j - 1 >= 0 &&                                mat[i - 1][j - 1] == 'X') &&                                (i - 1 >= 0 && j + 1 < n &&                                        mat[i - 1][j + 1] == 'X') &&                                (i + 1 < n && j - 1 >= 0 &&                                        mat[i + 1][j - 1] == 'X') &&                                (i + 1 < n && j + 1 < n &&                                        mat[i + 1][j + 1] == 'X')) {                            cnt++;//                        set.add(ele[i][j]);//                        set.add(ele[i - 1][j - 1]);//                        set.add(ele[i - 1][j + 1]);//                        set.add(ele[i + 1][j - 1]);//                        set.add(ele[i + 1][j + 1]);                        }                    }                }            }            out.print(cnt);        }            }        static class OutputWriter {        private final PrintWriter writer;                public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }                public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }                public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != objects.length - 1) writer.print(" ");                writer.print(objects[i]);            }        }                public void close() {            writer.close();        }            }        static class FastReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private FastReader.SpaceCharFilter filter;                public FastReader(InputStream stream) {            this.stream = stream;        }                public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }                public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }                public String nextString() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                if (Character.isValidCodePoint(c)) {                    res.appendCodePoint(c);                }                c = read();            } while (!isSpaceChar(c));            return res.toString();        }                public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }                public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }                public String next() {            return nextString();        }                public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);                    }            }} 
