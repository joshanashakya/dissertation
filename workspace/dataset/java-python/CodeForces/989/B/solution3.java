import java.io.*;import java.util.*; public class Solution{        public static void main(String[] args) throws Exception{        int[] np = in.readA();        int n = np[0], p = np[1];        char[] rec = new char[n];        rec = in.readLine().toCharArray();        boolean periodic = true;        for(int i = 0; i < n-p; i++){            if(rec[i] == rec[p+i] && rec[i] != '.'){                continue;            }            else {                if(rec[i] == '.'){                    if(rec[i+p] == '.'){                        rec[i] = '0';                        rec[i+p] = '1';                    }                    else if(rec[i+p] == '0')                        rec[i] = '1';                    else if(rec[i+p] == '1')                        rec[i] = '0';                }                else if(rec[i] == '0'){                    if(rec[i+p] == '.')                        rec[i+p] = '1';                }                else {                    if(rec[i+p] == '.')                        rec[i+p] = '0';                }                periodic = false;                break;            }        }        if(!periodic){            for(int i = 0; i < n; i++){                if(rec[i] == '.')                    rec[i] = '0';            }            System.out.println(new String(rec));        }        else {            System.out.println("No");        }    }     static Inputer in;    static {        in = new Inputer();    }     static class Inputer{        BufferedReader br;        Inputer(){            try{                br = new BufferedReader(new InputStreamReader(System.in));            }            catch(Exception e){}        }        public int readInt() throws Exception{            return Integer.parseInt(readLine());        }        public long readLong() throws Exception{            return Long.parseLong(readLine());        }        public int[] readA(String delim) throws Exception{            String[] s = readLine().split(delim);            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public int[] readA() throws Exception{            String[] s = readLine().split("\\s+");            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public long[] readLA() throws Exception{            String[] s = readLine().split("\\s+");            long[] A = new long[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Long.parseLong(s[i]);            return A;        }        public String readLine() throws Exception{            return br.readLine();        }        public int[] copyA(int[] A){            int[] B = new int[A.length];            for(int i= 0 ; i < A.length; i++)                B[i] = A[i];            return B;        }    }    static void shuffle(int[] A){        int n = A.length;        Random rand = new Random();        for(int t = 0; t < A.length; t++){            int i1 = rand.nextInt(n);            int i2 = rand.nextInt(n);            int tmp = A[i1];            A[i1] = A[i2];            A[i2] = tmp;        }    }}
