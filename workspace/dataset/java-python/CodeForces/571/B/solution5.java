import java.util.*;import java.io.*;public class Solution{    static void merge(long arr[], int l, int m, int r)     {         // Find sizes of two subarrays to be merged         int n1 = m - l + 1;         int n2 = r - m;           /* Create temp arrays */        long L[] = new long [n1];         long R[] = new long [n2];           /*Copy data to temp arrays*/        for (int i=0; i<n1; ++i)             L[i] = arr[l + i];         for (int j=0; j<n2; ++j)             R[j] = arr[m + 1+ j];             /* Merge the temp arrays */          // Initial indexes of first and second subarrays         int i = 0, j = 0;           // Initial index of merged subarry array         int k = l;         while (i < n1 && j < n2)         {             if (L[i] <= R[j])             {                 arr[k] = L[i];                 i++;             }             else            {                 arr[k] = R[j];                 j++;             }             k++;         }           /* Copy remaining elements of L[] if any */        while (i < n1)         {             arr[k] = L[i];             i++;             k++;         }           /* Copy remaining elements of R[] if any */        while (j < n2)         {             arr[k] = R[j];             j++;             k++;         }     }       // Main function that sorts arr[l..r] using     // merge()     static void sort(long arr[], int l, int r)     {         if (l < r)         {             // Find the middle point             int m = (l+r)/2;               // Sort first and second halves             sort(arr, l, m);             sort(arr , m+1, r);               // Merge the sorted halves             merge(arr, l, m, r);         }     }     public static void main(String[] args)throws IOException{        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine());        PrintWriter out = new PrintWriter(System.out);        int n = Integer.parseInt(st.nextToken());        int k = Integer.parseInt(st.nextToken());        st = new StringTokenizer(br.readLine());        long[] a = new long[n+1];        for(int i=1;i<=n;i++) a[i] = Long.parseLong(st.nextToken());        sort(a,1,n);        int l1 = n/k+1,l2 = n/k,n1 = n%k, n2 = k-n%k;        //out.println(l1+" "+l2);        long[][] dp = new long[n1+1][n2+1];        //for(int i=0;i<=n;i++) out.print(a[i]+" ");       // out.println("");        for(int i=0;i<=n1;i++){            for(int j=0;j<=n2;j++){                if(i==0&&j==0) continue;                if(i==0){                    dp[i][j] = dp[i][j-1]+a[i*l1+j*l2]-a[i*l1+(j-1)*l2+1];                    continue;                }                if(j==0){                    dp[i][j] = dp[i-1][j]+a[i*l1+j*l2]-a[(i-1)*l1+j*l2+1];                    continue;                }                long s1 = dp[i][j-1]+a[i*l1+j*l2]-a[i*l1+(j-1)*l2+1];                long s2 = dp[i-1][j]+a[i*l1+j*l2]-a[(i-1)*l1+j*l2+1];                //if(i==1&&j==2) out.println(dp[i][j-1]+" "+a[i*l1+j*l2]+" "+a[i*l1+(j-1)*l2+1]);                dp[i][j] = Math.min(s1,s2);            }        }        //out.println("");        out.println(dp[n1][n2]);        out.flush();    }}
