import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Collections;import java.util.StringTokenizer; public class B_Square_Filling {     int x, y;     B_Square_Filling(int a, int b) {        this.x = a;        this.y = b;    }     public static void main(String[] args) {        FastScanner fs = new FastScanner();                int n = fs.nextInt();        int m = fs.nextInt();         int[][] a = new int[n][m];         for(int i = 0; i < n; ++i) {            for(int j = 0; j < m; ++j) {                a[i][j] = fs.nextInt();            }        }         int [][] b = new int[n][m];         for(int i = 0; i < n; ++i)             for(int j = 0; j < m; ++j)                 b[i][j] = 0;         ArrayList< B_Square_Filling > resp = new ArrayList< B_Square_Filling >();         for(int i = 0; i < n; ++i) {            for(int j = 0; j < m; ++j) {                if (a[i][j] == 1) {                    if ((i + 1 < n && a[i + 1][j] == 1)) {                        if ((j + 1 < m && a[i][j + 1] == 1)) {                            if ((i + 1 < n && j + 1 < m && a[i + 1][j + 1] == 1) ) {                                b[i][j] = 1;                                b[i + 1][j] = 1;                                b[i][j + 1] = 1;                                b[i + 1][j + 1] = 1;                                                                B_Square_Filling p = new B_Square_Filling(i + 1, j + 1);                                resp.add(p);                            }                        }                    }                }            }        }         boolean isOk = true;        for(int i = 0; i < n; ++i) {            for(int j = 0; j < m; ++j) {                if (a[i][j] != b[i][j]) isOk = false;            }        }         if (!isOk) System.out.println(-1);        else {            System.out.println(resp.size());            for(B_Square_Filling temp : resp) {                int x = temp.x;                int y = temp.y;                System.out.println(x + " " + y);            }        }     }     static void sort(int[] a) {        ArrayList<Integer> l=new ArrayList<>();        for (int i:a) l.add(i);        Collections.sort(l);        for (int i=0; i<a.length; i++) a[i]=l.get(i);    }     static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    }}
