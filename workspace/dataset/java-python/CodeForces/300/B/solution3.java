import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*; import javafx.util.Pair; public class Main{     static ArrayList<ArrayList<Integer>> a, ans;    static boolean visited[];    static int count = 0;    static int n, m;    static ArrayList<Integer> cycle;     public static void dfs(int n)    {        if (visited[n]) {            return;        }        cycle.add(n);        visited[n] = true;        count++;        for (int i = 0; i < a.get(n).size(); i++) {            dfs(a.get(n).get(i));        }        return;    }     public static void main(String args[])    {        FastScanner input = new FastScanner();        n = input.nextInt();        m = input.nextInt();        a = new ArrayList<>(n);        ans = new ArrayList<ArrayList<Integer>>();        visited = new boolean[n];        for (int i = 0; i < n; i++) {            a.add(new ArrayList<>());        }         for (int i = 0; i < m; i++) {            int ai = input.nextInt() - 1;            int bi = input.nextInt() - 1;            a.get(ai).add(bi);            a.get(bi).add(ai);         }        int one = 0, two = 0, three = 0;        for (int i = 0; i < n; i++) {            count = 0;             cycle = new ArrayList<>();            dfs(i);            if (count > 3) {                System.out.println("-1");                return;            }            if (count == 1) {                ans.add(three + one + Math.min(one, two), cycle);                one++;            }            if (count == 2) {                ans.add(three + two + Math.min(two, one), cycle);                two++;            }            if (count == 3) {                ans.add(0, cycle);                three++;            }         }        if (two > one || (one - two) % 3 != 0) {            System.out.println("-1");            return;        }        int c = 0;        StringBuilder result = new StringBuilder();         for (int i = 0; i < ans.size(); i++) {            for (int j = 0; j < ans.get(i).size(); j++) {                result.append((ans.get(i).get(j) + 1) + " ");                c++;                if (c == 3) {                    result.append("\n");                    c = 0;                }            }        }        System.out.println(result);    }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
