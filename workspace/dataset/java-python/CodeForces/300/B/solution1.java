import java.lang.*;import java.util.*;import java.util.stream.Collectors;import java.io.*;Â public class absolute {	static List<Integer>[] adj;	static List<List<Integer>> groups; 	public static void dfs(int u, boolean[] visited,List<Integer> temp)	{		visited[u]=true;		temp.add(u);		Iterator itr = adj[u].listIterator();		while(itr.hasNext())		{			int v = (int)itr.next();			if(!visited[v])				dfs(v,visited,temp);		}			}	public static void main(String[] args) {				Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		int m = sc.nextInt();		adj = new LinkedList[n+1];		groups = new ArrayList<List<Integer>>();		for(int i=1;i<=n;i++)adj[i]=new LinkedList();		for(int i=0;i<m;i++)		{			int u = sc.nextInt();			int v = sc.nextInt();			adj[u].add(v);adj[v].add(u);		}		boolean[] visited = new boolean[n+1];				for(int i=1;i<=n;i++)		{			if(!visited[i])			{				List<Integer> temp = new ArrayList<Integer>();				if(adj[i].size()>0)					dfs(i,visited,temp);				//System.out.println("temp "+temp.toString());				if(temp.size()==3)				{					if(adj[temp.get(0)].size()==2 && adj[temp.get(1)].size()==2 && adj[temp.get(2)].size()==2)						groups.add(new ArrayList<Integer>(temp));				}				else if(temp.size()==2)					groups.add(new ArrayList<Integer>(temp));			}		}				int i=1,j=0;		while(i<n)		{			while(i<n && visited[i])i++;			while(j<groups.size() && groups.get(j).size()==3)j++;			if(i>=n || j>=groups.size())break;			groups.get(j).add(i);			visited[i]=true;			i++;			j++;		}						List<Integer> singles = new ArrayList<Integer>();		for(i=1;i<=n;i++)		{			if(!visited[i])singles.add(i);		}		//System.out.println(singles.toString());		if(singles.size()%3==0 && singles.size()>0)		{			for(i=0;i<singles.size();i+=3)			{				List<Integer> singlestemp = new ArrayList<Integer>();				singlestemp.add(singles.get(i));				singlestemp.add(singles.get(i+1));				singlestemp.add(singles.get(i+2));				visited[singles.get(i)]=true;visited[singles.get(i+1)]=true;visited[singles.get(i+2)]=true;				groups.add(new ArrayList<Integer>(singlestemp));			}		}		//System.out.println(Arrays.toString(visited));		boolean ans=true;		for(i=1;i<=n;i++)		{			ans &= visited[i];		}		for(i=0;i<groups.size();i++)		{			ans &= (groups.get(i).size()==3);		}		if(ans && groups.size()>0)		{						for(i=0;i<groups.size();i++)			{				List<Integer> temp= groups.get(i);				System.out.println(temp.get(0)+" "+temp.get(1)+" "+temp.get(2));			}		}		else			System.out.println(-1);	}	}
