#http://codeforces.com/problemset/problem/300/B from collections import defaultdictfrom itertools import islice def finding_connected_component(graph, current_student):    stack = [current_student]    result = []    while stack:        student = stack.pop()        result.append(student)        for connected_student in graph[student]:            if not visited[connected_student]:                visited[connected_student] = True                stack.append(connected_student)    return result     number_of_students, number_of_pairs = map(int, input().rstrip().split(" "))graph = defaultdict(list)group = defaultdict(list)visited = [False] * (number_of_students+1)isHavingSolution = Truefor i in range(number_of_pairs):    studentA, studentB = map(int, input().rstrip().split(" "))    graph[studentA].append(studentB)    graph[studentB].append(studentA)for index in range(1, len(visited)):    if not visited[index]:        visited[index] = True        list_of_connected_students = finding_connected_component(graph, index)        if len(list_of_connected_students) > 3:            isHavingSolution = False            break        else:            group[len(list_of_connected_students)].append(list_of_connected_students)if len(group[2]) > len(group[1]) or not isHavingSolution:    print(-1)else:    while len(group[2]) > 0:        current_group_2 = group[2].pop()        current_group_1 = group[1].pop()        group[3].append(current_group_2 + current_group_1)    if len(group[1])%3 != 0: print(-1)    else:        index = 0        group_whateverleft = []        for element in group[1]:            group_whateverleft.append(element[0])        if len(group_whateverleft)%3 != 0:            print(-1)        else:            last_group_3 = [group_whateverleft[i:i+3] for i in range(0, len(group_whateverleft), 3)]            for element in last_group_3:                group[3].append(element)            for element in group[3]:                element = sorted(element, reverse=True)                print(' '.join(map(str, element)))
