import java.util.*;import java.io.*;import java.math.*; public class First{          public static void process()throws IOException    {          int n = ni();          int m = ni();          ArrayList<HashSet<Integer>> list = new ArrayList<HashSet<Integer>>();          for(int i=0;i<n/3;i++)          {               HashSet<Integer> temp = new HashSet<Integer>();               list.add(temp);          }          boolean flag = true;          boolean[] visited = new boolean[n];          while(m-->0)          {                int a=ni();a--;               int b=ni();b--;               boolean isFound = false;               if(visited[a] && visited[b])               {                    continue;               }               else if(visited[a] || visited[b])               {                       for(HashSet<Integer> set : list)                       {                                                                                if(set.contains(a) || set.contains(b))                           {                                set.add(a);                                set.add(b);                                visited[a]=true;                                visited[b]=true;                                isFound=true;                                break;                           }                       }               }               else                {                      for(HashSet<Integer> set : list)                       {                                                                                if(set.size()<2)                           {                                set.add(a);                                set.add(b);                                visited[a]=true;                                visited[b]=true;                                isFound=true;                                break;                           }                       }               }               if(isFound==false)               {                    flag=false;               }                          }           for(int i=0;i<n;i++)          {               if(!visited[i])               {                    for(HashSet<Integer> set : list)                    {                          if(set.size()<3)                          {                               set.add(i);                               visited[i]=true;                               break;                          }                    }               }          }          StringBuilder sb = new StringBuilder("");                    for(int i=0;i<n/3;i++)          {               HashSet<Integer> set = list.get(i);               if(set.size()>3)               {                   flag = false;                   break;               }                for(Integer x : set)               {                    sb.append(x+1).append(" ");               }               if(i!=n-1){                  sb.append("\n");              }          }          if(!flag)          {               pn(-1);          }          else{             p(sb.toString());          }      }    	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);     //     long s = System.currentTimeMillis();                    int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}  
