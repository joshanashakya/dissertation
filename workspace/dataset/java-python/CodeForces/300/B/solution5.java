import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set; public class Coach {	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	private int vertices;	private boolean[] visited;	private List<Integer> adj[];	private Map<Integer,Set<Integer>> map;	private boolean isPossible=true;	@SuppressWarnings("unchecked")	public Coach(int vertices) {		this.vertices = vertices;		adj = new LinkedList[vertices];		for (int i = 0; i < vertices; i++) {			adj[i] = new LinkedList<Integer>();		}		this.visited = new boolean[vertices];		map=new HashMap<Integer,Set<Integer>>();	} 	public void addEdge(int a, int b) {		adj[a].add(b);		adj[b].add(a);	} 	public void performTask() {		int team=1;		for(int i=1;i<vertices;i++) {			if(visited[i]==false && adj[i].size()>0) {				int first=i;				Set<Integer> members=new HashSet<Integer>();				performTraversal(first,members);				if(members.size()>3) {					isPossible=false;					break;				}				map.put(team, members);				team++;			}		}		if(isPossible==false) {			return;		}		int start=1;		for(int teamId:map.keySet()) {			Set<Integer> mem=map.get(teamId);			while(mem.size()<3) {				int el=getNextUnvisited(start);				if(el==-1) {					isPossible=false;					break;				}				start=el;				mem.add(el);			}			map.put(teamId,mem);		}		int requiredTeams=vertices/3;		if(map.size()==requiredTeams) {			return;		}		while(map.size()<requiredTeams) {			Set<Integer> mem=new HashSet<Integer>();			for(int i=1;i<=3;i++) {				int el=getNextUnvisited(start);				if(el==-1) {					break;				}				start=el;				mem.add(el);			}			map.put(team,mem);			team++;		}		}private int getNextUnvisited(int start) {	for(int i=start;i<vertices;i++) {		if(visited[i]==false) {			visited[i]=true;			return i;		}	}	return -1;}	public void performTraversal(int node,Set<Integer> member) {		if(visited[node]==false) {			visited[node]=true;			member.add(node);			for(int el:adj[node]) {				if(visited[el]==false)				performTraversal(el,member);			}		}	}	private void printMap() {		if(isPossible==false) {			System.out.println(-1);			return;		}		for(int k:map.keySet()) {			Set<Integer> mem=map.get(k);			for(int el:mem) {				System.out.print(el+" ");			}			System.out.println();		}	} 	public static void main(String[] args) throws IOException {		int[] temp = getIntegerArray();		int n = temp[0];		int m = temp[1];		Coach obj = new Coach(n + 1); 		for (int i = 0; i < m; i++) {			temp = getIntegerArray();			obj.addEdge(temp[0], temp[1]);		}		obj.performTask();		obj.printMap();	} 	private static int[] getIntegerArray() throws IOException {		String[] stringArray = br.readLine().split(" ");		int length = stringArray.length;		int[] arr = new int[length];		for (int i = 0; i < length; i++) {			arr[i] = Integer.parseInt(stringArray[i]);		}		return arr;	}}
