import java.io.*;import java.util.*; public class Main{    public static class AL<T> extends ArrayList<T> {};    public static class HM<T,Integer> extends HashMap<T,T> {};    public static class HS<T> extends HashSet<T> {};        public static void main(String[] args) throws IOException 	{            FastReader fr=new FastReader();            PrintWriter pr=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));                        int n=fr.nxtInt(),cnt=0,ptr=1;            Pair[] a=new Pair[n];            boolean flg[]=new boolean[n],fail=false;            for(int i=0;i<n;i++)             {                int num=fr.nxtInt();                a[i]=new Pair(i,num);            }            Arrays.sort(a,1,n);            StringBuilder sb=new StringBuilder();                        flg[0]=true;            for(int i=0;i<n;i++)            {                if(flg[i])                {                    ptr=i+1;                    while(a[i].y>0&&ptr<n)                    {                        if(!flg[ptr])                        {                            sb.append((a[i].x+1)+" "+(a[ptr].x+1)+"\n");                            flg[ptr]=true;                            cnt++;                            a[i].y--;                        }                        ptr++;                    }                }                else {fail=true; break;}            }            pr.println(fail?-1:(cnt+"\n"+sb));		pr.flush();		pr.close();    }            static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader(){br = new BufferedReader(new InputStreamReader(System.in));}           String nxt()         {             while (st == null || !st.hasMoreElements())             {                 try{st=new StringTokenizer(br.readLine());}                 catch (IOException  e){e.printStackTrace();}             }             return st.nextToken();         }           int nxtInt(){return Integer.parseInt(nxt());}         long nxtLong(){return Long.parseLong(nxt());}         double nxtDoub(){return Double.parseDouble(nxt());}           String nxtLn()         {             String str = "";             try{str = br.readLine();}             catch (IOException e){e.printStackTrace();}             return str;         }     }        public static class Pair implements Comparable<Pair>{        int x,y;             public Pair(int x, int y)        {            this.x = x;            this.y = y;        }         @Override        public int compareTo(Pair p)        {            if(p.y == y) return x - p.x;            return p.y - y;        }    }}
