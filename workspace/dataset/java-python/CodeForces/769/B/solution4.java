import java.io.*;import java.util.*; public class Solution {    static int n;    static PriorityQueue<Pair> pq;    static ArrayList<Pair> sol;     public static void dfs (int node, int count) {        while (count -- > 0) {            if (!pq.isEmpty()) {                Pair max = pq.poll();                sol.add(new Pair(node, max.x));                dfs(max.x, max.y);            }        }    }     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        n = sc.nextInt();        int first = sc.nextInt();        pq = new PriorityQueue<>();        sol = new ArrayList<>();        for (int i = 1; i < n; i++) {            pq.add(new Pair(i, sc.nextInt()));        }        dfs(0, first);        if (pq.isEmpty()) {            System.out.println(sol.size());            for (int i = 0; i < sol.size(); i++) {                System.out.println((sol.get(i).x + 1) + " " + (sol.get(i).y + 1));            }        }        else {            System.out.println(-1);        }      }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream System) throws FileNotFoundException {            br = new BufferedReader(new InputStreamReader(System));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }         public void waitForInput() {            for (long i = 0; i < 3e9; i++)                ;        }    }    static class Pair implements Comparable<Pair>{        int x;        int y;         Pair(int start, int end) {            this.x = start;            this.y = end;        }         @Override        public int compareTo(Pair o) {            return o.y - this.y;        }    } }
