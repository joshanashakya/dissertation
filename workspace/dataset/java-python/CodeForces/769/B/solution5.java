import java.io.*;import java.util.*; public class Main {    public void solve() {        int n = ni();        User[] users = new User[n];        for (int i = 0; i < n; i++) {            users[i] = new User(i, ni());        }        Arrays.sort(users);        int s = 0, r = 1;        StringBuilder ans = new StringBuilder();        while ((r < n) && (s < n)) {            if (users[s].mc == 0) {                break;            }            while ((users[s].mc > 0) && (r < n)) {                ans.append(users[s].i + 1).append(" ").append(users[r].i + 1).append("\n");                users[s].mc--;                r++;            }            s++;        }        if (r == n) {            write(n -1 + "\n");            write(ans.toString());        } else {            write("-1\n");        }    }     class User implements Comparable<User> {        int i, mc;        public User(int i, int mc) {            this.i = i;            this.mc = mc;        }        public int compareTo(User o) {            if (i == 0) return -1;            if (o.i == 0) return 1;            return Integer.compare(o.mc, this.mc);        }    }        public static void main(String[] args) {        Main m = new Main();        m.solve();        try {            m.out.close();        } catch (IOException e) {}    }     BufferedReader in;    BufferedWriter out;    StringTokenizer tokenizer;    public Main() {        in = new BufferedReader(new InputStreamReader(System.in));        out = new BufferedWriter(new OutputStreamWriter(System.out));    }    public String n() {        if (tokenizer == null || !tokenizer.hasMoreTokens()) {            try {                tokenizer = new StringTokenizer(in.readLine());            } catch (IOException e) {}        }        return tokenizer.nextToken();    }    public int ni() {        return Integer.parseInt(n());    }    public long nl() {        return Long.parseLong(n());    }    public void write(String s) {        try {            out.write(s);        } catch (IOException e) {}    }}
