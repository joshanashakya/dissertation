import java.util.*;import java.io.*; public class CF500B2 {	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));    static int[] arr;    static int[] id, size;    static int[][] matrix;    static ArrayList<ArrayList<Integer>> components; 	public static void main(String[] args) throws IOException {        int n = Integer.parseInt(br.readLine());        String[] first = br.readLine().split(" ");        arr = new int[n];        id = new int[n];        size = new int[n];        matrix = new int[n][n];        components = new ArrayList<ArrayList<Integer>>();        for(int i = 0; i < n; i++) {            arr[i] = Integer.parseInt(first[i]);            id[i] = i;            size[i] = 1;            components.add(new ArrayList<Integer>());        }         for (int i = 0; i < n; i++) {            String[] line = br.readLine().split("");            for (int j = 0; j < n; j++) {                int temp = Integer.parseInt(line[j]);                if (temp == 1 && i < j) {                    union(i, j);                }            }        }         for(int i = 0; i < n; i++) {            int root = root(i);            components.get(root).add(i);        }         for(int i = 0; i < n; i++) {            ArrayList<Integer> curr = components.get(i);            if(curr.size() > 0) {                sortSubset(curr);            }        }         StringBuilder s = new StringBuilder();        for (int i = 0; i < n; i++) {            s.append(arr[i] + "");            if (i != n - 1) {                s.append(" ");            }        }        bw.write(s.toString() + "\n"); 		bw.close();    }     static void sortSubset(ArrayList<Integer> curr) {        int n = curr.size();        for(int i = 0; i < n-1; i++) {            for(int j = 0; j < n - i - 1; j++) {                int idx = curr.get(j);                int nextIdx = curr.get(j+1);                if(arr[idx] > arr[nextIdx]) {                    int temp = arr[idx];                    arr[idx] = arr[nextIdx];                    arr[nextIdx] = temp;                }            }        }    }        static int root(int i) {        if(id[i] != i) id[i] = root(id[i]);        return id[i];    }     static boolean find(int p, int q) {        return root(p) == root(q);    }     static void union(int p, int q) {        int i = root(p);        int j = root(q);        if(size[i] < size[j]) {            id[i] = j;            size[j] += size[i];        }        else {            id[j] = i;            size[i] += size[j];        }    }}
