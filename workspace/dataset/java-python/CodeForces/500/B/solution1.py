import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictinput = iter(sys.stdin.buffer.read().decode().splitlines()).__next__Neo = lambda : list(map(int,input().split()))# test, = Neo() def find(i):    if i == par[i]:        return i    par[i] = find(par[i])    return par[i] def Union(a,b):    a = find(a)    b = find(b)    if rank[a] < rank[b]:        a,b = b,a    par[b] = a    rank[a] += rank[b]n, = Neo()l = Neo()par = list(range(n))rank = [0]*nfor i in range(n):    s = input()    for j in range(n):        if s[j]=='1':            Union(i, j) s = set()for i in range(n):    s.add(find(i)) dic = defaultdict(list)for i in range(n):    j = find(i)    dic[j].append(l[i]) for i in s:    dic[i].sort()    dic[i].reverse() ans = []for i in range(n):    j = find(i)    ans.append(dic[j].pop()) print(*ans)
