import sys n=int(input())a=list(map(lambda x:int(x),sys.stdin.readline().split()))matrix=[]for _ in range(n):    row=input()    row=list(row)    row=list(map(lambda x:int(x),row))    matrix.append(row) class DisjSet:    def __init__(self, n):        # Constructor to create and        # initialize sets of n items        self.rank = [1] * n        self.parent = [i for i in range(n)]        self.extra = []     # Finds set of given item x    def find(self, x):         # Finds the representative of the set        # that x is an element of        if (self.parent[x] != x):            # if x is not the parent of itself            # Then x is not the representative of            # its set,            self.parent[x] = self.find(self.parent[x])         # so we recursively call Find on its parent        # and move i's node directly under the        # representative of this set         return self.parent[x]     # Do union of two sets represented    # by x and y.    def Union(self, x, y):         # Find current sets of x and y        xset = self.find(x)        yset = self.find(y)         # If they are already in same set        if xset == yset:            self.extra.append((x, y))            return         # Put smaller ranked item under        # bigger ranked item if ranks are        # different        if self.rank[xset] < self.rank[yset]:            self.parent[xset] = yset         elif self.rank[xset] > self.rank[yset]:            self.parent[yset] = xset         # If ranks are same, then move y under        # x (doesn't matter which one goes where)        # and increment rank of x's tree        else:            self.parent[yset] = xset            self.rank[xset] = self.rank[xset] + 1obj=DisjSet(n)for i in range(n):    for j in range(n):        if matrix[i][j]==1:            obj.Union(i,j)hashmap={}for i in range(n):    temp=obj.find(i)    if temp not in hashmap:        hashmap[temp]=[]    hashmap[temp].append(i)final=[0 for _ in range(n)]for k in hashmap:    temp=[a[i] for i in hashmap[k]]    temp.sort()    for i in range(0,len(temp)):        final[hashmap[k][i]]=temp[i]print(*final) 
