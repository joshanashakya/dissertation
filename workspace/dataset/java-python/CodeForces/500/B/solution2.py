import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def solve():	G = defaultdict(list) 	def addEdge(a,b):		G[a].append(b)		# G[b].append(a) 	def dfs(node):		d = deque()		d.append(node)		vis[node] = True		ind = [];t = []		while d:			x = d.pop()			ind.append(x)			t.append(A[x])			for i in G.get(x,[]):				if not vis[i]:					vis[i] = True					d.append(i)		ind.sort(reverse = True)		t.sort(reverse = True)		while t:			Ans[ind.pop()] = t.pop()  	n, =aj()	A = aj()	vis = [False]*(n+1) 	for i in range(n):		s= input()		for j in range(len(s)):			if s[j] == '1':				addEdge(i,j) 	Ans = [-1]*n	for i in range(n):		if not vis[i]:			dfs(i)	print(*Ans)   try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
