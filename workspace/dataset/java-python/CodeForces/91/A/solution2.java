import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class CF91A {    public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         char[] s1 = sc.nextToken().toCharArray(), s2 = sc.nextToken().toCharArray();        int[][] nextPos = new int[s1.length][26];        for (int[] a : nextPos)            Arrays.fill(a, -1);         // Forward pass        for (int i = 0; i < s1.length; i++) {            int c = s1[i] - 'a';            for (int j = i - 1; j >= 0; j--) {                if (nextPos[j][c] != -1)                    break;                nextPos[j][c] = i;            }        }        // Reverse pass        for (int i = 0; i < s1.length; i++) {            int c = s1[i] - 'a';            for (int j = s1.length - 1; j >= i; j--) {                if (nextPos[j][c] != -1)                    break;                nextPos[j][c] = i;            }        }         int reps = 0;        int pos = s1.length - 1;        boolean possible = true;        for (char c : s2) {            int nxt = nextPos[pos][c - 'a'];            if (nxt == -1) {                possible = false;                break;            }            if (nxt <= pos)                reps++;            pos = nxt;        }        pw.println(possible ? reps : -1);        pw.flush();    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
