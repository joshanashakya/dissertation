import java.io.*;import java.util.*;public class Main {    public static void main(String args[]){        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int a[]=new int[n];            int o=0,t=0;            for(int i=0;i<n;i++)            {                a[i]=input.nextInt();                if(a[i]==1)                {                    o++;                }                else                {                    t++;                }            }            int c=1;            ArrayList<Integer> l=new ArrayList<>();            for(int i=0;i<n-1;i++)            {                if(a[i]!=a[i+1])                {                    l.add(c);                    c=1;                }                else                {                    c++;                }            }            l.add(c);            ArrayList<Integer> ones=new ArrayList<>();            ArrayList<Integer> twos=new ArrayList<>();            int x=0;            int y=1;            if(a[0]!=1)            {                ones.add(0);                x++;                y=0;            }            for(int i=x;i<l.size();i+=2)            {                ones.add(l.get(i));            }            for(int i=y;i<l.size();i+=2)            {                twos.add(l.get(i));            }            if(a[n-1]==1)            {                twos.add(0);            }            int dp[][][]=new int[2][ones.size()][4];            for(int j=0;j<ones.size();j++)            {                for(int i=0;i<2;i++)                {                    if(i==0 && j==0)                    {                        dp[i][j][0]=ones.get(0);                    }                    else if(i==1 && j==0)                    {                        dp[i][j][1]=dp[0][0][0]+twos.get(j);                    }                    else                    {                        if(i==0)                        {                            dp[i][j][0]=dp[i][j-1][0]+ones.get(j);                            dp[i][j][2]=Math.max(dp[i][j-1][2],dp[1][j-1][1])+ones.get(j);                        }                        else                        {                            dp[i][j][1]=Math.max(dp[0][j][0],dp[i][j-1][1])+twos.get(j);                            dp[i][j][3]=Math.max(dp[0][j][2],dp[i][j-1][3])+twos.get(j);                        }                    }                }            }            out.println(Math.max(dp[1][ones.size()-1][1],dp[1][ones.size()-1][3]));        }        out.close();    }    static class FastReader    {        BufferedReader br;        StringTokenizer st;        public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }        String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt()        {            return Integer.parseInt(next());        }        long nextLong()        {            return Long.parseLong(next());        }        double nextDouble()        {            return Double.parseDouble(next());        }        String nextLine()        {            String str="";            try            {                str=br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
