/*[ ( ^ _ ^ ) ]*/import java.io.*;import java.util.*;  public class test {    int INF = (int)1e9;    long MOD = 1000000007;                void solve(InputReader in, PrintWriter out) throws IOException {        long p = in.nextLong();        long k = in.nextInt();        ArrayList<Long> rs = new ArrayList<>();        while(p!=0) {            long r = p%k;            if(r<0) r+=k;            rs.add(r%k);            p -= (r%k);            p /= k;            p *= -1;        }        out.println(rs.size());        for(long x: rs) out.print(x+" ");        out.println();    }            public static void main(String[] args) throws IOException {        if(args.length>0 && args[0].equalsIgnoreCase("d")) {            DEBUG_FLAG = true;        }        InputReader in = new InputReader();        PrintWriter out = new PrintWriter(System.out);        int t = 1;//in.nextInt();        long start = System.nanoTime();        while(t-->0) {            new test().solve(in, out);        }        long end = System.nanoTime();        debug("\nTime: " + (end-start)/1e6 + " \n\n");        out.close();    }        static boolean DEBUG_FLAG = false;    static void debug(String s) {        if(DEBUG_FLAG) System.out.print(s);    }        public static void show(Object... o) {        System.out.println(Arrays.deepToString(o));    }        static class InputReader {        static BufferedReader br;        static StringTokenizer st;            public InputReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }                String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }                long nextLong() {            return Long.parseLong(next());        }                double nextDouble() {            return Double.parseDouble(next());        }    }}
