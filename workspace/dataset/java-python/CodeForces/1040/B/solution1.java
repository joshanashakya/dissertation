import java.util.*;import java.io.*;import java.math.*; public class First{     public static ArrayList<Integer> getAns(int m, int in, int shift,int y,int n)    {         ArrayList<Integer> list = new ArrayList<Integer>();         in-=shift;         for(int i=0;i<m;i++)         {              list.add(in);              in+=y;         }         return list;    }    public static void process()throws IOException    {         int n = ni();         int k = ni();         int y = (2*k)+1;         int count=0;         ArrayList<Integer> list = new ArrayList<Integer>();         if(k>=((n+1)/2))         {              count=1;              list.add((n+1)/2);         }         else         {               int m = n/y;               int in = (y+1)/2;               int left = n%y;;               if(left==0)               {                    list = getAns(m,in,0,y,n);               }               else               {                    if(left<=k+1)                    {                         list = getAns(m,in,k+1-left,y,n);                         list.add(n);                    }                    else                    {                          list = getAns(m,in,0,y,n);                          int h = list.get(list.size()-1);                          list.add(h+(2*k)+1);                    }               }               count=list.size();         }         pn(count);         StringBuilder sb = new StringBuilder("");         for(Integer i : list)         {              sb.append(i).append(" ");         }         pn(sb.toString());    }     	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);     //     long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}  
