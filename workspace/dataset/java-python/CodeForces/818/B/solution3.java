import java.io.IOException;import java.io.InputStream;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Scanner;import java.util.StringTokenizer;import java.util.Vector;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter; public class Main {    final static int maxn = (int)(3e5 + 5);    final static long linf = 0x3f3f3f3f3f3f3f3fL;    final static long mod = 998244353L;    static int[] l = new int[maxn];    static int[] a = new int[maxn];    static boolean[] vis = new boolean[maxn];    static boolean solve(int n, int m) {        for(int i = 2; i <= m; ++i) {        	int dt = l[i] - l[i - 1];        	if(dt <= 0) {        		dt += n;        	}        	if(a[l[i - 1]] != -1 && a[l[i - 1]] != dt) {        		return false;        	}        	if(a[l[i - 1]] == -1 && vis[dt]) {        		return false;        	}        	a[l[i - 1]] = dt;        	vis[dt] = true;        }        int pos = 1;        for(int i = 1; i <= n; ++i) {        	if(a[i] != -1) {        		continue;        	}        	while(pos <= n && vis[pos]) {        		++pos;        	}        	a[i] = pos;        	vis[pos] = true;        }        return true;    }    public static void main(String[] args) {        InputStream inputStream = System.in;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(System.out);        int n = in.nextInt();        int m = in.nextInt();        for(int i = 1; i <= n; ++i) {        	a[i] = -1;        	vis[i] = false;        }        for(int i = 1; i <= m; ++i) {        	l[i] = in.nextInt();        }        if(!solve(n, m)) {        	out.println("-1");        } else {        	for(int i = 1; i <= n; ++i) {        		if(i > 1) {        			out.print(" ");        		}        		out.print(a[i]);        	}        	out.println("");        }        out.flush();//        in.close();    }    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;        public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }        public String next() {            while(tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }    }} /* */		          		 	 	 	   			 	
