import java.util.*;import java.io.*;import java.lang.*; public class MainClass {	    private static BufferedReader br = null;	private static StringTokenizer st = null;		static {			br = new BufferedReader(new InputStreamReader(System.in));	}		private static String str() throws IOException {		return br.readLine();	}		private static int ints() throws IOException {		return Integer.parseInt(br.readLine());	}		private static int[] ints(int N) throws IOException {		st = new StringTokenizer(br.readLine());		int[] nums = new int[N];		for(int i = 0; i < N; i += 1) {			nums[i] = Integer.parseInt(st.nextToken());		}		return nums;	}		public static void main(String[] args) throws IOException {		String[] str = br.readLine().split(" ");		long N = Long.parseLong(str[0]);		long K = Long.parseLong(str[1]);		Solution obj = new Solution();		long[] ans = obj.dipCertiNotWinners(N, K);		System.out.println(ans[0] + " " + ans[1] + " " + ans[2]);		br.close();    }} class Solution {	public long[] dipCertiNotWinners(long N, long K) {		//a -> number of students with diplomas		//b -> number of students with certificates		//b = a.k		//total_winners = (a + a.K) -> a*(1 + K)		//total_winners <= N / 2 -> Means total_winners should not greater than half of N / 2 -> means shold be <= N / 2		//so max value of a -> (N / 2) / (1 + K)	    long H = N / 2;		long a = H / (1 + K);				if(a == 0) return new long[]{0, 0, N}; //Means there are no winners -> conditions are not hold.						long b  = K * a;				return new long[]{a, b, (N - (a + b))};	}} 
