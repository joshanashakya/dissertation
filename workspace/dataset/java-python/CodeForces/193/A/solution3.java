//Problem Name FOX AND NAMES import java.io.*;import java.util.*;import java.math.*;     public class A {	 	   InputStream is;   static PrintWriter out;   static int timer;   static int inTime[][];   static int low[][];   static ArrayList<pair> ans;	    static int ctr;	    static HashSet<Integer> hs;	    static int dirx[]={0,1,0,-1};   static int diry[]={1,0,-1,0};    static int fill;	    static class pair   {	   int idx;	   int val;	   pair(int i,int v)	   {		   idx=i;		   val=v;	   }   }	    static class cmp implements Comparator<pair>   {	   public int compare(pair p1,pair p2)	   {		   if(p1.idx==p2.idx)			   return p1.val-p2.val;		   return p1.idx-p2.idx;	   }   }	 	    /*static void isBridge(LinkedList<Integer> l[],int u,int par,int vis[])   {	   	   vis[u]=1;	   inTime[u]=low[u]=timer;	   timer++;	   	   for(int v:l[u])	   {		   if(v==par) continue;		   		   if(vis[v]==1)		   {			   low[u]=Math.min(low[u],inTime[v]);		   }		   else		   {			   isBridge(l,v,u,vis);			   if(low[v]>inTime[u])			   {				   				   ctr++;			   }			   			   low[u]=Math.min(low[u],low[v]);		   }	   }   }*/	    static boolean check(int x,int y,int n,int m,char g[][] )   {	   if(x>=0 && y>=0 && x<n && y<m && g[x][y]=='#')		   return true;	   	   return false;   }	    static void ArticulationPoint(char[][] g,int u,int v,int pu,int pv,int vis[][],int n,int m)   {	   vis[u][v]=1;	   inTime[u][v]=low[u][v]=timer++;	   int children=0;	   for(int i=0;i<=3;i++)	   {		   int xx=u+dirx[i];		   int yy=v+diry[i];		   		   if(check(xx,yy,n,m,g)){		   if(xx==pu && yy==pv)			   continue;		   		   		   		   if(vis[xx][yy]==1)		   {			   low[u][v]=Math.min(low[u][v],inTime[xx][yy]);		   }		   else		   {			   ArticulationPoint(g,xx,yy,u,v,vis,n,m);			   if(inTime[u][v]<=low[xx][yy] && (xx!=pu || yy!=pv))				   fill=1;			   low[u][v]=Math.min(low[u][v],low[xx][yy]);			   children++;		   }		   }		   	   }	   	   if(u==pu && v==pv && children>1)		   fill=1;	   	      }	 static void dfs(char [][] g,int u,int v,int pu,int pv,int visited[][],int n,int m){  inTime[u][v]=low[u][v]=timer++;  visited[u][v]=1;  int child=0;  for(int i=0;i<=3;i++)  {    int tempx=u+dirx[i];    int tempy=v+diry[i];    if(check(tempx,tempy,n,m,g))    {      if(visited[tempx][tempy]==0)      {        child++;        dfs(g,tempx,tempy,u,v,visited,n,m);        low[u][v]=Math.min(low[u][v],low[tempx][tempy]);        if(u==pu && v==pv)        {          if(child>1)fill=1;        }        else if(low[tempx][tempy]>=inTime[u][v])fill=1;      }      else if(tempx!=pu || tempy!=pv)low[u][v]=Math.min(low[u][v],inTime[tempx][tempy]);    }  }}	       void solve()   {	   		   		   int n=ni(),m=ni();	   	   char g[][]=new char[n][m];	   	   int ctr=0;	   	   int s=0,d=0;	   		int f=0;	   	   for(int i=0;i<n;i++)		   {			   for(int j=0;j<m;j++)			   {				   g[i][j]=nc();				   if(g[i][j]=='#')				   {					   if(f==0){					   f=1;					   s=i;					   d=j;}					   ctr++;				   }			   }		   }	   	   		if(ctr<=2)			{				out.println("-1");				return;			}		   		   		   low=new int[n][m];		   inTime=new int[n][m];		   timer=0;		   		   int vis[][]=new int[n][m];		 			fill=2;				   dfs(g,s,d,s,d,vis,n,m);				   			out.println(fill);		    		  		   	   	  		   	  	  	     }	  	   	  	   		   	   	   	   	   	    //---------- I/O Template ----------        public static void main(String[] args) { new A().run(); }    void run() {         is = System.in;         out = new PrintWriter(System.out);        solve();        out.flush();    }        byte input[] = new byte[1024];    int len = 0, ptr = 0;        int readByte() {         if(ptr >= len) { ptr = 0;             try { len = is.read(input); }             catch(IOException e) { throw new InputMismatchException(); }             if(len <= 0) { return -1; }         } return input[ptr++];    }    boolean isSpaceChar(int c) { return !( c >= 33 && c <= 126 ); }    int skip() {         int b = readByte();         while(b != -1 && isSpaceChar(b)) { b = readByte(); }         return b;    }        char nc() { return (char)skip(); }    String ns() {         int b = skip();         StringBuilder sb = new StringBuilder();         while(!isSpaceChar(b)) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    String nLine() {         int b = skip();         StringBuilder sb = new StringBuilder();         while( !(isSpaceChar(b) && b != ' ') ) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    int ni() {         int n = 0, b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         if(b == -1) { return -1; }  //no input         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }    long nl() {         long n = 0L;    int b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }     double nd() { return Double.parseDouble(ns()); }    float nf() { return Float.parseFloat(ns()); }    int[] na(int n) {         int a[] = new int[n];         for(int i = 0; i < n; i++) { a[i] = ni(); }         return a;    }    char[] ns(int n) {         char c[] = new char[n];         int i, b = skip();         for(i = 0; i < n; i++) {             if(isSpaceChar(b)) { break; }             c[i] = (char)b; b = readByte();         } return i == n ? c : Arrays.copyOf(c,i);    }	static void pa(int a[])	{		for(int i=0;i<a.length;i++)		out.print(a[i]+" ");		out.println();	}	static void pa(long a[])	{		for(int i=0;i<a.length;i++)		out.print(a[i]+" ");		out.println();	}	}//6070936168086962
