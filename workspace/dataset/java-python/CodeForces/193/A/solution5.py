import java.io.*;import java.util.*; public class Main {    private static char[][] grid;    private static int[] iDiffs = {-1, 0, 1, 0};    private static int[] jDiffs = {0, 1, 0, -1};     public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));         StringTokenizer st = new StringTokenizer(br.readLine());        int n = Integer.parseInt(st.nextToken());        int m = Integer.parseInt(st.nextToken());         grid = new char[n][m];        for (int i = 0; i < n; i++) {            grid[i] = br.readLine().toCharArray();        }         int cntSqrs = 0;        for (int k = 0; k < grid.length; k++) {            for (int l = 0; l < grid[k].length; l++) {                if (grid[k][l] == '#') {                    cntSqrs++;                }            }        }         if (cntSqrs <= 1) {            pw.println(-1);            pw.close();            return;        }         if (cntSqrs == 2) {            if (isConnected()) {                pw.println(-1);            } else {                pw.println(0);            }            pw.close();            return;        }         if (!isConnected()) {            pw.println(0);            pw.close();            return;        }         for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                if (grid[i][j] == '#') {                    grid[i][j] = '.';                    if (!isConnected()) {                        pw.println(1);                        pw.close();                        return;                    }                    grid[i][j] = '#';                }            }        }         pw.println(2);        pw.close();    }     private static boolean isConnected() {        int i = -1, j = -1;         int cntSqrs = 0;        for (int k = 0; k < grid.length; k++) {            for (int l = 0; l < grid[k].length; l++) {                if (grid[k][l] == '#') {                    i = k;                    j = l;                    cntSqrs++;                }            }        }        if (cntSqrs <= 1) {            return true;        }         boolean[][] visited = new boolean[grid.length][grid[0].length];        return dfs(i, j, visited) == cntSqrs;    }     private static int dfs(int i, int j, boolean[][] visited) {        if (visited[i][j]) return 0;        visited[i][j] = true;        int ret = 1;        for (int k = 0; k < 4; k++) {            int adjI = i + iDiffs[k];            int adjJ = j + jDiffs[k];            if (adjI >= 0 && adjJ >= 0 && adjI < grid.length && adjJ < grid[0].length) {                if (grid[adjI][adjJ] == '#') {                    ret += dfs(adjI, adjJ, visited);                }            }        }        return ret;    }}
