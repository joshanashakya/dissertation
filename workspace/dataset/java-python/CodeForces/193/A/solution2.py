# by the authority of GOD     author: manhar singh sachdev # import os,sysfrom io import BytesIO, IOBasefrom collections import deque def func(lst,st,po,n,m):    dirs = [(0,1),(0,-1),(1,0),(-1,0)]    x = (st[0] if st[0]!=po else st[1])    curr,se,cnt = deque([x]),[[0]*m for _ in range(n)],0    while len(curr):        y = curr.popleft()        for i in dirs:            z = (y[0]+i[0],y[1]+i[1])            if (0 <= z[0] < n and 0 <= z[1] < m and                lst[z[0]][z[1]] == '#' and not se[z[0]][z[1]]):                curr.append(z)                se[z[0]][z[1]] = 1                cnt += 1    return cnt!=len(st)-1 def main():    n,m = map(int,input().split())    lst = [list(input().strip()) for _ in range(n)]    st = []    for i in range(n):        for j in range(m):            if lst[i][j] == '#':                st.append((i,j))    if len(st) < 3:        print(-1)        return    for i in range(n):        for j in range(m):            if lst[i][j] == '#':                lst[i][j] = '.'                if func(lst,st,(i,j),n,m):                    print(1)                    return                lst[i][j] = '#'    print(2) #Fast IO RegionBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == '__main__':    main()
