import java.util.function.Consumer;import java.util.function.IntFunction;import java.io.BufferedReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.Collection;import java.util.Map;import java.util.function.Function;import java.io.InputStreamReader;import java.io.IOException;import java.util.TreeMap;import java.util.function.Predicate;import java.util.AbstractSet;import java.util.Set;import java.util.stream.Stream;import java.util.TreeSet;import java.util.StringTokenizer;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * @author Artyom Korzun */public class Main {	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		FastScanner in = new FastScanner(inputStream);		PrintWriter out = new PrintWriter(outputStream);		TaskA solver = new TaskA();		solver.solve(1, in, out);		out.close();	}} class TaskA {     public void solve(int testNumber, FastScanner in, PrintWriter out) {        int m = in.nextInt();        int k = in.nextInt();         TreeMap<Integer, Man> allMans = new TreeMap<>();        for (int i = 0; i < m; i++) {            int id1 = in.nextInt();            int id2 = in.nextInt();            Man man1 = allMans.computeIfAbsent(id1, Man::new);            Man man2 = allMans.computeIfAbsent(id2, Man::new);            man1.friends.add(man2);            man2.friends.add(man1);        }         allMans.values().stream().forEach(man -> {            TreeSet<Man> notFriends = new TreeSet<>(allMans.values());            notFriends.remove(man);            notFriends.removeAll(man.friends);            Man[] supposedFriends = notFriends.stream().filter(notFriend -> {                Set<Man> mutualFriends = new TreeSet<>(man.friends);                mutualFriends.retainAll(notFriend.friends);                int mutualFriendsInPercent = mutualFriends.size() * 100 / man.friends.size();                return mutualFriendsInPercent >= k;            }).toArray(Man[]::new);             out.print(man.id);            out.print(": ");            out.print(supposedFriends.length);            for (Man supposedFriend : supposedFriends) {                out.print(' ');                out.print(supposedFriend.id);            }             out.println();        });     }     private static final class Man implements Comparable<Man> {         private final int id;        private final Set<Man> friends = new TreeSet<>();         private Man(int id) {            this.id = id;        }         public int compareTo(Man o) {            return Integer.compare(id, o.id);        }    } } class FastScanner {     private final BufferedReader reader;     private StringTokenizer tokenizer;     public FastScanner(InputStream stream) {        reader = new BufferedReader(new InputStreamReader(stream));    }      public int nextInt() {        return Integer.parseInt(next());    }     public String next() {        while (tokenizer == null || !tokenizer.hasMoreTokens())            tokenizer = new StringTokenizer(nextLine());         return tokenizer.nextToken();    }     private String nextLine() {        try {            return reader.readLine();        } catch (IOException e) {            throw new RuntimeException(e);        }    } } 
