import static java.lang.Math.*;import static java.lang.System.currentTimeMillis;import static java.lang.System.exit;import static java.lang.System.arraycopy;import static java.util.Arrays.sort;import static java.util.Arrays.binarySearch;import static java.util.Arrays.fill; import java.util.*;import java.io.*; public class Main {     public static void main(String[] args) throws IOException {        try {            if (new File("input.txt").exists())                System.setIn(new FileInputStream("input.txt"));        } catch (SecurityException e) {        }        new Main().run();    }     BufferedReader in;    PrintWriter out;    StringTokenizer st = new StringTokenizer("");     private void run() throws IOException {        in = new BufferedReader(new InputStreamReader(System.in));        out = new PrintWriter(System.out);        solve();        in.close();        out.close();    }        final int MAXN = 211;        int[][] g = new int[MAXN][MAXN];    int[] deg = new int[MAXN];    int m, k;        void add(int u, int v) {        g[u][v] = 1;        g[v][u] = 1;                deg[u]++;        deg[v]++;    }        TreeMap<Integer, Integer> nameToNum = new TreeMap<Integer, Integer>();    TreeMap<Integer, Integer> numToName = new TreeMap<Integer, Integer>();    TreeMap<Integer, LinkedList<Integer>> possibleFriends = new TreeMap<Integer, LinkedList<Integer>>();    int num = 0;        void addName(int name) {        if (!nameToNum.containsKey(name)) {            nameToNum.put(name, num);            numToName.put(num, name);                        num++;        }    }        int getNum(int name) {        if (!nameToNum.containsKey(name))            addName(name);        return nameToNum.get(name);    }        int getName(int num) {        return numToName.get(num);    }        void addPossibleFriend(int to, int f) {        possibleFriends.get(to).add(f);    }        void addEmptyFriendList(int to) {        possibleFriends.put(to, new LinkedList<Integer>());    }     private void solve() throws IOException {                m = nextInt();        k = nextInt();                for (int i = 0; i < m; i++) {            int name1 = nextInt();            int name2 = nextInt();                        add(getNum(name1), getNum(name2));        }                        for (int x = 0; x < num; x++) {            addEmptyFriendList(x);                        for (int y = 0; y < num; y++) {                if (g[x][y] == 0 && x != y) {                    int all = deg[x];                    int cnt = 0;                                        for (int friend = 0; friend < num; friend++) {                        if (g[x][friend] == 1 && g[y][friend] == 1) {                            cnt++;                        }                    }                                        // all/100 = cnt/x, x = 100 * cnt / all, 100 * cnt >= k * all                    if (100 * cnt >= k * all) {                        addPossibleFriend(x, y);                    }                }            }        }                        int[] names = new int[possibleFriends.size()];                int cnt = 0;        for (Map.Entry<Integer, LinkedList<Integer>> e: possibleFriends.entrySet()) {            names[cnt++] = getName(e.getKey());        }        sort(names);                int[] friendsArr = new int[MAXN];                for (int i = 0; i < names.length; i++) {            int num = getNum(names[i]);            LinkedList<Integer> friends = possibleFriends.get(num);            out.print(getName(num) + ": " + friends.size());                        int p = 0;            for (Integer f: friends) {                friendsArr[p++] = getName(f);            }                        sort(friendsArr, 0, p);                        for (int j = 0; j < p; j++)                out.print(" " + friendsArr[j]);            out.println();        }    }     String nextToken() throws IOException {        while (!st.hasMoreTokens())            st = new StringTokenizer(in.readLine());        return st.nextToken();    }    int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }    long nextLong() throws IOException {        return Long.parseLong(nextToken());    }    double nextDouble() throws IOException {        return Double.parseDouble(nextToken());    }    String nextLine() throws IOException {        st = new StringTokenizer("");        return in.readLine();    }    boolean EOF() throws IOException {        while (!st.hasMoreTokens()) {            String s = in.readLine();            if (s == null)                return true;            st = new StringTokenizer(s);        }        return false;    }}
