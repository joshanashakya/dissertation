import java.io.*;import java.lang.reflect.Array;import java.util.*; public class Main {     public static int gcd(int a,int b) {        while (b !=0) {            int tmp = a%b;            a = b;            b = tmp;        }        return a;    }     public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        FastPrinter out = new FastPrinter(System.out);        //FastScanner in = new FastScanner(new InputStreamReader(new FileInputStream(new File("stdin"))));        //FastPrinter out = new FastPrinter(new OutputStreamWriter(new FileOutputStream(new File("stdout"))));        int n = in.nextInt(), k = in.nextInt();        List<Integer>[] ar = new List[n*2];        for(int i = 0; i < n*2; i++)            ar[i] = new ArrayList<>();        int o = 0;        HashMap<Integer, Integer> map = new HashMap<>();        HashMap<Integer, Integer> mapReverse = new HashMap<>();        for(int i = 0; i < n; i++){            int a = in.nextInt(), b = in.nextInt();            if(map.get(a) == null) {map.put(a, o++); mapReverse.put(o-1, a);}            if(map.get(b) == null) {map.put(b, o++); mapReverse.put(o-1, b);}             ar[map.get(a)].add(b);            ar[map.get(b)].add(a);        }         int[] masArrays = new int[mapReverse.size()];        for(int i = 0; i < mapReverse.size(); i++){            masArrays[i] = mapReverse.get(i);        }        Arrays.sort(masArrays);         int[] mas = new int[mapReverse.size()];        for(int i1 = 0; i1 < mapReverse.size(); i1++){            int i = map.get(masArrays[i1]);            Arrays.fill(mas, 0);            if(mapReverse.get(i) == null) continue;             for(int j = 0; j < ar[i].size(); j++){                mas[map.get(ar[i].get(j))] = -5;            }            for(int j = 0; j < mapReverse.size(); j++){                if(mas[j] == -5){                    for(int u = 0; u < ar[j].size(); u++){                        if(mas[map.get(ar[j].get(u))] != -5) mas[map.get(ar[j].get(u))]++;                    }                }            }              String ans = " ";            int kAns = 0;            ArrayList<Integer> ans5 = new ArrayList<>();            for(int j = 0; j < mapReverse.size(); j++){                if (j == i) continue;                if(mas[j] * 100 >= k * ar[i].size()){                    kAns++;                    ans5.add(mapReverse.get(j));                }            }            int[] masAns = new int[ans5.size()];            for(int i5 = 0; i5 < ans5.size(); i5++)                masAns[i5] = ans5.get(i5);            Arrays.sort(masAns);            for(int i5 = 0; i5 < masAns.length; i5++){                ans += Integer.toString(masAns[i5]) + " ";            }            System.out.println(mapReverse.get(i) + ": " + kAns + ans);        }        out.close();    }} class FastPrinter {    private final PrintWriter writer;     public FastPrinter(OutputStream outputStream) {        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));    }     public FastPrinter(Writer writer) {        this.writer = new PrintWriter(writer);    }     public void close() {        writer.close();    }     public void println(long i) {        writer.println(i);    }     public void println(double d) {        writer.println(d);    }     public void println(String s) {        writer.println(s);    }     public void println(String format, Object... args) {        println(String.format(format, args));    }     public void println() {        writer.println();    }     public void print(long i) {        writer.print(i);    }     public void print(char c) {        writer.print(c);    }     public void print(double d) {        writer.print(d);    }     public void print(String s) {        writer.print(s);    }     public void print(String format, Object... args) {        print(String.format(format, args));    }     public void flush() {        writer.flush();    }} class FastScanner {     private BufferedReader reader;    private StringTokenizer st;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;    private SpaceCharFilter filter;     public FastScanner(InputStream stream) {        this.reader = new BufferedReader(new InputStreamReader(stream));        this.st = new StringTokenizer("");    }     public FastScanner(InputStreamReader stream) {        this.reader = new BufferedReader(stream);        this.st = new StringTokenizer("");    }     public int nextInt() {        return Integer.parseInt(next());    }     public long nextLong() {        return Long.parseLong(next());    }     public double nextDouble() {        return Double.parseDouble(next());    }     public String next() {        while (!st.hasMoreTokens()) {            st = new StringTokenizer(readLine());        }        return st.nextToken();    }     public String nextLine() {        st = new StringTokenizer("");        return readLine();    }     public String tryNextLine() {        st = new StringTokenizer("");        return tryReadLine();    }     private String readLine() {        String line = tryReadLine();        if (line == null) throw new InputMismatchException();        return line;    }     private String tryReadLine() {        try {            return reader.readLine();        } catch (IOException e) {            throw new InputMismatchException();        }    }     public int[] nextIntArray(int size) {        int[] array = new int[size];        for (int i = 0; i < size; i++)            array[i] = nextInt();        return array;    }     public int[][] nextIntTable(int rowCount, int columnCount) {        int[][] table = new int[rowCount][];        for (int i = 0; i < rowCount; i++)            table[i] = nextIntArray(columnCount);        return table;    }     public long[] nextLongArray(int size) {        long[] array = new long[size];        for (int i = 0; i < size; i++)            array[i] = nextLong();        return array;    }     public long[][] nextLongTable(int rowCount, int columnCount) {        long[][] table = new long[rowCount][];        for (int i = 0; i < rowCount; i++)            table[i] = nextLongArray(columnCount);        return table;    }     public boolean isSpaceChar(int c) {        if (filter != null)            return filter.isSpaceChar(c);        return isWhitespace(c);    }     public static boolean isWhitespace(int c) {        return c == ' ' || c == '\t' || isEOL(c);    }     public static boolean isEOL(int c) {        return c == '\n' || c == '\r' || c == -1;    }     public interface SpaceCharFilter {        public boolean isSpaceChar(int ch);    }}
