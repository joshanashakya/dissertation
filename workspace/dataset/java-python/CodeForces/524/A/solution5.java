import java.io.*;import java.util.*; public class A {    private BufferedReader reader;    private StreamTokenizer tokenizer;    //    private Scanner in;    private PrintWriter out;     private A() {        reader = new BufferedReader(new InputStreamReader(System.in));        tokenizer = new StreamTokenizer(reader);        // use Scanner for longs or strings and don't mix with StreamTokenizer//        in = new Scanner(reader); // takes +30-50ms        out = new PrintWriter(new OutputStreamWriter(System.out));    }     public static void main(String[] args) throws IOException {        new A().run();    }     private void run() throws IOException {        int m = nextInt();        int k = nextInt();         TreeMap<Integer, TreeSet<Integer>> map = new TreeMap<>();         for (int i = 0; i < m; i++) {            int a = nextInt();            int b = nextInt();             if (!map.containsKey(a)) {                map.put(a, new TreeSet<Integer>());            }             if (!map.containsKey(b)) {                map.put(b, new TreeSet<Integer>());            }             map.get(a).add(b);            map.get(b).add(a);        }         for (int a : map.keySet()) {            TreeSet<Integer> friends = map.get(a);            ArrayList<Integer> maybe = new ArrayList<>(m);             for (int b : map.keySet()) {                if (a != b && !friends.contains(b)) {                    int cnt = 0;                    TreeSet<Integer> bFriends = map.get(b);                     for (int f : friends) {                        if (bFriends.contains(f)) {                            cnt++;                        }                    }                     if (cnt * 100 >= k * friends.size()) {                        maybe.add(b);                    }                }            }             out.printf("%d: %d", a, maybe.size());             for (int b : maybe) {                out.printf(" %d", b);            }             out.printf("\n");        }         out.flush();    }     private int nextInt() throws IOException {        tokenizer.nextToken();        return (int) tokenizer.nval;    }     private double nextDouble() throws IOException {        tokenizer.nextToken();        return tokenizer.nval;    }}
