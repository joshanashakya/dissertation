import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class B {    private static class Solver {        private void solve() throws Exception {            int n = in.nextInt();            int k = in.nextInt();            int[] g = new int[k];            int x4 = n;            int x2 = 2 * n;            for (int i = 0; i < k; i++) {                g[i] = in.nextInt();                int g4 = g[i] / 4;                int cost = Math.min(g4, x4);                x4 -= cost;                g[i] -= cost * 4;            }             if (x4 > 0) {                for (int i = 0; i < k && x4 > 0; i++) {                    if (g[i] == 3) {                        g[i] = 0;                        x4--;                    }                }            }            if (x4 > 0) {                for (int i = 0; i < k && x4 > 0; i++) {                    for (int j = 0; j < k && x4 > 0; j++) {                        if (i == j) {                            continue;                        }                        if (g[i] == 2 && g[j] == 1) {                            g[i] -= 2;                            g[j] -= 1;                            x4--;                        }                    }                }            }            if (x4 > 1) {                for (int i = 0; i < k && x4 > 1; i++) {                    for (int j = 0; j < k && x4 > 1; j++) {                        for (int r = 0; r < k && x4 > 1; r++) {                            if (i == j || i == r || j == r) {                                continue;                            }                            if (g[i] == 2 && g[j] == 2 && g[r] == 2) {                                g[i] -= 2;                                g[j] -= 2;                                g[r] -= 2;                                x4 -= 2;                            }                        }                    }                }            }            if (x4 > 0) {                for (int i = 0; i < k && x4 > 0; i++) {                    if (g[i] == 2) {                        g[i] = 0;                        x4--;                    }                }            }            if (x4 > 0) {                for (int i = 0; i < k && x4 > 0; i++) {                    for (int j = 0; j < k && x4 > 0; j++) {                        if (i == j) {                            continue;                        }                        if (g[i] == 1 && g[j] == 1) {                            g[i] -= 1;                            g[j] -= 1;                            x4--;                        }                    }                }            }            for (int i = 0; i < k; i++) {                int g2 = g[i] / 2;                int cost = Math.min(g2, x2);                x2 -= cost;                g[i] -= cost * 2;            }            int left = x4 + x2;            if (Arrays.stream(g).sum() > left) {                out.println("NO");            } else {                out.println("YES");            }        }    }     //--------------------------------------------------------    private static final MyScanner in = new MyScanner(System.in);    private static final PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));     public static void main(String[] args) throws Exception {        Solver solver = new Solver();        solver.solve();        out.close();    }     public static class MyScanner {        private final BufferedReader br;        private StringTokenizer st;         public MyScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));        }         String next() throws IOException {            while (st == null || !st.hasMoreElements()) {                st = new StringTokenizer(br.readLine());            }            return st.nextToken();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }         String nextLine() throws IOException {            return br.readLine();        }    }}
