import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.Arrays;import java.util.Comparator;import java.util.Random;import java.util.StringTokenizer; public class Solution{		    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		    		int n = fs.nextInt(), k = fs.nextInt();    		int[] have = new int[5];    		have[4] = n;    		have[2] = 2*n;    		    		int[] cnt = new int[5];    		    		for(int i=0;i<k;i++) {    			int x = fs.nextInt();    			while(x>=3) {    				if(have[4]>0) {    					x -= 4; have[4]--;    				}    				else if(have[2]>0) {    					x -= 2; have[2]--;    				}    				else {    					out.println("No");    					out.flush();    					return;    				}    			}    			if(x>0) {    				cnt[x]++;    			}    		}    		    		while(cnt[2]>0) {    			if(have[2]>0) {    				cnt[2]--; have[2]--;    			}    			else if(have[4]>0) {    				cnt[2]--; have[4]--; have[1]++;    			}    			else {    				cnt[2]--; cnt[1] += 2;    			}    		}    		    		    		if(cnt[1]>have[1] + have[2] + 2*have[4]) {    			out.println("No");    		}    		else {    			out.println("Yes");    		}	    		    		    		    		    		    		    		    		    	}    	    		    		    		    	out.close();    		    }                                                    static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
