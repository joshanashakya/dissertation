// https://cs.stanford.edu/people/eroberts/courses/soco/projects/2003-04/dna-computing/clique.htmimport java.util.*;import java.io.*;public class lp{ Â static PrintWriter out = new PrintWriter(System.out);static int get_set(int n){         int count = 0;         while (n > 0) {             n &= (n - 1);             count++;         }         return count; }public static void main(String[] args) {              int n = ni();             int m = ni();             String s[] = new String[n];             HashMap<String,Integer> hm = new HashMap();             int no[][] = new int[n][n];              for(int i=0;i<n;i++){                  s[i] = n();                   hm.put(s[i],i);               }             for(int i=0;i<m;i++){                    String s1 = n();                    String s2 = n();                                  int u = hm.get(s1);                    int v = hm.get(s2);                    no[u][v]=1; no[v][u]=1;              }           int ans=1,num=1;           for(int i=1;i<(1<<n);i++){                    int c = get_set(i);                     if(c==1||c<=ans) continue;                       int x=0;                     int a[] = new int[c];                     for(int j=0;j<n;j++)                        if((i&(1<<j))!=0)                           a[x++]=j;                     x=1;                   for(int k=0;k<c;k++)                     for(int l=k+1;l<c;l++)                        if(no[a[k]][a[l]]==1)                          { x=0; break;}                     if(x==1)                      { ans=c; num=i;}           }            int st=0;            String res[] = new String[ans];            for(int i=0;i<n;i++)                if((num&(1<<i))!=0)                   res[st++]=s[i];           Arrays.sort(res);             out.println(ans);           for(int i=0;i<ans;i++)             out.println(res[i]);             out.flush();} static FastReader sc=new FastReader();        static int ni(){                 int x = sc.nextInt();                 return(x);        }      static long nl(){              long x = sc.nextLong();              return(x);         }      static String n(){                 String str = sc.next();                     return(str);       }     static String ns(){                 String str = sc.nextLine();                   return(str);      }     static double nd(){               double d = sc.nextDouble();                 return(d);       }  static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }
