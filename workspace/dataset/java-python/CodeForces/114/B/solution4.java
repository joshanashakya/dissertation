import java.util.*; public class B_PFAST114 {    static ArrayList<String> names = new ArrayList<>();    static HashMap<String, Integer> nameToBitMask = new HashMap<>();    static ArrayList<Integer> refusedBitMasks = new ArrayList<>();     static int countSetBits(int n) {        // base case        if (n == 0)            return 0;        else            return 1 + countSetBits(n & (n - 1));    }     static boolean isValidTeam(int bitMaskTeam) {        for (int refusedBitMask : refusedBitMasks) {            if ((refusedBitMask & (~bitMaskTeam)) == 0) return false;        }        return true;    }     public static void main(String[] args) {        int n, m;        Scanner scan = new Scanner(System.in);        n = scan.nextInt();        m = scan.nextInt();         for (int i = 0; i < n; i++) {            String name = scan.next();            names.add(name);            nameToBitMask.put(name, (int) Math.pow(2,i));        }         for (int i = 0; i < m; i++) {            String en1 = scan.next();            String en2 = scan.next();             refusedBitMasks.add(nameToBitMask.get(en1) | nameToBitMask.get(en2));        }         int currentTeam = (int) Math.pow(2,n) - 1;        int maxTeamSize = 0;        int maxTeam = 0;        for (; currentTeam >= 0; currentTeam--) {            if (isValidTeam(currentTeam)) {                int teamSize = countSetBits(currentTeam);                if (maxTeamSize < teamSize) {                    maxTeamSize = teamSize;                    maxTeam = currentTeam;                }            }        }         System.out.println(maxTeamSize);        int index = 0;        ArrayList<String> team = new ArrayList<>();        while (maxTeam != 0) {            if ((maxTeam & 1) == 1) {                team.add(names.get(index));            }            index++;            maxTeam >>=  1;        }         team.sort(Comparator.naturalOrder());        for (int i = 0; i < maxTeamSize; i++) {            System.out.println(team.get(i));        }      }}
