import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*; import javafx.util.Pair; public class Main{     public static void main(String args[])    {        FastScanner input = new FastScanner();        int tc = input.nextInt();        while (tc-- > 0) {         int n = input.nextInt();      int a[] = new int[n];        for (int i = 0; i < n; i++) {            a[i] = input.nextInt();        }        boolean r[] = new boolean[n];        boolean l[] = new boolean[n];        int max = 0;        TreeSet<Integer> set = new TreeSet<>();        for (int i = 0; i < n; i++) {            max = Math.max(max, a[i]);            set.add(a[i]);            if(set.size()==max&&max==i+1)                r[i] = true;                    }        max = 0;        set = new TreeSet<>();        for (int i = n-1; i >=0; i--) {            max = Math.max(max, a[i]);            set.add(a[i]);            if(set.size()==max&&max==(n-i))                l[i] = true;        }//        System.out.println(Arrays.toString(r));//        System.out.println(Arrays.toString(l));        ArrayList<Integer> values = new ArrayList<>();        for (int i = 0; i <n-1; i++) {            if(r[i]&&l[i+1])            {                values.add(i+1);            }        }        StringBuilder ans = new StringBuilder();        System.out.println(values.size());        for (int i = 0; i < values.size(); i++) {            ans.append(values.get(i)+" "+(n-values.get(i))+"\n");        }        System.out.println(ans);           }     }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
