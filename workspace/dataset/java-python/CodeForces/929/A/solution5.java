import java.io.BufferedInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.LinkedList;import java.util.List;import java.util.Scanner;import java.util.StringTokenizer;import java.util.TreeSet; public class Main extends Thread {   //  private static JoltyScanner scanner = new JoltyScanner(System.in);  private static Scanner scanner = new Scanner(System.in);   //00001000010001000100010110000001010001001000100  public static void main(String[] args) {    int n = scanner.nextInt();    int k = scanner.nextInt();    int[] x = new int[n];    TreeSet<Integer> stops = new TreeSet<>();    for (int i = 0; i < n; i++) {      x[i] = scanner.nextInt();      stops.add(x[i]);    }    for (int i = 0; i < n - 1; i++) {      if (x[i + 1] - x[i] > k) {        System.out.println("-1");        return;      }    }     int curStop = x[0];    int bycicles = 0;    while (curStop != x[n - 1]) {      curStop = stops.floor(curStop + k);      bycicles++;     }    System.out.println(bycicles);  }    private static class Pair<X, Y> {    public X x;    public Y y;     public Pair(X x, Y y) {      this.x = x;      this.y = y;    }  }   static class JoltyScanner {    public static final int BUFFER_SIZE = 1 << 16;    public static final char NULL_CHAR = (char) -1;    byte[] buffer = new byte[BUFFER_SIZE];    int bufferIdx = 0, size = 0;    char c = NULL_CHAR;    BufferedInputStream in;     public JoltyScanner(InputStream in) {      this.in = new BufferedInputStream(in, BUFFER_SIZE);      c = nextChar();    }     public int nextInt() {      while (c < '0' || c > '9') {        c = nextChar();      }      int res = 0;      while (c >= '0' && c <= '9') {        res = (res << 3) + (res << 1) + c - '0';        c = nextChar();      }      return res;    }     public char nextChar() {      while (bufferIdx == size) {        try {          size = in.read(buffer);        } catch (Exception e) {          return NULL_CHAR;        }        bufferIdx = 0;      }      return (char) buffer[bufferIdx++];    }  } }
