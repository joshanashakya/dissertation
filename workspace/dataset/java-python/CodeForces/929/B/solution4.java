import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; /** * Created by vlad on 22.03.16. */public class problemB {     class Tuple {        int x;        int y;         public Tuple(int x, int y) {            this.x = x;            this.y = y;        }    }     public boolean isGood(char c) {        return c == 'P' || c == '-' || c == 0 || c == '.';    }     public int isNeighbour(char c) {        if (c == 'S' || c == 'P' || c == 'x') {            return 1;        }         return 0;    }     public void solve(Scanner in, PrintWriter out) {        int n = in.nextInt();        int k = in.nextInt();        in.nextLine();         char[][] seats = new char[n][12];        List<Tuple> first = new ArrayList<>();        List<Tuple> second = new ArrayList<>();        List<Tuple> third = new ArrayList<>();         for (int i = 0; i < n; i++) {            String line = in.nextLine();            seats[i] = line.toCharArray();             for (int j = 0; j < line.length(); j++) {                if (line.charAt(j) != '.') {                    continue;                }                 char left = j == 0 ? 0 : line.charAt(j - 1);                char right = j == 11 ? 0 : line.charAt(j + 1);                 if (isGood(left) & isGood(right)) {                    first.add(new Tuple(i, j));                } else if (isGood(left) | isGood(right)) {                    second.add(new Tuple(i, j));                } else {                    third.add(new Tuple(i, j));                }            }        }         int p = 0;        List<Tuple> t = first;        int type = 1;        while (k > 0) {            if (p == t.size()) {                if (type == 1) {                    t = second;                } else {                    t = third;                }                type++;                p = 0;                continue;            }             Tuple pos = t.get(p);            seats[pos.x][pos.y] = 'x';            p++;            k--;        }         int ans = 0;        for (int i = 0; i < n; i++) {            for (int j = 0; j < 12; j++) {                if (seats[i][j] != 'S') {                    continue;                }                 char left = j == 0 ? 0 : seats[i][j - 1];                char right = j == 11 ? 0 : seats[i][j + 1];                 ans += isNeighbour(left);                ans += isNeighbour(right);            }        }         out.println(ans);        for (int i = 0; i < n; i++) {            for (int j = 0; j < 12; j++) {                out.print(seats[i][j]);            }            out.println();        }    }     public static void main(String args[]) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));         new problemB().solve(in, out);         in.close();        out.close();    } }
