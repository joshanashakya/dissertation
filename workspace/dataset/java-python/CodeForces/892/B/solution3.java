// Problem : B. Wrath// Contest : Codeforces Round #446 (Div. 2)// URL : https://codeforces.com/contest/892/problem/B// Memory Limit : 256 MB// Time Limit : 2000 ms// Powered by CP Editor (https://github.com/cpeditor/cp-editor) import java.io.*;import java.util.*; public class a {    public static void main(String[] args) throws IOException {        FastReader scan = new FastReader();        //PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("taming.out")));        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        Task solver = new Task();        //int t = scan.nextInt();        int t = 1;        for(int i = 1; i <= t; i++) solver.solve(i, scan, out);        out.close();    }    static class Task {        public void solve(int testNumber, FastReader sc, PrintWriter pw) {        	int n = sc.nextInt();        	PriorityQueue<tup> pq = new PriorityQueue<tup>();        	for(int i=0;i<n;i++){        		int m = sc.nextInt();        		pq.add(new tup(i-m,1));        		pq.add(new tup(i,-1));        	}        	int sum  =0;        	int cur = 0;        	for(int i=0;i<n;i++){        		while(!pq.isEmpty()&&pq.peek().a<=i){        			cur+=pq.poll().b;        		}        		if(cur<=0)sum++;        	}        	pw.println(sum);        }     }    static class tup implements Comparable<tup>{        int a, b;        tup(){};        tup(int a, int b){            this.a=a;            this.b=b;        }         @Override        public int compareTo( tup o2) {            return o2.a!=a?Integer.compare(a,o2.a):Integer.compare(b,o2.b);        }    }    static void shuffle(long[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            long temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }    static void shuffle(int[] a) {        Random get = new Random();        for (int i = 0; i < a.length; i++) {            int r = get.nextInt(a.length);            int temp = a[i];            a[i] = a[r];            a[r] = temp;        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         public FastReader(String s) throws FileNotFoundException {            br = new BufferedReader(new FileReader(new File(s)));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    } }
