import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;// import java.math.BigInteger;import java.util.*; public class Solution {    public static void main(String[] args) {        int T = in.nextInt();    TEST:        while (T-- > 0) {            int n = in.nextInt(), x = in.nextInt();            int[] a = in.readIntArray(n);            int[] b = in.readIntArray(n);            sort(a); sort(b);            for (int i = 0; i < n; i++) {                if (a[i] + b[n-i-1] > x) {                    out.println("No");                    continue TEST;                }            }            out.println("Yes");        }        out.flush();    }        // Random Shuffle guarantees O(nlogn) WCTC for Quick Sort.    static void sort(int[] arr) {        Random rnd = new Random();        for (int i = arr.length - 1; i > 0; i--) {            swap(arr, i, rnd.nextInt(i));        }        // Dual-Pivot Quicksort Implementation        Arrays.sort(arr);    }     // Swap Elements in an Array    static void swap(int[] arr, int i, int j) {        arr[i] = arr[i] ^ arr[j];        arr[j] = arr[i] ^ arr[j];        arr[i] = arr[i] ^ arr[j];    }     // Handle I/O    static FastScanner in = new FastScanner();    static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));    static class FastScanner {        BufferedReader br;        StringTokenizer st;        public FastScanner() {            br = new BufferedReader(new InputStreamReader(System.in));            st = null;        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readIntArray(int size) {            int[] arr = new int[size];            for (int i = 0; i < size; i++) {                arr[i] = nextInt();            }            return arr;        }    }}
