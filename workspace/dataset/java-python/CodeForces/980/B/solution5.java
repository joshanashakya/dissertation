import java.io.*;import java.util.*;import java.math.*;import java.awt.Point; public class Main {	//static final long MOD = 998244353L;	//static final long INF = -1000000000000000007L;	static final long MOD = 1000000007L;	//static final int INF = 1000000007;		public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter pw = new PrintWriter(System.out);		int N = sc.ni();		int K = sc.ni();		char[][] grid = new char[4][N];		for (int i = 0; i < 4; i++) {			for (int j = 0; j < N; j++)				grid[i][j] = '.';		}Â 		if (K % 2 == 0) {			for (int j = 1; j <= K/2; j++) {				grid[1][j] = '#';				grid[2][j] = '#';			}		} else {			for (int j = Math.max(N/2-K/2,1); j <= Math.min(N/2+K/2,N-2); j++) {				grid[1][j] = '#';			}			K -= (N-2);			if (K > 0) {				for (int j = 1; j <= K/2; j++)					grid[2][j] = '#';				for (int j = 1; j <= K/2; j++)					grid[2][N-1-j] = '#';			}		}		pw.println("YES");		for (int i = 0; i < 4; i++) {			for (int j = 0; j < N; j++) {				pw.print(grid[i][j]);			}			pw.println();		}		pw.close(); 	}	    public static int[][] sort(int[][] array) {    	//Sort an array (immune to quicksort TLE)		Random rgen = new Random();		for (int i = 0; i < array.length; i++) {		    int randomPosition = rgen.nextInt(array.length);		    int[] temp = array[i];		    array[i] = array[randomPosition];		    array[randomPosition] = temp;		}		Arrays.sort(array, new Comparator<int[]>() {			  @Override        	  public int compare(int[] arr1, int[] arr2) {				  //return arr1[0]-arr2[0]; //ascending order				  if (arr1[0] != arr2[0]) {					  return arr1[0]-arr2[0];				  } else {					  return arr1[1]-arr2[1];				  }	          }		});		return array;	}        public static long[][] sort(long[][] array) {    	//Sort an array (immune to quicksort TLE)		Random rgen = new Random();		for (int i = 0; i < array.length; i++) {		    int randomPosition = rgen.nextInt(array.length);		    long[] temp = array[i];		    array[i] = array[randomPosition];		    array[randomPosition] = temp;		}		Arrays.sort(array, new Comparator<long[]>() {			  @Override        	  public int compare(long[] arr1, long[] arr2) {				  return 0;	          }		});		return array;	}        static class FastScanner {         BufferedReader br;         StringTokenizer st;           public FastScanner() {             br = new BufferedReader(new InputStreamReader(System.in));         }           String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int ni() {             return Integer.parseInt(next());         }           long nl() {             return Long.parseLong(next());         }           double nd() {             return Double.parseDouble(next());         }           String nextLine() {             String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                e.printStackTrace();             }             return str;        }    }}
