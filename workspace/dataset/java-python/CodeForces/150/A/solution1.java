 //import javax.print.DocFlavor;//import javax.swing.*;//import javax.swing.text.StyleContext;//import java.awt.image.AreaAveragingScaleFilter; import javax.print.attribute.Attribute;import javax.print.attribute.HashAttributeSet;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger;import java.nio.channels.AcceptPendingException;import java.nio.charset.IllegalCharsetNameException;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.logging.SimpleFormatter;  public class numberTheory {     static ArrayList<Integer> list = new ArrayList<>();    static boolean A[] = new boolean[90000001];    static int dp[] ;      public static void main(String[] args) {          PrintWriter fop = new PrintWriter(System.out);        FastScanner in = new FastScanner();          long n = in.nextLong() ;        boolean flag = false ;        int one = 0 ;        int ct = 0 ;        ArrayList<Long> list1 = new ArrayList<>() ;        int curr = 0 ;         for (long i = 2; i*i <=n ; i++) {            if (n%i == 0){                one++ ;                list1.add(i);                if ((n/i) == i)                    ct-- ;                while (n%i == 0){                    if (one == 1)                        curr++ ;                     ct++ ;                    n/= i ;                    if (ct == 2)                        break;                }            }         }         if (ct == 0){            System.out.println(1);            System.out.println(0);        }        else if (ct == 1){            System.out.println(2);        }        else {            System.out.println(1);            if (list1.size()== 1 || curr>=2)                System.out.println(list1.get(0)*list1.get(0));            else                System.out.println(list1.get(0)*list1.get(1));        }         fop.flush();fop.close();    }     static void seive(int n ){        int maxn = n ;        //int maxn = 1000000  ;        A[0] = A[1] = true ;         for (int i=2 ; i*i<=maxn ; i++){            if (!A[i]){                for (int j=i*i ; j<=maxn ; j+= i)                    A[j] = true ;            }        }         for (int i=2 ; i<=maxn ;i++ )            if (!A[i])                list.add(i) ;     }       static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    } } 
