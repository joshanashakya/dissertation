#include <bits/stdc++.h> #define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }#define all(x) x.begin(),x.end()#define rall(x) x.rbegin(),x.rend()#define sz(x) (int)x.size()//#define X real()//#define Y imag()#define angle(v) (atan2((v).Y,(v).X))#define lenght(v) ((long double)hypot((v).Y,(v).X))#define vec(a,b) ((b)-(a))#define dot(a,b) ((conj(a)*(b)).real())#define cross(a,b) ((conj(a)*(b)).imag())  using namespace std;  using ll  = long long;using pii = pair<int,int>;using ull = unsigned long long; void err(istream_iterator<string> it) {cerr << endl;}template<typename T, typename... Args>void err(istream_iterator<string> it, T a, Args... args) {cerr << *it << " = " << a << endl;err(++it, args...);}    const int dx[] = {0, -1, 1,  0, 1, -1,  1, -1};const int dy[] = {1 , 0, 0, -1, 1, -1, -1,  1}; const double EPS = 1e-9;const int mod = 1e9 + 7;const ll inf = 1e18L + 7;const int N = 2e5 + 50;  typedef complex<long double> point; int add(int a, int b){    return (a + b) % mod;}int mul(int a, int b){    return (1ll * a * b) % mod;}int fp(int b, int p){    int res = 1;    while(p){            if(p&1)                res = mul(res,b);            b = mul(b,b);            p >>= 1;    }    return res;}int main(){    ios_base::  sync_with_stdio(0); cin.tie(0); cout.tie(0);    int n, m , k;    cin >> n >> m >> k;    if(k > n || k == 1)        return cout << fp(m, n) << '\n',0;     if(k == n){         if(k & 1){            int res = mul(m , fp(m, n / 2));            cout << res << '\n';         }else{            int res = fp(m , n / 2);            cout << res << '\n';        }        return 0;    }     if(k % 2 == 0)            return cout << m << '\n',0;     cout << mul(m,m) << '\n';     return 0;}
