import java.io.*;import java.util.*; public class ranjan {     public static Reader cin;    public static PrintWriter cout;    public static boolean[] visited;    public static final long bil = (long)1e9+7;    public static void main(String[] arg) throws IOException {        //input / output variables        if(arg.length == 0)            cin = new Reader(System.in);        else            cin = new Reader(new FileInputStream(new File("in"+arg[0]+".txt")));        cout = new PrintWriter(new BufferedOutputStream(System.out));        //input                int n = cin.nextInt();        int m = cin.nextInt();        int k = cin.nextInt();         if(k==1 || k>n)            cout.print(mod_pow(m,n,bil));        else if(k == n)            cout.print(mod_pow(m, (n+1)/2, bil));        else if(k%2 == 1)            cout.print(mod_pow(m, 2, bil));        else               cout.print(m%bil);        //end        cout.print("\n");        cout.close();    }        static <T> void reverseArray(T intArray[], int size)     {         int i;        T temp;         for (i = 0; i < size / 2; i++) {             temp = intArray[i];             intArray[i] = intArray[size - i - 1];             intArray[size - i - 1] = temp;         }      }       private static class Pair<U,V>{        public U a;        public V b;        public Pair(U a,V b)        {            this.a = a;            this.b = b;        }	    }     public static long mod_pow(long x,long n,long mod) {            long res=1;            while(n>0) {                if((n&1)==1)res=res*x%mod;                x=x*x%mod;                n>>=1;            }            return res;        }    //useful functions /*   public static void seive(int size)    {        prime[0] = prime[1] = false;        int p = 2;        while(p*p<= size)        {            if(prime[p])            {                for(int i=p*p;i<size;i += p)                     prime[i] = false;            }            p++;        }    }        public static int gcd(int n1, int n2)     {        int r;        while (n2 != 0)         {            r = n1 % n2;            n1 = n2;            n2 = r;        }        return n1;    }     public static int lcm(int n1, int n2)     {        int answer = (n1 * n2) / (gcd(n1, n2));        return answer;    }*/     //Fast Reading classes    static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;          public Reader(InputStream is)         {             din = new DataInputStream(is);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }          public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }          public String nextLine() throws IOException         {             byte[] buf = new byte[1024]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }          public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');              if (neg)                 return -ret;             return ret;         }          public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }          public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();              do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');              if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }              if (neg)                 return -ret;             return ret;         }          private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }          private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }          public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     }}  class Read{    private BufferedReader br;    private StringTokenizer st;     public Read(InputStream is)    { br = new BufferedReader(new InputStreamReader(is)); }     String next()    {        while (st == null || !st.hasMoreElements())        {            try {st = new StringTokenizer(br.readLine());}            catch(IOException e)                {e.printStackTrace();}        }        return st.nextToken();    }     int nextInt()    { return Integer.parseInt(next()); }     long nextLong()    { return Long.parseLong(next()); }     double nextDouble()    { return Double.parseDouble(next()); }     String nextLine()    {        String str = "";        try {str = br.readLine();}        catch(IOException e)            {e.printStackTrace();}        return str;    }}
