import java.util.*;import java.io.*;public class A  {    static FastReader in=new FastReader();    static final Random random=new Random();    static long mod=1000000007L;     public static void main(String args[]) throws IOException {        int t=1;//in.nextInt();        StringBuilder res=new StringBuilder();                loop:        while(t-->0)        {        	int a[][]=new int[5][5];        	for(int i=0;i<5;i++)        	{        		a[i]=in.readintarray(5);        	}        	HashSet<Integer>set=new HashSet<>();        	String str="";        	res.append(fun(str,set,a));        }        print(res);    }            static int fun(String str,HashSet<Integer>set,int a[][])    {    	if(set.size()==5)    	{    		return getValue(str,a);    	}    	int max=0;    	for(int i=1;i<=5;i++)    	{    		if(!set.contains(i))    		{    			set.add(i);    			max=Math.max(max, fun(str+i,set,a));    			set.remove(i);    		}    	}    	return max;    }        static int getValue(String str,int a[][])    {    	int x1=str.charAt(0)-'0'-1;    	int x2=str.charAt(1)-'0'-1;    	int x3=str.charAt(2)-'0'-1;    	int x4=str.charAt(3)-'0'-1;    	int x5=str.charAt(4)-'0'-1;    	return a[x1][x2]+a[x2][x1]+2*a[x3][x4]+2*a[x4][x3]+a[x2][x3]+a[x3][x2]+2*a[x4][x5]+2*a[x5][x4];    }         static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort        for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }     static < E > void print(E res)    {        System.out.println(res);    }      static  int gcd(int a,int b)    {        if(b==0)        {            return a;        }        return gcd(b,a%b);    }        static int lcm(int a, int b)    {        return (a / gcd(a, b)) * b;    }         static int abs(int a)    {        if(a<0)            return -1*a;        return a;    }     static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }        String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }         int [] readintarray(int n) {            int res [] = new int [n];            for(int i = 0; i<n; i++)res[i] = nextInt();            return res;        }        long [] readlongarray(int n) {            long res [] = new long [n];            for(int i = 0; i<n; i++)res[i] = nextLong();            return res;        }    } }    
