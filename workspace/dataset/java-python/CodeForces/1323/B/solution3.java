import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Pranay2516 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BCountSubrectangles solver = new BCountSubrectangles();        solver.solve(1, in, out);        out.close();    }     static class BCountSubrectangles {        public void solve(int testNumber, FastReader in, PrintWriter out) {            int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();            int[] a = in.readArray(n), b = in.readArray(m);            ArrayList<Integer> divisors = func.getDivisors(k);            long ans = 0;            for (Integer row : divisors) {                int cnt = 0, rowCnt = 0;                for (int i = 0; i < n; ++i) {                    if (a[i] == 1) {                        cnt++;                    } else {                        if (cnt >= row) {                            rowCnt += cnt - row + 1;                        }                        cnt = 0;                    }                }                if (cnt >= row) {                    rowCnt += cnt - row + 1;                }                int col = k / row, colCnt = 0;                cnt = 0;                for (int i = 0; i < m; ++i) {                    if (b[i] == 1) {                        cnt++;                    } else {                        if (cnt >= col) {                            colCnt += cnt - col + 1;                        }                        cnt = 0;                    }                }                if (cnt >= col) {                    colCnt += cnt - col + 1;                }                ans += (long) rowCnt * colCnt;            }            out.println(ans);        }     }     static class func {        public static ArrayList<Integer> getDivisors(int n) {            //Taken from @mufaddalnaya            ArrayList<Integer> divisors = new ArrayList<>();            for (int i = 1; i * i <= n; i++) {                if (n % i == 0) {                    divisors.add(i);                    if (n / i != i) {                        divisors.add(n / i);                    }                }            }            return divisors;        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private FastReader.SpaceCharFilter filter;         public FastReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public int[] readArray(int size) {            int[] array = new int[size];            for (int i = 0; i < size; i++) array[i] = nextInt();            return array;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
