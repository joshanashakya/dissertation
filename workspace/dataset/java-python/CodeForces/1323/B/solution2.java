import java.util.*;import java.io.*; public class CFA {  BufferedReader br;  PrintWriter out;  StringTokenizer st;  boolean eof;  private static final long MOD = 1000L * 1000L * 1000L + 7;  private static final int[] dx = {0, -1, 0, 1};  private static final int[] dy = {1, 0, -1, 0};  private static final String yes = "Yes";  private static final String no = "No";   void solve() {//    int T = nextInt();    int T = 1;    for (int i = 0; i < T; i++) {      helper();    }  }   void helper() {    int n = nextInt();    int m = nextInt();    long k = nextLong();    int[] a = nextIntArr(n);    int[] b = nextIntArr(m);    List<Integer> l1 = find(a);    List<Integer> l2 = find(b);    Collections.sort(l1);    Collections.sort(l2);    int[] p1 = prefCal(l1);    int[] p2 = prefCal(l2);    long res = 0;    List<Pair> good = new ArrayList<>();    for (long i = 1; i * i <= k; i++) {      if (k % i == 0) {        good.add(new Pair(i, k / i));        if (i * i != k) {          good.add(new Pair(k / i, i));        }      }    }    for (Pair p : good) {      int first = -1;      for (int i = 0; i < l1.size(); i++) {        long d = l1.get(i) - p.x;        if (d >= 0) {          first = i;          break;        }      }      if (first == -1) {        continue;      }      int second = -1;      for (int i = 0; i < l2.size(); i++) {        long d = l2.get(i) - p.y;        if (d >= 0) {          second = i;          break;        }      }      if (second == -1) {        continue;      }      res += p1[first] * p2[second];      res -= p1[first] * (l2.size() - 1 - second + 1) * (p.y - 1);      res -= p2[second] * (l1.size() - 1 - first + 1) * (p.x - 1);      res += (l2.size() - 1 - second + 1) * (l1.size() - 1 - first + 1) * (p.y - 1) * (p.x - 1);    }    outln(res);  }   class Pair {    long x;    long y;    public Pair(long x, long y) {      this.x = x;      this.y = y;    }     @Override    public String toString() {      return x + " " + y;    }  }   int[] prefCal(List<Integer> ls) {    int sz = ls.size();    int[] res = new int[sz + 1];    for (int i = sz - 1; i >= 0; i--) {      res[i] = res[i + 1] + ls.get(i);    }    return res;  }   List<Integer> find(int[] arr) {    int n = arr.length;    int start = 0;    List<Integer> res = new ArrayList<>();    while (start < n) {      if (arr[start] == 0) {        start++;        continue;      }      int end = start;      while (end < n && arr[end] == arr[start]) {        end++;      }      res.add(end - start);      start = end;    }    return res;  }   void shuffle(int[] a) {    int n = a.length;    for(int i = 0; i < n; i++) {      int r = i + (int) (Math.random() * (n - i));      int tmp = a[i];      a[i] = a[r];      a[r] = tmp;    }  }   long gcd(long a, long b) {    while(a != 0 && b != 0) {      long c = b;      b = a % b;      a = c;    }    return a + b;  }  int gcd(int a, int b) {    while(a != 0 && b != 0) {      int c = b;      b = a % b;      a = c;    }    return a + b;  }  private void outln(Object o) {    out.println(o);  }  private void out(Object o) {    out.print(o);  }  private void formatPrint(double val) {    outln(String.format("%.9f", val));  }  public CFA() {    br = new BufferedReader(new InputStreamReader(System.in));    out = new PrintWriter(System.out);    solve();    out.close();  }  public static void main(String[] args) {    new CFA();  }   public long[] nextLongArr(int n) {    long[] res = new long[n];    for(int i = 0; i < n; i++)      res[i] = nextLong();    return res;  }  public int[] nextIntArr(int n) {    int[] res = new int[n];    for(int i = 0; i < n; i++)      res[i] = nextInt();    return res;  }  public String nextToken() {    while (st == null || !st.hasMoreTokens()) {      try {        st = new StringTokenizer(br.readLine());      } catch (Exception e) {        eof = true;        return null;      }    }    return st.nextToken();  }  public String nextString() {    try {      return br.readLine();    } catch (IOException e) {      eof = true;      return null;    }  }  public int nextInt() {    return Integer.parseInt(nextToken());  }  public long nextLong() {    return Long.parseLong(nextToken());  }  public double nextDouble() {    return Double.parseDouble(nextToken());  }}
