import java.util.*; public class Main {     public static int solution(            int[] games,            ArrayList<Set<Integer>> dep,            int position,            Set<Integer> completed,            int left) {        int completedThisComp = 0;         boolean taken = true;        while (taken) {            taken = false;            for (int i = 0; i < games.length; i++) {                if (completed.contains(i))                    continue;                 if (games[i] != position)                    continue;                 boolean canComplete = true;                for (Integer d : dep.get(i)) {                    if (completed.contains(d))                        continue;                    canComplete = false;                }                 if (canComplete) {                    taken = true;                    completed.add(i);                    completedThisComp += 1;                }            }        }         if (completedThisComp == left)            return 0;         if (position == 0) {            return 1 + solution(games, dep, 1, completed,left - completedThisComp);        }        if (position == 1) {            return 1 + solution(games, dep, 2, completed,left - completedThisComp);        }         return 1 + solution(games, dep, 0, completed,left - completedThisComp);    }//14//        3 2 2 1 2 1 1 3 1 2 2 3 1 1//        2 9 13//        3 9 13 8//        2 9 6//        3 9 6 13//        1 9//        1 9//        3 9 6 13//        2 9 13//        0//        4 9 3 13 4//        4 9 6 13 2//        2 9 13//        1 9//        8 9 5 6 3 13 7 4 11    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int[] games = new int[n];        for (int i = 0; i < n; i++) {            games[i] = sc.nextInt() - 1;        }         ArrayList<Set<Integer>> dep = new ArrayList<>();        for (int i = 0; i < n; i++) {            int k = sc.nextInt();            HashSet<Integer> set = new HashSet<>();            dep.add(set);            for (int j = 0; j < k; j++) {                set.add(sc.nextInt() - 1);            }        }         int candidate1 = solution(games, dep, 0, new HashSet<>(), n);        int candidate2 = solution(games, dep, 1, new HashSet<>(), n);        int candidate3 = solution(games, dep, 2, new HashSet<>(), n);        System.out.println(n + Math.min(candidate1, Math.min(candidate2, candidate3)));     }}
