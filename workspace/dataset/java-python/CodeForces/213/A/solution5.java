import java.util.*; public class Main {    class Game{        class Node{            int id = 0;            int ancestorCount = 0;             public Node(int id, int ancestorCount){                this.id = id;                this.ancestorCount = ancestorCount;            }        }         Map<Integer, List> pools;        Map<Integer, Node> map;        List<Integer>[] childs;         public Game(Integer[] computerMaping, List<Integer>[] childs){            pools = new HashMap<>();            pools.put(0, new ArrayList());            pools.put(1, new ArrayList());            pools.put(2, new ArrayList());             map = new HashMap<>();             this.childs = childs;             for(int i = 0; i < computerMaping.length; i++){                map.put(i, new Node(i, 0));                pools.get(computerMaping[i]).add(map.get(i));            }             for(int i = 0; i < childs.length; i++){                for(int j = 0; j < childs[i].size(); j++){                    int parent = i;                    int child = childs[i].get(j);                     map.get(child).ancestorCount++;                }            }        }         public boolean hasNext(){            for(int i = 0; i < pools.size(); i++){                if(hasNext(i)) return true;            }             return false;        }         public boolean hasNext(int poolId){            for(Node node: (List<Node>)pools.get(poolId)){                if(node.ancestorCount == 0) return true;            }            return false;        }         public void remove(int poolId){            int id = -1;            for(Node node: (List<Node>)pools.get(poolId)){                if(node.ancestorCount == 0){                    id = node.id;                    pools.get(poolId).remove(node);                    break;                }            }             if(id == -1) throw new RuntimeException("Invalid removal");             for(int child: childs[id]){                map.get(child).ancestorCount--;            }        }    }     public int getSolution(int startPoolId, Integer[] computerMaping, List<Integer>[] childs){        Game game = new Game(computerMaping, childs);         int res = -1;        while(game.hasNext()){            res++;            while(game.hasNext(startPoolId)){                game.remove(startPoolId);                res++;            }             startPoolId = (startPoolId + 1) % 3;        }         return res;    }     public static void main(String[] arg) {        Scanner scan = new Scanner(System.in);         int n = scan.nextInt();         List<Integer>[] childs = new List[n];        for(int i = 0; i < n; i++) childs[i] = new ArrayList<>();         Integer[] computerMaping = new Integer[n];        for(int i = 0; i < n; i++) computerMaping[i] = scan.nextInt() - 1;         for(int i = 0; i < n; i++){            int k = scan.nextInt();            for(int j = 0; j < k; j++){                childs[scan.nextInt() - 1].add(i);            }        }         int res = Integer.MAX_VALUE;        for(int i = 0; i < 3; i++){            res = Math.min(res, new Main().getSolution(i, computerMaping, childs));        }         System.out.println(res);    }}
