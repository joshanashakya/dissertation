//package com.security.lessons; import java.io.BufferedOutputStream;import java.io.PrintWriter;import java.util.HashMap;import java.util.Map;import java.util.Scanner; public class Main {     public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));        solveB(scanner, out);         out.close();    }     public static void solveA(Scanner scanner, PrintWriter out){        String inputWord = "nineteen";        String str = scanner.nextLine();        Map<Character, Integer[]> repetition = new HashMap<>();        Integer[] countLetter;        //записываем количество попаданий буквы в слове nineteen        for (int i = 0; i < inputWord.length(); i++) {            if (!repetition.containsKey(inputWord.charAt(i))){                repetition.put(inputWord.charAt(i), new Integer[]{1, 0});            }else {                countLetter = repetition.get(inputWord.charAt(i));                countLetter[0]++;            }        }         //считаем количество каждой буквы nineteen в строке        for (int i = 0; i < str.length(); i++) {            if (repetition.containsKey(str.charAt(i))){                countLetter = repetition.get(str.charAt(i));                countLetter[1]++;            }        }         //находим минимальное число попадний буквы в строке        int minimum = repetition.get(inputWord.charAt(0))[1];        for (Map.Entry<Character, Integer[]> letter : repetition.entrySet()) {            int min = (letter.getValue()[1]/letter.getValue()[0]);            if (min == 0){                out.println(0);                out.close();                return;            }            if (min < minimum && letter.getKey() != 'n'){                minimum = letter.getValue()[1]/letter.getValue()[0];            }        }        //особые условие для n          int tmp = repetition.get('n')[1]/repetition.get('n')[0];        int minN = (repetition.get('n')[1] - repetition.get('n')[0])/2 + 1;        //show map. ВСЁ ОК. ДАЛЬШЕ ДВИГАЕМСЯ        /*for (Map.Entry<Character, Integer[]> letter : repetition.entrySet()) {            System.out.println(letter.getKey() + " in word = " + letter.getValue()[0] + ", " + letter.getValue()[1] + ",  " +                    letter.getValue()[1]/letter.getValue()[0]);        }*/         if (minimum < minN){            out.println(minimum);        }else {            out.println(minN);        }        //out.println(minimum);        out.close();        //eihstiirnmteejeehimttrijittjsntjejmessstsemmtristjrhenithrrsssihnthheehhrnmimssjmejjreimjiemrmiis    }     public static void solveB(Scanner scanner, PrintWriter out){        int n = Integer.parseInt(scanner.nextLine());        double[][] W = new double[n][n];        double[][] A = new double[n][n];        double[][] B = new double[n][n];         for (int i = 0; i < n; i++) {            String[] tmp = scanner.nextLine().split(" ");            for (int j = 0; j < n; j++) {                W[i][j] = Integer.parseInt(tmp[j]);            }        }        // показ считанной матрицы        //showMatrix(W, n, out);         //поставить элементы матриц по главной диагонале         //считать элементы матриц, которые внутри        int iteration = n*n - n;        double x, y;        int count = 0;        for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                if (i == j){                    A[i][j] = W[i][j];                    B[i][j] = 0;                }else{                    y = (W[i][j] - W[j][i])/2;                    x = W[i][j] - y;                     A[i][j] = x; A[j][i] = x;                    B[i][j] = y; B[j][i] = -y;                }            }            if (count == iteration){                break;            }        }         showMatrix(A, n, out);        showMatrix(B, n, out);     }    private static void showMatrix(double[][] W, int n, PrintWriter out){        for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                out.print(W[i][j] + " ");            }            out.println();        }    }}
