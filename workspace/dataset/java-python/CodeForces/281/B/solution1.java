import java.io.*;import java.math.BigDecimal;import java.util.*;  public class CodeForcesBase {    static boolean usefile = false;    static OutputStream outfile;     static {        try {            outfile = new FileOutputStream(new File("output.txt"));        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }     static InputStream inputfile;     static {        try {            inputfile = new FileInputStream(new File("input.txt"));        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }     public static void main(String[] args) throws IOException {        PrintWriter out = usefile ? new PrintWriter(outfile) : new PrintWriter(System.out);        Scanner sc = usefile ? new Scanner(inputfile) : new Scanner(System.in);        if (usefile) {            while (sc.ready()) {                handle(sc, out);            }        } else {            handle(sc, out);        }        out.flush();        out.close();    }     private static void handle(Scanner sc, PrintWriter out) throws IOException {        long x = sc.nextLong();        long y = sc.nextLong();        long n = sc.nextLong();        Fraction mindiff = new Fraction(Max, 1);        long mina = -1;        long minb = -1;        for (int b = 1; b <= n; b++) {            long a = x * b / y;            Fraction diff = new Fraction(x, y).minus(new Fraction(a, b));            if (diff.compareTo(mindiff) < 0) {                mindiff = diff;                mina = a;                minb = b;            }            Fraction diff2 = new Fraction(a + 1, b).minus(new Fraction(x, y));            if (diff2.compareTo(mindiff) < 0) {                mindiff = diff2;                mina = a + 1;                minb = b;            }        }        out.println(mina + "/" + minb);    }     static class Fraction {        private long a;        private long b;         public Fraction(long a, long b) {            this.a = a;            this.b = b;        }         Fraction plus(Fraction f) {            return new Fraction((a * f.b + b * f.a), (b * f.b));        }         Fraction minus(Fraction f) {            return new Fraction((a * f.b - b * f.a), (b * f.b));        }         public int compareTo(Fraction f) {            Fraction diff = this.minus(f);            if (diff.a < 0) {                return -1;            } else if (diff.a == 0) {                return 0;            } else {                return 1;            }        }    }     static long Max = 1000000000000000L;      private static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public Scanner(FileReader r) {            br = new BufferedReader(r);        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) {                st = new StringTokenizer(br.readLine());            }            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public boolean ready() throws IOException {            return br.ready();        }      }}
