/** * * @author meashish */import java.io.IOException;import java.io.InputStream;import java.io.PrintStream;import java.io.Serializable;import java.util.Arrays;import java.util.InputMismatchException; public class Main {     InputReader in;    PrintStream out;     private void start() {        int t = in.nextInt();         while (t-- > 0) {            char a[][] = new char[8][8];             boolean flag = false;            int x1 = 0, y1 = 0;            int x2 = 0, y2 = 0;             for (int i = 0; i < 8; i++) {                String s = in.next();                 for (int j = 0; j < 8; j++) {                    a[i][j] = s.charAt(j);                     if (a[i][j] == 'K' && !flag) {                        x1 = i;                        y1 = j;                         flag = true;                    }                    if (a[i][j] == 'K' && flag) {                        x2 = i;                        y2 = j;                    }                }            }             int b1[][] = new int[8][8];            int b2[][] = new int[8][8];             dfs(b1, x1, y1, 0);            dfs(b2, x2, y2, 0);             boolean canbe = false;            for (int i = 0; i < 8; i++) {                for (int j = 0; j < 8; j++) {                    if (a[i][j] == '#') {                        continue;                    }                     if (b1[i][j] > 0 && b2[i][j] > 0 && (b1[i][j] % 2) == (b2[i][j] % 2)) {                        canbe = true;                    }                }            }                        if (canbe) {                out.println("YES");            } else {                out.println("NO");            }        }    }     void dfs(int b1[][], int i, int j, int eo) {        if (b1[i][j] > 0) {            return;        }                b1[i][j] = eo;                if (check(i + 2) && check(j + 2)) {            dfs(b1, i + 2, j + 2, eo + 1);        }        if (check(i + 2) && check(j - 2)) {            dfs(b1, i + 2, j - 2, eo + 1);        }        if (check(i - 2) && check(j + 2)) {            dfs(b1, i - 2, j + 2, eo + 1);        }        if (check(i - 2) && check(j - 2)) {            dfs(b1, i - 2, j - 2, eo + 1);        }    }     boolean check(int i) {        return (i < 8 && i >= 0);    }     public static void main(String[] args) {        //InputReader in = new InputReader(new FileInputStream(new File("in.txt")));        //PrintStream out = new PrintStream("out.txt");         InputReader in = new InputReader(System.in);        PrintStream out = System.out;         Main main = new Main();         main.in = in;        main.out = out;         main.start();    }     private static class InputReader {         private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public String nextString() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }         public double nextDouble() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E') {                    return res * Math.pow(10, nextInt());                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E') {                        return res * Math.pow(10, nextInt());                    }                    if (c < '0' || c > '9') {                        throw new InputMismatchException();                    }                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public String next() {            return nextString();        }         public interface SpaceCharFilter {             public boolean isSpaceChar(int ch);        }    }     private class Pair<K, V> implements Serializable {         private K key;         public K getKey() {            return key;        }        private V value;         public V getValue() {            return value;        }         public Pair(K key, V value) {            this.key = key;            this.value = value;        }         @Override        public String toString() {            return key + "=" + value;        }         @Override        public int hashCode() {            return key.hashCode() * 13 + (value == null ? 0 : value.hashCode());        }         @Override        public boolean equals(Object o) {            if (this == o) {                return true;            }            if (o instanceof Pair) {                Pair pair = (Pair) o;                if (key != null ? !key.equals(pair.key) : pair.key != null) {                    return false;                }                if (value != null ? !value.equals(pair.value) : pair.value != null) {                    return false;                }                return true;            }            return false;        }    } }
