import java.util.LinkedList;import java.util.Queue;import java.util.Scanner;  public class SemiKnightsMeet {	public static void main(String[] args){		Scanner sc= new Scanner(System.in);		int n = sc.nextInt();		for(int t=0;t<n;++t){			char[][] board = new char[8][8];			for(int i=0;i<8;i++){				String s = sc.next();				for(int j=0;j<8;j++){					board[i][j] = s.charAt(j);				}			}						int[][] k1 = new int[8][8];			int[][] k2 = new int[8][8];			boolean flag1 =false;			for(int i=0;i<8;i++){				for(int j=0;j<8;j++){					if(!flag1 && board[i][j] == 'K'){						dobfs(k1,i,j,board);						flag1 = true;					}else if(flag1 && board[i][j] == 'K'){						dobfs(k2, i, j, board);					}										}			}			flag1=false;			for(int i=0;i<8;i++){				for(int j=0;j<8;j++){					if(board[i][j] != '#'&& k1[i][j]!=0 && k2[i][j]!=0 && Math.abs(k1[i][j] - k2[i][j])%2 == 0){						System.out.println("YES");						flag1=true;						break;					}				}				if(flag1)					break;			}						if(!flag1){				System.out.println("NO");			}					}	} 	private static void dobfs(int[][] k2, int i, int j, char[][] board) {				Queue<Point> q = new LinkedList<Point>();		q.add(new Point(i,j));		k2[i][j] = 1;		bfs(k2, q, board);	}		private static void bfs(int[][] k, Queue<Point> q, char[][] board) {		if(!q.isEmpty()){			Point p =q.remove();			int i=p.x;			int j=p.y;			if(i-2>=0 && j-2>=0 && k[i-2][j-2]==0){				q.add(new Point(i-2,j-2));				k[i-2][j-2] = k[i][j]+1;			}			if(i+2<8 && j-2>=0 && k[i+2][j-2]==0){				q.add(new Point(i+2,j-2));				k[i+2][j-2] = k[i][j]+1;			}			if(i-2>=0 && j+2<8 && k[i-2][j+2]==0){				q.add(new Point(i-2,j+2));				k[i-2][j+2] = k[i][j]+1;			}			if(i+2<8 && j+2<8 && k[i+2][j+2]==0){				q.add(new Point(i+2,j+2));				k[i+2][j+2] = k[i][j]+1;			}			bfs(k, q, board);		}			} 	private static class Point{		int x, y;				Point(int a, int b){			x=a;			y=b;		}	}		}
