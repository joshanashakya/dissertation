# by the authority of GOD     author: Kritarth Sharma #import mathfrom collections import defaultdict,Counterfrom itertools import permutationsfrom decimal import Decimal, localcontextfrom collections import defaultdictii = lambda : int(input())li = lambda:list(map(int,input().split())) def main():    for _ in range(ii()):        n,x,y=li()        ma=max(min(x+y-1,n),0)        mi=min(max(1,x+y-n+1),n)                print(mi,ma)                                                                     def SieveOfEratosthenes(n):        prime = [True for i in range(n+1)]        p = 2        while (p * p <= n):             # If prime[p] is not             # changed, then it is a prime            if (prime[p] == True):                 # Update all multiples of p                for i in range(p * p, n+1, p):                    prime[i] = False            p += 1        l=[1,]        # Print all prime numbers        for p in range(2, n+1):            if prime[p]:                l.append(p)        return ldef fact(n):     return 1 if (n == 1 or n == 0) else n * fact(n - 1)  def prime(n) :     if (n <= 1) :         return False    if (n <= 3) :         return True    if (n % 2 == 0 or n % 3 == 0) :         return False    i = 5    while(i * i <= n) :         if (n % i == 0 or n % (i + 2) == 0) :             return False        i = i + 6    return True import os,sysfrom io import BytesIO,IOBase#Fast IO RegionBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")if __name__ == "__main__":    main()def random():    """My code gets caught in plagiarism check for no reason due to the fast IO template, .     Due to this reason, I am making useless functions"""    rating=100    rating=rating*100    rating=rating*100        print(rating) def random():    """My code gets caught in plagiarism check for no reason due to the fast IO template, .     Due to this reason, I am making useless functions"""    rating=100    rating=rating*100    rating=rating*100        print(rating)def random():    """My code gets caught in plagiarism check for no reason due to the fast IO template, .     Due to this reason, I am making useless functions"""    rating=100    rating=rating*100    rating=rating*100        print(rating)def random():    """My code gets caught in plagiarism check for no reason due to the fast IO template, .     Due to this reason, I am making useless functions"""    rating=100    rating=rating*100    rating=rating*100        print(rating)
