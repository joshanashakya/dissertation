import mathimport operator def lcm(a,b):    return (a / math.gcd(a,b))* b def nCr(n, r):       return((math.factorial(n))/((math.factorial(r))*(math.factorial(n - r))))   def isKthBitSet(n, k):      if (n & (1 << (k - 1))):         return True     else:         return Falsedef maximalRectangle( matrix):    if not matrix or not matrix[0]:        return 0    n = len(matrix[0])    height = [0] * (n + 1)    ans = 0    for row in matrix:        for i in range(n):            height[i] = height[i] + 1 if row[i] == '0' else 0        stack = [-1]        for i in range(n + 1):            while height[i] < height[stack[-1]]:                h = height[stack.pop()]                w = i - 1 - stack[-1]                ans = max(ans, h * w)            stack.append(i)    return ans  def matched(str):    count = 0    for i in str:        if i == "(":            count += 1        elif i == ")":            count -= 1        if count < 0:            return False    return count == 0 def isValid(h,m,nh,nm):    l=[0,1,5,-1,-1,2,-1,-1,8,-1]    if(l[h//10]==-1 or l[h%10]==-1 or l[m//10]==-1 or l[m%10]==-1):        return False    resh= l[m%10]*10 + l[m//10]    resm= l[h%10]*10 + l[h//10]     return (resh<nh and resm<nm)   def solve():     a,b,c=map(int,input().split())    #c,d=map(int,input().split())    #n=int(input())    #l=list(map(int,input().split()))    #n2=int(input())    #s=input()    #l1=list(map(int,input().split()))    k=0    y=a+b+c    a=max(a,b,c)    c=min(a,b,c)    b=y-a-c     if(a-1>=0):        a=a-1        k+=1    if(b-1>=0):        b=b-1        k+=1    if(c-1>=0):        c=c-1        k+=1     if(a-1>=0 and b-1>=0):        a-=1        b-=1        k+=1    if(c-1>=0 and b-1>=0):        c-=1        b-=1        k+=1    if(a-1>=0 and c-1>=0):        a-=1        c-=1        k+=1     if(a-1>=0 and b-1>=0 and c-1>=0):        a-=1        b-=1        c-=1        k+=1     print(k)           t=int(input())while(t>0):    t-=1    solve()
