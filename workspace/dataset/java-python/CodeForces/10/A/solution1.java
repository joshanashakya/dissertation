import javafx.util.Pair; import java.io.*;import java.util.ArrayList;import java.util.List; public class MAIN{     private static final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     public static void main(String[] args) throws Exception{         int sum = 0;         String[] str = reader.readLine().split(" ");        int n = Integer.parseInt(str[0]);        int P1 = Integer.parseInt(str[1]);        int P2 = Integer.parseInt(str[2]);        int P3 = Integer.parseInt(str[3]);        int T1 = Integer.parseInt(str[4]);        int T2 = Integer.parseInt(str[5]);         Pair[] lrs = new Pair[n];        for(int i =0;i<n;++i){            str = reader.readLine().split(" ");            int l = Integer.parseInt(str[0]);            int r = Integer.parseInt(str[1]);            lrs[i] = new Pair(l,r);            sum += (r-l)*P1;        }         for(int i =0;i<n-1;++i){            Pair p1 = lrs[i];            Pair p2 = lrs[i+1];            if(p1.r+T1<p2.l){                sum += T1*P1;                if(p1.r+T1+T2<p2.l){                    sum += T2*P2;                    sum += (p2.l - (p1.r+T1+T2))*P3;                } else {                    sum += (p2.l-(p1.r+T1))*P2;                }            } else {                sum += (p2.l-p1.r)*P1;            }        }         System.out.println(sum);      }     private static class Pair{        int l;        int r;        public Pair(int l, int r) {            this.l = l;            this.r = r;        }    }     private static List<List<Integer>> getCombinations(int[] a, int count){        List<List<Integer>> ret = new ArrayList<>(0);        if(a == null || a.length > 64 || count <= 0 || count > a.length){            return null;        } else {            long lim = (1L<<a.length);            for(long i=0;i<lim;++i){                List<Integer> poss = getBitPositionList(i);                if(poss.size() == count){                    List<Integer> list = new ArrayList<>(0);                    for(int j=0;j< poss.size();++j){                        list.add(a[poss.get(j)]);                    }                    ret.add(list);                }            }        }        return ret;     }     private static int getBitCount(long n){        int onCount = 0;        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                ++onCount;            }        }        return onCount;    }    private static List<Integer> getBitPositionList(long n){        List<Integer> idxs = new ArrayList<>(0);        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                idxs.add(((int) i));            }        }        return idxs;    }   }
