import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {		InputReader in = new InputReader(new BufferedInputStream(System.in));		PrintWriter out = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(System.out)));		TaskB solver = new TaskB();		long t1 = System.currentTimeMillis();		solver.solve(1, in, out);		out.flush();		long t2 = System.currentTimeMillis();//		System.err.println(t2 - t1);		out.close(); 	}} class Seg implements Comparable<Seg> {	int a;	int b; 	public Seg(int a, int b) {		this.a = a;		this.b = b;	} 	public int compareTo(Seg t) {		return Integer.compare(b, t.b);	}} class TaskB { 	int id[];	int sz[];	double eps = 1e-10;	long INF = (long) 1e15; 	void solve(int testNumber, InputReader in, PrintWriter pw) {		int n = in.nextInt();		int k = in.nextInt();		boolean[][] used = new boolean[k][k];		int xc = k / 2;		int yc = k / 2;		for (int i = 0; i < n; ++i) {			int m = in.nextInt();			int x = -1;			int yl = -1;			int yr = -1;			int min = (int) 1e9;			for (int j = 0; j < k; ++j) {				for (int l = 0; l <= k - m; ++l) {					boolean use = false;					for (int r = l; r < l + m; ++r) {						use |= used[j][r];					}					if (!use) {						int sum = 0;						for (int r = l; r < l + m; ++r) {							sum += (Math.abs(xc - j) + Math.abs(yc - r));						}						if (sum < min) {							min = sum;							x = j;							yl = l;							yr = l + m - 1;						}					}				}			} //			System.err.println(min);			if (x == -1) {				pw.println(x);			} else {				pw.println((x + 1) + " " + (yl + 1) + " " + (yr + 1));				for (int j = yl; j < yr + 1; ++j) {					used[x][j] = true;				}			}		}	} 	long pow(int n, int m) {		if (m == 0)			return 1;		long ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	} 	double pow(double n, int m) {		if (m == 0)			return 1;		double ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	}} class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
