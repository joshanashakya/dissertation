import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int m = in.nextInt();            int h1 = in.nextInt();            int a1 = in.nextInt();            int x1 = in.nextInt();            int y1 = in.nextInt();            int[] used = new int[m];            int h = h1;            int t1 = -1;            int cyc1 = 1;            while (used[h] == 0) {                used[h] = cyc1;                if (h == a1 && t1 == -1) {                    t1 = cyc1 - 1;                }                h = (int) (((long) x1 * h + y1) % m);                cyc1++;            }            boolean out1 = false;            if (used[h] - 1 > t1) {                out1 = true;            }            cyc1 -= used[h];            int h2 = in.nextInt();            int a2 = in.nextInt();            int x2 = in.nextInt();            int y2 = in.nextInt();            used = new int[m];            h = h2;            int t2 = -1;            int cyc2 = 1;            while (used[h] == 0) {                used[h] = cyc2;                if (h == a2 && t2 == -1) {                    t2 = cyc2 - 1;                }                h = (int) (((long) x2 * h + y2) % m);                cyc2++;            }            boolean out2 = false;            if (used[h] - 1 > t2) {                out2 = true;            }            cyc2 -= used[h];            if (t1 == -1 || t2 == -1) {                out.println(-1);                return;            }            int dif = Math.abs(t1 - t2);            if ((dif % gcd(cyc1, cyc2)) != 0) {                out.println(-1);                return;            }            if (out1) {                if (t2 > t1 || (t1 - t2) % cyc2 > 0) {                    out.println(-1);                    return;                }            }            if (out2) {                if (t1 > t2 || (t2 - t1) % cyc1 > 0) {                    out.println(-1);                    return;                }            }            long c = 0;            while (true) {                long num = cyc1 * c + t1;                if (num >= t2 && (num - t2) % cyc2 == 0) {                    out.println(num);                    return;                }                c++;            }        }         long gcd(long a, long b) {            if (b == 0) return a;            return gcd(b, a % b);        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
