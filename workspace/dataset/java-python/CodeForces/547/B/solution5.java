import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Stack;import java.util.StringTokenizer; public class CF547B {    public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt();        int[] arr = new int[n];        for (int i = 0; i < n; i++)            arr[i] = sc.nextInt();         int[] res = solve(arr);        for (int i = 0; i < res.length; i++)            pw.print(res[i] + " ");         pw.close();        sc.close();    }     public static int[] solve(int[] arr) {        int n = arr.length;        int[] l = new int[n], r = new int[n], w = new int[n];         Stack<Integer> s = new Stack<Integer>();        for (int i = 0; i < r.length; i++) {            while (!s.isEmpty() && arr[s.peek()] >= arr[i])                s.pop();            l[i] = s.isEmpty() ? -1 : s.peek();            s.push(i);        }        s.clear();        for (int i = r.length - 1; i >= 0; i--) {            while (!s.isEmpty() && arr[s.peek()] >= arr[i])                s.pop();            r[i] = s.isEmpty() ? r.length : s.peek();            s.push(i);        }        for (int i = 0; i < w.length; i++) {            int windowIdx = r[i] - l[i] - 2;            w[windowIdx] = Math.max(w[windowIdx], arr[i]);        }        int maxSoFar = w[w.length - 1];        for (int i = w.length - 1; i >= 0; i--)            w[i] = maxSoFar = Math.max(w[i], maxSoFar);         return w;    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
