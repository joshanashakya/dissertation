 import java.util.*;import java.lang.*;import java.io.*;public class Prac{         static class InputReader {         private final InputStream stream;        private final byte[] buf = new byte[8192];        private int curChar, snumChars;        public InputReader(InputStream st) {            this.stream = st;        }         public int read() {            if (snumChars == -1)                throw new InputMismatchException();            if (curChar >= snumChars) {                curChar = 0;                try {                    snumChars = stream.read(buf);                }                 catch (IOException e) {                    throw new InputMismatchException();                }                if (snumChars <= 0)                    return -1;            }            return buf[curChar++];        }        public int ni() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nl() {            int c = read();            while (isSpaceChar(c)) {            c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public int[] nia(int n) {            int a[] = new int[n];            for (int i = 0; i < n; i++) {                a[i] = ni();            }            return a;        }         public String rs() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                    c = read();            } while (!isSpaceChar(c));            return res.toString();        }        public String nextLine() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        }         public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }     }    public static class Key {         private final int x;        private final int y;         public Key(int x, int y) {            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (!(o instanceof Key)) return false;            Key key = (Key) o;            return x == key.x && y == key.y;        }         @Override        public int hashCode() {            int result = x;            result = 31 * result + y;            return result;        }     }        static PrintWriter w = new PrintWriter(System.out);    static long mod=998244353L,mod1=1000000007;    static class Pair{        int x,y;        public Pair(int x,int y){            this.x=x;            this.y=y;        }    }    static int arr[][];    static boolean isA(int i,int j,int k){        int s=0;        for(int l=0;l<5;l++){            int a=arr[i][l]-arr[j][l],b=arr[i][l]-arr[k][l];            s+=(a*b);        }        return (s>0?true:false);    }    public static void main(String [] args){        InputReader sc=new InputReader(System.in);        int n=sc.ni();        arr=new int[n][5];        for(int i=0;i<n;i++){            for(int j=0;j<5;j++){                arr[i][j]=sc.ni();            }        }        if(n>100)w.println(0);        else{            boolean ans[]=new boolean[n];            Arrays.fill(ans,true);            for(int i=0;i<n;i++){                for(int j=0;j<n;j++){                    for(int k=0;k<n;k++){                        if(i==j||i==k||j==k)continue;                        if(isA(i,j,k)){                            ans[i]=false;                        }                    }                }            }//            for(int i=0;i<n;i++){//                outer://                for(int j=i-1;j>=0;j--){//                    for(int k=i+1;k<n;k++){//                        if(isA(i,j,k)){//                            ans[i]=false;//                            //break outer;//                        }//                        if(isA(j,i,k)){//                            ans[i]=false;//                        }//                        if(isA(k,i,j)){//                            ans[k]=false;//                        }//                    }//                }//            }            int res=0;            for(int i=0;i<n;i++){                if(ans[i])res++;            }            w.println(res);            for(int i=0;i<n;i++){                if(ans[i])w.println(i+1);            }        }        w.close();    }}
