from os import path;import sys,timemod = int(1e9 + 7)from math import ceil, floor,gcd,log,log2 ,factorial,sqrtfrom collections import defaultdict ,Counter , OrderedDict , deque;from itertools import combinations,permutations# from string import ascii_lowercase ,ascii_uppercasefrom bisect import *;from functools import reduce;from operator import mul;maxx = float('inf')I = lambda :int(sys.stdin.buffer.readline())lint = lambda :[int(x) for x in sys.stdin.buffer.readline().split()]S = lambda: sys.stdin.readline().strip('\n')grid = lambda  r :[lint() for i in range(r)]localsys = 0start_time = time.time()#left shift --- num*(2**k) --(k - shift)nCr = lambda n, r: reduce(mul, range(n - r + 1, n + 1), 1) // factorial(r)def ceill(n,x):    return (n+x -1 )//xT =0def ok(A):	N = A[0]	for i in range(1,A[0]):		if A[i+1] > A[i]:			return (-1 , -1)	return (A[1] , A[-1])def solve():	n = I()	arr = [lint() for _ in range(n)]	s , l , ans  , p= [] , [] , 0 , 0	for i in arr:		a , b = ok(i)		if a==b == - 1:			p+=1			continue		l.append(a);s.append(b)#l - large , s - small	ans+= p*n	s.sort();l.sort()	for i in l :		ans+= bisect_left(s, i) + p	print(ans)         		       def run():    if (path.exists('input.txt')):        sys.stdin=open('input.txt','r')        sys.stdout=open('output.txt','w')  run()T = I() if T else 1for _ in range(T):    solve()  if localsys:    print("\n\nTime Elased :",time.time() - start_time,"seconds")  
