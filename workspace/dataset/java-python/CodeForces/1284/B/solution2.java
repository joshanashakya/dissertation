import java.util.*;import java.io.*;import java.math.*; public class First{        public static int bs(int a[], int element,int k)    {          int start = 1;          int end = k;          int index=-1;          while(start<=end)          {               int mid = (start+end)/2;               if(a[mid]<=element)               {                    start = mid+1;               }               else                {                    if(a[mid-1]<=element)                    {                        index = mid;                        break;                    }                    else                    {                          end = mid-1;                    }               }          }           return index;     }      public static void process()throws IOException    {         int n = ni();         ArrayList<Integer> min = new ArrayList<Integer>();         ArrayList<Integer> max = new ArrayList<Integer>();         long tc=0l;         for(int j=0;j<n;j++)         {              int maxV = Integer.MIN_VALUE;              int minV = Integer.MAX_VALUE;              int m = ni();              boolean flag = false;              int a[] = new int[m+1];              for(int i=1;i<=m;i++)              {                   a[i] = ni();                   if(a[i]>maxV)                   {                        maxV = a[i];                   }                   if(a[i]<minV)                   {                        minV = a[i];                   }                   if(i==1)                   {                        continue;                   }                   else                   {                        if(a[i]-a[i-1]>0)                        {                            flag=true;                        }                   }              }              if(!flag)              {                   min.add(minV);                   max.add(maxV);              }              else              {                   tc++;              }         }          int k = max.size();         int a[] = new int[k+2];          int in=1;         for(Integer i : max)         {              a[in] = i;              in++;         }          a[k+1] = Integer.MAX_VALUE;         Arrays.sort(a);          long ans=0l;         for(Integer i : min)         {              int index = bs(a,i,k);              if(index==-1)              {                   ans+=0;              }              else              {                   ans+=(k-index+1);              }         }          if(tc>0)         {              long x = 2*n*tc;              long p = (2*tc)-1;              long y = (p*(p+1))/2;              long q = p/2;              long z = q*(q+1);              ans+=(x-(y-z));         }         pn(ans);                        }      	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);         // long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}  
