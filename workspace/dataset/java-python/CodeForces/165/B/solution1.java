import java.io.*;import java.util.*; import static java.lang.Math.*; public class Main {    public static void main(String[] args) throws IOException {        FastReader in = new FastReader(System.in);        PrintWriter pw = new PrintWriter(System.out);        long n = in.nextLong(), k = in.nextLong();        pw.println(solve(n, k));        pw.close();    }     static long solve(long n, long k) {        long res = 1;        long left = 1, right = (long) 1e9;        while (left <= right) {            long mid = left + (right - left) / 2;            long v = pow(mid, k);            if (v >= n) {                right = mid - 1;                res = mid;            } else left = mid + 1;        }        return res;    }     static long pow(long v, long k) {        long sum = v;        long co_ef = 1;        while (true) {            co_ef *= k;            long divide = v / co_ef;            if (divide == 0) break;            sum += divide;        }        return sum;    }     static void debug(Object... obj) {        System.err.println(Arrays.deepToString(obj));    }     static class FastReader {        InputStream is;        private byte[] inbuf = new byte[1024];        private int lenbuf = 0, ptrbuf = 0;         public FastReader(InputStream is) {            this.is = is;        }         public int readByte() {            if (lenbuf == -1) throw new InputMismatchException();            if (ptrbuf >= lenbuf) {                ptrbuf = 0;                try {                    lenbuf = is.read(inbuf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (lenbuf <= 0) return -1;            }            return inbuf[ptrbuf++];        }         public boolean isSpaceChar(int c) {            return !(c >= 33 && c <= 126);        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }         public int skip() {            int b;            while ((b = readByte()) != -1 && isSpaceChar(b)) ;            return b;        }         public String next() {            int b = skip();            StringBuilder sb = new StringBuilder();            while (!(isSpaceChar(b))) {                sb.appendCodePoint(b);                b = readByte();            }            return sb.toString();        }          public String nextLine() {            int c = skip();            StringBuilder sb = new StringBuilder();            while (!isEndOfLine(c)) {                sb.appendCodePoint(c);                c = readByte();            }            return sb.toString();        }         public int nextInt() {            int num = 0, b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }            while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public long nextLong() {            long num = 0;            int b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }             while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public double nextDouble() {            return Double.parseDouble(next());        }         public char[] next(int n) {            char[] buf = new char[n];            int b = skip(), p = 0;            while (p < n && !(isSpaceChar(b))) {                buf[p++] = (char) b;                b = readByte();            }            return n == p ? buf : Arrays.copyOf(buf, p);        }         public char readChar() {            return (char) skip();        }    }}	  	 	  	   	 	   			   		 			
