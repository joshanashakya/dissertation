import java.io.*;import java.util.*;public class Asd {static PrintWriter w=new PrintWriter(System.out);static FastScanner s=new FastScanner();static HashSet<Long> list=new HashSet<>();	public static void main(String[] args) {				int t=1;//s.nextInt();		while(t-->0)                {		    solve();		}	       w.close();        }        /* Function to print all the permutations of the string        static String swap(String str, int i, int j)        {        char ch;        char[] array = str.toCharArray();        ch = array[i];        array[i] = array[j];        array[j] = ch;        return String.valueOf(array);       }          static void permute(String str,int low,int high)    {        if(low == high)            list.add(Long.parseLong(str));         int i;        for(i = low; i<=high; i++){            str = swap(str,low,i);            permute(str, low+1,high);            str = swap(str,low,i);        }    }        use  permute(str2,0,str2.length()-1); to perform combinations        */           public static void solve()        {               int n=s.nextInt();                           String str=s.next();             char ch1=str.charAt(0);char ch2=str.charAt(n-1);long start=1;long end=1;             for(int i=1;i<n;i++)             {                 char ch=str.charAt(i);                 if(ch==ch1)                     start++;                 else                     break;             }             for(int i=n-2;i>=0;i--)             {                 char ch=str.charAt(i);                 if(ch==ch2)                     end++;                  else                     break;                              }             if(ch1!=ch2)                 w.println(1+start+end);             else             {                                                      w.println(((start+1)*(end+1))% 998244353);                 //w.println(1410165408%998244353  );             }                                 }                               	static long factorial(int n)        {            long su=1;            for(int i=1;i<=n;i++)                su*=(long)i;            return su;        }	static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		public String next() {			while (!st.hasMoreElements())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}		int[] readArray(int n) {			int[] a=new int[n]; 			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}				int nextInt () {			return Integer.parseInt(next());		}                long nextLong () {			return Long.parseLong(next());		}                double nextDouble () {			return Double.parseDouble(next());		}	}Â }
