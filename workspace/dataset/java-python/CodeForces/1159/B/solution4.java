import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;import java.util.StringTokenizer;import java.util.TreeMap; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {		InputReader in = new InputReader(new BufferedInputStream(System.in));		PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));		TaskB solver = new TaskB();//		long t1 = System.currentTimeMillis();		solver.solve(1, in, out);		out.flush();//		long t2 = System.currentTimeMillis();//		System.err.println(t2 - t1);		out.close(); 	}} class Pos implements Comparable<Pos> {	int x;	int y;	long val; 	public Pos(int x, int y, long val) {		this.x = x;		this.y = y;		this.val = val;	} 	public int compareTo(Pos p) {		if (val == p.val) {			if (x == p.x)				return Integer.compare(y, p.y);			return Integer.compare(x, p.x);		}		return Long.compare(val, p.val);	} } class Pair implements Comparable<Pair> {	int fir;	int sec;	int thi; 	Pair(int fir, int sec, int thi) {		this.fir = fir;		this.sec = sec;		this.thi = thi;	} 	public int compareTo(Pair p) {		return Integer.compare(sec, p.sec);	}} class TaskB { 	int INF = (int) 1e9 + 7;	int id[];	int sz[];	long queue[]; 	void solve(int testNumber, InputReader in, PrintWriter pw) {		int n = in.nextInt();		int a[] = new int[n];		TreeMap<Integer, List<Integer>> map = new TreeMap<>(); 		for (int i = 0; i < n; ++i) {			a[i] = in.nextInt();			List<Integer> pos = new ArrayList<>();			map.put(a[i], pos);		}		for (int i = 0; i < n; ++i) {			map.get(a[i]).add(i + 1);		}		int min = INF;		for (int x : map.keySet()) {			for (int pos : map.get(x)) {				int div = Math.max(pos - 1, n - pos);				min = Math.min(x / div, min);			}		}		pw.println(min);	} 	int find(int x) {		int p = x;		if (p == id.length)			return p;		while (id[p] != p) {			p = id[p];		}		while (id[x] != x) {			int tmp = id[x]; 			id[x] = p;			x = tmp;		}		return p; 	} 	void union(int x, int y) {		int u = find(x);		int v = find(y);		if (u == v)			return;		id[v] = u;		sz[u] += sz[v];	} 	long gcd(long a, long b) {		if (b == 0)			return a;		return gcd(b, a % b);	}} class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
