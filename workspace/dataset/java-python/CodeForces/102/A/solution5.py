from math import *  class graph:    # initialize graph    def __init__(self, gdict=None):        if gdict is None:            gdict = dict({})        self.gdict = gdict     # get edges    def edges(self):        return self.find_edges()     # find edges    def find_edges(self):        edges = []        for node in self.gdict:            for nxNode in self.gdict[node]:                if {nxNode, node} not in edges:                    edges.append({node, nxNode})        return edges     # Get verticies    def get_vertices(self):        return list(self.gdict.keys())     # add vertix    def add_vertix(self, node):        if node not in self.gdict:            self.gdict[node] = []     # add edge    def add_edge(self, edge):        edge = set(edge)        (node1, node2) = edge        if node1 in self.gdict:            self.gdict[node1].append(node2)        else:            self.gdict[node1] = [node2]         if node2 in self.gdict:            self.gdict[node2].append(node1)        else:            self.gdict[node2] = [node1]  def inp():    return map(int, input().split())  def arr_inp():    return [int(x) for x in input().split()]  n, m = inp()a = arr_inp()g = graph()cost = inf for i in range(m):    u, v = inp()    g.add_edge((u, v))    if (i > 1):        for key in g.gdict:            if (u in g.gdict[key] and v in g.gdict[key]):                cost = min(cost, a[u - 1] + a[v - 1] + a[int(key) - 1]) if (cost == inf):    print(-1)else:    print(cost)
