import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {        int N = in.nextInt();        int M = in.nextInt();         char[][] ca = new char[N][];        for (int i = 0; i < N; i++) {            ca[i] = in.next().toCharArray();        }         // check horizontal        boolean good = false;        if (N%3 == 0 && !good) {            int sz = N/3;             boolean can = true;            for (int i = 0; i < 3; i++) {                if (ca[i*sz][0] == ca[((i+1)*sz)%N][0]) can = false;            }             boolean horizontalgood = can;            for (int i = 0; i < 3 && horizontalgood; i++) {                boolean localgood = true;                 char c = ca[i*sz][0];                for (int j = 0; j < sz && localgood; j++) {                    for (int k = 0; k < M && localgood; k++) {                        if (ca[sz*i+j][k] != c) localgood = false;                    }                }                 horizontalgood &= localgood;            }            good |= horizontalgood;         }         // check vert        if (M%3 == 0 && !good) {             int sz = M/3;            boolean can = true;            for (int i = 0; i < 3; i++) {                if (ca[0][i*sz] == ca[0][((i+1)*sz)%M]) can = false;            }            boolean verticalgood = can;            for (int i = 0; i < 3 && verticalgood; i++) {                boolean localgood = true;                 char c = ca[0][i*sz];                for (int j = 0; j < sz && localgood; j++) {                    for (int k = 0; k < N && localgood; k++) {                        if (ca[k][sz*i+j] != c) localgood = false;                    }                }                 verticalgood &= localgood;            }            good |= verticalgood;        }         out.println(good ? "YES" : "NO");    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
