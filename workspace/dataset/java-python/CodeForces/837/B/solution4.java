//package main; import java.io.*;import java.util.*;import java.math.*; public final class Main {    BufferedReader br;    StringTokenizer stk;        public static void main(String[] args) throws Exception {        new Main().run();    }        {        stk = null;        br = new BufferedReader(new InputStreamReader(System.in));    }        long mod = 998244353;    StringBuilder res = new StringBuilder(1000005);    void run() throws Exception {        int n = ni();        int m = ni();        char[][] c = new char[n][];        for(int i = 0; i < n; i++) {            c[i] = nc();        }                boolean ok = false;        if(n % 3 == 0) {            HashSet<Character> obtained = new HashSet<>();                        int M = n / 3;                        HashSet<Character> first = collectRows(c, 0, M);            HashSet<Character> second = collectRows(c, M, 2 * M);            HashSet<Character> third = collectRows(c, 2 * M, n);                        if(first.size() == 1 && second.size() == 1 && third.size() == 1) {                obtained.addAll(first);                obtained.addAll(second);                obtained.addAll(third);                if(obtained.size() == 3) {                    ok = true;                }            }        }        if(m % 3 == 0) {            HashSet<Character> obtained = new HashSet<>();                        int M = m / 3;                        HashSet<Character> first = collectCols(c, 0, M);            HashSet<Character> second = collectCols(c, M, 2 * M);            HashSet<Character> third = collectCols(c, 2 * M, m);                        //System.out.println(first + " " + second + " " + third);                        if(first.size() == 1 && second.size() == 1 && third.size() == 1) {                obtained.addAll(first);                obtained.addAll(second);                obtained.addAll(third);                if(obtained.size() == 3) {                    ok = true;                }            }        }                System.out.println(ok ? "YES" : "NO");    }        HashSet<Character> collectRows(char[][] c, int a, int b) {        HashSet<Character> chars = new HashSet<>();        for(int i = a; i < b; i++) {            for(char ch : c[i]) {                chars.add(ch);            }        }        return chars;    }        HashSet<Character> collectCols(char[][] c, int a, int b) {        HashSet<Character> chars = new HashSet<>();        for(int i = a; i < b; i++) {            for(int j = 0; j < c.length; j++) {                chars.add(c[j][i]);            }        }        return chars;    }        //Reader & Writer    String nt() throws Exception {        if (stk == null || !stk.hasMoreTokens())            stk = new StringTokenizer(br.readLine(), " ");        return stk.nextToken();    }     char[] nc() throws Exception {        return nt().toCharArray();    }     int ni() throws Exception {        return Integer.parseInt(nt());    }     long nl() throws Exception {        return Long.parseLong(nt());    }        double nd() throws Exception {        return Double.parseDouble(nt());    }        //Some Misc methods    long get(int l, int r, long[] a) {        return l == 0 ? a[r] : a[r] - a[l - 1];    }        void shuffle(long[] a) {        Random r = new Random();        for(int i = 0; i < a.length; i++) {            int idx = r.nextInt(a.length);            long temp = a[i];            a[i] = a[idx];            a[idx] = temp;        }    }        void reverse(long[] a) {        for(int i = 0, j = a.length - 1; i < j; i++, j--) {            long temp = a[i];            a[i] = a[j];            a[j] = temp;        }    }        void print(int[] a) {        System.out.println(Arrays.toString(a));    }}
