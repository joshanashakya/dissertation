import java.util.*;import java.io.IOException;import java.io.InputStream;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader; public class Main {	public static final int maxn = 1005;	public static boolean[] dp = new boolean[maxn];	public static int[] a = {0, 4, 9, 49};	public static int[] b = {49, 45, 40, 0};	public static void init() {		for (int i = 0; i <= 1000; ++i) dp[i] = false;		dp[0] = true;	}	public static int count() {		int ret = 0;		for (int i = 0; i <= 1000; ++i) {			if (dp[i]) ++ret;		}		return ret;	}    public static void solve(long n) {    	init();        long ans = 0;    	if (n*49 <= 1000) {    		for (int i = 0; i <= n; ++i) {				int sum = 4*i;				if(sum > 1000) break;    			for (int j = 0; j <= n - i; ++j) {    				sum = 4*i + 9*j;    				if(sum > 1000) break;    				for (int k = 0; k <= n - i - j; ++k) {        				sum = 4*i + 9*j + 49*k;        				if(sum > 1000) break;        				dp[sum] = true;    				}    			}    		}        	ans = count();        } else {        	ans += n*49 + 1 - 1000;        	for (int i = 0; i <= n; ++i) {        		int sum = 4*i;        		if(sum >= 500) break;        		for (int j = 0; j <= n - i; ++j) {        			sum = 4*i + 9*j;        			if(sum >= 500) break;        			for (int k = 0; k <= n - i - j; ++k) {        				sum = 4*i + 9*j + 49*k;        				if(sum >= 500) break;        				dp[sum] = true;        			}        		}        	}        	ans += count();        	init();        	for (int i = 0; i <= n; ++i) {        		int sum = 49*i;        		if(sum >= 500) break;        		for (int j = 0; j <= n - i; ++j) {        			sum = 49*i + 45*j;        			if(sum >= 500) break;        			for (int k = 0; k <= n - i - j; ++k) {        				sum = 49*i + 45*j + 40*k;        				if(sum >= 500) break;        				dp[sum] = true;        			}        		}        	}        	ans += count();        }    	System.out.println(ans);    }	public static void main(String[] args) {        InputStream inputStream = System.in;        InputReader in = new InputReader(inputStream);        long n = in.nextLong();        solve(n);//        Scanner in = new Scanner(System.in);//        //        in.close();    }    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;        public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }        public String next() {            while(tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }    }}  		  	    	   	 		 	  			 			
