//      これを翻訳している間、あなたはあなたの人生のいくつかの貴重な瞬間を無駄にしました  import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;  public class Solution {    static PrintWriter fop = new PrintWriter(System.out);      public static void main(String[] args) {        FastScanner fsca = new FastScanner();          int n = fsca.nextInt() ;        int x = fsca.nextInt() ;        int y = fsca.nextInt() ;        char a[] = fsca.next().toCharArray() ;         int ones = 0 ;        for (int i = 0; i <n ;  ) {            if (a[i] == '1'){                ones++ ;                int j =i ;                while (j<n &&a[j] == '1'  ) j++ ;                i = j ;            }            else i++ ;        }         int zeros = 0 ;        if (a[0] == '0')zeros++ ;        if (a[n-1] == '0')zeros++ ;        if (ones >0)zeros+= (ones-1) ;        if (zeros == 0){            System.out.println(0);            return;        }        if (ones == 0){            System.out.println(y);            return;        }          if (a[0] == '1' && a[n-1] == '1'){            int moves = ones-2 ;            long temp1 = (long) moves*x+y ;            long temp2 = (long) zeros*y ;            System.out.println(Math.min(temp1 , temp2));        }        else if (a[0] == '1' || a[n-1] == '1' ){          int moves = ones-1 ;          long temp1 = (long) moves *x + y ;          long temp2 = (long) zeros*y ;          System.out.println(Math.min(temp1 , temp2));      }      else {          int moves = ones-1 ;          long temp1 = (long) moves *x + 2L *y ;          long temp2 = (long) zeros*y ;          long temp3 = (long) ones*x + y ;            System.out.println( Math.min(temp1 , Math.min(temp2 , temp3))    );      }                           fop.flush();        fop.close();      }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/    // template starts from here :     static long gcd(long a, long b) {        return (b == 0) ? a : gcd(b, a % b);    }     static int gcd(int a, int b) {        return (b == 0) ? a : gcd(b, a % b);    }      static final Random random = new Random();     static void ruffleSort(int[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }     static void ruffleSort(long[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n);            long temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }      static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[][] readMat(int n, int m) {            int a[][] = new int[n][m];            for (int i = 0; i < n; i++)                for (int j = 0; j < m; j++)                    a[i][j] = nextInt();            return a;        }        char[][] readCharMat(int n, int m) {            char a[][] = new char[n][m];            for (int i = 0; i < n; i++) {                String s = next();                for (int j = 0; j < m; j++)                    a[i][j] = s.charAt(j) ;            }            return a;        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    }     static void print(int a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }     static void print(long a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }}        
