import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet;import java.util.function.Function;import java.util.stream.Collectors;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream;  public class Solution { 	public static int INF= Integer.MAX_VALUE;	public static long MOD= 1000000000+7L; 	public static int WHITE= 0;	public static int GRAY= 1;	public static int BLACK= 2; 	public static int rr[]={0,-1,0,1};	public static int cc[]={-1,0,1,0};  	static class Student{		public int index;		public int cost;		public int ability;		public int count=0; 		Student(int i, int c, int a){			index=i; cost=c; ability=a;		}		Student(int i, int c, int a, int cc){			index=i; cost=c; ability=a; count=cc;		} 		public int getCost(){			return cost;		}		public int getAbility(){			return ability;		}	}		static class Bug{		int index;		int complexity;		Bug(int i, int c){			index=i; complexity=c;		}		public int getComplexity(){			return complexity;		}	} 	static class Solver {				public int[] can(long s, List<Bug> bugs, List<Student> students, int k){			long taken=0;			//PriorityQueue<Student> pq= new PriorityQueue<Student>(Comparator.comparing(Student::getCost));			PriorityQueue<Student> pq= new PriorityQueue<Student>((a,b) -> {				if(a.count!=b.count)					return a.count-b.count;				return a.cost-b.cost;			});			int pointer=0;			int ans[]= new int[bugs.size()+1]; 			for(Bug b: bugs){				while(pointer<students.size() && students.get(pointer).ability>=b.complexity){					Student st= students.get(pointer);					pq.add(new Student(st.index, st.cost, st.ability,k));					pointer++;				}				//System.out.println("pq size:"+pq.size());				if(pq.isEmpty())					return null;								Student now= pq.poll();				ans[b.index]= now.index;				if(now.count==k)					taken+=now.cost;								//System.out.println("bug "+ b.index+" take student "+now.index+" cost:"+now.cost+" now total:"+taken);								if(taken>s)					return null;				now.count--;				if(now.count>0)					pq.add(now);			}						return ans;		} 		public void solve(InputReader in, PrintWriter out) {			//int tt=in.nextInt();			int tt=1;			for(int cases=1;cases<=tt;cases++){				int n= in.nextInt();				int m = in.nextInt();				int s= in.nextInt();								int ability[]= new int[n+1];				int cost[]= new int[n+1];								List<Bug> bugs= new ArrayList<Bug>();				List<Student> students= new ArrayList<Student>();								for(int i=1;i<=m;i++){					bugs.add(new Bug(i,in.nextInt()));				}				for(int i=1;i<=n;i++){					ability[i]= in.nextInt();				}				for(int i=1;i<=n;i++){					cost[i]= in.nextInt();				}								for(int i=1;i<=n;i++){					students.add(new Student(i,cost[i],ability[i]));				}								Collections.sort(students,Comparator.comparing(Student::getAbility).reversed());				Collections.sort(bugs,Comparator.comparing(Bug::getComplexity).reversed());																int lo=0;				int high=1000000000;				int[]ans=new int[m+1];				while(lo<high){					int mid= (lo+high)/2;					int []tmp= can(s,bugs,students,mid);					if(tmp!=null){						for(int i=1;i<=m;i++)							ans[i]= tmp[i];						high=mid;					}					else{						lo=mid+1;					}				}								if(lo==1000000000){					out.println("NO");				}				else{					out.println("YES");					for(int i=1;i<=m;i++)						out.print(ans[i]+" ");					out.println();				}							}		} 	}  	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		PrintWriter out = new PrintWriter(outputStream);		Solver solver = new Solver();		solver.solve(in, out);		out.close();	} 	static class InputReader {		public BufferedReader reader;		public StringTokenizer tokenizer; 		public InputReader(InputStream stream) {			reader = new BufferedReader(new InputStreamReader(stream), 32768);			tokenizer = null;		} 		public String next() {			while (tokenizer == null || !tokenizer.hasMoreTokens()) {				try {					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 	}}
