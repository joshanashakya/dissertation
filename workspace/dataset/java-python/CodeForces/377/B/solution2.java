import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int numStudents;    int numBugs;    long budget;     int[][] bug;    int[][] student;     void run(FastScanner in, PrintWriter out) {         numStudents = in.nextInt();        numBugs = in.nextInt();        budget = in.nextLong();         bug = new int[numBugs][2];        student = new int[numStudents][3];         for (int i = 0; i < numBugs; i++) {            bug[i][0] = in.nextInt();            bug[i][1] = i;        }         for (int i = 0; i < numStudents; i++) {            student[i][0] = in.nextInt();            student[i][2] = i;        }        for (int i = 0; i < numStudents; i++) student[i][1] = in.nextInt();         Arrays.sort(bug, (a, b) -> a[0] - b[0]);        Arrays.sort(student, (a, b) -> a[0]-b[0]);         // how many days will it take        int lo = 0;        int hi = numBugs+1;         while (lo < hi) {            int m = (lo+hi)>>1;            if (can(m)) {                hi = m;            } else {                lo = m+1;            }        }         if (lo == numBugs+1) {            out.println("NO");        } else {            out.println("YES");            int[] ret = get(lo);            for (int x : ret) out.print(x + " ");            out.println();        }    }      int[] get(int x) {         int[] ret = new int[numBugs];         // first guy solves first x problems, second guy solves second x problems etc        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> {            return student[a][1]-student[b][1];        });         int bi = numBugs-1;        int si = numStudents-1;         while (bi >= 0) {             while (si >= 0 && student[si][0] >= bug[bi][0]) {                pq.offer(si);                si--;            }             int i = pq.poll();            for (int j = 0; j < x && bi >= 0; j++, bi--) {                ret[bug[bi][1]] = student[i][2]+1;            }        }        return ret;    }     // can i finish in x days    boolean can(int x) {         // first guy solves first x problems, second guy solves second x problems etc        PriorityQueue<Integer> pq = new PriorityQueue<>();        int bi = numBugs-1;        int si = numStudents-1;        long currcost = 0;         while (bi >= 0) {             while (si >= 0 && student[si][0] >= bug[bi][0]) {                pq.offer(student[si][1]);                si--;            }             if (pq.isEmpty() || currcost + pq.peek() > budget) return false;             long currreward = pq.poll();            currcost += currreward;             bi -= x;        }        return true;    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
