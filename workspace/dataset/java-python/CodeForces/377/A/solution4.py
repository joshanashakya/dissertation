from collections import defaultdictfrom bisect import * def solve(N, M, K, maze):    ans = maze    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]     def dfs(i, j, vis):        if not (0 <= i < M and 0 <= j < N):            return 0        elif maze[i][j] != ".":            return 0        elif (i, j) in vis:            return 1         res = 0        vis[(i, j)] = 0        for x, y in dirs:            res += dfs(i + x, j + y, vis)        vis[(i, j)] = res         return 1     can = set()    for i in range(M):        for j in range(N):            if maze[i][j] == ".":                can.add((i, j))     vis = set()    q = [can.pop()]    traversal = []    while q:        i, j = q.pop()        if (i, j) in vis:            continue         traversal.append((i, j))        vis.add((i, j))        for x, y in dirs:            if not (0 <= i + x < M and 0 <= j + y < N):                continue            elif maze[i + x][j + y] != ".":                continue            q.append((i + x, j + y))     while K:        K -= 1        i, j = traversal.pop()        ans[i][j] = "X"    return ans  M, N, K = map(int, input().split())maze = []for i in range(M):    line = list(input())    maze.append(line) ans = solve(N, M, K, maze)for i in range(M):    print(("").join(ans[i]))
