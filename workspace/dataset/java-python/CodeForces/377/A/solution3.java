import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        AMaze solver = new AMaze();        solver.solve(1, in, out);        out.close();    }     static class AMaze {        static int n;        static int m;        static char[][] grid;        static boolean[][] visited;        static int k;        static int[] dr = {-1, 0, +1, 0};        static int[] dc = {0, +1, 0, -1};         public void solve(int testNumber, InputReader in, OutputWriter out) {            n = in.nextInt();            m = in.nextInt();            k = in.nextInt();            grid = new char[n][m];            for (int i = 0; i < n; i++) {                String t = in.next();                for (int j = 0; j < m; j++) {                    grid[i][j] = t.charAt(j);                }            }            visited = new boolean[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    if (grid[i][j] == '.') {                        dfs(i, j);                        for (int a = 0; a < n; a++) {                            for (int b = 0; b < m; b++) {                                out.print(grid[a][b]);                            }                            out.println();                        }                        return;                    }                 }            }         }         static void dfs(int r, int c) {            if (r < 0 || c < 0 || r >= n || c >= m) return;            if (visited[r][c]) return;            if (grid[r][c] == '#') return;            visited[r][c] = true;            for (int i = 0; i < 4; i++) {                dfs(r + dr[i], c + dc[i]);            }            if (k > 0) {                grid[r][c] = 'X';                k--;            }        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void println() {            writer.println();        }         public void print(char i) {            writer.print(i);        }         public void close() {            writer.close();        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
