import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.stream.IntStream;import java.util.Arrays;import java.io.IOException;import java.util.ArrayList;import java.io.UncheckedIOException;import java.util.List;import java.util.stream.Stream;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            AMaze solver = new AMaze();            solver.solve(1, in, out);            out.close();        }    }     static class AMaze {        List<UndirectedEdge>[] g;        int n;        int m;        int k;        boolean[] visited;        IntegerArrayList seq;         public int id(int i, int j) {            return i * m + j;        }         void dfs(int root) {            visited[root] = true;            for (UndirectedEdge e : g[root]) {                if (visited[e.to]) {                    continue;                }                dfs(e.to);            }            if (seq.size() < k) {                seq.add(root);            }        }         public void solve(int testNumber, FastInput in, FastOutput out) {            n = in.ri();            m = in.ri();            k = in.ri();            char[][] mat = new char[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    mat[i][j] = in.rc();                }            }            g = Graph.createGraph(n * m);            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    if (mat[i][j] != '.') {                        continue;                    }                    if (i + 1 < n && mat[i + 1][j] == '.') {                        Graph.addUndirectedEdge(g, id(i, j), id(i + 1, j));                    }                    if (j + 1 < m && mat[i][j + 1] == '.') {                        Graph.addUndirectedEdge(g, id(i, j), id(i, j + 1));                    }                }            }            visited = new boolean[n * m];            seq = new IntegerArrayList(k);            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    if (mat[i][j] == '.' && !visited[id(i, j)]) {                        dfs(id(i, j));                    }                }            }            for (int x : seq.toArray()) {                mat[x / m][x % m] = 'X';            }            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    out.append(mat[i][j]);                }                out.println();            }        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println() {            return append('\n');        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public char rc() {            return readChar();        }         public char readChar() {            skipBlank();            char c = (char) next;            next = read();            return c;        }     }     static class SequenceUtils {        public static boolean equal(int[] a, int al, int ar, int[] b, int bl, int br) {            if ((ar - al) != (br - bl)) {                return false;            }            for (int i = al, j = bl; i <= ar; i++, j++) {                if (a[i] != b[j]) {                    return false;                }            }            return true;        }     }     static class UndirectedEdge extends DirectedEdge {        public UndirectedEdge rev;         public UndirectedEdge(int to) {            super(to);        }         public String toString() {            return String.format("%d<->%d", Math.min(rev.to, to), Math.max(rev.to, to));        }     }     static class Graph {        public static UndirectedEdge addUndirectedEdge(List<UndirectedEdge>[] g, int s, int t) {            UndirectedEdge toT = new UndirectedEdge(t);            UndirectedEdge toS = new UndirectedEdge(s);            toT.rev = toS;            toS.rev = toT;            g[s].add(toT);            g[t].add(toS);            return toT;        }         public static List[] createGraph(int n) {            return IntStream.range(0, n).mapToObj(i -> new ArrayList<>()).toArray(i -> new List[i]);        }     }     static class DirectedEdge {        public int to;         public DirectedEdge(int to) {            this.to = to;        }         public String toString() {            return "->" + to;        }     }     static class IntegerArrayList implements Cloneable {        private int size;        private int cap;        private int[] data;        private static final int[] EMPTY = new int[0];         public IntegerArrayList(int cap) {            this.cap = cap;            if (cap == 0) {                data = EMPTY;            } else {                data = new int[cap];            }        }         public IntegerArrayList(int[] data) {            this(0);            addAll(data);        }         public IntegerArrayList(IntegerArrayList list) {            this.size = list.size;            this.cap = list.cap;            this.data = Arrays.copyOf(list.data, size);        }         public IntegerArrayList() {            this(0);        }         public void ensureSpace(int req) {            if (req > cap) {                while (cap < req) {                    cap = Math.max(cap + 10, 2 * cap);                }                data = Arrays.copyOf(data, cap);            }        }         public void add(int x) {            ensureSpace(size + 1);            data[size++] = x;        }         public void addAll(int[] x) {            addAll(x, 0, x.length);        }         public void addAll(int[] x, int offset, int len) {            ensureSpace(size + len);            System.arraycopy(x, offset, data, size, len);            size += len;        }         public void addAll(IntegerArrayList list) {            addAll(list.data, 0, list.size);        }         public int size() {            return size;        }         public int[] toArray() {            return Arrays.copyOf(data, size);        }         public String toString() {            return Arrays.toString(toArray());        }         public boolean equals(Object obj) {            if (!(obj instanceof IntegerArrayList)) {                return false;            }            IntegerArrayList other = (IntegerArrayList) obj;            return SequenceUtils.equal(data, 0, size - 1, other.data, 0, other.size - 1);        }         public int hashCode() {            int h = 1;            for (int i = 0; i < size; i++) {                h = h * 31 + Integer.hashCode(data[i]);            }            return h;        }         public IntegerArrayList clone() {            IntegerArrayList ans = new IntegerArrayList();            ans.addAll(this);            return ans;        }     }} 
