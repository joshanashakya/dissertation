 import java.io.*;import java.math.BigInteger;import java.util.*;import java.util.Stack;  public class Main{	public static class FastReader {		BufferedReader br;		StringTokenizer root;		 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (root == null || !root.hasMoreTokens()) {				try {					root = new StringTokenizer(br.readLine());				} catch (Exception r) {					r.printStackTrace();				}			}			return root.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception r) {				r.printStackTrace();			}			return str;		}	}		public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));	static int mod = (int) (1e9+7);	static long cf = 998244353;    static final int MAX = (int) (1e5+1);	static int dfs=0,bridges=0;    public static List<Integer>[] edges;    public static int[][] parent;    public static int col = 20;    public static long[] Bit;    public static long[] fac,inv;    public  static int[] prime;     public static long[] dp,idx,low;    public static boolean found = false;    public static boolean[] vis;    public static TreeSet<Pair> st = new TreeSet<>();	public static FastReader sc = new FastReader();	public static void main(String[] args) {	//	Scanner sc = new Scanner(System.in); 		int n = sc.nextInt();		int min1 = sc.nextInt();		int max1 = sc.nextInt();		int min2 = sc.nextInt();		int max2 = sc.nextInt();		int min3 = sc.nextInt();		int max3 = sc.nextInt();					int a = n-min2-min3;		if(a>max1) a=max1;		n-=a;		int b = n-min3;		if(b>max2) b=max2;		n-=b;		out.print(a+" "+b+" "+n);		out.close();	} 			static class Pair implements Comparable<Pair>{		int x;		int y;		Pair(int x,int y){			this.x = x;			this.y = y;		}		@Override		public int compareTo(Pair o) {			// TODO Auto-generated method stub			return this.x-o.x;		}	}	}	   	 	     			  	  	   	  		
