import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) {		FastScanner scanner = new FastScanner();		int n = scanner.nextInt();		int[] nums = new int[n];				for(int i = 0; i < n; i++) {			nums[i] = scanner.nextInt();		}				ArrayList<Integer> odds = new ArrayList<Integer>();		ArrayList<Integer> evens = new ArrayList<Integer>();		for(int i = 0; i < nums.length; i++) {			int num = nums[i];			if(num%2 == 0) {				evens.add(num);			} else {				odds.add(num);			}		}		quickSort(evens);		quickSort(odds);				long output = (long)odds.get(odds.size()-1);		int ob = odds.size()-2;		int eb = evens.size()-1;		while(eb > -1 && evens.get(eb) > 0) {			output += evens.get(eb);			eb--;		}		while(ob > 0 && odds.get(ob)+odds.get(ob-1) > 0) {			output += odds.get(ob)+odds.get(ob-1);			ob -= 2;		}		System.out.println(output);			}		private static void quickSort(ArrayList<Integer> list) {		quickSortRec(list, 0, list.size()-1);	}	private static void quickSortRec(ArrayList<Integer> list, int start, int end){		  if(end <= start) return;		  int splitIndex = partition(list, start, end);		  quickSortRec(list, start, splitIndex);		  quickSortRec(list, splitIndex+1, end);	  }	private static int partition(ArrayList<Integer> list, int start, int end){		  int p = start+(int)((end-start)*Math.random());		  Integer pivot = list.get(p);		  while(true) {			  while(list.get(start) < pivot) start++;			  while(list.get(end) > pivot) end--;			  if(end <= start) break;			  Integer temp = list.get(start);			  list.set(start, list.get(end));			  list.set(end, temp);			  start++;			  end--;		  }	    return end;	  }	static class FastScanner {		BufferedReader br;		StringTokenizer st;		public FastScanner() {			br = new BufferedReader(new InputStreamReader(System.in));		}		String nextLine() {			String returnString = "";			try {				returnString = br.readLine();			} catch(IOException e) {				e.printStackTrace();			}			return returnString;		}		String next() {			while(st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch(IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		}		int nextInt() {			return Integer.parseInt(next());		}	}}  	  	 		 	  	 	 		 	 		 	  	 		
