import java.util.*;import java.io.*; public class CodeForces_644B_B_Processing_Queries {    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        String[] line = reader.readLine().split(" ");        final int n = Integer.parseInt(line[0]);        final int b = Integer.parseInt(line[1]);         final int[][] queries = new int[n][2];        for (int i = 0; i < n; i++) {            final int[] query = queries[i];            line = reader.readLine().split(" ");            query[0] = Integer.parseInt(line[0]);            query[1] = Integer.parseInt(line[1]);        }         int queryIdx = 0;        long serverTime = -1;        int serverIdx = -1;         Deque<Long> queueTime = new ArrayDeque<Long>();        Deque<Integer> queueIdx = new ArrayDeque<Integer>();         long[] result = new long[200000+1];        Arrays.fill(result, -1);         long lastIdx = 1000000000L*(n+1)+1;        for (long time = 0; time < lastIdx; time++) {            if (serverTime != -1) {                if (serverTime == time) {                    result[serverIdx] = time;                    serverTime = -1;                    //System.out.println("server pop: "+serverIdx+", "+time);                }            }             if (serverTime == -1 && queueTime.size() != 0) {                serverTime = time+queueTime.pollFirst();                serverIdx = queueIdx.pollFirst();                //System.out.println("server push from queue: "+serverIdx+", "+serverTime);            }             if (queryIdx != n) {                final int[] query = queries[queryIdx];                final long queryTime = query[0];                final long queryDelay = query[1];                 if (queryTime == time) {                    if (serverTime == -1) {                        serverTime = queryTime + queryDelay;                        serverIdx = queryIdx;                        //System.out.println("server push from query: "+serverIdx+", "+serverTime);                    } else if (queueTime.size() < b) {                        queueTime.addLast(queryDelay);                        queueIdx.addLast(queryIdx);                        //System.out.println("queue push from query: "+queryIdx);                    } else {                        result[queryIdx] = -1;                        //System.out.println("queue rejected: "+queryIdx);                    }                    queryIdx++;                }            }             if (serverTime == -1 && queueTime.size() == 0 && queryIdx == n) {                break;            }            else {                long nextTime = 0;                if (serverTime != -1) {                    nextTime = serverTime;                }                if (queryIdx < n) {                    if (serverTime == -1)                        nextTime = queries[queryIdx][0];                    else                        nextTime = Math.min(nextTime, queries[queryIdx][0]);                }                 if (nextTime > 0) {                    time = nextTime-1;                }            }        }         System.out.print(result[0]);        for (int i = 1; i < n; i++) {            System.out.print(" "+result[i]);        }        System.out.println("");    }}
