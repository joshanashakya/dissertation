import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.Map;import java.util.Random;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer; public class experiments{	static int M = 1000000007;	static int INF = Integer.MAX_VALUE;	static int n,m;		static boolean isValid(int i , int j) {		if(0<=i&&i<n && 0<=j&&j<n) return true;		return false;	}	static final FastScanner fs = new FastScanner();	public static void main(String args[]) throws IOException	{				int x = fs.nextInt();		int y = fs.nextInt();		int n = fs.nextInt()-1; 		int[] fn = {x,y,y-x,-x,-y,x-y};		System.out.println(mod(fn[n%6],M));			     	}			static int mod(int a, int b){		return ((a%b)+b)%b;	}	static long fact (int n) { 		long fact =1;		for(int i=1; i<=n; i++) {			fact = (fact*i)%M;		}		return fact%M;	}		static final Random random = new Random();		static void ruffleSort(int arr[])	{		int n = arr.length;		for(int i=0; i<n; i++)		{			int j = random.nextInt(n),temp = arr[j];			arr[j] = arr[i];			arr[i] = temp;		}		Arrays.sort(arr);	}	 	public static class Pairs implements Comparable<Pairs>	{		int value,index;		Pairs(int value, int index)		{			this.value = value;			this.index = index;		}		public int compareTo(Pairs p)		{			return Integer.compare(this.value, p.value);		}	}}class FastScanner{	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	StringTokenizer str = new StringTokenizer("");		String next() throws IOException	{		while(!str.hasMoreTokens())			str = new StringTokenizer(br.readLine());				return str.nextToken();	}		char nextChar() throws IOException {		return next().charAt(0);	} 	int nextInt() throws IOException	{		return Integer.parseInt(next());	}		float nextfloat() throws IOException	{		return Float.parseFloat(next());	}		double nextDouble() throws IOException	{		return Double.parseDouble(next());	}	long nextLong() throws IOException	{		return Long.parseLong(next());	}	byte nextByte() throws IOException 	{		return Byte.parseByte(next());	}	int [] arrayIn(int n) throws IOException	{		int  arr[] = new int[n];		for(int i=0; i<n; i++)		{			arr[i] = nextInt();		}		return arr;	}}   	
