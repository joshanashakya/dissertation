//package test; import java.io.*;import java.util.*;/*    zatona      Ahmed Maher  */ public class mytest {     public static int mod = 1000000007;    public static InputReader in;    public static PrintWriter out;        public static void main(String[] args) throws FileNotFoundException {         in = new InputReader(System.in); // fast         out = new PrintWriter(System.out);                int n , a , b ;        n = in.nextInt();                int arr[] = new int[n];                for( int i = 0 ; i < n ; i++ ) {        	        	arr[i] = in.nextInt();        	        }                int mn = arr[0] ,mx=arr[0] , cnt=2 , st= 0 ;            	        for( int i = 1 ; i < n ; i++ ) {        	        	mn = min( mn , arr[i]);        	mx = max( mx , arr[i]);        	        	if( i == n-1 && mx - mn <= 1) {        		        		cnt = max (cnt, i - st+1  );        		        	}        	        	if(mx - mn > 1 ) {        		        		cnt = max (cnt, i - st  );        		        		int k = i ;        		while(abs(arr[k-1] ,arr[i]) ==1 && k>=0) {        			k--;        		}        	 	mx = max(arr[k] ,arr[i]);        	 	mn = min(arr[k] ,arr[i]);        	        	 	        	 	st = k ;        	}        	              }            out.print( cnt );                out.close();            }        public static int gcd(int x,int y){    if(x%y==0)            return y;    else             return gcd(y,x%y);    }        public static int abs(int a,int b){    return (int)Math.abs(a-b);    }     public static int max(int a,int b){    if(a>b)            return a;    else            return b;    }     public static int min(int a,int b){    if(a>b)            return b;    else             return a;    }     public static long max(long a,long b){    if(a>b)            return a;    else            return b;    }     public static long min(long a,long b){    if(a>b)            return b;    else             return a;    }      public static long pow(long n,long p){    long  result = 1;      if(p==0)        return 1;    if (p==1)        return n;    while(p!=0)    {        if(p%2==1)            result *= n;	            p >>=1;        n*=n;	        }    return result;    }     static class InputReader {             private final InputStream stream;            private final byte[] buf = new byte[8192];            private int curChar, snumChars;            private SpaceCharFilter filter;             public InputReader(InputStream stream) {                    this.stream = stream;            }             public int snext() {                    if (snumChars == -1)                            throw new InputMismatchException();                    if (curChar >= snumChars) {                            curChar = 0;                            try {                                    snumChars = stream.read(buf);                            } catch (IOException e) {                                    throw new InputMismatchException();                            }                            if (snumChars <= 0)                                    return -1;                    }                    return buf[curChar++];            }             public int nextInt() {                    int c = snext();                    while (isSpaceChar(c)) {                            c = snext();                    }                    int sgn = 1;                    if (c == '-') {                            sgn = -1;                            c = snext();                    }                    int res = 0;                    do {                            if (c < '0' || c > '9')                                    throw new InputMismatchException();                            res *= 10;                            res += c - '0';                            c = snext();                    } while (!isSpaceChar(c));                    return res * sgn;            }             public long nextLong() {                    int c = snext();                    while (isSpaceChar(c)) {                            c = snext();                    }                    int sgn = 1;                    if (c == '-') {                            sgn = -1;                            c = snext();                    }                    long res = 0;                    do {                            if (c < '0' || c > '9')                                    throw new InputMismatchException();                            res *= 10;                            res += c - '0';                            c = snext();                    } while (!isSpaceChar(c));                    return res * sgn;            }             public int[] nextIntArray(int n) {                    int a[] = new int[n];                    for (int i = 0; i < n; i++) {                            a[i] = nextInt();                    }                    return a;            }             public long[] nextLongArray(int n) {                    long a[] = new long[n];                    for (int i = 0; i < n; i++) {                            a[i] = nextInt();                    }                    return a;            }             public String readString() {                    int c = snext();                    while (isSpaceChar(c)) {                            c = snext();                    }                    StringBuilder res = new StringBuilder();                    do {                            res.appendCodePoint(c);                            c = snext();                    } while (!isSpaceChar(c));                    return res.toString();            }             public String nextLine() {                    int c = snext();                    while (isSpaceChar(c))                            c = snext();                    StringBuilder res = new StringBuilder();                    do {                            res.appendCodePoint(c);                            c = snext();                    } while (!isEndOfLine(c));                    return res.toString();            }             public boolean isSpaceChar(int c) {                    if (filter != null)                            return filter.isSpaceChar(c);                    return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;            }             private boolean isEndOfLine(int c) {                    return c == '\n' || c == '\r' || c == -1;            }             public interface SpaceCharFilter {                    public boolean isSpaceChar(int ch);            }    }}      
