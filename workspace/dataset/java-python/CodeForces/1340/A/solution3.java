	import java.math.BigInteger;		import java.sql.Array;		import java.util.ArrayList;			import java.util.Arrays;			import java.util.Collection;			import java.util.Collections;			import java.util.Comparator;			import java.util.HashMap;			import java.util.InputMismatchException;			import java.util.Iterator;			import java.util.LinkedHashSet;			import java.util.LinkedList;			import java.util.List;			import java.util.Map;			import java.util.Map.Entry;				import java.util.PriorityQueue;			import java.util.Queue;			import java.util.Scanner;			import java.util.Set;			import java.util.Stack;			import java.io.BufferedReader;			import java.io.IOException;			import java.io.InputStream;			import java.io.InputStreamReader;			import java.util.Scanner;			import java.util.StringTokenizer;			import java.util.TreeMap;			import java.util.TreeSet;						public class Main {								static InputReader rd=new InputReader(System.in);				public static void main(String[] args) {					Scanner sc=new Scanner(System.in);										int t=sc.nextInt();									outer:	while(t-->0) {					int n=sc.nextInt();										ArrayList<Helper> A=new ArrayList<>();										for(int i=0;i<n;i++) {												A.add(new Helper(sc.nextInt(),i));											}															Collections.sort(A,new Comparator<Helper>() {										@Override					public int compare(Helper o1, Helper o2) {						// TODO Auto-generated method stub						return o1.val-o2.val;					}										});										boolean occ[]=new boolean[n+1];					for(int i=0;i<n-1;i++) {											//	System.out.println(A.get(i).val+" "+A.get(i).index);						if(A.get(i).index!=n-1&&!occ[A.get(i).index+1]&&A.get(i).index!=n-A.get(i).val&&A.get(i+1).index!=(A.get(i).index+1)) {							System.out.println("No");							continue outer;						}																		occ[A.get(i).index]=true;					}										System.out.println("Yes");																		}								}								static class Helper{					int val;int index;					public Helper(int  val,int index) {												this.val=val;						this.index=index;						// TODO Auto-generated constructor stub					}				}																													  static class InputReader {				        private InputStream stream;				        private byte[] buf = new byte[1024];				        private int curChar;				        private int numChars;				        private SpaceCharFilter filter;							        public InputReader(InputStream stream) {				            this.stream = stream;				        }							        public int read() {				            if (numChars == -1)				                throw new InputMismatchException();				            if (curChar >= numChars) {				                curChar = 0;				                try {				                    numChars = stream.read(buf);				                } catch (IOException e) {				                    throw new InputMismatchException();				                }				                if (numChars <= 0)				                    return -1;				            }				            return buf[curChar++];				        }							        public int readInt() {				            int c = read();				            while (isSpaceChar(c))				                c = read();				            int sgn = 1;				            if (c == '-') {			    sgn = -1;			    c = read();			}			int res = 0;			do {			    if (c < '0' || c > '9')			        throw new InputMismatchException();			    res *= 10;			    res += c - '0';			        c = read();			    } while (!isSpaceChar(c));			    return res * sgn;			}						public String readString() {			    int c = read();			    while (isSpaceChar(c))			        c = read();			    StringBuilder res = new StringBuilder();			    do {			        res.appendCodePoint(c);			        c = read();			    } while (!isSpaceChar(c));			    return res.toString();			}						public boolean isSpaceChar(int c) {			    if (filter != null)			        return filter.isSpaceChar(c);			    return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;				        }							        public String next() {				            return readString();				        }							    }								  public interface SpaceCharFilter {				        public boolean isSpaceChar(int ch);				    }																																																													}			    
