import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BNastyaAndScoreboard solver = new BNastyaAndScoreboard();            solver.solve(1, in, out);            out.close();        }    }     static class BNastyaAndScoreboard {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int k = in.readInt();            int[] bits = new int[10];            bits[0] = parse(123567);            bits[1] = parse(36);            bits[2] = parse(13457);            bits[3] = parse(13467);            bits[4] = parse(2346);            bits[5] = parse(12467);            bits[6] = parse(124567);            bits[7] = parse(136);            bits[8] = parse(1234567);            bits[9] = parse(123467); //        for (int i = 0; i < 10; i++) {//            debug.debug("i", i);//            debug.debug("bits[i]", Integer.toString(bits[i], 2));//        }             int[] now = new int[n];            for (int i = 0; i < n; i++) {                for (int j = 0; j < 7; j++) {                    if (in.readChar() == '1') {                        now[i] |= 1 << j;                    }                }//            debug.debug("i", i);//            debug.debug("now[i]", Integer.toString(now[i], 2));            }             SequenceUtils.reverse(now, 0, n - 1);            int[][] dp = new int[n + 1][k + 1];            SequenceUtils.deepFill(dp, -1);            dp[0][0] = 0;             for (int i = 1; i <= n; i++) {                int v = now[i - 1];                for (int j = 0; j < 10; j++) {                    if ((bits[j] | v) != bits[j]) {                        continue;                    }                    int change = Integer.bitCount(bits[j] - v);                    for (int t = change; t <= k; t++) {                        if (dp[i - 1][t - change] >= 0) {                            dp[i][t] = j;                        }                    }                }            }              //  debug.debug("dp", dp);             if (dp[n][k] == -1) {                out.println(-1);                return;            }              int j = k;            for (int i = n; i >= 1; i--) {                int v = now[i - 1];                out.append(dp[i][j]);                j -= Integer.bitCount(bits[dp[i][j]] - v);            }         }         public int parse(int val) {            if (val == 0) {                return 0;            }            return parse(val / 10) | (1 << (val % 10 - 1));        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private StringBuilder cache = new StringBuilder(10 << 20);        private final Writer os;         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            return this;        }         public FastOutput append(int c) {            cache.append(c);            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            cache.append(System.lineSeparator());            return this;        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 20];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public char readChar() {            skipBlank();            char c = (char) next;            next = read();            return c;        }     }     static class SequenceUtils {        public static void swap(int[] data, int i, int j) {            int tmp = data[i];            data[i] = data[j];            data[j] = tmp;        }         public static void deepFill(Object array, int val) {            if (!array.getClass().isArray()) {                throw new IllegalArgumentException();            }            if (array instanceof int[]) {                int[] intArray = (int[]) array;                Arrays.fill(intArray, val);            } else {                Object[] objArray = (Object[]) array;                for (Object obj : objArray) {                    deepFill(obj, val);                }            }        }         public static void reverse(int[] data, int l, int r) {            while (l < r) {                swap(data, l, r);                l++;                r--;            }        }     }}
