from collections import dequeimport sys  def input():    return sys.stdin.readline().rstrip()  class UnionFind():    def __init__(self, n):        self.n = n        self.parents = [-1] * (n)     def find(self, x):        if self.parents[x] < 0:            return x        else:            self.parents[x] = self.find(self.parents[x])            return self.parents[x]     def union(self, x, y):        x = self.find(x)        y = self.find(y)        if x == y:            return        if self.parents[x] > self.parents[y]:            x, y = y, x        self.parents[x] += self.parents[y]        self.parents[y] = x     def size(self, x):        return -self.parents[self.find(x)]     def same(self, x, y):        return self.find(x) == self.find(y)     def members(self, x):        root = self.find(x)        return [i for i in range(self.n + 1) if self.find(i) == root]     def roots(self):        return [i for i, x in enumerate(self.parents) if x < 0]     def group_count(self):        return len(self.roots())     def all_group_members(self):        return {r: self.members(r) for r in self.roots()}  def slv():    n = int(input())    def f(x): return ord(x) - ord("a") + 1    strA = input()    strB = input()    A = [int(ord(c) - ord('a') + 1) for c in strA]    B = [int(ord(c) - ord('a') + 1) for c in strB]     if any(A[i] > B[i] for i in range(n)):        print(-1)        return    ans = 0    dsu = UnionFind(21)    for (u, v) in zip(A, B):        if u < v:            dsu.union(u, v)    for root in dsu.roots():        ans += dsu.size(root) - 1    print(ans)    return  def main():    t = int(input())    for _ in range(t):        slv()    return  if __name__ == "__main__":    main()
