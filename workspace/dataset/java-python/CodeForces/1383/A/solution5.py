import math,sys#from itertools import permutations, combinations;import heapq,random;from collections import defaultdict,dequeimport bisect as bidef yes():print('YES')def no():print('NO')#sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');def I():return (int(sys.stdin.readline()))def In():return(map(int,sys.stdin.readline().split()))def Sn():return sys.stdin.readline().strip()#sys.setrecursionlimit(1500)def dict(a):    d={}     for x in a:        if d.get(x,-1)!=-1:            d[x]+=1        else:            d[x]=1    return ddef find_gt(a, x):    'Find leftmost value greater than x'    i = bi.bisect_left(a, x)    if i != len(a):        return i    else:                    return -1class DSU:    def __init__(self,n):        self.parent=[i for i in range(n+1)]        #self.rank=[0 for i in range(n+1)]      def find_set(self,v):        if v==self.parent[v]:            return v        self.parent[v]=self.find_set(self.parent[v])        return self.parent[v]     def union(self,a,b):        a=self.find_set(a)        b=self.find_set(b)        if a!=b:            self.parent[a]=b            return True        return False def main():    try:        n=I()        a=Sn()        b=Sn()        dsu=DSU(26)        flag=0        ans=0        for x in range(n):            if a[x]>b[x]:                flag=1                break            elif a[x]<b[x]:                if dsu.union(ord(a[x])-96,ord(b[x])-96):                    ans+=1        if flag:            print(-1)        else:            print(ans)      except:        pass        M = 998244353P = 1000000007 if __name__ == '__main__':    for _ in range(I()):main()    #for _ in range(1):main()#End#  #        ******************* All The Best *******************   #
