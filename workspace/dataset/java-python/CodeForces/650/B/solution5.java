import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));        String s1[] = in.readLine().split(" ");        int n = Integer.parseInt(s1[0]);        long a = Long.parseLong(s1[1]);        long b = Long.parseLong(s1[2]);        long t = Long.parseLong(s1[3]);        char[] S = in.readLine().toCharArray();        long[] time = new long[n];        for (int i=n - 1;i>=0;i--)        {            if (S[i] == 'w')            {                time[i] += b + 1;            }            else                time[i] += 1;            if (i != n - 1)                time[i] += time[i + 1];        }        long[] ti = new long[n];        for (int i=0;i<n;i++)        {            if (S[i] == 'w')                ti[i] += b + 1;            else                ti[i] ++;            if (i > 0)                ti[i] += ti[i - 1];        }        int l = 0;        int r = n;        int ans = 0;        while (l <= r)        {            int mid = (l + r) / 2;            if (check(a, b, t, mid, S, ti, time))            {                ans = mid;                l = mid + 1;            }            else                r = mid - 1;        }        System.out.println(ans);    }    public static boolean check(long a, long b, long t, int mid, char[] S, long[] ti, long[] time)    {        int n = S.length;        for (int i=1;i<=mid;i++)        {            int right = mid - i;            long sum = 0L;            if (right > 0)            {                sum += time[n - right];            }            sum += ti[i - 1];            if (right == 0)                sum += (i - 1) * a;            else            {                long sum1 = sum;                long sum2 = sum;                sum1 += 2 * (i - 1) * a + right * a;                sum2 += 2 * right * a + (i - 1) * a;                sum = Math.min(sum1, sum2);            }            if (sum <= t)                return true;        }        return false;    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
