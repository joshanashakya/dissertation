import java.util.HashMap;import java.util.Scanner;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.BufferedOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.io.OutputStream;public class Main {	public static void main(String[]args) {		Kattio kb=new Kattio(System.in);		int numLines=kb.getInt();		long count=0;		HashMap<String, Integer>map=new HashMap<String, Integer>();		HashMap<Integer, Integer>xPos=new HashMap<Integer, Integer>();		HashMap<Integer, Integer>yPos=new HashMap<Integer, Integer>();		for(int i=0; i<numLines; i++) {			int x=kb.getInt();			int y=kb.getInt();			if(!xPos.containsKey(x)) {				xPos.put(x, 1);			}			else {				int m=xPos.get(x);				xPos.put(x, m+1);				count=count+m;			}			if(!yPos.containsKey(y)) {				yPos.put(y, 1);			}			else {				int m=yPos.get(y);				yPos.put(y, m+1);				count=count+m;			}			String l=x+""+y;			if(map.containsKey(l)) {				int k=map.get(l);				count=count-k;				map.put(l, k+1);			}			else				map.put(l, 1);		}		System.out.println(count);}} /** Simple yet moderately fast I/O routines.** Example usage:** Kattio io = new Kattio(System.in, System.out);** while (io.hasMoreTokens()) {*    int n = io.getInt();*    double d = io.getDouble();*    double ans = d*n;**    io.println("Answer: " + ans);* }** io.close();*** Some notes:** - When done, you should always do io.close() or io.flush() on the*   Kattio-instance, otherwise, you may lose output.** - The getInt(), getDouble(), and getLong() methods will throw an*   exception if there is no more data in the input, so it is generally*   a good idea to use hasMoreTokens() to check for end-of-file.** @author: Kattis*/   class Kattio extends PrintWriter {   public Kattio(InputStream i) {	super(new BufferedOutputStream(System.out));	r = new BufferedReader(new InputStreamReader(i));   }   public Kattio(InputStream i, OutputStream o) {	super(new BufferedOutputStream(o));	r = new BufferedReader(new InputStreamReader(i));   }    public boolean hasMoreTokens() {	return peekToken() != null;   }    public int getInt() {	return Integer.parseInt(nextToken());   }    public double getDouble() { 	return Double.parseDouble(nextToken());   }    public long getLong() {	return Long.parseLong(nextToken());   }    public String getWord() {	return nextToken();   }      private BufferedReader r;   private String line;   private StringTokenizer st;   private String token;    private String peekToken() {	if (token == null) 	    try {		while (st == null || !st.hasMoreTokens()) {		    line = r.readLine();		    if (line == null) return null;		    st = new StringTokenizer(line);		}		token = st.nextToken();	    } catch (IOException e) { }	return token;   }    private String nextToken() {	String ans = peekToken();	token = null;	return ans;   }}	 		 				  	 	 		      	 		 	 	
