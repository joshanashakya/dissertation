import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        b452 solver = new b452();        solver.solve(1, in, out);        out.close();    }     static class b452 {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int m = in.nextInt();            if (m == 0) {                out.println("1 0");                out.println(n + " 0");                out.println("0 0");                out.println((n - 1) + " 0");            } else if (n == 0) {                out.println("0 1");                out.println("0 " + m);                out.println("0 0");                out.println("0 " + (m - 1));            } else {                double l1 = Math.sqrt(Math.pow(m - 1, 2) + Math.pow(n, 2));                double l2 = Math.sqrt(Math.pow(m, 2) + Math.pow(n - 1, 2));                double lm = Math.sqrt(Math.pow(m, 2) + Math.pow(n, 2));                 if (2 * lm + m >= 2 * Math.max(l1, l2) + lm && m >= n) {                    out.println(n + " 0");                    out.println("0 " + m);                    out.println("0 0");                    out.println(n + " " + m);                    return;                }                if (2 * lm + n >= 2 * Math.max(l1, l2) + lm && n >= m) {                    out.println("0 " + m);                    out.println(n + " 0");                    out.println("0 0");                    out.println(n + " " + m);                    return;                }                 if (l1 > l2) {                    out.println("0 1");                } else {                    out.println("1 0");                }                out.println(n + " " + m);                out.println("0 0");                if (l1 > l2) {                    out.println(n + " " + (m - 1));                } else {                    out.println((n - 1) + " " + m);                }            }        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
