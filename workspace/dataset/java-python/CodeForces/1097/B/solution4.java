import java.util.*;import java.io.*;import java.math.*; public class First{       static HashMap<String, Boolean> map;    public static String generateKey(int sum, int i)    {         StringBuilder sb = new StringBuilder("");         sb.append(Integer.toString(sum)).append("_").append(Integer.toString(i));         return sb.toString();    }    public static boolean func(int sum, int n, int a[], int i)    {         String key1 = generateKey(sum,i);         String key2 = generateKey(sum*(-1),i);                  if(map.containsKey(key1))         {              return map.get(key1);         }         if(map.containsKey(key2))         {               return map.get(key2);         }            if( (sum%360 == 0) && (i==n))         {              String k1 = generateKey(sum,i);              String k2 = generateKey(sum*(-1),i);              map.put(k1,true);              map.put(k2,true);              return true;         }         if(i==n)         {             String k1 = generateKey(sum,i);             String k2 = generateKey(sum*(-1),i);             map.put(k1,false);             map.put(k2,false);             return false;         }                   boolean res = func(sum+a[i],n,a,i+1) || func(sum-a[i],n,a,i+1);         map.put(key1,res);         map.put(key2,res);         return res;    }     public static void process()throws IOException    {         int n = ni();         int a[] = new int[n];         int sum=0;         map = new HashMap<String, Boolean>();         for(int i=0;i<n;i++)         {              a[i] = ni();              sum+=a[i];         }         if(func(0,n,a,0))         {              pn("YES");         }         else         {              pn("NO");         }            }     	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);     //     long s = System.currentTimeMillis();        int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}	
