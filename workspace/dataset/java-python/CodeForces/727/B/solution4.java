import java.io.*;import java.text.DecimalFormat;import java.util.*;import java.io.IOException;import java.io.InputStream;import java.util.stream.Collector;import java.util.stream.Collectors; public class Main {    public static void main(String[] args) {         File file = new File("in.txt");        InputStream inputStream = null;//        try {inputStream= new FileInputStream(file);} catch (FileNotFoundException ex){return;};        inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }}     class TaskB {      public void solve(int testNumber, InputReader in, PrintWriter out) {        String str = in.next();        List<String> numbers = new ArrayList<>();        Boolean parsingNumber = Boolean.FALSE;        Integer start = -1;          for(int i=0; i<str.length(); i++){            char ch = str.charAt(i);            if(Character.isLetter(ch)){                if(parsingNumber){                    numbers.add(str.substring(start,i));                    parsingNumber = Boolean.FALSE;                    start = -1;                }            }            else if(Character.isDigit(ch) || ch == '.'){                if(!parsingNumber){                    parsingNumber = Boolean.TRUE;                    start = i;                }            }        }        if(parsingNumber){            numbers.add(str.substring(start));        }         Double result = new Double(0);          for(String s : numbers){            result+=getStringValue(s);        }          DecimalFormat df = new DecimalFormat("###,###,###,###,###,##0.##");        String s = df.format(result);        s = s.replace(',','.');        if(s.contains(".") && s.charAt(s.length()-2)=='.'){            out.println(s+"0");        }        else{            out.println(s);        }       }     public Double getStringValue(String str){         Integer lastDot = str.lastIndexOf('.');          String decimalPart = "00";        if(str.length()- lastDot == 3){            decimalPart = str.substring(str.length()-2);            str = str.substring(0, str.length()-3);        }        StringBuilder digitsOnly = new StringBuilder();        for(int i=0; i<str.length(); i++){            if(Character.isDigit(str.charAt(i))){                digitsOnly.append(str.charAt(i));            }         }         return Double.parseDouble(digitsOnly.toString() + "." + decimalPart);    }  }    class InputReader {    public BufferedReader reader;    public StringTokenizer tokenizer;     public InputReader(InputStream stream) {        reader = new BufferedReader(new InputStreamReader(stream), 32768);        tokenizer = null;    }     public String next() {        while (tokenizer == null || !tokenizer.hasMoreTokens()) {            try {                tokenizer = new StringTokenizer(reader.readLine());            } catch (IOException e) {                throw new RuntimeException(e);            }        }        return tokenizer.nextToken();    }     public String nextLine(){        try {            return reader.readLine();        } catch (IOException e){            throw new RuntimeException(e);        }    }     public int nextInt() {        return Integer.parseInt(next());    }    public long nextLong() { return Long.parseLong(next()); } }   class Pair<F, S> {    public final F first;    public final S second;        public Pair(F first, S second) {        this.first = first;        this.second = second;    }     @Override    public boolean equals(Object o) {        if (!(o instanceof Pair)) {            return false;        }        Pair<?, ?> p = (Pair<?, ?>) o;        return Objects.equals(p.first, first) && Objects.equals(p.second, second);    }     @Override    public int hashCode() {        return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());    }     @Override    public String toString() {        return "(" + first + ", " + second + ')';    }}
