import java.io.*;import java.util.ArrayList;import java.util.List; public class MAIN{     private static final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     public static void main(String[] args) throws Exception{         String[] s = reader.readLine().split(" ");        int n = Integer.parseInt(s[0]);        int x0 = Integer.parseInt(s[1]);         int L = Integer.MIN_VALUE;        int R = Integer.MAX_VALUE;        for(int i=0;i<n;++i){            s = reader.readLine().split(" ");            int l = Integer.parseInt(s[0]);            int r = Integer.parseInt(s[1]);            if(l > r){                int tmp = l;                l=r;                r = tmp;            }            if(l > L) L = l;            if(r < R) R = r;        }        if(L > R){            System.out.println(-1);        } else {            if(x0 < L) {                System.out.println(L-x0);            } else if(x0 > R){                System.out.println(x0-R);            } else if(x0 >= L && x0<=R){                System.out.println(0);            }        }      }     private static class Pair{        int first;        int second;        public Pair(int first, int second) {            this.first = first;            this.second = second;        }    }     private static List<List<Integer>> getCombinations(int[] a, int count){        List<List<Integer>> ret = new ArrayList<>(0);        if(a == null || a.length > 64 || count <= 0 || count > a.length){            return null;        } else {            long lim = (1L<<a.length);            for(long i=0;i<lim;++i){                List<Integer> poss = getBitPositionList(i);                if(poss.size() == count){                    List<Integer> list = new ArrayList<>(0);                    for(int j=0;j< poss.size();++j){                        list.add(a[poss.get(j)]);                    }                    ret.add(list);                }            }        }        return ret;     }     private static int getBitCount(long n){        int onCount = 0;        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                ++onCount;            }        }        return onCount;    }    private static List<Integer> getBitPositionList(long n){        List<Integer> idxs = new ArrayList<>(0);        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                idxs.add(((int) i));            }        }        return idxs;    }    private static Pair getIrreducibleFraction(int x, int y){        int min = (x <= y) ? x : y;        for(int i=2; i<=min; ++i){            while (x%i==0 && y%i==0){                x = x/i;                y = y/i;            }        }        return new Pair(x,y);    }     private static int getDigitSumInBase(int n, int b){        int sum = 0;        while (true){            sum += n%b;            n = n/b;            if(n==0){                break;            }        }        return sum;    }   }
