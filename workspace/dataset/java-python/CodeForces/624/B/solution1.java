import java.util.*;import java.util.stream.Collectors;import java.lang.*;import java.io.*; public class Problem {		public static void main (String[] args) throws java.lang.Exception	{	    Scanner sc = new Scanner(System.in);	    int n = sc.nextInt();	    Map<Integer,Integer> map = new TreeMap<Integer,Integer>();	    for(int i=0;i<n;i++) {	    	int key = sc.nextInt();	    	if(map.containsKey(key))	    		map.replace(key, map.get(key)+1);	    	else	    		map.put(key,1);	    }	    Map<Integer, Integer> sorted= map.entrySet().stream()                .sorted(Map.Entry.comparingByValue())                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,                 (oldValue, newValue) -> oldValue, TreeMap::new));	    	    List<Integer> keys = new ArrayList<Integer>(sorted.keySet());	   // System.out.println(map.toString());	    int i = keys.size()-1;	    long sum=0;	    while(i>=0)	    {	    	int key = keys.get(i);	    	int count = sorted.get(key)-1; 	    	sum+=key;	    		    	if(count>0)	    	{	    		key-=1;	    		if(i-1>=0)	    		{	    			int key1 = keys.get(i-1);	    			int avail = key-key1;	    			if(avail < count)	    			{	    				//System.out.println(key+" extra "+count+" avail "+avail);	    				sum += (avail*key - avail*(Math.max(0,avail-1))/2);		    			count -= avail;	    			}	    			else	    			{	    				//System.out.println(key+" extra "+count+" avail more "+avail);	    				sum += ((long)key*count - count*(count-1)/2);	    				count=0;	    			}	    			sorted.replace(key1, sorted.get(key1)+count);	    		}	    		else	    		{	    			int avail = key;	    			if(avail < count)	    			{	    				sum += (avail*key - avail*(Math.max(0,avail-1))/2);		    			count -= avail;	    			}	    			else	    			{	    				sum += ((long)key*count - count*(count-1)/2);	    				count=0;	    			}	    		}	    	}	    	//System.out.println(map.toString());	    	i--;	    }	    	   // System.out.println(sorted.toString());	    	   	    System.out.println((long)sum);		}		Â }
