/*If you want to aim high, aim highDon't let that studying and grades consume youJust live life young******************************What do you think? What do you think?1st on Billboard, what do you think of itNext is a Grammy, what do you think of itHowever you think, I’m sorry, but shit, I have no fcking interest*******************************I'm standing on top of my Monopoly boardThat means I'm on top of my game and it don't stoptil my hip don't hop anymorehttps://www.a2oj.com/Ladder16.html*******************************Shining through the city with a little funk and soul*******************************300iq as writer = Sad!*/import java.util.*;import java.io.*;import java.math.*;    public class x22B   {      public static void main(String hi[]) throws Exception      {         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));         StringTokenizer st = new StringTokenizer(infile.readLine());         int N = Integer.parseInt(st.nextToken());         int M = Integer.parseInt(st.nextToken());         char[][] grid = new char[N][M];         for(int r=0; r < N; r++)            grid[r] = infile.readLine().toCharArray();         //kinda overkill         int[][] sums = new int[N][M];         sums[0][0] = grid[0][0]-'0';         for(int r=1; r < N; r++)            sums[r][0] = sums[r-1][0]+(grid[r][0]-'0');         for(int c=1; c < M; c++)            sums[0][c] = sums[0][c-1]+(grid[0][c]-'0');         for(int r=1; r < N; r++)            for(int c=1; c < M; c++)               sums[r][c] = sums[r-1][c]+sums[r][c-1]-sums[r-1][c-1]+(grid[r][c]-'0');         int res = 0;         for(int a=0; a < N; a++)            for(int b=0; b < M; b++)               for(int c=a; c < N; c++)                  for(int d=b; d < M; d++)                     if(query(a,b,c,d,sums) == 0)                     {                        int perimeter = 2*(c-a+d-b+2);                        res = Math.max(res, perimeter);                     }         System.out.println(res);      }      public static int query(int r1, int c1, int r2, int c2, int[][] sums)      {         int res = sums[r2][c2];         if(r1 > 0)            res -= sums[r1-1][c2];         if(c1 > 0)            res -= sums[r2][c1-1];         if(Math.min(r1, c1) > 0)            res += sums[r1-1][c1-1];         return res;      }   }
