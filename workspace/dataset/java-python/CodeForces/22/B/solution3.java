import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer; public class CF0022B_BargainingTable {	static class Scanner {		BufferedReader br;		StringTokenizer st; 		public Scanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		} 	} 	static void print(Object b) {		System.out.print(b);	} 	static void println(Object b) {		System.out.println(b);	} 	static void println() {		System.out.println();	} 	static class Node {		int id;		ArrayList<Integer> connections;		int visited; 		public Node(int i) {			id = i;			connections = new ArrayList<Integer>();			visited = -1;		}	} 	static int n;	static int m;	static boolean[][] arr; 	static boolean check(int firstX, int firstY, int lastX, int lastY) {		for (int i = firstX; i <= lastX; i++) {			for (int j = firstY; j <= lastY; j++) {				if (!arr[i][j])					return false;			}		}		return true;	} 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner();		n = scanner.nextInt();		m = scanner.nextInt();		arr = new boolean[n][m];		for (int i = 0; i < n; i++) {			String s = scanner.next();			for (int j = 0; j < m; j++) {				arr[i][j] = s.charAt(j) == '0';			}		}		int ans = 0;		for (int firstX = 0; firstX < n; firstX++) {			for (int firstY = 0; firstY < m; firstY++) { 				for (int lastX = firstX; lastX < n; lastX++) {					for (int lastY = firstY; lastY < m; lastY++) {						if (check(firstX, firstY, lastX, lastY)) {							ans = Math.max(ans, 2 * (lastX - firstX + 1) + 2 * (lastY - firstY + 1));						}					}				}			}		}		println(ans);	}}
