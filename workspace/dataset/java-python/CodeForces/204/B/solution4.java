import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     void run(FastScanner in, PrintWriter out) {         // only two colors can be options         int N = in.nextInt();         int[][] a = new int[N][2];        HashMap<Integer, Integer> colorToCardCount = new HashMap<>();        HashMap<Integer, Integer> faceUpCount = new HashMap<>();          for (int i = 0; i < N; i++) {            a[i][0] = in.nextInt();            a[i][1] = in.nextInt();             colorToCardCount.put(a[i][0], colorToCardCount.getOrDefault(a[i][0], 0)+1);            if (a[i][1] != a[i][0])                colorToCardCount.put(a[i][1], colorToCardCount.getOrDefault(a[i][1], 0)+1);             faceUpCount.put(a[i][0], faceUpCount.getOrDefault(a[i][0], 0)+1);        }         int min = Integer.MAX_VALUE;        int majority = N/2 + (N%2 == 1 ? 1 : 0);        for (Map.Entry<Integer, Integer> e : colorToCardCount.entrySet()) {            if (e.getValue() >= majority) {                min = Math.min(min, Math.max(0, majority-faceUpCount.getOrDefault(e.getKey(), 0)));            }        }        out.println(min == Integer.MAX_VALUE ? -1 : min);    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
