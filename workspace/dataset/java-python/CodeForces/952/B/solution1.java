import java.io.*;import java.lang.*;import java.io.InputStream;import java.io.InputStreamReader;import java.io.BufferedReader;import java.io.OutputStream;import java.io.PrintWriter;import java.io.IOException;import java.util.StringTokenizer;import java.math.BigInteger; public class Rating1900_952B {    static InputReader in = new InputReader(System.in);    static PrintWriter out = new PrintWriter(System.out);     public static void main(String[] args) {        boolean check = true;        for(int i = 0; i<10; i++){            out.println(i);            out.flush();            String str = in.nextLine().trim().toLowerCase();            if(!str.equals("no")){                if (str.equals("great") || str.equals("don't think so") || str.equals("don't touch me") || str.equals("not bad") || str.equals("cool")) {                } else {                    check = false;                }                break;            }        }        if(check) out.println("normal");        else out.println("grumpy");        out.close();    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public String nextLine() {            try {                return reader.readLine();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }         public boolean hasNext() {            String next = null;            try {                next = reader.readLine();            } catch (Exception e) {            }            if (next == null) {                return false;            }            tokenizer = new StringTokenizer(next);            return true;        }         public BigInteger nextBigInteger() {            return new BigInteger(next());        }    }} 
