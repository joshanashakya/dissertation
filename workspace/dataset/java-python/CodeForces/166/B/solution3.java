import java.io.*;import java.util.*; public class Main {     static class Point {        long X;        long Y;        Point(long X, long Y){            this.X =X;            this.Y =Y;        }    }    static long orient(Point p, Point q, Point r) {        long val = (((q.Y - p.Y) * (r.X - q.X)) - ((q.X - p.X) * (r.Y - q.Y)));        if (val == 0L) return val;        return (val > 0L)? 1L: 2L;    }     static boolean segment(Point p, Point q, Point r) {        if (q.X <= Math.max(p.X, r.X) && q.X >= Math.min(p.X, r.X) &&                q.Y <= Math.max(p.Y, r.Y) && q.Y >= Math.min(p.Y, r.Y)){            return true;        }        return false;    }     static long cross(Point a, Point b){        return ((a.X*b.Y)-(b.X*a.Y));    }    static Point minus(Point a,Point b){        return new Point((a.X-b.X),(a.Y-b.Y));    }    static boolean inside(int N,Point[] polygon,Point P){        if((orient(polygon[0],P,polygon[1])==0L && segment(polygon[0],P,polygon[1])) ||                ((orient(polygon[0],P,polygon[N-1])==0L && segment(polygon[0],P,polygon[N-1])))){            return false;        }        Point p1 = minus(polygon[N-1],polygon[0]);        Point p2 = minus(polygon[1],polygon[0]);        Point pVector = minus(P,polygon[0]);        if(!(cross(p1, pVector)<=0 && cross(p2,pVector)>=0)){            return false;        }         int L = 0, R = N - 1;        while(R-L>1){            int mid = (L + R)/2;            Point current = minus(polygon[mid],polygon[0]);            if(cross(current,pVector) >= 0){                L = mid;            }else{                R = mid;            }        }        if(L <(N-1)){            if(orient(polygon[L],P,polygon[L+1])==0L && segment(polygon[L],P,polygon[L+1])){                return false;            }            Point side = minus(polygon[L+1],polygon[L]);            Point pointSideVector = minus(P,polygon[L]);            return (cross(side,pointSideVector) >=0);        }        return true;    }    public static void main(String[] args) throws IOException{        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        StringTokenizer st = new StringTokenizer(br.readLine());        int n = Integer.parseInt(st.nextToken());        Point[] points=new Point[n];        for(int i=n-1;i>=0;i--){            st=new StringTokenizer(br.readLine());            points[i]=new Point(Long.parseLong(st.nextToken()),Long.parseLong(st.nextToken()));        }        int q=Integer.parseInt(br.readLine());        int count=0;        for(int i=0;i<q;i++){            st=new StringTokenizer(br.readLine());            if(inside(n,points,new Point(Long.parseLong(st.nextToken()),Long.parseLong(st.nextToken())))){                count++;            }        }        if(count==q){            pw.println("YES");        }else {            pw.println("NO");        }        pw.close();    }}
