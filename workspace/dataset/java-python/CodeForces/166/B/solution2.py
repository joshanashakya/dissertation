from math import *from collections import defaultdict as ddfrom sys import stdin,stdout,setrecursionlimit as srlfrom bisect import bisect_right as br,bisect_left as blfrom heapq import heapify,heappush as hpush,heappop as hpopsrl(10**6+999);mod=int(1e9)+7;yes='YES';no='NO';class graph:    def __init__(self,n):        self.d=dd(list)        self.vis=[0]*(n+1)        self.dp=[[0,0] for i in range(n+1)]    def addvrtx(self,src,dest):        self.d[src].append(dest)        self.d[dest].append(src)def value(a,b,c):    return a[0]*(b[1]-c[1])+b[0]*(c[1]-a[1])+c[0]*(a[1]-b[1])def cw(a,b,c):    return value(a,b,c)>0def acw(a,b,c):    return value(a,b,c)<0def collinear(a,b,c):    return value(a,b,c)==0def ConvexHull(p,n):    if(n<=2):return    p.sort()    p1=p[0]   # bottom left point    p2=p[-1]  # top right point    up=[p1];down=[p1]    for i in range(1,n):        if(i==n-1 or (not acw(p1,p[i],p2))):            while(len(up)>=2 and acw(up[-2],up[-1],p[i])):                up.pop()            up.append(p[i])        if(i==n-1 or (not cw(p1,p[i],p2))):            while(len(down)>=2 and cw(down[-2],down[-1],p[i])):                down.pop()            down.append(p[i])    ans=up+down    return sorted(set(ans))if __name__=='__main__':    for tc in range(1):        d=dd(int)        val=yes        n=int(input())        a=[tuple(map(int,input().split())) for i in range(n)]        m=int(input())        b=[tuple(map(int,input().split())) for i in range(m)]        ans=ConvexHull(a+b,n+m)        for i in b:            d[i]=1        for i in ans:            if(d[i]==1):                val=no                break        print(val)
