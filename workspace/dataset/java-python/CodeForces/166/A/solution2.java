import java.util.*;import java.io.*;import java.math.*; public class First{     public static void process()throws IOException    {         int n = ni();         int k = ni();         HashMap<String,Integer> map = new HashMap<String,Integer>();         ArrayList<Node> list = new ArrayList<Node>();          for(int i=0;i<n;i++)         {             int a = ni();             int b = ni();             String key = Integer.toString(a)+"_"+Integer.toString(b);             if(map.isEmpty() || !map.containsKey(key))             {                  map.put(key,1);             }             else             {                  int current = map.get(key);                  map.put(key,current+1);             }             Node node = new Node(a,b);             list.add(node);         }          Collections.sort(list,new SortNode());         Node node = list.get(k-1);         String key = Integer.toString(node.a)+"_"+Integer.toString(node.b);         pn(map.get(key));          // for(Node nodes : list)         // {         //     pn(nodes.a+" "+nodes.b);         // }     }    	static AnotherReader sc;    static PrintWriter out;    public static void main(String[]args)throws IOException    {        out = new PrintWriter(System.out);        sc=new AnotherReader();        boolean oj = true;     // 	oj = System.getProperty("ONLINE_JUDGE") != null;    // 	if(!oj) sc=new AnotherReader(100);     //     long s = System.currentTimeMillis();                    int t=1;        while(t-->0)            process();        out.flush();        // if(!oj)        //     System.out.println(System.currentTimeMillis()-s+"ms");        System.out.close();      }     static void pn(Object o){out.println(o);}    static void p(Object o){out.print(o);}    static void pni(Object o){out.println(o);System.out.flush();}    static int ni()throws IOException{return sc.nextInt();}    static long nl()throws IOException{return sc.nextLong();}    static double nd()throws IOException{return sc.nextDouble();}    static String nln()throws IOException{return sc.nextLine();}    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}    static boolean multipleTC=false;   /////////////////////////////////////////////////////////////////////////////////////////////////////////     static class AnotherReader{BufferedReader br; StringTokenizer st;    AnotherReader()throws FileNotFoundException{    br=new BufferedReader(new InputStreamReader(System.in));}    AnotherReader(int a)throws FileNotFoundException{    br = new BufferedReader(new FileReader("input.txt"));}    String next()throws IOException{    while (st == null || !st.hasMoreElements()) {try{    st = new StringTokenizer(br.readLine());}    catch (IOException  e){ e.printStackTrace(); }}    return st.nextToken(); } int nextInt() throws IOException{    return Integer.parseInt(next());}    long nextLong() throws IOException    {return Long.parseLong(next());}    double nextDouble()throws IOException { return Double.parseDouble(next()); }    String nextLine() throws IOException{ String str = ""; try{    str = br.readLine();} catch (IOException e){    e.printStackTrace();} return str;}}    /////////////////////////////////////////////////////////////////////////////////////////////////////////////}  class Node{     int a,b;     Node(int x, int y)     {         a=x;         b=y;     }} class SortNode implements Comparator<Node>{     public int compare(Node x, Node y)     {         if(x.a!=y.a)         {             return y.a-x.a;         }         else          {              return x.b-y.b;         }     }}
