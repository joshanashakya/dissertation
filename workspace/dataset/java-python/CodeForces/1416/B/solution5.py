import osimport

sysfrom
io
import BytesIO, \
    IOBase  # region fastioBUFSIZE = 8192class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # ------------------------------ def RL(): return map(int, sys.stdin.readline().rstrip().split())def RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))def N(): return int(input())def print_list(l):    print(' '.join(map(str,l)))# import sys# sys.setrecursionlimit(5010)# from heapq import *# from collections import deque as dqfrom math import ceil,floor,sqrt,pow# import bisect as bs# from collections import Counter# from collections import defaultdict as dc Â for _ in range(N()):    n = N()    a = RLL()    s = sum(a)    if s%n:        print(-1)    else:        print(3*(n-1))        a = [0]+a        key = s//n         for i in range(2,n+1):            print(1,i,(i-a[i]%i)%i)            print(i,1,ceil(a[i]/i))        for i in range(2,n+1):            print(1,i,key)
