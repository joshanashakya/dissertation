// package CodeForces; import java.io.BufferedOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.InputMismatchException; public class Round673D { 	public static void solve() {		int t = s.nextInt();		o : while(t-- > 0) {			int n = s.nextInt();			long[] arr = s.nextLongArray(n);			long sum = 0;			for(int i = 0; i < n; i++) {				sum = sum + arr[i];			}			if(sum%n != 0) {				out.println(-1);				continue;			}			long reqd = sum/(long)n;			ArrayList<Op> ans = new ArrayList<Op>();			for(int i = 1; i < n; i++) {				long val = (arr[i]/(long)(i + 1));				if(arr[i] == val * (long)(i + 1)) {					arr[0] += val * (i + 1);					arr[i] -= val * (i + 1);					ans.add(new Op(i + 1, 1, val));				}			}			for(int i = 1; i < n; i++) {				if(arr[i] != 0) {					long add = (long)(i + 1) - (long)arr[i]%(long)(i + 1);					if(arr[0] >= add) {						arr[0] -= add;						arr[i] += add;						ans.add(new Op(1, i + 1, add));						long val = (arr[i]/(long)(i + 1));						arr[0] += val * (i + 1);						arr[i] -= val * (i + 1);						ans.add(new Op(i + 1, 1, val));					}				}			}			for(int i = 1; i < n; i++) {				if(arr[i] > reqd) {					out.println(-1);					continue o;				}				long diff = reqd - arr[i];				if(arr[0] < diff) {					out.println(-1);					continue o;				}				arr[0] -= diff;				arr[i] += diff;				ans.add(new Op(1, i + 1, diff));			}			for(int i = 1; i < n; i++) {				if(arr[i - 1] != arr[i]) {					out.println(-1);					continue o;				}			}			out.println(ans.size());			for(Op x : ans) {				out.println(x.i + " " + x.j + " " + x.x);			}		}	}		public static class Op {		int i;		int j;		long x;		public Op(int i, int j, long x) {			this.i = i;			this.j = j;			this.x = x;		}	} 	public static void main(String[] args) {		new Thread(null, null, "Thread", 1 << 27) {			public void run() {				try {					out = new PrintWriter(new BufferedOutputStream(System.out));					s = new FastReader(System.in);					solve();					out.close();				} catch (Exception e) {					e.printStackTrace();					System.exit(1);				}			}		}.start();	} 	public static PrintWriter out;	public static FastReader s; 	public static class FastReader { 		private InputStream stream;		private byte[] buf = new byte[4096];		private int curChar, snumChars; 		public FastReader(InputStream stream) {			this.stream = stream;		} 		public int read() {			if (snumChars == -1) {				throw new InputMismatchException();			}			if (curChar >= snumChars) {				curChar = 0;				try {					snumChars = stream.read(buf);				} catch (IOException E) {					throw new InputMismatchException();				}			}			if (snumChars <= 0) {				return -1;			}			return buf[curChar++];		} 		public int nextInt() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int number = 0;			do {				number *= 10;				number += c - '0';				c = read();			} while (!isSpaceChar(c));			return number * sgn;		} 		public long nextLong() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			long sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long number = 0;			do {				number *= 10L;				number += (long) (c - '0');				c = read();			} while (!isSpaceChar(c));			return number * sgn;		} 		public int[] nextIntArray(int n) {			int[] arr = new int[n];			for (int i = 0; i < n; i++) {				arr[i] = this.nextInt();			}			return arr;		} 		public long[] nextLongArray(int n) {			long[] arr = new long[n];			for (int i = 0; i < n; i++) {				arr[i] = this.nextLong();			}			return arr;		} 		public String next() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public String nextLine() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndofLine(c));			return res.toString();		} 		public boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		public boolean isEndofLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	} 	}
