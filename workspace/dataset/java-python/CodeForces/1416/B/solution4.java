import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.stream.IntStream;import java.io.PrintStream;import java.util.List;import java.util.Arrays;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            PrintWriter out = new PrintWriter(outputStream);            BMakeThemEqual solver = new BMakeThemEqual();            int testCount = Integer.parseInt(in.next());            for (int i = 1; i <= testCount; i++)                solver.solve(i, in, out);            out.close();        }    }     static class BMakeThemEqual {        Debug debug = new Debug(true);        List<int[]> op = new ArrayList<>();        int[] a;        int avg;         public void solve(int testNumber, FastInput in, PrintWriter out) {            debug.debug("testNumber", testNumber);            op.clear();             int n = in.readInt();            a = new int[n + 1];             for (int i = 1; i <= n; i++) {                a[i] = in.readInt();            }             int sum = Arrays.stream(a).sum();            if (sum % n != 0) {                out.println(-1);                return;            }             avg = sum / n;            for (int i = n; i >= 2; i--) {                int req = (i - a[i] % i) % i;                if (req > a[1]) {                    if (a[i] < i) {                        continue;                    }                    add(i, 1, 1);                }                add(1, i, req);                add(i, 1, a[i] / i);            }             while (true) {                boolean process = false;                for (int i = 2; i <= n; i++) {                    if (a[i] == 0) {                        continue;                    }                    int req = (i - a[i] % i) % i;                    if (req <= a[1]) {                        add(1, i, req);                        add(i, 1, a[i] / i);                        process = true;                    }                }                if (!process) {                    break;                }            }             for (int i = 2; i <= n; i++) {                if (a[i] > avg) {                    out.println(-1);                    return;                }            }             for (int i = 2; i <= n; i++) {                add(1, i, avg - a[i]);            }             assert equal(a);            assert op.size() <= 3 * n;            out.println(op.size());            for (int[] seq : op) {                for (int x : seq) {                    out.print(x);                    out.append(' ');                }                out.println();            }         }         public boolean equal(int[] a) {            for (int i = 2; i < a.length; i++) {                if (a[i] != a[i - 1]) {                    return false;                }            }            return true;        }         public void add(int i, int j, int x) {            if (x == 0) {                return;            }            a[i] -= x * i;            a[j] += x * i;            op.add(new int[]{i, j, x});        }     }     static class Debug {        private boolean offline;        private PrintStream out = System.err;         public Debug(boolean enable) {            offline = enable && System.getSecurityManager() == null;        }         public Debug debug(String name, int x) {            if (offline) {                debug(name, "" + x);            }            return this;        }         public Debug debug(String name, String x) {            if (offline) {                out.printf("%s=%s", name, x);                out.println();            }            return this;        }     }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String next() {            return readString();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public String readString(StringBuilder builder) {            skipBlank();             while (next > 32) {                builder.append((char) next);                next = read();            }             return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }} 
