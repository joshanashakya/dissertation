//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class A {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=sc.nextInt();		while(test-->0)		{			int n=sc.nextInt();			int minm[]=new int[n+1];			int last[]=new int[n+1];			Arrays.fill(minm, -1);			for(int i=1;i<=n;i++) {				int temp=sc.nextInt();				if(last[temp] == 0) {					minm[temp]=(i-1);					last[temp]=i;				}				else {					int newDiff =i-last[temp]-1;					minm[temp]=Math.max(minm[temp], newDiff);					last[temp]=i;				}			}			for(int j=1;j<=n;j++) {				int temp=j;				int i =n+1;				if(last[temp] == 0) {					minm[temp]=(i-1);					last[temp]=i;				}				else {					int newDiff =i-last[temp]-1;					minm[temp]=Math.max(minm[temp], newDiff);					last[temp]=i;				}			}						int res[]=new int[n+2];			Arrays.fill(res, -1);			for(int i=1;i<=n;i++) {				if(minm[i] == -1) continue;								if(res[minm[i]+1] == -1) {					res[minm[i]+1]=i;				}							}			int leastTillNow=-1;			for(int i=1;i<=n;i++) {				if(res[i] == -1 && leastTillNow == -1) {					ans.append(res[i]+" ");					continue;				}				if(res[i] == -1) {					res[i] =leastTillNow;				}				else {					if(res[i]>leastTillNow && leastTillNow != -1) {						res[i]=leastTillNow;					}					else {						leastTillNow =res[i];					}				}				ans.append(res[i]+" ");			}									ans.append("\n");							}			    System.out.print(ans);	}         static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
