import java.util.*;import java.lang.*;import java.io.*;Â public class Main{	PrintWriter out = new PrintWriter(System.out);	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));    StringTokenizer tok = new StringTokenizer("");    String next() throws IOException {        if (!tok.hasMoreTokens()) { tok = new StringTokenizer(in.readLine()); }        return tok.nextToken();    }    int ni() throws IOException { return Integer.parseInt(next()); }    long nl() throws IOException { return Long.parseLong(next()); }        long mod=1000000007;        void solve() throws IOException {        for (int tc=ni();tc>0;tc--) {            int n=ni();            int[]L=new int[n+2];            int[]R=new int[n+2];            for (int i=1;i<=n;i++) { L[i]=ni(); R[i]=ni(); }            L[n+1]=5001;                        Queue<Integer>Q=new LinkedList();            int lp=1;            int[]ans=new int[n+1];                        for (int i=1;i<=5000;i++) {                while(L[lp]==i) { Q.add(lp); lp++; }                                while (Q.size()>0) {                    int u=Q.poll();                    if (R[u]<i) continue;                    ans[u]=i;                    break;                }            }                        for (int i=1;i<=n;i++) out.print(ans[i]+" ");            out.println();        }        out.flush();    }        int gcd(int a,int b) { return(b==0?a:gcd(b,a%b)); }    long gcd(long a,long b) { return(b==0?a:gcd(b,a%b)); }    long mp(long a,long p) { long r=1; while(p>0) { if ((p&1)==1) r=(r*a)%mod; p>>=1; a=(a*a)%mod; } return r; }        public static void main(String[] args) throws IOException {        new Main().solve();    }}
