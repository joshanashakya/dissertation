import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class WaterTheGarden {	private static final FastReader in = new FastReader();	private static final PrintWriter out = new PrintWriter(System.out); 	public static void main(String[] args) {		Solver sol = new Solver();		int tt = 1;		for (int qq = in.nextInt(); tt <= qq; ++tt)			sol.solve(tt);		out.close();	} 	private static final class Solver {		public void solve(int testCase) {			int n = in.nextInt(), k = in.nextInt();			boolean[] gardenBeds = new boolean[n];			for (int i = 0; i < k; ++i) {				int index = in.nextInt() - 1;				gardenBeds[index] = true;			}			if (k == n) {				out.println(1);				return;			}			int ans = 0;			while (true) {				boolean[] filled = new boolean[n];//				out.println(Arrays.toString(gardenBeds)); 				for (int i = 0; i < n; i++) {					if (gardenBeds[i] == true) {						filled[i] = true;						if (i == 0) filled[i + 1] = true;						else if (i == n - 1) filled[i - 1] = true;						else filled[i - 1] = filled[i + 1] = true;					}				}				gardenBeds = filled;//				out.println(Arrays.toString(filled));				ans++;				boolean needTofill = true;				for (int i = 0; i < n; ++i) {					if (gardenBeds[i] == false) {						needTofill = false;					}				}				if (needTofill)					break;			}//			out.println(Arrays.toString(gardenBeds));			out.println(ans + 1);		}	} 	private static final class FastReader {		private BufferedReader br;		private StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in), 1 << 16);			st = null;		} 		public String next() {			while (st == null || !st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return st.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		}	}}
