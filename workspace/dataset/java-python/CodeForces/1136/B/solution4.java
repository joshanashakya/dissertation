import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.PrintStream;import java.io.PrintWriter;import java.security.AccessControlException;import java.util.Arrays;import java.util.Collection;import java.util.Comparator;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.TreeMap;import java.util.function.Function;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.LongStream;import java.util.stream.Stream;public class _p001136B {static public void main(final String[] args) throws IOException{p001136B._main(args);}static private class p001136B extends Solver{public p001136B(){nameIn="in/1000/p001136B.in";singleTest=true;}@Override public void solve()throws IOException{int n=sc.nextInt();int k=sc.nextInt();sc.nextLine();long res=0;if(k>n+1-k){k=n+1-k;}res+=k-1;res++;res++;res++;for(int i=2;i<=n;i++){res++;res++;res++;}pw.println(res);}static public void _main(String[]args)throws IOException{new p001136B().run();}}static private class MyScanner{private StringBuilder cache=new StringBuilder();int cache_pos=0;private int first_linebreak=-1;private int second_linebreak=-1;private StringBuilder sb=new StringBuilder();private InputStream is=null;public MyScanner(final InputStream is){this.is=is;}private String charToString(final int c){return String.format("'%s'",c=='\n'?"\\n":(c=='\r'?"\\r":String.valueOf((char)c)));}public int get(){int res=-1;if(cache_pos<cache.length()){res=cache.charAt(cache_pos);cache_pos++;if(cache_pos==cache.length()){cache.delete(0,cache_pos);cache_pos=0;}}else{try{res=is.read();}catch(IOException ex){throw new RuntimeException(ex);}}return res;}private void unget(final int c){if(cache_pos==0){cache.insert(0,(char)c);}else{cache_pos--;}}public String nextLine(){sb.delete(0,sb.length());int c;boolean done=false;boolean end=false;while((c=get())!=-1){if(check_linebreak(c)){done=true;if(c==first_linebreak){if(!end){end=true;}else{cache.append((char)c);break;}}else if(second_linebreak!=-1 && c==second_linebreak){break;}}if(end && c!=first_linebreak && c!=second_linebreak){cache.append((char)c);break;}if(!done){sb.append((char)c);}}return sb.toString();}private boolean check_linebreak(int c){if(c=='\n'|| c=='\r'){if(first_linebreak==-1){first_linebreak=c;}else if(c!=first_linebreak && second_linebreak==-1){second_linebreak=c;}return true;}return false;}public int nextInt(){int sign=0;boolean done=false;boolean started=false;int res=0;int c;while((c=get())!=-1){check_linebreak(c);if(sign==0 && c=='-'){started=true;sign=-1;}else if(c>='0'&& c<='9'){if(sign==0){sign=1;}started=true;res*=10;res+=c-'0';done=true;}else if(!done){if(started){unget(c);if(sign==-1){unget('-');}break;}}else{unget(c);break;}}if(done){return res*sign;}throw new RuntimeException();}public long nextLong(){int sign=0;boolean done=false;boolean started=false;long res=0;int c;while((c=get())!=-1){check_linebreak(c);if(sign==0 && c=='-'){started=true;sign=-1;}else if(c>='0'&& c<='9'){if(sign==0){sign=1;}started=true;res*=10;res+=c-'0';done=true;}else if(!done){if(started){unget(c);if(sign==-1){unget('-');}break;}}else{unget(c);break;}}if(done){return res*sign;}throw new RuntimeException();}public boolean hasNext(){boolean res=false;int c;while((c=get())!=-1){if(!check_linebreak(c)&& c!=' '&& c!='\t'){res=true;unget(c);break;}}return res;}public String next(){sb.delete(0,sb.length());boolean started=false;int c;while((c=get())!=-1){if(check_linebreak(c)|| c==' '|| c=='\t'){if(started){unget(c);break;}}else{started=true;sb.append((char)c);}}return sb.toString();}}static private class Pair<K,V>{private K k;private V v;public Pair(final K t,final V u){this.k=t;this.v=u;}public K getKey(){return k;}public V getValue(){return v;}}static private abstract class Solver{protected String nameIn=null;protected String nameOut=null;protected boolean singleTest=false;protected boolean preprocessDebug=false;protected boolean doNotPreprocess=false;protected PrintStream debugPrintStream=null;protected MyScanner sc=null;protected PrintWriter pw=null;final static String SPACE=" ";final static String SPACES="\\s+";private void process()throws IOException{if(!singleTest){int t=lineToIntArray()[0];while(t-->0){solve();pw.flush();}}else{solve();pw.flush();}}abstract protected void solve()throws IOException;protected String[]lineToArray()throws IOException{return sc.nextLine().trim().split(SPACES);}protected int[]lineToIntArray()throws IOException{return Arrays.stream(lineToArray()).mapToInt(Integer::valueOf).toArray();}protected long[]lineToLongArray()throws IOException{return Arrays.stream(lineToArray()).mapToLong(Long::valueOf).toArray();}protected void run()throws IOException{boolean done=false;try{if(nameIn!=null && new File(nameIn).exists()){try(FileInputStream fis=new FileInputStream(nameIn);PrintWriter pw0=select_output();){done=true;sc=new MyScanner(fis);pw=pw0;process();}}}catch(IOException ex){}catch(AccessControlException ex){}if(!done){try(PrintWriter pw0=select_output();){sc=new MyScanner(System.in);pw=pw0;process();}}}private PrintWriter select_output()throws FileNotFoundException{if(nameOut!=null){return new PrintWriter(nameOut);}return new PrintWriter(System.out);}public static Map<Integer,List<Integer>>mapi(final int[]a){return IntStream.range(0,a.length).collect(()->new TreeMap<Integer,List<Integer>>(),(res,i)->{if(!res.containsKey(a[i])){res.put(a[i],Stream.of(i).collect(Collectors.toList()));}else{res.get(a[i]).add(i);}},Map::putAll);}public static Map<Long,List<Integer>>mapi(final long[]a){return IntStream.range(0,a.length).collect(()->new TreeMap<Long,List<Integer>>(),(res,i)->{if(!res.containsKey(a[i])){res.put(a[i],Stream.of(i).collect(Collectors.toList()));}else{res.get(a[i]).add(i);}},Map::putAll);}public static<T>Map<T,List<Integer>>mapi(final T[]a){return IntStream.range(0,a.length).collect(()->new TreeMap<T,List<Integer>>(),(res,i)->{if(!res.containsKey(a[i])){res.put(a[i],Stream.of(i).collect(Collectors.toList()));}else{res.get(a[i]).add(i);}},Map::putAll);}public static<T>Map<T,List<Integer>>mapi(final T[]a,Comparator<T>cmp){return IntStream.range(0,a.length).collect(()->new TreeMap<T,List<Integer>>(cmp),(res,i)->{if(!res.containsKey(a[i])){res.put(a[i],Stream.of(i).collect(Collectors.toList()));}else{res.get(a[i]).add(i);}},Map::putAll);}public static Map<Integer,List<Integer>>mapi(final IntStream a){int[]i=new int[]{0};return a.collect(()->new TreeMap<Integer,List<Integer>>(),(res,v)->{if(!res.containsKey(v)){res.put(v,Stream.of(i[0]).collect(Collectors.toList()));}else{res.get(v).add(i[0]);}i[0]++;},Map::putAll);}public static Map<Long,List<Integer>>mapi(final LongStream a){int[]i=new int[]{0};return a.collect(()->new TreeMap<Long,List<Integer>>(),(res,v)->{if(!res.containsKey(v)){res.put(v,Stream.of(i[0]).collect(Collectors.toList()));}else{res.get(v).add(i[0]);}i[0]++;},Map::putAll);}public static<T>Map<T,List<Integer>>mapi(final Stream<T>a,Comparator<T>cmp){int[]i=new int[]{0};return a.collect(()->new TreeMap<T,List<Integer>>(cmp),(res,v)->{if(!res.containsKey(v)){res.put(v,Stream.of(i[0]).collect(Collectors.toList()));}else{res.get(v).add(i[0]);}},Map::putAll);}public static<T>Map<T,List<Integer>>mapi(final Stream<T>a){int[]i=new int[]{0};return a.collect(()->new TreeMap<T,List<Integer>>(),(res,v)->{if(!res.containsKey(v)){res.put(v,Stream.of(i[0]).collect(Collectors.toList()));}else{res.get(v).add(i[0]);}},Map::putAll);}public static List<int[]>listi(final int[]a){return IntStream.range(0,a.length).mapToObj(i->new int[]{a[i],i}).collect(Collectors.toList());}public static List<long[]>listi(final long[]a){return IntStream.range(0,a.length).mapToObj(i->new long[]{a[i],i}).collect(Collectors.toList());}public static<T>List<Pair<T,Integer>>listi(final T[]a){return IntStream.range(0,a.length).mapToObj(i->new Pair<T,Integer>(a[i],i)).collect(Collectors.toList());}public static List<int[]>listi(final IntStream a){int[]i=new int[]{0};return a.mapToObj(v->new int[]{v,i[0]++}).collect(Collectors.toList());}public static List<long[]>listi(final LongStream a){int[]i=new int[]{0};return a.mapToObj(v->new long[]{v,i[0]++}).collect(Collectors.toList());}public static<T>List<Pair<T,Integer>>listi(final Stream<T>a){int[]i=new int[]{0};return a.map(v->new Pair<T,Integer>(v,i[0]++)).collect(Collectors.toList());}public static<T>List<Pair<T,Integer>>listi(final Collection<T>a){int[]i=new int[]{0};return a.stream().map(v->new Pair<T,Integer>(v,i[0]++)).collect(Collectors.toList());}public static String join(final int[]a){return Arrays.stream(a).mapToObj(Integer::toString).collect(Collectors.joining(SPACE));}public static String join(final long[]a){return Arrays.stream(a).mapToObj(Long::toString).collect(Collectors.joining(SPACE));}public static<T>String join(final T[]a){return Arrays.stream(a).map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final T[]a,final Function<T,String>toString){return Arrays.stream(a).map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final Collection<T>a){return a.stream().map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final Collection<T>a,final Function<T,String>toString){return a.stream().map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final Stream<T>a){return a.map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final Stream<T>a,final Function<T,String>toString){return a.map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}public static<T>String join(final IntStream a){return a.mapToObj(Integer::toString).collect(Collectors.joining(SPACE));}public static<T>String join(final LongStream a){return a.mapToObj(Long::toString).collect(Collectors.joining(SPACE));}public static List<Integer>list(final int[]a){return Arrays.stream(a).mapToObj(Integer::valueOf).collect(Collectors.toList());}public static List<Integer>list(final IntStream a){return a.mapToObj(Integer::valueOf).collect(Collectors.toList());}public static List<Long>list(final long[]a){return Arrays.stream(a).mapToObj(Long::valueOf).collect(Collectors.toList());}public static List<Long>list(final LongStream a){return a.mapToObj(Long::valueOf).collect(Collectors.toList());}public static<T>List<T>list(final Stream<T>a){return a.collect(Collectors.toList());}public static<T>List<T>list(final Collection<T>a){return a.stream().collect(Collectors.toList());}public static<T>List<T>list(final T[]a){return Arrays.stream(a).collect(Collectors.toList());}public static String yesNo(final boolean res){return res?"YES":"NO";}}}
