import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeSet; public class Main {	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out);							int n = sc.nextInt(), m = sc.nextInt(), min = sc.nextInt(), max = sc.nextInt();		int[] arr = new int[m];		for (int i = 0; i < m; i++)			arr[i] = sc.nextInt();				Arrays.sort(arr);		if (!(arr[0] >= min && arr[m - 1] <= max )) out.println("Incorrect");		else {			if (n - m == 1) out.println(arr[0] == min || arr[m - 1] == max ? "Correct" : "Incorrect");			else out.println("Correct");		}				out.flush();		out.close();	}					 	static class Scanner { 		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		}				public Scanner (FileReader f) {			br = new BufferedReader(f);		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public double nextDouble() throws IOException {			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if (x.charAt(0) == '-') {				neg = true;				start++;			}			for (int i = start; i < x.length(); i++)				if (x.charAt(i) == '.') {					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				} else {					sb.append(x.charAt(i));					if (dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg ? -1 : 1);		} 		public boolean ready() throws IOException {			return br.ready();		} 		public boolean nextEmpty() throws IOException {			String s = nextLine();			st = new StringTokenizer(s);			return s.isEmpty();		}	}}
