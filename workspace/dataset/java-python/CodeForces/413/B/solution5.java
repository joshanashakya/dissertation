import java.util.Comparator;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class Main {     public static void main(String[] args) throws IOException {        // https://codeforces.com/problemset/problem/413/B        FastReader sc = new FastReader();        PrintWriter pw = new PrintWriter(System.out);        int n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt(), a[][] = new int[n][m], ki, kj,p[]=new int[n], c[]=new int[m];        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                a[i][j] = sc.nextInt();            }        }        for (int i = 0; i < k; i++) {            ki = sc.nextInt() - 1;            kj = sc.nextInt() - 1;            p[ki]++;            c[kj]++;                    }        for (int i = 0; i < n; i++) {            int ans=0;            for (int j = 0; j < m; j++) {                if (a[i][j]==1) {                    ans+=c[j];                }            }            pw.print((ans-p[i])+" ");            pw.flush();        }        pw.close();    }     static class FastReader {         StringTokenizer st;        BufferedReader br;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         public boolean hasNext() throws IOException {            String s = br.readLine();            if (s == null || s.isEmpty()) {                return false;            }            st = new StringTokenizer(s);            return true;        }         public String next() throws IOException {            if (st == null || !st.hasMoreTokens()) {                String s = br.readLine();                if (s.isEmpty()) {                    return null;                }                st = new StringTokenizer(s);            }            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }    }}
