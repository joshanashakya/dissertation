import java.io.*;import java.math.*;import java.util.*; public class Main {	static final long MOD = 1000000007L;	static final int INF = 50000000;	public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter pw = new PrintWriter(System.out);				int N = sc.ni();		int M = sc.ni();		boolean[][] adj = new boolean[N][N];		for (int i = 0; i < M; i++) {			int a = sc.ni()-1;			int b = sc.ni()-1;			adj[a][b] = true;			adj[b][a] = true;		}				char[] vals = new char[N];		Arrays.fill(vals, 'b');		for (int i = 0; i < N; i++) {			for (int j = i+1; j < N; j++) {				if (!adj[i][j]) {					if (vals[i]=='a') {						vals[j] = 'c';					} else if (vals[i]=='c') {						vals[j] = 'a';					} else if (vals[j]=='a') {						vals[i] = 'c';					} else if (vals[j]=='c') {						vals[i] = 'a';					} else {						vals[i] = 'a';						vals[j] = 'c';					}				}			}		}				for (int i = 0; i < N; i++) {			for (int j = i+1; j < N; j++) {				int diff = Math.abs(vals[i]-vals[j]);				if ((adj[i][j]&&diff==2)||(!adj[i][j]&&diff<=1)) {					pw.println("No");					pw.close();					return;				}			}		}				pw.println("Yes");		for (char c: vals)			pw.print(c);				pw.close();	}		//Fast exponentiation (x^y mod m)	public static long power(long x, long y, long m) {		long ans = 1;		x %= m;		while (y > 0) {			if(y % 2 == 1)				ans = (ans * x) % m;			y /= 2;			x = (x * x) % m;		}		return ans;	}	    static class FastScanner {         BufferedReader br;         StringTokenizer st;           public FastScanner() {             br = new BufferedReader(new InputStreamReader(System.in));         }           String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }                int ni() {             return Integer.parseInt(next());         }          long nl() {             return Long.parseLong(next());         }           double nd() {             return Double.parseDouble(next());         }           String nextLine() {            String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                e.printStackTrace();             }             return str;        }    }}
