import java.io.*;import java.util.*; public class GraphAndString {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader inp = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Solver solver = new Solver();        solver.solve(inp, out);        out.close();    }     static class Solver {         HashMap<Integer, ArrayList<Integer>> g;        int[] s;        boolean[] v;        boolean p = true;         private void dfs(int node, int val) {            if (v[node]) return;            v[node] = true;            int newVal = (val == 3) ? 1 : 3;            for (int n: g.get(node)) {                if (s[n] == val) p = false;                else s[n] = newVal;                if (!v[n]) dfs(n, newVal);            }        }        private void solve(InputReader inp, PrintWriter out) {            /*            no edge => (a, c) or (c, a)             */            int n = inp.nextInt(), m = inp.nextInt();            boolean[][] adj = new boolean[n][n];            g = new HashMap<>();            for (int i = 0; i < m; i++) {                int a = inp.nextInt() - 1;                int b = inp.nextInt() - 1;                adj[a][b] = true;                adj[b][a] = true;            }             for (int i = 0; i < n; i++) {                for (int j = i + 1; j < n; j++) {                    if (!adj[i][j]) {                        if (!g.containsKey(i)) g.put(i, new ArrayList<>());                        if (!g.containsKey(j)) g.put(j, new ArrayList<>());                        g.get(i).add(j);                        g.get(j).add(i);                    }                }            }            //undefined = 0, a = 1, b = 2, c = 3            s = new int[n];            v = new boolean[n];            for (int key: g.keySet()) {                if (!v[key]) {                    s[key] = 1;                    dfs(key, 1);                }            }            for (int i = 0; i < n; i++) {                for (int j = 0; j < n; j++) {                    if (adj[i][j] && s[i] == 1 && s[j] == 3) p = false;                    if (adj[i][j] && s[j] == 3 && s[i] == 1) p = false;                }            }            if (!p) out.print("No");            else {                out.println("Yes");                for (int i: s) {                    if (i == 1) out.print('a');                    else if (i == 3) out.print('c');                    else out.print('b');                }            }         }    }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }    }}
