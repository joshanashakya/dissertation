import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            AGraphAndString solver = new AGraphAndString();            solver.solve(1, in, out);            out.close();        }    }     static class AGraphAndString {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.readInt();            int m = in.readInt();            boolean[][] adj = new boolean[n][n];            for (int i = 0; i < m; i++) {                int u = in.readInt() - 1;                int v = in.readInt() - 1;                adj[u][v] = adj[v][u] = true;            }            int a = -1;            int c = -1;            for (int i = 0; i < n; i++) {                for (int j = i + 1; j < n; j++) {                    if (!adj[i][j]) {                        a = i;                        c = j;                    }                }            }            if (a == -1) {                out.println("Yes");                for (int i = 0; i < n; i++) {                    out.append('a');                }                return;            }            boolean[] setA = new boolean[n];            boolean[] setC = new boolean[n];            setA[a] = true;            setC[c] = true;            for (int i = 0; i < n; i++) {                if (adj[i][a]) {                    setA[i] = true;                }                if (adj[i][c]) {                    setC[i] = true;                }            }            boolean[] setB = new boolean[n];            for (int i = 0; i < n; i++) {                if (setA[i] && setC[i]) {                    setB[i] = true;                    setA[i] = setC[i] = false;                }            }             for (int i = 0; i < n; i++) {                if (!(setA[i] || setB[i] || setC[i])) {                    out.println("No");                    return;                }            }             for (int i = 0; i < n; i++) {                for (int j = i + 1; j < n; j++) {                    int ci = setA[i] ? 0 : setC[i] ? 2 : 1;                    int cj = setA[j] ? 0 : setC[j] ? 2 : 1;                    if ((Math.abs(ci - cj) <= 1) != (adj[i][j])) {                        out.println("No");                        return;                    }                }            }             out.println("Yes");            for (int i = 0; i < n; i++) {                char ci = setA[i] ? 'a' : setC[i] ? 'c' : 'b';                out.append(ci);            }        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }} 
