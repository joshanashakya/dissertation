import java.io.*;import java.util.*; public class Solution{        public static void main(String[] args) throws Exception{        int nm[] = in.readA();        int n = nm[0], m = nm[1];        char[][] board = new char[n][m];        for(int i = 0; i < n; i++){            char[] line = in.readLine().toCharArray();            for(int j = 0; j < m; j++){                board[i][j] = line[j];            }        }        boolean possible = true;        for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                possible = possible && check(i,j,board[i][j], board);            }        }        if(!possible)   System.out.println("NO");        else System.out.println("YES");    }    static int[][] direction = {{-1,-1}, {-1,0}, {-1,1}, {0,-1}, {0,1}, {1, -1}, {1, 0}, {1, 1}};    public static boolean check(int x,int y, char val, char[][] board){        if(board[x][y] == '*')  return true;        int mines = 0;        for(int[] dir: direction){            int nx = x + dir[0], ny = y + dir[1];            if(nx < 0 || nx >= board.length || ny < 0 || ny >= board[0].length)                continue;            if(board[nx][ny] == '*')    mines++;        }        // System.out.println(x+","+y+" mine="+mines);        if(mines == 0)  {            return val=='.';        }        else {            return (val-'0')==mines;        }    }     static Inputer in;    static {        in = new Inputer();    }     static class Inputer{        BufferedReader br;        Inputer(){            try{                br = new BufferedReader(new InputStreamReader(System.in));            }            catch(Exception e){}        }        public int readInt() throws Exception{            return Integer.parseInt(readLine());        }        public long readLong() throws Exception{            return Long.parseLong(readLine());        }        public int[] readA(String delim) throws Exception{            String[] s = readLine().split(delim);            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public int[] readA() throws Exception{            String[] s = readLine().split("\\s+");            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public long[] readLA() throws Exception{            String[] s = readLine().split("\\s+");            long[] A = new long[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Long.parseLong(s[i]);            return A;        }        public String readLine() throws Exception{            return br.readLine();        }        public int[] copyA(int[] A){            int[] B = new int[A.length];            for(int i= 0 ; i < A.length; i++)                B[i] = A[i];            return B;        }    }}
