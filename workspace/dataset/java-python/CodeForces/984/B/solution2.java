//package graphs;import java.util.*;public class PW { 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner s=new Scanner(System.in);				//int a=s.nextInt();		//lon n=s.nextLong();			   int n=s.nextInt();	   int m=s.nextInt();	   	   String a[]=new String[n];	   	   for(int i=0;i<n;i++)		   a[i]=s.next();	   	   int flag=0;	   	   for(int i=0;i<n;i++)	   {		   for(int j=0;j<m;j++)		   {			   if(a[i].charAt(j)=='*')			   {				   continue;			   }			   else if(a[i].charAt(j)=='.')			   {				   if(i-1>=0&&a[i-1].charAt(j)=='*')					   flag=1;				   if(i-1>=0&&j-1>=0 &&a[i-1].charAt(j-1)=='*')					   flag=1;				   if(i-1>=0&&j+1<m &&a[i-1].charAt(j+1)=='*')					   flag=1;				   if(j-1>=0&& a[i].charAt(j-1)=='*')					   flag=1;				   if(j+1<m &&a[i].charAt(j+1)=='*')					   flag=1;				   				   if(i+1<n&&a[i+1].charAt(j)=='*')					   flag=1;				   				   if(i+1<n &&j-1>=0 &&a[i+1].charAt(j-1)=='*')					   flag=1;				   				   if(i+1<n&& j+1<m &&a[i+1].charAt(j+1)=='*')					   flag=1;				   				   if(flag==1)					   break;					   			   }			   else			   {				   				   int req= a[i].charAt(j)-'0';				   int curr=0;				   if(i-1>=0&&a[i-1].charAt(j)=='*')					   curr++;				   if(i-1>=0&&j-1>=0 &&a[i-1].charAt(j-1)=='*')					   curr++;				   if(i-1>=0&&j+1<m &&a[i-1].charAt(j+1)=='*')					   curr++;				   if(j-1>=0&& a[i].charAt(j-1)=='*')					   curr++;				   if(j+1<m &&a[i].charAt(j+1)=='*')					   curr++;				   				   if(i+1<n&&a[i+1].charAt(j)=='*')					   curr++;				   				   if(i+1<n &&j-1>=0 &&a[i+1].charAt(j-1)=='*')					   curr++;				   				   if(i+1<n&& j+1<m &&a[i+1].charAt(j+1)=='*')					   curr++;				   				   if(curr>req||curr<req)				   {					   flag=1;					   break;				   }				   			   }			   			   		   }		   		   		   	   }			   	   if(flag==1)		   System.out.println("NO");	   else		   System.out.println("YES");			}				public static long solve(int n, int r)    {          long p = 1, k = 1;        if (n - r < r) {            r = n - r;        }         if (r != 0) {            while (r > 0) {                p *= n;                k *= r;                 long m = __gcd(p, k);                                 p /= m;                k /= m;                 n--;                r--;            }                    }        else {            p = 1;        }                 //System.out.println(p);        return p;    }			public static long gcd(long a,long b)	{		if(a==0||b==0)			return a+b;		return gcd(b,(a%b));	}		public static long __gcd(long n1, long n2)    {        long gcd = 1;         for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0) {                gcd = i;            }        }        return gcd;    }		public static boolean prime(int n)	{		if(n<=2)			return true;				for(int i=2;i<=Math.sqrt(n);i++)		{			if(n%i==0)				return false;		}				return true;			}}  													     	 			 			 	
