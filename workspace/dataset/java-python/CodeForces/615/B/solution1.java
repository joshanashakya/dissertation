//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.Comparator; public class B { 	static class Pair{		long spikes=0;		long tail=0;		Pair(){					}		Pair(long s,long t){			spikes=s;			tail=t;		}	}    public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt();			int edges=sc.nextInt();						ArrayList<Integer> arr[]=new ArrayList[n+1];			for(int i=0;i<=n;i++) arr[i]=new ArrayList<>();			for(int i=0;i<edges;i++) {				int a=sc.nextInt();				int b=sc.nextInt();				arr[a].add(b);				arr[b].add(a);			}						long dp[]=new long[n+1];			Arrays.fill(dp, 1);			long maxm=0l;			for(int i=1;i<=n;i++) {				maxm =Math.max(maxm, dp[i]*((long)arr[i].size()));				for(int j=0;j<arr[i].size();j++) {					int ch=arr[i].get(j);					if(ch>i) {						dp[ch]=Math.max(dp[ch], dp[i]+1);					}				}			}														ans.append(maxm+"\n");		}			    System.out.print(ans);	}         static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
