import java.io.*;import java.util.*;import java.math.*; public class Main {     HashMap<Integer, List<Integer>> map = new HashMap<>();    long[] nbrCnt;    long[] dp;    long[] inDegree;    long res = 0;      public void solve() throws IOException{         int n = in.nextInt();        int m = in.nextInt();        nbrCnt = new long[n + 1];        dp = new long[n + 1];        inDegree = new long[n + 1];         for(int i = 1; i <= n; i++){            map.put(i, new ArrayList<>());        }         for(int i = 0; i < m; i++){            int u = in.nextInt();            int v = in.nextInt();            int min = Math.min(u, v);            int max = Math.max(u, v);            nbrCnt[min]++;            nbrCnt[max]++;            map.get(min).add(max);            inDegree[max]++;        }         for(int i = 1; i <= n; i++){            if(inDegree[i] == 0){                dp[i] = 1;            }        }         for(int i = 1; i <= n; i++){            List<Integer> nbrs = map.get(i);            for(int v: nbrs){                dp[v] = Math.max(dp[v], dp[i] + 1);            }        }         for(int i = 1; i <= n; i++){            res = Math.max(res, dp[i] * nbrCnt[i]);        }         out.println(res);        return;    }         public BigInteger gcdBigInt(BigInteger a, BigInteger b){         if(a.compareTo(BigInteger.valueOf(0L)) == 0){            return b;        }else{            return gcdBigInt(b.mod(a), a);        }     }      FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }     public class Pair<A, B>{        public A x;         public B y;         Pair(A x, B y){            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (o == null || getClass() != o.getClass()) return false;            Pair<?, ?> pair = (Pair<?, ?>) o;            if (!x.equals(pair.x)) return false;            return y.equals(pair.y);        }         @Override        public int hashCode() {            int result = x.hashCode();            result = 31 * result + y.hashCode();            return result;        }     }     class Tuple{        int x; int y; int z;        Tuple(int ix, int iy, int iz){            x = ix;            y = iy;            z = iz;        }    }}
