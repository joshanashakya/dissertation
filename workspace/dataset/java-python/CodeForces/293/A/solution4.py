import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")####################################################################################################################from collections import Counter# c=sorted((i,int(val))for i,val in enumerate(input().split()))import heapq# c=sorted((i,int(val))for i,val in enumerate(input().split()))# n = int(input())# ls = list(map(int, input().split()))# n, k = map(int, input().split())# n =int(input())# e=list(map(int, input().split()))from collections import Counter#print("\n".join(ls))#print(os.path.commonprefix(ls[0:2]))#for _ in range(int(input())):#for _ in range(int(input())):n=int(input())s=input()t=input()both=0only_a=0only_b=0for i in range(2*n):    if s[i]=="1" and t[i]=="1":        both+=1    else:        if s[i]=="1":            only_a+=1        if t[i]=="1":            only_b+=1a=0b=0for i in range(n):    if both:        a+=1        both-=1    elif only_a:        only_a-=1        a+=1    elif only_b:        only_b-=1    if both:        both-=1        b+=1    elif only_b:        b+=1        only_b-=1    elif only_a:        only_a-=1if a>b:    print("First")elif a==b:    print("Draw")else:    print("Second")    
