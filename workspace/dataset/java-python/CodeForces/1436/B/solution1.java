import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.InputMismatchException;public class Q1 { 	static class InputReader { 		private final InputStream stream;		private final byte[] buf = new byte[8192];		private int curChar, snumChars; 		public InputReader(InputStream st) {			this.stream = st;		} 		public int read() {			if (snumChars == -1)				throw new InputMismatchException();			if (curChar >= snumChars) {				curChar = 0;				try {					snumChars = stream.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (snumChars <= 0)					return -1;			}			return buf[curChar++];		} 		public int nextInt() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public long nextLong() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		} 		public int[] nextIntArray(int n) {			int a[] = new int[n];			for (int i = 0; i < n; i++) {				a[i] = nextInt();			}			return a;		} 		public String readString() {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public String nextLine() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndOfLine(c));			return res.toString();		} 		public boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		private boolean isEndOfLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	}	static int[][] num;	static ArrayList<Integer> primes;	static void SieveOfEratosthenes(){ 		int MAX_SIZE=100001;        boolean [] IsPrime = new boolean[MAX_SIZE];         Arrays.fill(IsPrime, true);                 for (int p = 2; p * p < MAX_SIZE; p++) {              if (IsPrime[p] == true){                        for (int i = p * p; i < MAX_SIZE; i += p)                     IsPrime[i] = false;             }         }         primes=new ArrayList<Integer>();        for (int p = 2; p < MAX_SIZE; p++)         if (IsPrime[p] == true)                 primes.add(p);    }	static void ans(int n){		for(int i=0;i<n;i++) {			Arrays.fill(num[i], 1);		}		if(primes.contains(n))return;		int temp=1,l=primes.size();		for(int i=0;i<l;i++) {			if(primes.get(i)<n)continue;			if(primes.get(i)>n-1 && !primes.contains(primes.get(i)-n+1)) {temp=primes.get(i)-n+1;break;}		}		for(int i=0;i<n;i++) {			num[i][i]=temp;		}	}	public static void main(String[] args) {		InputReader  sc=new InputReader(System.in);		PrintWriter out=new PrintWriter(System.out);		int n,t=sc.nextInt();		SieveOfEratosthenes();		num=new int[100][100];		while(t-->0) {			n=sc.nextInt();			ans(n);			for(int i=0;i<n;i++) {				for(int j=0;j<n;j++) {					out.print(num[i][j]+" ");				}				out.println();			}		}		out.flush();	} }
