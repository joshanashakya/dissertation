import java.util.Arrays;import java.util.Scanner; public class Main{		static class Road implements Comparable<Road>	{		int u = 0;		int v = 0;		int d = 0;				public Road(int u,int v,int d)		{			this.u = u;			this.v = v;			this.d = d;		} 		@Override		public int compareTo(Road o)		{			return this.d-o.d;		}			} 	public static void main(String[] args)	{		Scanner sc = new Scanner(System.in);				int n = sc.nextInt();		int m = sc.nextInt();				Road[] arr = new Road[m];		for(int i=0;i<m;i++)		{			arr[i] = new Road(sc.nextInt()-1,sc.nextInt()-1,sc.nextInt());		}		Arrays.sort(arr);				int max = 0;		UnionFind uf = new UnionFind(2*n);		boolean val = true;		for(int i=0;i<m;i++)		{			boolean ae = true;			for(int j=0;j<2*n;j++)			{				if(uf.size[uf.findSet(j)]%2==1)				{					ae = false;					break;				}			}						if(ae)			{				break;			}			else			{				if(i==m-1)					val=false;				int u = arr[i].u;				int v = arr[i].v;								uf.unionSet(u, v+n);								max = arr[i].d;			}					}				if(!val )			System.out.println(-1);		else			System.out.println(max);							}		static class UnionFind {		int[] p;		int[] size; 		public UnionFind(int n) {			p = new int[n];			size = new int[n];			Arrays.fill(size, 1);						for (int i = 0; i < n; i++) {				p[i] = i;			}		} 		int findSet(int i) {			return (p[i] == i) ? i : (p[i] = findSet(p[i]));		} 		boolean isSameSet(int i, int j) {			return findSet(i) == findSet(j);		} 		void unionSet(int x, int y) {			int i = findSet(x);			int j = findSet(y);						if(i==j)return;			if(size[i]<size[j])			{					p[i] = j;				size[j]+=size[i];			}			else			{				p[j] = i;				size[i]+=size[j];			}								}	}	}      	 		    	 					 	 	 		  	
