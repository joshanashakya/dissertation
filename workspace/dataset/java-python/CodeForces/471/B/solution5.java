import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Deque;import java.io.ObjectInputStream.GetField;import java.io.OutputStreamWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Scanner;import java.util.Set;import java.util.StringTokenizer;import java.util.TimeZone;import java.util.TreeMap;import java.text.*; public class Main {	static final int MAX = (int) 1e9;	static int n, pos1 = -1, pos2 = -1, pos3 = -1, rep;	static Pair arr[];	static BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out)); 	public static void main(String[] args) throws IOException {		FastReader in = new FastReader();		n = in.nextInt();		arr = new Pair[n];		for (int i = 0; i < n; i++)			arr[i] = new Pair(in.nextInt(), i + 1); 		Arrays.sort(arr); 		for (int i = 0; i < n; i++) {			if (pos3 != -1 || pos1 != -1 && pos2 != -1)				break; 			if (i < (n - 2) && arr[i].val == arr[i + 1].val && arr[i].val == arr[i + 2].val)				pos3 = i;			else if (i < (n - 1) && pos1 == -1 && arr[i].val == arr[i + 1].val)				pos1 = i;			else if (i < (n - 1) && pos2 == -1 && arr[i].val == arr[i + 1].val)				pos2 = i;		}		if (!(pos3 != -1 || pos2 != -1 && pos1 != -1))			out.write("NO\n");		else {			out.write("YES\n");			print();			if (pos3 != -1) {				swap(pos3, pos3 + 1);				print();				swap(pos3 + 1, pos3 + 2);				print();			} else {				swap(pos1, pos1 + 1);				print();				swap(pos2, pos2 + 1);				print();			}		} 		out.close(); 	} 	private static void print() throws IOException {		for (int i = 0; i < n; i++)			out.write(arr[i].idx + " ");		out.write("\n");	} 	private static void swap(int pos1, int pos2) {		rep = arr[pos1].idx;		arr[pos1].idx = arr[pos1 + 1].idx;		arr[pos1 + 1].idx = rep; 	}} class FastReader {	BufferedReader br;	StringTokenizer st; 	public FastReader() {		br = new BufferedReader(new InputStreamReader(System.in)); 	} 	public FastReader(File f) throws FileNotFoundException {		br = new BufferedReader(new FileReader(f));	} 	String next() {		while (st == null || !st.hasMoreElements()) {			try {				st = new StringTokenizer(br.readLine()); 			} catch (IOException e) {				e.printStackTrace();			} 		} 		return st.nextToken(); 	} 	int nextInt() { 		return Integer.parseInt(next());	} 	double nextDouble() { 		return Double.parseDouble(next());	} 	long nextLong() { 		return Long.parseLong(next());	} 	String nextLine() {		String str = "";		try {			str = br.readLine(); 		} catch (IOException e) { 			e.printStackTrace();		}		return str; 	} 	boolean ready() throws IOException {		return br.ready();	}} class Pair implements Comparable<Pair> {	int idx, val; 	public Pair(int v, int i) {		val = v;		idx = i; 	} 	@Override	public int compareTo(Pair o) {		return val - o.val;	} }
