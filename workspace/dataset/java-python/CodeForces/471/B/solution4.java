import java.util.*;import java.io.*;import java.math.*;public class Euler {	    public static void main(String[] args){        FastReader in = new FastReader();        PrintWriter o = new PrintWriter(System.out);                int n = in.nextInt();        ArrayList<Integer>[] arr = new ArrayList[2001];                for (int i = 1; i <= 2000; i++) {			arr[i] = new ArrayList<>();		}				for (int i = 1; i <= n; i++) {			int val = in.nextInt();			arr[val].add(i);		}				int x = 0;				for (int i = 1; i <= 2000; i++) {			if (arr[i].size() >= 2) {				x++;			}			if (arr[i].size() >= 3) {				x = 10;			}		}				if (x >= 2) {															if (x == 10) {				o.println("YES");				boolean b = true;								for (int i = 1; i <= 2000; i++) {					ArrayList<Integer> arr1 = arr[i];					for (int j = 0; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}				}				o.println();								for (int i = 1; i <= 2000; i++) {					ArrayList<Integer> arr1 = arr[i];					if (arr1.size() >= 3 && b) {						o.print(arr1.get(1) + " " + arr1.get(0) + " " + arr1.get(2) + " ");						b = false;						for (int j = 3; j < arr1.size(); j++) {							o.print(arr1.get(j) + " ");						}						continue;					}					for (int j = 0; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}				}				o.println();				b = true;				for (int i = 1; i <= 2000; i++) {					ArrayList<Integer> arr1 = arr[i];					if (arr1.size() >= 3 && b) {						o.print(arr1.get(2) + " " + arr1.get(0) + " " + arr1.get(1) + " ");						b = false;						for (int j = 3; j < arr1.size(); j++) {							o.print(arr1.get(j) + " ");						}						continue;					}					for (int j = 0; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}				}								o.close();				o.flush();				return;							}																																																																								o.println("YES");			boolean b = true;			boolean c = true;			for (int i = 1; i <= 2000; i++) {				ArrayList<Integer> arr1 = arr[i];				for (int j = 0; j < arr1.size(); j++) {					o.print(arr1.get(j) + " ");				}			}			o.println();			for (int i = 1; i <= 2000; i++) {				ArrayList<Integer> arr1 = arr[i];				if (arr1.size() >= 2 && b) {					o.print(arr1.get(1) + " " + arr1.get(0) + " ");					b = false;					for (int j = 2; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}					continue;				}									for (int j = 0; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}							}			o.println();			int y = 0;			for (int i = 1; i <= 2000; i++) {				ArrayList<Integer> arr1 = arr[i];				if (arr1.size() >= 2) {					y++;				}				if (y == 2 && c) {					o.print(arr1.get(1) + " " + arr1.get(0) + " ");					for (int j = 2; j < arr1.size(); j++) {						o.print(arr1.get(j) + " ");					}					c = false;					continue;				}				for (int j = 0; j < arr1.size(); j++) {					o.print(arr1.get(j) + " ");				}							}								} else {			o.println("NO");		}                        o.close();        o.flush();        return;    }       static final Random random=new Random();     static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}       	    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }                int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++) a[i] = nextLong();            return a;        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }  }
