import java.io.IOException;import java.util.*;import java.util.Arrays;import java.util.Scanner;Â public class Bit_year{	static class Pair	{		int l;		int r;		public Pair( int l, int r)		{			this.l=l;			this.r=r;		}	}	static List<Integer>[] adj;	static Pair[] adj_pairs;	static boolean[] visited;	 static Pair[] nodes;	    static boolean dfs(int u, int dest)	    {	    	visited[u]=true;	    	if(u==dest)return true;	    	boolean ans=false;	    	for(int v : adj[u])	    	{	    		if(!visited[v])	    			ans |= dfs(v,dest);	    	}	    	return ans;	    }	    static void add_node(int node, Pair newp)	    {	    	for(int i=1;i<=100;i++)	    	{	    		Pair p = adj_pairs[i];	    		if(p==null)break;	    		if((p.l > newp.l && p.l < newp.r) || p.r > newp.l  && p.r < newp.r) {	    			adj[i].add(node);	    		}	    		if((newp.l > p.l && newp.l < p.r) || newp.r > p.l && newp.r < p.r) {	    			adj[node].add(i);	    		}	    	}	    }	public static void main(String[] args) throws IOException {				Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		adj = new LinkedList[101];		adj_pairs = new Pair[101];		visited = new boolean[n+1];		nodes = new Pair[n+1];		for(int i=1;i<=100;i++)		{			adj[i]=new LinkedList();		}		int j=1,node=1;				while(j<=n)		{			int type=sc.nextInt();			int u = sc.nextInt();int v = sc.nextInt();			if(type==1) {				Pair p = new Pair(u,v);				adj_pairs[node]=p;				add_node(node,p);				node++;			}			else			{				Arrays.fill(visited, false);				System.out.println((dfs(u,v))?"YES":"NO");			}			j++;		}	}}
