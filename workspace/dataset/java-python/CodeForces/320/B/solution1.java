import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BPingPongEasyVersion solver = new BPingPongEasyVersion();        solver.solve(1, in, out);        out.close();    }     static class BPingPongEasyVersion {        static ArrayList<BPingPongEasyVersion.Pair> list;        static boolean[] visited;         public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            list = new ArrayList<>();            while (n > 0) {                int q = in.nextInt();                int a = in.nextInt();                int b = in.nextInt();                 if (q == 1)                    list.add(new BPingPongEasyVersion.Pair(a, b));                else {                    visited = new boolean[list.size()];                    if (path(a - 1, b - 1)) {                        out.println("YES");                        out.flush();                    } else {                        out.println("NO");                        out.flush();                    }                }                n--;            }        }         static boolean path(int i, int j) {            if (i == j) return true;            if (visited[i]) return false;            visited[i] = true;            int a = list.get(i).a;            int b = list.get(i).b;            if ((a > list.get(j).a && a < list.get(j).b) || (b > list.get(j).a && b < list.get(j).b)) {                return true;            }            for (int k = 0; k < list.size(); k++) {                if (k == i || k == j) continue;                BPingPongEasyVersion.Pair p = list.get(k);                if ((a > p.a && a < p.b) || (b > p.a && b < p.b)) {                    if (path(k, j)) {                        return true;                    }                }            }            return false;        }         static class Pair {            int a;            int b;             Pair(int a, int b) {                this.a = a;                this.b = b;            }         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }         public void flush() {            writer.flush();        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
