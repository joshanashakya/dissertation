import java.util.ArrayList;import java.util.LinkedList;import java.util.Queue;import java.util.Scanner; public class PingPong{    private static class Interval    {        int a;        int b;        int num;        boolean visited;        ArrayList<Interval> neighbors;         public Interval(int a, int b, int num)        {            this.a = a;            this.b = b;            this.num = num;            this.visited = true;            neighbors = new ArrayList<>();        }         public void findNeighbors(ArrayList<Interval> intervals)        {            neighbors = new ArrayList<>();            for (int i = 0; i < intervals.size(); i++)            {                if(i != num)                {                    Interval thisInterval = intervals.get(i);                    int c = thisInterval.a;                    int d = thisInterval.b;                    if((c < a && a < d) || (c < b && b < d))                    {                        neighbors.add(thisInterval);                    }                }            }        }    }     public static ArrayList<Interval> intervals;     public static void calcNeigh()    {        for(Interval intv : intervals)        {            intv.visited = false;            intv.findNeighbors(intervals);        }    }     public static boolean hasPath(Interval int1, Interval int2)    {        Queue<Interval> toCheck = new LinkedList<>();        toCheck.add(int1);        while(!toCheck.isEmpty())        {            Interval curInt = toCheck.poll();            if(!curInt.visited)            {                curInt.visited = true;                if(curInt.neighbors.contains(int2))                {                    return true;                }                for(Interval tempInt : curInt.neighbors)                {                    if(!tempInt.visited)                    {                        toCheck.add(tempInt);                    }                }            }        }        return false;    }     public static void main(String[] args)    {        Scanner input = new Scanner(System.in);        int lines = input.nextInt();        intervals = new ArrayList<>();         for (int i = 0; i < lines; i++)        {            int type = input.nextInt();            if(type == 1)            {                int a = input.nextInt();                int b = input.nextInt();                intervals.add(new Interval(a, b, intervals.size()));            }            else if(type == 2)            {                calcNeigh();                Interval int1 = intervals.get(input.nextInt() - 1);                Interval int2 = intervals.get(input.nextInt() - 1);                boolean path = hasPath(int1, int2);                if(path)                {                    System.out.println("YES");                }                else                {                    System.out.println("NO");                }            }        }    }}
