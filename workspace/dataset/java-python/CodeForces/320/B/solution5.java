import java.util.*; public class Main{	public static void main(String[] args) throws Exception	{	    Scanner in = new Scanner(System.in); 	    int q = in.nextInt(); 		ArrayList<Interval> intervals = new ArrayList<>();		int numIntervals = 0; 		for(int counter = 0; counter < q; counter++)		{			if(in.nextInt() == 1)			{				Interval newInterval = new Interval(in.nextInt(), in.nextInt(), ++numIntervals);				for(Interval i : intervals)				{					i.addInterval(newInterval);					newInterval.addInterval(i);				}				intervals.add(newInterval);			}			else			{				int first = in.nextInt()-1;				int goal = in.nextInt()-1; 				System.out.println(intervals.get(first).contains(intervals.get(goal)) ? "YES" : "NO");			}		}	} 	private static class Interval	{		int a, b, id;		ArrayList<Interval> paths; 		public Interval(int a, int b, int id)		{			this.a = a;			this.b = b;			this.id = id; 			paths = new ArrayList<>();		} 		public void addInterval(Interval i)		{			if(i.a < this.a && this.a < i.b || i.a < this.b && this.b < i.b)			{				paths.add(i);//				System.out.printf("Added %d,%d to %d,%d\n", i.a, i.b, this.a, this.b);			}		} 		public boolean contains(Interval i)		{			Queue<Interval> q = new LinkedList<>();			Set<Interval> visited = new HashSet<>();			q.add(this); 			while(!q.isEmpty())			{				Interval cur = q.remove();				visited.add(cur); 				if(i.id == cur.id)					return true; 				for(Interval toAdd : cur.paths)				{					if(!visited.contains(toAdd))						q.add(toAdd);				}			} 			return false;		}	}}
