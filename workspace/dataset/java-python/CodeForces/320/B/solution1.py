def addEdges(adj, nodes):    startNewInterval, endNewInterval = nodes[-1]    for i in range(1, len(nodes) - 1):        startOther, endOther = nodes[i]        if startOther < startNewInterval < endOther or startOther < endNewInterval < endOther:            adj[len(nodes) - 1].add(i)        if startNewInterval < startOther < endNewInterval or startNewInterval < endOther < endNewInterval:            adj[i].add(len(nodes) - 1)Â def dfs(adj, start, dest):    visited = [False] * len(adj)    dfsStack = [start]    while dfsStack:        cur = dfsStack.pop()        if visited[cur]:            continue        if cur == dest:            return True        visited[cur] = True        dfsStack.extend(list(adj[cur]))    return False            inputs = int(input())nodes = [None]adj = [None]for _ in range(inputs):    queryType, start, end = map(int, input().split())    if queryType == 1:        # add interval        adj.append(set())        nodes.append((start, end))        addEdges(adj, nodes)    else:        # query connection        node1 = start        node2 = end        isConnected = dfs(adj, node1, node2)        print("YES" if isConnected else "NO")        
