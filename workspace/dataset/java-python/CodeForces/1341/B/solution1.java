import java.io.*;import java.util.*; public class Main {     public static void main(String[] args) throws IOException {        FastReader in = new FastReader(System.in);        PrintWriter pw = new PrintWriter(System.out);        int t = in.nextInt();        for (int t1 = 0; t1 < t; t1++) {            int n = in.nextInt(), k = in.nextInt();            int[] arr = new int[n + 2];            for (int i = 1; i <= n; i++) arr[i] = in.nextInt();            pw.println(solve(arr, n, k));        }        pw.close();    }     static String solve(int[] arr, int n, int k) {        int res = 0;        int[] freq = new int[n + 2], cnt = new int[n + 2];        for (int i = 2; i <= n - 1; i++) {            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {                cnt[i]++;                freq[i]++;            }         }        //   debug(freq);        for (int i = 2; i <= n; i++) {            freq[i] += freq[i - 1];        }        int index = 1;        for (int i = 1; (i + k - 1) <= n; i++) {            int temp = freq[i + k - 1] - freq[i];            if (cnt[i + k - 1] > 0) temp--;            if (res < temp) {                res = temp;                index = i;            }        }        return res + 1 + " " + index;    }     static boolean valid(int x, int y, int n, int m) {        return x >= 0 && y >= 0 && x < n && y < m;    }     static void debug(Object... obj) {        System.err.println(Arrays.deepToString(obj));    }     static class FastReader {        InputStream is;        private byte[] inbuf = new byte[1024];        private int lenbuf = 0, ptrbuf = 0;         public FastReader(InputStream is) {            this.is = is;        }         public int readByte() {            if (lenbuf == -1) throw new InputMismatchException();            if (ptrbuf >= lenbuf) {                ptrbuf = 0;                try {                    lenbuf = is.read(inbuf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (lenbuf <= 0) return -1;            }            return inbuf[ptrbuf++];        }         public boolean isSpaceChar(int c) {            return !(c >= 33 && c <= 126);        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }         public int skip() {            int b;            while ((b = readByte()) != -1 && isSpaceChar(b)) ;            return b;        }         public String next() {            int b = skip();            StringBuilder sb = new StringBuilder();            while (!(isSpaceChar(b))) {                sb.appendCodePoint(b);                b = readByte();            }            return sb.toString();        }          public String nextLine() {            int c = skip();            StringBuilder sb = new StringBuilder();            while (!isEndOfLine(c)) {                sb.appendCodePoint(c);                c = readByte();            }            return sb.toString();        }         public int nextInt() {            int num = 0, b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }            while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public long nextLong() {            long num = 0;            int b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }             while (true) {                if (b >= '0' && b <= '9') {                    num = (num << 3) + (num << 1) + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }         public double nextDouble() {            return Double.parseDouble(next());        }         public char[] next(int n) {            char[] buf = new char[n];            int b = skip(), p = 0;            while (p < n && !(isSpaceChar(b))) {                buf[p++] = (char) b;                b = readByte();            }            return n == p ? buf : Arrays.copyOf(buf, p);        }         public char readChar() {            return (char) skip();        }    }}		   		  	  			 	  	 	   	
