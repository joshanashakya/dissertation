import java.io.*; import java.util.*; public class Main {	static final long INF = (long) 1e18; // don't increase, avoid overflow	static ArrayList<Edge>[] adjList;	static int V, parent[]; 	static class Edge implements Comparable<Edge> {		int node;		long cost;        boolean f;		Edge(int a, long b,boolean x) {			node = a;			cost = b;			f=x;		}		public int compareTo(Edge e) {			if(cost!=e.cost)			return Long.compare(cost, e.cost);			int t1=0,t2=0;			if(!f)t1=1;			if(!e.f)t2=1;return t1-t2;		}	}	static PrintWriter pw = new PrintWriter(System.out); 	public static void main(String[] args) throws IOException, Exception {		Scanner sc = new Scanner(System.in);		V = sc.nextInt();		int m = sc.nextInt();		int k=sc.nextInt();		adjList = new ArrayList[V + 1];		for (int i = 0; i <= V; i++)			adjList[i] = new ArrayList<>();		for (int i = 0; i < m; i++) {			int a = sc.nextInt();			int b = sc.nextInt();			int w = sc.nextInt();			adjList[a].add(new Edge(b, w,true));			adjList[b].add(new Edge(a, w,true));		}		int res=k;		for(int i=0;i<k;i++) {			int a = sc.nextInt();			int b = sc.nextInt();			adjList[1].add(new Edge(a, b,false));			adjList[a].add(new Edge(1, b,false));		}		PriorityQueue<Edge>que=new PriorityQueue<>();		que.add(new Edge(1,0,true));		boolean sel[]=new boolean[V+1];		long[]dist=new long[V+1];		Arrays.fill(dist, INF);		dist[1]=0;		while(!que.isEmpty()) {			Edge x=que.poll();			if(sel[x.node])continue;			sel[x.node]=true;			if(!x.f)res--;			for(Edge to:adjList[x.node]) {				if(dist[x.node]+to.cost<=dist[to.node]) {					dist[to.node]=dist[x.node]+to.cost;					que.add(new Edge(to.node,x.cost+to.cost,to.f));				}			}		}		pw.println(res);		pw.close(); 	} 	static void print(int n, int[] p) {		if (n != 1)			print(p[n], p);		pw.print(n + " ");	} 		static class Scanner { 		StringTokenizer st; 		BufferedReader br; 		public Scanner(InputStream s) { 			br = new BufferedReader(new InputStreamReader(s)); 		} 		public Scanner(String file) throws FileNotFoundException { 			br = new BufferedReader(new FileReader(file)); 		} 		public String next() throws IOException { 			while (st == null || !st.hasMoreTokens()) 				st = new StringTokenizer(br.readLine()); 			return st.nextToken(); 		} 		public int nextInt() throws IOException { 			return Integer.parseInt(next()); 		} 		public long nextLong() throws IOException { 			return Long.parseLong(next()); 		} 		public String nextLine() throws IOException { 			return br.readLine(); 		} 		public double nextDouble() throws IOException { 			return Double.parseDouble(next()); 		} 		public boolean ready() throws IOException { 			return br.ready(); 		} 	} }
