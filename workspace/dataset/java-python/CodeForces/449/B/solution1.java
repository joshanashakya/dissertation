/* * akshaygupta26 */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.*;public class B { 	static class Pair{		int dest;		long wt;		int type=-1;		Pair(){}		Pair(int d,long w){			dest=d;			wt=w;		}		Pair(int d,long w,int t){			dest=d;			wt=w;			type=t;		}	}		static class customSort implements Comparator<Pair>{		public  int compare(Pair a,Pair b) {			if(a.wt<b.wt) return -1;			else if(a.wt>b.wt) return 1;			if(a.type == -1) return -1;			if(b.type == -1) return 1;			return 0;		}	}	static long dist[];	static ArrayList<Pair> train_cities;//	static HashSet<Integer> tc;    public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int n=sc.nextInt(),m=sc.nextInt(),k=sc.nextInt();			ArrayList<Pair> arr[]=new ArrayList[n+1];			train_cities=new ArrayList<>(k);//			tc=new HashSet<>(k);			for(int i=0;i<=n;i++) arr[i]=new ArrayList<>();			dist=new long[n+1];Arrays.fill(dist, Long.MAX_VALUE);			for(int i=0;i<m;i++) {				int a=sc.nextInt();				int b=sc.nextInt();				long wt=sc.nextLong();				arr[a].add(new Pair(b,wt));				arr[b].add(new Pair(a,wt));			}									for(int i=0;i<k;i++) {				int b=sc.nextInt();				long wt=sc.nextLong();				train_cities.add(new Pair(b,wt,1));//				tc.add(b);			}						int closed=djikstra(1,n,arr); 			ans.append(closed+"\n");		}			    System.out.print(ans);	}             static int djikstra(int source,int n,ArrayList<Pair> arr[]) {//    	int needed=0;    	    	PriorityQueue<Pair> pq=new PriorityQueue<>(new customSort());    	pq.add(new Pair(source,0));    	    	for(Pair x:train_cities) {    		pq.add(new Pair(x.dest,x.wt,x.dest));    	}    	HashSet<Integer> needed=new HashSet<>();    	while(!pq.isEmpty()) {    		Pair y=pq.poll();    		int nd=y.dest;long wt=y.wt;int type=y.type;    		    		if(dist[nd]<=wt) continue;    		dist[nd]=wt;    		if(type != -1) needed.add(type);    		    		for(Pair x:arr[nd]) {    			int ch=x.dest;long wtc=x.wt;    			if(dist[ch]>wt+wtc) {    				pq.add(new Pair(ch,wt+wtc));    			}    		}    	}    	int cnt=0;    	boolean vis[]=new boolean[n+1];    	for(Pair x:train_cities) {    		int nd=x.dest;    		if(needed.contains(nd) && !vis[nd]) {    			vis[nd]=true;    			++cnt;    		}    	}    	    	    	    	    	return train_cities.size()-cnt;    }        static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
