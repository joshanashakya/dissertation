import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;      int N, M, K;     List<Edge>[] adj;    void run(FastScanner in, PrintWriter out) {         N = in.nextInt();        M = in.nextInt();        K = in.nextInt();         adj = new List[N+1];        for (int i = 0; i < adj.length; i++) adj[i] = new ArrayList<>();        for (int i = 0; i < M; i++) {            int u = in.nextInt();            int v = in.nextInt();            int w = in.nextInt();            adj[u].add(new Edge(v, w, false));            adj[v].add(new Edge(u, w, false));        }         while (K-- > 0) {            int v = in.nextInt();            int w = in.nextInt();            adj[1].add(new Edge(v, w, true));        }         long[] d = new long[N+1];        Arrays.fill(d, -1);         int cnt = 0;        PriorityQueue<long[]> pq = new PriorityQueue<>(10, (a, b) -> {            // process nondeletable first            if (a[1] == b[1]) return Long.compare(a[2], b[2]);            return Long.compare(a[1], b[1]);        });        pq.offer(new long[] {1, 0, 0});         while (!pq.isEmpty()) {             long[] top = pq.poll();            int u = (int)top[0];            long dist = top[1];            boolean isDeletable = top[2] == 1;             if (d[u] != -1) {                if (isDeletable) cnt++;                continue;            }            d[u] = dist;             for (Edge e : adj[u]) {                pq.offer(new long[] {e.v, dist+e.w, e.isTrainRoute ? 1 : 0});            }        }         out.println(cnt);    }     class Edge {        int v;        int w;        boolean isTrainRoute;        Edge(int v, int w, boolean isTrainRoute) {            this.v = v;            this.w = w;            this.isTrainRoute = isTrainRoute;        }    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
