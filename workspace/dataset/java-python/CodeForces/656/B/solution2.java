import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.io.IOException;import java.io.PrintWriter;import java.util.Arrays;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.PriorityQueue;import java.util.Random;import java.util.StringTokenizer;import java.util.TreeSet;import java.util.TreeMap; import static java.lang.Math.abs;import static java.lang.Math.max;import static java.lang.Math.min;import static java.lang.Math.round;import static java.lang.Math.sqrt;import static java.util.Arrays.copyOf;import static java.util.Arrays.fill;import static java.util.Arrays.sort;import static java.util.Collections.reverse;import static java.util.Collections.reverseOrder;import static java.util.Collections.sort; public class Main {    private FastScanner in;    private PrintWriter out;     private void solve() throws IOException {        int n = in.nextInt();        int[] m = new int[n], r = new int[n];        for (int i = 0; i < n; i++) {            m[i] = in.nextInt();        }        for (int i = 0; i < n; i++) {            r[i] = in.nextInt();        }        int cnt = 0;        boolean no;        for (int d = 0; d < 1e7; d++) {            no = false;            for (int i = 0; i < n; i++) {                no |= d % m[i] == r[i];            }            if (no)                cnt++;        }        out.print(cnt / 1e7);    }     private void solveA() throws IOException {     }     private void solveB() throws IOException {     }     private void solveC() throws IOException {     }     private void solveD() throws IOException {     }     private void solveE() throws IOException {     }     class FastScanner {        StringTokenizer st;        BufferedReader br;         FastScanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         boolean hasNext() throws IOException {            return br.ready() || (st != null && st.hasMoreTokens());        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }         String nextLine() throws IOException {            return br.readLine();        }         boolean hasNextLine() throws IOException {            return br.ready();        }    }     private void run() throws IOException {        in = new FastScanner(System.in); // new FastScanner(new FileInputStream(".in"));        out = new PrintWriter(System.out); // new PrintWriter(new FileOutputStream(".out"));         solve();         out.flush();        out.close();    }     public static void main(String[] args) throws IOException {        new Main().run();    }}
