import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer; public class Scrambled_656B { 	static int gcd(int a, int b) { 		return b == 0 ? a : gcd(b, a % b);	} 	static int lcm(int a, int b) {				return a * b / gcd(a, b);	} 	public static void main(String[] args) throws IOException { 		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out); 		int n = sc.nextInt();		int lcm = 1;		int mod [] = new int [n];		int rem [] = new int [n];		for(int i = 0; i < n; i++){			mod[i] = sc.nextInt();			lcm = lcm(lcm,mod[i]);		}		for(int i = 0; i < n; i++)			rem[i] = sc.nextInt();				int count = 0;		for(int i = 0; i < lcm; i++){			boolean found = false;			for(int j = 0; j < n; j++)				if(i % mod[j] == rem[j]){					found = true;					break;				}			if(found)				count++;		}				out.println(1.0*count / lcm);		 		out.flush();		out.close();	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public double nextDouble() throws IOException {			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if (x.charAt(0) == '-') {				neg = true;				start++;			}			for (int i = start; i < x.length(); i++)				if (x.charAt(i) == '.') {					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				} else {					sb.append(x.charAt(i));					if (dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg ? -1 : 1);		} 		public boolean ready() throws IOException {			return br.ready();		} 	} }
