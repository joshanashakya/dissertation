import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigDecimal;import java.math.BigInteger;import java.util.StringTokenizer; public class Main{    public static void main(String[] args)// throws FileNotFoundException     {    	InputReader in=new InputReader();    	PrintWriter out=new PrintWriter(System.out);//    	Scanner in=new Scanner(new File("permutations.in"));//      PrintWriter out = new PrintWriter(new File("permutations.out"));    	while(in.hasNext())    	{    		int n=in.nextInt();    		int m=in.nextInt();    		m--;    		for(int i=0;i<n;i++)    		{    			int s=in.nextInt();    			int f=in.nextInt();    			int t=in.nextInt();    			if(s==f)    				out.println(t);    			else     			{    				int tot=t/2/m;    				int curt=s-1+tot*2*m;    				int nowt=2*m-curt+tot*4*m;    				while(curt<t)    					curt+=2*m;    				while(curt>=t+2*m)    					curt-=2*m;    				while(nowt<t)    					nowt+=2*m;    				while(nowt>=t+2*m)    					nowt-=2*m;    				int ans=Math.min(curt, nowt);    				tot=ans/2/m;    				curt=f-1+tot*2*m;    				nowt=2*m-curt+tot*4*m;    				while(curt<ans)    					curt+=2*m;    				while(curt>=ans+2*m)    					curt-=2*m;    				while(nowt<ans)    					nowt+=2*m;    				while(nowt>=ans+2*m)    					nowt-=2*m;    				out.println(Math.min(curt, nowt));    			}	    		}    	}    	out.close();    }} class InputReader{    BufferedReader buf;    StringTokenizer tok;    InputReader()    {        buf = new BufferedReader(new InputStreamReader(System.in));    }    boolean hasNext()    {        while(tok == null || !tok.hasMoreElements())         {            try            {                tok = new StringTokenizer(buf.readLine());            }             catch(Exception e)             {                return false;            }        }        return true;    }    String next()    {        if(hasNext())             return tok.nextToken();        return null;    }    int nextInt()    {        return Integer.parseInt(next());    }    long nextLong()    {        return Long.parseLong(next());    }    double nextDouble()    {        return Double.parseDouble(next());    }    BigInteger nextBigInteger()    {        return new BigInteger(next());    }    BigDecimal nextBigDecimal()    {        return new BigDecimal(next());    }}      	 		 		 		 		 	   				
