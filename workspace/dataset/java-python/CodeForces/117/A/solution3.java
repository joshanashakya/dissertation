import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer; public class Aorangy1 { 	/**	 * @param args	 */	static int m; 	static long f(long v, int floor) {		if(floor == 1){			return (v-1)*(m-1)*2;		}		if(floor == m){			return (m-1)+((v-1)*(m-1)*2);		}		long ret = 0;		long even = v / 2;		long odd = v / 2;		if (v % 2 == 0)			even--;		long sumEven = even * (m - floor) * 2;		long sumOdd = odd * (floor - 1) * 2;		sumOdd = sumOdd - (floor - 1);		ret = sumEven + sumOdd;		return ret;	} 	public static void main(String[] args) throws IOException {//		for(int i= 1 ; i < 10 ; i++){//			m = 7;//			System.out.println(i+" "+f(i,1));		StringBuffer sb = new StringBuffer("");//		}		skp();		int n = nextInt();		m = nextInt();		for (int i = 0; i < n; i++) {			skp();			int start = nextInt();			int finish = nextInt(); 			int time = nextInt();			if(start == finish) {	//			System.out.println(time);				sb.append(time).append('\n');				continue;			}			long lo = 1;			long hi = 1000000;			for (int j = 0; j < 50; j++) {				long mid = lo + (hi - lo) / 2;				if (f(mid,start) >= time) {					hi = mid;				} else					lo = mid + 1; 			}			long newTime = f(lo,start);			lo = 1;			hi = 1000000;			for (int j = 0; j < 50; j++) {				long mid = lo + (hi - lo) / 2;				if (f(mid,finish) >= newTime) {					hi = mid;				} else					lo = mid + 1; 			}			sb.append(f(lo,finish)+"\n");					}		System.out.println(sb.substring(0,sb.length()-1)); 	} 	static boolean skp() throws IOException {		String line = r.readLine();		if (line == null)			return false;		tkn = new StringTokenizer(line);		return true;	} 	static int nextInt() {		return Integer.parseInt(tkn.nextToken());	} 	static int readInt() throws NumberFormatException, IOException {		return Integer.parseInt(r.readLine());	} 	static long nextLong() {		return Long.parseLong(tkn.nextToken());	} 	static long readLong() throws NumberFormatException, IOException {		return Long.parseLong(r.readLine());	} 	static double nextDouble() { 		return Double.parseDouble(tkn.nextToken());	} 	static BufferedReader r = new BufferedReader(new InputStreamReader(			System.in));	static StringTokenizer tkn;}
