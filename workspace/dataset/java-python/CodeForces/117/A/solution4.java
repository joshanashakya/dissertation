//package codeforces; import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.Closeable;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.Comparator;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.StringTokenizer; public class A implements Closeable {    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));    PrintWriter writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));     A() throws IOException {//        reader = new BufferedReader(new FileReader("input.txt"));//        writer = new PrintWriter(new FileWriter("output.txt"));    }     StringTokenizer stringTokenizer;     String next() throws IOException {        while (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {            stringTokenizer = new StringTokenizer(reader.readLine());        }        return stringTokenizer.nextToken();    }     int nextInt() throws IOException {        return Integer.parseInt(next());    }     long nextLong() throws IOException {        return Long.parseLong(next());    }     double nextDouble() throws IOException {        return Double.parseDouble(next());    }     private int MOD = 1000 * 1000 * 1000 + 7;     int sum(int a, int b) {        a += b;        return a >= MOD ? a - MOD : a;    }     int product(int a, int b) {        return (int) (1l * a * b % MOD);    }     int pow(int x, int k) {        int result = 1;        while (k > 0) {            if (k % 2 == 1) {                result = product(result, x);            }            x = product(x, x);            k /= 2;        }        return result;    }     int inv(int x) {        return pow(x, MOD - 2);    }     void solve() throws IOException {        int n = nextInt(), m = nextInt();        for(int i = 0; i < n; i++) {            int s = nextInt(), f = nextInt();            int t = nextInt();            if(s == f) {                writer.println(t);                continue;            }            int t0 = t % (2 * m - 2);            int s0 = t0 < m - 1 ? t0 + 1 : 2 * m - 1 - t0;            int dir = t0 < m - 1 ? 1 : -1;            int dt = 0;            if(s0 != s) {                if(Integer.signum(s - s0) != dir) {                    if(dir == 1) {                        dt += m - s0;                        s0 = m;                    } else {                        dt += s0 - 1;                        s0 = 1;                    }                    dir = -dir;                }                dt += (s - s0) * dir;            }            if(Integer.signum(f - s) != dir) {                if(dir == 1) {                    dt += m - s;                    s = m;                } else {                    dt += s - 1;                    s = 1;                }                dir = -dir;            }            dt += (f - s) * dir;            writer.println(t + dt);        }    }     public static void main(String[] args) throws IOException {        try (A a = new A()) {            a.solve();        }    }     @Override    public void close() throws IOException {        reader.close();        writer.close();    }}
