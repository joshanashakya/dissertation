import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int N;    int Q;    List<Integer>[] adj;     int[] centroids;    int[] sz;    int[] parent;    boolean[] visited;     void run(FastScanner in, PrintWriter out) {        N = in.nextInt();        Q = in.nextInt();         adj = new List[N+1];        centroids = new int[N+1];        parent = new int[N+1];        sz = new int[N+1];         for (int i = 0; i < adj.length; i++) adj[i] = new ArrayList<>();         for(int i = 2; i <= N; i++) {            int u = in.nextInt();            int v = i;            adj[u].add(v);        }         getsz(1, -1);        dfsCentroid(1);         while (Q-- > 0) {            int t = in.nextInt();            out.println(centroids[t]);        }    }     void getsz(int u, int p) {        sz[u] = 1;        parent[u] = p;         for (int v : adj[u]) {            getsz(v, u);            sz[u] += sz[v];        }    }      void dfsCentroid(int u) {        if (sz[u] == 1) {            centroids[u] = u;            return;        }         int ptr = 0;        for (int v : adj[u]) {            dfsCentroid(v);            // my centroid lies on the heavy child            if (sz[ptr] < sz[v]) ptr = v;        }         int c = centroids[ptr];        while (!isCentroid(u, c)) {            c = parent[c];        }        centroids[u] = c;    }     boolean isCentroid(int u, int c) {        return sz[c] >= (sz[u]-sz[c]);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
