//created by Whiplash99import java.io.*;import java.util.*;public class A{    private static ArrayDeque<Integer>[] edge;    private static int[] size, parent, max, maxNode, ans;     private static int lift(int u, int N)    {        if(N-size[u]>N/2) return lift(parent[u], N);        return u;    }    private static void solve(int u)    {        if(max[u]==0) return;         for(int v:edge[u]) solve(v);        ans[u]=lift(ans[maxNode[u]], size[u]);    }    private static int DFS(int u)    {        size[u]=1; ans[u]=u;        for(int v:edge[u])        {            int tmp=DFS(v);            size[u]+=tmp;            parent[v]=u;             if(tmp>max[u])            {                max[u]=tmp;                maxNode[u]=v;            }        }        return size[u];    }    public static void main(String[] args) throws IOException    {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         String[] s=br.readLine().trim().split(" ");        N=Integer.parseInt(s[0]);        int Q=Integer.parseInt(s[1]);         size=new int[N]; max=new int[N];        maxNode=new int[N]; ans=new int[N];        parent=new int[N]; edge=new ArrayDeque[N];        for(i=0;i<N;i++) edge[i]=new ArrayDeque<>();         s=br.readLine().trim().split(" ");        for(i=0;i<N-1;i++)        {            int u=Integer.parseInt(s[i])-1;            edge[u].add(i+1);        }         DFS(0);        solve(0);         StringBuilder sb=new StringBuilder();        while (Q-->0)        {            int u=Integer.parseInt(br.readLine().trim())-1;            sb.append(ans[u]+1).append("\n");        }        System.out.println(sb);    }}
