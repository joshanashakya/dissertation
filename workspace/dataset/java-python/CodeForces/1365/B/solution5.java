import java.awt.Desktop; import java.io.BufferedReader;  import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;import java.sql.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeSet;import java.util.Vector;   public  class codechef3 {static class comp implements Comparator<Integer>{ 	@Override	public int compare(Integer o1, Integer o2) {		if(Math.abs(o1)>Math.abs(o2))			return -1;		else return 1;		} 		}	    		 static class FastReader		    {BufferedReader br; 		        StringTokenizer st; 		 public FastReader() 		        {  br = new BufferedReader(new		                     InputStreamReader(System.in)); 		        } 		  		       String next() 		        { 		            while (st == null || !st.hasMoreElements()) 		            { 		                try		                { 		                    st = new StringTokenizer(br.readLine()); 		                } 		                catch (IOException  e) 		                { 		                    e.printStackTrace(); 		                } 		            } 		            return st.nextToken(); 		        } 		  		        int nextInt() 		        { 		            return Integer.parseInt(next()); 		        } 		  		        long nextLong() 		        { 		            return Long.parseLong(next()); 		        } 		  		        double nextDouble() 		        { 		            return Double.parseDouble(next()); 		        } 		  		        String nextLine() 		        { 		            String str = ""; 		            try		            { 		                str = br.readLine(); 		            } 		            catch (IOException e) 		            { 		                e.printStackTrace(); 		            } 		            return str; 		        } 		    } 				 //gcd of two number		 		    public static int gcd(int a, int b)		    {		      if (b == 0)		        return a;		      return gcd(b, a % b); 		    }		    		 //--------------------------------------------------------------------------------------------		 		 //lcm of two number		 static int x;		    public static int lcm(int a, int b)		    {		        return (a / gcd(a, b)) * b;		    }		 		  //-------------------------------------------------------------------------------------------		    public static void main(String[] args) 		    {		    	FastReader s=new FastReader();	            int t=s.nextInt();		        StringBuffer s2=new StringBuffer();		    	while(t-->0)		    	{		    		int n=s.nextInt();		    		int[] a=new int[n];		    		int[] b=new int[n];		    		int[] c=new int[n];		    		for(int i=0;i<n;i++) {		    			a[i]=s.nextInt();		    		  b[i]=a[i];		    		}		    				    		for(int i=0;i<n;i++)		    			c[i]=s.nextInt();		    				    		Arrays.sort(b);		    				    		//System.out.println();		    				    		int flag=0;		    		int flag1=0;		    		int flag0=0;		    		for(int i=0;i<n;i++)		    		{		    			if(a[i]!=b[i])		    				flag=1;		    			if(c[i]==1)		    				flag1=1;		    			if(c[i]==0)		    				flag0=1;		    						    			//System.out.println(flag+" "+flag1+" "+flag0);		    					    		}		    				    				    		if(flag==0||(flag==1&&flag1==1&&flag0==1))		    			System.out.println("Yes");		    		else System.out.println("No");		    				    				    				    					    				    	}		    	}}
