import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;// import java.math.BigInteger;import java.util.*; public class Solution {    public static void main(String[] args) {        int T = in.nextInt();    TEST:        while (T-- > 0) {            int n = in.nextInt();            int[] a = in.readIntArray(n);            int[] cnt = new int[2];            for (int i = 0; i < n; i++) {                cnt[in.nextInt()]++;            }            if (cnt[0] > 0 && cnt[1] > 0) {                out.println("Yes");                continue TEST;            }            for (int i = 0, prev = 0; i < n; i++) {                if (prev > a[i]) {                    out.println("No");                    continue TEST;                }                prev = a[i];            }            out.println("Yes");        }        out.flush();    }        // Handle I/O    static int MOD = (int) (1e9 + 7);    static FastScanner in = new FastScanner();    static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));    static class FastScanner {        BufferedReader br;        StringTokenizer st;        public FastScanner() {            br = new BufferedReader(new InputStreamReader(System.in));            st = null;        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readIntArray(int size) {            int[] arr = new int[size];            for (int i = 0; i < size; i++) {                arr[i] = nextInt();            }            return arr;        }         long nextLong() {            return Long.parseLong(next());        }         long[] readLongArray(int size) {            long[] arr = new long[size];            for (int i = 0; i < size; i++) {                arr[i] = nextLong();            }            return arr;        }         double nextDouble() {            return Double.parseDouble(next());        }         double[] readDoubleArray(int size) {            double[] arr = new double[size];            for (int i = 0; i < size; i++) {                arr[i] = nextDouble();            }            return arr;        }    }}
