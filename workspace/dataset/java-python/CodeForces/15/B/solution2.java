import java.io.*;import java.util.*; public class CodeForces {    public static void main(String[] args) {        FastIO io = new FastIO();         int tests = io.nextInt();         for (int test = 1; test <= tests; test++) {             long cols = io.nextLong();            long rows = io.nextLong();             long x1 = io.nextLong();            long y1 = io.nextLong();            long x2 = io.nextLong();            long y2 = io.nextLong();             long dx = Math.abs(x1 - x2);            long dy = Math.abs(y1 - y2);             long possible = Math.abs((cols - dx) * (rows - dy) * 2);             long total = rows * cols;             long dupW = Math.max(0, cols - dx - dx);            long dupH = Math.max(0, rows - dy - dy);            long duplicates = dupW * dupH;            io.println(total - possible + duplicates);        }         io.close();    }     static class FastIO extends PrintWriter {        BufferedReader br;        StringTokenizer st;         public FastIO() {            super(new BufferedOutputStream(System.out));            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextToken() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {            try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return "";        }    }}
