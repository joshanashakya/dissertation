import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {		InputReader in = new InputReader(new BufferedInputStream(System.in));		PrintWriter out = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(System.out)));		TaskB solver = new TaskB();		long t1 = System.currentTimeMillis();		solver.solve(1, in, out);		out.flush();		long t2 = System.currentTimeMillis();//		System.err.println(t2 - t1);		out.close(); 	}} class Seg implements Comparable<Seg> {	double a;	double b; 	public Seg(double a, double b) {		this.a = a;		this.b = b;	} 	public int compareTo(Seg t) {		return Double.compare(a, t.a);	} } class TaskB { 	int id[];	int sz[];	double eps = 1e-10;	long INF = (long) 1e15; 	void solve(int testNumber, InputReader in, PrintWriter pw) {		int n = in.nextInt();		double t = in.nextInt();		Seg[] ints = new Seg[n];		for (int i = 0; i < n; ++i) {			double c = in.nextDouble();			double s = in.nextDouble();			ints[i] = new Seg(c - s / 2, c + s / 2);		}		Arrays.sort(ints);		int cnt = 2;		for (int i = 0; i < n - 1; ++i) {			System.err.println(ints[i + 1].a + " " + ints[i].b);			double te = (ints[i + 1].a - ints[i].b);			System.err.println(te);			if (te > t) {				cnt += 2;			}			if (te == t) {				cnt += 1;			} 		}		pw.println(cnt);	} 	long pow(int n, int m) {		if (m == 0)			return 1;		long ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	} 	double pow(double n, int m) {		if (m == 0)			return 1;		double ans = pow(n, m / 2);		ans = (ans * ans);		if (m % 2 == 1) {			ans = (ans * n);		}		return ans;	}} class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
