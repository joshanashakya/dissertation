import java.io.*;import java.util.*; public class Main {    static PrintWriter pw;    static Scanner sc;    static long[][] dp;    static int mod, arr[][];    static ArrayList<Integer> ans;    static int[] fact;    static long ceildiv(long x, long y) { return (x + y - 1) / y; }    static int mod(long x, int m) { return (int) ((x % m + m) % m); }    public static long gcd(long x, long y) {return y==0?x:gcd(y, x%y);}    public static void main(String[] args) throws Exception {        sc = new Scanner(System.in);        pw = new PrintWriter(System.out);        int n=sc.nextInt(), t=sc.nextInt();        int ans=2;        Pair2[] arr=new Pair2[n];        for(int i=0; i<n; i++){            double x=sc.nextInt(), a=sc.nextInt();            double y=x+a/2.0;            x-=a/2;            arr[i]=new Pair2(x, y);        }        Arrays.sort(arr);        for(int i=1; i<n; i++){            double dist=arr[i].x-arr[i-1].y;            if(dist>t)                ans+=2;            else if(dist==t)                ans++;        }        pw.println(ans);        pw.close();    }    static int modInv(int x, int mod){        return Euclid(x, mod).x;    }    static Pair Euclid(int x, int y){        if(y==0)            return new Pair(1, 0);        Pair p=Euclid(y, x%y);        int a=p.y, b=(int)(p.x-p.y*1l*(x/y));        return new Pair(a, b);    }    static long comb(int n, int r, int mod){        return (fact[n]*1l*mod(modInv((int)((fact[n-r]*1l*fact[r])%mod), mod), mod))%mod;    }    static void printArr(int[] arr) {        for (int i = 0; i < arr.length - 1; i++)            pw.print(arr[i] + " ");        pw.println(arr[arr.length - 1]);    }    static void printArr(long[] arr) {        for (int i = 0; i < arr.length - 1; i++)            pw.print(arr[i] + " ");        pw.println(arr[arr.length - 1]);    }    static void printArr(Integer[] arr) {        for (int i = 0; i < arr.length; i++)            pw.print(arr[i] + " ");        pw.println();    }    static void printArr(char[] arr) {        for (int i = 0; i < arr.length; i++)            pw.print(arr[i]==0? '1': arr[i]);        pw.println();    }    static void printArr(ArrayList<Integer> list) {        for (int i = 0; i < list.size(); i++)            pw.print(list.get(i)+1+" ");        pw.println();    }    static class Scanner {        StringTokenizer st;        BufferedReader br;        public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public Scanner(FileReader r) {            br = new BufferedReader(r);        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public int[] nextArr(int n) throws IOException {            int[] arr = new int[n];            for (int i = 0; i < arr.length; i++)                arr[i] = nextInt();            return arr;        }        public Integer[] nextsort(int n) throws IOException{            Integer[] arr=new Integer[n];            for(int i=0; i<n; i++)                arr[i]=nextInt();            return arr;        }        public Pair nextPair() throws IOException{            return new Pair(nextInt(), nextInt());        }        public Pair[] nextPairArr(int n) throws IOException{            Pair[] arr=new Pair[n];            for(int i=0; i<n; i++)                arr[i]=new Pair(nextInt(), nextInt());            return arr;        }        public boolean ready() throws IOException {            return br.ready();        }    }    static class Pair implements Comparable<Pair>{        int x;        int y;        public Pair(int x, int y) {            this.x=x;            this.y=y;        }        public int hashCode() {            return (this.x*1000+this.y);        }        public int compareTo(Pair p){            return Long.compare(this.x, p.x);        }        public boolean equals(Object obj) {            if (obj == null) {                return false;            }            if (this.getClass() != obj.getClass()) {                return false;            }            Pair p = (Pair) obj;            return this.x==p.x && this.y==p.y;        }        public boolean equal(Pair p){            if(this.x==p.x)                return this.y==p.y;            if(this.x==p.y)                return this.y==p.x;            else                return false;        }        public Pair clone(){            return new Pair(x, y);        }        public String toString(){            return this.x+" "+this.y;        }        public void add(Pair p){            x+=p.x;            y+=p.y;        }    }//    static class DSU{//        int[] rep, size;//        public DSU(int n){//            rep=new int[n];//            size=new int[n];//            for(int i=0; i<n; i++){//                rep[i]=i;//                size[i]=1;//            }//        }//        public void join(int x, int y){//            int a=getSet(x), b=getSet(y);//            if(a==b)//                return;//            if(size[x]>size[y]){//                rep[y]=x;//                size[x]+=size[y];//            }else{//                rep[x]=y;//                size[y]+=size[x];//            }//        }//    }    static class Pair2 implements Comparable<Pair2>{        double x, y;        public Pair2(double a, double b){            x=a;            y=b;        }    public int compareTo(Pair2 p) {        if(x>p.x)            return 1;        return -1;    }}}
