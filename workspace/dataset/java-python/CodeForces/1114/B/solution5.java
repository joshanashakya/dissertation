import java.io.*;import java.text.CollationElementIterator;import java.util.*; public class B_Yet_Another_Array_Partitioning_Task{        @SuppressWarnings("unchecked")    public static void main(String[] args) throws Exception{        int[] nmk = in.readA();        int n = nmk[0], m = nmk[1], k = nmk[2];        int[] A = in.readA();         List<Pair> Ac = new ArrayList<>();         for(int i = 0 ; i < n ; i++){            Ac.add(new Pair(i, A[i]));        }         Collections.sort(Ac, new Comparator<Pair>(){            @Override            public int compare(Pair a, Pair b){                return a.second - b.second;            }        });         Set<Integer> mxn = new HashSet<>();         long sum = 0;         for(int i = 0; i < m*k; i++){            mxn.add(Ac.get(n-i-1).first);            sum += Ac.get(n-i-1).second;        }        System.out.println(sum );         int count = 0;        for(int i = 0; i < n && k > 1; i++){            if(mxn.contains(i))                count++;            if(count == m){                System.out.print((i+1)+" ");                k--;                count = 0;            }        }     }     static Inputer in;    static {        in = new Inputer();    }     static class Pair{        int first, second;        Pair(int a, int b){            first = a;            second = b;        }        @Override        public String toString(){            return "["+first+" "+second+"]";        }    }     static class Inputer{        BufferedReader br;        Inputer(){            try{                br = new BufferedReader(new InputStreamReader(System.in));            }            catch(Exception e){}        }        public int readInt() throws Exception{            return Integer.parseInt(readLine());        }        public long readLong() throws Exception{            return Long.parseLong(readLine());        }        public int[] readA(String delim) throws Exception{            String[] s = readLine().split(delim);            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public int[] readA() throws Exception{            String[] s = readLine().split("\\s+");            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public long[] readLA() throws Exception{            String[] s = readLine().split("\\s+");            long[] A = new long[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Long.parseLong(s[i]);            return A;        }        public String readLine() throws Exception{            return br.readLine();        }        public int[] copyA(int[] A){            int[] B = new int[A.length];            for(int i= 0 ; i < A.length; i++)                B[i] = A[i];            return B;        }    }    static void shuffle(int[] A){        int n = A.length;        Random rand = new Random();        for(int t = 0; t < A.length; t++){            int i1 = rand.nextInt(n);            int i2 = rand.nextInt(n);            int tmp = A[i1];            A[i1] = A[i2];            A[i2] = tmp;        }    }}
