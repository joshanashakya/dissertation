/*      */ import java.util.*;import java.lang.*;import java.io.*; public class Main{    static class FastReader     {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));         }        String next()        {            while (st == null || !st.hasMoreElements())            {                 try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();         }        int nextInt()        {            return Integer.parseInt(next());        }        long nextLong()        {            return Long.parseLong(next());        }        double nextDouble()        {            return Double.parseDouble(next());        }        String nextLine()        {            String str = "";             try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }    static ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>> ();     public static void main(String[] args)    {        FastReader s=new FastReader();        int n = s.nextInt();         for(int j=0; j<n; j++){            adj.add(new ArrayList<Integer>());        }         for(int i=1; i<n; i++){            int node = s.nextInt();            addEdge(adj, node-1, i);        }         int[] dp = new int[n];         DFS(0, 0, dp);         boolean sprouse = true;        for(int z : dp){            if(z==1){                sprouse = false;                break;            }        }         if(sprouse){            System.out.println("Yes");        }        else{            System.out.println("No");        }             }     public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v) {        adj.get(u).add(v);        //adj.get(v).add(u);    }      public static void DFS(int curr, int par, int[] dp)    {        int leafnodes = 0;        if(adj.get(curr).size()>0){            for(int child : adj.get(curr)){                if(adj.get(child).size()==0){                    leafnodes++;                }                else{                    DFS(child, curr, dp);                }            }            if(leafnodes<3){                dp[curr] = 1;            }        }            }}
