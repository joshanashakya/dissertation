import itertoolsimport bisectimport mathfrom collections import *import osimport sysfrom io import BytesIO, IOBase sys.setrecursionlimit(10 ** 5)ii = lambda: int(input())lmii = lambda: list(map(int, input().split()))slmii = lambda: sorted(map(int, input().split()))li = lambda: list(input())mii = lambda: map(int, input().split())msi = lambda: map(str, input().split())  def gcd(a, b):    if b == 0: return a    return gcd(b, a % b)  def lcm(a, b): return (a * b) // gcd(a, b)  def ncr(n, r): return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))  def npr(n, r): return math.factorial(n) // math.factorial(n - r)  def main():    # for _ in " " * int(input()):    n, m = mii()    lst = []    f = 0    for i in range(n):        a=lmii()        lst.append(a)    for i in range(n):        d=defaultdict(int)        for j in range(m):            if j+1!=lst[i][j]:                d[j+1]=lst[i][j]        if len(d) > 4:            print("NO")            exit(0)    for i in range(n):        d=defaultdict(int)        for j in range(m):            if j+1!=lst[i][j]:                d[j+1]=lst[i][j]        if len(d) > 2:            f = 1            break        for j in d:            if j != d[d[j]]:                f = 1                break        if f == 1:            break    if f == 0:        print("YES")    else:        for i in range(m):            for j in range(i+1, m):                col1 = i                col2 = j                lstd = []                for k in range(n):                    lstd.append(list(lst[k]))                for k in range(n):                    lst[k][col1],lst[k][col2] = lst[k][col2],lst[k][col1]                f=0                for ii in range(n):                    d = defaultdict(int)                    for jj in range(m):                        if jj + 1 != lst[ii][jj]:                            d[jj + 1] = lst[ii][jj]                    if len(d) > 2:                        f = 1                        break                    for jj in d:                        if jj != d[d[jj]]:                            f = 1                            break                    if f == 1:                        break                if f == 0:                    print("YES")                    exit(0)                lst = []                for k in range(n):                    lst.append(list(lstd[k]))        print("NO")    pass  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") if __name__ == "__main__":    main()
