import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.util.*; public class CFB {     BufferedReader br;    PrintWriter out;    StringTokenizer st;    boolean eof;    final long MOD = 1000L * 1000L * 1000L + 7;    int[] dx = {0, -1, 0, 1};    int[] dy = {1, 0, -1, 0};     int n;    int m;    int[][] mat;    void solve() throws IOException {        n = nextInt();        m = nextInt();        mat = new int[n][m];        for (int i = 0; i < n; i++) {            mat[i] = nextIntArr(m);        }         if (check()) {            out("YES");            return;        }        for (int j1 = 0; j1 < m; j1++) {            for (int j2 = j1 + 1; j2 < m; j2++) {                swap(j1, j2);                if (check()) {                    out("YES");                    return;                }                swap(j1, j2);            }        }         out("NO");    }     void swap(int j1, int j2) {        for (int i = 0; i < n; i++) {            int tmp = mat[i][j1];            mat[i][j1] = mat[i][j2];            mat[i][j2] = tmp;        }    }     boolean check() {        for (int i = 0; i < n; i++) {            int cnt = 0;            for (int j = 0; j < m; j++) {                if (mat[i][j] != j + 1) {                    cnt++;                }            }            if (cnt > 2) {                return false;            }        }         return true;    }     void shuffle(long[] a) {        int n = a.length;        for(int i = 0; i < n; i++) {            int r = i + (int) (Math.random() * (n - i));            long tmp = a[i];            a[i] = a[r];            a[r] = tmp;        }    }    private void outln(Object o) {        out.println(o);    }    private void out(Object o) {        out.print(o);    }    public CFB() throws IOException {        br = new BufferedReader(new InputStreamReader(System.in));        out = new PrintWriter(System.out);        solve();        out.close();    }    public static void main(String[] args) throws IOException {        new CFB();    }     public long[] nextLongArr(int n) throws IOException{        long[] res = new long[n];        for(int i = 0; i < n; i++)            res[i] = nextLong();        return res;    }    public int[] nextIntArr(int n) throws IOException {        int[] res = new int[n];        for(int i = 0; i < n; i++)            res[i] = nextInt();        return res;    }    public String nextToken() {        while (st == null || !st.hasMoreTokens()) {            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                eof = true;                return null;            }        }        return st.nextToken();    }    public String nextString() {        try {            return br.readLine();        } catch (IOException e) {            eof = true;            return null;        }    }    public int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }    public long nextLong() throws IOException {        return Long.parseLong(nextToken());    }    public double nextDouble() throws IOException {        return Double.parseDouble(nextToken());    }}
