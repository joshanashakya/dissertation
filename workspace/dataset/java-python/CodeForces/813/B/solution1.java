import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		static long lim = 0;	    public static void main(String[] args) {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    		    		    	int tt = 1;    	while(tt-->0) {    		    		long x = fs.nextLong(), y = fs.nextLong(), l = fs.nextLong(), r = fs.nextLong();    		lim = r;    		    		ArrayList<Long> list = new ArrayList<Long>();    		    		for(int i=0;i<=60;i++) {    			for(int j=0;j<60;j++) {    				long num = cal(x, y, i, j);    				if(num!=1 && num>=l) list.add(num);    			}    		}    		    		if(list.size()==0) {    			out.println(r-l+1);    			out.flush();    			return;    		}    		    		    		Collections.sort(list);    		    		int q =1;    		    		long ans = 0;    		for(int i=1;i<list.size();i++) {    			ans = Math.max(ans, list.get(i)-list.get(i-1)-1);    		}    		ans = Math.max(ans, list.get(0)-l);    		ans = Math.max(ans, r-list.get(list.size()-1));    		    		out.println(ans);    		    	}    	    		    		    		    	out.close();    		    }           static long cal(long x, long y, int a, int b) {    	long p1 = exp(x, a);    	long p2 = exp(y, b);    	if(p1==-1 || p2==-1) return -1;    	if(p1+p2>lim) return -1;    	return p1+p2;    }           static long exp(long x, long n) {    	long res = 1;    	for(int i=0;i<n;i++) {    		res = res * x;    		if(res>lim/x && i<n-1) {    			return -1;    		}    	}    	return res;    }            static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
