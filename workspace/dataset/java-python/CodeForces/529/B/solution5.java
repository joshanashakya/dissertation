import java.io.*;import java.util.*; public class Solve {     class Man implements Comparable<Man> {        int h, w;         Man(int w, int h) {            this.w = w;            this.h = h;        }         @Override        public int compareTo(Man o) {            return Integer.compare(h - w, o.h - o.w);        }    }     void solve() throws IOException {        int n = in.nextInt();        Man[] m = new Man[n];        int minH = 0;        for (int i = 0; i < n; ++i) {            m[i] = new Man(in.nextInt(), in.nextInt());            minH = Math.max(minH, Math.min(m[i].h, m[i].w));        }        Arrays.sort(m, new Comparator<Man>() {            @Override            public int compare(Man o1, Man o2) {                return Integer.compare(o1.h, o2.h);            }        });        int ans = Integer.MAX_VALUE;        for (int i = 0, H = minH; H < 1003; H++) {            while (i < n && m[i].h <= H) {                i++;            }            Man[] hz = Arrays.copyOf(m, i);            int can = n / 2;            int res = 0;            for (int j = i; j < n; j++) {                res += m[j].h;                can--;            }            if (can < 0) continue;            Arrays.sort(hz);            for (Man man : hz) {                if (can > 0 && man.w > man.h && man.w <= H) {                    res += man.h;                    can--;                } else {                    res += man.w;                }            }            ans = Math.min(ans, res * H);        }        out.println(ans);    }     static FastReader in;    static PrintWriter out;    static PrintStream err;     public static void main(String[] args) {        try {            in = new FastReader();            out = new PrintWriter(System.out);            err = System.err;            new Solve().solve();            out.close();        } catch (Exception e) {            e.printStackTrace();            System.exit(1);        }    }} class FastReader {    BufferedReader br;    StringTokenizer st;     FastReader(InputStream is) {        br = new BufferedReader(new InputStreamReader(is));    }     FastReader() {        this(System.in);    }     FastReader(String file) throws FileNotFoundException {        this(new FileInputStream(file));    }     String nextToken() throws IOException {        while (st == null || !st.hasMoreElements()) {            st = new StringTokenizer(br.readLine());        }        return st.nextToken();    }     int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }}
