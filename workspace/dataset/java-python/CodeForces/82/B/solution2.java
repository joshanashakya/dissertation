import java.io.*;import java.util.HashSet;import java.util.LinkedList;import java.util.Queue;import java.util.StringTokenizer;  public class Main {    public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        int max = 205;        int n = sc.nextInt();        int m = n * (n - 1) / 2;        HashSet<Integer>[] papers = new HashSet[m];        HashSet<Integer> sets[] = new HashSet[n];        HashSet<Integer> elements = new HashSet<>();        int c = 0;        for (int i = 0; i < m; i++) {            papers[i] = new HashSet();            int k = sc.nextInt();            while (k-- > 0) {                int cur = sc.nextInt();                papers[i].add(cur);                elements.add(cur);            }        }        boolean[] inSet = new boolean[max];        for (int x : elements) {            if (inSet[x]) continue;            HashSet<Integer> cand = new HashSet<>();            cand.add(x);            boolean first = true;            for (int i = 0; i < m; i++) {                if (papers[i].contains(x)) {                    if (first) {                        for (int y : papers[i])                            if (!inSet[y]) {                                inSet[y] = true;                                cand.add(y);                            }                        first = false;                    } else {                        Queue<Integer> remove = new LinkedList<>();                        for (int y : cand)                            if (!papers[i].contains(y)) remove.add(y);                        for (int y : remove) {                            cand.remove(y);                            inSet[y] = false;                        }                    }                }            }            sets[c++] = cand;        }        if (c < n) {            int remove = 0;            for (int x : papers[c - 1]) {                remove = x;                break;            }            sets[c-1].remove(remove);            sets[c] = new HashSet<>();            sets[c++].add(remove);        }        for (HashSet<Integer> ans : sets) {            out.print(ans.size() + " ");            for (int x : ans)                out.print(x + " ");            out.println();        }         out.flush();        out.close();     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }      } }
