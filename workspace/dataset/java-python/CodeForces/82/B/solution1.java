import java.io.*;import java.math.*;import java.util.*; public class Main {	static final long MOD = 1000000007L;	static final int INF = 50000000;	public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter pw = new PrintWriter(System.out);				int N = sc.ni();		int S = N*(N-1)/2;		HashSet<Integer>[] sets = new HashSet[S];		long[] mask = new long[200];		long pow = 1;		for (int i = 0; i < S; i++) {			sets[i] = new HashSet<Integer>();			int M = sc.ni();			for (int j = 0; j < M; j++) {				int num = sc.ni()-1;				sets[i].add(num);				mask[num] = (mask[num]+pow)%MOD;			}			pow = (2*pow)%MOD;		}		if (N == 2) {			int first = -1;			for (int s: sets[0]) {				if (first == -1) {					first = s;					break;				}			}			pw.println(1 + " " + (first+1));			pw.print(((sets[0].size()-1) + " "));			for (int s: sets[0]) {				if (s!=first) {					pw.print((s+1) + " ");				}			}			pw.println();			pw.close();			return;		}		ArrayList<Integer>[] ans = new ArrayList[N];		for (int i = 0; i < N; i++) {			ans[i] = new ArrayList<Integer>();		}		boolean[] used = new boolean[200];		for (int i = 0; i < 200; i++) {			if (mask[i] == 0)				used[i] = true;		}		int ind = 0;		for (int i = 0; i < 200; i++) {			if (used[i])continue;			long target = mask[i];			for (int j = 0; j < 200; j++) {				if (!used[j] && mask[j] == target) {					ans[ind].add(j+1);					used[j] = true;				}			}			ind++;		}				for (ArrayList<Integer> a: ans) {			pw.print(a.size() + " ");			for (int n: a)				pw.print(n + " ");			pw.println();		}				pw.close();	}		//Fast exponentiation (x^y mod m)	public static long power(long x, long y, long m) {		long ans = 1;		x %= m;		while (y > 0) {			if(y % 2 == 1)				ans = (ans * x) % m;			y /= 2;			x = (x * x) % m;		}		return ans;	}	    static class FastScanner {         BufferedReader br;         StringTokenizer st;           public FastScanner() {             br = new BufferedReader(new InputStreamReader(System.in));         }           String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }                int ni() {             return Integer.parseInt(next());         }          long nl() {             return Long.parseLong(next());         }           double nd() {             return Double.parseDouble(next());         }           String nextLine() {            String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                e.printStackTrace();             }             return str;        }    }}
