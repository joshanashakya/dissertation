import java.io.IOException;import java.io.InputStream;import java.util.StringTokenizer;  import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter; public class Main {    static int maxn = (int)(1e5 + 5);    static int[] t = new int[maxn];    static int[] l = new int[maxn];    static int[] r = new int[maxn];    public static void main(String[] args) {        InputStream inputStream = System.in;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));        int n = in.nextInt();        int m = in.nextInt();        int s = in.nextInt();        int f = in.nextInt();        for(int i = 1; i <= m; ++i) {        	t[i] = in.nextInt();        	l[i] = in.nextInt();        	r[i] = in.nextInt();        }        int pos = s, p = 0;        for(int i = 1; pos != f; ++i) {        	while(p <= m && t[p] < i) {        		++p;        	}        	if(pos < f) {        		if(p > m || t[p] != i || (t[p] == i && (l[p] > pos + 1 || r[p] < pos))) {        			out.print('R');        			++pos;        		} else {        			out.print('X');        		}        	} else {        		if(p > m || t[p] != i || (t[p] == i && (l[p] > pos || r[p] < pos - 1))) {        			out.print('L');        			--pos;        		} else {        			out.print('X');        		}        	}        }        out.flush();        out.close();//   	 	Scanner in = new Scanner(System.in);//    	in.close();    }    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;        public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }        public String next() {            while(tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }    }} /*  */  				 	 			 		   				 		
