import java.io.*;import java.math.BigInteger;import java.util.*;import java.util.Stack; public class Main{	public static class FastReader {		BufferedReader br;		StringTokenizer root;		 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (root == null || !root.hasMoreTokens()) {				try {					root = new StringTokenizer(br.readLine());				} catch (Exception r) {					r.printStackTrace();				}			}			return root.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception r) {				r.printStackTrace();			}			return str;		}	}		public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));	static long mod = (long) (1e9+7);	static long cf = 998244353;    static final long MAX = (long) 1e5;        public static List<Integer>[] edges;    public static int[][] parent;    public static int col = 32;    public static long[][][] dp; 	public static void main(String[] args) {		FastReader sc = new FastReader();		int n = sc.nextInt(), m = sc.nextInt(), s = sc.nextInt()-1, f = sc.nextInt()-1;		int[][] q = new int[m][];		for(int i = 0;i < m;i++){			q[i] = new int[] {sc.nextInt(), sc.nextInt()-1, sc.nextInt()-1};		}				int p = 0;		for(int i = 1;s != f;i++){			if(p < m && q[p][0] == i){				int nex = s < f ? s+1 : s-1;				if(						(q[p][1] <= s && s <= q[p][2]) ||						(q[p][1] <= nex && nex <= q[p][2])){					out.print("X");				}else{					if(f > s){						out.print("R");						s++;					}else{						out.print("L");						s--;					}				}				p++;			}else{				if(f > s){					out.print("R");					s++;				}else{					out.print("L");					s--;				}			}					}	   out.close();	} 	} 		  	 	    	  	 	    	 				  	
