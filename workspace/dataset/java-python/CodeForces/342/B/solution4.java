import java.io.DataInputStream;import java.io.IOException;import java.util.Arrays;import java.util.HashMap;import java.util.Map; public class A {    public static void main(String[] args) throws IOException{        FastReader reader = new FastReader();         int n = reader.nextInt();        int m = reader.nextInt();        int s = reader.nextInt();        int f = reader.nextInt();         Map<Integer, int[]> sled = new HashMap<>();         for(int i = 0; i < m; i++) {            int t = reader.nextInt();            int[] leftRight = new int[2];            leftRight[0] = reader.nextInt();            leftRight[1] = reader.nextInt();             sled.put(t, leftRight);        }         int cur = s;        int step = 1;        while(cur != f) {            int[] borders = sled.get(step);            if(cur < f) {                if( borders != null &&                        (cur >= borders[0] && cur <= borders[1]                        || cur + 1 >= borders[0] && cur + 1 <= borders[1])) {                    System.out.print('X');                } else {                    cur++;                    System.out.print('R');                }            }            else {                if(borders != null &&                        (cur >= borders[0] && cur <= borders[1]                        || cur - 1 >= borders[0] && cur - 1 <= borders[1])) {                    System.out.print('X');                } else {                    cur--;                    System.out.print('L');                }            }            step++;        }     }                           private static class FastReader    {        final private int BUFFER_SIZE = 1 << 16;        private DataInputStream din;        private byte[] buffer;        private int bufferPointer, bytesRead;         public FastReader()        {            din = new DataInputStream(System.in);            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }         public String readLine() throws IOException        {            byte[] buf = new byte[64]; // line length            int cnt = 0, c;            while ((c = read()) != -1)            {                if (c == '\n')                    break;                buf[cnt++] = (byte) c;            }            return new String(buf, 0, cnt);        }         public int nextInt() throws IOException        {            int ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do            {                ret = ret * 10 + c - '0';            }  while ((c = read()) >= '0' && c <= '9');             if (neg)                return -ret;            return ret;        }         public long nextLong() throws IOException        {            long ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');            if (neg)                return -ret;            return ret;        }         public double nextDouble() throws IOException        {            double ret = 0, div = 1;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();             do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');             if (c == '.')            {                while ((c = read()) >= '0' && c <= '9')                {                    ret += (c - '0') / (div *= 10);                }            }             if (neg)                return -ret;            return ret;        }         private void fillBuffer() throws IOException        {            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);            if (bytesRead == -1)                buffer[0] = -1;        }         private byte read() throws IOException        {            if (bufferPointer == bytesRead)                fillBuffer();            return buffer[bufferPointer++];        }         public void close() throws IOException        {            if (din == null)                return;            din.close();        }    }} /* Mon Aug 12 2019 14:20:38 GMT+0300 (MSK) */
