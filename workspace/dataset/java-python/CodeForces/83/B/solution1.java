 import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;import java.util.StringTokenizer; public class Doctor {     private static void solve(IO io, int n, long k, long[] arr) {        long low = 0, high = k;         long sum = sum(arr);        if(sum < k){            io.println(-1);            return;        }         while (low < high){            long mid = low + (high - low + 1) / 2;            if(check(arr, n, k, mid))                low = mid;            else high = mid - 1;        }         long maxVisit = low;        long totalVisits = 0;        for(int i = 0; i < n; ++i){            long currPersonVisits = Math.min(arr[i], maxVisit);            totalVisits += currPersonVisits;            arr[i] -= currPersonVisits;        }         /*io.println(totalVisits);        io.println(Arrays.toString(arr));*/         StringBuffer ans = new StringBuffer();        int person = 0;        for(; person < n && totalVisits < k; ++person){            if(arr[person] > 0){                --arr[person];                ++totalVisits;                //if(totalVisits == k) break;            }        }         for(int i = 0; i < n; ++i) {            if (arr[(person + i) % n] > 0)                ans.append(((person + i) % n) + 1).append(" ");        }         //io.println(Arrays.toString(arr));        io.println(ans);    }     private static boolean check(long[] arr, int n, long k, long visitsPerPerson) {         long totalVisits = 0;        for(int i = 0; i < n; ++i){            totalVisits += Math.min(arr[i], visitsPerPerson);        }         return totalVisits <= k;    }     public static void main(String[] args) {        IO io = new IO();        int n = io.nextInt();        long k = io.nextLong();        long[] arr = io.readLongArray(n);        solve(io, n, k, arr);        io.close();    }     private static long sum(long[] arr){        long sum = 0L;        for(long a : arr)            sum += a;        return sum;    }    private static class IO extends PrintWriter {         private BufferedReader br;        StringTokenizer st;         public IO() {            super(System.out);            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }        List<Integer> readList(int n){            List<Integer> list = new ArrayList<>(n);            for(int i = 0; i < n; ++i)                list.add(nextInt());            return list;        }        int[] readArray(int n){            int[] arr = new int[n];            for(int i = 0; i < n; ++i)                arr[i] = nextInt();             return arr;        }        long[] readLongArray(int n){            long[] arr = new long[n];            for(int i = 0; i < n; ++i)                arr[i] = nextLong();             return arr;        }         double[] readDoubleArray(int n){            double[] arr = new double[n];            for(int i = 0; i < n; ++i)                arr[i] = nextDouble();            return arr;        }    }}
