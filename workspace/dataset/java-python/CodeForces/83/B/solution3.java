import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        int[] A = new int[n];        long sum = 0L;        long k = in.nextLong();        for (int i=0;i<n;i++)   sum += (A[i] = in.nextInt());        if (k >= sum)        {            if (k > sum)                System.out.println(-1);            return;        }        int l = 0;        int r = (int)(1e9 + 1);        int ans = -1;        while (l <= r)        {            int mid = (l + r) / 2;            sum = 0L;            for (int i=0;i<n;i++)   sum += Math.min(A[i], mid);            if (sum < k)            {                ans = mid;                l = mid + 1;            }            else                r = mid - 1;        }        for (int i=0;i<n;i++)        {            int b = Math.min(A[i], ans);            A[i] -= b;            k -= b;        }        int j = 0;        while (k > 0)        {            if (A[j] > 0)            {                A[j]--;                k--;            }            j++;        }        StringBuilder stringBuilder = new StringBuilder();        for (int i=j;i<n;i++)        {            if (A[i] > 0)            {                stringBuilder.append(i + 1).append(" ");            }        }        for (int i=0;i<j;i++)        {            if (A[i] > 0)            {                stringBuilder.append(i + 1).append(" ");            }        }        System.out.println(stringBuilder);    }}class Game{    int x; }class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
