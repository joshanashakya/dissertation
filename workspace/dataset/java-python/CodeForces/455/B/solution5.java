import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        ALotOfGames solver = new ALotOfGames();        solver.solve(1, in, out);        out.close();    }     static class ALotOfGames {        static final int ALPHABET = 26;        ArrayList<ALotOfGames.Node> trie;        int n;        int k;         void addString(String s) {            int v = 0;            for (char c : s.toCharArray()) {                c -= 'a';                if (trie.get(v).next[c] == -1) {                    trie.get(v).next[c] = trie.size();                    trie.add(new ALotOfGames.Node());                }                v = trie.get(v).next[c];            }            trie.get(v).isLeaf = true;        }         boolean canOdd(int v) {            boolean ret = false;            boolean hasNext = false;            for (int c = 0; c < ALPHABET; c++) {                if (trie.get(v).next[c] != -1) {                    hasNext = true;                    ret = ret || !canOdd(trie.get(v).next[c]);                }            }            return hasNext && ret;        }         boolean canEven(int v) {            boolean ret = false;            boolean hasNext = false;            for (int c = 0; c < ALPHABET; c++) {                if (trie.get(v).next[c] != -1) {                    hasNext = true;                    ret = ret || !canEven(trie.get(v).next[c]);                }            }            return !hasNext || ret;        }         public void solve(int testNumber, InputReader in, PrintWriter out) {            n = in.nextInt();            k = in.nextInt();            trie = new ArrayList<>();            trie.add(new ALotOfGames.Node());            for (int i = 0; i < n; i++) {                String s = in.nextString();                addString(s);            }             boolean e = canEven(0);            boolean o = canOdd(0);             boolean first;            if (e && o) {                first = true;            } else if (e) {                first = false;            } else if (o) {                first = k % 2 == 1;            } else {                first = false;            }             out.println(first ? "First" : "Second");        }         static class Node {            int[] next;            boolean isLeaf;             Node() {                next = new int[ALPHABET];                Arrays.fill(next, -1);                isLeaf = false;            }         }     }     static class InputReader {        private final InputStream is;        private final byte[] inbuf = new byte[1024];        private int lenbuf = 0;        private int ptrbuf = 0;         public InputReader(InputStream stream) {            is = stream;        }         private int readByte() {            if (lenbuf == -1) throw new InputMismatchException();            if (ptrbuf >= lenbuf) {                ptrbuf = 0;                try {                    lenbuf = is.read(inbuf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (lenbuf <= 0) return -1;            }            return inbuf[ptrbuf++];        }         private boolean isSpaceChar(int c) {            return !(c >= 33 && c <= 126);        }         private int skip() {            int b;            while ((b = readByte()) != -1 && isSpaceChar(b)) ;            return b;        }         public String nextString() {            int b = skip();            StringBuilder sb = new StringBuilder();            while (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')                sb.appendCodePoint(b);                b = readByte();            }            return sb.toString();        }         public int nextInt() {            int num = 0, b;            boolean minus = false;            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;            if (b == '-') {                minus = true;                b = readByte();            }             while (true) {                if (b >= '0' && b <= '9') {                    num = num * 10 + (b - '0');                } else {                    return minus ? -num : num;                }                b = readByte();            }        }     }} 
