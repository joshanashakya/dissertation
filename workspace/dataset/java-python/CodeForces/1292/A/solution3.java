import java.util.*;import java.io.*; public class AiseHi {	static class FastReader     {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }          String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }	static FastReader sc = new FastReader();	public static void main (String[] args) {		PrintWriter out = new PrintWriter(System.out);		int t = 1;//    	t = sc.nextInt();    	while(t-->0) {    		int n = sc.nextInt();    		int q = sc.nextInt();    		boolean is[][] = new boolean[2+2][n+2];    		int no = 0;    		while(q-->0) {    			int x = sc.nextInt();    			int y = sc.nextInt();    			boolean isGround = true;    			if(is[x][y]) {    				is[x][y] = false;    			}    			else {    				is[x][y] = true;    				isGround = false;    			}    			if(isGround) {    				if(x==1 && (is[x+1][y+1])) no--;    				if(x==1 && (is[x+1][y-1])) no--;    				if(x==1 && (is[x+1][y])) no--;    				if(x==2 && (is[x-1][y+1])) no--;    				if(x==2 && (is[x-1][y-1])) no--;    				if(x==2 && (is[x-1][y])) no--;    				if(no<=0) out.write("YES\n");    				else out.write("NO\n");    			}    			else {    				if(x==1 && (is[x+1][y+1])) no++;    				if(x==1 && (is[x+1][y-1])) no++;    				if(x==1 && (is[x+1][y])) no++;    				if(x==2 && (is[x-1][y])) no++;    				if(x==2 && (is[x-1][y+1])) no++;    				if(x==2 && (is[x-1][y-1])) no++;//    				System.out.println(no);    				if(no<=0) out.write("YES\n");    				else out.write("NO\n");    			}    		}    		out.write("\n");      	}		out.close();	} 	private static long pow(int i, int x) {		long ans = 1;		while(x>0) {			if(x%2==0) {				i*=i;				x/=2;			}			else {				ans*=i;				x--;			}		}		return ans;	}	private static void swap(int[] a, int i, int j) {		int temp = a[i];		a[i] = a[j];		a[j] = temp;	}	static long lstbt(long val) {		long msk = val & (val-1);		return (long) (Math.log(val^msk)/Math.log(2));	}	private static long sqrt(long x) {		long l = 1,h = x;		long ans = 0;		while(l<=h) {			long mid = (l+(h-l)/2);			if(mid>x/mid) h = mid-1;			else {				ans = mid;				l = mid+1;			}		}		return ans;	}	static boolean prime[] = new boolean[10000001];	static void sieve() {		prime[0] = true;		prime[1] = true;		int max = 10000000;		for(int i=2;i*i<=max;i++) {			if(!prime[i]) {				for(int j=i*i;j<=max;j+=i)					prime[j] = true;			}		}	}}class DSU {	int par[];	int size[];	DSU(int n) {		par = new int[n];		size = new int[n];		Arrays.fill(size, 1);		for(int i=0;i<n;i++) par[i] = i;	}	int findPar(int x) {		if(x == par[x]) return x;				return par[x] = findPar(par[x]);	}	boolean join(int u,int v) {		int fu = findPar(u);		int fv = findPar(v);		if(fu!=fv) {			if(size[fu]>=size[fv]) {				par[fv] = fu;				size[fu] += size[fv];			}			else {				par[fu] = fv;				size[fv] += size[fu];			}			return true;		}		else 			return false;	}}class pair implements Comparable<pair>{	int a;	long b;	pair(int a,long b){		this.a = a;		this.b = b;	}	@Override	public int compareTo(pair o) {		if(this.a!=o.a)			return (int) (this.a - o.a);		else			return (int)(this.b - o.b);	}}
