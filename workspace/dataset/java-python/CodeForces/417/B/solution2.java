import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.Set;import java.util.HashMap;import java.util.InputMismatchException;import java.io.IOException;import java.util.HashSet;import java.util.Map;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author El-Bishoy */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        Div2B_Crash_RCC_CUP solver = new Div2B_Crash_RCC_CUP();        solver.solve(1, in, out);        out.close();    }     static class Div2B_Crash_RCC_CUP {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            Map<Integer, Set<Integer>> as = new HashMap<>();            boolean possible = true;            while (n-- > 0) {                int x = in.nextInt(), k = in.nextInt();                 if (as.containsKey(k)) {                     if (x > 0) {                        if (!as.get(k).contains(x - 1)) {                            possible = false;                            break;                        }                    }                    as.get(k).add(x);                } else {                     if (x == 0) {                        Set<Integer> set = new HashSet<>();                        set.add(0);                        as.put(k, set);                    } else {                        possible = false;                        break;                    }                }             }              if (possible)                out.println("YES");            else                out.println("NO");        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }     }} 
