import java.io.*;import java.util.*;import java.math.*;     public class spoj {		InputStream is;	static PrintWriter out;	 	static int dp[]=new int[10001];		static int solver(int left,int c,int d,int n)	{		if(left<=0)			return 0;				if(dp[left]!=-1)			return dp[left];				return dp[left]=Math.min(c+solver(left-n,c,d,n),d+solver(left-1,c,d,n));			}	     void solve()    {		int c=ni(),d=ni();		int n=ni(),m=ni();		Arrays.fill(dp,-1);		int k=ni();		int left=n*m-k;				out.println(solver(left,c,d,n));				}							 	 	 	 	 	 	 	 	 	 	 	 		 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 		  	  	  	  	    //---------- I/O Template ----------        public static void main(String[] args) { new spoj().run(); }    void run() {         is = System.in;         out = new PrintWriter(System.out);        solve();        out.flush();    }        byte input[] = new byte[1024];    int len = 0, ptr = 0;        int readByte() {         if(ptr >= len) { ptr = 0;             try { len = is.read(input); }             catch(IOException e) { throw new InputMismatchException(); }             if(len <= 0) { return -1; }         } return input[ptr++];    }    boolean isSpaceChar(int c) { return !( c >= 33 && c <= 126 ); }    int skip() {         int b = readByte();         while(b != -1 && isSpaceChar(b)) { b = readByte(); }         return b;    }        char nc() { return (char)skip(); }    String ns() {         int b = skip();         StringBuilder sb = new StringBuilder();         while(!isSpaceChar(b)) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    String nLine() {         int b = skip();         StringBuilder sb = new StringBuilder();         while( !(isSpaceChar(b) && b != ' ') ) { sb.appendCodePoint(b); b = readByte(); }         return sb.toString();    }    int ni() {         int n = 0, b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         if(b == -1) { return -1; }  //no input         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }    long nl() {         long n = 0L;    int b = readByte();         boolean minus = false;         while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); }         if(b == '-') { minus = true; b = readByte(); }         while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); }         return minus ? -n : n;    }     double nd() { return Double.parseDouble(ns()); }    float nf() { return Float.parseFloat(ns()); }    int[] na(int n) {         int a[] = new int[n];         for(int i = 0; i < n; i++) { a[i] = ni(); }         return a;    }    char[] ns(int n) {         char c[] = new char[n];         int i, b = skip();         for(i = 0; i < n; i++) {             if(isSpaceChar(b)) { break; }             c[i] = (char)b; b = readByte();         } return i == n ? c : Arrays.copyOf(c,i);    }	static void pa(int a[])	{		for(int i=0;i<a.length;i++)		out.print(a[i]+" ");		out.println();	}	}
