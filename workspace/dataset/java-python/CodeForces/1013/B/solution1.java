//package com.company; import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;public class Main {    static FastReader sc = new FastReader();    static PrintWriter out = new PrintWriter(System.out);    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    public static void main(String[] args) throws IOException {        // write your code here            int n = sc.nextInt(), x = sc.nextInt();            final int N = 100005;            int[] a = new int[n + 1];            int[] cnt = new int[N];            for(int i = 1 ; i <= n ; ++i){                a[i] = sc.nextInt();                if(cnt[a[i]] == 1){                    out.println(0);                    out.flush();                    return ;                }                cnt[a[i]] = 1;            }            int min = Integer.MAX_VALUE;            for(int i = 1 ; i <= n ; ++i){                if(cnt[a[i] & x] != 0 && (a[i] & x) != a[i]) min = Math.min(min , cnt[a[i]&x]);                if(cnt[a[i] & x] == 0) cnt[a[i] & x] = 2;            }            if(min > 2) min = -1;            out.println(min);            out.flush();        }    }/** 读取int和double的类 */class FastReader {    BufferedReader br;    StringTokenizer	st;	public FastReader() {        br = new BufferedReader(new InputStreamReader(System.in));    }    String next() {        while (st == null || !st.hasMoreElements()) {            try {                st = new StringTokenizer(br.readLine());            } catch (IOException e) {                e.printStackTrace();            }		}		return st.nextToken();	}            int nextInt() {        return Integer.parseInt(next());    }	long nextLong() {        return Long.parseLong(next());    }	double nextDouble() {        return Double.parseDouble(next());    }String nextLine() {        String str = "";        try {            str = br.readLine();        } catch (IOException e) {            e.printStackTrace();        }        return str;    }}
