import java.io.*; import java.util.*; public class Solution {	 public static void main(String[] args) throws Exception    {		 FastReader fr=new FastReader();		 int n=fr.nextInt();		 int x=fr.nextInt();		 int a[]=new int[n];		 boolean two=false;		 Set<Integer> set=new HashSet<>();		 for(int i=0;i<n;i++)		 {			 a[i]=fr.nextInt();			 if(set.contains(a[i]))				 two=true;			 set.add(a[i]);		 }		 		 if(two==true) {			 System.out.println(0);		 }		 else {		         boolean pos=true;				int temp[]=new int[n];				for(int i=0;i<n;i++) {					temp[i]=(a[i]&x);				}Set<Integer> set2=new HashSet<>();				for(int i=0;i<n;i++) {										set2.add(temp[i]);				}				//System.out.println(set2);				if(set2.size()==n)					pos=false;				if(pos==false) {					System.out.println(-1);				}				else {					boolean one=false;					Set<Integer> set3=new HashSet<>();					for(int i:a)						set3.add(i);					for(int i=0;i<a.length;i++) {						if((a[i]&x)!=a[i])						if(set3.contains(a[i]&x)) {							one=true;							break;						}					}					if(one)						System.out.println(1);					else						System.out.println(2);				}		 }		                  }	 	 	 	public static boolean check(String s) {//balanced para		Stack<Character> st=new Stack<>();		//System.out.println(s);		for(char c:s.toCharArray()) {			if(c=='(')				st.push(c);			else {				if(st.isEmpty())					return false;				else if(st.peek()=='(')					st.pop();			}		}		if(!st.isEmpty())			return false;		else			return true;	}	 	 	 public static void print(String str) {		 System.out.println(str);	 }	public static int[] getFreq(String s) {		int a[]=new int[26];		for(int i=0;i<s.length();i++) {			a[s.charAt(i)-'a']++;		}		return a;			}	 	 public static boolean isPrime(int n) {		 		 for(int i=2;(i*i)<=n;i++) {			 if(n%i==0)				 return false;		 }		 return true;	 }            	                                } class Pair{	 int x;	 int y;	 long cost;	 Pair(int x,int y,long cost){		 this.x=x;		 this.y=y;		 this.cost=cost;	 } }		 		 	     class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br = new BufferedReader(new                InputStreamReader(System.in));    }     String next()    {        while (st == null || !st.hasMoreElements())        {            try            {                st = new StringTokenizer(br.readLine());            }            catch (IOException e)            {                e.printStackTrace();            }        }        return st.nextToken();    }     int nextInt()    {        return Integer.parseInt(next());    }     long nextLong()    {        return Long.parseLong(next());    }     double nextDouble()    {        return Double.parseDouble(next());    }     String nextLine()    {        String str = "";        try        {            str = br.readLine();        }        catch (IOException e)        {            e.printStackTrace();        }        return str;    }} 
