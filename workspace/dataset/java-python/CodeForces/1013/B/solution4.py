import functoolsimport timefrom collections import Counter def timer(func):    @functools.wraps(func)    def wrapper(*args, **kwargs):        stime = time.perf_counter()        res = func(*args, **kwargs)        elapsed = time.perf_counter() - stime        print(f"{func.__name__} in {elapsed:.4f} secs")        return res    return wrapper class solver:    # @timer    def __init__(self):        pass     def __call__(self):        n, x = map(int, input().strip().split())        a = list(map(int, input().strip().split()))        ax = [(ai & x) for ai in a]         def check(h):            for key, cnt in h.items():                if cnt > 1:                    return True            return False         ha = Counter()        for e in a:            ha[e] += 1        if check(ha):            print('0')            return         hx = Counter()        for e in ax:            hx[e] += 1        for e in a:            if (e & x) == e and hx[e] > 1:                print('1')                return            if (e & x) != e and hx[e] > 0:                print('1')                return        if check(hx):            print('2')            return         print('-1') solver()()
