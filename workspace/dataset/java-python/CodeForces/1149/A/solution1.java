import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;import java.util.Scanner;import java.util.*;import java.util.stream.Collectors;Â public class absolute {	static List<Integer> primes;	static int total;	static void generatePrimes()	{		boolean[] ar = new boolean[total+1];		Arrays.fill(ar, true);		ar[1]=true;		ar[2]=true;		for(int i=2;i<=Math.sqrt(total);i++)		{			if(ar[i]==true)			{				for(int j=i*i;j<=total;j+=i)ar[j]=false;			}		}		for(int i=2;i<=total;i++)if(ar[i])primes.add(i);			}	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner sc=  new Scanner(System.in);		int n = sc.nextInt();		int[] ar = new int[3];		for(int i=0;i<n;i++)ar[sc.nextInt()]++;		primes = new ArrayList<Integer>();		total = 3*n;		generatePrimes();		int[] ans = new int[n];		int i=0,primepos=0,cursum=0;		while((ar[1]>0 || ar[2]>0) && i<n )		{				int req = primes.get(primepos)-cursum;				//System.out.println("i = "+i+" cursum = "+cursum+" prime = "+primes.get(primepos)+" req = "+req);				while(req>1 && ar[2]>0)				{					ans[i]=2;req-=2;ar[2]--;					cursum += ans[i];					i++;				}				while(req>0 && ar[1]>0)				{					ans[i]=1;req-=1;ar[1]--;					cursum += ans[i];					i++;				}				primepos++;						//System.out.println(Arrays.toString(ans)+" "+i);		}		for(i=0;i<n;i++)System.out.print(ans[i]+" ");								}}
