// Problem : B. Three Religions// Contest : Codeforces - Codeforces Round #556 (Div. 1)// URL : https://codeforces.com/contest/1149/problem/B// Memory Limit : 256 MB// Time Limit : 3000 ms// Powered by CP Editor (https://github.com/cpeditor/cpeditor) import java.io.*;import java.util.*; public class a implements Runnable{	    public static void main(String[] args) {        new Thread(null, new a(), "process", 1<<26).start();    }	public void run() {		FastReader scan = new FastReader();        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));		//PrintWriter out = new PrintWriter("file.out");		Task solver = new Task();		//int t = scan.nextInt();		int t = 1;		for(int i = 1; i <= t; i++) solver.solve(i, scan, out);		out.close();	} 	static class Task {		static final int inf = Integer.MAX_VALUE; 		public void solve(int testNumber, FastReader sc, PrintWriter pw) {			//CHECK FOR QUICKSORT TLE			//***********************//			//CHECK FOR INT OVERFLOW			//***********************//			int n = sc.nextInt();			int q = sc.nextInt();			String str = sc.nextLine();			int[][] arr = new int[26][n + 5];			for(int i = 0; i < 26; i++){				int k = n;				for(int j = n + 4; j >= 0; j--){					if(j < n && str.charAt(j) - 'a' == i){						k = j;					}					arr[i][j] = k;				}			}			int[][][] dp = new int[252][252][252];			int[] len = new int[3];			char[][] strs = new char[3][252];						Arrays.fill(strs[0], ' ');			Arrays.fill(strs[1], ' ');			Arrays.fill(strs[2], ' ');			for(int i = 0; i < 252; i++) {				for(int j = 0; j < 252; j++) {					for(int k = 0; k < 252; k++) { 						dp[i][j][k] = -1;					}				}			}			for(int i = 0; i < q; i++){				String d = sc.next();				if(d.charAt(0) == '+'){					int num = sc.nextInt() - 1;					char ch = sc.next().charAt(0);					switch(num){						case 0:							strs[0][len[0]] = ch;							len[0] ++;							for(int j = 0; j <= len[1]; j++){								for(int k = 0; k <= len[2]; k++){									int a = 0, b = 0, c = 0;									a = arr[strs[0][len[0] - 1] - 'a'][dp[len[0] - 1][j][k] + 1];									if(j == 0){										b = inf;									}									else{										b = arr[strs[1][j - 1] - 'a'][dp[len[0]][j - 1][k] + 1];									}									if(k == 0){										c = inf;									}									else{										c = arr[strs[2][k - 1] - 'a'][dp[len[0]][j][k - 1] + 1];									}									dp[len[0]][j][k] = min(a, b, c);								}							}							break;						case 1:							strs[1][len[1]] = ch;							len[1] ++;							for(int j = 0; j <= len[0]; j++){								for(int k = 0; k <= len[2]; k++){									int a = 0, b = 0, c = 0;									b = arr[strs[1][len[1] - 1] - 'a'][dp[j][len[1] - 1][k] + 1];									if(j == 0){										a = inf;									}									else{										a = arr[strs[0][j - 1] - 'a'][dp[j - 1][len[1]][k] + 1];									}									if(k == 0){										c = inf;									}									else{										c = arr[strs[2][k - 1] - 'a'][dp[j][len[1]][k - 1] + 1];									}									dp[j][len[1]][k] = min(a, b, c);								}							}							break;						case 2:							strs[2][len[2]] = ch;							len[2] ++;							for(int j = 0; j <= len[0]; j++){								for(int k = 0; k <= len[1]; k++){									int a = 0, b = 0, c = 0;									a = arr[strs[2][len[2] - 1] - 'a'][dp[j][k][len[2] - 1] + 1];									if(j == 0){										b = inf;									}									else{										b = arr[strs[0][j - 1] - 'a'][dp[j - 1][k][len[2]] + 1];									}									if(k == 0){										c = inf;									}									else{										c = arr[strs[1][k - 1] - 'a'][dp[j][k - 1][len[2]] + 1];									}									dp[j][k][len[2]] = min(a, b, c);								}							}							break;					}					pw.println(dp[len[0]][len[1]][len[2]] < n ? "YES" : "NO");				}				else{					int m = sc.nextInt();					len[m - 1] --;					pw.println(dp[len[0]][len[1]][len[2]] < n ? "YES" : "NO");				}			}		}		int min (int... ar){			int min = inf;			for(int i = 0; i < ar.length; i++) {				min = Math.min(min, ar[i]);			}			return min;		}	}	static long binpow(long a, long b, long m) {		a %= m;		long res = 1;		while (b > 0) {			if ((b & 1) == 1)				res = res * a % m;			a = a * a % m;			b >>= 1;		}		return res;	}	static void sort(int[] x){		shuffle(x);		Arrays.sort(x);	}	static void sort(long[] x){		shuffle(x);		Arrays.sort(x);	}	static class tup implements Comparable<tup>{		int a, b;		tup(int a,int b){			this.a=a;			this.b=b;		}		@Override		public int compareTo(tup o){			return Integer.compare(o.b,b);		}	}	static void shuffle(int[] a) {		Random get = new Random();		for (int i = 0; i < a.length; i++) {			int r = get.nextInt(a.length);			int temp = a[i];			a[i] = a[r];			a[r] = temp;		}	} 	static void shuffle(long[] a) {		Random get = new Random();		for (int i = 0; i < a.length; i++) {			int r = get.nextInt(a.length);			long temp = a[i];			a[i] = a[r];			a[r] = temp;		}	} 	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		public FastReader(String s) throws FileNotFoundException {			br = new BufferedReader(new FileReader(new File(s)));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} }
