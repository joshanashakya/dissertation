import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        int[][][] dp = new int[251][251][251];        int[][] next = new int[100002][26];        int MAX = 100001;        int N;        int q;        ArrayList<Integer> s1 = new ArrayList<>();        ArrayList<Integer> s2 = new ArrayList<>();        ArrayList<Integer> s3 = new ArrayList<>();         public void solve(int testNumber, InputReader in, PrintWriter out) {            for (int i = 0; i <= 250; i++) {                for (int j = 0; j <= 250; j++) {                    for (int k = 0; k <= 250; k++) {                        dp[i][j][k] = MAX;                    }                }            }            N = in.nextInt();            q = in.nextInt();            char[] str = in.next().toCharArray();            int[] nextCnt = new int[26];            Arrays.fill(nextCnt, MAX);            dp[0][0][0] = 0;            for (int i = MAX; i >= N + 1; i--) {                next[i] = nextCnt.clone();            }            for (int i = N; i >= 1; i--) {                next[i] = nextCnt.clone();                nextCnt[str[i - 1] - 'a'] = i;            }            next[0] = nextCnt;            for (int i = 0; i < q; i++) {                char id = in.next().charAt(0);                int sNum = in.nextInt();                if (id == '+') {                    int append = in.next().charAt(0) - 'a';                    if (sNum == 1) {                        s1.add(append);                        for (int b = 0; b <= s2.size(); b++) {                            for (int c = 0; c <= s3.size(); c++) {                                dp[s1.size()][b][c] = -1;                            }                        }                    } else if (sNum == 2) {                        s2.add(append);                        for (int b = 0; b <= s1.size(); b++) {                            for (int c = 0; c <= s3.size(); c++) {                                dp[b][s2.size()][c] = -1;                            }                        }                    } else {                        s3.add(append);                        for (int a = 0; a <= s1.size(); a++) {                            for (int b = 0; b <= s2.size(); b++) {                                dp[a][b][s3.size()] = -1;                            }                        }                    }                } else {                    int start1 = 0;                    int start2 = 0;                    int start3 = 0;                    if (sNum == 1) {                        start1 = s1.size();                    } else if (sNum == 2) {                        start2 = s2.size();                    } else {                        start3 = s3.size();                    }                    for (int a = start1; a <= s1.size(); a++) {                        for (int b = start2; b <= s2.size(); b++) {                            for (int c = start3; c <= s3.size(); c++) {                                dp[a][b][c] = MAX;                            }                        }                    }                    if (sNum == 1) {                        s1.remove(s1.size() - 1);                    } else if (sNum == 2) {                        s2.remove(s2.size() - 1);                    } else {                        s3.remove(s3.size() - 1);                    }                 }                if (getDp(s1.size(), s2.size(), s3.size()) <= N) {                    out.println("YES");                } else {                    out.println("NO");                }            }        }         int getDp(int a, int b, int c) {            if (dp[a][b][c] == -1) {                dp[a][b][c] = MAX;                if (a != 0) {                    dp[a][b][c] = Math.min(next[getDp(a - 1, b, c)][s1.get(a - 1)], dp[a][b][c]);                }                if (b != 0) {                    dp[a][b][c] = Math.min(next[getDp(a, b - 1, c)][s2.get(b - 1)], dp[a][b][c]);                }                if (c != 0) {                    dp[a][b][c] = Math.min(next[getDp(a, b, c - 1)][s3.get(c - 1)], dp[a][b][c]);                }            }            return dp[a][b][c];        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
