import java.io.*;import java.util.*;  public class Main {     public static void main(String[] args) {        MyScanner sc = new MyScanner();        out = new PrintWriter(new BufferedOutputStream(System.out));         int a = sc.nextInt();        int b = sc.nextInt();        int count = 0;         if(a > b) {            count = b;        } else {            count = a;        }         System.out.print(count + " ");        count = Math.abs(a - b) / 2;        System.out.print(count);               out.close();     }  //    int n = sc.nextInt();//    int l = sc.nextInt();////    int[] arr = new int[n];//        for(int i=0; i<n; i++) {//        arr[i] = sc.nextInt();//    }////        Arrays.sort(arr);//    //System.out.println(Arrays.toString(arr));//    int a = 0;//    int b = arr[arr.length - 1]; //    public static int gcd1(int a, int b) {//        BigInteger b1 = BigInteger.valueOf(a);//        BigInteger b2 = BigInteger.valueOf(b);//        BigInteger gcd = b1.gcd(b2);//        return gcd.intValue();////    }////    public static int lcm2(int a, int b) {//        return (a*b)/ gcd1(a,b);//    }//    public static int lcm3(int a, int b, int c) {//        return lcm2(a,lcm2(b,c));//    }//    public static int lcm4(int a, int b, int c, int d) {//        return lcm2(lcm2(a,b), lcm2(c,d));//    }                 public static PrintWriter out;    //-----------MyScanner class for faster input----------    public static class MyScanner {        BufferedReader br;        StringTokenizer st;         public MyScanner() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine(){            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }     } }    //    MyScanner sc = new MyScanner();//        out = new PrintWriter(new BufferedOutputStream(System.out));//                int numOfTests = sc.nextInt();////                for(int i=0; i<numOfTests; i++) {//        int numOfStations = sc.nextInt();//        //System.out.println(numOfStations);//        int[] arrive = new int[numOfStations + 1];//        int[] depart = new int[numOfStations + 1];//        int[] tm = new int[numOfStations + 1];//        depart[0] = 0;////        for(int j=1; j<=numOfStations; j++) {//        arrive[j] = sc.nextInt();//        depart[j] = sc.nextInt();//        }////        for(int k=1; k<=numOfStations; k++) {//        tm[k] = sc.nextInt();//        }////        int res = 0;////        for(int x=1; x<=numOfStations; x++) {////        res = res + (arrive[x] - depart[x-1]) + tm[x];//        int temp = depart[x] - arrive[x];////        if(temp % 2 == 0) {//        temp = temp / 2;//        } else {//        temp = (temp / 2) + 1;//        }////        if(x<numOfStations) {//        res += temp;//        if(res < depart[x]) {//        res = depart[x];//        }//        }////        }//        System.out.println(res);////////        }        //int t = sc.nextInt();//        for(int i=0; i<t; i++) {//        int n = sc.nextInt();//        ArrayList<Integer> list = new ArrayList<>();//        for(int j=0; j<n; j++) {//        list.add(sc.nextInt());//        }//////        int tempC = 0;//        int tempM = 0;//        int tempS = 0;//        int tempN = n;//        int retVal = 0;//        if(list.size() == 1) {//        tempS = list.get(0);//        tempM = Integer.MAX_VALUE;//        }////        for(int k=1; k<list.size(); k++) {//        if(k - 1 == 0) {//        int first = list.get(0);//        int second = list.get(1);//        tempC = second - first;//        tempM = Integer.MAX_VALUE;//        tempS = first;////        if(tempC < 0) {//        retVal = -1;//        }//        }////        // we have tempC//        // we have tempM//        // we have tempS//        // we have tempN////        if(retVal != -1) {//        int a1 = list.get(k-1);//        int a2 = list.get(k);//        // (a1 = 9) + (c = 8) = 17//        // if 9 + 8 ==//        if(a1 + tempC == a2) {//        tempC = tempC;//        tempM = tempM;////        } else if (a1 + tempC < a2) {//        retVal = -1;//        } else if (a1 + tempC > a2) {//        tempM = a1 + tempC - a2;//        }//        }////        }////        if(tempS < 0) {//        System.out.println(-1);//        continue;//        }////        if(retVal == -1) {//        System.out.println(-1);//        continue;//        }////        if(tempC >= tempM) {//        System.out.println(-1);//        continue;//        }//        if(tempM == Integer.MAX_VALUE) {//        System.out.println(0);//        continue;//        }////        System.out.println(tempM + " " + tempC);////        }  
