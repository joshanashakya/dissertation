import java.util.Scanner;import java.io.*;import java.util.*;import java.math.*;import java.lang.*;import static java.lang.Math.*; public class Test{	static InputReader sc=new InputReader(System.in);	static PrintWriter pr=new PrintWriter(System.out); 	public static void main(String args[]) throws Exception	{		int n = sc.nextInt();		int m = sc.nextInt();		int a[][] = new int[n][m];		int mul = n * m;		for(int i=0;i<n;i++)		{			for(int j=0;j<m;j++)			{				a[i][j] = sc.nextInt();			}		} 		long ans= 0;		for(int i=0;i<n;i++)		{			int w = 0;			int b = 0;			for(int j=0;j<m;j++)			{				if(a[i][j] == 0)				{					w++;				}				else 				{					b++;				}			} 			ans += (long)Math.pow(2,b) - 1;			ans += (long)Math.pow(2,w) - 1;		} 		for(int i=0;i<m;i++)		{			int w = 0;			int b = 0;			for(int j=0;j<n;j++)			{				if(a[j][i] == 0)				{					w++;				}				else 				{					b++;				}			} 			ans += (long)Math.pow(2,b) - 1;			ans += (long)Math.pow(2,w) - 1;		} 		pr.println(ans - mul);		pr.close();	}  		private void shuffle(int[] arr)	{		Random ran = new Random();		for (int i = 0; i < arr.length; i++) {			int i1 = ran.nextInt(arr.length);			int i2 = ran.nextInt(arr.length); 			int temp = arr[i1];			arr[i1] = arr[i2];			arr[i2] = temp;		}	}		static class InputReader	{		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars;		private SpaceCharFilter filter;				public InputReader(InputStream stream)		{			this.stream = stream;		}				public int read()		{			if (numChars==-1) 				throw new InputMismatchException();						if (curChar >= numChars)			{				curChar = 0;				try 				{					numChars = stream.read(buf);				}				catch (IOException e)				{					throw new InputMismatchException();				}								if(numChars <= 0)									return -1;			}			return buf[curChar++];		}	 		public String nextLine()		{			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));			String str = "";			try			{				str = br.readLine();			}			catch (IOException e)			{				e.printStackTrace();			}			return str;		}		public int nextInt()		{			int c = read();						while(isSpaceChar(c)) 				c = read();						int sgn = 1;						if (c == '-') 			{				sgn = -1;				c = read();			}						int res = 0;			do 			{				if(c<'0'||c>'9') 					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			while (!isSpaceChar(c)); 						return res * sgn;		}				public long nextLong() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') 			{				sgn = -1;				c = read();			}			long res = 0;						do 			{				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			while (!isSpaceChar(c));				return res * sgn;		}				public double nextDouble() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') 			{				sgn = -1;				c = read();			}			double res = 0;			while (!isSpaceChar(c) && c != '.') 			{				if (c == 'e' || c == 'E')					return res * Math.pow(10, nextInt());				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			if (c == '.') 			{				c = read();				double m = 1;				while (!isSpaceChar(c)) 				{					if (c == 'e' || c == 'E')						return res * Math.pow(10, nextInt());					if (c < '0' || c > '9')						throw new InputMismatchException();					m /= 10;					res += (c - '0') * m;					c = read();				}			}			return res * sgn;		}				public String readString() 		{			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do 			{				res.appendCodePoint(c);				c = read();			} 			while (!isSpaceChar(c));						return res.toString();		}	 		public boolean isSpaceChar(int c) 		{			if (filter != null)				return filter.isSpaceChar(c);			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}	 		public String next() 		{			return readString();		}				public interface SpaceCharFilter 		{			public boolean isSpaceChar(int ch);		}	}}
