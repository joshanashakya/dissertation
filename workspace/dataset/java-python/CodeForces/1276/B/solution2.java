import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*; public class Main {	static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[(int) (2e6+10)]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         }     } 	public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));	public static Reader sc = new Reader(); 	public static List<Integer>[] edges;		public static void main(String[] args) throws IOException{				int t = sc.nextInt();		while(t-->0) {			int n = sc.nextInt();			int m = sc.nextInt();			int a = sc.nextInt();			int b = sc.nextInt();			boolean[] visa = new boolean[n+1];			boolean[] visb = new boolean[n+1];			edges = new ArrayList[n+1];			for(int i=0;i<edges.length;++i) edges[i] = new ArrayList<>();			for(int i=0;i<m;++i) {				int u = sc.nextInt();				int v = sc.nextInt();				edges[u].add(v);				edges[v].add(u);			}			dfs(a,a,b,visa);			dfs(b,b,a,visb);						long A = 0 , B = 0;			for(int i=1;i<=n;++i) {				if(i == a || i == b || (visa[i] && visb[i])) continue;				if(visa[i]) ++A;				if(visb[i]) ++B;			}			long ans = A*B;			out.println(ans);		} 		out.close();	} 	private static void dfs(int v, int prev, int u, boolean[] vis) {		vis[v] = true;		for(int node : edges[v]) {			if(node == prev || node == u || vis[node]) continue;			dfs(node,v,u,vis);		}			}}
