from collections import defaultdictclass DisjSet:     def __init__(self):         self.rank = defaultdict(lambda:1)        self.parent = defaultdict(lambda:-1)     def find(self, x):         if self.parent[x] == -1 or self.parent[x] == x:             self.parent[x]=x        else:            self.parent[x] = self.find(self.parent[x])         return self.parent[x]               def Union(self, x, y):          xset = self.find(x)         yset = self.find(y)           if xset == yset:             return         if self.rank[xset] < self.rank[yset]:             self.parent[xset] = yset          elif self.rank[xset] > self.rank[yset]:             self.parent[yset] = xset          else:             self.parent[yset] = xset             self.rank[xset] = self.rank[xset] + 1        self.parent[y]=xn,k,m=map(int,input().split())arr=list(input().split())cost=list(map(int,input().split()))obj=DisjSet()cnt=defaultdict(lambda:None)for _ in range(k):    temp=list(map(int,input().split()))    #print(temp)    for val in temp[1:]:        obj.Union(arr[temp[1]-1],arr[val-1])        for x in range(n):    if cnt[obj.find(arr[x])]==None:        cnt[obj.find(arr[x])]=cost[x]    else:        cnt[obj.find(arr[x])]=min(cost[x],cnt[obj.find(arr[x])])        ans=0arr=list(input().split())for x in range(m):    ans+=cnt[obj.find(arr[x])]    #print(arr[x],obj.find(arr[x]))print(ans)                    
