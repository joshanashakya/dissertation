import sys,mathfrom collections import deque,defaultdictimport operator as opfrom functools import reducefrom itertools import permutations #sys.setrecursionlimit(10**4) #C:\Users\bittu\OneDrive\Documents\codeforcesI=sys.stdin.readline #alpha="abcdefghijklmnopqrstuvwxyz" """x_move=[-1,0,1,0,-1,1,1,-1]y_move=[0,1,0,-1,1,1,-1,-1]"""def ii():	return int(I().strip())def li():	return list(map(int,I().strip().split()))def mi():	return map(int,I().strip().split())  def ncr(n, r):    r = min(r, n-r)    numer = reduce(op.mul, range(n, n-r, -1), 1)    denom = reduce(op.mul, range(1, r+1), 1)    return numer // denom   def gcd(x, y):    while y:        x, y = y, x % y    return x   	 def isPrime(n):	if n<=1:		return False	elif n<=2:		return True	else:				for i in range(2,int(n**.5)+1):			if n%i==0:				return False		return True #print("Case #"+str(_+1)+":",abs(cnt-k))  def main():	n,k,m=mi()	words=list(I().strip().split())	# print(words)	d=defaultdict(int) 	for i in range(n):		d[words[i]]=i	costs=li() 	for i in range(k):		maps=li()		tmp=math.inf		for j in maps[1:]:			tmp=min(tmp,costs[j-1]) 		for j in maps[1:]:			costs[j-1]=tmp 	msg=list(I().strip().split())	ans=0	for i in msg:		ans+=costs[d[i]]	# print(costs)	print(ans)    		 	 	 											 		    		          	      		 	   	        					     		      	 	   		    		 	 			 	 		   		 			   		    				 	    				 	  			 	      		   				   		 		 		  		 		 		 	                  							 		   		 	 			   		  		       	 			             	 	        		  		  						         									     		        	 	   		        	   			    	          	  	 	 		   		 				  		 			 		    		    			            								   		  													        	     					   				     	                         			     if __name__ == '__main__':	main()
