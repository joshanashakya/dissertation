import java.io.*; import java.util.*; public class Solution {	 public static void main(String[] args) throws Exception    {		 FastReader fr=new FastReader();		 int t=fr.nextInt();		 while(t-->0) {		   String s=fr.next();		   int n=s.length();		   int one=0;		   int zero=0;		  		   for(char c:s.toCharArray()) {			   if(c=='0')				   zero++;			   else				   one++;				   		   }		   int min=Integer.MAX_VALUE;		   int prefz=0;		   int prefo=0;		   for(int i=0;i<n;i++) {			   if(s.charAt(i)=='0') {				 prefz++;				  			   }			   else			   {				  prefo++;			   }			   if(s.charAt(i)=='0')				   zero--;			   else				   one--;			   min=Math.min(min,Math.min(prefz+one,prefo+zero));			  		   }		  		  		   		   System.out.println(min);			   					 					 }		                  }	 	 	 	public static boolean check(String s) {//balanced para		Stack<Character> st=new Stack<>();		//System.out.println(s);		for(char c:s.toCharArray()) {			if(c=='(')				st.push(c);			else {				if(st.isEmpty())					return false;				else if(st.peek()=='(')					st.pop();			}		}		if(!st.isEmpty())			return false;		else			return true;	}	 	 	 public static void print(String str) {		 System.out.println(str);	 }	public static int[] getFreq(String s) {		int a[]=new int[26];		for(int i=0;i<s.length();i++) {			a[s.charAt(i)-'a']++;		}		return a;			}	 	 public static boolean isPrime(int n) {		 		 for(int i=2;(i*i)<=n;i++) {			 if(n%i==0)				 return false;		 }		 return true;	 }            	                                } class Pair{	 int x;	 int y;	 long cost;	 Pair(int x,int y,long cost){		 this.x=x;		 this.y=y;		 this.cost=cost;	 } }		 		 	     class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br = new BufferedReader(new                InputStreamReader(System.in));    }     String next()    {        while (st == null || !st.hasMoreElements())        {            try            {                st = new StringTokenizer(br.readLine());            }            catch (IOException e)            {                e.printStackTrace();            }        }        return st.nextToken();    }     int nextInt()    {        return Integer.parseInt(next());    }     long nextLong()    {        return Long.parseLong(next());    }     double nextDouble()    {        return Double.parseDouble(next());    }     String nextLine()    {        String str = "";        try        {            str = br.readLine();        }        catch (IOException e)        {            e.printStackTrace();        }        return str;    }} 
