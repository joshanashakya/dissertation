import timestartTimeProblem=time.time() import fileinput, sys, itertools, functools, mathfrom bisect import *from heapq import *from collections import *  MOD = 10**9+7 #isprimedef lcm(a, b):      return (a*b)/math.gcd(a, b) def precompute_binom(n,p):    facts = [0]*n    invfacts = [0]*n     facts[0] = 1    invfacts[0] = 1     for i in range(1,n):                facts[i] = (facts[i-1]*i)%p        invfacts[i] = pow(facts[i],p-2,p)     return facts, invfacts def binom_pre_computed(facts, invfacts, n, k, p):    # n! / (k!^(p-2) * (n-k)!^(p-2)) (mod p)    return (facts[n] * ((invfacts[k]*invfacts[n-k] % p))) % p class InputHelper:    def __init__(self):        self.myinput = fileinput.input()     def isLocal(self):        return not fileinput.isstdin()     def int(self):        return int(self.myinput.readline().rstrip())     def ints(self):        return [int(_) for _ in self.myinput.readline().rstrip().split()]     def str(self):        return self.myinput.readline().rstrip()     def strs(self):        return [_ for _ in self.myinput.readline().rstrip().split()] class OutputHelper:    def int(self, a):        print(a)         def ints(self, a):          print(" ".join([str(_) for _ in a]))        def intsNL(self, a):        for _ in a:            print(_)        def str(self, s):        print(s)     def strs(self, s):        print(" ".join([_ for _ in s]))     def strsNL(self, s):        for st in s:            print(st)     In = InputHelper()Out = OutputHelper() ######################################## sys.setrecursionlimit(10000)  class Test():    def go(self):        t = In.int()         for _ in range(t):            s = In.str()             zeros = [0]*len(s)                        ones = [0]*len(s)             if s[0]=="0":                zeros[0]+=1            else:                ones[0]+=1                        for i in range(1, len(s)):                zeros[i] = zeros[i-1]                ones[i] = ones[i-1]                 if s[i]=="0":                    zeros[i]+=1                else:                    ones[i]+=1                     ans = 10**9             for i in range(len(s)):                ans = min(ans, ones[i] + (zeros[-1]-zeros[i]))                ans = min(ans, zeros[i] + (ones[-1]-ones[i]))             Out.int(ans)    Test().go() ###################################### if len(sys.argv)>2 and sys.argv[2]=="TIMEIT":    fin = (time.time()-startTimeProblem)*1000    print("{:.2f}".format(fin) + "ms")
