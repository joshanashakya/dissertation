import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main{	public static void main(String[] args) {		new Thread(null, new Runnable() {			public void run() {                solve();            }        }, "1", 1 << 26).start();	}	static void solve () {		FastReader fr =new FastReader();	PrintWriter op =new PrintWriter(System.out);  		int K =fr.nextInt() ,i =1<<29 ,j =29 ,k ,sp ,n =2 ,l ; 		ArrayList<ArrayList<Integer>> g =new ArrayList<>() ; 		g.add(new ArrayList<>()) ;	g.add(new ArrayList<>()) ;  		while ((K&i)==0) { 			i >>= 1 ;	--j ; 		} 		sp =j ;  		if (sp==0) { 			g.get(0).add(1) ;	g.get(1).add(0) ; 		} 		else {	 		g.add(new ArrayList<>()) ;	g.add(new ArrayList<>()) ; 			g.get(0).add(n) ;	g.get(n++).add(0) ;	g.get(0).add(n) ;	g.get(n++).add(0) ; 			for (k =2 ; k<=sp ; ++k) {				g.add(new ArrayList<>()) ;	g.add(new ArrayList<>()) ; 				g.get(n-2).add(n) ;	g.get(n-1).add(n) ;	g.get(n).add(n-2) ;	g.get(n).add(n-1) ;				g.get(n-2).add(n+1) ;	g.get(n-1).add(n+1) ;	g.get(n+1).add(n-2) ;	g.get(n+1).add(n-1) ;				n +=2 ;			} 			g.get(1).add(n-1) ;	g.get(1).add(n-2) ;			g.get(n-1).add(1) ;	g.get(n-2).add(1) ;		} 		for (--j ; j>0 ; --j) {			i >>= 1 ;	if ((K&i)==0)	continue;	l =1 ; 			++l ;	g.add(new ArrayList<>()) ;			g.get(n).add(0) ;	g.get(0).add(n) ;	++n ; 			for (k =sp-1 ; k>j ; --k) {				++l ;	g.add(new ArrayList<>()) ;				g.get(n).add(n-1) ;	g.get(n-1).add(n) ;	++n ;			} 			g.get(n-1).add(2*l) ;	g.get(n-1).add(2*l+1) ;			g.get(2*l).add(n-1) ;	g.get(2*l+1).add(n-1) ;		} 		if (j==0 && (K&1)==1) {			g.add(new ArrayList<>()) ;			g.get(n).add(0) ;	g.get(0).add(n) ;	++n ; 			for (k =2 ; k<=sp ; ++k) {				g.add(new ArrayList<>()) ;				g.get(n).add(n-1) ;	g.get(n-1).add(n) ;	++n ;			} 			g.get(n-1).add(1) ;	g.get(1).add(n-1) ;		} 		boolean mrk[][] =new boolean[n][n] ;  		for (i =0 ; i<n ; ++i) { 			for (j =0 ; j<g.get(i).size() ; ++j)	mrk[i][g.get(i).get(j)] =true ; 		} 		op.println(n) ; 		for (i =0 ; i<n ; ++i) { 			for (j =0 ; j<n ; ++j) { 				if (mrk[i][j])	op.print('Y') ;	else 	op.print('N') ; 			} 			op.println() ; 		}		op.flush();	op.close();	}	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br =new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st==null || (!st.hasMoreElements())) 			{				try				{					st =new StringTokenizer(br.readLine());				}				catch(IOException e)				{					e.printStackTrace();				}							}			return st.nextToken();		} 		String nextLine() {			String str =""; 			try			{				str =br.readLine();			}			catch(IOException e)			{				e.printStackTrace();			} 			return str;		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next()) ;		}	}}
