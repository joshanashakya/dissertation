import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author beginner1010 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        final int maxTerms = 2000;        final int maxElement = 1000 * 1000;         ArrayList<Integer> factors(int k) {            ArrayList<Integer> res = new ArrayList<>();            for (long div1 = 1; div1 * div1 <= k; div1++) {                if (k % div1 == 0) {                    if (div1 >= 3 && div1 <= maxTerms)                        res.add((int) div1);                    int div2 = (int) (k / div1);                    if (div2 >= 3 && div2 <= maxTerms) {                        res.add(div2);                    }                }            }            return res;        }         public void solve(int testNumber, InputReader in, PrintWriter out) {            int k = in.nextInt();            ArrayList<Integer> factors = factors(k);            for (int t = 3; t <= maxTerms; t++) {                for (int r = 2; r <= t; r++) {                    if ((k + t) % r == 0) {                        int x = (k + t) / r - 1;                        int req = ((x + 1) + maxElement - 1) / maxElement;                        if (req <= t - r) {                            out.println(t);                            for (int i = 0; i < r - 2; i++) {                                out.print("0 ");                            }                            out.print("1 -2");                            int sum = 0;                            for (int i = 0; i < t - r; i++) {                                int element = Math.min(maxElement, x + 1 - sum);                                out.print(" " + element);                                sum += element;                            }                            out.println();                            return;                        }                    }                }            }            out.println("-1");         }     }     static class InputReader {        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputStream stream;         public InputReader(InputStream stream) {            this.stream = stream;        }         private boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private int read() {            if (numChars == -1)                throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isWhitespace(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            } while (!isWhitespace(c));            return res * sgn;        }     }} 
