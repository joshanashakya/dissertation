import java.io.*;import java.util.*; public class Main {    static PrintWriter pw;    static Scanner sc;    static long ceildiv(long x, long y) { return (x+y-1)/y; }    static int mod(long x, int m) { return (int)((x%m+m)%m); }    static void put(TreeMap<Integer, Integer> map, Integer p){if(map.containsKey(p)) map.replace(p, map.get(p)+1); else map.put(p, 1); }    static void rem(TreeMap<Integer, Integer> map, Integer p){ if(map.get(p)==1) map.remove(p);else map.replace(p, map.get(p)-1); }    static long gcd(long x, long y) {return y==0?x:gcd(y, x%y);}    static int Int(boolean x){ return x?1:0; }    static int mod=998244353, inf=(int)1e9;    static long[] fact;    public static void main(String[] args) throws Exception {        sc = new Scanner(System.in);        pw=new PrintWriter(System.out);        int n=sc.nextInt(), a=sc.nextInt(), b=5*sc.nextInt();        int temp=n;        int ans=n;        while(temp>a){            ans=Math.min(ans, temp%b);            temp-=a;        }        ans=Math.min(temp%b, ans);        while(n>b){            ans=Math.min(ans, n%a);            n-=b;        }        ans=Math.min(n%a, ans);        pw.println(ans);        pw.close();    }    static Main.Pair Euclid(int x, int y){        if(y==0)            return new Main.Pair(1, 0);        Main.Pair p=Euclid(y, x%y);        int a=p.y, b=(int)(p.x-p.y*1l*(x/y));        return new Main.Pair(a, b);    }    static void floyd(int[][] arr, int[][] par){        for(int i=0; i<arr.length; i++){            for(int j=0; j<arr.length; j++){                for(int k=0; k<arr.length; k++){                    if(arr[j][k]>arr[j][i]+arr[i][k]){                        par[j][k]=par[i][k];                        arr[j][k]=arr[j][i]+arr[i][k];                    }                }            }        }    }    static void printArr(int[] arr) {        for (int i = 0; i < arr.length - 1; i++)            pw.print(arr[i] + " ");        pw.println(arr[arr.length - 1]);    }    static void printArr(long[] arr) {        for (int i = 0; i < arr.length - 1; i++)            pw.print(arr[i] + " ");        pw.println(arr[arr.length - 1]);    }    static void printArr(Integer[] arr) {        for (int i = 0; i < arr.length; i++)            pw.print(arr[i] + " ");        pw.println();    }    static void printArr(char[] arr) {        for (int i = 0; i < arr.length; i++)            pw.print(arr[i]==0? '1': arr[i]);        pw.println();    }    static void printArr(ArrayList<Integer> list) {        for (int i = 0; i < list.size(); i++)            pw.print(list.get(i)+" ");        pw.println();    }    static class Scanner {        StringTokenizer st;        BufferedReader br;        public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public Scanner(FileReader r) {            br = new BufferedReader(r);        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public int[] nextArr(int n) throws IOException {            int[] arr = new int[n];            for (int i = 0; i < arr.length; i++)                arr[i] = nextInt();            return arr;        }        public Integer[] nextsort(int n) throws IOException{            Integer[] arr=new Integer[n];            for(int i=0; i<n; i++)                arr[i]=nextInt();            return arr;        }        public Pair nextPair() throws IOException{            return new Pair(nextInt(), nextInt());        }        public Pair[] nextPairArr(int n) throws IOException{            Pair[] arr=new Pair[n];            for(int i=0; i<n; i++)                arr[i]=nextPair();            return arr;        }        public boolean ready() throws IOException {            return br.ready();        }    }    static class Pair implements Comparable<Pair>{        int x;        int y;        public Pair(int x, int y) {            this.x=x;            this.y=y;        }        public int hashCode() {            return (this.x*1000+this.y);        }        public int compareTo(Pair p){            if(x!=p.x)                return x-p.x;            return p.y-y;        }        public boolean equals(Object obj) {            if (obj == null) {                return false;            }            if (this.getClass() != obj.getClass()) {                return false;            }            Pair p = (Pair) obj;            return this.x==p.x && this.y==p.y;        }        public Pair clone(){            return new Pair(x, y);        }        public String toString(){            return this.x+" "+this.y;        }        public void add(Pair p){            x+=p.x;            y+=p.y;        }    }}
