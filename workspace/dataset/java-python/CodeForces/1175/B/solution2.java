import java.io.*;import java.util.*;public class Main {    public static void main(String[] args) {        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int l=input.nextInt();            Stack<Long> st=new Stack<>();            long ans=0;            long inf=(long)Math.pow(2,32);            st.push(1L);            for(int i=0;i<l;i++)            {                String s=input.next();                if (s.equals("for"))                {                    int n=input.nextInt();                    long x=st.peek();                    x=x*n;                    st.push(Math.min(inf,x));                }                else if(s.equals("add"))                {                    ans+=st.peek();                }                else                {                    st.pop();                }            }            if(ans>=inf)            {                out.println("OVERFLOW!!!");            }            else            {                out.println(ans);            }        }        out.close();    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
