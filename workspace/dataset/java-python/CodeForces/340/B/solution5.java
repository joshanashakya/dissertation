import java.util.*;import java.io.*; public class MaximalAreaQuadrilateral{ 	public static void main(String[] args)	{		JS scan = new JS();		int n = scan.nextInt();		Vec[] arr = new Vec[n];		for(int i = 0; i < n; i++) arr[i] = new Vec(scan.nextLong(), scan.nextLong());		double ans = 0;		for(int i = 0; i < n; i++) {			for(int j = i+1; j < n; j++) {				long areaA = 0;				long areaB = 0;				for(int k = 0; k < n; k++) {					if(k == i || k == j) continue;					long r = triArea(arr[i], arr[j], arr[k]);					if(r < 0) if(areaA > r) areaA = r;					if(r > 0) if(areaB < r) areaB = r;				}				if(areaA == 0 || areaB == 0) continue;				ans = Math.max(ans, areaB-areaA);			}		}		System.out.println(ans*0.5);	}		static long triArea(Vec a, Vec b, Vec c) {		Vec ab = b.sub(a);		Vec ac = c.sub(a);		return ab.cross(ac);	}		static class Vec implements Comparable<Vec> {		long x, y;				public Vec(long x, long y) {			this.x=x;			this.y=y;		}				public Vec sub(Vec v) {			return new Vec(x-v.x, y-v.y);		}				public long cross(Vec v) {			return x*v.y-y*v.x;		}				public long dot(Vec v) {			return x*v.x+y*v.y;		}				//origin->q1, axes-> quadrant in ccw direction		public int quadrant() {			if (x==0||y==0) {				if (y==0)					if (x>=0)						return 1;					else						return 3;				else					if (y>=0)						return 2;					else						return 4;			}			if (x>0)				if (y>0)					return 1;				else					return 4;			else				if (y>0)					return 2;				else					return 3;		}				public int compareTo(Vec o) {			if (quadrant()==o.quadrant())				return -Long.signum(cross(o));			return Integer.compare(quadrant(), o.quadrant());		}	}		static class JS{		public int BS = 1<<16;		public char NC = (char)0;		byte[] buf = new byte[BS];		int bId = 0, size = 0;		char c = NC;		double num = 1;		BufferedInputStream in; 		public JS() {			in = new BufferedInputStream(System.in, BS);		} 		public JS(String s) throws FileNotFoundException {			in = new BufferedInputStream(new FileInputStream(new File(s)), BS);		} 		public char nextChar(){			while(bId==size) {				try {					size = in.read(buf);				}catch(Exception e) {					return NC;				}								if(size==-1)return NC;				bId=0;			}			return (char)buf[bId++];		} 		public int nextInt() {			return (int)nextLong();		} 		public long nextLong() {			num=1;			boolean neg = false;			if(c==NC)c=nextChar();			for(;(c<'0' || c>'9'); c = nextChar()) {				if(c=='-')neg=true;			}			long res = 0;			for(; c>='0' && c <='9'; c=nextChar()) {				res = (res<<3)+(res<<1)+c-'0';				num*=10;			}			return neg?-res:res;		} 		public double nextDouble() {			double cur = nextLong();			return c!='.' ? cur:cur+nextLong()/num;		} 		public String next() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c>32) {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public String nextLine() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c!='\n') {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public boolean hasNext() {			if(c>32)return true;			while(true) {				c=nextChar();				if(c==NC)return false;				else if(c>32)return true;			}		}	}}
