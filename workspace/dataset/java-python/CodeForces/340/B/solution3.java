import java.awt.Point;import java.awt.Polygon;import java.io.*;import java.util.*; public class Main {	static Scanner sc = new Scanner(System.in);	static PrintWriter out = new PrintWriter(System.out); 	static int area(Point a, Point b, Point c) {		return Math.abs(a.x * b.y - a.y * b.x + b.x * c.y - b.y * c.x + c.x * a.y - c.y * a.x);	} 	static boolean ccw(Point p, Point q, Point r) {		return new Vector(p, q).cross(new Vector(p, r)) > 0;	} 	public static void main(String[] args) throws Exception {		int n = sc.nextInt();		Point pts[] = new Point[n];		for (int i = 0; i < n; i++) {			pts[i] = new Point(sc.nextInt(), sc.nextInt());		} 		int ans = 0;		for (int i = 0; i < n; i++) {			for (int j = i + 1; j < n; j++) {				int maxLeft = 0, maxRight = 0;				for (int k = 0; k < n; k++) {					if (k != i && k != j) {						int area = area(pts[i], pts[k], pts[j]);						if (ccw(pts[i], pts[j], pts[k])) {							maxLeft = Math.max(maxLeft, area);						} else {							maxRight = Math.max(maxRight, area);						}					}				}				if (maxLeft != 0 && maxRight != 0)					ans = Math.max(ans, Math.abs(maxLeft + maxRight));			}		}		out.println(ans / 2.0);		out.close();	} 	static class Vector {		int x, y; 		Vector(int a, int b) {			x = a;			y = b;		} 		Vector(Point a, Point b) {			this(b.x - a.x, b.y - a.y);		} 		int cross(Vector v) {			return x * v.y - y * v.x;		}	} } class Scanner {	StringTokenizer st;	BufferedReader br; 	public Scanner(InputStream system) {		br = new BufferedReader(new InputStreamReader(system));	} 	public Scanner(String file) throws Exception {		br = new BufferedReader(new FileReader(file));	} 	public String next() throws IOException {		while (st == null || !st.hasMoreTokens())			st = new StringTokenizer(br.readLine());		return st.nextToken();	} 	public String nextLine() throws IOException {		return br.readLine();	} 	public int nextInt() throws IOException {		return Integer.parseInt(next());	} 	public double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	public Long nextLong() throws IOException {		return Long.parseLong(next());	}}
