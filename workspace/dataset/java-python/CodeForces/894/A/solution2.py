# https://codeforces.com/problemset/problem/894/A # variation of find subsequence of A in B - we returned if the len of the LCS is equal to s2 def subsequence(s1, s2, n, m):    dp = [[0] * (m + 1) for _ in range(n + 1)]    for i in range(n + 1):        dp[i][0] = 1     for i in range(1, n + 1):        for j in range(1, m + 1):            if s1[i - 1] == s2[j - 1]:                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]  # this thing is still not clear            else:                dp[i][j] = dp[i - 1][j]    return dp[n][m]  # print(dp)  # from itertools import combinations as c# s, n = input(), 0# for a in c(s, 3):#     if ''.join(a) == 'QAQ':#         n += 1# print(n)  s1 = input()print(subsequence(s1, "QAQ", len(s1), 3))
