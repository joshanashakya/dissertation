import java.util.*;import java.io.*;import java.math.*;public class Euler {	    public static void main(String[] args){        FastReader in = new FastReader();        PrintWriter o = new PrintWriter(System.out);                int n = in.nextInt();        char[] ch = in.next().toCharArray();        char[] ans = new char[ch.length];                Arrays.fill(ans, '9');                for (int i = 0; i <= 9; i++) {						char[] ch1 = new char[ch.length];						for (int j = 0; j < n; j++) {				int val = ch[j] - '0';				val = (val + i) % 10;				ch1[j] = (char) (val + '0');			}						for (int j = 0; j < n; j++) {								char[] ch2 = new char[ch.length];				for (int k = 0; k < n; k++) {					ch2[(k + j) % n] = ch1[k];				}								ans = compare(ans, ch2);						}					}                for (int i = 0; i < n; i++) {			o.print(ans[i]);		}                o.println();                                        o.close();        o.flush();        return;    }            public static char[] compare(char[] ch1, char[] ch2) {				for (int i = 0; i < ch1.length; i++) {			int val1 = ch1[i] - '0';			int val2 = ch2[i] - '0';			if (val1 < val2) {				return ch1;			}			if (val2 < val1) {				return ch2;			}		}		return ch1;	}           static final Random random=new Random();     static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}       	    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }                int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++) a[i] = nextLong();            return a;        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }  }
