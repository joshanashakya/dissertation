import java.util.*;import java.io.*;  public class Main {     public static void main(String[] args) {        InputReader in = new InputReader(System.in);        OutputWriter out = new OutputWriter(System.out);       int n = in.nextInt();       int[]a = new int[n];       int[]b = new int[n];       int[]c = new int[n];       for(int i =0;i<n;i++) {           a[i] = in.nextInt();           b[i]=a[i];           c[i]= a[i];       }       Arrays.sort(b);       Arrays.sort(c);       c = reverse(c);       boolean check = false;       for (int i =0;i<n-1;i++)       {          if (a[i]!=a[i+1]&&(a[i]!=b[i+1]||a[i+1]!=b[i])&&(a[i]!=c[i+1]||a[i+1]!=c[i]))          {              out.printLine((i+1)+" "+(i+2));              check=true;              break;          }       }       if (!check)           out.printLine(-1);          out.flush();     } static int[] reverse(int[]validData) {     for(int i = 0; i < validData.length / 2; i++)     {         int temp = validData[i];         validData[i] = validData[validData.length - i - 1];         validData[validData.length - i - 1] = temp;     }     return validData; }}class pair  implements Comparable{     int key;    int value;    public pair(Object key, Object value) {         this.key = (int)key;        this.value=(int)value;    }     @Override    public int compareTo(Object o) {        pair temp =(pair)o;        return  key-temp.key;    }}class Graph {      int n;    ArrayList<Integer>[] adjList;     public Graph(int n) {        this.n = n;        adjList = new ArrayList[n];        for (int i = 0; i < n; i++)            adjList[i] = new ArrayList<>();    } }  class InputReader {     private final InputStream stream;    private final byte[] buf = new byte[8192];    private int curChar, snumChars;     public InputReader(InputStream stream) {        this.stream = stream;    }     public int read() {        if (snumChars == -1)            throw new InputMismatchException();        if (curChar >= snumChars) {            curChar = 0;            try {                snumChars = stream.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (snumChars <= 0)                return -1;        }        return buf[curChar++];    }     public int nextInt() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public long nextLong() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        long res = 0;        do {            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public int[] nextIntArray(int n) {        int a[] = new int[n];        for (int i = 0; i < n; i++) {            a[i] = nextInt();        }        return a;    }     public String readString() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isSpaceChar(c));        return res.toString();    }     public String nextLine() {        int c = read();        while (isSpaceChar(c))            c = read();        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isEndOfLine(c));        return res.toString();    }     public boolean isSpaceChar(int c) {        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }     private boolean isEndOfLine(int c) {        return c == '\n' || c == '\r' || c == -1;    } } class OutputWriter {    private final PrintWriter writer;     public OutputWriter(OutputStream outputStream) {        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));    }     public OutputWriter(Writer writer) {        this.writer = new PrintWriter(writer);    }     public void print(Object... objects) {        for (int i = 0; i < objects.length; i++) {            if (i != 0)                writer.print(' ');            writer.print(objects[i]);        }    }      public void printLine(Object... objects) {        print(objects);        writer.println();    }     public void close() {        writer.close();    }     public void flush() {        writer.flush();    } }
