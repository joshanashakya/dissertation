import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Arrays;import java.util.StringTokenizer; public class CF1366_D2_B {    public static void main(String[] args) {        FastScanner scanner = new FastScanner();        int t = scanner.nextInt();        StringBuilder out = new StringBuilder();        for (int i = 0; i < t; i++) {            solve(scanner, out);        }        System.out.println(out);     }     private static void solve(FastScanner scanner, StringBuilder out) {        int n = scanner.nextInt();        int x = scanner.nextInt();        int m = scanner.nextInt();        int l = scanner.nextInt();        int r = scanner.nextInt();        int k = 0;        boolean found = false;        if (x <= r && x >= l) {            found = true;        }        for (int i = 1; i < m; i++) {            int ln = scanner.nextInt();            int rn = scanner.nextInt();            if (found) {                if (l <= rn && ln <= r) {                    l = Math.min(l, ln);                    r = Math.max(r, rn);                }            } else {                if (x <= rn && x >= ln) {                    found = true;                    l = ln;                    r = rn;                }            }        }        if(!found){            out.append("1\n");            return;        }        k = r - l + 1;        out.append(k).append('\n');    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         int[] nextArray(int n) {            int[] arr = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }         Integer[] nextArray(int n, boolean object) {            Integer[] arr = new Integer[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }    }}
