import java.util.*;import java.io.*; // Main public class Main {      public static void main (String[] argv)   {	  new Main();  }     boolean test = false;  public Main() {	  FastReader in = new FastReader(new BufferedReader(new InputStreamReader(System.in)));	  //FastReader in = new FastReader(new BufferedReader(new FileReader("Main.in")));      int nStr = in.nextInt();        int n = in.nextInt();               int R = 26;      String addr = in.next();      int[] cnt = new int[R];      for (int i = 0; i < n; i++) cnt[addr.charAt(i) - 'a']++;            int[][] loc = new int[R][];      for (int i = 0; i < R; i++)           if (cnt[i] > 0) loc[i] = new int[cnt[i]];      for (int i = 0; i < R; i++) cnt[i] = 0;      for (int i = 0; i < n; i++) {          int id = addr.charAt(i) - 'a';          loc[id][cnt[id]++] = i;      }                  StringBuilder sb = new StringBuilder();      for (int a0 = 0; a0 < nStr; a0++) {          long F = 0;          String s = in.next();          int sn = s.length();                    for (int i = 0; i < sn; i++) {            int id = s.charAt(i) - 'a';            if (cnt[id] == 0) F += sn;            else {                //search i in loc[id]                if (i <= loc[id][0]) F += loc[id][0] - i;                else if (i >= loc[id][cnt[id] - 1]) F += i - loc[id][cnt[id] - 1];                else {                    int insp = Arrays.binarySearch(loc[id], i);                    if (insp < 0) {                        insp = -insp - 1;                        F += Math.min(loc[id][insp] - i, i - loc[id][insp-1]);                    }                                                        }                            }          }                              sb.append(F + "\n");      }      System.out.println(sb);        }        static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader(BufferedReader in)        {                        br = in;        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    String line = br.readLine();                    if (line == null || line.length() == 0) return "";                    st = new StringTokenizer(line);                }                catch (IOException  e)                {                    return "";                    //e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                return "";                //e.printStackTrace();            }            return str;        }    }}
