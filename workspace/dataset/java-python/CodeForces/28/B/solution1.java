import java.util.*;import java.io.*;public class Graph{    ArrayList<Integer> adj[];    static int V;    Graph(int v)    {        V=v;        adj=new ArrayList[v];        for(int i=0;i<v;i++)        adj[i] = new ArrayList<>();    }    void addEdge(int u,int v)    {        adj[u].add(v);        adj[v].add(u);    }        boolean DFS(int a[],int d[]){        boolean visited[]=new boolean[V];        int set[]=new int[V];        for(int i=0;i<V;i++) {        	for(int j=0;j<V;j++) {        		if(i!=j&&Math.abs(i-j)==d[i])        		addEdge(i,j);        	}        }                        for(int i=0;i<V;i++) {        	if(!visited[i]) {        		ArrayList<Integer> arr1=new ArrayList<>();        		ArrayList<Integer> arr2=new ArrayList<>();        		DFSUtil(i,visited,arr1,arr2,a);        		Collections.sort(arr1);        		Collections.sort(arr2);        		for(int j=0;j<arr1.size();j++)        			set[arr1.get(j)]=arr2.get(j);        	}        }                for(int i=0;i<V;i++) {        	if(set[i]!=i)        		return false;        }        return true;            }        void DFSUtil(int s,boolean visited[],ArrayList<Integer>arr1,ArrayList<Integer> arr2,int a[]){        visited[s]=true;        arr1.add(s);        arr2.add(a[s]-1);        for(int i=0;i<adj[s].size();i++){                        if(!visited[adj[s].get(i)]){                DFSUtil(adj[s].get(i),visited,arr1,arr2,a);            }        }    }    public static void main (String[] args)throws java.lang.Exception {        Reader sc=new Reader();	   // BufferedReader br=new BufferedReader(new InputStreamReader(System.in));	    int t=1;	   // t=sc.nextInt();	  //  int t=Integer.parseInt(br.readLine());	    while(--t>=0){	        int n=sc.nextInt();	        Graph g=new Graph(n);	        int a[]=new int[n];	        int b[]=new int[n];	        for(int i=0;i<n;i++)a[i]=sc.nextInt();	        for(int i=0;i<n;i++)b[i]=sc.nextInt();	        	        if(g.DFS(a, b))	        	System.out.println("YES");	        else	        	System.out.println("NO");	        	    }    }        static class Reader     {         final private int BUFFER_SIZE = 1 << 16;         private DataInputStream din;         private byte[] buffer;         private int bufferPointer, bytesRead;           public Reader()         {             din = new DataInputStream(System.in);             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public Reader(String file_name) throws IOException         {             din = new DataInputStream(new FileInputStream(file_name));             buffer = new byte[BUFFER_SIZE];             bufferPointer = bytesRead = 0;         }           public String readLine() throws IOException         {             byte[] buf = new byte[64]; // line length             int cnt = 0, c;             while ((c = read()) != -1)             {                 if (c == '\n')                     break;                 buf[cnt++] = (byte) c;             }             return new String(buf, 0, cnt);         }           public int nextInt() throws IOException         {             int ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do            {                 ret = ret * 10 + c - '0';             }  while ((c = read()) >= '0' && c <= '9');               if (neg)                 return -ret;             return ret;         }           public long nextLong() throws IOException         {             long ret = 0;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();             do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');             if (neg)                 return -ret;             return ret;         }           public double nextDouble() throws IOException         {             double ret = 0, div = 1;             byte c = read();             while (c <= ' ')                 c = read();             boolean neg = (c == '-');             if (neg)                 c = read();               do {                 ret = ret * 10 + c - '0';             }             while ((c = read()) >= '0' && c <= '9');               if (c == '.')             {                 while ((c = read()) >= '0' && c <= '9')                 {                     ret += (c - '0') / (div *= 10);                 }             }               if (neg)                 return -ret;             return ret;         }           private void fillBuffer() throws IOException         {             bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);             if (bytesRead == -1)                 buffer[0] = -1;         }           private byte read() throws IOException         {             if (bufferPointer == bytesRead)                 fillBuffer();             return buffer[bufferPointer++];         }           public void close() throws IOException         {             if (din == null)                 return;             din.close();         } }    }
