// package cf28; import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.math.BigInteger;import java.util.*;import java.util.function.IntConsumer; public class CFB {    private static final long MOD = 1_000_000_007;    private static final String INPUT = "7\n" +            "4 3 5 1 2 7 6\n" +            "4 6 6 1 6 6 1\n";     private PrintWriter out;    private FastScanner sc;     public static void main(String[] args) {        new CFB().run();    }     public void run() {        sc = new FastScanner(oj ? System.in : new ByteArrayInputStream(INPUT.getBytes()));        out = new PrintWriter(System.out);         long s = System.currentTimeMillis();        try {            solve();        } catch (ExitException ignored) {        }        out.flush();        tr(System.currentTimeMillis() - s + "ms");    }     public void solve() {        int n = sc.nextInt();        int[] c = readIntArray(n);        int[] magic = readIntArray(n);         DSU dsu = new DSU(n);        for (int i = 0; i < n; i++) {            if (i + magic[i] < n) dsu.union(i, i + magic[i]);            if (i - magic[i] >= 0) dsu.union(i, i-magic[i]);        }         for (int i = 0; i < n; i++) {            if (dsu.find(i) != dsu.find(c[i]-1)) answer("NO");        }        answer("YES");    }     static class DSU {        int[] parent;         DSU(int n) {            parent = new int[n+1];            for (int i = 1; i <= n; i++) {                parent[i] = i;            }        }         int find(int v) {            if (v == parent[v])                return v;            return parent[v] = find(parent[v]);        }         void union(int a, int b) {            a = find(a);            b = find(b);            if (a != b)                parent[b] = a;        }    }     //********************************************************************************************    //********************************************************************************************    //********************************************************************************************     private void times(int n, IntConsumer consumer) {        for (int i = 0; i < n; i++) {            try {                consumer.accept(i);            } catch (ExitException ignored) {            }        }    }     private static class ExitException extends RuntimeException {    }     private void answer(Object ans) {        out.println(ans);        throw new ExitException();    }     private static int lowerBound(long[] arr, long key) {        int lo = 0;        int hi = arr.length - 1;        while (lo < hi) {            int mid = (lo + hi) / 2;            if (key <= arr[mid]) {                hi = mid - 1;            } else {                lo = mid + 1;            }        }        return arr[lo] < key ? lo + 1 : lo;    }     private static int upperBound(long[] arr, long key) {        int lo = 0;        int hi = arr.length - 1;        while (lo < hi) {            int mid = (lo + hi) / 2;            if (key >= arr[mid]) {                lo = mid + 1;            } else {                hi = mid;            }        }        return arr[lo] <= key ? lo + 1 : lo;    }     private static int ceil(double d) {        int ret = (int) d;        return ret == d ? ret : ret + 1;    }     private static int round(double d) {        return (int) (d + 0.5);    }     private static int gcd(int a, int b) {        BigInteger b1 = BigInteger.valueOf(a);        BigInteger b2 = BigInteger.valueOf(b);        BigInteger gcd = b1.gcd(b2);        return gcd.intValue();    }     private static long gcd(long a, long b) {        BigInteger b1 = BigInteger.valueOf(a);        BigInteger b2 = BigInteger.valueOf(b);        BigInteger gcd = b1.gcd(b2);        return gcd.longValue();    }     private int[] readIntArray(int n) {        int[] res = new int[n];        for (int i = 0; i < n; i++) {            res[i] = sc.nextInt();        }        return res;    }     private long[] readLongArray(int n) {        long[] res = new long[n];        for (int i = 0; i < n; i++) {            res[i] = sc.nextLong();        }        return res;    }     @SuppressWarnings("unused")    static class FastScanner {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;         FastScanner(InputStream stream) {            this.stream = stream;        }         int read() {            if (numChars == -1)                throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) return -1;            }            return buf[curChar++];        }         boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         boolean isEndline(int c) {            return c == '\n' || c == '\r' || c == -1;        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public String next() {            int c = read();            while (isSpaceChar(c)) c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }         public String nextLine() {            int c = read();            while (isEndline(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndline(c));            return res.toString();        }     }     private boolean oj = System.getProperty("ONLINE_JUDGE") != null;     private void tr(Object... o) {        if (!oj) System.out.println(Arrays.deepToString(o));    }}
