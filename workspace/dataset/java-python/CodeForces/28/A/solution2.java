import java.awt.Point;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Arrays;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) {		FastScanner input = new FastScanner();				int N = input.nextInt();		int M = input.nextInt();				Point[] points = new Point[N];		int[] rods = new int[M];		for (int i = 0; i < N; i++)			points[i] = new Point(input.nextInt(), input.nextInt());		for (int i = 0; i < M; i++)			rods[i] = input.nextInt();				scenario_1: {			boolean[] used = new boolean[M];			int[] use = new int[N];			Arrays.fill(use, -1);			for (int i = 0; i < N; i += 2) {				double dist = dist(points[(i - 1 + N) % N], points[i]) + 						dist(points[i], points[(i + 1) % N]);				int found = -1;				for (int j = 0; j < M; j++) {					if (used[j]) continue;					if (dist == rods[j]) {						found = j;						break;					}				}				if (found == -1) {					break scenario_1;				} else {					use[i] = found + 1;					used[found] = true;				}			}			System.out.println("YES");			for (int i = 0; i < N; i++)				System.out.print(use[i] + " ");			System.out.println();			return;		}				scenario_2: {			boolean[] used = new boolean[M];			int[] use = new int[N];			Arrays.fill(use, -1);			for (int i = 1; i < N; i += 2) {				double dist = dist(points[(i - 1 + N) % N], points[i]) + 						dist(points[i], points[(i + 1) % N]);				int found = -1;				for (int j = 0; j < M; j++) {					if (used[j]) continue;					if (dist == rods[j]) {						found = j;						break;					}				}				if (found == -1) {					System.out.println("NO");					return;				} else {					use[i] = found + 1;					used[found] = true;				}			}			System.out.println("YES");			for (int i = 0; i < N; i++)				System.out.print(use[i] + " ");			System.out.println();			return;		}			}		static double dist(Point a, Point b) {		long dx = a.x - b.x;		long dy = a.y - b.y;		return Math.sqrt(dx * dx + dy * dy);	}		// https://github.com/detel/Faster-InputOutput-Implementations/blob/master/FastScanner.java	// Fast I/O	static class FastScanner { 		BufferedReader br;		StringTokenizer st; 		public FastScanner(String s) {			try {				br = new BufferedReader(new FileReader(s));			} catch (FileNotFoundException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		} 		public FastScanner() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		}	}}
