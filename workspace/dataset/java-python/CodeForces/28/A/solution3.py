def dist(a, b):    return abs(a[0] - b[0]) + abs(a[1] - b[1])  def get_sorted_required_pruts(dists):    res = [dists[i * 2] + dists[i * 2 + 1] for i in range(len(dists) // 2)]    res = [(i, x) for i, x in enumerate(res)]    return sorted(res, key=lambda x: x[1])  def get_answer(pruts, required_pruts):    i = 0    j = 0    answer = "YES"    seq = []    while i < len(required_pruts):        if j == len(pruts):            answer = "NO"            return answer, None        if pruts[j][1] > required_pruts[i][1]:            answer = "NO"            return answer, None        if pruts[j][1] < required_pruts[i][1]:            j += 1        else:            seq.append((required_pruts[i][0], pruts[j][0] + 1))            i += 1            j += 1    return answer, [x[1] for x in sorted(seq)]  n, m = map(int,input().split()) gvozdi = [None] * nfor i in range(n):    gvozdi[i] = list(map(int,input().split())) pruts = list(map(int,input().split()))pruts = [(i, p) for i, p in enumerate(pruts)]pruts = sorted(pruts, key=lambda x: x[1]) dists = [dist(gvozdi[i], gvozdi[i + 1]) for i in range(len(gvozdi) - 1)]dists.append(dist(gvozdi[0], gvozdi[-1])) even_required_pruts = get_sorted_required_pruts(dists)# print(dists[-1:] + dists[:-1])odd_required_pruts = get_sorted_required_pruts(dists[-1:] + dists[:-1]) even_answer, even_seq = get_answer(pruts, even_required_pruts)odd_answer, odd_seq = get_answer(pruts, odd_required_pruts) if even_answer == "NO" and odd_answer == "NO":    print("NO")elif even_answer == "YES":    print("YES")    even_seq = [even_seq[i // 2] if i % 2 == 1 else -1 for i in range(n)]    print(" ".join(map(str, even_seq)))else:    print("YES")    # print(odd_seq)    odd_seq = [odd_seq[i // 2] if i % 2 == 0 else -1 for i in range(n)]    print(" ".join(map(str, odd_seq)))
