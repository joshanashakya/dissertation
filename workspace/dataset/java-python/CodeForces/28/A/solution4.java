 import java.util.*;import java.io.*; public class Main{	public static void main( String[] args )	{		Scan scan = new Scan();		int n = scan.nextInt();		int m = scan.nextInt();		int[] dis = new int[ n ];		int[] x = new int[ 3 ];		int[] y = new int[ 3 ];		x[1] = x[2] = scan.nextInt();		y[1] = y[2] = scan.nextInt();		for ( int i = 0; i < n - 1; i ++ )		{			x[0] = scan.nextInt();			y[0] = scan.nextInt();			dis[i] = Math.abs( x[0] - x[1] + y[0] - y[1] );			x[1] = x[0];			y[1] = y[0];		}		dis[n - 1] = Math.abs( x[0] - x[2] + y[0] - y[2] );		ArrayList<ArrayList<Integer>> cnt = new ArrayList<>( 200001 );		for ( int i = 0; i < 200001; i ++ )		{			cnt.add( new ArrayList<Integer>() );		}		for ( int i = 0; i < m; i ++ )		{			cnt.get( scan.nextInt() ).add( i + 1 );		}		int[] ans = solve( cnt, n, dis );		if ( ans == null )		{			int[] tmp = new int[ n ];			System.arraycopy( dis, 0, tmp, 1, n - 1 );			System.arraycopy( dis, n - 1, tmp, 0, 1 );			tmp = solve( cnt, n, tmp );			if ( tmp != null )			{				ans=new int[n];				System.arraycopy( tmp, 1, ans, 0, n - 1 );				System.arraycopy( tmp, 0, ans, n - 1, 1 );			}		}		if ( ans == null )			System.out.println( "NO" );		else		{			System.out.println( "YES" );			for ( int i = 0; i < n; i ++ )			{				System.out.print( ans[i] );				if ( i == n - 1 )					System.out.println();				else					System.out.print( " " );			}		}	} 	public static int[] solve( ArrayList<ArrayList<Integer>> cnt, int n, int[] dis )	{		int[] ans = new int[ n ];		Arrays.fill( ans, -2 );		int[] used = new int[ 200001 ];		Arrays.fill( used, 0 );		for ( int i = 0; i < n; i += 2 )		{			int l = dis[i] + dis[i + 1];			if ( used[l] >= cnt.get( l ).size() )				break;			ans[i] = -1;			ans[i + 1] = cnt.get( l ).get( used[l] );			used[l] ++;		}		if ( ans[n - 1] == -2 )			return null;		return ans;	}} class Scan{	BufferedReader br;	StringTokenizer st; 	Scan()	{		br = new BufferedReader( new InputStreamReader( System.in ) );	} 	public boolean hasNext()	{		while ( st == null ||  ! st.hasMoreElements() )		{			try			{				st = new StringTokenizer( br.readLine() );			}			catch ( Exception e )			{				return false;			}		}		return true;	} 	public String next()	{		if ( hasNext() )			return st.nextToken();		return null;	} 	public int nextInt()	{		if ( hasNext() )			return Integer.parseInt( st.nextToken() );		return -1;	}}
