//package Codeforces; import java.util.*; public class Task28A {    public static class Point {        int x;        int y;         Point(int _x, int _y) {            x = _x;            y = _y;        }    }    public static class Corner{        int i;        int a;        int b;        Corner(int _i, int _a, int _b){            i=_i;            a=_a;            b=_b;        }    }    public static class Prut{        int i;        int l;        Prut(int _i, int _l){            i=_i;            l=_l;        }    }    public static class LComp implements Comparator<Corner>{        public int compare(Corner first, Corner second) {            return second.a+second.b - first.a-first.b;        }    }    public static class IComp implements Comparator<Corner>{        public int compare(Corner first, Corner second) {            return first.i - second.i;        }    }    public static class PComp implements Comparator<Prut>{        public int compare(Prut first, Prut second){            return  second.l - first.l;        }    }    public static void main(String[] args) {        Scanner scn = new Scanner(System.in);        int n = scn.nextInt();        int m = scn.nextInt();        int per = 0;        Point[] nails = new Point[n];        for (int i = 0; i < n; i++) {            int x = scn.nextInt();            int y = scn.nextInt();            nails[i] = new Point(x, y);        }        for (int i = 1; i <= n; i++) {            per = per + Math.abs(nails[i%n].y - nails[i - 1].y) + Math.abs(nails[i%n].x-nails[i-1].x);        }        ArrayList<Prut> p = new ArrayList<>();        int sum=0;        for (int i = 0; i < m; i++) {            int a = scn.nextInt();            p.add(new Prut(i+1, a));            sum+=a;        }        if(sum<per){            System.out.println("NO");            return;        }        ArrayList<Corner>chet = new ArrayList<>();        ArrayList<Corner>nech = new ArrayList<>();        ArrayList<Prut>pic = new ArrayList<>();        for(int i = 1; i<n; i+=2){            int a = Math.abs(nails[i].y - nails[i - 1].y) + Math.abs(nails[i].x-nails[i-1].x);            int b = Math.abs(nails[i].y - nails[(i+1)%n].y) + Math.abs(nails[i].x-nails[(i+1)%n].x);            nech.add(new Corner(i, a, b));        }        chet.add(new Corner(0, Math.abs(nails[0].y - nails[n-1].y) + Math.abs(nails[0].x-nails[n-1].x),                Math.abs(nails[0].y - nails[1].y) + Math.abs(nails[0].x-nails[1].x)));        for(int i = 2; i<n; i+=2){            int a = Math.abs(nails[i].y - nails[i + 1].y) + Math.abs(nails[i].x-nails[i+1].x);            int b = Math.abs(nails[i].y - nails[i - 1].y) + Math.abs(nails[i].x-nails[i-1].x);            chet.add(new Corner(i, a, b));        }        Collections.sort(p, new PComp());        ArrayList<Prut>p1 = new ArrayList<>();        for(int i = 0; i<p.size(); i++){            p1.add(new Prut(p.get(i).i, p.get(i).l));        }        Collections.sort(chet, new LComp());        Collections.sort(nech, new LComp());        for(int i = 0; i<chet.size(); i++){            while(p.size()>0 && p.get(0).l>chet.get(i).a+chet.get(i).b){                p.remove(0);            }            if(p.size()==0){                break;            }            if(p.get(0).l==chet.get(i).a+chet.get(i).b){                pic.add(p.get(0));                p.remove(0);            }        }        boolean isChet=false;        boolean isNech = false;        if(chet.size()==pic.size()){            isChet=true;        }        if(!isChet){            pic.clear();            for(int i = 0; i<nech.size(); i++){                while(p1.size()>0 && p1.get(0).l>nech.get(i).a+nech.get(i).b){                    p1.remove(0);                }                if(p1.size()==0){                    break;                }                if(p1.get(0).l==nech.get(i).a+nech.get(i).b){                    pic.add(p1.get(0));                    p1.remove(0);                }            }            if(pic.size()==nech.size()){                isNech=true;            }        }        if(isChet){            System.out.println("YES");            Collections.sort(chet, new IComp());            for(int i = 0; i<chet.size(); i++){                for(int j = 0; j<pic.size(); j++){                    if(chet.get(i).a+chet.get(i).b==pic.get(j).l){                        System.out.print(pic.get(j).i+" ");                        pic.remove(j);                        break;                    }                }                System.out.print(-1+" ");            }        }        else{            if(isNech) {                System.out.println("YES");                Collections.sort(nech, new IComp());                for (int i = 0; i < nech.size(); i++) {                    System.out.print(-1 + " ");                    for (int j = 0; j < pic.size(); j++) {                        if (nech.get(i).a + nech.get(i).b == pic.get(j).l) {                            System.out.print(pic.get(j).i + " ");                            pic.remove(j);                            break;                        }                    }                }            }            else{                System.out.println("NO");            }        }    }}
