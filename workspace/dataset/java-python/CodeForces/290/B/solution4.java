import java.io.*;import java.math.*;import java.util.*; public class B {	final static int MOD = 1000000007;	static ArrayList<String> s = new ArrayList<>(); 	public static void main(String[] args) throws Exception {		FastReader in = new FastReader(System.in);		s.add("111111101010101111100101001111111");		s.add("100000100000000001010110001000001");		s.add("101110100110110000011010001011101");		s.add("101110101011001001111101001011101");		s.add("101110101100011000111100101011101");		s.add("100000101010101011010000101000001");		s.add("111111101010101010101010101111111");		s.add("000000001111101111100111100000000");		s.add("100010111100100001011110111111001");		s.add("110111001111111100100001000101100");		s.add("011100111010000101000111010001010");		s.add("011110000110001111110101100000011");		s.add("111111111111111000111001001011000");		s.add("111000010111010011010011010100100");		s.add("101010100010110010110101010000010");		s.add("101100000101010001111101000000000");		s.add("000010100011001101000111101011010");		s.add("101001001111101111000101010001110");		s.add("101101111111000100100001110001000");		s.add("000010011000100110000011010000010");		s.add("001101101001101110010010011011000");		s.add("011101011010001000111101010100110");		s.add("111010100110011101001101000001110");		s.add("110001010010101111000101111111000");		s.add("001000111011100001010110111110000");		s.add("000000001110010110100010100010110");		s.add("111111101000101111000110101011010");		s.add("100000100111010101111100100011011");		s.add("101110101001010000101000111111000");		s.add("101110100011010010010111111011010");		s.add("101110100100011011110110101110000");		s.add("100000100110011001111100111100000");		s.add("111111101101000101001101110010001");		int a = in.nextInt();		int b = in.nextInt();		System.out.println(s.get(a).charAt(b));	} 	static class FastReader {	    private boolean finished = false; 	    private InputStream stream;	    private byte[] buf = new byte[1024];	    private int curChar;	    private int numChars;	    private SpaceCharFilter filter; 	    public FastReader(InputStream stream) {	        this.stream = stream;	    } 	    public int read() {	        if (numChars == -1) {	            throw new InputMismatchException();	        }	        if (curChar >= numChars) {	            curChar = 0;	            try {	                numChars = stream.read(buf);	            } catch (IOException e) {	                throw new InputMismatchException();	            }	            if (numChars <= 0) {	                return -1;	            }	        } 	        return buf[curChar++];	    } 	    public int peek() {	        if (numChars == -1) {	            return -1;	        }	        if (curChar >= numChars) {	            curChar = 0;	            try {	                numChars = stream.read(buf);	            } catch (IOException e) {	                return -1;	            }	            if (numChars <= 0) {	                return -1;	            }	        }	        return buf[curChar];	    } 	    public int nextInt() {	        int c = read();	        while (isSpaceChar(c))	            c = read();	        int sgn = 1;	        if (c == '-') {	            sgn = -1;	            c = read();	        }	        int res = 0;	        do {	            if (c == ',') {	                c = read();	            }	            if (c < '0' || c > '9') {	                throw new InputMismatchException();	            }	            res *= 10;	            res += c - '0';	            c = read();	        } while (!isSpaceChar(c));	        return res * sgn;	    } 	    public long nextLong() {	        int c = read();	        while (isSpaceChar(c))	            c = read();	        int sgn = 1;	        if (c == '-') {	            sgn = -1;	            c = read();	        }	        long res = 0;	        do {	            if (c < '0' || c > '9') {	                throw new InputMismatchException();	            }	            res *= 10;	            res += c - '0';	            c = read();	        } while (!isSpaceChar(c));	        return res * sgn;	    } 	    public String nextString() {	        int c = read();	        while (isSpaceChar(c))	            c = read();	        StringBuilder res = new StringBuilder();	        do {	            res.appendCodePoint(c);	            c = read();	        } while (!isSpaceChar(c));	        return res.toString();	    } 	    public boolean isSpaceChar(int c) {	        if (filter != null) {	            return filter.isSpaceChar(c);	        }	        return isWhitespace(c);	    } 	    public static boolean isWhitespace(int c) {	        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	    } 	    private String readLine0() {	        StringBuilder buf = new StringBuilder();	        int c = read();	        while (c != '\n' && c != -1) {	            if (c != '\r') {	                buf.appendCodePoint(c);	            }	            c = read();	        }	        return buf.toString();	    } 	    public String nextLine() {	        String s = readLine0();	        while (s.trim().length() == 0)	            s = readLine0();	        return s;	    } 	    public String nextLine(boolean ignoreEmptyLines) {	        if (ignoreEmptyLines) {	            return nextLine();	        } else {	            return readLine0();	        }	    } 	    public BigInteger nextBigInteger() {	        try {	            return new BigInteger(nextString());	        } catch (NumberFormatException e) {	            throw new InputMismatchException();	        }	    } 	    public char nextCharacter() {	        int c = read();	        while (isSpaceChar(c))	            c = read();	        return (char) c;	    } 	    public double nextDouble() {	        int c = read();	        while (isSpaceChar(c))	            c = read();	        int sgn = 1;	        if (c == '-') {	            sgn = -1;	            c = read();	        }	        double res = 0;	        while (!isSpaceChar(c) && c != '.') {	            if (c == 'e' || c == 'E') {	                return res * Math.pow(10, nextInt());	            }	            if (c < '0' || c > '9') {	                throw new InputMismatchException();	            }	            res *= 10;	            res += c - '0';	            c = read();	        }	        if (c == '.') {	            c = read();	            double m = 1;	            while (!isSpaceChar(c)) {	                if (c == 'e' || c == 'E') {	                    return res * Math.pow(10, nextInt());	                }	                if (c < '0' || c > '9') {	                    throw new InputMismatchException();	                }	                m /= 10;	                res += (c - '0') * m;	                c = read();	            }	        }	        return res * sgn;	    } 	    public boolean isExhausted() {	        int value;	        while (isSpaceChar(value = peek()) && value != -1)	            read();	        return value == -1;	    } 	    public String next() {	        return nextString();	    } 	    public SpaceCharFilter getFilter() {	        return filter;	    } 	    public void setFilter(SpaceCharFilter filter) {	        this.filter = filter;	    } 	    public interface SpaceCharFilter {	        public boolean isSpaceChar(int ch);	    }	}}
