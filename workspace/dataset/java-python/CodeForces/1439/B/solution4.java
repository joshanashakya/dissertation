import java.util.*;import java.io.*;public class B2 { 	public static void main(String[] args) {		FastScanner sc = new FastScanner();		int t = sc.nextInt();		StringBuilder sb = new StringBuilder();		while(t-- > 0) {			int n = sc.nextInt();			int m = sc.nextInt();			long k = sc.nextInt();			ArrayList<Integer>[] g = new ArrayList[n];			HashSet<Integer>[] gcheck = new HashSet[n];			for(int i = 0; i < n; i++){				g[i] = new ArrayList<>();				gcheck[i] = new HashSet<>();			}			int[] deg = new int[n];			for(int i = 0; i < m; i++){				int u = sc.nextInt()-1;				int v = sc.nextInt()-1;				g[u].add(v); g[v].add(u);				deg[u]++; deg[v]++;				gcheck[Math.min(u, v)].add(Math.max(u, v));			}			if(k * (k-1)/2 > m) {				sb.append("-1\n"); continue;			}			LinkedList<Integer> q = new LinkedList<>();			boolean[] dead = new boolean[n];			for(int i = 0; i < n; i++){				if(deg[i] <= k-1) {					q.add(i);				}			}			boolean clique = false;			while(!q.isEmpty()) {				int u = q.removeFirst();				if(deg[u] == k-1 && clique(u, g, gcheck, dead)) {					sb.append(2+"\n");					sb.append((u+1)+"");					for(int v: g[u]) {						if(dead[v]) continue;						sb.append(" "+(v+1));					}					sb.append("\n");					clique = true;					break;				}				for(int v: g[u]) {					if(dead[v]) continue;					deg[v]--;					if(deg[v] == k-1) {						q.add(v);					}				}				dead[u] = true;			}			if(clique) {				continue;			}			HashSet<Integer> ans = new HashSet<>();			for(int u = 0; u < n; u++){				if(!dead[u]) ans.add(u);			}			if(ans.size() == 0) {				sb.append("-1\n"); continue;			}			sb.append("1 "+ans.size()+"\n");			for(int u: ans) {				sb.append((u+1)+" ");			}			sb.replace(sb.length()-1, sb.length(), "\n");		}		PrintWriter pw = new PrintWriter(System.out);		pw.println(sb.toString().trim());		pw.flush();			}	static boolean clique(int u, ArrayList<Integer>[] g, HashSet<Integer>[] gcheck, boolean[] dead) {		for(int i = 0; i < g[u].size(); i++) {			int v = g[u].get(i);			if(dead[v]) continue;			for(int j = i+1; j < g[u].size(); j++) {				int w = g[u].get(j);				if(dead[w]) continue;				if(!gcheck[Math.min(v, w)].contains(Math.max(v, w))) {					return false;				}			}		}		return true;	}		static class FastScanner {		public BufferedReader reader;		public StringTokenizer tokenizer;		public FastScanner() {			reader = new BufferedReader(new InputStreamReader(System.in), 32768);			tokenizer = null;		}		public String next() {			while (tokenizer == null || !tokenizer.hasMoreTokens()) {				try {					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		}		public int nextInt() {			return Integer.parseInt(next());		}		public long nextLong() {			return Long.parseLong(next());		}		public double nextDouble() {			return Double.parseDouble(next());		}		public String nextLine() {			try {				return reader.readLine();			} catch(IOException e) {				throw new RuntimeException(e);			}		}	} }
