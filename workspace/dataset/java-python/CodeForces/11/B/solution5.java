import java.io.*;import java.lang.*;import java.io.InputStream;import java.io.InputStreamReader;import java.io.BufferedReader;import java.io.OutputStream;import java.io.PrintWriter;import java.io.IOException;import java.util.*;import java.math.BigInteger; public class Cooldown {    //code written by a living bruh moment    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Task solver = new Task();        int t = 1;        for(int tt = 1; tt<=t; tt++) solver.solve(tt,in,out);        out.close();    }    static class Task{         public void solve(int tt, InputReader in, PrintWriter out){            long n = Math.abs(in.nextLong());            if(n==0){                out.println(0);                return;            }            long l = 1;            while(true){                long ans = l*(l+1)/2;                if(ans>=n && (ans-n)%2==0){                    out.println(l);                    return;                }                ++l;            }        }    }    static void sort(int[] x){		shuffle(x);		Arrays.sort(x);	}	static void sort(long[] x){		shuffle(x);		Arrays.sort(x);	}	static void shuffle(int[] a) {	    Random get = new Random();	    for (int i = 0; i < a.length; i++) {	        int r = get.nextInt(a.length);	        int temp = a[i];	        a[i] = a[r];	        a[r] = temp;	    }	}	static void shuffle(long[] a) {	    Random get = new Random();	    for (int i = 0; i < a.length; i++) {	        int r = get.nextInt(a.length);	        long temp = a[i];	        a[i] = a[r];	        a[r] = temp;	    }	}    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public String nextLine() {            try {                return reader.readLine();            } catch (Exception e) {                e.printStackTrace();            }            return null;        }         public boolean hasNext() {            String next = null;            try {                next = reader.readLine();            } catch (Exception e) {            }            if (next == null) {                return false;            }            tokenizer = new StringTokenizer(next);            return true;        }        public int[] nextInta(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         public long[] nextLonga(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++) a[i] = nextLong();            return a;        }         public int[][] nextIntm(int n, int m) {            int[][] a = new int[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    a[i][j] = nextInt();                }            }            return a;        }         public long[][] nextLongm(int n, int m) {            long[][] a = new long[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    a[i][j] = nextLong();                }            }            return a;        }        public BigInteger nextBigInteger() {            return new BigInteger(next());        }    }}
