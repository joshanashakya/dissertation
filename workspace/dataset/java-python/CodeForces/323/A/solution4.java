import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author sumit */public class Main {      public static void main(String[] args) {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            InputReader in = new InputReader(inputStream);            OutputWriter out = new OutputWriter(outputStream);            ABlackAndWhiteCube solver = new ABlackAndWhiteCube();            solver.solve(1, in, out);            out.close();      }       static class ABlackAndWhiteCube {            public void solve(int testNumber, InputReader in, OutputWriter out) {                  int k = in.nextInt();                  if (k % 2 == 1)                        out.printLine(-1);                  else {                        int mat[][] = new int[k][k];                        int init = 1;                        int temp = 0;                        for (int i = 0; i < k / 2; i++) {                              for (int j = 0; j < k / 2; j++) {                                    if (i == 0)                                          mat[i][j] = init;                                    else if (j < temp)                                          mat[i][j] = mat[i - 1][j];                                    else if (j >= temp) {                                          mat[i][j] = mat[i - 1][j] ^ 1;                                    }                                     mat[k - i - 1][k - j - 1] = mat[i][j];                                    mat[k - i - 1][j] = mat[i][j];                                    mat[i][k - j - 1] = mat[i][j];                               }                              temp++;                         }                          int xor = 1;                        for (int l = 0; l < k; l++) {                               for (int i = 0; i < k; i++) {                                    for (int j = 0; j < k; j++) {                                          if (xor == 1)                                                if ((mat[i][j] ^ 1) == 1)                                                      out.print("b");                                                else                                                      out.print("w");                                          else if (mat[i][j] == 1)                                                out.print("b");                                          else                                                out.print("w");                                     }                                    out.printLine();                              }                              xor = (xor ^ 1);                              out.printLine();                        }                  }            }       }       static class OutputWriter {            private final PrintWriter writer;             public OutputWriter(OutputStream outputStream) {                  writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));            }             public OutputWriter(Writer writer) {                  this.writer = new PrintWriter(writer);            }             public void print(Object... objects) {                  for (int i = 0; i < objects.length; i++) {                        if (i != 0) {                              writer.print(' ');                        }                        writer.print(objects[i]);                  }            }             public void printLine() {                  writer.println();            }             public void close() {                  writer.close();            }             public void printLine(int i) {                  writer.println(i);            }       }       static class InputReader {            private InputStream stream;            private byte[] buf = new byte[1024];            private int curChar;            private int numChars;             public InputReader(InputStream stream) {                  this.stream = stream;            }             public int read() {                  if (numChars == -1)                        throw new InputMismatchException();                   if (curChar >= numChars) {                        curChar = 0;                        try {                              numChars = stream.read(buf);                        } catch (IOException e) {                              throw new InputMismatchException();                        }                        if (numChars <= 0)                              return -1;                  }                   return buf[curChar++];            }             public int nextInt() {                  int c = read();                   while (isSpaceChar(c))                        c = read();                   int sgn = 1;                   if (c == '-') {                        sgn = -1;                        c = read();                  }                   int res = 0;                   do {                        if (c < '0' || c > '9')                              throw new InputMismatchException();                         res *= 10;                        res += c & 15;                         c = read();                  } while (!isSpaceChar(c));                   return res * sgn;            }             public boolean isSpaceChar(int c) {                  return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;            }       }} 
