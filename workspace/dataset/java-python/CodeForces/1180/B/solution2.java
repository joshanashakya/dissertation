//      これを翻訳している間、あなたはあなたの人生のいくつかの貴重な瞬間を無駄にしました  import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;  public class Solution {    static PrintWriter fop = new PrintWriter(System.out);      public static void main(String[] args) {        FastScanner fsca = new FastScanner();         int n = fsca.nextInt();        int a[] = fsca.readArray(n);         for (int i = 0; i < n; i++) {            if (a[i] == 0) a[i] = -1;            else if (a[i] > 0) a[i] = -a[i] - 1;        }        if (n % 2 == 0) print(a, n);        else {            int max = Integer.MIN_VALUE;            int in = -1;            for (int i = 0; i < n; i++) {                if (a[i] != -1) {                    if (Math.abs(a[i]) > max) {                        max = Math.abs(a[i]);                        in = i;                    }                 }            }            if (in == -1)                a[0] = 0;            else a[in] = -a[in] - 1;            print(a, n);         }          fop.flush();        fop.close();      }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/    // template starts from here :     static long gcd(long a, long b) {        return (b == 0) ? a : gcd(b, a % b);    }     static int gcd(int a, int b) {        return (b == 0) ? a : gcd(b, a % b);    }      static final Random random = new Random();     static void ruffleSort(int[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }     static void ruffleSort(long[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n);            long temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }      static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[][] readMat(int n, int m) {            int a[][] = new int[n][m];            for (int i = 0; i < n; i++)                for (int j = 0; j < m; j++)                    a[i][j] = nextInt();            return a;        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    }     static void print(int a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }     static void print(long a[], int n) {        for (int i = 0; i < n; i++)            fop.append((a[i]) + " ");        // fop.append("\n") ;    }}        
