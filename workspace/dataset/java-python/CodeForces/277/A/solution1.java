import java.io.BufferedReader;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*; import javafx.util.Pair; public class Main{    static boolean visited[];    static ArrayList<ArrayList<Integer>> a;        public static void dfs(int node)    {        visited[node] = true;        for (Integer integer : a.get(node)) {            if(!visited[integer])                dfs(integer);        }    }    public static void main(String args[])    {        FastScanner input = new FastScanner();     int count[] = new int[101];     int n  = input.nextInt();     int m = input.nextInt();     visited = new boolean[n+m+1];     a = new ArrayList<>(n+m+1);        for (int i = 0; i <=n+m; i++) {            a.add(new ArrayList<>());        }        boolean haslan = false;        for (int i = 1; i <=n; i++) {            int how = input.nextInt();                      for (int j = 0; j < how; j++) {                int value = input.nextInt();                a.get(i).add(n+value);                a.get(n+value).add(i);                            }            if(how>0)                haslan = true;        }        int ans = (haslan)?-1:0;        for (int i = 1; i <=n; i++) {            if(!visited[i])            {                dfs(i);                ans++;            }        }        System.out.println(ans);                 }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
