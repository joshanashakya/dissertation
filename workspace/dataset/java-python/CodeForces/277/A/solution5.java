import java.util.*;import java.util.Scanner;import java.io.*;import javax.lang.model.util.ElementScanner6; import static java.lang.System.out;  public class A277{	static class weightedQU{		int[] id;		int[] size;				public weightedQU(int n)		{			id=new int[n];			size=new int[n];			for(int i=0;i<n;i++)			{				size[i]=i;				id[i]=i;							}					}				public int root(int i)		{			while(i!=id[i])			{				id[i]=id[id[i]];				i=id[i];			}			return i;								}						public boolean connected(int p,int q)		{			return root(p)==root(q);		}				public void union(int p,int q)		{			int i=root(p);;			int j=root(q);			if(size[i]<size[j])			{				id[i]=j;				size[j]+=size[j];			}			else			{				id[j]=i;				size[i]+=size[j];							}					}					}    public static void main(String args[])    {           FastReader in=new FastReader();        PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));        int tc=1;             //tc=in.nextInt();        while(tc-->0)        {                    	int n=in.nextInt();        	int m=in.nextInt();        	        	weightedQU dsu=new weightedQU(n);        	int count=0;        	ArrayList<HashSet<Integer>> al=new ArrayList<HashSet<Integer>>();						for(int i=0;i<n;i++)			{				int k=in.nextInt();				if(k==0)				{					count++;					continue;				}				HashSet<Integer> hs=new HashSet<>();				for(int j=0;j<k;j++)hs.add(in.nextInt());								al.add(hs);							}						n=al.size();			for(int i=0;i<n;i++)			{				HashSet<Integer> hs1=al.get(i);				for(int j=i+1;j<n;j++)				{					HashSet<Integer> hs2=al.get(j);										for(int e : hs2)					{						if(hs1.contains(e))						{							dsu.union(i,j);							break;						}					}				}			}						HashSet<Integer> hs=new HashSet<Integer>();									for(int i=0;i<n;i++)			{				int parent=dsu.root(i);				hs.add(parent);							}									if(al.size()==0)			{				pr.println(count);			}						else			{				pr.println(hs.size()-1+count);			}			           }        pr.flush();    }           static void sort(long[] a) {		ArrayList<Long> l = new ArrayList<>();		for (long i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);	}        	static void sort(int[] a) {		ArrayList<Integer> l = new ArrayList<>();		for (int i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);    }         static class FastReader    {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }          String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }
