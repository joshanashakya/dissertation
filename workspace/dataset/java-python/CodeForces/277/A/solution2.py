from collections import defaultdict class UnionFind():    def __init__(self, n):        self.n = n        self.parents = [-1] * n     def find(self, x):        if self.parents[x] < 0:            return x        else:            self.parents[x] = self.find(self.parents[x])            return self.parents[x]     def union(self, x, y):        x = self.find(x)        y = self.find(y)         if x == y:            return         if self.parents[x] > self.parents[y]:            x, y = y, x         self.parents[x] += self.parents[y]        self.parents[y] = x     def size(self, x):        return -self.parents[self.find(x)]     def same(self, x, y):        return self.find(x) == self.find(y)     def members(self, x):        root = self.find(x)        return [i for i in range(self.n) if self.find(i) == root]     def roots(self):        return [i for i, x in enumerate(self.parents) if x < 0]     def group_count(self):        return len(self.roots())     def all_group_members(self):        group_members = defaultdict(list)        for member in range(self.n):            group_members[self.find(member)].append(member)        return group_membersn,m=map(int,input().split())l=[[] for i in range(m)]cnt=0for i in range(n):  k,*a=map(int,input().split())  cnt+=k  for aa in a:    l[aa-1].append(i)uf=UnionFind(n)for i in range(m):  for j in range(len(l[i])-1):    uf.union(l[i][j],l[i][j+1])if cnt==0:  print(uf.group_count())else:  print(uf.group_count()-1)
