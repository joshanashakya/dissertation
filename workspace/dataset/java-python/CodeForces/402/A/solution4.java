import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solve {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static class FastReader {	    BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;	    }		static int gcd(int a, int b) { 		if (b == 0) return a; 		return gcd(b, a % b);  		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }				static int solve(int k, int a, int b,  int v) {			int x = b;		int c = 0;		int cou = 0;					 while(cou != a) {				while(x >= k - 1) {					for(int i = 0;i<k;i++) {						if(a - cou < v) {							c++;							return c;						}						cou += v;						if(cou >= a) {							c++;							return c;						}					}					x -= k-1;					c++;				}				while(true) {					int fl = 0;					if(x != 0) {						cou += v*(x+1);						x = 0;						c++;						fl = 1;					}					if(cou >= a) {						return c;					}					else if(a - cou <= v) {						c++;						return c;					}										if(fl != 1) {					cou += v;					c++;					}					if(cou >= a) {						return c;					}				}			}		return c;		}		public static void main(String args[]) throws Exception {	    FastReader sc = new FastReader();	    long start = System.currentTimeMillis();	    int k = sc.nextInt(), a = sc.nextInt(), b = sc.nextInt(), v = sc.nextInt();	    out.println(solve(k,a,b,v));	    flush();	    long end = System.currentTimeMillis();	    NumberFormat formatter = new DecimalFormat("#0.00000");	    //System.out.print("Execution time is " + formatter.format((end - start) / 1000d) + " seconds");	    }	}						
