import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }     public void solve() throws IOException{         int n = in.nextInt();        int k = in.nextInt();        HashMap<Integer, Integer> map = new HashMap<>();        int[] nums = new int[n];        for(int i = 0; i < n; i++){            int num = in.nextInt();            nums[i] = num;            int b = num - i * k;            if(b >= 1){                map.put(b, map.getOrDefault(b, 0) + 1);            }        }         int max = -1;        int maxB = -1;        for(int key : map.keySet()){            int count = map.get(key);            if(count > max){                max = count;                maxB = key;            }        }         out.println(n - max);        for(int i = 0; i < n; i++){            if(nums[i] != i * k + maxB){                int diff = i * k + maxB - nums[i];                if(diff != 0){                    out.println((diff > 0 ? "+ " : "- ") + (i + 1) + " " + Math.abs(diff));                }            }        }         return;    }       }
