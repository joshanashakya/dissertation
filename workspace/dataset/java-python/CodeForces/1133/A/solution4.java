// template : secondThread import java.io.*;import java.math.BigDecimal;import java.math.BigInteger;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;  public class main2 {      public static void main(String[] args) {        try {              PrintWriter fop = new PrintWriter(System.out);            FastScanner fsca = new FastScanner();             String Start = fsca.next();            String end = fsca.next();             int hr1 = Integer.parseInt(Start.substring(0 , 2)) ;            int hr2 = Integer.parseInt(end.substring(0 , 2)) ;            int min1 = Integer.parseInt(Start.substring(3)) ;            int min2 = Integer.parseInt(end.substring(3)) ;             if (min1 > min2){                min2 += 60 ;                hr2-- ;            }            int total_min = ((hr2 - hr1)*60 + (min2 - min1))/2 ;             hr1 += (total_min)/60 ;            min1 += (total_min)%60 ;             if (min1 >= 60){                min1 -= 60 ;                hr1++ ;            }           StringBuilder sb = new StringBuilder() ;            if (hr1 < 10)                sb.append("0");            sb.append(hr1 + ":") ;            if (min1 <10)                sb.append("0");            sb.append(min1) ;             fop.println(sb);                          fop.flush();            fop.close();        } catch (Exception e) {            return;        }      }    /*-----------------------------------------------------------------------------------------------------------------------------------------------*/      static void sieve(int n) {        boolean[] flag = new boolean[n];         for (int i = 2; i * i < n; i++) {            if (flag[i])                continue;            else                for (int j = i * i; j <= n; j += i) {                    flag[j] = true;                }        }    }      static int gcd(int a, int b) {        if (b > a) {            int tenp = b;            b = a;            a = tenp;        }        int temp = 0;        while (b != 0) {            a %= b;            temp = b;            b = a;            a = temp;        }        return a;    }     static long gcd_long(long a, long b) {        if (b > a) {            long tenp = b;            b = a;            a = tenp;        }        long temp = 0;        while (b != 0) {            a %= b;            temp = b;            b = a;            a = temp;        }        return a;    }      static final Random random = new Random();     static void ruffleSort(int[] a) {        int n = a.length;//shuffle, then sort        for (int i = 0; i < n; i++) {            int oi = random.nextInt(n), temp = a[oi];            a[oi] = a[i];            a[i] = temp;        }        Arrays.sort(a);    }      static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }         long nextLong() {            return Long.parseLong(next());        }    }  }        
