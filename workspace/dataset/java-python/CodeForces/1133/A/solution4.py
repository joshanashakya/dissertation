#Winners never quit, Quitters never win............................................................................from collections import deque as deimport mathfrom collections import Counter as cntfrom functools import reducefrom typing import MutableMappingfrom itertools import groupby as gbfrom fractions import Fraction as fr def factors(n):        return set(reduce(list.__add__,                 ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))class My_stack():    def __init__(self):        self.data = []    def my_push(self, x):        return (self.data.append(x))    def my_pop(self):        return (self.data.pop())    def my_peak(self):        return (self.data[-1])    def my_contains(self, x):        return (self.data.count(x))    def my_show_all(self):        return (self.data)    def isEmpty(self):      return len(self.data)==0 arrStack = My_stack()    def decimalToBinary(n):     return bin(n).replace("0b", "") def isPrime(n) : 	if (n <= 1) : 		return False	if (n <= 3) : 		return True 		if (n % 2 == 0 or n % 3 == 0) : 		return False 	i = 5	while(i * i <= n) : 		if (n % i == 0 or n % (i + 2) == 0) : 			return False		i = i + 6 	return True def get_prime_factors(number):    prime_factors = []    while number % 2 == 0:        prime_factors.append(2)        number = number / 2    for i in range(3, int(math.sqrt(number)) + 1, 2):        while number % i == 0:            prime_factors.append(int(i))            number = number / i     if number > 2:        prime_factors.append(int(number))     return prime_factorsdef get_frequency(list):    dic={}    for ele in list:        if ele in dic:            dic[ele] += 1        else:            dic[ele] = 1    return dicdef Log2(x):     return (math.log10(x) /             math.log10(2));  def isPowerOfTwo(n):     return (math.ceil(Log2(n)) == math.floor(Log2(n)));     #here we go......................#Winners never quit, Quitters never wintime1=input()time2=input()h1, m1 =map(int,time1.split(":"))h2, m2 =map(int,time2.split(":"))#print(h1, m1)if h1 ==h2 :    totmin=(m2-m1)//2    net=m1+totmin    if net <10:        ans=str(h1)+":"+"0"+str(net)    else:        ans=str(h1)+":"+str(net)    if len(ans) ==4:        print("0"+ans)    else:        print(ans)else:    admin=(60-m1)+m2    adhr=h2-(h1+1)    totmin=(admin+(adhr*60))//2    #print(totmin)    while totmin:        #print(totmin)        if m1 + totmin>=60:            h1+=1            totmin-=(60-m1)            m1=0            #print(totmin,"left")        else:            m1+=totmin            totmin=0        #print(totmin)    if m1 <10:        ans=str(h1)+":"+"0"+str(m1)    else:        ans=str(h1)+":"+str(m1)    if len(ans) ==4:        print("0"+ans)    else:        print(ans)                            
