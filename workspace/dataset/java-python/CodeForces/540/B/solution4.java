import java.io.*;import java.util.*; public class P301B {     public static void main(String args[]){         Reader s = new Reader(System.in);        int n = s.nextInt();        int k = s.nextInt();        int p = s.nextInt();        int x = s.nextInt();        int y = s.nextInt();         if(p<y){           System.out.println(-1);           return;        }         int a[] = new int[k];        int ly = 0;        int gy = 0;        int ey = 0;        int sum = 0;        for(int i=0;i<k;i++){            a[i] = s.nextInt();            if(a[i]<y){                ly++;            }            if(a[i] == y){                ey++;            }             sum += a[i];        }         gy = k - ly;         //System.out.println(ly + " "+gy);        if(ly>= (n+1)/2){            System.out.println(-1);            return;        }        int one = (n-1)/2 - ly;        int yol = n - (n-1)/2 - gy;         if(yol < 0){             gy  -= (n - (n-1)/2);             one -= gy;              sum += one;            if(sum>x){                System.out.println(-1);                return;            }            for(int i=1;i<=one;i++){                System.out.print(1+" ");            }             return;        }         sum += (one + yol*y) ;         if(sum>x){            System.out.println(-1);            return;        }         for(int i=1;i<=one;i++){            System.out.print(1+" ");        }        for(int i=1;i<=yol;i++){            System.out.print(y+" ");        }       }    static class Reader {         private InputStream mIs;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;         public Reader() {            this(System.in);        }         public Reader(InputStream is) {            mIs = is;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();             }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = mIs.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public String nextLine() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        }         public String next() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isSpaceChar(c));            return res.toString();        }         double nextDouble()        {            return Double.parseDouble(next());        }         public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }     } }
