/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */ /** * * @author dipankar12 */import java.io.*;import java.util.*;public class r73b {    public static void main(String args[])    {        fastio in=new fastio(System.in);        PrintWriter pw=new PrintWriter(System.out);         int n=in.nextInt();        HashMap<String,Integer> countand=new HashMap<String,Integer>();        HashMap<String,Integer> countstar=new HashMap<String,Integer>();        countand.put("void", 0);        countstar.put("void", 0);        countand.put("errtype", -1);        countstar.put("errtype", -1);        for(int i=0;i<n;i++)        {            //System.out.println(countand+" "+countstar);            String type=in.readString();            int ca=0,cs=0;            if(type.equals("typedef"))            {                String a=in.readString();                String b=in.readString();                String str="";                for(int j=0;j<a.length();j++)                {                    if(a.charAt(j)=='&')                        ca++;                    else if(a.charAt(j)=='*')                        cs++;                    else                        str+=a.charAt(j);                }                                //System.out.println("str is"+str);                if(str.equals("void"))                {                    countand.put(b, ca);                    countstar.put(b, cs);                }                else if(!str.equals("errtype"))                {                    if(!countand.containsKey(str))                    {                        continue;                    }                    int ca1=countand.get(str);                    int cs1=countstar.get(str);                    //System.out.println(ca1+" "+cs1);                    if(ca1==-1&&cs1==-1)                    {                        countand.put(b, -1);                        countstar.put(b, -1);                        ca=-1;                        cs=-1;                        //System.out.println(countand+" "+countstar);                    }                    else                    {                        ca+=ca1;                        cs+=cs1;                    }                }                else                {                    countand.put(b, -1);                    countstar.put(b, -1);                }                                if(ca>cs)                {                    countand.put(b, -1);                    countstar.put(b, -1);                }                else if(!str.equals("errtype"))                {                    //System.out.println("putting "+b+" "+ca+" "+cs);                    countand.put(b, ca);                    countstar.put(b, cs);                }            }            else            {                String str=in.readString();                int ca1=0;                int cs1=0;                String str1="";                for(int j=0;j<str.length();j++)                {                    if(str.charAt(j)=='&')                        ca1++;                    else if(str.charAt(j)=='*')                        cs1++;                    else                        str1+=str.charAt(j);                }                                if(!countand.containsKey(str1))                {                    System.out.println("errtype");                    continue;                }                ca=countand.get(str1);                cs=countstar.get(str1);                if(ca==-1&&cs==-1)                    System.out.println("errtype");                else                {                    if(ca+ca1>cs+cs1)                        System.out.println("errtype");                    else                    {                        //System.out.println(countand+" "+countstar+" "+ca+" "+ca1+" "+cs+" "+cs1);                        System.out.print("void");                        for(int j=0;j<cs+cs1-ca-ca1;j++)                            System.out.print("*");                        System.out.println();                    }                }            }        }        pw.close();    }     static class fastio {                 private final InputStream stream;            private final byte[] buf = new byte[8192];            private int cchar, snchar;            private SpaceCharFilter filter;                 public fastio(InputStream stream) {                this.stream = stream;            }                 public int nxt() {                if (snchar == -1)                    throw new InputMismatchException();                if (cchar >= snchar) {                    cchar = 0;                    try {                        snchar = stream.read(buf);                    } catch (IOException e) {                        throw new InputMismatchException();                    }                    if (snchar <= 0)                        return -1;                }                return buf[cchar++];            }                 public int nextInt() {                int c = nxt();                while (isSpaceChar(c)) {                    c = nxt();                }                int sgn = 1;                if (c == '-') {                    sgn = -1;                    c = nxt();                }                int res = 0;                do {                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    res *= 10;                    res += c - '0';                    c = nxt();                } while (!isSpaceChar(c));                return res * sgn;            }                 public long nextLong() {                int c = nxt();                while (isSpaceChar(c)) {                    c = nxt();                }                int sgn = 1;                if (c == '-') {                    sgn = -1;                    c = nxt();                }                long res = 0;                do {                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    res *= 10;                    res += c - '0';                    c = nxt();                } while (!isSpaceChar(c));                return res * sgn;            }                 public int[] nextIntArray(int n) {                int a[] = new int[n];                for (int i = 0; i < n; i++) {                    a[i] = nextInt();                }                return a;            }                 public String readString() {                int c = nxt();                while (isSpaceChar(c)) {                    c = nxt();                }                StringBuilder res = new StringBuilder();                do {                    res.appendCodePoint(c);                    c = nxt();                } while (!isSpaceChar(c));                return res.toString();            }                 public String nextLine() {                int c = nxt();                while (isSpaceChar(c))                    c = nxt();                StringBuilder res = new StringBuilder();                do {                    res.appendCodePoint(c);                    c = nxt();                } while (!isEndOfLine(c));                return res.toString();            }                 public boolean isSpaceChar(int c) {                if (filter != null)                    return filter.isSpaceChar(c);                return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;            }                 private boolean isEndOfLine(int c) {                return c == '\n' || c == '\r' || c == -1;            }                 public interface SpaceCharFilter {                public boolean isSpaceChar(int ch);            }        }     }
