import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.FilterInputStream;import java.io.BufferedInputStream;import java.util.HashMap;import java.io.InputStream; /** * @author khokharnikunj8 */ public class Main {    public static void main(String[] args) {        new Thread(null, new Runnable() {            public void run() {                new Main().solve();            }        }, "1", 1 << 26).start();    }     void solve() {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        ScanReader in = new ScanReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BVasyaAndTypes solver = new BVasyaAndTypes();        solver.solve(1, in, out);        out.close();    }     static class BVasyaAndTypes {        public void solve(int testNumber, ScanReader in, PrintWriter out) {            int queries = in.scanInt();            HashMap<String, Pair> map = new HashMap<>();            for (int i = 0; i < queries; i++) {                String queryType = in.scanString();                if (queryType.equals("typedef")) {                    String type = in.scanString();                    String b = in.scanString();                    int ampersand = 0;                    for (int j = 0; j < type.length(); j++)                        if (type.charAt(j) == '&') ampersand++;                        else break;                    int asterik = 0;                    for (int j = type.length() - 1; j >= 0; j--) {                        if (type.charAt(j) == '*') asterik++;                        else break;                    }                    String dataType = type.substring(ampersand, type.length() - asterik);                    int diff = asterik - ampersand;                    if (dataType.equals("void")) {                        if (diff >= 0) map.put(b, new Pair("void", diff));                        else map.put(b, new Pair("errtype", 0));                    } else if (dataType.equals("errtype")) {                        map.put(b, new Pair("errtype", 0));                    } else {                        Pair result = map.getOrDefault(dataType, new Pair("errtype", 0));                        if (result.s.equals("errtype")) {                            map.put(b, new Pair("errtype", 0));                        } else {                            int resultDiff = diff + result.v;                            if (resultDiff >= 0) map.put(b, new Pair("void", resultDiff));                            else map.put(b, new Pair("errtype", 0));                        }                    }                  } else {                    String type = in.scanString();                    int ampersand = 0;                    for (int j = 0; j < type.length(); j++)                        if (type.charAt(j) == '&') ampersand++;                        else break;                    int asterik = 0;                    for (int j = type.length() - 1; j >= 0; j--) {                        if (type.charAt(j) == '*') asterik++;                        else break;                    }                    String dataType = type.substring(ampersand, type.length() - asterik);                    int diff = asterik - ampersand;                    if (dataType.equals("void")) {                        out.println("void");                    } else if (dataType.equals("errtype")) {                        out.println("errtype");                    } else {                        Pair result = map.getOrDefault(dataType, new Pair("errtype", 0));                        if (result.s.equals("errtype") || diff + result.v < 0) {                            out.println("errtype");                        } else {                            out.print(result.s);                            for (int j = 0; j < diff + result.v; j++) out.print("*");                            out.println();                        }                    }                 }            }        }         class Pair {            String s;            int v;             public Pair(String s, int v) {                this.s = s;                this.v = v;            }         }     }     static class ScanReader {        private byte[] buf = new byte[4 * 1024];        private int index;        private BufferedInputStream in;        private int total;         public ScanReader(InputStream inputStream) {            in = new BufferedInputStream(inputStream);        }         private int scan() {            if (index >= total) {                index = 0;                try {                    total = in.read(buf);                } catch (Exception e) {                    e.printStackTrace();                }                if (total <= 0) return -1;            }            return buf[index++];        }         public int scanInt() {            int integer = 0;            int n = scan();            while (isWhiteSpace(n)) n = scan();            int neg = 1;            if (n == '-') {                neg = -1;                n = scan();            }            while (!isWhiteSpace(n)) {                if (n >= '0' && n <= '9') {                    integer *= 10;                    integer += n - '0';                    n = scan();                }            }            return neg * integer;        }         public String scanString() {            int c = scan();            if (c == -1) return null;            while (isWhiteSpace(c)) c = scan();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = scan();            } while (!isWhiteSpace(c));            return res.toString();        }         private boolean isWhiteSpace(int n) {            if (n == ' ' || n == '\n' || n == '\r' || n == '\t' || n == -1) return true;            else return false;        }     }} 
