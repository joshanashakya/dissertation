import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.TreeMap; public class VasyaAndTypes {    public static TreeMap<String, Integer> parameters = new TreeMap<>();    public static int process(String A) {        int ampersands = 0, l = A.length();        while (A.charAt(ampersands) == '&')            ampersands++;         int asterisks = 0;        while (A.charAt(l - 1 - asterisks) == '*')            asterisks++;         String C = A.substring(ampersands, l - asterisks);         if (C.equals("errtype"))            return -1;        else {            if (!parameters.containsKey(C))                return -1;            int Cx = parameters.get(C);             if (Cx == -1)                return -1;             asterisks += Cx;            if (asterisks >= ampersands) {                return asterisks - ampersands;            } else {                return -1;            }        }    }    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(System.out);         int n = Integer.parseInt(br.readLine());         StringTokenizer st;           parameters.put("void", 0);         for (int i = 0; i < n; i++) {            st = new StringTokenizer(br.readLine());             String command = st.nextToken();             if (command.equals("typedef")) {                String A = st.nextToken();                String B = st.nextToken();                 parameters.put(B, process(A));             } else {                String A = st.nextToken();                 int x = process(A);                if (x == -1)                    pw.println("errtype");                else {                    pw.print("void");                    for (int j = 0; j < x; j++)                        pw.print("*");                    pw.println();                }            }        }         pw.flush();        pw.close();    }}
