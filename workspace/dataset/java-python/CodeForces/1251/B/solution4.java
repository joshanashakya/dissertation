import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Comparator;import java.util.List; public class BinaryPalindromes { // Template for CF    public static class ListComparator implements Comparator<List<Integer>> {         @Override        public int compare(List<Integer> l1, List<Integer> l2) {            for (int i = 0; i < l1.size(); ++i) {                if (l1.get(i).compareTo(l2.get(i)) != 0) {                    return l1.get(i).compareTo(l2.get(i));                }            }            return 0;        }    }     public static class Pair {        int first;        int second;         public Pair(int first, int second) {            this.first = first;            this.second = second;        }         public int getFirst() {            return first;        }         public int getSecond() {            return second;        }         @Override        public String toString() {            return first + " " + second;        }    }     public static void main(String[] args) throws IOException {        // Check for int overflow!!!!        // Should you use a long to store the sum or smthn?        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));        PrintWriter out = new PrintWriter(System.out);        int T = Integer.parseInt(f.readLine());        for (int i = 0; i < T; i++) {            int n = Integer.parseInt(f.readLine());            int even = 0;            int odd = 0;            int zero = 0;            int one = 0;            for (int j = 0; j < n; j++) {                String str = f.readLine();                if (str.length() % 2 == 0) {                    even++;                } else {                    odd++;                }                for (int k = 0; k < str.length(); k++) {                    if (str.charAt(k) - '0' == 0) {                        zero++;                    } else {                        one++;                    }                }            }            if (odd > 0) {                out.println(n);            } else {                if (zero % 2 == 0 && one % 2 == 0) {                    out.println(n);                } else {                    out.println(n - 1);                }            }        }        out.close();    } }
