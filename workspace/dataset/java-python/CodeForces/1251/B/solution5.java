import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; public class First {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        int t;        t = in.nextInt();        //t = 1;        while (t > 0) {            solver.call(in,out);            t--;        }        out.close();    }     static class TaskA {        public void call(InputReader in, PrintWriter out) {            int n ,a = 0;            n = in.nextInt();            Map<Integer , Integer> map =new HashMap<>();             String[] arr = new String[n];            for (int i = 0; i < n; i++) {                arr[i] = in.next();                if(arr[i].length()%2!=0){                    a++;                }            }            if(a==0) {                int b, c = 0 , d = 0;                for (int i = 0; i < n; i++) {                    b = 0;                    for (int j = 0; j < arr[i].length(); j++) {                        if(arr[i].charAt(j)=='0'){                            b++;                        }                    }                    if(b%2==0){                        c++;                    }                    else{                        d++;                    }                }                out.println(c + 2*(d/2));            }            else                out.println(n);            }    }     static class answer{        int[] arr;        public answer(int[] arr) {            this.arr = arr;        }    }     static class answer1{        Set<Integer> set;        public answer1(Set<Integer> set) {            this.set = set;        }    }     static long gcd(long a, long b)    {        if (b == 0)            return a;        return gcd(b, a % b);    }     static void sort(int[] a) {        ArrayList<Integer> l=new ArrayList<>();        for (int i:a) l.add(i);        Collections.sort(l);        for (int i=0; i<a.length; i++) a[i]=l.get(i);    }     static final Random random=new Random();     static void shuffleSort(int[] a) {        int n=a.length;        for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }     }}
