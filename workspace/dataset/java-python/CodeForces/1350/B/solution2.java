import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*; public class Main{     public static void main(String[] args) throws IOException    {         FastScanner input = new FastScanner();        int tc = input.nextInt();        while (tc-- > 0) {            int n = input.nextInt();            int a[] = new int[n + 1];            HashMap<Integer, TreeSet<Integer>> map = new HashMap<>();            for (int i = 1; i <= n; i++) {                for (int j = 1; j <= Math.sqrt(i); j++) {                    if (i % j == 0) {                        if (!map.containsKey(i)) {                            map.put(i, new TreeSet<>());                        }                        map.get(i).add(j);                         map.get(i).add(i / j);                     }                }            }            for (int i = 1; i <= n; i++) {                a[i] = input.nextInt();             }            int ans[] = new int[n + 1];            Arrays.fill(ans, 1);                        for (int j = 1; j <=n; j++) {                for (Integer integer : map.get(j)) {                    if (a[integer] < a[j]) {                        ans[j] = Math.max(ans[j], ans[integer] + 1);                    }                }            }                                   int max = Integer.MIN_VALUE;            for (int an : ans) {                max = Math.max(max, an);            }            System.out.println(max);         }     }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine() throws IOException        {            return br.readLine();        }    } }
