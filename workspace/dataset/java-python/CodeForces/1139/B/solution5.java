 import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.*;import java.util.logging.SimpleFormatter; public class solution{      public static void main(String[] args) {        FastScanner sc =  new FastScanner() ;       int n = sc.nextInt() ;       long A[] = new long[n] ;        for (int i=0 ; i<n ; i++)            A[i] = sc.nextLong() ;        long ans = 0 ;        long ct = Integer.MAX_VALUE ;        for (int i= n-1 ; i>=0 ; i--){            ct = Math.max(0 , Math.min(ct-1 , A[i])) ;            ans += ct ;        }        System.out.println(ans);    }                 static final Random random=new Random();     static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort        for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }     static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    }  }// FastScanner credits - SecondThread
