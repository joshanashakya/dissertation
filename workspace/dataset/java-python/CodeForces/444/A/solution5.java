import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.AbstractCollection;import java.util.PriorityQueue;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author kanak893 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, InputReader fi, PrintWriter out) {            int n, m, i, j, a, b;            n = fi.nextInt();            m = fi.nextInt();            double nodeval[] = new double[n + 1];            for (i = 1; i <= n; i++) {                nodeval[i] = fi.nextInt();            }            PriorityQueue<Edge> pq = new PriorityQueue<>();            for (i = 0; i < m; i++) {                pq.add(new Edge(fi.nextInt(), fi.nextInt(), fi.nextInt()));            }            double ans = 0;            while (!pq.isEmpty()) {                Edge e = pq.poll();                a = e.a;                b = e.b;                double temp = (double) (nodeval[a] + nodeval[b]) / ((double) e.weight);                ans = Math.max(ans, temp);             }            out.println(ans);         }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int snumChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int snext() {            if (snumChars == -1)                throw new InputMismatchException();            if (curChar >= snumChars) {                curChar = 0;                try {                    snumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (snumChars <= 0)                    return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = snext();            while (isSpaceChar(c))                c = snext();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = snext();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = snext();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null)                return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }     static class Edge implements Comparable<Edge> {        int a;        int b;        int weight;         Edge(int a, int b, int weight) {            this.a = a;            this.b = b;            this.weight = weight;        }         public int compareTo(Edge x) {            return Integer.compare(this.weight, x.weight);        }     }} 
