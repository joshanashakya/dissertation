import java.util.*; import java.io.*; import java.math.*;public class Main{	//Don't have to see. start------------------------------------------	static class InputIterator{		ArrayList<String> inputLine = new ArrayList<>(1024);		int index = 0; int max; String read;		InputIterator(){			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));			try{				while((read = br.readLine()) != null){					inputLine.addAll(Arrays.asList(read.split(" ")));				}			}catch(IOException e){}			max = inputLine.size();		}		boolean hasNext(){return (index < max);}		String next(){			if(hasNext()){				return inputLine.get(index++);			}else{				throw new IndexOutOfBoundsException("There is no more input");			}		}	}	static HashMap<Integer, String> CONVSTR = new HashMap<>();	static InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.	static PrintWriter out = new PrintWriter(System.out);	static void flush(){out.flush();}	static void myout(Object t){out.println(t);}	static void myerr(Object t){System.err.print("debug:");System.err.println(t);}	static String next(){return ii.next();}	static boolean hasNext(){return ii.hasNext();}	static int nextInt(){return Integer.parseInt(next());}	static long nextLong(){return Long.parseLong(next());}	static double nextDouble(){return Double.parseDouble(next());}	static ArrayList<String> nextCharArray(){return myconv(next(), 0);}	static ArrayList<String> nextStrArray(int size){		ArrayList<String> ret = new ArrayList<>(size);		for(int i = 0; i < size; i++){			ret.add(next());		}		return ret;	}	static ArrayList<Integer> nextIntArray(int size){		ArrayList<Integer> ret = new ArrayList<>(size);		for(int i = 0; i < size; i++){			ret.add(Integer.parseInt(next()));		}		return ret;	}	static ArrayList<Long> nextLongArray(int size){		ArrayList<Long> ret = new ArrayList<>(size);		for(int i = 0; i < size; i++){			ret.add(Long.parseLong(next()));		}		return ret;	}	@SuppressWarnings("unchecked")	static String myconv(Object list, int no){//only join		String joinString = CONVSTR.get(no);		if(list instanceof String[]){			return String.join(joinString, (String[])list);		}else if(list instanceof ArrayList){			return String.join(joinString, (ArrayList)list);		}else{			throw new ClassCastException("Don't join");		}	}	static ArrayList<String> myconv(String str, int no){//only split		String splitString = CONVSTR.get(no);		return new ArrayList<String>(Arrays.asList(str.split(splitString)));	}	public static void main(String[] args){		CONVSTR.put(8, " "); CONVSTR.put(9, "\n"); CONVSTR.put(0, "");		solve();flush();	}	//Don't have to see. end------------------------------------------	static void solve(){//Here is the main function		String L = next();		String R = next();		int Lindex = 0;		int Rindex = 0;		boolean LisOK = false;		StringBuilder Ls = new StringBuilder("");		for(int i = 0; i < L.length(); i++){			if(LisOK){				Ls.append(L.substring(i, i + 1));			}else if(L.charAt(i) != '0'){				Ls.append(L.substring(i, i + 1));				LisOK = true;			}		} 		boolean RisOK = false;		StringBuilder Rs = new StringBuilder("");		for(int i = 0; i < R.length(); i++){			if(RisOK){				Rs.append(R.substring(i, i + 1));			}else if(R.charAt(i) != '0'){				Rs.append(R.substring(i, i + 1));				RisOK = true;			}		}		String ssL = Ls.toString();		String ssR = Rs.toString();		if(ssL.equals(ssR)){			myout("=");		}else if(ssL.length() > ssR.length()){			myout(">");		}else if(ssL.length() < ssR.length()){			myout("<");		}else{			for(int i = 0; i < ssL.length(); i++){				if(ssL.charAt(i) > ssR.charAt(i)){					myout(">");					return;				}else if(ssL.charAt(i) < ssR.charAt(i)){					myout("<");					return;				}			}		} 	}	//Method addition frame start   	//Method addition frame end}
