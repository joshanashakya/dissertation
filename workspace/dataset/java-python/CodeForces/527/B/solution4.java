/** * ******* Created  on 15/1/20 7:27 PM******* */ import java.io.*;import java.util.*; public class B527 implements Runnable {     private static final int MAX = (int) (1E5 + 5);    private static final int MOD = (int) (1E9 + 7);    private static final long Inf = (long) (1E14 + 10);     private void solve() throws IOException {        int n = reader.nextInt();        char[] s = reader.next().toCharArray();        char[] t = reader.next().toCharArray();        int ans = 0, x=-1, y=-1;        int pos1[][] = new  int[26][26];        int pos2[][] = new  int[26][2];        for(int i=0;i<n;i++)            if(s[i]!=t[i]){                if(pos1[t[i]-'a'][s[i]-'a']!=0){                    x =  pos1[t[i]-'a'][s[i]-'a'];                    y = i +1;                    break;                }                pos1[s[i]-'a'][t[i]-'a']=i+1;                pos2[s[i]-'a'][0]=i+1;                pos2[t[i]-'a'][1]=i+1;            }        if(x == -1)            for(int i=0;i<26;i++)                if(pos2[i][0] !=0 && pos2[i][1]!=0 ){                    x = pos2[i][0];                    y=  pos2[i][1];                }        if(x !=-1)            swap(s, x-1, y-1);        writer.println(compute(s,t ,n) +"\n"+x+" "+y);    }     private int compute(char[] s, char[] t, int n) {        int ans =0;        for(int i=0;i<n;i++)            if(s[i]!=t[i])ans++;        return ans;    }     private void swap(char[] s, int i, int j) {        char temp = s[i];        s[i] = s[j];        s[j] = temp;    }     public static void main(String[] args) throws IOException {        try (Input reader = new StandardInput(); PrintWriter writer = new PrintWriter(System.out)) {            new B527().run();        }    }     StandardInput reader;    PrintWriter writer;     @Override    public void run() {        try {            reader = new StandardInput();            writer = new PrintWriter(System.out);            solve();            reader.close();            writer.close();        } catch (Exception e) {            e.printStackTrace();        }    }     interface Input extends Closeable {        String next() throws IOException;         default int nextInt() throws IOException {            return Integer.parseInt(next());        }         default long nextLong() throws IOException {            return Long.parseLong(next());        }         default double nextDouble() throws IOException {            return Double.parseDouble(next());        }         default int[] readIntArray() throws IOException {            return readIntArray(nextInt());        }         default int[] readIntArray(int size) throws IOException {            int[] array = new int[size];            for (int i = 0; i < array.length; i++) {                array[i] = nextInt();            }            return array;        }         default long[] readLongArray(int size) throws IOException {            long[] array = new long[size];            for (int i = 0; i < array.length; i++) {                array[i] = nextLong();            }            return array;        }    }     private static class StandardInput implements Input {        private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));         private StringTokenizer stringTokenizer;         @Override        public void close() throws IOException {            reader.close();        }         @Override        public String next() throws IOException {            if (stringTokenizer == null || !stringTokenizer.hasMoreTokens()) {                stringTokenizer = new StringTokenizer(reader.readLine());            }            return stringTokenizer.nextToken();        }    }}
