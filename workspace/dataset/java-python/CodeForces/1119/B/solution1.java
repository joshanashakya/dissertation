import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.util.*; public class Main { 	public static void main(String[] args) {		InputStream inputStream = System.in;		OutputStream outputStream = System.out;		InputReader in = new InputReader(inputStream);		PrintWriter out = new PrintWriter(outputStream);		TaskB solver = new TaskB();		solver.solve(in, out);		out.close();	} 	static class TaskB {		public void solve(InputReader in, PrintWriter out) {			int n = in.nextInt();			int h = in.nextInt();			int[] a = new int[n + 1];			for (int i = 1; i <= n; i++)				a[i] = in.nextInt();			int[] res = new int[n + 1];			int len = 0;			for (int i = 1; i <= n; i++) {				len++;				int[] b = new int[len + 1];				for (int j = len - 1; j >= 0; j--) {					if (a[i] > res[j]) {						res[j + 1] = a[i];						for (int l = 1, g = len; l <= b[0]; l++, g--)							res[g] = b[l];						break;					}					b[++b[0]] = res[j];				}				if (pd(res, len, h)) {					out.println(len - 1);					break;				}				if(i==n) out.println(len);			}		} 		static boolean pd(int[] a, int len, int h) {			if (len % 2 == 1) {				long sum = 0;				for (int i = 1; i <= len; i += 2) {					sum += a[i];					if (sum > h)						return true;				}			}else {				long sum = 0;				for(int i=2;i<=len;i+=2) {					sum += a[i];					if(sum>h) return true;				}			}			return false;		}	} 	static class InputReader {		public BufferedReader reader;		public StringTokenizer tokenizer; 		public InputReader(InputStream stream) {			reader = new BufferedReader(new InputStreamReader(stream), 32768);			tokenizer = null;		} 		public String next() {			while (tokenizer == null || !tokenizer.hasMoreElements()) {				try {					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		}	}}
