#!/usr/bin/env pythonfrom __future__ import division, print_functionimport mathimport osimport sysfrom sys import stdin,stdoutfrom io import BytesIO, IOBasefrom collections import deque#sys.setrecursionlimit(10**5)if sys.version_info[0] < 3:    from __builtin__ import xrange as range    from future_builtins import ascii, filter, hex, map, oct, zip  # region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  def print(*args, **kwargs):    """Prints the values to a stream, or to sys.stdout by default."""    sep, file = kwargs.pop("sep", " "), kwargs.pop("file", sys.stdout)    at_start = True    for x in args:        if not at_start:            file.write(sep)        file.write(str(x))        at_start = False    file.write(kwargs.pop("end", "\n"))    if kwargs.pop("flush", False):        file.flush()  if sys.version_info[0] < 3:    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)else:    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout) input = lambda: sys.stdin.readline().rstrip("\r\n")#-----------------------------------------------------------------def binarySearchCount(arr, n, key):    left = 0    right = n - 1     count = 0     while (left <= right):        mid = int((right + left) / 2)         # Check if middle element is        # less than or equal to key        if (arr[mid] < key):            count = mid + 1            left = mid + 1         # If key is smaller, ignore right half        else:            right = mid - 1    return countdef regularbracket(t):    p=0    for i in t:        if i=="(":            p+=1        else:            p-=1        if p<0:            return False    else:        if p>0:            return False        else:            return True# endregion"""def main():        t = int(input())    for _ in range(t):        s = input()        ss=""        ss2=""        first=s[0]        last=s[len(s)-1]        for i in s:            if i==first:                ss+="("            elif i==last:                ss+=")"            else:                ss+="("        for i in s:            if i==first:                ss2+="("            elif i==last:                ss2+=")"            else:                ss2+=")"         if regularbracket(ss)==True or regularbracket(ss2)==True:            print("YES")        else:            print("NO")        #------------------------------------------------------------    t = int(input())    for _ in range(t):        n,u1,r1,d1,l1 = map(int,input().split())        u = u1        r = r1        d = d1        l = l1        if u<=n-2 and r<=n-2 and d<=n-2 and l<=n-2 :            print("YES")        else:            if u1==n:                r-=1                l-=1            if r1==n:                u-=1                d-=1            if d1==n:                r-=1                l-=1            if l1==n:                u-=1                d-=1            if u1==n-1:                if r>l:                    r-=1                else:                    l-=1            if r1==n-1:                if u>d:                    u-=1                else:                    d-=1            if d1==n-1:                if r>l:                    r-=1                else:                    l-=1            if l1==n-1:                if u>d:                    u-=1                else:                    d-=1            # print(u,r,d,l)            if u>=0 and r>=0 and d>=0 and l>=0:                print("YES")            else:                print("NO")""""""def main():    t = int(input())    for _ in range(t):        a,b,k = map(int,input().split())        s=0        s=s+((k+1)//2)*a        s-=(k//2)*b        print(s)"""def main():    n = int(input())    c = list(map(int,input().split()))    t = c[0]    j = c[n-1]    p=0    g=0    for i in range(n):        if c[i]!=j:            p = i+1            break    for i in range(n-1,-1,-1):        if c[i]!=t:            g = i            break    print(max(n-p,g))if __name__ == '__main__':    main()
