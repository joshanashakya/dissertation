import java.io.*;import java.util.*; public class CF {    public static void main(String[] args) throws IOException {        //BufferedReader br = new BufferedReader(new FileReader("input.txt"));        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));         StringTokenizer st = new StringTokenizer(br.readLine());        int n = Integer.parseInt(st.nextToken());        int k = Integer.parseInt(st.nextToken());         int[] b = new int[n];        st = new StringTokenizer(br.readLine());        for (int i = 0; i < n; i++) {            //System.out.println(i);            b[i] = Integer.parseInt(st.nextToken());        }         int[] c = new int[k];        st = new StringTokenizer(br.readLine());        for (int i = 0; i < k; i++) {            c[i] = Integer.parseInt(st.nextToken()) - 1;        }         long ret = 0;         // connect i with i + 1        for (int i = 0; i < n - 1; i++) {            ret += b[i] * b[i + 1];        }         // connect n - 1 with 0        ret += b[n - 1] * b[0];         long beautySum = 0;        for (int val : b) beautySum += val;         HashSet<Integer> coveredCapitals = new HashSet<>();        for (int value : c) {            long adjSum = beautySum - b[value];             int left = value - 1 == -1 ? n - 1 : value - 1;            if (!coveredCapitals.contains(left)) {                adjSum -= b[left];            }             int right = value + 1 == n ? 0 : value + 1;            if (!coveredCapitals.contains(right)) {                adjSum -= b[right];            }             ret += adjSum * b[value];            beautySum -= b[value];            coveredCapitals.add(value);        }         pw.println(ret);        pw.close();    }} /*4 22 3 1 23 2 */
