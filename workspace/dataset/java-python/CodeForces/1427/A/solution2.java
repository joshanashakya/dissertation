import java.io.*; import java.util.*; public class Solution {	 public static void main(String[] args) throws Exception    {		 FastReader fr=new FastReader();		 int t=fr.nextInt();				 while(t-->0) {		  int n=fr.nextInt();		  int a[]=new int[n];		  long pos=0;		  long neg=0;		  for(int i=0;i<n;i++) {			  a[i]=fr.nextInt();			  if(a[i]>=0)				  pos+=a[i];			  else				  neg+=a[i];		  }		  if(pos+neg==0) {			  System.out.println("NO");		  }		  else {			  System.out.println("YES");			  long s=pos+neg;			  Arrays.sort(a);			  if(s>0) {				  for(int i=n-1;i>=0;i--) {					  System.out.print(a[i]+" ");				  }			  }			  else {								  for(int i=0;i<n;i++) {					  System.out.print(a[i]+" ");				  }				 			  }			  System.out.println();		  }		  		  		  		  			  		   		  }				 	}	 		public static long gcd(long n1,long n2) {		 if (n2 == 0) {		        return n1;		    }		    return gcd(n2, n1 % n2);	}	 public static boolean isPali(String s) {		 int i=0;		 int j=s.length()-1;		 while(i<=j) {			 if(s.charAt(i)!=s.charAt(j))				 return false;			 i++;			 j--;		 }		 return true;	 }	 public static String reverse(String s) {		 String res="";		 for(int i=0;i<s.length();i++) {			 res+=s.charAt(i);		 }		 return res;	 }				 	 public static int bsearch(long suf[],long val) {		 int i=0;		 int j=suf.length-1;		 while(i<=j) {			 int mid=(i+j)/2;			 if(suf[mid]==val)				 return mid;			 else if(suf[mid]<val)				 j=mid-1;			 else				 i=mid+1;		 }		 return -1;	 }	 	 	 		 	 	public static int[] getFreq(String s) {		int a[]=new int[26];		for(int i=0;i<s.length();i++) {			a[s.charAt(i)-'a']++;		}		return a;			}	 	 public static boolean isPrime(int n) {		 		 for(int i=2;(i*i)<=n;i++) {			 if(n%i==0)				 return false;		 }		 return true;	 }            	                                }class Pair implements Comparable<Pair>{	int num;	int freq;		Pair(int num,int freq){		this.num=num;				this.freq=freq;	}	public int compareTo(Pair o) {		return o.freq-this.freq;	}}		 		 	     class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br = new BufferedReader(new                InputStreamReader(System.in));    }     String next()    {        while (st == null || !st.hasMoreElements())        {            try            {                st = new StringTokenizer(br.readLine());            }            catch (IOException e)            {                e.printStackTrace();            }        }        return st.nextToken();    }     int nextInt()    {        return Integer.parseInt(next());    }     long nextLong()    {        return Long.parseLong(next());    }     double nextDouble()    {        return Double.parseDouble(next());    }     String nextLine()    {        String str = "";        try        {            str = br.readLine();        }        catch (IOException e)        {            e.printStackTrace();        }        return str;    }} 
