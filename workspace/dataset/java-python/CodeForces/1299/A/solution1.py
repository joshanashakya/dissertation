import sysimport itertoolsimport collections n = int(input())A = [int(x) for x in input().split()]perms = [] def bits(lst):    a = []    for val in lst:        s = []        for shift in range(29, -1, -1):            s += [str(val >> shift & 1)]        a += [''.join(s[::-1])]    return a def calcCost(perm):    f = lambda a, b: ((a|b) - b)    a = f(perm[0], perm[1])    for i in range(2, len(perm)):        a = f(a, perm[i])    return a def bruteForce():    global perms    for perm in list(itertools.permutations(A)):        perms += [(perm, calcCost(perm))]    print(*perms, sep="\n") # bruteForce()# print('not reversed')# print(*bits(A, False), sep='\n')# print('reversed')# print(*bits(A, True), sep='\n') calcBits = bits(A)# print(*calcBits, sep='\n')for i in range(29, -1, -1):    one = 0    swapIndex = None    for ii in range(n):        if calcBits[ii][i] == '1':            one += 1            swapIndex = ii    if one == 1:        A[0], A[swapIndex] = A[swapIndex], A[0]        breakprint(*A) # for shift in range(29, -1, -1):#     c = 0#     b = None#     print('shift', shift)#     for i in range(n):#         if A[i] >> shift & 1 == 1:#             print(A[i], A[i] >> shift & 1)#             c += 1#             b = i#     if c == 1:#         A[b], A[0] = A[0], A[b]#         break# print(*A)"""315479581 010010110011011101011000011101954336048 111000111000100000001100110000124252105 000111011001111110111111001001880492165 110100011110110011111010000101179952043 001010101110011101100110101011"""
