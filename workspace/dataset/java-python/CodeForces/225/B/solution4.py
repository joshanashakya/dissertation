from sys import stdin,stdout,setrecursionlimitfrom functools import lru_cache, cmp_to_keyfrom heapq import merge, heapify, heappop, heappushfrom math import *from collections import defaultdict as dd, deque, Counter as Cfrom itertools import combinations as comb, permutations as perm , accumulatefrom bisect import bisect_left as bl, bisect_right as br, bisectfrom time import perf_counterfrom fractions import Fractionimport copyimport timestarttime = time.time()mod = int(pow(10, 9) + 7)mod2 = 998244353# from sys import stdin# input = stdin.readline#def data(): return sys.stdin.readline().strip()def data(): return input()def num():return int(input())def L(): return list(sp())def sl(): return list(ssp())def sp(): return map(int, data().split())def ssp(): return map(str, data().split())def l1d(n, val=0): return [val for i in range(n)]def l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]def pmat(A):    for ele in A:        print(*ele,end="\n")def pmat2(A):    for ele in A:        for j in ele:            print(j,end='')        print()def iseven(n):    return n%2==0 def seive(r):    prime=[1 for i in range(r+1)]    prime[0]=0    prime[1]=0    for i in range(r+1):        if(prime[i]):            for j in range(2*i,r+1,i):                prime[j]=0    return prime#solutions,k=sp()f=[0,1]while True:    cur=sum(f[-k:])    if cur>s:        break    f.append(cur)f=list(set(f));f.sort()i=len(f)-1;ans=[]while(s and i>0):    if f[i]<=s:        s-=f[i]        ans.append(f[i])    i-=1print(len(ans)+1)print(*ans+[0]) #Copied   endtime = time.time()#print(f"Runtime of the program is {endtime - starttime}") 
