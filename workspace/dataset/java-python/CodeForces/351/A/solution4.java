import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {//		final long startTime = System.nanoTime();		InputReader in = new InputReader(System.in);		PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));		TaskB solver = new TaskB();		solver.solve(1, in, out);//		final long duration = System.nanoTime() - startTime;		out.flush();		out.close(); 	}} class Pair implements Comparable<Pair> {	int first;	double second; 	Pair(int first, double second) {		this.first = first;		this.second = second;	} 	@Override	public int compareTo(Pair e) {		return Double.compare(second, e.second);	}} class TaskB {	int INF = (int) 1e9 + 7;	int MAX_N = (int) 1e5 + 5;	long mod = (long) 1e8;	ArrayList<Pair> edges[];	ArrayList<Pair> edges2[];	int edgeList[][];	int vis[];	ArrayList<Long> dist[]; 	void solve(int testNumber, InputReader in, PrintWriter pw) { 		int n = in.nextInt();		int arr[] = new int[2 * n];		int osum = 0;		for (int i = 0; i < 2 * n; i++) {			String a[] = in.next().split("\\.");			arr[i] = Integer.parseInt(a[1]);			osum += arr[i];		}		int b[] = new int[2 * n];		for (int i = 0; i < 2 * n; i++) {			if (arr[i] == 0) {				b[i] = 0;			} else {				b[i] = 1000;			}		}		Arrays.sort(b);		int l = 0, r = 0;		for (int i = 0; i < n; i++) {			l += b[i];			r += b[i + n];		}		int ans = INF;		for (int i = l; i <= r; i += 1000) {			ans = Math.min(ans, Math.abs(osum - i));		}		double ret = (double) ans / 1000.0;		pw.printf("%.3f", ret); 	} } class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
