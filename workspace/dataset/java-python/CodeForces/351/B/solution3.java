import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer; public class Main {	public static void main(String[] args) throws FileNotFoundException, IOException {		InputReader in = new InputReader(System.in);		PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));		TaskB solver = new TaskB();		solver.solve(1, in, out);		out.flush();		out.close(); 	}} class Pair implements Comparable<Pair> {	int first;	double second; 	Pair(int first, double second) {		this.first = first;		this.second = second;	} 	@Override	public int compareTo(Pair e) {		return Double.compare(second, e.second);	}} class TaskB {	int INF = (int) 1e9 + 7;	int MAX_N = (int) 1e5 + 5;	long mod = (long) 1e8;	ArrayList<Pair> edges[];	ArrayList<Pair> edges2[];	int edgeList[][];	int vis[];	ArrayList<Long> dist[]; 	void solve(int testNumber, InputReader in, PrintWriter pw) {		int n = in.nextInt();		int arr[] = new int[n];		for (int i = 0; i < n; i++) {			arr[i] = in.nextInt() - 1;		}		int inv = 0;		for (int i = 0; i < n; i++) {			for (int j = i + 1; j < n; j++) {				if (arr[i] > arr[j]) {					++inv;				}			}		}		int ans = (inv) / 2 * 4 + inv % 2;		pw.println(ans);	}} class InputReader {	BufferedReader br;	StringTokenizer st; 	public InputReader(InputStream in) {		br = new BufferedReader(new InputStreamReader(in));		st = null;	} 	public String next() {		while (st == null || !st.hasMoreTokens()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException e) {				throw new RuntimeException(e);			}		}		return st.nextToken();	} 	public int nextInt() {		return Integer.parseInt(next());	} 	public long nextLong() {		return Long.parseLong(next());	} 	public double nextDouble() {		return Double.parseDouble(next());	}}
