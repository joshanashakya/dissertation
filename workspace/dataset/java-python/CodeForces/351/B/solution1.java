import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     void run(FastScanner in, PrintWriter out) {         // jeff turn        // jeff reduces permutations by 1 (since he plays optimally)         // furik has 50% chance to increase permutation by 1, and 50% chance        // to decrease by 1         int N = in.nextInt();        int[] a = new int[N];        for (int i = 0; i < N; i++) a[i] = in.nextInt();         // get number of inversions        BIT bit = new BIT();        int numInversions = 0;        for (int i = N-1; i >= 0; i--) {            numInversions += bit.get(a[i]-1);            bit.add(a[i]);        }         int maxNumberInversions = (N*(N-1))/2;        double[] p = new double[maxNumberInversions+1];         for (int i = 1; i <= maxNumberInversions; i++) {            if (i%2 == 1) {                // jeff turn                p[i] = 1+p[i-1];            } else {                // furik turn                // f(x) = 1 + 0.5f(x-1) + 0.5f(x+1)                // we know f(x+1) = 1+f(x) since jeff plays optimally                // f(x) = 1+0.5f(x-1) + 0.5(1+f(x))                // f(x) = 2 + f(x-1) + 1 = 3+f(x-1)                p[i] = 3+p[i-1];            }        }         out.println(p[numInversions]);     }     class BIT {         int[] bit;        BIT() {            bit = new int[3002];        }         void add(int index) {            for (int i = index+1; i < bit.length; i+=(i&-i)) {                bit[i]++;            }        }         int get(int index) {            int ret = 0;            for (int i = index+1; i > 0; i-=(i&-i)) {                ret += bit[i];;            }            return ret;        }     }      static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
