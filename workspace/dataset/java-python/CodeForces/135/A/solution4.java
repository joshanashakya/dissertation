import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main{     static void sort(int a[])    {        Random ran = new Random();        for (int i = 0; i < a.length; i++) {            int r = ran.nextInt(a.length);            int temp = a[r];            a[r] = a[i];            a[i] = temp;        }         Arrays.sort(a);    }     public static void main(String[] args) throws IOException    {        FastScanner input = new FastScanner();        int n = input.nextInt();        int a[] = new int[n+1];        int max = Integer.MIN_VALUE;        for (int i = 1; i <=n; i++) {            a[i] = input.nextInt();            max = Math.max(max, a[i]);        }        //        System.out.println(max);        if(max!=1)        {            a[0] = 1;            sort(a);            for (int i = 0; i <n; i++) {                System.out.print(a[i]+" ");            }        }        else        {            a[n]=2;            sort(a);            for (int i = 1; i <=n; i++) {            System.out.print(a[i]+" ");        }            System.out.println("");        }                                            }     static class FastScanner    {         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next()        {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         int[] readArray(int n)        {            int[] a = new int[n];            for (int i = 0; i < n; i++) {                a[i] = nextInt();            }            return a;        }         long nextLong()        {             return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }    } }
