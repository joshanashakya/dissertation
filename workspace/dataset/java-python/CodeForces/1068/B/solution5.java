 import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.StringTokenizer; import java.util.*; public class atcoderbg{ 	static class Node{		int key;		Node left;		Node right;		Node(int k){			key=k;		}	}	    //By shwetank_verma    static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }     static int mod=1000000007;    static boolean primes[]=new boolean[1000007];        static boolean seive(int n){        Arrays.fill(primes,true);        primes[0]=primes[1]=false;        for(int i=2;i*i<=n;i++){            if(primes[i]==true){                for(int p=i*i;p<=n;p+=i){                    primes[p]=false;                }            }        }        if(n<1000007){            return primes[n];        }        return false;            }    static int gcd(int a,int b){        if(b==0)        return a;        return gcd(b,a%b);    }    static long GCD(long a,long b){        if(b==0)        return a;        return GCD(b,a%b);    }        static boolean check(long n)     {                 return 1162261467 % n == 0;     }    static long lcm(long a, long b){        return a / GCD(a, b) * b;      }    static long nCrModpDP(int n, int r, long p)     {         // The array C is going to store last row of         // pascal triangle at the end. And last entry         // of last row is nCr         long[] C=new long[r+1];               C[0] = 1; // Top row of Pascal Triangle               // One by constructs remaining rows of Pascal         // Triangle from top to bottom         for (int i = 1; i <= n; i++)         {             // Fill entries of current row using previous             // row values             for (int j = Math.min(i, r); j > 0; j--)                       // nCj = (n-1)Cj + (n-1)C(j-1);                 C[j] = (C[j] + C[j-1])%p;         }         return C[r];     }     static boolean checkDivisibility(long n, long digit)     {         // If the digit divides the number         // then return  true else return false.         return (digit != 0 && n % digit == 0);     }       // Function to check if all     // digits of n divide it or not,     static boolean allDigitsDivide(long n)     {         long temp = n;         while (temp > 0) {               // Taking the digit of the             // number into var 'digit'.             long digit = temp % 10;               if ((checkDivisibility(n, digit)) == false)                 return false;               temp /= 10;         }         return true;     }    static int height(Node root) {    	if(root==null)    		return 0;    	else {    		return Math.max(height(root.right),height(root.left))+1;    	}    }    static void inorder(Node root) {		if(root!=null) {			inorder(root.left);			System.out.print(root.key+" ");			inorder(root.right);		}	}    static void preorder(Node root) {    	if(root!=null) {    		System.out.print(root.key+" ");    		preorder(root.left);    		preorder(root.right);    	}    }    static void postorder(Node root) {    	if(root!=null) {    		postorder(root.left);    		postorder(root.right);    		System.out.print(root.key+" ");    	}    }    public static void main(String[] args)     {         FastReader sc=new FastReader();         int t=1;        //t=sc.nextInt();        while(t-->0) {        	long n=sc.nextLong();        	TreeSet<Long> ts=new TreeSet<>();        	        	for(long i=1;i*i<=n;i++) {        		if(n%i==0)        		{        			ts.add(i);        			ts.add(n/i);        		}        	}        	System.out.println(ts.size());        }            } }
