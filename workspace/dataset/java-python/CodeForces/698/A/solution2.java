// 31-Mar-2021import java.util.*;import java.io.*; public class D {	static class FastReader { 		BufferedReader br;		StringTokenizer st; 		private FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st == null || !st.hasMoreElements()) {				try {					st = new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		int[] nextIntArray(int n) {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		int[] nextIntArrayOne(int n) {			int[] a = new int[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextInt();			return a;		} 		long[] nextLongArray(int n) {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		long[] nextLongArrayOne(int n) {			long[] a = new long[n + 1];			for (int i = 1; i < n + 1; i++)				a[i] = nextLong();			return a;		} 		long nextLong() {			return Long.parseLong(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (IOException e) {				e.printStackTrace();			}			return str;		}	} 	public static void main(String[] args) {		FastReader s = new FastReader();		StringBuilder str = new StringBuilder(); 		int t = 1;				while (t-- > 0) {			int n = s.nextInt();			int arr[] = s.nextIntArray(n);			int dp[][] = new int[n + 1][4];			for(int d[]  : dp) {				Arrays.fill(d, -1);			}						int used = solve(arr,0,0,dp);						str.append(n - used);		}		System.out.println(str);	} 	private static int solve(int[] arr, int i, int previous, int[][] dp) {		if(i == arr.length) return 0;				if(dp[i][previous] != -1) return dp[i][previous];				if(previous == 0) {			if(arr[i] == 0) {				return dp[i][previous] = solve(arr,i + 1,arr[i], dp);			}else if(arr[i] == 1 || arr[i] == 2) {				return dp[i][previous] = 1 + solve(arr,i + 1,arr[i], dp);			}else {				int a = solve(arr, i + 1, 1, dp);				int b = solve(arr, i + 1, 2, dp);				return dp[i][previous] = Math.max(a, b) + 1;			}					}else if(previous == 1) {						if(arr[i] == 0 || arr[i] == 1) {				return dp[i][previous] = solve(arr,i + 1,0, dp);			}else {				return dp[i][previous] =  solve(arr, i + 1,2, dp) + 1;			}					}else if(previous == 2) {			if(arr[i] == 0 || arr[i] == 2) {				return dp[i][previous] = solve(arr,i + 1,0, dp);			}else {				return dp[i][previous] = solve(arr,i + 1,1, dp) + 1; 			}		}						return 0;	} }
