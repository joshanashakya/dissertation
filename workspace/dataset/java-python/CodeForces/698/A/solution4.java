import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; public class Newbie {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        int t;        //t = in.nextInt();        t = 1;        while (t > 0) {            solver.call(in,out);            t--;        }        out.close();    }     static class TaskA {        long[][] dp;        int[] arr;        int n;         public void call(InputReader in, PrintWriter out) {             n = in.nextInt();             dp  = new long[n+1][4];            arr = new int[n+1];             for (int i = 1; i <= n; i++) {                arr[i] = in.nextInt();            }             for (int i = 0; i <= n ; i++) {                for (int j = 0; j < 4 ; j++) {                    dp[i][j] = -1;                }            }            out.println(ans(1,arr[1]));        }         public long ans(int a, int b){            if(a>n)                return 0;             if(arr[a]==0){                dp[a][b] = 1 + ans(a+1 , 0);                return dp[a][b];            }             if(dp[a][b]==-1) {                 if(arr[a]==b && a!=1){                    dp[a][b] = 1+ans(a+1,0);                }                else{                    if(arr[a]==1 || arr[a]==2)                        dp[a][b] = Math.min(1 + ans(a+1,0) , ans(a+1,arr[a]));                    else {                        if(b==1){                            dp[a][b]= Math.min(1+ans(a+1,0) , ans(a+1 , 2));                        }                        else if(b==2){                            dp[a][b]= Math.min(1+ans(a+1,0) , ans(a+1 , 1));                        }                        else                            dp[a][b] = Math.min(1+ans(a+1,0) , Math.min(ans(a+1 , 1) , ans(a+1,2)));                    }                }            }            return dp[a][b];         }    }     static class answer implements Comparable<answer>{        int a,b;         public answer(int a, int b) {            this.a = a;            this.b = b;        }         @Override        public int compareTo(answer o) {            return o.a - this.a;        }    }     static long gcd(long a, long b)    {        if (b == 0)            return a;        return gcd(b, a % b);    }     static void sort(int[] a) {        ArrayList<Integer> l=new ArrayList<>();        for (int i:a) l.add(i);        Collections.sort(l);        for (int i=0; i<a.length; i++) a[i]=l.get(i);    }     static void shuffle_sort(int[] a) {        Random r=new Random();        int n=a.length;        for (int i=0; i<n; i++) {            int oi=r.nextInt(i);            int temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }        Arrays.sort(a);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }     }}
