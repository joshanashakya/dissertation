import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     int N;    List<Integer>[] adj;    void run(FastScanner in, PrintWriter out) {         N = in.nextInt();         LinkedList<Integer> freeSet = new LinkedList<>();        int[] a = new int[N+1];        UnionFind uf = new UnionFind(N);        int count = 0;         int root = -1;        for (int u = 1; u <= N; u++) {            int v = in.nextInt();            a[u] = v;             if (uf.findParent(u) != uf.findParent(v)) {                uf.merge(u, v);                continue;            }             if (u == v && root == -1) {                root = u;                continue;            }             count++;            // already same union            if (!freeSet.isEmpty()) {                int top = freeSet.pollFirst();                a[top] = u;                uf.merge(top, u);            }            freeSet.offer(u);        }         if (!freeSet.isEmpty()) {            int top = freeSet.pollFirst();            if (root == -1) a[top] = top;            else a[top] = root;        }         out.println(count);        for (int i = 1; i <= N; i++) {            out.print(a[i] + " ");        }        out.println();       }     class UnionFind {        int[] parent;        int[] rank;        UnionFind(int N) {            parent = new int[N+1];            rank = new int[N+1];            for (int i = 1; i <= N; i++) {                parent[i] = i;            }        }         int findParent(int x) {            int init = x;            while (x != parent[x]) x = parent[x];            return parent[init] = x;        }         void merge(int x, int y) {            int px = findParent(x);            int py = findParent(y);            if (px == py) return;             int rx = rank[px];            int ry = rank[py];            if (rx <= ry) {                parent[px] = py;                if (rx == ry) rank[py]++;            } else {                parent[py] = px;            }        }     }         static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
