import java.io.*;import java.lang.reflect.Array;import java.util.*;import static java.lang.Integer.min;import static java.lang.Long.max; public final class Main {        static FastScanner in=new FastScanner();        static PrintWriter out=new PrintWriter(System.out);         /*        Never use sorting on 1-indexed array! or be very careful about negative values and stuff        read the statement carefully!        */        public static void main(String[]args) {                int n=in.nextInt(),l=in.nextInt(),r=in.nextInt(),ql=in.nextInt(),qr=in.nextInt();                int[]w=in.nextArray(n,0);                int sum=0;                for (int i=0;i<n;i++)sum+=w[i];                int sumLeft=0,sumRight,ans=Integer.MAX_VALUE;                for (int left=0;left<=n;left++){                        int right=n-left;                        sumRight=sum-sumLeft;                        int cur=sumLeft*l+sumRight*r;                        if (left-right>1) {                                cur+=(left-right-1)*ql;                        }else if(right-left>1){                                cur+=(right-left-1)*qr;                        }                        ans=min(ans, cur);                        if (left<n) sumLeft+=w[left];                }                  out.println(ans);                out.close();        }            static long lcm(long a,long b, long c){                return lcm(a,lcm(b,c));        }        static long lcm(long a,long b){                return a*b/gcd(a,b);        }        static long gcd(long a,long b) {                if (a == 0) return b;                return gcd(b%a,a);        }        static void printArray(long[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(int[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(String[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(double[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static void printArray(boolean[]a,int m){                for (int i=m;i<a.length+m;i++)out.print(a[i]+" ");                out.println();        }        static class Pair implements Comparable<Pair>{                int first,second;                public Pair(int a,int b) {                        first=a;                        second=b;                }                @Override                public int compareTo(Pair o) {                        return first-o.first;                }        }        static class FastScanner{                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));                StringTokenizer st=new StringTokenizer("");                String next(){                        while(!st.hasMoreTokens())                                try{                                        st=new StringTokenizer(br.readLine());                                }catch(IOException e){                                        e.printStackTrace();                                }                        return st.nextToken();                }                int nextInt() {                        return Integer.parseInt(next());                }                int[] nextArray(int n,int m) {                        int[] a=new int[n+m];                        for (int i=m;i<n+m;i++)a[i]=nextInt();                        return a;                }                long nextLong() {                        return Long.parseLong(next());                }                double nextDouble() {                        return Double.parseDouble(next());                }        }}
