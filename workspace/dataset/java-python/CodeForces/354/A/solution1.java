import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int N;    long[] w;    long L, R, QL, QR;    void run(FastScanner in, PrintWriter out) {        // unique state defined by l, r, prevMove         N = in.nextInt();        L = in.nextInt();        R = in.nextInt();        QL = in.nextInt();        QR = in.nextInt();         w = new long[N];        for (int i = 0; i < N; i++) w[i] = in.nextInt();          long[] lCost = new long[N];        long[] rCost = new long[N];         lCost[0] = w[0]*L;        for (int i = 1; i < N; i++) {            lCost[i] = lCost[i-1] + w[i]*L + QL;        }         rCost[N-1] = w[N-1]*R;        for (int i = N-2; i >= 0; i--) {            rCost[i] = rCost[i+1] + w[i]*R + QR;        }         long min = Long.MAX_VALUE;         // System.out.println(Arrays.toString(lCost));        // System.out.println(Arrays.toString(rCost));         for (int i = 0; i < N; i++) {             long c1 = lCost[i] + (i == N-1 ? 0 : rCost[i+1]);            int itemsTakenFromLeft = i+1;            int itemsTakenFromRight = N-i-1;             // i am counting QL itemsTakenFromLeft-1 times            // i am counting QR itemsTakenFromRight-1 times            if (itemsTakenFromLeft < itemsTakenFromRight) {                c1 -= Math.max(0,itemsTakenFromLeft-1) * QL;                c1 -= (itemsTakenFromLeft * QR);            } else if (itemsTakenFromLeft > itemsTakenFromRight) {                c1 -= itemsTakenFromRight * QL;                c1 -= Math.max(0,itemsTakenFromRight-1) * QR;            } else {                c1 -= Math.max(0,itemsTakenFromLeft-1) * QL;                c1 -= Math.max(0,itemsTakenFromRight-1) * QR;            }             min = Math.min(min, c1);        }         // consider all right        min = Math.min(min, rCost[0]);         out.println(min);    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
