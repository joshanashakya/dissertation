import java.io.*;import java.lang.*;import java.util.*;import java.math.*; public class code{    static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }           long nextLong()         {             return Long.parseLong(next());         }           double nextDouble()         {             return Double.parseDouble(next());         }           String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     }      public static void main(String args[])throws IOException    {        FastReader scn = new FastReader();                int n = scn.nextInt();        int l = scn.nextInt();        int r = scn.nextInt();        int ql = scn.nextInt();        int qr = scn.nextInt();         long cost = 0;        int[] weights = new int[n];        long sum_weights = 0;         for(int i = 0; i < n; i++)        {            weights[i] = scn.nextInt();            sum_weights += weights[i];        }         cost = Math.min((sum_weights*l) + (n - 1)*ql, (sum_weights*r) + (n - 1)*qr);        long left_weight = 0;        long right_weight = 0;        for(int i = 0; i < n - 1; i++)        {            left_weight += weights[i];            right_weight = sum_weights - left_weight;             long num_left = i + 1;            long num_right = n - num_left;             long temp_cost = left_weight * l + right_weight * r;            if(Math.abs(num_left - num_right) <= 1)            {                    }            else if(num_right > num_left)            {                temp_cost += (num_right - num_left - 1)*qr;            }            else            {                temp_cost += (num_left - num_right - 1)*ql;            }             if(temp_cost < cost)            {                cost = temp_cost;            }        }        System.out.println(cost);    }       public static long getTwoPower(long power, long P)    {        if(power == 0)            return 1;        if(power == 1)            return 2;         long ans = getTwoPower(power/2, P);        ans = (ans * ans)%P;        if(power % 2 == 1)            ans = (ans * 2)%P;        return ans;    }      public static int getIndex(int[] list, int value, int l, int r)    {        while( l <= r)        {            int middle = (l+r)/2;             if(list[middle]==value)                return middle;            else if(list[middle] < value)                l = middle + 1;            else                r = middle - 1;        }         return -1;    }     public static int getLessThanIndex(ArrayList<Integer> list, int value, int l, int r)    {        while( l <= r)        {            int middle = (l+r)/2;             if(list.get(middle)==value)                return middle;            else if(list.get(middle) < value)                l = middle + 1;            else                r = middle - 1;        }         return r;    }     public static int getMoreThanIndex(ArrayList<Integer> list, int value, int l, int r)    {        while( l <= r)        {            int middle = (l+r)/2;             if(list.get(middle)==value)                return middle;            else if(list.get(middle) < value)                l = middle + 1;            else                r = middle - 1;        }         return l;    }     public static long inverseModulo(long a, long P)    {        return powerModulo(a, P-2, P);    }     public static long powerModulo(long a, long p, long m)    {           if(p==0)            return 1;         long temp = powerModulo(a, p/2, m);        temp = (temp * temp)%m;        if(p%2 == 0)            return temp;        else            return (a * temp)%m;     }} class Pair implements Comparable<Pair>{    int a, b;     public Pair(int a, int b)    {        this.a = a;        this.b = b;    }     public int compareTo(Pair p)    {        return this.b - p.b;    }}  class Node{    int value;    int req_value;    ArrayList<Integer> neighbors;    boolean visited;     public Node()    {        neighbors = new ArrayList<>();    } } class MutableInt{    int count;    ArrayList<Integer> list;    public MutableInt()    {        list = new ArrayList<>();    }}
