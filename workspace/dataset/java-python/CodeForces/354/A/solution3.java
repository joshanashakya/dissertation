import java.util.*;import java.io.*;import java.math.BigInteger; public class b{		public static void main( String [] args) throws IOException{		FastScanner sc=new FastScanner();		int n=sc.nextInt();		long l=sc.nextLong();		long r=sc.nextLong();		long ql=sc.nextLong();		long qr=sc.nextLong();		long [] w=sc.nextLongArray(n); 		long [] lsum=new long[n+1];		long [] rsum=new long[n+1];		lsum[1]=w[0];for(int i=2;i<=n;i++)lsum[i]=lsum[i-1]+w[i-1];		rsum[n-1]=w[n-1];for(int i=n-2;i>=0;i--)rsum[i]=rsum[i+1]+w[i]; 		long min=Integer.MAX_VALUE; 		for(int i=0;i<=n;i++){			int lop=i;			int rop=n-i;			long cost=lsum[lop]*l+rsum[n-rop]*r; 			if(lop>rop){				cost+=(lop-rop-1)*ql;			}			else if(rop>lop){				cost+=(rop-lop-1)*qr;			}			min=Math.min(min,cost);		}		System.out.println(min);    }} // 3// 1 2 3                                                                             class FastScanner{		 private int BUFFER_SIZE = 1 << 16;		private  DataInputStream din;		private  byte[] buffer;		private int bufferPointer, bytesRead;		public FastScanner() {		din = new DataInputStream(System.in);		buffer = new byte[BUFFER_SIZE];		bufferPointer = bytesRead = 0;	} 	public FastScanner( String file_name) throws IOException {		din = new DataInputStream(new FileInputStream(file_name));		buffer = new byte[BUFFER_SIZE];		bufferPointer = bytesRead = 0;    }    	public String readLine() throws IOException {		 byte[] buf = new byte[64];		int cnt = 0, c;		while ((c = read()) != -1) {			if (c == '\n')				break;			buf[cnt++] = (byte) c;		}		return new String(buf, 0, cnt);	}        public String next() throws IOException{ 		byte c = read();		while(Character.isWhitespace(c)){			c = read();		}				 StringBuilder builder = new StringBuilder();		builder.append((char)c);		c = read();		while(!Character.isWhitespace(c)){			builder.append((char)c);			c = read();		}				return builder.toString();	} 	public int nextInt() throws IOException {		int ret = 0;		byte c = read();		while (c <= ' ')			c = read();		 boolean neg = (c == '-');		if (neg)			c = read();		do {			ret = ret * 10 + c - '0';		} while ((c = read()) >= '0' && c <= '9'); 		if (neg)			return -ret;		return ret;	}		public int[] nextIntArray( int n) throws IOException {		 int arr[] = new int[n];		for(int i = 0; i < n; i++){			arr[i] = nextInt();		}		return arr;	} 	public long nextLong() throws IOException {		long ret = 0;		byte c = read();		while (c <= ' ')			c = read();		 boolean neg = (c == '-');		if (neg)			c = read();		do {			ret = ret * 10 + c - '0';		} while ((c = read()) >= '0' && c <= '9');		if (neg)			return -ret;		return ret;	}		public long[] nextLongArray( int n) throws IOException {		 long arr[] = new long[n];		for(int i = 0; i < n; i++){			arr[i] = nextLong();		}		return arr;	} 	public char nextChar() throws IOException{		byte c = read();		while(Character.isWhitespace(c)){			c = read();		}		return (char) c;		}		public double nextDouble() throws IOException {		double ret = 0, div = 1;		byte c = read();		while (c <= ' ')			c = read();		 boolean neg = (c == '-');		if (neg)			c = read(); 		do {			ret = ret * 10 + c - '0';		} while ((c = read()) >= '0' && c <= '9'); 		if (c == '.') {			while ((c = read()) >= '0' && c <= '9') {				ret += (c - '0') / (div *= 10);			}		} 		if (neg)			return -ret;		return ret;    }    	public double[] nextDoubleArray( int n) throws IOException {		 double arr[] = new double[n];		for(int i = 0; i < n; i++){			arr[i] = nextDouble();		}		return arr;	} 	private void fillBuffer() throws IOException {		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);		if (bytesRead == -1)			buffer[0] = -1;	} 	private byte read() throws IOException {		if (bufferPointer == bytesRead)			fillBuffer();		return buffer[bufferPointer++];	} 	public void close() throws IOException {		if (din == null)			return;		din.close();	} }  
