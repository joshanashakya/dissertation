from __future__ import division, print_function import osimport sysfrom io import BytesIO, IOBasefrom math import inf def main():    n, l, r, ql, qr = [ int(x) for x in input().split() ]    weight = [ int(x) for x in input().split() ]     preffix = [0] * n    preffix[0] = weight[0]    for i in range(1, n):        preffix[i] = preffix[i-1] + weight[i]     suffix = [0] * n    suffix[n-1] = weight[n-1]    for i in range(n - 2, -1, -1):        suffix[i] = weight[i] + suffix[i+1]     bestAnswer = inf     for i in range(-1, n):        leftToRemove = i + 1        rightToRemove = n - leftToRemove         if leftToRemove > rightToRemove:            numOfNotCanceled = max(leftToRemove - rightToRemove - 1, 0)            total = (                (preffix[i] if i >= 0 else 0) * l                + (suffix[i+1] if i < n - 1 else 0) * r                + numOfNotCanceled * ql            )        else:            numOfNotCanceled = max(rightToRemove - leftToRemove - 1, 0)            total = (                (preffix[i] if i >= 0 else 0) * l                + (suffix[i+1] if i < n - 1 else 0) * r                + numOfNotCanceled * qr            )         bestAnswer = min(bestAnswer, total)     print(bestAnswer) BUFFSIZE = 8192 class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0) class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii") input = lambda: sys.stdin.readline().rstrip("\r\n") def print(*args, **kwargs):    sep = kwargs.pop("sep", " ")    file = kwargs.pop("file", sys.stdout)     atStart = True    for x in args:        if not atStart:            file.write(sep)        file.write(str(x))        atStart = False    file.write(kwargs.pop("end", "\n"))     if kwargs.pop("flush", False):        file.flush() sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout) main() 		 	 		 				   	 	   	 		   	
