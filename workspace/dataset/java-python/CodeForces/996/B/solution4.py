####### Q1 ####### # x = input().split(' ')# x1, x2 = int(x[0]), int(x[1])## if x1 == x2:#     print('Saal Noo Mobarak!')# elif x1 - x2 < 0:#     print('R' * (x2-x1))# else:#     print('L' * (x1 - x2)) ####### Q2 ####### # n = int(input())# Xs = []# for j in range(n):#     Xs.append(input())### def check(num):#     c, f = False, False##     for i in num:#         if num.count(i) >= 4:#             f = True#             break##     for i in range(6):#         if int(num[i]) == int(num[i + 1]) and int(num[i + 1]) == int(num[i + 2]):#             c = True#             break##     if num == num[::-1] or f or c:#         return "Ronde!"#     else:#         return 'Rond Nist'### for i in Xs:#     print(check(i))  ######## Q3 ######### import math## n, x, y = input().split(' ')# n, x, y = int(n), int(x), int(y)## charges = input().split(' ')# hundreds = [100 for i in range(n-1)]## for i in range(len(charges)):#     charges[i] = int(charges[i])## charges = sorted(charges)## steps = [math.ceil((hundreds[i-1] - charges[i])/y) for i in range(1, n)]## Min = min(charges)### if Min//x < sum(steps):#     print('NO')# else:#     print('YES')  # def minimumCoinsNeeded(coins, cash):##     dp = [0] * (cash + 1)##     for i in range(1, cash + 1):#         for coin in coins:#             if i - coin >= 0:#                 if dp[i] == 0:#                     dp[i] = dp[i - coin] + 1#                 else:#                     dp[i] = min(dp[i], dp[i - coin] + 1)##     return dp[cash]### coins = [1, 5, 10, 20, 100]# print(minimumCoinsNeeded(coins, 1000000000)) ############################################################################### World Cup ###### A problem from CodeForces ###### Wordl Cup ######def func(As, n, entranceNum=0):     Min = min(As)    p = entranceNum     while True:        if As[p] == 0:            return p+1         if p != n-1:            for i in range(p + 1, n):  # checking the right side of position p in As for possible answer after 'Min'                # steps                d = i - p   # distance between position i in As and position p in As  (Right side)                if As[i] <= d:                    return i + 1         for i in range(p):  # checking the left side of position p in As for possible answer after 'Min' steps            d = n - p + i   # distance between position i in As and position p in As  (Left side)            if As[i] <= d:                return i + 1         As = [As[i] - Min for i in range(n)]        p = (Min % n + p) % n        Min = min(As)  num = int(input())A = list(map(int, input().split(" "))) print(func(A, num))##########################################################################################
