import java.util.*;import java.io.*;import java.math.*;public class Main{    static class Reader     {         private InputStream mIs;private byte[] buf = new byte[1024];private int curChar,numChars;public Reader() { this(System.in); }public Reader(InputStream is) { mIs = is;}         public int read() {if (numChars == -1) throw new InputMismatchException();if (curChar >= numChars) {curChar = 0;try { numChars = mIs.read(buf);} catch (IOException e) { throw new InputMismatchException();}if (numChars <= 0) return -1; }return buf[curChar++];}         public String nextLine(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isEndOfLine(c));return res.toString() ;}         public String s(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isSpaceChar(c));return res.toString();}         public long l(){int c = read();while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }long res = 0; do{ if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read();}while(!isSpaceChar(c));return res * sgn;}         public int i(){int c = read() ;while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }int res = 0;do{if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read() ;}while(!isSpaceChar(c));return res * sgn;}         public double d() throws IOException {return Double.parseDouble(s()) ;}        public boolean isSpaceChar(int c) { return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1; }         public boolean isEndOfLine(int c) { return c == '\n' || c == '\r' || c == -1; }     }         ///////////////////////////////////////////////////////////////////////////////////////////    //    RRRRRRRRR            AAA             HHH     HHH     IIIIIIIIIIIII   LLL           //    //    RR    RRR           AAAAA            HHH     HHH      IIIIIIIIIII    LLL           //    //    RR   RRR           AAAAAAA           HHH     HHH          III        LLL           //    //    RR  RRR           AAA   AAA          HHHHHHHHHHH          III        LLL           //    //    RRRRRR           AAA     AAA         HHHHHHHHHHH          III        LLL           //    //    RR  RRR         AAAAAAAAAAAAA        HHH     HHH          III        LLL           //    //    RR    RRR      AAA         AAA       HHH     HHH      IIIIIIIIIII    LLLLLLLLLLLL  //    //    RR     RRR    AAA           AAA      HHH     HHH     IIIIIIIIIIIII   LLLLLLLLLLLL  //    ///////////////////////////////////////////////////////////////////////////////////////////    static long w;static long m;static long k;    public static boolean check(long length)    {        BigInteger sum=new BigInteger("0");        long start=m;        long end=length+m-1;        long beg=1;        while(Long.toString(start).length()!=Long.toString(beg).length())        beg*=(long)10;        long digit[]=new long[20];        while(Long.toString(beg).length()<=Long.toString(end).length())        {            digit[Long.toString(beg).length()]=Math.min(beg*10-1,end)-start+1;            beg*=(long)10;            start=beg;        }        for(int i=0;i<18;i++)        {            BigInteger temp=new BigInteger("1");            temp=temp.multiply(BigInteger.valueOf(i));            temp=temp.multiply(BigInteger.valueOf(k));            temp=temp.multiply(BigInteger.valueOf(digit[i]));            sum=sum.add(temp);            if(sum.compareTo(BigInteger.valueOf(w))>0)            return false;        }        return true;    }    public static void main(String[] args)throws IOException    {        PrintWriter out= new PrintWriter(System.out);        Reader sc=new Reader();        w=sc.l();        m=sc.l();        k=sc.i();        long low=0;        long high=(long)Math.pow(10,18);        while(low<high)        {            long mid=(low+high+1)/2;            if(check(mid))            low=mid;            else            high=mid-1;        }        out.println(low);        out.flush();    } }
