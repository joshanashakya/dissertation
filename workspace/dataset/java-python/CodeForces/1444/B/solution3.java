import java.io.*; import java.util.*;public class CF1444B{  static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }               }         static int MOD=998244353;    static int[] rk, p,siz;    public static void main(String[] args){        FastReader br=new FastReader();        int N=br.nextInt();         long[] fac=new long[2*N+1]; fac[0]=1;        for (int i = 1; i <= 2*N; i++) {            fac[i]=(fac[i-1]*i)%MOD;        }        int[] a=new int[2*N];        for (int i = 0; i < 2*N; i++) {            a[i]=br.nextInt();        }        Arrays.sort(a);        long sum=0;        for (int i = N; i < 2*N; i++) {            sum+=a[i];        }        for (int i = 0; i < N; i++) {            sum-=a[i];        }        sum%=MOD;        sum*=fac[2*N]; sum%=MOD;        sum*=inv(fac[N],MOD); sum%=MOD;        sum*=inv(fac[N],MOD); sum%=MOD;        System.out.println(sum);    }    public static long inv(long a, long b){//Computes modular inverse of a mod b        //Assume b>a and gcd(a,b)=1,         if(a==1)return 1;        long q=b/a;        long r=b-q*a;        long y=-inv(r,a);        return ((b*y+1)/a)+b;            }        }//Debugging://Are you sure your algorithm is correct?//Bounds: long//Special cases: n=0,1?//Make sure you remove your debugging code before you submit!
