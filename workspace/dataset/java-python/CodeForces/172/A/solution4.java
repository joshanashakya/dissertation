import java.util.*;import java.io.*;import java.lang.*; public class MainClass {	    private static BufferedReader br = null;	private static StringTokenizer st = null;		static {			br = new BufferedReader(new InputStreamReader(System.in));	}		private static String str() throws IOException {		return br.readLine();	}		private static int ints() throws IOException {		return Integer.parseInt(br.readLine());	}		private static int[] ints(int N) throws IOException {		st = new StringTokenizer(br.readLine());		int[] nums = new int[N];		for(int i = 0; i < N; i += 1) {			nums[i] = Integer.parseInt(st.nextToken());		}		return nums;	}		public static void main(String[] args) throws IOException {		int N = ints();		String[] nums = new String[N];		for(int i = 0; i < N; i += 1) {			nums[i] = str();		}		Solution obj = new Solution();		System.out.println(obj.longestcommonPrefix(nums, N));    }} class Solution {	public int longestcommonPrefix(String[] nums, int N) {		String first = nums[0];		int length = first.length();		String prefix = "";		for(int i = 0; i < length; i += 1) {			boolean isFound = true;			String curr_pre = first.substring(0, i + 1);			for(int j = 1; j < N && isFound; j += 1) {				if(!nums[j].startsWith(curr_pre)) isFound = false;			}			if(isFound) prefix = curr_pre;			if(!isFound) return prefix.length();		}				return prefix.length();	}} 
