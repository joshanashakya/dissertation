import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*;  public class Main {    static int i, j, k, n, m, t, y, x, sum=0;    static long mod = 998244353;    static FastScanner fs = new FastScanner();    static PrintWriter out = new PrintWriter(System.out);    static String str;    static long ans;     static List<Integer>[] graph = new ArrayList[101];    static int[] vis = new int[101];     public static void dfs(int in){        vis[in]=1;         for(int i = 0; i<graph[in].size(); i++){            if(vis[graph[in].get(i)]==0){                dfs(graph[in].get(i));            }        }    }     public static void main(String[] args) {        t = 1;         while (t-- >0){             n = fs.nextInt();            m = fs.nextInt();               for(i=0;i<n+1;i++){                graph[i] = new ArrayList<>();            }             for(i=0;i<m;i++){                x = fs.nextInt();                y = fs.nextInt();                 graph[x].add(y);                graph[y].add(x);            }             dfs(1);             int f = 0;             for(i=1;i<=n;i++) {                if (vis[i] == 0)                    f = 1;            }             if(m!=n || f==1)                out.print("NO");            else                out.print("FHTAGN!");           }        out.close();    }      static class FastScanner {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer("");         String next() {            while (!st.hasMoreTokens())                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }     static class Pair  {        int first, second;         public Pair(int first, int second) {            this.first = first;            this.second = second;         }     }     static void ruffleSort(int[] a) {        //ruffle        int n=a.length;        Random r=new Random();        for (int i=0; i<a.length; i++) {            int oi=r.nextInt(n), temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }         //then sort        Arrays.sort(a);    }     static void ruffleSort(long[] a) {        //ruffle        int n=a.length;        Random r=new Random();        for (int i=0; i<a.length; i++) {            int oi=r.nextInt(n); long temp=a[i];            a[i]=a[oi];            a[oi]=temp;        }         //then sort        Arrays.sort(a);    }  }
