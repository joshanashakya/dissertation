def dfsxx(visited,adj,ind, parent):    if(visited[ind]==1): return    visited[ind]=1    for i in adj[ind]:        if(visited[i]==0):            dfsxx(visited,adj,i,parent)        def dfs(visited,adj,ind,parent):    if(visited[ind]==1): return [-1,-1]    visited[ind]=1    for i in adj[ind]:        if(visited[i]==0):            parent[i]=ind            x=dfs(visited,adj,i,parent)            if(x[0]!=-1): return x        elif(visited[i]==1 and i!=parent[ind]):            return [i,ind]    return [-1,-1] def dfsx(visited,adj,ind,parent,part,ext):    if(visited[ind]==1): return 0    visited[ind]=1    for i in adj[ind]:        if(part[i]==1 and ind==ext): continue        elif(part[i]==1 and ind!=ext and i!=ext): return 1        if(visited[i]==0):            parent[i]=ind            x=dfsx(visited,adj,i,parent,part,ext)            if(x!=0): return 1        elif(visited[i]==1 and i!=parent[ind]):            return 1    return 0 n,m=[int(i) for i in input().split()]l=[]adj=[[] for i in range(n)]part_cycle=[0 for i in range(n)]for i in range(m):    a,b=[int(x) for x in input().split()]    adj[a-1].append(b-1)    adj[b-1].append(a-1)parent=[-1 for i in range(n)]visited=[0 for i in range(n)]dfsxx(visited,adj,0,parent)if(sum(visited)!=n):    print("NO")else:    parent=[-1 for i in range(n)]    visited=[0 for i in range(n)]    x=dfs(visited,adj,0,parent)    if(x[0]==-1):        print("NO")    else:        part_cycle[x[0]]=1; part_cycle[x[1]]= 1;         cycle=[]        ind=x[1]        cycle.append(x[0])        while(ind!=x[0]):            cycle.append(ind)            part_cycle[ind]=1; part_cycle[parent[ind]]=1;             ind=parent[ind]        flag=0        parent=[-1 for i in range(n)]        visited=[0 for i in range(n)]        for i in cycle:            if(i==0): continue            x=dfsx(visited, adj, i, parent,part_cycle,i)            if(x==1):                print("NO")                flag=1                break        if(flag==0):            print("FHTAGN!")
