import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.StringTokenizer; public class CF103B {    static class UndirectedGraph {        ArrayList<Integer>[] adjList;        int n;         UndirectedGraph(int n) {            this.n = n;            adjList = new ArrayList[n];            Arrays.setAll(adjList, i -> new ArrayList<Integer>());        }         void addEdge(int v, int u) {            adjList[v].add(u);            adjList[u].add(v);        }         int cyclesCnt() {            int[] visited = new int[n];            int cnt = dfs(0, -1, visited);            for (int i = 0; i < n; i++)                if (visited[i] == 0) // disconnected graph                    return -1;            return cnt;        }         int dfs(int v, int parent, int[] visited) {            int cnt = 0;            visited[v] = 1;            for (int u : adjList[v])                if (visited[u] == 0)                    cnt += dfs(u, v, visited);                else if (visited[u] == 1 && u != parent)                    cnt++;            visited[v] = 2;            return cnt;        }     }     public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt(), m = sc.nextInt();        UndirectedGraph g = new UndirectedGraph(n);        while (m-- > 0) {            g.addEdge(sc.nextInt() - 1, sc.nextInt() - 1);        }        if (g.cyclesCnt() != 1)            pw.println("NO");        else            pw.println("FHTAGN!");         sc.close();        pw.close();    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
