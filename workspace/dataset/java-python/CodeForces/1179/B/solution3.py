import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Comparator; public class d {    static BufferedReader s = new BufferedReader(new InputStreamReader(System.in));    public static void main(String[] args) throws IOException {       String[] s1=s();       int n=i(s1[0]);int m=i(s1[1]);       int x1=1;int y1=1;       int x2=n;int y2=m;       int count=0;StringBuilder sb=new StringBuilder();int flag=0;       while(count<n*m){           count++;           if(flag==0){               sb.append(x1+" "+y1+"\n");               y1++;               if(y1==m+1){                   x1++;y1=1;               }           }       else{               sb.append(x2+" "+y2+"\n");                 y2--;                 if(y2==0){                     y2=m;x2--;                 }           }flag^=1;       }        System.out.println(sb.toString());     }static long val=0;    static long dfs(ArrayList<Integer>[] adj,int[] vis,int first,int second,int i,StringBuilder sb,long[][] colors,long x){        vis[i]=1;int color=0;       // System.out.println(i);        if(adj[i].size()==3) return -1;        if(first+second==1){            val+=colors[2][i-1];color=2;vis[i]=color+1;         }else if(first+second==2){            val+=colors[1][i-1];color=1;vis[i]=color+1;         }else        { val+=colors[0][i-1];sb.append(1+" ");color=0;vis[i]=color+1;}        //System.out.println(color+" "+i);        for(Integer J:adj[i]){            if(vis[J]==0){                dfs(adj,vis,second,color,J,sb,colors,val);            }        }return 0;    }    static String[] s() throws IOException {        return s.readLine().trim().split("\\s+");    }    static int i(String ss) {        return Integer.parseInt(ss);    }    static long l(String ss) {        return Long.parseLong(ss);    }    static int MAXN;    static int[] spf;    static void sieve() {        spf[1] = 1;        for (int i=2; i<MAXN; i++)            spf[i] = i;        for (int i=4; i<MAXN; i+=2)            spf[i] = 2;        for (int i=3; i*i<MAXN; i++)        {            if (spf[i] == i)            {                for (int j=i*i; j<MAXN; j+=i)                     if (spf[j]==j)                        spf[j] = i;            }        }    }    static long powerwithmod(long  x, long y, long p) {        long  res = 1;        x = x % p;        while (y > 0) {            if ((y & 1) == 1)                res = (res * x) % p;            y = y >> 1;            x = (x * x) % p;        }        return res;    }static long[] fac ;    static void calculatefac(long mod){        fac[0]=1;        for (int i = 1 ;i <= MAXN; i++)            fac[i] = fac[i-1] * i % mod;    }    static long nCrModPFermat(int n, int r, long mod) {        if (r == 0)            return 1;        fac[0] = 1;        return (fac[n]*                modInverse(fac[r], mod)                % mod * modInverse(fac[n-r], mod)                % mod) % mod;    }static long modInverse(long a, long m)    {        return (powerwithmod(a, m - 2, m));    }     } class Student12 {    int  l;long r;int ind;    public Student12(int l, long r,int ind) {        this.l = l;this.ind=ind;        this.r = r;    }     public String toString()    {        return this.l+" ";    }}class Sortbyroll12 implements Comparator<Student12> {     public int compare(Student12 a, Student12 b){        if(a.l<=b.l) return -1;     /*   else if(a.r==b.r){            if(a.r==b.r){                return 0;            }            if(a.r<b.r) return -1;            return 1;}*/        return 1;  }}
