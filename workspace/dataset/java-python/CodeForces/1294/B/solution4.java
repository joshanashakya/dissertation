import java.awt.Desktop; import java.io.BufferedReader;  import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;import java.sql.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeSet;import java.util.Vector;   public  class codechef3 {static class comp implements Comparator<Integer>{ 	@Override	public int compare(Integer o1, Integer o2) {		if(Math.abs(o1)>Math.abs(o2))			return -1;		else return 1;		} 		}	    		 static class FastReader		    {BufferedReader br; 		        StringTokenizer st; 		 public FastReader() 		        {  br = new BufferedReader(new		                     InputStreamReader(System.in)); 		        } 		  		       String next() 		        { 		            while (st == null || !st.hasMoreElements()) 		            { 		                try		                { 		                    st = new StringTokenizer(br.readLine()); 		                } 		                catch (IOException  e) 		                { 		                    e.printStackTrace(); 		                } 		            } 		            return st.nextToken(); 		        } 		  		        int nextInt() 		        { 		            return Integer.parseInt(next()); 		        } 		  		        long nextLong() 		        { 		            return Long.parseLong(next()); 		        } 		  		        double nextDouble() 		        { 		            return Double.parseDouble(next()); 		        } 		  		        String nextLine() 		        { 		            String str = ""; 		            try		            { 		                str = br.readLine(); 		            } 		            catch (IOException e) 		            { 		                e.printStackTrace(); 		            } 		            return str; 		        } 		    } 		 		 public static String reverse(String s1)		 {			String s2="";			int n=s1.length();			for(int i=n-1;i>=0;i--)			{				s2+=s1.charAt(i);			}			return s2;			 			 		 }	   			 		    		    public static void main(String[] args) 		    {		    	FastReader s=new FastReader();		    	int t=s.nextInt();		    	while(t-->0)		    	{		    		int n=s.nextInt();		    				    		int[][] a=new int[n+1][2];		    		for(int i=0;i<n;i++)		    		{		    			for(int j=0;j<2;j++)		    			{		    				a[i][j]=s.nextInt();		    						    						    			}		    		}		    		int flag=0;		    				    		a[n][0]=0;		    		a[n][1]=0;		    		Arrays.sort(a,(int[] i,int[] j)->i[0]==j[0]?i[1]-j[1]:i[0]-j[0]);		    				    				    		//		    		for(int i=0;i<n;i++)//		    		{//		    			for(int j=0;j<2;j++)//		    			{//		    				System.out.print(a[i][j]+" ");//		    			}//		    			System.out.println();//		    		}		    				    				    				    		StringBuffer s1=new StringBuffer();		    		for(int i=1;i<=n;i++)		    		{		    			if(a[i][1]<a[i-1][1])		    			{		    				flag=1;		    				break;		    			}		    					    			for(int j=0;j<a[i][0]-a[i-1][0];j++) s1.append("R");		    			for(int j=0;j<a[i][1]-a[i-1][1];j++) s1.append("U");		    					    					    		}		    				    		if(flag==1)		    			System.out.println("NO");		    		else		    		{		    			System.out.println("YES");		    			System.out.println(s1);		    		}		    				    				    				    				    				    				    				    				    				    				    				    				    				    				    		    				    }		    			       		    }}
