import java.io.*;import java.math.*;import java.security.*;import java.text.*;import java.time.LocalTime;import java.util.*;import java.util.concurrent.*;import java.util.regex.*;    public class B {	 	public static void main(String[] args) {    	FastScanner scan = new FastScanner();    	    	int t = scan.nextInt();    		for(int tt=0; tt<t; tt++) {    			int n = scan.nextInt();    			int [][] grid = new int[n][2];    			for(int i=0; i<n; i++) {    				grid[i][0] = scan.nextInt(); grid[i][1] = scan.nextInt();    			}    			Arrays.sort(grid, (a, b) -> Integer.compare(a[0], b[0]));    			Arrays.sort(grid, (a, b) -> Integer.compare(a[1], b[1]));    			    			String ans = "";    			boolean works = true;    			int currX = 0, currY = 0;    			for(int i=0; i<n && works; i++) {    				int x = grid[i][0] - currX;    				int y = grid[i][1] - currY;    				currX = grid[i][0];    				currY = grid[i][1];    				if(x < 0 || y < 0) {    					works = false;    				} else {    					for(int j=0; j<x; j++) ans += "R";    					for(int j=0; j<y; j++) ans += "U";    				}    				    			}    			System.out.println(works ? "YES" : "NO");    			if(works) {    				System.out.println(ans);    			}    		}	}			  public static void sort(int [] a) {	    	ArrayList<Integer> b = new ArrayList<>();	    	for(int i: a) b.add(i);	    	Collections.sort(b);	    	for(int i=0; i<a.length; i++) a[i]= b.get(i);	    } 				    static class FastScanner{    	    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");    	String next() {    		while(!st.hasMoreTokens())    			try {    				st = new StringTokenizer(br.readLine());    			} catch (IOException e){    				e.printStackTrace();    			}    		return st.nextToken();    	}    	    	int nextInt() {    		return Integer.parseInt(next());    	}    	    	int [] readArray(int n) {    		int [] a = new int[n];    		for(int i=0; i<n ; i++) a[i] = nextInt();    		return a;    	}    	    	long nextLong() {    		return Long.parseLong(next());    	}    	    	    }       } 
