import java.util.*; public class ICPC {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        String s = sc.next();        int counta=0;        int countB=0;        int countb=0;        int countu=0;        int counts=0;        int countl=0;        int countr=0;        for(int i=0;i<s.length();i++){            char ch=s.charAt(i);            if (ch == 'a') {                counta++;            }else if(ch=='B'){                countB++;            }else if(ch=='b'){                countb++;            }else if(ch=='u'){                countu++;             }else if(ch=='s'){                counts++;            }else if(ch=='l'){                countl++;            }else if(ch=='r'){                countr++;            }         }        if(counta>=2&&countB>0&&countb>0&&countl>0&&countr>0&&counts>0&&countu>=2){            int[] ar={countB,countb,countl,counts,countr,counta/2,countu/2};            Arrays.sort(ar);            System.out.println(ar[0]);        }else {            System.out.println(0);        }         /*String ar[]={"Danil","Olya","Slava","Ann","Nikita"};        int c=0;        for(String st:ar){            if(s.contains(st)){                c++;            }            if(c>1){                System.out.println("NO");                return;            }        }        if(c==1)        System.out.println("YES");        else            System.out.println("NO");*/      }        static int countSetBits(int n) {        int count = 0;        while (n > 0) {            count += n & 1;            n >>= 1;        }        return count;    }     public List<Integer> getDivisors(int n) {        List<Integer> list = new ArrayList<>();        for (int d = 2; d * d <= n; d++) {            while (n % d == 0) {                list.add(d);                n /= d;            }        }        if (n > 1) {            list.add(n);        }        return list;    }     public int lcm(int n1, int n2) {        int gcd = 1;        for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0)                gcd = i;        }         int lcm = (n1 * n2) / gcd;        return lcm;    }     public boolean[] primes(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            for (int j = i * i; j <= n; j += i) {                p[j] = false;            }        }        return p;    }      public int primeFactor(int n) {        int c = 0;         while (n % 2 == 0) {            n /= 2;            c++;        }        //  System.out.println(n);        return c;     }}       	 	 	 					 		 		 	 	 	
