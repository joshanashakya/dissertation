import java.util.*;import java.io.*;import static java.lang.Math.*; public class PracticeProblem{    /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }     public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);    public static final int MOD = (int)1e9 + 7;     public static void main(String[] args)    {        solve();        out.close();    }    private static void solve()    {        int n = in.nextInt();         int[] arr = new int[n];        for (int i = 0; i < n; i++)            arr[i] = in.nextInt();         Set<Integer> answer = new HashSet<>();        Set<Integer> cur = new HashSet<>();        cur.add(arr[0]);        answer.add(arr[0]);         for (int i = 1; i < n; i++)        {            Set<Integer> temp = new HashSet<>();             temp.add(arr[i]);            answer.add(arr[i]);             for (int item : cur)            {                temp.add(item | arr[i]);                answer.add(item | arr[i]);            }             cur = temp;        }         out.println(answer.size());     } }
