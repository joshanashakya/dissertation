import java.io.*;import java.util.*;import java.math.*; public class Main {     FastScanner in;    PrintWriter out;     static class FastScanner {         BufferedReader br;        StringTokenizer st;         FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         String nextLine() throws IOException {            if (st == null || !st.hasMoreTokens())                return br.readLine();            StringBuilder result = new StringBuilder(st.nextToken());            while (st.hasMoreTokens()) {                result.append(" ");                result.append(st.nextToken());            }            return result.toString();        }         int nextInt() throws IOException {            return Integer.parseInt(next());        }         long nextLong() throws IOException {            return Long.parseLong(next());        }         double nextDouble() throws IOException {            return Double.parseDouble(next());        }     }     void run() throws IOException {        in = new FastScanner(System.in);        out = new PrintWriter(System.out, false);        solve();        out.close();    }     public static void main(String[] args) throws IOException{        new Main().run();    }     public void printArr(int[] arr){        for(int i = 0; i < arr.length; i++){            out.print(arr[i] + " ");        }        out.println();    }     public long gcd(long a, long b){        if(a == 0) return b;        return gcd(b % a, a);    }     public boolean isPrime(long num){         if(num == 0 || num == 1){            return false;        }         for(int i = 2; i * i <= num; i++){            if(num % i == 0){                return false;            }        }         return true;    }      public void solve() throws IOException{         int x1 = in.nextInt(), y1 = in.nextInt(), r1 = in.nextInt(),            x2 = in.nextInt(), y2 = in.nextInt(), r2 = in.nextInt();         int distx = (x1 - x2) * (x1 - x2);        int disty = (y1 - y2) * (y1 - y2);        double dist = Math.sqrt(distx + disty);         if(dist >= r1 + r2){            out.println((dist - r1 - r2) / 2);        }else if(dist + Math.min(r1, r2) >= Math.max(r1, r2)){            out.println(0);        }else{            out.println((Math.max(r1, r2) - dist - Math.min(r1, r2)) / 2);        }         return;     }    }
