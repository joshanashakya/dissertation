import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BPaintingEggs solver = new BPaintingEggs();        solver.solve(1, in, out);        out.close();    }     static class BPaintingEggs {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int n = in.nextInt();            long s1 = 0, s2 = 0;            for (int i = 0; i < n; i++) {                s2 += in.nextInt();                s1 += in.nextInt();            }            int x1 = (int) ((s1 + 500) / 1000);            int x2 = (int) ((s2 + 500) / 1000);            if ((x1 == 0 && x2 == 0) || (x1 > n && x2 > n)) {                out.println(-1);                return;            }            if (x1 > 0) {                for (int i = 0; i < x1; i++) {                    out.print("A");                }                for (int i = x1; i < n; i++) {                    out.print("G");                }            } else {                for (int i = 0; i < x2; i++) {                    out.print("G");                }                for (int i = x2; i < n; i++) {                    out.print("A");                }            }        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void close() {            writer.close();        }         public void println(int i) {            writer.println(i);        }     }} 
