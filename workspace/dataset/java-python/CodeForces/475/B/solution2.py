import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictI = lambda : int(sys.stdin.buffer.readline())Neo = lambda : list(map(int, sys.stdin.buffer.readline().split()))n,m = Neo()S1 = input()S2 = input() V = n*mINF = float('inf') v = 0Id = [[-1 for i in range(m)] for j in range(n)]for i in range(n):    for j in range(m):        Id[i][j] = v        v+=1graph = [[INF]*(n*m) for i in range(n*m)] def addEdge(a,b):    i,j =a    ii,jj =b    id1 = Id[i][j]    id2 = Id[ii][jj]    graph[id1][id2] = 1     for i in range(n):    for j in range(m):        if i==0:            if S1[i] == ">":                if j!=m-1:                    addEdge((i,j),(i,j+1))            else:                if j!=0:                    addEdge((i,j),(i,j-1))            if S2[j] == "v":                if i!=n-1:                    addEdge((i,j),(i+1,j))        elif i == n-1:            if S1[i] == ">":                if j!=m-1:                    addEdge((i,j),(i,j+1))            else:                if j!=0:                    addEdge((i,j),(i,j-1))            if S2[j] == "^":                if i!=0:                    addEdge((i,j),(i-1,j))        else:            if S1[i] == ">":                if j!=m-1:                    addEdge((i,j),(i,j+1))            else:                if j!=0:                    addEdge((i,j),(i,j-1))            if S2[j] == "^":                if i!=0:                    addEdge((i,j),(i-1,j))            else:                if i!= n-1:                    addEdge((i,j),(i+1,j)) def floydWarshall(graph):    dist = graph.copy()    for k in range(V):        for i in range(V):            for j in range(V):                dist[i][j] = min(dist[i][j],dist[i][k]+ dist[k][j])    return dist Ans = floydWarshall(graph)for i in Ans:    if INF in i:        print('NO')        exit()print('YES')        
