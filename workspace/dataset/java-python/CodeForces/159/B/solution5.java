import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.util.Scanner; public class B159 {     public static void main(String[] args) {        Scanner in = new Scanner(System.in);        int N = in.nextInt();        int M = in.nextInt();        Map<Integer, Map<Integer,Integer>> map = new HashMap<>();        Map<Integer, Integer> countMap = new HashMap<>();        for (int n=0; n<N; n++) {            int c = in.nextInt();            int d = in.nextInt();            Map<Integer, Integer> im = map.get(d);            if (im == null) {                im = new HashMap<>();                map.put(d, im);            }            int count = im.getOrDefault(c, 0);            im.put(c, count+1);            count = countMap.getOrDefault(d, 0);            countMap.put(d, count+1);        }        int[] C = new int[M];        int[] D = new int[M];        for (int m=0; m<M; m++) {            C[m] = in.nextInt();            D[m] = in.nextInt();        }        int beautiful = 0;        for (int m=0; m<M; m++) {            Map<Integer,Integer> im = map.getOrDefault(D[m], Collections.emptyMap());            int count = im.getOrDefault(C[m], 0);            if (count != 0) {                beautiful++;                im.put(C[m], count-1);                countMap.put(D[m], countMap.get(D[m])-1);                D[m] = 0; // mark as used            }        }        int other = 0;        for (int m=0; m<M; m++) {            if (D[m] != 0) {                int count = countMap.getOrDefault(D[m], 0);                if (count != 0) {                    other++;                    countMap.put(D[m], countMap.get(D[m])-1);                }            }        }        System.out.println((other+beautiful) + " " + beautiful);    } }
