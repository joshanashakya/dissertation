import java.awt.Point;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.StringTokenizer; public class D {   	public static void main(String[] args) throws NumberFormatException, IOException {		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out); 		int n = sc.nextInt();		int k = sc.nextInt();		HashMap<String, Integer> map = new HashMap<>();		HashMap<Integer, String> map3 = new HashMap<>();		int c = 0;		HashMap<Point, Integer> map2 = new HashMap<>();		HashSet<Point> ans = new HashSet<>(); 		int lll = -1;		ArrayList<Point> toAdd = new ArrayList<>();		for (int i = 0; i < n; i++) {			String s1 = sc.next();			String s2 = sc.next();			int t = sc.nextInt(); 			if(lll != t) {				for(Point p : toAdd)					map2.put(p, lll);				lll = t;				toAdd = new ArrayList<>();			} 			Integer idx1 = map.get(s1);			if(idx1 == null)				idx1 = c++; 			map.put(s1, idx1);			map3.put(idx1, s1);			Integer idx2 = map.get(s2);			if(idx2 == null)				idx2 = c++; 			map.put(s2, idx2);			map3.put(idx2, s2); 			Integer lT = map2.get(new Point(idx2, idx1)); 			if(lT != null && t - lT <= k && lT != t) {				if(!ans.contains(new Point(idx2, idx1)))					ans.add(new Point(idx1, idx2));			} 			toAdd.add(new Point(idx1, idx2));		}		out.println(ans.size());		for(Point p : ans) {			out.println(map3.get(p.x) + " " + map3.get(p.y));		} 		out.flush();		out.close();	}     	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		}		public Scanner(String file) throws FileNotFoundException{	br = new BufferedReader(new FileReader(file));}  		public String next() throws IOException {			while(st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws NumberFormatException, IOException {			return Integer.parseInt(next());		}		public long nextLong() throws NumberFormatException, IOException {			return Long.parseLong(next());		} 		public boolean ready() throws IOException {			return br.ready();		} 		public double nextDouble() throws IOException		{			String x = next();			StringBuilder sb = new StringBuilder("0");			double res = 0, f = 1;			boolean dec = false, neg = false;			int start = 0;			if(x.charAt(0) == '-')			{				neg = true;				start++;			}			for(int i = start; i < x.length(); i++)				if(x.charAt(i) == '.')				{					res = Long.parseLong(sb.toString());					sb = new StringBuilder("0");					dec = true;				}				else				{					sb.append(x.charAt(i));					if(dec)						f *= 10;				}			res += Long.parseLong(sb.toString()) / f;			return res * (neg?-1:1);		} 	} }
