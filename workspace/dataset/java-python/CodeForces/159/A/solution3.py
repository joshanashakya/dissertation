# n=int(input())#q.sort(key=lambda x:((x[1]-x[0]),-x[0]))# n,k=map(int,input().split())# arr=list(map(int,input().split()))#ls=list(map(int,input().split()))#for i in range(m):#from sys import stdin#n=int(stdin.readline())#for _ in range(int(input())):import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")##########################################################import sysfrom collections import Countern,k=map(int,input().split())l=[]for i in range(n) :    p,q,t=map(str,sys.stdin.readline().split())    t=int(t)    l.append([[p,q],t])#print(l)p=[]for i in range(n) :    for j in range(i+1,n) :        if l[j][1]-l[i][1] >k :            break        if Counter(l[i][0]) == Counter(l[j][0]) and l[j][1]-l[i][1]<=k and l[j][1]-l[i][1] >0 and l[i][0]!=l[j][0]:            #print(l[i][0])            if l[i][0] not in p and l[i][0][::-1] not in p :                 p.append(l[i][0])print(len(p))if len(p)==0 :    exit(0)for i in p:    print(i[0],i[1])
