import java.util.*;import java.io.*;public class Message { 	public static void main(String[] args) throws Exception{ 		// TODO Auto-generated method stub 		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in)); 		PrintWriter out = new PrintWriter(System.out); 		int max = Integer.MIN_VALUE; 		String input = bf.readLine().trim(); 		String input2 = bf.readLine().trim(); 		int asdf = input2.length(); 		if (input2.length() > input.length()){ 			String input3 = input + ""; 			input = input2 + ""; 			input2 = input3 + ""; 		} 			 		for(int i = 0;i<=input.length()-input2.length();i++){ 			int count = 0; 			for(int j = i;j<i+input2.length();j++){ 				if (input.charAt(j) == input2.charAt(j-i)) 					count++; 			} 			if (count > max) 				max = count; 		} 		 		for(int i = 0;i<Math.min(input2.length(), input.length());i++){ 			int count = 0; 			for(int j = 0;j<=i;j++){ 				if (input2.charAt(input2.length()-1-i+j) == input.charAt(j)) 					count++; 			} 			if (count > max) 				max = count; 		} 		for(int i = 0;i<Math.min(input2.length(), input.length());i++){ 			int count = 0; 			for(int j = 0;j<=i;j++){ 				if (input2.charAt(j) == input.charAt(input.length()-1-i+j)) 					count++; 			} 			if (count > max) 				max = count; 		} 		 		out.println(asdf-max); 		 		 		out.close(); 		 		 		 			}  }	 	// ////StringJoiner sj = new StringJoiner(" "); ////sj.add(strings)////sj.toString() gives string of those stuff w spaces or whatever that sequence is//class BinaryIndexedTree //{  //    // Max tree size //    final static int MAX = 1000005;      //  //    static int BITree[] = new int[MAX];     //    /* n --> No. of elements present in input array.  //    BITree[0..n] --> Array that represents Binary  //                    Indexed Tree. //    arr[0..n-1] --> Input array for which prefix sum  //                    is evaluated. *///  //    // Returns sum of arr[0..index]. This function  //    // assumes that the array is preprocessed and  //    // partial sums of array elements are stored  //    // in BITree[]. //    int getSum(int index){ //        int sum = 0;//        index = index + 1; //        while(index>0){ //            sum += BITree[index]; //            index -= index & (-index); //        } //        return sum; //    } //    public static void updateBIT(int n, int index, int val){ //        index = index + 1; //        while(index <= n){ //	        BITree[index] += val; //	        index += index & (-index); //        } //    } //    void constructBITree(int arr[], int n){ //        for(int i=1; i<=n; i++) //            BITree[i] = 0; //        for(int i = 0; i < n; i++) //            updateBIT(n, i, arr[i]); //    } //} 	
