import java.io.*;import java.math.*;import java.util.*;import java.util.stream.*; @SuppressWarnings("unchecked")public class P753B {   void genVars(List<int []> vars) {    for (int i = 0; i <= 9; i++) {      for (int j = 0; j <= 9; j++) {        if (j != i) {          for (int k = 0; k <= 9; k++) {            if ((k != i) && (k != j)) {              for (int l = 0; l <= 9; l++) {                if ((l != i) && (l != j) && (l != k)) {                  vars.add(new int [] { i, j, k, l });                }              }            }          }        }      }    }  }   int [] calcBK(int [] var, int [] cv) {    int [] bk = new int [2];     for (int i = 0; i < 4; i++) {      if (var[i] == cv[i]) {        bk[0]++;      } else {        for (int j = 0; j < 4; j++) {          if (var[i] == cv[j]) {            bk[1]++;            break;          }        }      }     }     return bk;  }    public void run() throws Exception {    List<int []> vars = new ArrayList(5040);    genVars(vars);     while (true) {      int [] cv = vars.get(0);      println(cv[0] + "" + cv[1] + "" + cv[2] + "" + cv[3]); pw.flush();      int [] bk = readInt(2);      if (bk[0] == 4) { return; }       List<int []> nvars = new ArrayList();      for (int [] var : vars) {        int [] cbk = calcBK(var, cv);        if ((bk[0] == cbk[0]) && (bk[1] == cbk[1])) {          nvars.add(var);        }      }       vars = nvars;    }  }   public static void main(String... args) throws Exception {    br = new BufferedReader(new InputStreamReader(System.in));    pw = new PrintWriter(new BufferedOutputStream(System.out));    new P753B().run();    br.close();    pw.close();    System.err.println("\n[Time : " + (System.currentTimeMillis() - startTime) + " ms]");  }   static long startTime = System.currentTimeMillis();  static BufferedReader br;  static PrintWriter pw;  StringTokenizer stok;   String nextToken() throws IOException {    while (stok == null || !stok.hasMoreTokens()) {      String s = br.readLine();      if (s == null) { return null; }      stok = new StringTokenizer(s);    }    return stok.nextToken();  }   void print(byte b) { print("" + b); }  void print(int i) { print("" + i); }  void print(long l) { print("" + l); }  void print(double d) { print("" + d); }  void print(char c) { print("" + c); }  void print(Object o) {    if (o instanceof int[]) { print(Arrays.toString((int [])o));    } else if (o instanceof long[]) { print(Arrays.toString((long [])o));    } else if (o instanceof char[]) { print(Arrays.toString((char [])o));    } else if (o instanceof byte[]) { print(Arrays.toString((byte [])o));    } else if (o instanceof short[]) { print(Arrays.toString((short [])o));    } else if (o instanceof boolean[]) { print(Arrays.toString((boolean [])o));    } else if (o instanceof float[]) { print(Arrays.toString((float [])o));    } else if (o instanceof double[]) { print(Arrays.toString((double [])o));    } else if (o instanceof Object[]) { print(Arrays.toString((Object [])o));    } else { print("" + o); }  }  void print(String s) { pw.print(s); }  void println() { println(""); }  void println(byte b) { println("" + b); }  void println(int i) { println("" + i); }  void println(long l) { println("" + l); }  void println(double d) { println("" + d); }  void println(char c) { println("" + c); }  void println(Object o) { print(o); println(); }  void println(String s) { pw.println(s); }  int nextInt() throws IOException { return Integer.parseInt(nextToken()); }  long nextLong() throws IOException { return Long.parseLong(nextToken()); }  double nextDouble() throws IOException { return Double.parseDouble(nextToken()); }  char nextChar() throws IOException { return (char) (br.read()); }  String next() throws IOException { return nextToken(); }  String nextLine() throws IOException { return br.readLine(); }  int [] readInt(int size) throws IOException {    int [] array = new int [size];    for (int i = 0; i < size; i++) { array[i] = nextInt(); }    return array;  }  long [] readLong(int size) throws IOException {    long [] array = new long [size];    for (int i = 0; i < size; i++) { array[i] = nextLong(); }    return array;  }  double [] readDouble(int size) throws IOException {    double [] array = new double [size];    for (int i = 0; i < size; i++) { array[i] = nextDouble(); }    return array;  }  String [] readLines(int size) throws IOException {    String [] array = new String [size];    for (int i = 0; i < size; i++) { array[i] = nextLine(); }    return array;  }   int gcd(int a, int b) {    return ((b > 0) ? gcd(b, a % b) : a);  }}
