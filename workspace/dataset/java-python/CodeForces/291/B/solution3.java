import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author gaidash */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, OutputWriter out) {            String s = in.readLine();             ArrayList<String> lexemes = new ArrayList<>();            int b = 0;            StringBuilder sb = new StringBuilder();            for (int i = 0; i < s.length(); i++) {                char c = s.charAt(i);                if (c == '"') {                    b ^= 1;                    if (b == 0) {                        lexemes.add(sb.toString());                        sb = new StringBuilder();                    }                } else if (c == ' ') {                    if (b == 1) {                        sb.append(c);                    } else {                        if (sb.length() > 0) {                            lexemes.add(sb.toString());                            sb = new StringBuilder();                        }                    }                } else {                    sb.append(c);                }                if (i == s.length() - 1 && sb.length() > 0) lexemes.add(sb.toString());            }             for (String l : lexemes) out.println('<' + l + '>');        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void println(Object... objects) {            print(objects);            writer.println();        }         public void close() {            writer.close();        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         private String readLine0() {            StringBuilder buf = new StringBuilder();            int c = read();            while (c != '\n' && c != -1) {                if (c != '\r') {                    buf.appendCodePoint(c);                }                c = read();            }            return buf.toString();        }         public String readLine() {            String s = readLine0();            while (s.trim().length() == 0) {                s = readLine0();            }            return s;        }     }} 
