import java.io.*;import java.util.*; public class A639 {    public static void main(String[] args) {        PrintWriter w = new PrintWriter(System.out);        InputReader in = new InputReader(System.in);        int n = in.nextInt();        int k = in.nextInt();        int q = in.nextInt();        int[] arr = new int[n];        for (int i=0; i<n; i++) {            arr[i] = in.nextInt();        }        PriorityQueue<MyObj> pq = new PriorityQueue<>(new MyComparator());        while (q-- > 0) {            int type = in.nextInt();            int idx = in.nextInt();            if (type == 1) {                add(pq, arr[idx-1], idx, k);            } else {                if (isPresent(pq, idx)) {                    w.println("YES");                } else {                    w.println("NO");                }            }        }        w.close();    }    static boolean isPresent(PriorityQueue<MyObj> pq, int idx) {        List<MyObj> list = new ArrayList<>();        while (!pq.isEmpty()) {            list.add(pq.poll());        }        boolean found = false;        for (MyObj o : list) {            pq.add(o);            if (o.idx == idx) found = true;        }        return found;    }    static void add(PriorityQueue<MyObj> pq, int val, int idx, int k) {        if (pq.size() < k) {            pq.add(new MyObj(val, idx));        } else {            if (val > pq.peek().val) {                pq.poll();                pq.add(new MyObj(val, idx));            }        }    }    static class MyObj {        int val, idx;        MyObj(int val, int idx) {            this.val = val;            this.idx = idx;        }    }    static class MyComparator implements Comparator<MyObj> {        @Override        public int compare(MyObj o1, MyObj o2) {            return o1.val - o2.val;        }    }    static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }	        public String nextString() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                if (Character.isValidCodePoint(c)) {                    res.appendCodePoint(c);                }                c = read();            } while (!isSpaceChar(c));            return res.toString();        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     } }
