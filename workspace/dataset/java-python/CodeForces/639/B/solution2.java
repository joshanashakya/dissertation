import java.io.*;import java.util.*;import java.math.*; public class B639 {    public static void main(String[] args) throws IOException {        FastScanner fs=new FastScanner();        PrintWriter out = new PrintWriter(System.out);        // int T = 1;         // int T=fs.nextInt();        // for (int tt=0; tt<T; tt++) {        // }        int n = fs.nextInt();        int d = fs.nextInt();        int h = fs.nextInt();        if (h<(int)Math.ceil(d/2.0)) {            out.println(-1);        }        else {            if (h==d) {                if (h==1 && n>2) {                    out.println(-1);                }                else {                    int lh=h;                    int cur = 1;                    while (lh--!=0) {                        out.println(cur+" "+(++cur));                    }                    int k=2;                    while(cur!=n){                        out.println(k+" "+(++cur));                    }                }                            }            else {                int lh=h,rh=d-h;                int cur = 1;                while (lh--!=0) {                    out.println(cur+" "+(++cur));                }                while (rh--!=0) {                    if (rh==d-h-1) {                        out.println(1+" "+(++cur));                    }                    else                        out.println(cur+" "+(++cur));                }                while(cur!=n){                    out.println(1+" "+(++cur));                }            }                    }         out.close();    }          static final Random random=new Random();        static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    } }
