import java.util.*;import java.io.*;  public class Forces{ 	public static PrintWriter cout;	public static void main(String ...arg)	{		//Read cin = new Read();		InputReader cin = new InputReader(System.in);		cout = new PrintWriter(new BufferedOutputStream(System.out));		int n = cin.nextInt();		int d = cin.nextInt();		int h = cin.nextInt();		if(d>2*h || d<h || n<=d || (d==1 && h==1 && n>2))		{			cout.print(-1);		}		else		{			int node = 1;			int prev = 1;			for(int i=0;i<h;i++)			{				cout.print(node + " " + (node+1) +"\n");				prev = node;				node++;			}			int temp = node;			if(node != d+1)			{				cout.print("1 "+ ++node + "\n");				prev = 1;				temp = node;			}			for(int i=0;i<d+1-temp;i++)			{				cout.print(node + " " + (node+1) +"\n");				prev = node;				node++;			}			for(int i=node+1;i<=n;i++)				cout.print(prev+ " " + i +"\n");		} 		cout.close(); 	}   	static class InputReader {        final InputStream is;        final byte[] buf = new byte[1024];        int pos;        int size;         public InputReader(InputStream is) {            this.is = is;        }         public int nextInt() {            int c = read();            while (isWhitespace(c))                c = read();            int sign = 1;            if (c == '-') {                sign = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res = res * 10 + c - '0';                c = read();            } while (!isWhitespace(c));            return res * sign;        }         int read() {            if (size == -1)                throw new InputMismatchException();            if (pos >= size) {                pos = 0;                try {                    size = is.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (size <= 0)                    return -1;            }            return buf[pos++] & 255;        }         static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }} class Read{    private BufferedReader br;    private StringTokenizer st;     public Read()    { br = new BufferedReader(new InputStreamReader(System.in)); }     String next()    {        while (st == null || !st.hasMoreElements())        {            try {st = new StringTokenizer(br.readLine());}            catch(IOException e)                {e.printStackTrace();}        }        return st.nextToken();    }     int nextInt()    { return Integer.parseInt(next()); }     long nextLong()    { return Long.parseLong(next()); }     double nextDouble()    { return Double.parseDouble(next()); }     String nextLine()    {        String str = "";        try {str = br.readLine();}        catch(IOException e)            {e.printStackTrace();}        return str;    }}      
