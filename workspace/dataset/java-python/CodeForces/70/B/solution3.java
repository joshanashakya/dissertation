import java.io.*;import java.util.StringTokenizer; public class B50 {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader inp = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Solver solver = new Solver();        solver.solve(inp, out);        out.close();    }    static class InputReader {        StringTokenizer tokenizer;        InputStreamReader sReader;        BufferedReader reader;        InputReader(InputStream stream) {            sReader = new InputStreamReader(stream);            reader = new BufferedReader(sReader, 32768);            tokenizer = null;        }        int nextC(){            try {                return reader.read();            } catch(IOException e){                return -1;            }        }        String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }     }     static class Solver {        int maxL;        int mCount = 0;        int intermC = -1;        PrintWriter out;         private void solve(InputReader inp, PrintWriter out){            this.out = out;            maxL = inp.nextInt();            int nchar = inp.nextC();            int sLength = 0;            while (nchar > 13){                if (sLength != 0 || nchar != 32) {                    sLength++;                }                if (33 <= nchar && nchar <=63){ //sentence ender                    sendMessage(sLength);                    sLength = 0;                }                nchar = inp.nextC();            }            if (intermC > 0){                mCount++;            }            out.println(mCount);            out.flush();        }        private void sendMessage(int l){            if (l > maxL){ //message too long                out.println("Impossible");                out.close();                System.exit(0);            }            if (intermC + l+1 > maxL){                mCount++;                intermC = l;            } else {                intermC += l+1;            }         }     }  }
