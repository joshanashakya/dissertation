import java.io.*;import java.lang.reflect.Array;import java.util.*;import java.math.*;import java.lang.*;import static java.lang.Math.*; public class TaskB implements Runnable {    ArrayList<Integer> prime;    boolean is_prime[];    InputReader c;    PrintWriter w;     long m = (int)1e9+7;    long MAXN =  4294967295L;     public void run() {        c = new InputReader(System.in);        w = new PrintWriter(System.out);         HashSet<Character> hs = new HashSet<>();        hs.add('!');        hs.add('.');        hs.add('?');        int k = Integer.parseInt(c.nextLine());        String s = c.nextLine();        int prev = 0;        ArrayList<String> str = new ArrayList<>();        for (int i = 0; i < s.length(); i++) {            if (hs.contains(s.charAt(i))) {                str.add(s.substring(prev, i + 1));                prev = i + 2;            }        }        //w.println(str);        boolean impossible = false;        int res = 0, cur = 0;        for (int i = 0; i < str.size(); i++) {            int t = str.get(i).length();            if (t > k) {                impossible = true;                break;            }            //w.println(t);            if (i == str.size()-1) {                if(cur == 0) res++;                else if (cur + t + 1 > k) {                    res += 2;                } else {                    res++;                }            } else {                if(cur == 0){                    cur += t;                }                else  if (cur + t + 1 > k) {                    res++;                    cur = t;                } else {                    cur += t + 1;                }            }        }        if (impossible) {            w.println("Impossible");        } else {            w.println(res);        }        w.close();    }     class pair implements Comparable<pair>{        int x;        int y;        char dir;        boolean skip;         public pair(int x, int y, char dir) {            this.x = x;            this.y = y;            this.dir = dir;            skip = false;        }         @Override        public int compareTo(pair o) {            return o.y - this.y;        }    }    long powmod(long x, long n, long m) {        if (n == 0) return 1;        long p = powmod(x, n / 2, m) % m;        p = (p * p) % m;        return (n % 2 == 0) ? p : (x * p) % m;    }    void sieve(int n) {        is_prime = new boolean[n+10];        prime = new ArrayList<>();        for(int i=2;i<=n;i++)            is_prime[i] = true;         for (int i = 2; i <= n; ++i) {            if (is_prime[i]) prime.add(i);            for (int j = 0; j < prime.size () && i * prime.get(j) < n; ++j) {                is_prime[i * prime.get(j)] = false;                if (i % prime.get(j) == 0) break;            }        }    }    public static void sortbyColumn(int arr[][], int col){        Arrays.sort(arr, new Comparator<int[]>()        {            public int compare(int[] o1, int[] o2){                return(Integer.valueOf(o1[col]).compareTo(o2[col]));            }        });     }    static long gcd(long a, long b){        if (b == 0)            return a;        return gcd(b, a % b);    }    public static class DJSet {        public int[] upper;        public DJSet(int n) {            upper = new int[n];            Arrays.fill(upper, -1);        }         public int root(int x) {            return upper[x] < 0 ? x : (upper[x] = root(upper[x]));        }         public boolean equiv(int x, int y) {            return root(x) == root(y);        }         public boolean union(int x, int y) {            x = root(x);            y = root(y);            if (x != y) {                if (upper[y] < upper[x]) {                    int d = x;                    x = y;                    y = d;                }                upper[x] += upper[y];                upper[y] = x;            }            return x == y;        }    }    public static int[] radixSort(int[] f) {        int[] to = new int[f.length];        {            int[] b = new int[65537];            for(int i = 0;i < f.length;i++)b[1+(f[i]&0xffff)]++;            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];            for(int i = 0;i < f.length;i++)to[b[f[i]&0xffff]++] = f[i];            int[] d = f; f = to;to = d;        }        {            int[] b = new int[65537];            for(int i = 0;i < f.length;i++)b[1+(f[i]>>>16)]++;            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];            for(int i = 0;i < f.length;i++)to[b[f[i]>>>16]++] = f[i];            int[] d = f; f = to;to = d;        }        return f;    }    public void printArray(int[] a){        for(int i=0;i<a.length;i++)            w.print(a[i]+1+" ");        w.println();    }    public int[] scanArrayI(int n){        int a[] = new int[n];        for(int i=0;i<n;i++)            a[i] = c.nextInt();        return a;    }    public long[] scanArrayL(int n){        long a[] = new long[n];        for(int i=0;i<n;i++)            a[i] = c.nextLong();        return a;    }    public void printArray(long[] a){        for(int i=0;i<a.length;i++)            w.print(a[i]+" ");        w.println();    }    static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private SpaceCharFilter filter;        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars==-1)                throw new InputMismatchException();             if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                }                catch (IOException e) {                    throw new InputMismatchException();                }                 if(numChars <= 0)                    return -1;            }            return buf[curChar++];        }         public String nextLine() {            String str = "";            try {                str = br.readLine();            }            catch (IOException e) {                e.printStackTrace();            }            return str;        }        public int nextInt() {            int c = read();             while(isSpaceChar(c))                c = read();             int sgn = 1;             if (c == '-') {                sgn = -1;                c = read();            }             int res = 0;            do {                if(c<'0'||c>'9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));             return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;             do {                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));            return res * sgn;        }         public double nextDouble() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            double res = 0;            while (!isSpaceChar(c) && c != '.') {                if (c == 'e' || c == 'E')                    return res * Math.pow(10, nextInt());                if (c < '0' || c > '9')                    throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            if (c == '.') {                c = read();                double m = 1;                while (!isSpaceChar(c)) {                    if (c == 'e' || c == 'E')                        return res * Math.pow(10, nextInt());                    if (c < '0' || c > '9')                        throw new InputMismatchException();                    m /= 10;                    res += (c - '0') * m;                    c = read();                }            }            return res * sgn;        }         public String readString() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            }            while (!isSpaceChar(c));             return res.toString();        }         public boolean isSpaceChar(int c) {            if (filter != null)                return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public String next() {            return readString();        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);        }    }    public static void main(String args[]) throws Exception {        new Thread(null, new TaskB(),"TaskB",1<<26).start();    }}
