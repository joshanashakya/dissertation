import java.io.*; public class Main {	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));	public static void main(String[] args) throws IOException {		int n = input.nextInt();		int m = input.nextInt();		int [][]a = new int[505][505];		String s0 = input.nextLine();		for (int i=1;i<=n;i++){			String s = input.nextLine();			for (int j=1;j<=m;j++){				if (s.charAt(j-1) == '.'){					a[i][j] = 0;				}else{					a[i][j] = 1;				}			}		}		int flag = 0;		for (int i=2;i<=n-1;i++){			for (int j=2;j<=m-1;j++){				if (a[i][j] == 1)					if (a[i+1][j] == 1)						if (a[i-1][j] == 1)							if (a[i][j-1] == 1)								if (a[i][j+1] == 1){									flag = 1;									int cnt = 0;									while (true){										if ((i+cnt)<=n && a[i+cnt][j] == 1){											a[i+cnt][j] = 0;											cnt++;										}else{											break;										}									}									a[i][j] = 1;									cnt = 0;									while (true){										if ((i-cnt)>=1 && a[i-cnt][j] == 1){											a[i-cnt][j] = 0;											cnt++;										}else{											break;										}									}									a[i][j] = 1;									cnt = 0;									while (true){										if ((j+cnt)<=m && a[i][j+cnt] == 1){											a[i][j+cnt] = 0;											cnt++;										}else{											break;										}									}									a[i][j] = 1;									cnt = 0;									while (true){										if ((j-cnt)>=1 && a[i][j-cnt] == 1){											a[i][j-cnt] = 0;											cnt++;										}else{											break;										}									}								}				if (flag == 1)					break;			}			if (flag == 1)				break;		}		if (flag == 1){			for (int i=1;i<=n;i++){				for (int j=1;j<=m;j++){					if (a[i][j] == 1){						pr.println("NO");						pr.flush();						return;					}				}			}			pr.println("YES");		}else{			pr.println("NO");		}		pr.flush();	}		static class input{		static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		static StreamTokenizer in = new StreamTokenizer(br);		static String next() throws IOException{			in.nextToken();			return in.sval;		}		static String nextLine() throws IOException{			return br.readLine();		}		static int nextInt() throws IOException{			in.nextToken();			return (int)in.nval;		}		static long nextLong() throws IOException{			in.nextToken();			return (long)in.nval;		}		static double nextDouble() throws IOException{			in.nextToken();			return in.nval;		}	}}    	   		 		 				 	 	      		 	
