/*⠀⠀⠀⠀⣠⣶⡾⠏⠉⠙⠳⢦⡀⠀⠀⠀⢠⠞⠉⠙⠲⡀⠀⠀⠀⠀⣴⠿⠏⠀⠀⠀⠀⠀⠀⢳⡀⠀⡏⠀⠀Y⠀⠀⢷⠀⠀⢠⣟⣋⡀⢀⣀⣀⡀⠀⣀⡀⣧⠀⢸⠀⠀A⠀⠀ ⡇⠀⠀⢸⣯⡭⠁⠸⣛⣟⠆⡴⣻⡲⣿⠀⣸⠀⠀S⠀  ⡇⠀⠀⣟⣿⡭⠀⠀⠀⠀⠀⢱⠀⠀⣿⠀⢹⠀⠀H⠀⠀ ⡇⠀⠀⠙⢿⣯⠄⠀⠀⠀⢀⡀⠀⠀⡿⠀⠀⡇⠀⠀⠀⠀⡼⠀⠀⠀⠀⠹⣶⠆⠀⠀⠀⠀⠀⡴⠃⠀⠀⠘⠤⣄⣠⠞⠀⠀⠀⠀⠀⠀⢸⣷⡦⢤⡤⢤⣞⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣴⣿⣏⠁⠀⠀⠸⣏⢯⣷⣖⣦⡀⠀⠀⠀⠀⠀⠀⢀⣾⣽⣿⣿⣿⣿⠛⢲⣶⣾⢉⡷⣿⣿⠵⣿⠀⠀⠀⠀⠀⠀⣼⣿⠍⠉⣿⡭⠉⠙⢺⣇⣼⡏⠀⠀⠀⣄⢸⠀⠀⠀⠀⠀⠀⣿⣿⣧⣀⣿………⣀⣰⣏⣘⣆⣀⠀⠀ */import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter; // System.out is a PrintStream// import java.util.Arrays;// import java.util.ArrayDeque;// import java.util.ArrayList;// import java.util.Collections;    //  for sorting ArrayList mainly// import java.util.HashMap;// import java.util.HashSet;// import java.util.Random;import java.util.StringTokenizer; public class A18 {    public static void main(String[] args) throws IOException {        FastScanner scn = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        for (int tc = 1; tc > 0; tc--) {            int[] x = new int[3], y = new int[3];            for (int i = 0; i < 3; i++) {                x[i] = scn.nextInt();                y[i] = scn.nextInt();            }            boolean right = rightAngle(x, y);            if (right) {                out.println("RIGHT");            } else {                boolean flag = false;                for (int i = 0; i < 3 && !flag; i++) {                    x[i]++;                    flag = flag || rightAngle(x, y);                    x[i]--;                    x[i]--;                    flag = flag || rightAngle(x, y);                    x[i]++;                    y[i]++;                    flag = flag || rightAngle(x, y);                    y[i]--;                    y[i]--;                    flag = flag || rightAngle(x, y);                    y[i]++;                }                if (flag) {                    out.println("ALMOST");                } else {                    out.println("NEITHER");                }            }        }        out.close();    }     private static boolean rightAngle(int[] x, int[] y) {        long d1 = distance(x[0], y[0], x[1], y[1]);        long d2 = distance(x[2], y[2], x[1], y[1]);        long d3 = distance(x[0], y[0], x[2], y[2]);        if (d1 == 0 || d2 == 0 || d3 == 0) return false;        return (d1 + d2 == d3) || (d3 + d2 == d1) || (d1 + d3 == d2);    }     private static long distance(int x1, int y1, int x2, int y2) {        return (0L + ((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)));    }     private static int gcd(int num1, int num2) {        int temp = 0;        while (num2 != 0) {            temp = num1;            num1 = num2;            num2 = temp % num2;        }        return num1;    }     private static int lcm(int num1, int num2) {        return (int) ((1L * num1 * num2) / gcd(num1, num2));    }     private static void ruffleSort(int[] arr) {        // int N = arr.length;        // Random rand = new Random();        // for (int i = 0; i < N; i++) {        // int oi = rand.nextInt(N), temp = arr[i];        // arr[i] = arr[oi];        // arr[oi] = temp;        // }        // Arrays.sort(arr);    }     private static class FastScanner {        BufferedReader br;        StringTokenizer st;         FastScanner() {            this.br = new BufferedReader(new InputStreamReader(System.in));            this.st = new StringTokenizer("");        }         String next() {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException err) {                    err.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {            if (st.hasMoreTokens()) {                return st.nextToken("").trim();            }            try {                return br.readLine().trim();            } catch (IOException err) {                err.printStackTrace();            }            return "";        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
