import java.util.*;import java.util.Scanner;import java.io.*;import javax.lang.model.util.ElementScanner6; import static java.lang.System.out;import java.util.Stack;import java.util.Queue;import java.util.LinkedList; public class A18{    static int mod=(int)(1e9+7);   static long MOD=(long)(1e9+7);   static FastReader in=new FastReader();   static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));            public static void main(String args[])    {           int tc=1;             //tc=in.nextInt();        tcloop: while(tc-->0)        {                    	        	int x[]=new int[3];        	int y[]=new int[3];        	        	for(int i=0;i<3;i++)        	{				x[i]=in.nextInt();				y[i]=in.nextInt();							}						if(pythagoras(x[0],y[0],x[1],y[1],x[2],y[2]))			{				pr.println("RIGHT");				continue tcloop;			}						for(int i=0;i<6;i++)			{				if(i<3)				x[i]++;				else				x[i%3]--;				if(pythagoras(x[0],y[0],x[1],y[1],x[2],y[2]))				{					pr.println("ALMOST");					continue tcloop;				}				if(i<3)				x[i]--;				else				x[i%3]++;			}						for(int i=0;i<6;i++)			{				if(i<3)				y[i]++;				else				y[i%3]--;								if(pythagoras(x[0],y[0],x[1],y[1],x[2],y[2]))				{					pr.println("ALMOST");					continue tcloop;				}								if(i<3)				y[i]--;				else				y[i%3]++;			}						pr.println("NEITHER");           }        pr.flush();    } 		static boolean pythagoras(int x1,int y1,int x2,int y2,int x3,int y3)	{		int a=(x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);		int b=(x2-x3)*(x2-x3)+(y2-y3)*(y2-y3);		int c=(x3-x1)*(x3-x1)+(y3-y1)*(y3-y1);				//pr.println(a+" "+b+" "+c);				if(a==0||b==0||c==0)return false;				if(a+b==c)		{		//	pr.println(a+" "+b+" "+c);			return true;					}		if(a+c==b){			//pr.println(a+" "+b+" "+c);			return true;					}		if(b+c==a){			//pr.println(a+" "+b+" "+c);			return true;					}				return false;			}         static void sort(long[] a) {		ArrayList<Long> l = new ArrayList<>();		for (long i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);	}        	static void sort(int[] a) {		ArrayList<Integer> l = new ArrayList<>();		for (int i : a)			l.add(i);		Collections.sort(l);		for (int i = 0; i < a.length; i++)			a[i] = l.get(i);    }         static class FastReader    {         BufferedReader br;         StringTokenizer st;          public FastReader()         {             br = new BufferedReader(new InputStreamReader(System.in));         }          String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }          int nextInt()         {             return Integer.parseInt(next());         }          long nextLong()         {             return Long.parseLong(next());         }          double nextDouble()         {             return Double.parseDouble(next());         }                 int[] readIntArray(int n)        {		int a[]=new int[n];		for(int i=0;i<n;i++)a[i]=nextInt();		return a;	}			long[] readLongArray(int n)	{		long a[]=new long[n];		for(int i=0;i<n;i++)a[i]=nextLong();		return a;	}	        String nextLine()         {             String str = "";             try            {                 str = br.readLine();             }             catch (IOException e)             {                 e.printStackTrace();             }             return str;         }     } }  
