import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Pranay2516 */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        AYellowCards solver = new AYellowCards();        solver.solve(1, in, out);        out.close();    }     static class AYellowCards {        public void solve(int testNumber, FastReader in, PrintWriter out) {            int a = in.nextInt(), b = in.nextInt(), k1 = in.nextInt(), k2 = in.nextInt();            int n = in.nextInt();            int min = n - a * (k1 - 1) - b * (k2 - 1);            if (min < 0) min = 0;            int max = 0;            if (k1 < k2) {                max = Math.min(n / k1, a);                if (n - max * k1 > 0) {                    max += Math.min((n - max * k1) / k2, b);                }            } else {                max = Math.min(n / k2, b);                if (n - max * k2 > 0) {                    max += Math.min((n - max * k2) / k1, a);                }            }            out.println(min + " " + max);        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private FastReader.SpaceCharFilter filter;         public FastReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) throw new InputMismatchException();            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) return -1;            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') throw new InputMismatchException();                res *= 10;                res += c - '0';                c = read();            }            while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) return filter.isSpaceChar(c);            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }} 
