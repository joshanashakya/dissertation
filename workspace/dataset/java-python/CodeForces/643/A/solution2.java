//package com.company;//package com.company; import java.io.*;import java.util.*;import java.math.*; public class Main {    public static void main(String[] args) {        Solver solver = new Solver();        solver.run();    }     static class Solver {        static InputReader in = new InputReader(System.in);        static PrintWriter out = new PrintWriter(System.out);        static int arr[], count[], res[];         void run() {            init();            solve();            out.close();        }         void init() {        }         void solve() {            int n = in.nextInt();            arr = new int[n];            count = new int[n];            res = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = in.nextInt() - 1;            }            for (int i = 0; i < n; i++) {                Arrays.fill(count, 0);                int best = 0;                for (int j = i; j < n; j++) {                    count[arr[j]]++;                    if (count[arr[j]] > count[best] || count[arr[j]] == count[best] && arr[j] < best) {                        best = arr[j];                    }                    res[best]++;                }            }            for (int i = 0; i < n; i++) {                out.print(res[i] + " ");            }        }    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;        final int MAX_BUFFER_SIZE = 32768;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), MAX_BUFFER_SIZE);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }    }}
