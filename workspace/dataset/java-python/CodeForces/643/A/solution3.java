import java.io.*;import java.math.BigInteger;import java.math.RoundingMode;import java.text.DecimalFormat;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern; import javax.net.ssl.SSLContext; public class Main{     static long mod=(long)(1e+9) + 7;     static int[] sieve;   static ArrayList<Integer> primes;      public static void main(String[] args) throws java.lang.Exception   {	  		     fast s = new fast();	     PrintWriter out=new PrintWriter(System.out);	     Scanner sc=new Scanner(System.in);	     StringBuilder fans = new StringBuilder();                        int n=s.nextInt();         int a[]=new int[n];                  for(int i=0;i<n;i++) a[i]=s.nextInt();          int count[]=new int[5001];         int answer[]=new int[n+1];                  for(int i=0;i<n;i++)        	 {        		 for(int j=0;j<=5000;j++) count[j]=0;        		 int best=a[i];        		         		 for(int j=i;j<n;j++)        			 {        				 count[a[j]]++;        				         				 if(count[a[j]]==count[best] && a[j]<best)        					 {answer[a[j]]++;best=a[j];}        				 else if(count[best]>=count[a[j]])        					 answer[best]++;        				 else        					 {answer[a[j]]++; best=a[j];}        			 }        	 }                  for(int i=1;i<=n;i++) System.out.print(answer[i]+" ");                      }    static class fast {   		private InputStream i;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars;				public static boolean next_permutation(int a[])		   {			   int i=0,j=0;int index=-1;	   			   int n=a.length;			   			   for(i=0;i<n-1;i++)				   if(a[i]<a[i+1]) index=i;			   			   if(index==-1) return false;			   i=index; 			  			   for(j=i+1;j<n && a[i]<a[j];j++); 			   int temp=a[i];			   a[i]=a[j-1];			   a[j-1]=temp;			   	   			   for(int p=i+1,q=n-1;p<q;p++,q--)			   {				   temp=a[p];				   a[p]=a[q];				   a[q]=temp;			   }			   			   return true;		   }		   		   		public static void division(char ch[],int divisor)		   {			   int div=Character.getNumericValue(ch[0]); int mul=10;int remainder=0;			   StringBuilder quotient=new StringBuilder("");			   for(int i=1;i<ch.length;i++)			   {				   div=div*mul+Character.getNumericValue(ch[i]);					   if(div<divisor) {quotient.append("0");continue;}				   quotient.append(div/divisor);				   div=div%divisor;mul=10;				   			   } 			   remainder=div;			   while(quotient.charAt(0)=='0')quotient.deleteCharAt(0);	   			   System.out.println(quotient+" "+remainder);	  		   }				public static void sieve(int size)		{			sieve=new int[size+1];			primes=new ArrayList<Integer>();			sieve[1]=1;			for(int i=2;i<=Math.sqrt(size);i++)			{				if(sieve[i]==0)				 {					for(int j=i*i;j<size;j+=i) sieve[j]=1;				 }			}						for(int i=2;i<=size;i++)			{				if(sieve[i]==0) primes.add(i);			}		}		public static long pow(long n, long b, long MOD)		   {		       long x=1;long y=n; 		       while(b > 0)		       {		           if(b%2 == 1)		           {		               x=x*y;		               if(x>MOD) x=x%(MOD);		           }		           y = y*y;		           if(y>MOD) y=y%(MOD); 		           b >>= 1;		       }		       return x;		   } 				 public static int upper(Integer[] a,int start,int end,int key)		 {			   int mid=(start+end)>>1;			   if(start==end && a[mid]<key) {return -1;}			   if(start>end) return -1; 			   if(a[mid]>=key && (((mid-1)>=0 && a[mid-1]<key) || (mid-1)==0)) return mid;			   else if(a[mid]== key && (mid-1)>=0 && a[mid-1]==key) return lower(a,start,mid-1,key);   			   else if(key>a[mid]) return lower(a,mid+1,end,key);			   else return lower(a,start,mid-1,key);		}		 		 public static int lower(Integer a[],int start,int end,int key)		 {			   int mid=(start+end)>>1;			   if(start==end && a[mid]>key) {return -1;}			   if(start>end) return -1; 			   if(a[mid]<=key && (((mid+1)<a.length && a[mid+1]>key) || (mid+1)==a.length)) return mid;			   else if(a[mid]== key && (mid+1)<a.length && a[mid+1]==key) return upper(a,mid+1,end,key);   			   else if(key>=a[mid]) return upper(a,mid+1,end,key);			   else return upper(a,start,mid-1,key);		} 		   		public int gcd(int a,int b)		{			if(a==0) return b;			return gcd(b%a,a);		}		public fast() {			this(System.in);		}		public fast(InputStream is) {			i = is;		}		public int read() {			if (numChars == -1)				throw new InputMismatchException();			if (curChar >= numChars) {				curChar = 0;				try {					numChars = i.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (numChars <= 0)					return -1;			}			return buf[curChar++];		}		public String nextLine() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndOfLine(c));			return res.toString();		}		public String nextString() {     		int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		}		public long nextLong() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			long res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		}		public int nextInt() {			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') {				sgn = -1;				c = read();			}			int res = 0;			do {				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			return res * sgn;		}		public boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}		public boolean isEndOfLine(int c) {			return c == '\n' || c == '\r' || c == -1;		} 	}	}
