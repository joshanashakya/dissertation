import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.InputStreamReader;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.StringTokenizer; public class B208{	static final boolean FILE_IO = false;	static final String output_file = "output.txt";	static final String input_file = "input.txt"; 	public static void main(String[] args){		InputReader in = new InputReader();		PrintWriter out;		if(FILE_IO){			try{				out = new PrintWriter(output_file);			} catch(FileNotFoundException e){				throw new RuntimeException(e);			}		} else {			out = new PrintWriter(System.out);		}		final long start = System.currentTimeMillis();		new Task1().solve(in, out);		final long duration = System.currentTimeMillis()-start;		out.close();	} 	static class Task1{		static boolean answer=false;		HashMap<Marker, Boolean> visited; 		static class Marker{			String last, preLast, prepreLast, preprepreLast;			Integer size, hash;						public Marker(int size, String last, String preLast, String prepreLast, String preprepreLast){				this.size=size;				this.last=last;				this.preLast=preLast;				this.prepreLast=prepreLast;				this.preprepreLast=preprepreLast;			} 			public int hashCode(){				if(hash!=null) return hash;				hash = size;				hash = hash*31 + last.hashCode();				hash = hash*31 + preLast.hashCode();				hash = hash*31 + prepreLast.hashCode();				hash = hash*31 + preprepreLast.hashCode();				return hash;			} 			public boolean equals(Object temp){				Marker o = (Marker)temp;				return(						size.equals(o.size) &&						last.equals(o.last) &&						preLast.equals(o.preLast) &&						prepreLast.equals(o.prepreLast)					);			}		} 		public void solve(InputReader in, PrintWriter out){			int n=in.nextInt();			ArrayList<String> deck = new ArrayList<String>(); 			for(int i=0; i<n; i++){				deck.add(in.next());			} 			visited = new HashMap<Marker, Boolean>();			solve(deck);			if(answer){				out.println("YES");			} else {				out.println("NO");			}		} 		boolean match(String a, String b){			return (a.charAt(0)==b.charAt(0) || a.charAt(1)==b.charAt(1));		}  		void solve(ArrayList<String> deck){			int n=deck.size();			if(n==1 || answer){				answer=true;				return;			} 			if(n>3){				String last = deck.get(n-1);				String _preLast = deck.get(n-2);				String _prepreLast = deck.get(n-3);				String _preprepreLast = deck.get(n-4);				Marker mm = new Marker(n, last, _preLast, _prepreLast, _preprepreLast); 				if(visited.containsKey(mm)){					//System.out.println(n+" "+_preprepreLast+" "+_prepreLast+" "+_preLast+" "+last);					return;				}				visited.put(mm, true);			} 			if(n>1 && match(deck.get(n-2), deck.get(n-1))){				ArrayList<String> copy1 = new ArrayList<String>(deck);				copy1.set(n-2, deck.get(n-1));				copy1.remove(n-1);				solve(copy1);			}						if(n>3 && match(deck.get(n-4),deck.get(n-1)) ){				ArrayList<String> copy3 = new ArrayList<String>(deck);				copy3.set(n-4, deck.get(n-1));				copy3.remove(n-1);				solve(copy3);			}		}	} 	static class InputReader{		private BufferedReader reader;		private StringTokenizer tokenizer;				public InputReader(){			if(FILE_IO){				try{					reader = new BufferedReader(new FileReader(input_file));				} catch(FileNotFoundException e){					throw new RuntimeException(e);				}			} else {				reader = new BufferedReader(new InputStreamReader(System.in));			}			tokenizer = null;		} 		public String next(){			while(tokenizer==null || !tokenizer.hasMoreTokens()){				try{					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e){					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		} 		public int nextInt(){			return (int)Integer.parseInt(next());		} 		public long nextLong(){			return (long)Long.parseLong(next());		} 		public double nextDouble(){			return (double)Double.parseDouble(next());		} 		public String nextLine(){			String s = null;			try{				s = reader.readLine();			} catch(Exception e){				throw new RuntimeException(e);			}			return s;		}	}}
