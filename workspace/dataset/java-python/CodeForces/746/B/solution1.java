import java.io.*;import java.math.*;import java.util.*;  public class Main {    static final int MAX_N = 100100;    static final int mod = 1000000007;    static final int INF = 0x3f3f3f3f;      public static void main(String[] args) throws Exception {        initReader(System.in);         solve();         printWriter.flush();    }     /***********************************************************************************************************************/      public static void solve() throws IOException {        int n = nextInt();        String s = next();         Deque<Character> dq = new LinkedList<>();         if ((s.length() & 1) == 1) {            dq.addFirst(s.charAt(0));            for (int i = 1; i < s.length(); i++) {                if ((i & 1) == 1) dq.addFirst(s.charAt(i));                else dq.addLast(s.charAt(i));            }        } else {            for (int i = 0; i < s.length(); i++) {                if ((i & 1) != 1) dq.addFirst(s.charAt(i));                else dq.addLast(s.charAt(i));            }        }         while (!dq.isEmpty()) {            printWriter.print(dq.poll());        }         printWriter.println();    }          /***********************************************************************************************************************/    static BufferedReader reader;    static StringTokenizer tokenizer;    static PrintWriter printWriter;      static void initReader(InputStream input) {        reader = new BufferedReader(new InputStreamReader(input));        tokenizer = new StringTokenizer("");        printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    }     static boolean hasNext() {        try {            while (!tokenizer.hasMoreTokens()) {                tokenizer = new StringTokenizer(reader.readLine());            }        } catch (Exception e) {            return false;        }        return true;    }     static String next() throws IOException {        while (!tokenizer.hasMoreTokens()) {            tokenizer = new StringTokenizer(reader.readLine());        }        return tokenizer.nextToken();    }     static String nextLine() {        try {            return reader.readLine();        } catch (Exception e) {            return null;        }    }     static int nextInt() throws IOException {        return Integer.parseInt(next());    }     static long nextLong() throws IOException {        return Long.parseLong(next());    }     static double nextDouble() throws IOException {        return Double.parseDouble(next());    }     static char nextChar() throws IOException {        return next().charAt(0);    }}           	 				 			     	 			   		  	 	
