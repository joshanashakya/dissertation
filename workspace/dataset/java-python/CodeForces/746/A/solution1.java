import java.io.*;import java.math.*;import java.util.*;  public class Main {    static final int MAX_N = 100100;    static final int mod = 1000000007;    static final int INF = 0x3f3f3f3f;      public static void main(String[] args) throws Exception {        initReader(System.in);         solve();         printWriter.flush();    }     /***********************************************************************************************************************/      public static void solve() throws IOException {        int a = nextInt();        int b = nextInt();        int c = nextInt();         a /= 1;        b /= 2;        c /= 4;         printWriter.println(Math.min(a, Math.min(b, c)) * 7);     }          /***********************************************************************************************************************/    static BufferedReader reader;    static StringTokenizer tokenizer;    static PrintWriter printWriter;      static void initReader(InputStream input) {        reader = new BufferedReader(new InputStreamReader(input));        tokenizer = new StringTokenizer("");        printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));    }     static boolean hasNext() {        try {            while (!tokenizer.hasMoreTokens()) {                tokenizer = new StringTokenizer(reader.readLine());            }        } catch (Exception e) {            return false;        }        return true;    }     static String next() throws IOException {        while (!tokenizer.hasMoreTokens()) {            tokenizer = new StringTokenizer(reader.readLine());        }        return tokenizer.nextToken();    }     static String nextLine() {        try {            return reader.readLine();        } catch (Exception e) {            return null;        }    }     static int nextInt() throws IOException {        return Integer.parseInt(next());    }     static long nextLong() throws IOException {        return Long.parseLong(next());    }     static double nextDouble() throws IOException {        return Double.parseDouble(next());    }     static char nextChar() throws IOException {        return next().charAt(0);    }}            			 		   						  							  	
