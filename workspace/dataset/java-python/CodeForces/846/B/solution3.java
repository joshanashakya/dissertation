import java.util.*; import javax.lang.model.util.ElementScanner6; import java.io.*;public class Main implements Runnable{    FastScanner sc;    PrintWriter pw;    final class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            try {                br = new BufferedReader(new InputStreamReader(System.in));                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }        }         public long nlo() {            return Long.parseLong(next());        }         public String next() {            if (st.hasMoreTokens()) return st.nextToken();            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                e.printStackTrace();            }            return st.nextToken();        }         public int ni() {            return Integer.parseInt(next());        }         public String nli() {            String line = "";            if (st.hasMoreTokens()) line = st.nextToken();            else try {                return br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            while (st.hasMoreTokens()) line += " " + st.nextToken();            return line;        }         public double nd() {            return Double.parseDouble(next());        }    }    public static void main(String[] args) throws Exception    {        new Thread(null,new Main(),"codeforces",1<<28).start();    }    public void run()    {        sc=new FastScanner();        pw=new PrintWriter(System.out);        solve();        pw.flush();        pw.close();    }    public long gcd(long a,long b)    {        return b==0L?a:gcd(b,a%b);    }    public long ppow(long a,long b,long mod)    {        if(b==0L)        return 1L;        long tmp=1;        while(b>1L)        {            if((b&1L)==1)            tmp*=a;            a*=a;            a%=mod;            tmp%=mod;            b>>=1;        }        return (tmp*a)%mod;    }    public  int gcd(int x,int y)    {        return y==0?x:gcd(y,x%y);    }       //////////////////////////////////    /////////////  LOGIC  ///////////    ////////////////////////////////    StringBuilder str=new StringBuilder();    int total=0;    public void solve(){        int t=1;        while(t-->0)        {            int n=sc.ni();            int k=sc.ni();            long m=sc.ni();            ArrayList<Long> list=new ArrayList();            long sum=0;            for(int i=0;i<k;i++)            {                list.add(sc.nlo());                sum+=list.get(i);            }            Collections.sort(list);            long ans=0;            for(long i=0;i<=n;i++)            {                long score=0;                if(i*sum<=m)                {                    score=i*(k);                    score+=i;                    score+=give(n-i,m-i*sum,list);                }               // pw.println(score);                ans=Math.max(score,ans);            }            pw.println(ans);        }    }    public long give(long tasks,Long time,ArrayList<Long> list)    {        long score=0;        for(int i=0;i<list.size();i++)        {            long max=Math.min(time/list.get(i),tasks);            time-=max*list.get(i);            score+=max;        }        return score;    }}
