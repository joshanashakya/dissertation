import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int N, K;    long T;    long[] a;    void run(FastScanner in, PrintWriter out) {        N = in.nextInt();        K = in.nextInt();        T = in.nextLong();        a = new long[K];         long tot = 0;        for (int i = 0; i < K; i++) {            a[i] = in.nextLong();            tot += a[i];        }        Arrays.sort(a);         // how many full tasks can i finish         int maxscore = 0;        for (int i = 0; i <= N; i++) {            if (i*tot > T) break;            int currscore = (K+1)*i;            long remtime = T-i*tot;             for (int k = 0; k < K; k++) {                 // how many can i do                // i have N-i remaining tasks                // it will take (N-i)*a[k] time to all of the remaining subtasks of type k                 // remtime/a[k];                long cando = Math.min(N-i, remtime/a[k]);                currscore += cando;                remtime -= cando * a[k];                if (cando < N-i) break;            }            maxscore = Math.max(maxscore, currscore);        }        out.println(maxscore);     }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
