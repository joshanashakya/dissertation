import java.util.*;import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     public static long mod = 17352642619633L;     int N, K;    long T;    long[] a;    long tot;    void run(FastScanner in, PrintWriter out) {        N = in.nextInt();        K = in.nextInt();        T = in.nextLong();        a = new long[K];         tot = 0;        for (int i = 0; i < K; i++) {            a[i] = in.nextLong();            tot += a[i];        }        Arrays.sort(a);         // how many full tasks can i finish         int lo = 0;        int hi = Math.min(N, (int)(T/tot));        while (hi-lo > 3) {            int m1 = lo + (hi-lo)/3;            int m2 = hi - (hi-lo)/3;             int c1 = cost(m1);            int c2 = cost(m2);            if (c1 == c2) {                hi = m2;                lo = m1;            } else if (c1 < c2) {                lo = m1;            } else {                hi = m2;            }        }         int max = 0;        for (int i = lo; i <= hi; i++) {            max = Math.max(max, cost(i));        }        out.println(max);    }     int cost(int m) {         int cost = m*(K+1);        long remtime = T - m*tot;         for (int k = 0; k < K; k++) {             long cando = Math.min(N-m, remtime/a[k]);            cost += cando;            remtime -= cando * a[k];            if (cando < N-m) break;        }        return cost;    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
