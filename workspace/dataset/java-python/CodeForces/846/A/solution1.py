import sysimport mathimport heapqimport bisectfrom collections import Counterfrom collections import defaultdictfrom io import BytesIO, IOBase  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None        self.BUFSIZE = 8192     def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, self.BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")  def get_int():    return int(input())  def get_ints():    return list(map(int, input().split(' ')))  def get_int_grid(n):    return [get_ints() for _ in range(n)]  def yes_no(b):    if b:        return "YES"    else:        return "NO"  def solve():    n = get_int()    s = get_ints()    p = [0]    for x in s:        p.append(p[-1] + x)    m = s.count(0)    for i in range(n):        if s[i] == 1:            x = i - (p[i + 1] - 1)            y = p[-1] - p[i + 1]            m = max(m, 1 + x + y)    return m  print(solve())
