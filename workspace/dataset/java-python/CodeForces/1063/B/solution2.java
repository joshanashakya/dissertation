import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Deque;import java.util.LinkedList;import java.util.StringTokenizer; public class CF1063B {    static final int[] dx = { +1, -1, 0, 0 };    static final int[] dy = { 0, 0, +1, -1 };     public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt(), m = sc.nextInt();        int xS = sc.nextInt() - 1, yS = sc.nextInt() - 1;        int l = sc.nextInt(), r = sc.nextInt();        boolean[] g = new boolean[n * m];        for (int i = 0; i < n; i++) {            char[] line = sc.nextToken().toCharArray();            for (int j = 0; j < m; j++)                if (line[j] == '.')                    g[i * m + j] = true;        }         // BFS        Deque<Integer> q = new LinkedList<Integer>();        int[] dist = new int[n * m];        int zS = xS * m + yS;        dist[zS] = 1;        q.add(zS);        while (!q.isEmpty()) {            int z = q.remove(), x = z / m, y = z % m;            for (int i = 0; i < 4; i++) {                int x1 = x + dx[i], y1 = y + dy[i], z1 = x1 * m + y1;                if (x1 >= 0 && x1 < n && y1 >= 0 && y1 < m && g[z1]) {                    int w = dy[i] == 1 ? 1 : 0;                    int d = dist[z] + w;                    if (d >= dist[z1] && dist[z1] != 0)                        continue;                    if (d > r + 1 || d - (y1 - yS) > l + 1)                        continue;                    dist[z1] = d;                    if (w == 1)                        q.addLast(z1);                    else                        q.addFirst(z1);                }            }        }        int cells = 0;        for (int i = 0; i < n * m; i++)            if (dist[i] != 0)                cells++;        pw.println(cells);        pw.flush();    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
