import java.util.*; public class helloworld{	public static void main(String []args)	{		Scanner sc = new Scanner(System.in);		int n = sc.nextInt();		int m = sc.nextInt();				int r = sc.nextInt()-1;		int c = sc.nextInt()-1;				int maxleft = sc.nextInt();        int maxright = sc.nextInt();                String arr[] = new String[n];        sc.nextLine();                for(int i = 0 ; i < n ; i++)        {        	arr[i] = sc.nextLine();        }                Deque<pair> q = new ArrayDeque<pair>();        int d[][] = new int[n][m];        for(int i = 0 ; i < n ; i++)        {        	for(int j = 0 ; j < m ; j++)        	{        		d[i][j] = Integer.MAX_VALUE;        	}        }                q.add(new pair(r,c));        d[r][c] = 0;                while(q.size() > 0)        {        	pair p = q.removeFirst();            int xx = p.x-1;            int yy = p.y;            int w = 0;            if(xx >= 0 && yy >= 0 && xx < n && yy < m && arr[xx].charAt(yy) != '*')            {            	if(d[p.x][p.y]+w < d[xx][yy])            	{            		d[xx][yy] = d[p.x][p.y]+w;            		            		if(w==0)            			q.addFirst(new pair(xx,yy));            		            		else            			q.addLast(new pair(xx,yy));            	}            }                                                 xx = p.x+1;             yy = p.y;             w = 0;            if(xx >= 0 && yy >= 0 && xx < n && yy < m && arr[xx].charAt(yy) != '*')            {            	if(d[p.x][p.y]+w < d[xx][yy])            	{            		d[xx][yy] = d[p.x][p.y]+w;            		            		if(w==0)            			q.addFirst(new pair(xx,yy));            		            		else            			q.addLast(new pair(xx,yy));            	}            }                                     xx = p.x;             yy = p.y-1;             w = 1;            if(xx >= 0 && yy >= 0 && xx < n && yy < m && arr[xx].charAt(yy) != '*')            {            	if(d[p.x][p.y]+w < d[xx][yy])            	{            		d[xx][yy] = d[p.x][p.y]+w;            		            		if(w==0)            			q.addFirst(new pair(xx,yy));            		            		else            			q.addLast(new pair(xx,yy));            	}            }                                     xx = p.x;             yy = p.y+1;             w = 0;            if(xx >= 0 && yy >= 0 && xx < n && yy < m && arr[xx].charAt(yy) != '*')            {            	if(d[p.x][p.y]+w < d[xx][yy])            	{            		d[xx][yy] = d[p.x][p.y]+w;            		            		if(w==0)            			q.addFirst(new pair(xx,yy));            		            		else            			q.addLast(new pair(xx,yy));            	}            }                                }        int ans = 0;        for(int i = 0 ; i < n ; i++)        {        	for(int j = 0 ; j < m ; j++)        	{        		if(d[i][j] != Integer.MAX_VALUE)        		{        			if(d[i][j] <= maxleft && d[i][j]+j-c <= maxright)        				ans++;        		}        	}        }        System.out.println(ans);	}} class pair{	int x , y;	public pair(int x , int y)	{		this.x = x;		this.y = y;	}}
