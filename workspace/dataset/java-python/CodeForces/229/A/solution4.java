import java.util.Arrays;import java.util.LinkedList;import java.util.Queue;import java.util.Scanner; public class Main {    static int getNeighbour(int index, int n, int dis){        return (index + dis + n) % n;    }    static int[] getDisArray(int[] array){        int[] res = new int[array.length];        Arrays.fill(res, Integer.MAX_VALUE);         boolean[] visited = new boolean[array.length];         Queue<int[]> q = new LinkedList<>();        for(int i = 0; i < array.length; i++){            if(array[i] == 1) q.add(new int[]{i, 0});        }         while(!q.isEmpty()){            int[] cur = q.remove();            int index = cur[0];            int val = cur[1];             if(visited[index]) continue;            visited[index] = true;            res[index] = val;             int leftNeighbour = getNeighbour(index, array.length, -1);            int rightNeighbour = getNeighbour(index, array.length, 1);            int newValue = val + 1;             if(!visited[leftNeighbour]) q.add(new int[] {leftNeighbour, newValue});            if(!visited[rightNeighbour]) q.add(new int[] {rightNeighbour, newValue});        }         return res;    }    public static void main(String[] arg) {        Scanner scanner = new Scanner(System.in);         int n = scanner.nextInt();        int m = scanner.nextInt();         int[][] array = new int[n][m];        for(int i = 0; i < n; i++){            String str = scanner.next();            for(int j = 0; j < m; j++){                array[i][j] = (str.charAt(j) == '0'? 0: 1);            }        }         int[][] dist = new int[n][m];        for(int i = 0; i < n; i++){            dist[i] = getDisArray(array[i]);        }         long res = Integer.MAX_VALUE;        for(int col = 0; col < m; col++){            long subRes = 0;            for(int i = 0; i < n; i++){                subRes += dist[i][col];            }             res = Math.min(subRes, res);        }         if(res >= Integer.MAX_VALUE){            System.out.println(-1);        }else{            System.out.println(res);        }    }}
