import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;  public class COVID {     private int V = 100003;      private long dist[] = new long[V];     private boolean vis[] = new boolean[V];     private PriorityQueue<Node> pq = new PriorityQueue<Node>();     List<Node>  adj[] = new ArrayList[V];     List<Integer>  enemy[] = new ArrayList[V];     int n;      public void dijkstra()     {     	for (int i = 0; i < n; i++)         {            dist[i] = 10000000000000L;         	vis[i] = false;        }        dist[0]=0;        for (int i = 0; i < n; i++)         	pq.add(new Node(i,dist[i]));                while (pq.size() != 0) {         	Node temp = pq.remove();            int u = temp.node; 	  		long d = dist[u];	  		if(d== 10000000000000L)	  			break;			for(long j:enemy[u])			{				if(j>d)						break;				if(d==j)					d++;			}				  	        for (Node v:adj[u]){               	if (d + v.cost < dist[v.node])                 {                	dist[v.node] = d + v.cost;                 	pq.add(new Node(v.node, dist[v.node])); 	        	} 	    	}        }     }       public static void main(String[] args) throws IOException {  		COVID covid = new COVID(); 		Scanner in = new Scanner(System.in);		int n = in.nextInt();		int m = in.nextInt();				covid.n = n;		for(int i = 0; i < n; i++) {         	covid.adj[i] = new ArrayList<Node>();        	covid.enemy[i] = new ArrayList<Integer>();        }        for(int i=0;i<m;i++){			int a = in.nextInt() - 1;			int b = in.nextInt() - 1;			int c = in.nextInt();			covid.adj[a].add(new Node(b,c));			covid.adj[b].add(new Node(a,c));		}		for(int i=0;i<n;i++){			int J = in.nextInt();			for(int j=0;j<J;j++){				int x = in.nextInt();				covid.enemy[i].add(x);			}		}        covid.dijkstra();        long ans = covid.dist[n-1];        if(ans == 10000000000000L)        	ans = -1;        System.out.println(ans);	} }   class Node implements Comparable<Node> {     public int node;     public long cost;       public Node(){}     public Node(int node, long cost)     {         this.node = node;         this.cost = cost;     }   	public int compareTo(Node o)	{		if(cost != o.cost)			return (cost - o.cost<0)?-1:1;		else			return node - o.node;	}} 
