/* * akshaygupta26 */import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections;import java.util.Comparator;import java.util.PriorityQueue;public class A { 	static class Pair{        int dest;        long wt;        Pair(){}        Pair(int d,long w){            dest=d;            wt =w;        }    }    static class customSort implements Comparator<Pair>{        public int compare(Pair a,Pair b){            if(a.wt<b.wt) return -1;            else if(a.wt>b.wt) return 1;            else return 0;        }    }        static ArrayList<Long> visit[];    static ArrayList<Long> nextTransit[];    public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		for(int t=1;t<=test;t++)		{			int n=sc.nextInt();			int m=sc.nextInt();			ArrayList<Pair> arr[]=new ArrayList[n+1];			visit=new ArrayList[n+1];			nextTransit=new ArrayList[n+1];			for(int i=0;i<=n;i++) {				visit[i]=new ArrayList<>();				nextTransit[i]=new ArrayList<>();			}						for(int i=0;i<=n;i++) arr[i]=new ArrayList<>();						while(m-->0) {				int s=sc.nextInt();				int d=sc.nextInt();				long w=sc.nextLong();				arr[s].add(new Pair(d,w));				arr[d].add(new Pair(s,w));			}						for(int i=1;i<=n;i++) {				int nos =sc.nextInt();				if(nos == 0)continue;				for(int j=0;j<nos;j++){					visit[i].add(sc.nextLong());				}				long last=0;				nextTransit[i].add(visit[i].get(nos-1)+1);				last =visit[i].get(nos-1)+1;				for(int j=nos-2;j>=0;j--) {					if(visit[i].get(j)+1 == visit[i].get(j+1)) {						nextTransit[i].add(last);					}					else {						nextTransit[i].add(visit[i].get(j)+1);						last=visit[i].get(j)+1;					}				}				Collections.reverse(nextTransit[i]);			}						long cost =djikstra(1,n,arr);			ans.append(cost+"\n");		}			    System.out.print(ans);	}         public static long djikstra(int source,int n,ArrayList<Pair> arr[]){                        boolean vis[]=new boolean[n+1];            PriorityQueue<Pair> pq=new PriorityQueue<>(new customSort());			            pq.add(new Pair(source,0));             while(!pq.isEmpty()){                Pair x=pq.poll();                                int nd =x.dest;                long wt =x.wt;//                System.out.println("Current Node: "+nd);                if(vis[nd]) continue;                vis[nd]=true;                if(nd == n) {                	return wt;                }                for(int i=0;i<arr[nd].size();i++){                    int ch=arr[nd].get(i).dest;                    long extra =findWaitingTime(nd,wt);                    long wtc=arr[nd].get(i).wt+extra;                    if(!vis[ch]){//                    	System.out.println("Adding node: "+ch+" time: "+(wtc)+" Waiting Time: "+extra);                        pq.add(new Pair(ch,(wtc)));                    }                }//                System.out.println("-------------------");            }			            return -1;    }        static long findWaitingTime(int node,long time) {    	int wait=0;    	    	long nextTransitTime =find(node,time);    	if(nextTransitTime != -1) {    		return nextTransitTime;    	}    	else {    		return time;    	}    }        static long find(int node,long t) {    	    	int low =0;    	int high=visit[node].size()-1;    	    	while(low<=high) {    		int mid =(low+high)/2;    		if(visit[node].get(mid) < t) {    			low=mid+1;    		}    		else if(visit[node].get(mid)>t) {    			high=mid-1;    		}    		else {    			return nextTransit[node].get(mid);    		}    	}    	    	return (long)-1;    	    }            static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
