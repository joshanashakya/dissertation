import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.*;  public class COVID {     private int dist[];     private boolean vis[];     private PriorityQueue<Node> pq;     private int V;      List<List<Node> > adj;     List<List<Integer> > enemy;        public COVID(int V)     {         this.V = V;         dist = new int[V];        vis = new boolean[V];         pq = new PriorityQueue<Node>(V, new Node());     }       public void dijkstra(List<List<Node> > adj, List<List<Integer> > enemy)     {         this.adj = adj;   		this.enemy = enemy;        for (int i = 0; i < V; i++)         {            dist[i] = Integer.MAX_VALUE;         	vis[i] = false;        }        pq.add(new Node(0, 0));         dist[0] = 0;         while (pq.size() != 0) {             int u = pq.remove().node; 	        int newDistance = -1; 	  		if(vis[u])	  			continue;	  		vis[u] = true;	  		int d = dist[u];			for(int j:enemy.get(u)){				if(d<j)					break;				if(d==j)					d++;			}	  	        for (int i = 0; i < adj.get(u).size(); i++) { 	            Node v = adj.get(u).get(i);                 newDistance = d + v.cost;               	if (newDistance < dist[v.node])                 {                	dist[v.node] = newDistance;                 	pq.add(new Node(v.node, dist[v.node])); 	        	} 	    	}        }     }       public static void main(String[] args) throws IOException {		List<List<Node> > adj = new ArrayList<List<Node> >();		List<List<Integer> > enemy = new ArrayList<List<Integer> >();				BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));		String inputs[] = reader.readLine().split(" ");		int n = Integer.parseInt(inputs[0]);		int m = Integer.parseInt(inputs[1]);		for(int i = 0; i < n; i++) {             List<Node> item = new ArrayList<Node>();             List<Integer> item2 = new ArrayList<Integer>();             adj.add(item);            enemy.add(item2);        } 		        for(int i=0;i<m;i++){			inputs = reader.readLine().split(" ");			int u = Integer.parseInt(inputs[0])-1;        	int v = Integer.parseInt(inputs[1])-1;        	int w = Integer.parseInt(inputs[2]);			adj.get(u).add(new Node(v,w));			adj.get(v).add(new Node(u,w));		}		for(int i=0;i<n;i++){			inputs = reader.readLine().split(" ");			int c = Integer.parseInt(inputs[0]);			for(int j=0;j<c;j++){				enemy.get(i).add(Integer.parseInt(inputs[j+1]));			}		}		COVID covid = new COVID(n);         covid.dijkstra(adj, enemy);        int ans = covid.dist[n-1];        if(ans == Integer.MAX_VALUE)        	ans = -1;        System.out.println(ans);	} }   class Node implements Comparator<Node> {     public int node;     public int cost;        public Node(){}     public Node(int node, int cost)     {         this.node = node;         this.cost = cost;     }       @Override    public int compare(Node node1, Node node2)     {         if (node1.cost < node2.cost)             return -1;         if (node1.cost > node2.cost)             return 1;         return 0;     } } 
