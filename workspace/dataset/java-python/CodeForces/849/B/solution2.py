def calculate_line(first_point, second_point):    first_x = first_point[0]    first_y = first_point[1]    second_x = second_point[0]    second_y = second_point[1]     slope = (second_y-first_y)/(second_x-first_x)    const = first_y - slope*first_x     return slope, const  def is_on_line(line, current_point):    point_x = current_point[0]    point_y = current_point[1]    slope = line[0]    const = line[1]     if point_y == (point_x*slope + const):        return True    else:        return False  def parallel_line(line, current_point):    point_x = current_point[0]    point_y = current_point[1]    slope = line[0]    const = point_y - slope*point_x     return slope, const  points_number = int(input()) pointsY = input().split() points = [] for i in range(points_number):    point = (i+1, int(pointsY[i]), [])    points.append(point) triangle_vertices = [points[0], points[1]]first_line = calculate_line(triangle_vertices[0], triangle_vertices[1])all_on_line = True for i in range(2, points_number):    if not is_on_line(first_line, points[i]):        triangle_vertices.append(points[i])        all_on_line = False        break if all_on_line:    print("No")    exit() lines = [] for i in range(3):    first_point = triangle_vertices[i % 3]    second_point = triangle_vertices[(i+1) % 3]    third_point = triangle_vertices[(i+2) % 3]     line = calculate_line(first_point, second_point)    para_line = parallel_line(line, third_point)     lines.append(line)    lines.append(para_line) for i in range(points_number):    current_point = points[i]    for j in range(3):        if is_on_line(lines[2*j], current_point) or is_on_line(lines[2*j+1], current_point):            current_point[2].append(j) line_set = [0, 0, 0] for i in range(points_number):    for e in points[i][2]:        line_set[int(e)] += 1 if points_number in line_set:    print("Yes")else:    print("No")
