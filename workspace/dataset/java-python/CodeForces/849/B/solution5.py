#Code by Sounak, IIESTS#------------------------------warmup---------------------------- import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fraction  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0        def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None         def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now-----------------------------------------------------n=int(input())d=list(map(int,input().split()))a,b,c=d[:3]if b-a==c-b:    pr=b-a    ncnt=0    for i in range(3,n):        if (d[i]-c)/(i-2)!=pr:            if ncnt:                if (d[i]-pz)/(i-pind)!=pr:                    print('No');exit()            else:                pz,pind=d[i],i                ncnt=1    if ncnt:print('Yes')    else:print('No')else:    p1=p2=p3=True    pr1,pz1,pind1=b-a,c,2    pr2,pz2,pind2=c-b,a,0    pr3,pz3,pind3=(c-a)/2,b,1    ncnt = 1    for i in range(3, n):        if (d[i] - b) / (i - 1) != pr1:            if (d[i] - pz1) / (i - pind1) != pr1:                p1=False        if (d[i] - c) / (i - 2) != pr2:            if (d[i] - pz2) / (i - pind2) != pr2:                p2=False        if (d[i] - c) / (i - 2) != pr3:            if (d[i] - pz3) / (i - pind3) != pr3:                p3=False    print('Yes' if p1 or p2 or p3 else 'No')
