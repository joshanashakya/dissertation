import java.io.*;import java.util.*; public class Composite {	static final Random random = new Random();	static PrintWriter out = new PrintWriter((System.out));	static Reader sc = new Reader(); 	public static void main(String args[]) throws IOException {		int n = sc.nextInt();		int a[] = new int[n];		for (int i = 0; i < n; i++)			a[i] = sc.nextInt();		boolean f = false;		int c = 0;		if (n % 2 == 0) {			System.out.println("no");			f = true;		} 		else if (a[0] % 2 != 0 && a[n - 1] % 2 != 0) {			f = true;			System.out.println("yes");		} 		else {			for (int i = 0; i < n; i++) {								if(a[0]%2==0) {					f = true;					System.out.println("no");					break;				}				else if (a[i] % 2 == 0) {					c++; 					if (c >= 1) {						f = true;						System.out.println("No");						break;					} 				} else					continue;			} 		}		if (f == false)			System.out.println("yes");	} // Fast Input Output	static class Reader {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st = new StringTokenizer(""); 		public String next() {			while (!st.hasMoreTokens()) {				try {					st = new StringTokenizer(br.readLine());				} catch (Exception e) {					e.printStackTrace();				}			}			return st.nextToken();		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		} 		public String nextLine() {			try {				return br.readLine();			} catch (Exception e) {				e.printStackTrace();			}			return null;		} 		public boolean hasNext() {			String next = null;			try {				next = br.readLine();			} catch (Exception e) {			}			if (next == null) {				return false;			}			st = new StringTokenizer(next);			return true;		} 	} 	// EFFICIENT SORTING Ascending }
