 import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.LinkedList;import java.util.Queue;import java.util.Set;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; public class Main {	public static void main(String[] args) {		FastScanner fs = new FastScanner();		TreeMap<Character,Integer> mp = new TreeMap<>();		Set<Integer> set = new TreeSet<Integer>();				int n=fs.nextInt();		String s= fs.next();		boolean possible =true;		int cnt=0;		for(int i=0;i<n;i++) { 			if(s.charAt(i)=='(') cnt++;			else cnt--;		}				if(cnt!=0) possible=false;				if(possible==false) System.out.println(-1);		else {			int cnt2=0,len=0,ans=0;						//greedy here			//if cnt2==0, check if it needs reorder			//else skip			boolean wrong=false;						for(int i=0;i<n;i++) {				if(s.charAt(i)=='(') cnt2++;				else cnt2--;				if(cnt2<0) wrong=true;				len++;				if(cnt2==0) {					if(wrong) ans+=len;					len=0;					wrong=false;				}			}			System.out.println(ans);		}			}					/***********************************************************************/	static long gcd(long a,long b) {		if(b!=0) return gcd(b,a%b);		else return a;	} 	static void debug(int[] a) {		for(int i=0;i<a.length;i++) System.out.print(a[i]+" ");		System.out.println();	}	static void debug(ArrayList<Integer> a) {		for(int i=0;i<a.size();i++) System.out.print(a.get(i)+" ");		System.out.println();	}		static void sort(int[] a,boolean reverse) {		ArrayList<Integer> l=new ArrayList<>();		for (int i:a) l.add(i);		if(reverse) Collections.sort(l,Collections.reverseOrder());			else Collections.sort(l); 		for (int i=0; i<a.length; i++) a[i]=l.get(i);	}		static int lowerbound(int[] a,int x) {		int s=0,e=a.length;		while(s<e) {			int mid = (s+e)/2;			if(a[mid]>=x) e=mid;			else s=mid+1;		}		return e;	}		static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}				int nextInt() {			return Integer.parseInt(next());		}				int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}				long nextLong() {			return Long.parseLong(next());		}				long[] readArray_long(int n) {			long[] a=new long[n];			for(int i=0;i<n;i++) a[i]=nextLong();			return a;		}		}		static class pii<F,S>{		final F fs;		final S sc;				public pii(F fs,S sc){			this.fs=fs;			this.sc=sc;		}				static <F,S> pii<F,S> of(F fs,S sc){			return new pii<F,S>(fs,sc);		}	}		static class ppi<F,S,S2>{		final F fs;		final S sc;		final S2 sc2;				public ppi(F fs,S sc,S2 sc2) {			this.fs=fs;			this.sc=sc;			this.sc2=sc2;		}		static <F,S,S2> ppi<F,S,S2> of(F fs,S sc,S2 sc2){			return new ppi<F,S,S2>(fs,sc,sc2);		}	}		static class pipi<F,S,F2,S2>{		final F fs;		final S sc;		final F fs2;		final S2 sc2;				public pipi(F fs,S sc,F fs2,S2 sc2) {			this.fs=fs;			this.sc=sc;			this.fs2=fs2;			this.sc2=sc2;		}		static <F,S,F2,S2> pipi<F,S,F2,S2> of(F fs,S sc,F fs2,S2 sc2){			return new pipi<F,S,F2,S2>(fs,sc,fs2,sc2);		}	}		static int abs(int a) {		return Math.abs(a);	}	static long abs(long a) {		return Math.abs(a);	}		static int min(int a, int b) {		return Math.min(a, b);	}	static long min(long a,long b) {		return Math.min(a, b);	}		static int max(int a, int b) {		return Math.max(a, b);	}		static long max(long a,long b) {		return Math.max(a, b);	}	}
