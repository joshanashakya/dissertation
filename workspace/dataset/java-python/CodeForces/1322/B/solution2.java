import java.util.*;import java.io.*;public class A{    static class Reader    {        final private int BUFFER_SIZE = 1 << 16;        private DataInputStream din;        private byte[] buffer;        private int bufferPointer, bytesRead;         public Reader()        {            din = new DataInputStream(System.in);            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }         public Reader(String file_name) throws IOException        {            din = new DataInputStream(new FileInputStream(file_name));            buffer = new byte[BUFFER_SIZE];            bufferPointer = bytesRead = 0;        }         public String readLine() throws IOException        {            byte[] buf = new byte[64]; // line length            int cnt = 0, c;            while ((c = read()) != -1)            {                if (c == '\n')                    break;                buf[cnt++] = (byte) c;            }            return new String(buf, 0, cnt);        }         public int nextInt() throws IOException        {            int ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do            {                ret = ret * 10 + c - '0';            }  while ((c = read()) >= '0' && c <= '9');             if (neg)                return -ret;            return ret;        }         public long nextLong() throws IOException        {            long ret = 0;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();            do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');            if (neg)                return -ret;            return ret;        }         public double nextDouble() throws IOException        {            double ret = 0, div = 1;            byte c = read();            while (c <= ' ')                c = read();            boolean neg = (c == '-');            if (neg)                c = read();             do {                ret = ret * 10 + c - '0';            }            while ((c = read()) >= '0' && c <= '9');             if (c == '.')            {                while ((c = read()) >= '0' && c <= '9')                {                    ret += (c - '0') / (div *= 10);                }            }             if (neg)                return -ret;            return ret;        }         private void fillBuffer() throws IOException        {            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);            if (bytesRead == -1)                buffer[0] = -1;        }         private byte read() throws IOException        {            if (bufferPointer == bytesRead)                fillBuffer();            return buffer[bufferPointer++];        }         public void close() throws IOException        {            if (din == null)                return;            din.close();        }    }	public static void main(String[] args) throws Exception{		Reader sc=new Reader();		int n=sc.nextInt();		int arr[]=new int[n+1];		for(int i=1;i<=n;i++)			arr[i]=sc.nextInt();		solve(arr);	}	static void solve(int arr[])	{		int ans=0;		for(int i=0;i<26;i++)		{			int b[]=getArr(arr,i);			Arrays.sort(b);			int temp=getAns(b,i);			if(temp%2!=0)ans|=(1<<(i));		}		System.out.println(ans);	}	static int getAns(int[] arr,int i)	{		int ans=0;		int l1=(1<<i);		int r1=(1<<(i+1));		int l2=(1<<i)+(1<<(i+1));		int r2=(1<<(i+2))-1;		for(int k=1;k<arr.length;k++)		{			int rc=binarySearch(arr,k,l1);			int lc=binarySearch(arr,k,r1);			if(lc>=rc)ans+=lc-rc;			if(i!=0)			{				rc=binarySearch(arr,k,l2);				lc=binarySearch(arr,k,r2);				if(lc>=rc)ans+=lc-rc;			}		}		return ans;	}	static int binarySearch(int arr[],int i,int req)	{		int val=arr[i];		int low=i+1;		int high=arr.length-1;		int ans=arr.length;		while(low<=high)		{			int mid=(low+high)>>1;			if(val+arr[mid]>=req)			{				ans=mid;				high=mid-1;			}			else			{				low=mid+1;			}		}		return ans;	}	static int[] getArr(int arr[],int k)	{		int mod=(1<<(k+1));		int b[]=new int[arr.length];		for(int i=0;i<arr.length;i++)b[i]=arr[i]%mod;		return b;	}}
