import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.StringTokenizer; public class Main {    private static int findAnswer(int n, int[] a) {        int res = 0;        for (int bit = 0; bit <= 25; bit++) {            if (findBit(n, a, bit) > 0) {                res += (1 << bit);            }        }        return res;    }     private static int findBit(int n, int[] a, int bit) {        int[] A = new int[n];        for (int i = 0; i < n; i++) {            A[i] = (a[i] % (1 << (bit + 1)));        }        Arrays.sort(A);        // count pairs i<j s.t, A[i] + A[j] >= 2^b -> X        // count pairs i<j s.t, A[i] + A[j] >= 2^(b+1) -> Y        // count pairs i<j s.t, A[i] + A[j] >= 2^(b+1)+2^b -> Z        // return (X+Y+Z) mod 2.        long X = countPairsGeq(n, A, (1 << bit)),                Y = countPairsGeq(n, A, (1 << (1 + bit))),                Z = countPairsGeq(n, A, (1 << (1 + bit)) + (1 << bit));        return (int) ((X + Y + Z) % 2);    }     // i<j : Ai + Aj >= X, A -> sorted asc.    private static long countPairsGeq(int n, int[] A, int X) {        long ans = 0;        int high = n - 1;        for (int low = 0; low < n - 1; low ++) {            if (low >= high) high = low + 1;            // find smallest J: A[low] + A[J] >= X            while (high > low + 1 && A[low] + A[high - 1] >= X) {                high--;            }            if (A[low] + A[high] < X) continue;            ans += (n - high);        }        return ans;    }     public static void main(String[] args) throws IOException {        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));        PrintWriter pw = new PrintWriter(System.out);        StringTokenizer st = new StringTokenizer(rd.readLine());        int n = Integer.parseInt(st.nextToken());        st = new StringTokenizer(rd.readLine());        int[] a = new int[n];        for (int i = 0; i < n; i++) {            a[i] = Integer.parseInt(st.nextToken());        }        pw.println(findAnswer(n, a));        pw.flush();        pw.close();        rd.close();    }}  		  	  					   	   	 	   	 	 	
