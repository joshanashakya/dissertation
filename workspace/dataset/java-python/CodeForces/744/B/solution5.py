#include <stdio.h>#include <stdlib.h> #include <iostream>#include <iomanip>#include <sstream>#include <stdint.h>#include <string.h> #include <unordered_set> //#define _USE_MATH_DEFINES//#include <math.h> #define M_PI 3.14159265358979323846  #include <vector>#include <list> #include <set>#include <map> #include <unordered_map> #include <queue> #include <string> #include <vector> #define sqr(x) (x) * (x) #include <algorithm>#include <functional> #include <bitset> #include <functional> typedef uint32_t u32;typedef int32_t i32; typedef uint64_t u64;typedef int64_t i64; typedef uint16_t u16;typedef int16_t i16; typedef uint8_t u8;typedef int8_t i8;  using namespace std; struct less_key{    bool operator() (pair<i64, i64> p1, pair<i64, i64> p2)    {        return (p1.first < p2.first) || (p1.second < p2.second);    }}; struct pair_hash{    std::size_t operator()(const pair<i64, i64>& k) const    {        return static_cast<size_t>(k.first ^ k.second);    }}; const i64 mod = 1000000007; u64 n; u64 t[10]; set<i64> q[20]; vector<i64> a[20]; vector<i64> r; int main() {    cin >> n;     for (i64 i = 0; i < 10; i++) {        t[i] = 1 << i;    }     for (i64 i = 0; i < 10; i++) {        for (u64 j = 1; j <= n; j++) {            if (j & t[i]) {                q[i].insert(j);            }        }    }     for (i64 i = 0; i < 10; i++) {        for (u64 j = 1; j <= n; j++) {            if (~j & t[i]) {                q[i + 10].insert(j);            }        }    }     for (i64 i = 0; i < 20; i++) {        if (!q[i].size()) {            continue;        }         cout << q[i].size() << endl;        fflush(stdout);         stringstream ss;        for (auto it = q[i].begin(); it != q[i].end(); it++) {            if (it != q[i].begin()) {                ss << " ";            }            ss << *it;        }         cout << ss.str() << endl;        fflush(stdout);         for (i64 j = 0; j < n; j++) {            i64 t;            cin >> t;            a[i].push_back(t);        }    }     for (i64 i = 1; i <= n; i++) {        r.push_back(mod);         for (i64 j = 0; j < 20; j++) {            if (q[j].empty()) {                continue;            }             if (q[j].find(i) == q[j].end()) {                r[i - 1] = min(r[i - 1], a[j][i - 1]);            }        }    }     stringstream ss;    ss << -1 << " ";    for (i64 i = 1; i <= n; i++) {        ss << r[i - 1] << " ";    }     cout << ss.str() << endl;    fflush(stdout);     return 0;}
