import java.io.*;import java.util.*; public class A {		static ArrayList<Integer> g[];	static int[] vis,cc;	public static void main(String[] args)throws IOException 	{					FastReader f=new FastReader();		StringBuffer sb = new StringBuffer();				int n=f.nextInt();		int m=f.nextInt();		int k=f.nextInt();				Set<Integer> cap=new HashSet<>();		for(int i=0;i<k;i++)			cap.add(f.nextInt());				g=new ArrayList[n+1];		for(int i=0;i<=n;i++)			g[i]=new ArrayList<>();		vis=new int[n+1];		cc=new int[n+1];				List<String> list=new ArrayList<>();		for(int i=0;i<m;i++)		{			int x=f.nextInt();			int y=f.nextInt();						g[x].add(y);			g[y].add(x);						list.add(x+" "+y);		}		int c=1;		for(int x : cap)		{			dfs(x,c);			c++;		}		// size of cc           no of edges		int[] size=new int[c],edge=new int[c];						for(int i=1;i<=n;i++)			size[cc[i]]++;				long max=0;		for(int i=1;i<c;i++)			max=Math.max(max, size[i]);				for(String str : list)		{			String s[]=str.split(" ");						int x=Integer.parseInt(s[0]);			int y=Integer.parseInt(s[1]);						if(cc[x]==cc[y])				edge[cc[x]]++;		}		long sum=0;		for(int i=1;i<c;i++)		{				long calc = ((long)size[i]*(long)(size[i]-1)/2 - (long)edge[i]);			sum+=calc;		}				long sz=max+size[0];		long calc=sz*(sz-1)/2 - (edge[0]+(max*(max-1)/2));		sum+=calc;				System.out.println(sum);	}		static void dfs(int n,int c) 	{		cc[n]=c;		vis[n] = 1;		for (int child : g[n]) {			if (vis[child] == 0)				dfs(child,c);		} 	}		static class FastReader 	{ 	    BufferedReader br; 	    StringTokenizer st;  	    public FastReader() {	    	br = new BufferedReader(new	                 InputStreamReader(System.in)); 	    }	    String next() { 	        while (st == null || !st.hasMoreElements()) { 	            try{ 	                st = new StringTokenizer(br.readLine()); 	            } 	            catch (IOException  e) { 	                e.printStackTrace(); 	            } 	        } 	        return st.nextToken(); 	    } 	    int nextInt() { 	        return Integer.parseInt(next()); 	    } 	    long nextLong() { 	        return Long.parseLong(next()); 	    } 	    double nextDouble() { 	        return Double.parseDouble(next()); 	    } 	    String nextLine() { 	        String str = ""; 	        try{ 	            str = br.readLine(); 	        } 	        catch (IOException e) { 	            e.printStackTrace(); 	        } 	        return str; 	    } 	} }
