from sys import stdin, stdout def find(node):    x = []    while dsu[node] > 0:        x.append(node)        node = dsu[node]    for i in x:        dsu[i] = node    return node def union(node1, node2):    if node1 != node2:        if dsu[node1] > dsu[node2]:            node1, node2 = node2, node1        dsu[node1] += dsu[node2]        dsu[node2] = node1        edges[node1] += edges[node2] + 1    else:        edges[node1] += 1 n, m, k = map(int, stdin.readline().strip().split())arr = [int(num) for num in stdin.readline().strip().split()]edges = [0]*(n+1)dsu = [-1]*(n+1)maxm = 1maxm_e = 0maxm_p = Nonefor __ in range(m):    a, b = map(int, stdin.readline().strip().split())    union(find(a), find(b))req = set()for i in arr:    p_i = find(i)    r_e = (dsu[p_i]*(dsu[p_i]+1))//2    maxm_e += r_e - edges[p_i]    if abs(dsu[p_i]) >= maxm:        maxm = max(maxm, abs(dsu[p_i]))        maxm_p = p_i    req.add(p_i) for i in range(1, n+1):    if dsu[i] < 0:        p_i = find(i)        if p_i not in req:            r_e = (dsu[p_i] * (dsu[p_i] + 1)) // 2            maxm_e += r_e - edges[p_i]            maxm_e += dsu[maxm_p]*dsu[p_i]            dsu[maxm_p] += dsu[p_i]stdout.write(f'{maxm_e}')
