import java.awt.Desktop; import java.io.BufferedReader;  import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;import java.sql.Array;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedHashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.PriorityQueue;import java.util.Queue;import java.util.Scanner;import java.util.Set;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeSet;import java.util.Vector;   public  class codechef3 {static class comp implements Comparator<Integer>{ 	@Override	public int compare(Integer o1, Integer o2) {		if(Math.abs(o1)>Math.abs(o2))			return -1;		else return 1;		} 		}	    		 static class FastReader		    {BufferedReader br; 		        StringTokenizer st; 		 public FastReader() 		        {  br = new BufferedReader(new		                     InputStreamReader(System.in)); 		        } 		  		       String next() 		        { 		            while (st == null || !st.hasMoreElements()) 		            { 		                try		                { 		                    st = new StringTokenizer(br.readLine()); 		                } 		                catch (IOException  e) 		                { 		                    e.printStackTrace(); 		                } 		            } 		            return st.nextToken(); 		        } 		  		        int nextInt() 		        { 		            return Integer.parseInt(next()); 		        } 		  		        long nextLong() 		        { 		            return Long.parseLong(next()); 		        } 		  		        double nextDouble() 		        { 		            return Double.parseDouble(next()); 		        } 		  		        String nextLine() 		        { 		            String str = ""; 		            try		            { 		                str = br.readLine(); 		            } 		            catch (IOException e) 		            { 		                e.printStackTrace(); 		            } 		            return str; 		        } 		    } 		 		 public static String reverse(String s1)		 {			String s2="";			int n=s1.length();			for(int i=n-1;i>=0;i--)			{				s2+=s1.charAt(i);			}			return s2;			 			 		 }	   		 public static int max(long n)		 {			 int max=(int) (n%10);			 while(n>0)			 {				 int r=(int) (n%10);				 max=Math.max(max, r);				 n/=10;			 }			 return max;			 		 }		 public static int min(long n)		 {			 int min=(int) (n%10);			 while(n>0)			 {				 int r=(int) (n%10);				 min=Math.min(min, r);				 n/=10;			 }			 return min;			 		 }				       		    		    public static void main(String[] args) 		    {		    	FastReader s=new FastReader();		    			    	int t=s.nextInt();		    	while(t-->0)		    	{		    			        String s1=s.next();		        int k=3;		        s1.length();		        int n=s1.length();		        int count=0;		        int start=0;		        int min=Integer.MAX_VALUE;		        HashMap<Character,Integer> l=new HashMap<>();		        for(int i=0;i<n;i++)		        {		        			        	int x=l.getOrDefault(s1.charAt(i),0);		             l.put(s1.charAt(i),x+1);		             		             		             if(x+1==1)		            	 count++;		             		             if(count==3)		             {		            	while(l.get(s1.charAt(start))>=2)		            	{		            		int y=l.get(s1.charAt(start));		            		l.replace(s1.charAt(start),y-1);		            		start++;		            		if(start==n)		            			break;		            	}		            	int p=i-start+1;		            	min=Math.min(min, p);		            	 		            	 		            	 		            	 		             }		             		             		             		             		        			        			        			        }		        		        if(min!=Integer.MAX_VALUE)		        System.out.println(min);		        else System.out.println("0");		    			    				    				    }		    			       		    }}
