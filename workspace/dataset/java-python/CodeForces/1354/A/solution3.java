import java.io.*;import java.util.*; public class Main extends PrintWriter {    Â     private void solve() {        int t = sc.nextInt();        for(int tt = 1; tt <= t; tt++) {            long a = sc.nextLong();            long b = sc.nextLong();            long c = sc.nextLong();            long d = sc.nextLong();            long sleep = b;            long time = b;            if(sleep < a && c-d <= 0) {                println(-1);                continue;            } else if(sleep >= a) {                println(time);            } else {                long k = (a - sleep + c-d - 1L)/(c-d);                println(time + c*k);            }        }    }//  Main() throws FileNotFoundException { super(new File("output.txt")); }//  InputReader sc = new InputReader(new FileInputStream("test_input.txt"));      Main() { super(System.out); }  InputReader sc = new InputReader(System.in);  static class InputReader {      InputReader(InputStream in) { this.in = in; } InputStream in;            private byte[] buf = new byte[16384];      private int    curChar;      private int    numChars;             public int read() {          if (numChars == -1)              throw new InputMismatchException();          if (curChar >= numChars) {              curChar = 0;              try {                  numChars = in.read(buf);              } catch (IOException e) {                  throw new InputMismatchException();              }              if (numChars <= 0)                  return -1;          }          return buf[curChar++];      }       public String nextLine() {          int c = read();          while (isSpaceChar(c))              c = read();          StringBuilder res = new StringBuilder();          do {              res.appendCodePoint(c);              c = read();          } while (!isEndOfLine(c));          return res.toString();      }       public String nextString() {          int c = read();          while (isSpaceChar(c))              c = read();          StringBuilder res = new StringBuilder();          do {              res.appendCodePoint(c);              c = read();          } while (!isSpaceChar(c));          return res.toString();      }       public long nextLong() {          int c = read();          while (isSpaceChar(c))              c = read();          int sgn = 1;          if (c == '-') {              sgn = -1;              c = read();          }          long res = 0;          do {              if (c < '0' || c > '9')                  throw new InputMismatchException();              res *= 10;              res += c - '0';              c = read();          } while (!isSpaceChar(c));          return res * sgn;      }       public int nextInt() {          int c = read();          while (isSpaceChar(c))              c = read();          int sgn = 1;          if (c == '-') {              sgn = -1;              c = read();          }          int res = 0;          do {              if (c < '0' || c > '9')                  throw new InputMismatchException();              res *= 10;              res += c - '0';              c = read();          } while (!isSpaceChar(c));          return res * sgn;      }       private boolean isSpaceChar(int c) {          return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;      }       private boolean isEndOfLine(int c) {          return c == '\n' || c == '\r' || c == -1;      }  }     public static void main(String[] $) {        new Thread(null, new Runnable() {            public void run() {                long start = System.nanoTime();                try {Main solution = new Main(); solution.solve(); solution.close();}                 catch (Exception e) {e.printStackTrace(); System.exit(1);}                System.err.println((System.nanoTime()-start)/1E9);            }        }, "1", 1 << 27).start();     }     }
