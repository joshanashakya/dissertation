import osimport sysfrom io import BytesIO, IOBase BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")#######################################from bisect import *from collections import *a,b=map(int,input().split())ans=[]rp=[[0 for i in range(b)] for i in range(a)]for i in range(a):    z=list(map(int,input().split()))    ans.append(z)    t=z.copy()    t.sort()    al=defaultdict(int)    ke=list(set(t))    for t in range(len(ke)):        al[ke[t]]=t+1    for j in range(b):        rp[i][j]=(al[z[j]],len(ke))col=[[0 for i in range(a)] for j in range(b)] for i in range(b):    for j in range(a):        col[i][j]=ans[j][i]# now the first row denotes the first coloumn cp=[[0 for i in range(a)] for j in range(b)] for i in range(b):    t=col[i].copy()    t.sort()    al=defaultdict(int)    ke=list(set(t))     for  t in range(len(ke)):        al[ke[t]]=t+1    for j in range(a):        cp[i][j]=(al[col[i][j]],len(ke))  fin=[[0 for i in range(b)] for j in range(a)] for i in range(a):    for j in range(b):        m=rp[i][j]        u=cp[j][i]                if(m[0]==u[0]):            fin[i][j]=max(u[1],m[1])        if(m[0]>u[0]):            fin[i][j]=max(m[1],m[0]+u[1]-u[0])        if(m[0]<u[0]):            fin[i][j]=max(u[1],u[0]+m[1]-m[0])for i in range(a):    print(*fin[i])                             
