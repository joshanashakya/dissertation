#Code by Sounak, IIESTS#------------------------------warmup---------------------------- import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fractionimport collectionsfrom itertools import permutationsfrom collections import defaultdict  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0        def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None         def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now-----------------------------------------------------n, m = list(map(int, input().split()))streets = []for i in range(n):    streets.append(list(map(int, input().split()))) mem_rows = {}len_row = []for i in range(n):    mem_r = sorted(set(streets[i]))    srted = {x: i for i, x in enumerate(mem_r)}    ords = [srted[i] for i in streets[i]]    mem_rows[i] = ords    len_row.append(len(mem_r)) mem_cols = {}len_col = []for j in range(m):    col = [k[j] for k in streets]    mem_d = sorted(set(col))    srted = {x: i for i, x in enumerate(mem_d)}    ords = [srted[i] for i in col]    mem_cols[j] = ords    len_col.append(len(mem_d))  for i in range(n):    prt = []    for j in range(m):        elem = streets[i][j]        pos1, pos2 = mem_rows[i][j], mem_cols[j][i]        streets_ans = max(pos1, pos2) + max((len_row[i] - pos1), (len_col[j] - pos2))        prt.append(streets_ans)    print(*prt)
