import java.io.*;import java.util.*; public class Main {    public static void main(String args[])    {        long s=System.currentTimeMillis();        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int m=input.nextInt();            int a[][]=new int[n][m];            ArrayList<ArrayList<Integer>> list1=new ArrayList<>();            for(int i=0;i<n;i++)            {                ArrayList<Integer> l=new ArrayList<>();                HashSet<Integer> set=new HashSet<>();                for(int j=0;j<m;j++)                {                    a[i][j]=input.nextInt();                    if(!set.contains(a[i][j]))                    {                        set.add(a[i][j]);                        l.add(a[i][j]);                    }                }                list1.add(l);            }            for(int i=0;i<n;i++)            {                Collections.sort(list1.get(i));            }            ArrayList<HashMap<Integer,Integer>> rows=new ArrayList<>();            for(int i=0;i<n;i++)            {                HashMap<Integer,Integer> map=new HashMap<>();                for(int j=0;j<list1.get(i).size();j++)                {                    map.put(list1.get(i).get(j),j+1);                }                rows.add(map);            }            list1=new ArrayList<>();            for(int j=0;j<m;j++)            {                ArrayList<Integer> l=new ArrayList<>();                HashSet<Integer> set=new HashSet<>();                for(int i=0;i<n;i++)                {                    if(!set.contains(a[i][j]))                    {                        set.add(a[i][j]);                        l.add(a[i][j]);                    }                }                list1.add(l);            }            for(int i=0;i<m;i++)            {                Collections.sort(list1.get(i));            }            ArrayList<HashMap<Integer,Integer>> cols=new ArrayList<>();            for(int i=0;i<m;i++)            {                HashMap<Integer,Integer> map=new HashMap<>();                for(int j=0;j<list1.get(i).size();j++)                {                    map.put(list1.get(i).get(j),j+1);                }                cols.add(map);            }            for(int i=0;i<n;i++)            {                for(int j=0;j<m;j++)                {                    int posr = rows.get(i).get(a[i][j]);                    int posl = cols.get(j).get(a[i][j]);                    int rr=rows.get(i).size()-posr;                    int rl=cols.get(j).size()-posl;                    int m1 = Math.max(posr, posl);                    int ans = Math.max(m1 + rr, m1 + rl);                    out.print(ans+" ");                }                out.println();            }        }        out.close();    }    public static void mergeSort(ArrayList<Integer> a,int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort(a,p,q);            mergeSort(a,q+1,r);            merge(a,p,q,r);        }    }    public static void merge(ArrayList<Integer> a,int p,int q,int r)    {        ArrayList<Integer> L=new ArrayList<>();        ArrayList<Integer> R=new ArrayList<>();        for(int i=p;i<=q;i++)        {            L.add(a.get(i));        }        L.add(Integer.MAX_VALUE);        for(int i=q+1;i<=r;i++)        {            R.add(a.get(i));        }        R.add(Integer.MAX_VALUE);        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L.get(x)<=R.get(y))            {                a.set(i,L.get(x));                x++;            }            else            {                a.set(i,R.get(y));                y++;            }        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
