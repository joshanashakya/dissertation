 import java.util.*;  public  class Practise {     //public static int[][] dp;     public static void main(String[] args) {        //top- down approch        //fibonacci         Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int m = sc.nextInt();        int remsp = 0;        int aa = sc.nextInt();        if (aa > m) {            System.out.print((long)Math.floor((double) aa / m)+" ");            if (aa % m != 0)                remsp = (m - aa % m);        } else if(aa%m==0)            System.out.println(1);         else {            System.out.print(0 + " ");            remsp = (m - aa);        }        for (int i = 1; i < n; i++) {            int a = sc.nextInt();          //  System.out.println(a+" "+remsp);            if (a >= remsp) {                if (remsp != 0) {                    a = a - remsp;                     System.out.print(((long) Math.floor((double) a / m) + 1) + " ");                } else                    System.out.print(((long) Math.floor((double) a / m)) + " ");                 if (a % m != 0)                    remsp = (m - a % m);                else                    remsp = 0;            } else {                remsp = remsp - a;                System.out.print(0 + " ");            }         }     }     private static int Gcd(int gvd, int a) {        if (a == 0)            return gvd;        else            return Gcd(a, gvd % a);    }      private static int CountLeft(int x, int[] arr) {        int l = -1;        int r = arr.length;        while (r > l + 1) {            int mid = l + (r - l) / 2;            if (arr[mid] <= x) {                l = mid;             } else                r = mid;         }        return l;    }     private static int CountRight(int x, int[] arr) {        int l = -1;        int r = arr.length;        while (r > l + 1) {            int mid = (l) + (r - l) / 2;            if (arr[mid] >= x) {                r = mid;            } else                l = mid;        }        return r;      }     private static boolean check(String toString) {        Stack<Character> st = new Stack<>();        for (int i = 0; i < toString.length(); i++) {            if (toString.charAt(i) == '(') {                st.push(toString.charAt(i));            } else if (st.isEmpty()) {                return false;            } else {                st.pop();            }        }        return st.isEmpty();    }  }
