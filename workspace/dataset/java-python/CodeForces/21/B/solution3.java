import java.io.*;import java.util.StringTokenizer;  public class Main {    static double EPS = 1e-9;     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        double a1 = sc.nextInt(), b1 = sc.nextInt(), c1 = sc.nextInt();        double a2 = sc.nextInt(), b2 = sc.nextInt(), c2 = sc.nextInt();        double m1 = -a1 / b1;        double m2 = -a2 / b2;        if (noSolution(a1, b1, c1) || noSolution(a2, b2, c2)) {            System.out.println(0);            return;        }        if (Double.isNaN(m1)) {            if (c1 == 0) System.out.println(-1);            else System.out.println(0);            return;        }        if (Double.isNaN(m2)) {            if (c2 == 0) System.out.println(-1);            else System.out.println(0);            return;        }        double slopediff = a1 * b2 - b1 * a2;        if (slopediff == 0) {            double hor = c1 * b1 - c2 * b2;            double vert = c1 * a2 - c2 * a1;            if (hor == 0 && vert == 0) System.out.println(-1);            else System.out.println(0);            return;        }        System.out.println(1);        out.flush();        out.close();    }     static boolean noSolution(double a, double b, double c) {        return (a == 0 && b == 0 && c != 0);    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }          public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public long[] nextLongArray(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }          public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public double[] nextDoubleArray(int n) throws IOException {            double[] ans = new double[n];            for (int i = 0; i < n; i++)                ans[i] = nextDouble();            return ans;        }         public short nextShort() throws IOException {            return Short.parseShort(next());        }     } }
