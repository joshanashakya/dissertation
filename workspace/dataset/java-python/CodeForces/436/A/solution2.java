import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;import java.util.StringTokenizer; public class CF436A {    static class Candy implements Comparable<Candy> {        boolean fruit;        int height;        int mass;         public Candy(boolean fruit, int height, int mass) {            this.fruit = fruit;            this.height = height;            this.mass = mass;        }         @Override        public int compareTo(Candy o) {            return this.height - o.height;        }     }     public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt(), x = sc.nextInt();         ArrayList<Candy> candies = new ArrayList<Candy>(n);        for (int i = 0; i < n; i++) {            boolean fruit = sc.nextInt() == 1 ? true : false;            int height = sc.nextInt(), mass = sc.nextInt();            Candy c = new Candy(fruit, height, mass);            candies.add(c);        }         pw.println(Math.max(solve(candies, x, true), solve(candies, x, false)));        sc.close();        pw.close();    }     public static int solve(ArrayList<Candy> candies, int jump, boolean type) {        Collections.sort(candies);         int cnt = 0;         boolean[] eaten = new boolean[candies.size()];         while (true) {            int borderIdx1 = binarySearch(candies, jump);            int bestMass = -1;            int bestIdx = -1;            for (int i = 0; i <= borderIdx1; i++) {                Candy c = candies.get(i);                if (c.fruit == type && !eaten[i] && c.mass > bestMass) {                    bestIdx = i;                    bestMass = c.mass;                }            }            if (bestIdx == -1)                break;            eaten[bestIdx] = true;            jump += bestMass;            cnt++;            type = !type;        }        return cnt;    }     public static int binarySearch(ArrayList<Candy> candies, int keyHeight) {        int first = 0, last = candies.size() - 1, mid = candies.size() / 2;        while (first <= last) {            if (candies.get(mid).height < keyHeight)                first = mid + 1;            else if (candies.get(mid).height == keyHeight)                return mid;            else                last = mid - 1;            mid = (first + last) / 2;        }        return first - 1;    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
