import java.util.*;import java.io.*; public class two { 	public static void main(String[] args) throws IOException, FileNotFoundException {		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));		//BufferedReader in = new BufferedReader(new FileReader("one")); 		StringTokenizer st = new StringTokenizer(in.readLine());		int n = Integer.parseInt(st.nextToken());		int x = Integer.parseInt(st.nextToken());				ArrayList<A> zero = new ArrayList<>();		ArrayList<A> one = new ArrayList<>();		for (int i=0; i<n; i++) {			st = new StringTokenizer(in.readLine());			int t = Integer.parseInt(st.nextToken());			int h = Integer.parseInt(st.nextToken());			int m = Integer.parseInt(st.nextToken());			if (t == 0) {				zero.add(new A(t, h, m));			}			else {				one.add(new A(t, h, m));			}		}				Collections.sort(zero);		Collections.sort(one);		int max=0;				// start 0		int curx=x;		int count=0;		boolean typezero = true;		boolean[] canz = new boolean[n];		boolean[] cano = new boolean[n];		o: while (true) {			if (typezero) {				for (int i=0; i<zero.size(); i++) {					if (!canz[i] && zero.get(i).h <= curx) {						curx += zero.get(i).m;						count++;						canz[i] = true;						typezero = !typezero;						continue o;					}				}				break;			}			else {				for (int i=0; i<one.size(); i++) {					if (!cano[i] && one.get(i).h <= curx) {						curx += one.get(i).m;						count++;						cano[i] = true;						typezero = !typezero;						continue o;					}				}				break;			}		}				max = count;				curx=x;		count=0;		typezero = false;		canz = new boolean[n];		cano = new boolean[n];		o: while (true) {			if (typezero) {				for (int i=0; i<zero.size(); i++) {					if (!canz[i] && zero.get(i).h <= curx) {						curx += zero.get(i).m;						count++;						canz[i] = true;						typezero = !typezero;						continue o;					}				}				break;			}			else {				for (int i=0; i<one.size(); i++) {					if (!cano[i] && one.get(i).h <= curx) {						curx += one.get(i).m;						count++;						cano[i] = true;						typezero = !typezero;						continue o;					}				}				break;			}		}				max = Math.max(max, count);		System.out.println(max);					}		static class A implements Comparable<A> {		int t, h, m;		A(int a, int b, int c) {			t = a; h = b; m = c;		}		public int compareTo(A o) {			return o.m - m;		}	} 	public static void sort(int[] a) {		shuffle(a);		Arrays.sort(a);	} 	public static void shuffle(int[] a) {		Random get = new Random();		for (int i = 0; i < a.length; i++) {			int r = get.nextInt(a.length);			int temp = a[i];			a[i] = a[r];			a[r] = temp;		}	} }
