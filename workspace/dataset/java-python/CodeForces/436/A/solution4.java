import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.Scanner;import java.util.Set;import java.util.TreeSet;public class Main{    static class Pair{        int n;        double res;        public Pair(int n,double res){this.n=n;this.res=res;}        @Override        public String toString(){return n+" "+res;}    }    static class tri{        int h,b;        public tri(int h,int b) {this.h=h;this.b=b;}        @Override         public String toString(){return this.h+" "+this.b;}    }    public static void main(String[] args){        Scanner sc = new Scanner(System.in);            int n=sc.nextInt();jump=sc.nextInt();            Comparator<tri> c = (tri t,tri p)->{                if(t.h != p.h) return t.h - p.h;                return p.h - t.h;            };             for(int i =0;i<n;i++){                 int t = sc.nextInt();                 if(t==0) crm.add(new tri(sc.nextInt(),sc.nextInt()));                 else frt.add(new tri(sc.nextInt(),sc.nextInt()));             }             Collections.sort(crm,c);             Collections.sort(frt,c);             int cjump = jump;             ArrayList<tri> cfrt = copy(frt);             ArrayList<tri> ccrm = copy(crm);             while(can)                 make();             int max = res;             jump = cjump;             res = 0;             frt = cfrt;             crm = ccrm;             flag = false;             can = true;             while(can)                 make();                          System.out.println(Math.max(res,max));            }    static ArrayList<tri> copy(ArrayList<tri> tc){        ArrayList<tri> clone = new ArrayList();        for(tri a : tc) clone.add(new tri(a.h,a.b));        return clone;    }    static int res = 0;    static boolean can = true;    static int jump;    static void make(){      if(flag){          boolean cant = false;          if(frt.isEmpty() || frt.get(0).h > jump) {can = false;return;}          else cant = true;          int mxi = 0;          for(int i =1;i<frt.size();i++){              if(frt.get(i).b > frt.get(mxi).b && frt.get(i).h <= jump){cant = true; mxi = i;}              if(frt.get(i).h > jump) break;          }          if(cant){              jump += frt.get(mxi).b;              res++;              frt.remove((int)mxi);              can = true;              flag = !flag;          }          else can = false;      }      else {          boolean cant = false;          if(crm.isEmpty() || crm.get(0).h > jump) {can = false;return;}          else cant = true;          int mxi = 0;          for(int i =1;i<crm.size();i++){              if(crm.get(i).b > crm.get(mxi).b && crm.get(i).h <= jump){cant = true; mxi = i;}              if(crm.get(i).h > jump) break;          }          if(cant){              jump += crm.get(mxi).b;              res++;              crm.remove((int)mxi);              can = true;              flag = !flag;          }          else can = false;      }    }    static boolean flag = true;    static ArrayList<tri> crm=new ArrayList(),frt=new ArrayList();}
