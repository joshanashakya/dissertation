import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;import java.util.StringTokenizer; public class CF436A {    static class Candy implements Comparable<Candy> {        boolean fruit;        int height;        int mass;         public Candy(boolean fruit, int height, int mass) {            this.fruit = fruit;            this.height = height;            this.mass = mass;        }         @Override        public int compareTo(Candy o) {            return this.height - o.height;        }     }     public static void main(String[] args) throws IOException {        FastScanner sc = new FastScanner();        PrintWriter pw = new PrintWriter(System.out);         int n = sc.nextInt(), x = sc.nextInt();         ArrayList<Candy> caramels = new ArrayList<Candy>(n);        ArrayList<Candy> fruits = new ArrayList<Candy>(n);        for (int i = 0; i < n; i++) {            boolean fruit = sc.nextInt() == 1 ? true : false;            int height = sc.nextInt(), mass = sc.nextInt();            Candy c = new Candy(fruit, height, mass);            if (fruit)                fruits.add(c);            else                caramels.add(c);        }         pw.println(Math.max(solve(caramels, fruits, x), solve(fruits, caramels, x)));        sc.close();        pw.close();    }     public static int solve(ArrayList<Candy> type1, ArrayList<Candy> type2, int jump) {        Collections.sort(type1);        Collections.sort(type2);         int candies = 0;         boolean[] eaten1 = new boolean[type1.size()];        boolean[] eaten2 = new boolean[type2.size()];         while (true) {            int borderIdx1 = binarySearch(type1, jump);            int best1Mass = -1;            int best1Idx = -1;            for (int i = 0; i <= borderIdx1; i++) {                Candy c = type1.get(i);                if (!eaten1[i] && c.mass > best1Mass) {                    best1Idx = i;                    best1Mass = c.mass;                }            }            if (best1Idx == -1)                break;            eaten1[best1Idx] = true;            jump += best1Mass;            candies++;             int borderIdx2 = binarySearch(type2, jump);            int best2Mass = -1;            int best2Idx = -1;            for (int i = 0; i <= borderIdx2; i++) {                Candy c = type2.get(i);                if (!eaten2[i] && c.mass > best2Mass) {                    best2Idx = i;                    best2Mass = c.mass;                }            }            if (best2Idx == -1)                break;            eaten2[best2Idx] = true;            jump += best2Mass;            candies++;        }        return candies;    }     public static int binarySearch(ArrayList<Candy> candies, int keyHeight) {        int first = 0, last = candies.size() - 1, mid = candies.size() / 2;        while (first <= last) {            if (candies.get(mid).height < keyHeight)                first = mid + 1;            else if (candies.get(mid).height == keyHeight)                return mid;            else                last = mid - 1;            mid = (first + last) / 2;        }        return first - 1;    }     static class FastScanner {        BufferedReader in;        StringTokenizer st;         public FastScanner() {            this.in = new BufferedReader(new InputStreamReader(System.in));        }         public String nextToken() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(in.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(nextToken());        }         public long nextLong() {            return Long.parseLong(nextToken());        }         public double nextDouble() {            return Double.parseDouble(nextToken());        }         public void close() throws IOException {            in.close();        }    }}
