import java.util.*;import java.lang.*;import java.io.*;import java.math.*;public class Prac{         static class InputReader {         private final InputStream stream;        private final byte[] buf = new byte[8192];        private int curChar, snumChars;        public InputReader(InputStream st) {            this.stream = st;        }         public int read() {            if (snumChars == -1)                throw new InputMismatchException();            if (curChar >= snumChars) {                curChar = 0;                try {                    snumChars = stream.read(buf);                }                 catch (IOException e) {                    throw new InputMismatchException();                }                if (snumChars <= 0)                    return -1;            }            return buf[curChar++];        }        public int ni() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nl() {            int c = read();            while (isSpaceChar(c)) {            c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public int[] nia(int n) {            int a[] = new int[n];            for (int i = 0; i < n; i++) {                a[i] = ni();            }            return a;        }         public String rs() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                    c = read();            } while (!isSpaceChar(c));            return res.toString();        }        public String nextLine() {            int c = read();            while (isSpaceChar(c))                c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        }         public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;        }     }    public static class Key {         private final int x;        private final int y;         public Key(int x, int y) {            this.x = x;            this.y = y;        }         @Override        public boolean equals(Object o) {            if (this == o) return true;            if (!(o instanceof Key)) return false;            Key key = (Key) o;            return x == key.x && y == key.y;        }         @Override        public int hashCode() {            int result = x;            result = 31 * result + y;            return result;        }     }    static class Pair{        int x,y;        public Pair(int x,int y){            this.y=y;            this.x=x;        }    }          static PrintWriter w = new PrintWriter(System.out);    static long mod=998244353L,mod1=1000000007;        static void shuffleArray(int[] arr){        int n = arr.length;        Random rnd = new Random();        for(int i=0; i<n; ++i){            int tmp = arr[i];            int randomPos = i + rnd.nextInt(n-i);            arr[i] = arr[randomPos];            arr[randomPos] = tmp;        }       }    public static void main(String [] args){        InputReader sc=new InputReader(System.in);        int n=sc.ni();        int a=sc.ni(),b=sc.ni();        int ar[]={a,a,a,a,b,b};        Arrays.sort(ar);        int ans=6;        int s=1000;        while(s-->0){                        for(int i=1;i<=6;i++){                int arr[]=new int[i];                boolean in=false;                for(int j=5;j>=0;j--){                    int k=0;                    boolean f=false;                    while(k<i){                        if((arr[k]+ar[j])<=n){                            arr[k]+=ar[j];                            f=true;                            break;                        }                        k++;                    }                    if(!f)in=true;                  }                if(!in){                    ans=Math.min(ans,i);                    break;                }            }            shuffleArray(ar);        }        w.println(ans);        w.close();    }}
