// Main Code at the Bottomimport java.util.*;import java.lang.*;import java.io.*;import java.math.BigInteger; public class Main {	//Fast IO class    static class FastReader {        BufferedReader br;         StringTokenizer st;         public FastReader() {        	boolean env=System.getProperty("ONLINE_JUDGE") != null;        	if(!env) {        		try {					br=new BufferedReader(new FileReader("src\\input.txt"));				} catch (FileNotFoundException e) {					e.printStackTrace();				}        	}        	else br = new BufferedReader(new InputStreamReader(System.in));         }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e) {                    e.printStackTrace();                 }             }             return st.nextToken();         }         int nextInt() {            return Integer.parseInt(next());         }         long nextLong() {            return Long.parseLong(next());         }         double nextDouble() {            return Double.parseDouble(next());         }         String nextLine() {            String str = "";             try {                str = br.readLine();             }             catch (IOException e) {                e.printStackTrace();             }             return str;         }     }         static long MOD=1000000000+7;    //debug    static void debug(Object... o) {        System.out.println(Arrays.deepToString(o));    }    // Pair    static class pair{    	long x,y;    	pair(long a,long b){    		this.x=a;    		this.y=b;    	}    	public boolean equals(Object obj) {    		if(obj == null || obj.getClass()!= this.getClass()) return false;            pair p = (pair) obj;            return (this.x==p.x && this.y==p.y);        }    	public int hashCode() {            return Objects.hash(x,y);        }    }    static FastReader sc=new FastReader();    static PrintWriter out=new PrintWriter(System.out);      //Main function(The main code starts from here)    static double dist(double x1,double y1,double x2,double y2) {    	return Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));    }    static boolean liesInside(double x1,double y1,double r1,double x2,double y2,double r2) {    	double d=dist(x1,y1,x2,y2)+r1;    	if(d<=r2) return true;    	return false;    }    static boolean liesOutside(double x1,double y1,double r1,double x2,double y2,double r2) {    	double d=dist(x1,y1,x2,y2);    	//debug(x1,y1,r1,x2,y2,r2);    	if(d>=r1+r2) return true;    	return false;    }    public static void main (String[] args) throws java.lang.Exception {    	int test=1;    	//test=sc.nextInt();    	while(test-->0){    		double x1=sc.nextDouble(),y1=sc.nextDouble(),r1=sc.nextDouble(),R1=sc.nextDouble();    		double x2=sc.nextDouble(),y2=sc.nextDouble(),r2=sc.nextDouble(),R2=sc.nextDouble();    		int ans=0;    		if(liesInside(x1,y1,r1,x2,y2,r2) || liesOutside(x1,y1,r1,x2,y2,R2) || liesInside(x2,y2,R2,x1,y1,r1)) ans++;    		if(liesInside(x1,y1,R1,x2,y2,r2) || liesOutside(x1,y1,R1,x2,y2,R2) || liesInside(x2,y2,R2,x1,y1,R1)) ans++;    		if(liesInside(x2,y2,r2,x1,y1,r1) || liesOutside(x2,y2,r2,x1,y1,R1) || liesInside(x1,y1,R1,x2,y2,r2)) ans++;    		if(liesInside(x2,y2,R2,x1,y1,r1) || liesOutside(x2,y2,R2,x1,y1,R1) || liesInside(x1,y1,R1,x2,y2,R2)) ans++;    		out.println(ans);    	}        out.flush();        out.close();    }}
