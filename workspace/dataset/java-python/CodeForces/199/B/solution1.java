import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{				    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		Point p1 = new Point(fs.nextInt(), fs.nextInt());    		int r1 = fs.nextInt(), R1 = fs.nextInt();    		    		Point p2 = new Point(fs.nextInt(), fs.nextInt());    		int r2 = fs.nextInt(), R2 = fs.nextInt();    		    		int ans = 0;    		    		ans += intersection(p1, r1, p2, r2, R2);    		ans +=  intersection(p1, R1, p2, r2, R2);    		ans += intersection(p2, r2, p1,r1, R1);    		ans += intersection(p2, R2, p1, r1, R1);    		    		out.println(ans);    		    		    	}    	    		    		    		    	out.close();    		    }                static int intersection(Point p1, int r, Point p2, int r2, int R2) {    	if((r+R2<=p1.dist(p2)) || (r-R2>=p1.dist(p2)) || (r2-r>=p1.dist(p2))) return 1;    	return 0;    }            static class Point{    	int x, y;    	    	Point(int x,int y){    		this.x = x; this.y = y;    	}    	    	double dist(Point p) {    		long dx = x-p.x, dy = y-p.y;    		return Math.sqrt(dx*dx + dy*dy);    	}    	    }                        static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
