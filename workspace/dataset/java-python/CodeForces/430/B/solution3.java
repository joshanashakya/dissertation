import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.lang.reflect.Array;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Deque;import java.io.ObjectInputStream.GetField;import java.io.OutputStreamWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Scanner;import java.util.Set;import java.util.StringTokenizer;import java.util.TimeZone;import java.util.TreeMap;import java.text.*; public class Main {	static int n, arr[]; 	public static void main(String[] args) throws IOException { 		FastReader in = new FastReader();		BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));		n = in.nextInt();		arr = new int[n];		int k = in.nextInt(), x = in.nextInt(), cnt = 0, res = 0;		for (int i = 0; i < n; i++)			arr[i] = in.nextInt();		for (int i = 0; i < n; i++) {			if (arr[i] == x)				cnt++;			else				cnt = 0; 			if (cnt == 2) {				res = Math.max(2 + solve(i - 2, i + 1), res);				cnt = 0;			}		}		out.write(res + "\n");		out.close(); 	} 	public static int solve(int i, int j) {		if (!(i >= 0 && j < n) || arr[i] != arr[j])			return 0;		int ans = 0, k, f;		for (k = i; k >= 0; k--)			if (arr[k] == arr[i])				ans++;			else				break; 		for (f = j; f < n; f++)			if (arr[f] == arr[i])				ans++;			else				break; 		if (ans < 3)			return 0; 		return ans + solve(k, f); 	} } class FastReader {	BufferedReader br;	StringTokenizer st; 	public FastReader() {		br = new BufferedReader(new InputStreamReader(System.in)); 	} 	public FastReader(File f) throws FileNotFoundException {		br = new BufferedReader(new FileReader(f));	} 	String next() {		while (st == null || !st.hasMoreElements()) {			try {				st = new StringTokenizer(br.readLine()); 			} catch (IOException e) {				e.printStackTrace();			} 		} 		return st.nextToken(); 	} 	int nextInt() { 		return Integer.parseInt(next());	} 	double nextDouble() { 		return Double.parseDouble(next());	} 	long nextLong() { 		return Long.parseLong(next());	} 	String nextLine() {		String str = "";		try {			str = br.readLine(); 		} catch (IOException e) { 			e.printStackTrace();		}		return str; 	} 	boolean ready() throws IOException {		return br.ready();	}}
