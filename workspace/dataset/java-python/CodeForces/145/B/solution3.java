import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.FilterInputStream;import java.io.BufferedInputStream;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Jenish */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        ScanReader in = new ScanReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BLuckyNumber2 solver = new BLuckyNumber2();        solver.solve(1, in, out);        out.close();    }     static class BLuckyNumber2 {        long f4;        long f7;        long f47;        long f74;         public void solve(int testNumber, ScanReader in, PrintWriter out) {              long a4 = in.scanLong();            long a7 = in.scanLong();            long a47 = in.scanLong();            long a74 = in.scanLong();            {                f4 = a4;                f7 = a7;                f47 = a47;                f74 = a74;            }              StringBuffer sb = new StringBuffer();            StringBuffer sb2 = new StringBuffer();            boolean two = false;              if (Math.abs(a47 - a74) > 1) {                out.println(-1);                return;            }             if (a47 == a74) {                two = true;                while (a47-- > 0) sb.append("47");                sb.append('4');                 while (a74-- > 0) sb2.append("74");                sb2.append("7");              } else if (a47 < a74) {                while (a74-- > 0) sb.append("74");            } else {                while (a47-- > 0) sb.append("47");            }              {                int i4 = -1;                for (int i = sb.length() - 1; i >= 0; i--) if (sb.charAt(i) == '4') i4 = i;                if (i4 == -1) i4 = 0;                  long c4 = a4;                long c7 = a7;                for (int i = 0; i < sb.length(); i++) {                    if (sb.charAt(i) == '4') c4--;                    else c7--;                }                StringBuffer seven = new StringBuffer();                StringBuffer four = new StringBuffer();                  for (int i = 0; i < c4; i++) four.append('4');                for (int i = 0; i < c7; i++) seven.append('7');                 StringBuffer temp = new StringBuffer();                for (int i = 0; i < i4; i++) temp.append(sb.charAt(i));                temp.append(four);                for (int i = i4; i < sb.length(); i++) temp.append(sb.charAt(i));                sb = temp;                  int i7 = -1;                for (int i = 0; i < sb.length(); i++) if (sb.charAt(i) == '7') i7 = i;                if (i7 == -1) i7 = sb.length();                  temp = new StringBuffer();                for (int i = 0; i < i7; i++) temp.append(sb.charAt(i));                temp.append(seven);                for (int i = i7; i < sb.length(); i++) temp.append(sb.charAt(i));                sb = temp;             }              if (two) {                if (check(sb.toString().toCharArray())) {                    out.println(sb.toString());                    return;                }                int i4 = -1;                for (int i = sb2.length() - 1; i >= 0; i--) if (sb2.charAt(i) == '4') i4 = i;                 if (i4 == -1) i4 = 0;                  long c4 = a4;                long c7 = a7;                for (int i = 0; i < sb2.length(); i++) {                    if (sb2.charAt(i) == '4') c4--;                    else c7--;                }                 StringBuffer seven = new StringBuffer();                StringBuffer four = new StringBuffer();                  for (int i = 0; i < c4; i++) four.append('4');                for (int i = 0; i < c7; i++) seven.append('7');                 StringBuffer temp = new StringBuffer();                for (int i = 0; i < i4; i++) temp.append(sb2.charAt(i));                temp.append(four);                for (int i = i4; i < sb2.length(); i++) temp.append(sb2.charAt(i));                sb2 = temp;                  int i7 = -1;                for (int i = 0; i < sb2.length(); i++) if (sb2.charAt(i) == '7') i7 = i;                if (i7 == -1) i7 = sb2.length();                  temp = new StringBuffer();                for (int i = 0; i < i7; i++) temp.append(sb2.charAt(i));                temp.append(seven);                for (int i = i7; i < sb2.length(); i++) temp.append(sb2.charAt(i));                sb2 = temp;                if (check(sb2.toString().toCharArray())) {                    out.println(sb2.toString());                    return;                }             } else {                if (check(sb.toString().toCharArray())) {                    out.println(sb.toString());                    return;                }            }             out.println(-1);          }         boolean check(char arr[]) {            int b4 = 0;            int b7 = 0;            int b47 = 0;            int b74 = 0;             for (int i = 0; i < arr.length; i++) {                if (arr[i] == '4') b4++;                else b7++;                if (i + 1 < arr.length && arr[i] == '4' && arr[i + 1] == '7') b47++;                if (i + 1 < arr.length && arr[i] == '7' && arr[i + 1] == '4') b74++;            }            return (b4 == f4 && f7 == b7 && f47 == b47 && f74 == b74);         }     }     static class ScanReader {        private byte[] buf = new byte[4 * 1024];        private int INDEX;        private BufferedInputStream in;        private int TOTAL;         public ScanReader(InputStream inputStream) {            in = new BufferedInputStream(inputStream);        }         private int scan() {            if (INDEX >= TOTAL) {                INDEX = 0;                try {                    TOTAL = in.read(buf);                } catch (Exception e) {                    e.printStackTrace();                }                if (TOTAL <= 0) return -1;            }            return buf[INDEX++];        }         private boolean isWhiteSpace(int n) {            if (n == ' ' || n == '\n' || n == '\r' || n == '\t' || n == -1) return true;            else return false;        }         public long scanLong() {            long I = 0;            int n = scan();            while (isWhiteSpace(n)) n = scan();            int neg = 1;            if (n == '-') {                neg = -1;                n = scan();            }            while (!isWhiteSpace(n)) {                if (n >= '0' && n <= '9') {                    I *= 10;                    I += n - '0';                    n = scan();                }            }            return neg * I;        }     }} 
