import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.FilterInputStream;import java.io.BufferedInputStream;import java.io.InputStream; /** * @author khokharnikunj8 */ public class Main {    public static void main(String[] args) {        new Thread(null, new Runnable() {            public void run() {                new Main().solve();            }        }, "1", 1 << 26).start();    }     void solve() {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        ScanReader in = new ScanReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BLuckyNumber2 solver = new BLuckyNumber2();        solver.solve(1, in, out);        out.close();    }     static class BLuckyNumber2 {        public void solve(int testNumber, ScanReader in, PrintWriter out) {            int four = in.scanInt();            int seven = in.scanInt();            int fourseven = in.scanInt();            int sevenfour = in.scanInt();            if ((!(fourseven <= Math.min(four, seven) && sevenfour <= Math.min(four, seven))) || Math.abs(fourseven - sevenfour) > 1) {                out.println(-1);                return;            }            int[] sevenCount = new int[four + 1];            for (int j = four - 1; seven > 0 && sevenfour > 0 && j >= 0 && fourseven > 0; sevenfour--, seven--, j--) {                sevenCount[j]++;                if (j != 0) fourseven--;            }            if (sevenfour > 0) {                if (seven > 0) {                    sevenCount[0]++;                    seven--;                    sevenfour--;                } else {                    out.println(-1);                    return;                }            }            if (fourseven > 0) {                if (seven > 0) {                    sevenCount[four]++;                    fourseven--;                    seven--;                } else {                    out.println(-1);                    return;                }            }            if (sevenCount[four] == 0) sevenCount[four - 1] += seven;            else sevenCount[four] += seven;            seven = 0;            if (fourseven != 0 || seven != 0 || sevenfour != 0) throw new RuntimeException();            for (int i = 0; i <= four; i++) {                for (int j = 0; j < sevenCount[i]; j++) out.print(7);                if (i != four) out.print(4);            }          }     }     static class ScanReader {        private byte[] buf = new byte[4 * 1024];        private int index;        private BufferedInputStream in;        private int total;         public ScanReader(InputStream inputStream) {            in = new BufferedInputStream(inputStream);        }         private int scan() {            if (index >= total) {                index = 0;                try {                    total = in.read(buf);                } catch (Exception e) {                    e.printStackTrace();                }                if (total <= 0) return -1;            }            return buf[index++];        }         public int scanInt() {            int integer = 0;            int n = scan();            while (isWhiteSpace(n)) n = scan();            int neg = 1;            if (n == '-') {                neg = -1;                n = scan();            }            while (!isWhiteSpace(n)) {                if (n >= '0' && n <= '9') {                    integer *= 10;                    integer += n - '0';                    n = scan();                }            }            return neg * integer;        }         private boolean isWhiteSpace(int n) {            if (n == ' ' || n == '\n' || n == '\r' || n == '\t' || n == -1) return true;            else return false;        }     }} 
