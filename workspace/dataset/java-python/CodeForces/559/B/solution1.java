import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BEquivalentStrings solver = new BEquivalentStrings();            solver.solve(1, in, out);            out.close();        }    }     static class BEquivalentStrings {        char[] a;        char[] b;        Debug debug = new Debug(true);         public void minimal(char[] s, int l, int r) {            if ((r - l + 1) % 2 == 1) {                return;            }            int m = (l + r) / 2;            minimal(s, l, m);            minimal(s, m + 1, r);            if (CompareUtils.compareArray(s, l, m, s, m + 1, r) > 0) {                for (int i = l; i <= m; i++) {                    SequenceUtils.swap(s, i, i + m + 1 - l);                }            }        }         public void solve(int testNumber, FastInput in, FastOutput out) {            a = in.rs().toCharArray();            b = in.rs().toCharArray();            minimal(a, 0, a.length - 1);            minimal(b, 0, b.length - 1);            debug.debugArray("a", a);            debug.debugArray("b", b);            if (CompareUtils.compareArray(a, 0, a.length - 1, b, 0, b.length - 1) == 0) {                out.println("YES");            } else {                out.println("NO");            }        }     }     static class Debug {        private boolean offline;        private PrintStream out = System.err;         public Debug(boolean enable) {            offline = enable && System.getSecurityManager() == null;        }         public Debug debugArray(String name, char[] matrix) {            if (offline) {                debug(name, String.valueOf(matrix));            }            return this;        }         public Debug debug(String name, String x) {            if (offline) {                out.printf("%s=%s", name, x);                out.println();            }            return this;        }     }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String rs() {            return readString();        }         public String readString(StringBuilder builder) {            skipBlank();             while (next > 32) {                builder.append((char) next);                next = read();            }             return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }     static class CompareUtils {        private CompareUtils() {        }         public static int compareArray(char[] a, int al, int ar, char[] b, int bl, int br) {            for (int i = al, j = bl; i <= ar && j <= br; i++, j++) {                if (a[i] != b[j]) {                    return a[i] - b[j];                }            }            return (ar - al) - (br - bl);        }     }     static class SequenceUtils {        public static void swap(char[] data, int i, int j) {            char tmp = data[i];            data[i] = data[j];            data[j] = tmp;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
