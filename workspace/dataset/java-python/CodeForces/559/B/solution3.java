import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.Serializable;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BEquivalentStrings solver = new BEquivalentStrings();            solver.solve(1, in, out);            out.close();        }    }     static class BEquivalentStrings {        static char[] a;        static char[] b;         public static boolean equal(int l, int r, int L, int R) {            if ((r - l + 1) % 2 == 0) {                int m1 = (l + r) / 2;                int m2 = (L + R) / 2;                Cond sol = new OrCond(                        new AndCand(new EqualCand(l, m1, L, m2),                                new EqualCand(m1 + 1, r, m2 + 1, R)),                        new AndCand(new EqualCand(m1 + 1, r, L, m2),                                new EqualCand(l, m1, m2 + 1, R))                );                return sol.apply();            } else {                return SequenceUtils.equal(a, l, r, b, L, R);            }        }         public void solve(int testNumber, FastInput in, FastOutput out) {            a = in.rs().toCharArray();            b = in.rs().toCharArray();            out.println(equal(0, a.length - 1,                    0, b.length - 1) ? "YES" : "NO");        }     }     static strictfp class MersenneTwisterFast implements Serializable, Cloneable {        private static final int N = 624;        private static final int M = 397;        private static final int MATRIX_A = 0x9908b0df;        private static final int UPPER_MASK = 0x80000000;        private static final int LOWER_MASK = 0x7fffffff;        private static final int TEMPERING_MASK_B = 0x9d2c5680;        private static final int TEMPERING_MASK_C = 0xefc60000;        private int[] mt;        private int mti;        private int[] mag01;        private boolean __haveNextNextGaussian;         public Object clone() {            try {                MersenneTwisterFast f = (MersenneTwisterFast) (super.clone());                f.mt = (int[]) (mt.clone());                f.mag01 = (int[]) (mag01.clone());                return f;            } catch (CloneNotSupportedException e) {                throw new InternalError();            } // should never happen        }         public MersenneTwisterFast() {            this(System.currentTimeMillis());        }         public MersenneTwisterFast(long seed) {            setSeed(seed);        }         public MersenneTwisterFast(int[] array) {            setSeed(array);        }         public void setSeed(long seed) {            // Due to a bug in java.util.Random clear up to 1.2, we're            // doing our own Gaussian variable.            __haveNextNextGaussian = false;             mt = new int[N];             mag01 = new int[2];            mag01[0] = 0x0;            mag01[1] = MATRIX_A;             mt[0] = (int) (seed & 0xffffffff);            for (mti = 1; mti < N; mti++) {                mt[mti] =                        (1812433253 * (mt[mti - 1] ^ (mt[mti - 1] >>> 30)) + mti);                /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */                /* In the previous versions, MSBs of the seed affect   */                /* only MSBs of the array mt[].                        */                /* 2002/01/09 modified by Makoto Matsumoto             */                // mt[mti] &= 0xffffffff;                /* for >32 bit machines */            }        }         public void setSeed(int[] array) {            if (array.length == 0)                throw new IllegalArgumentException("Array length must be greater than zero");            int i, j, k;            setSeed(19650218);            i = 1;            j = 0;            k = (N > array.length ? N : array.length);            for (; k != 0; k--) {                mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >>> 30)) * 1664525)) + array[j] + j; /* non linear */                // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */                i++;                j++;                if (i >= N) {                    mt[0] = mt[N - 1];                    i = 1;                }                if (j >= array.length) j = 0;            }            for (k = N - 1; k != 0; k--) {                mt[i] = (mt[i] ^ ((mt[i - 1] ^ (mt[i - 1] >>> 30)) * 1566083941)) - i; /* non linear */                // mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */                i++;                if (i >= N) {                    mt[0] = mt[N - 1];                    i = 1;                }            }            mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */        }         public int nextInt(int n) {            if (n <= 0)                throw new IllegalArgumentException("n must be positive, got: " + n);             if ((n & -n) == n)  // i.e., n is a power of 2            {                int y;                 if (mti >= N)   // generate N words at one time                {                    int kk;                    final int[] mt = this.mt; // locals are slightly faster                    final int[] mag01 = this.mag01; // locals are slightly faster                     for (kk = 0; kk < N - M; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    for (; kk < N - 1; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);                    mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];                     mti = 0;                }                 y = mt[mti++];                y ^= y >>> 11;                          // TEMPERING_SHIFT_U(y)                y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)                y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)                y ^= (y >>> 18);                        // TEMPERING_SHIFT_L(y)                 return (int) ((n * (long) (y >>> 1)) >> 31);            }             int bits, val;            do {                int y;                 if (mti >= N)   // generate N words at one time                {                    int kk;                    final int[] mt = this.mt; // locals are slightly faster                    final int[] mag01 = this.mag01; // locals are slightly faster                     for (kk = 0; kk < N - M; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    for (; kk < N - 1; kk++) {                        y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);                        mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];                    }                    y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);                    mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];                     mti = 0;                }                 y = mt[mti++];                y ^= y >>> 11;                          // TEMPERING_SHIFT_U(y)                y ^= (y << 7) & TEMPERING_MASK_B;       // TEMPERING_SHIFT_S(y)                y ^= (y << 15) & TEMPERING_MASK_C;      // TEMPERING_SHIFT_T(y)                y ^= (y >>> 18);                        // TEMPERING_SHIFT_L(y)                 bits = (y >>> 1);                val = bits % n;            } while (bits - val + (n - 1) < 0);            return val;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class AndCand implements Cond {        Cond a;        Cond b;         public AndCand(Cond a, Cond b) {            if (RandomWrapper.INSTANCE.nextInt(0, 1) == 0) {                Cond tmp = a;                a = b;                b = tmp;            }            this.a = a;            this.b = b;        }         public boolean apply() {            return a.apply() && b.apply();        }     }     static interface Cond {        boolean apply();     }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String rs() {            return readString();        }         public String readString(StringBuilder builder) {            skipBlank();             while (next > 32) {                builder.append((char) next);                next = read();            }             return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }     }     static class OrCond implements Cond {        Cond a;        Cond b;         public OrCond(Cond a, Cond b) {            if (RandomWrapper.INSTANCE.nextInt(0, 1) == 0) {                Cond tmp = a;                a = b;                b = tmp;            }            this.a = a;            this.b = b;        }         public boolean apply() {            return a.apply() || b.apply();        }     }     static class EqualCand implements Cond {        int l;        int r;        int L;        int R;         public EqualCand(int l, int r, int l1, int r1) {            this.l = l;            this.r = r;            L = l1;            R = r1;        }         public boolean apply() {            return BEquivalentStrings.equal(l, r, L, R);        }     }     static class SequenceUtils {        public static boolean equal(char[] a, int al, int ar, char[] b, int bl, int br) {            if ((ar - al) != (br - bl)) {                return false;            }            for (int i = al, j = bl; i <= ar; i++, j++) {                if (a[i] != b[j]) {                    return false;                }            }            return true;        }     }     static class RandomWrapper {        private MersenneTwisterFast random;        public static final RandomWrapper INSTANCE = new RandomWrapper();         public RandomWrapper() {            this(new MersenneTwisterFast());        }         public RandomWrapper(MersenneTwisterFast random) {            this.random = random;        }         public RandomWrapper(long seed) {            this(new MersenneTwisterFast(seed));        }         public int nextInt(int l, int r) {            return random.nextInt(r - l + 1) + l;        }     }} 
