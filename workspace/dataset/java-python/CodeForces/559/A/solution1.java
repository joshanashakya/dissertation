import java.io.*;import java.util.*;import java.math.*; public class Solution {    static int recmin;    public static void main(String[] args) throws IOException {        FastScanner fs=new FastScanner();        PrintWriter out = new PrintWriter(System.out);         // int T=fs.nextInt();        // int T = 1;        // for (int tt=0; tt<T; tt++) {        // }        int x = fs.nextInt();        int y = fs.nextInt();        int z = fs.nextInt();        int u = fs.nextInt();        int v = fs.nextInt();        int w = fs.nextInt();         long ans=0;        long adder = 2*w+1;        for (int i=0; i<Math.min(x,v); i++) {            ans+=adder;            adder+=2;        }        adder-=1;        for (int i=0; i<Math.max(x,v)-Math.min(x,v); i++) {            ans+=adder;        }        adder-=1;         for (int i=0; i<Math.min(y,u); i++) {            ans+=adder;            adder-=2;        }        out.println(ans);                 out.close();    }      static boolean isPrime(int n)     {         for (int i = 2; i * i <= n; i++) {             if (n % i == 0) {                 return false;             }         }         return true;     }    static final Random random=new Random();        static void ruffleSort(int[] a) {        int n=a.length;//shuffle, then sort         for (int i=0; i<n; i++) {            int oi=random.nextInt(n), temp=a[oi];            a[oi]=a[i]; a[i]=temp;        }        Arrays.sort(a);    }        static class FastScanner {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer("");        String next() {            while (!st.hasMoreTokens())                try {                    st=new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            return st.nextToken();        }                int nextInt() {            return Integer.parseInt(next());        }        int[] readArray(int n) {            int[] a=new int[n];            for (int i=0; i<n; i++) a[i]=nextInt();            return a;        }        long nextLong() {            return Long.parseLong(next());        }    } }
