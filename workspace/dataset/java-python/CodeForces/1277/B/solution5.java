import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;import java.util.Scanner;import java.util.*;import java.util.stream.Collectors;Â public class absolute {	static int[] ar;	static int total;	static void generatePrimes()	{		ar = new int[total+2];		Arrays.fill(ar, 1);		ar[1]=1;		ar[2]=1;		for(int i=2;i<=Math.sqrt(total);i++)		{			if(ar[i]==1)			{				for(int j=i*i;j<=total;j+=i)ar[j]=2;			}		}			}	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner sc=  new Scanner(System.in);		int T=sc.nextInt();		while(T-->0)		{		int n = sc.nextInt();		HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();		for(int i=0;i<n;i++)		{			int num = sc.nextInt();			if(map.containsKey(num))map.replace(num, map.get(num)+1);			else if(num%2==0)map.put(num, 1);		}				Map<Integer, Integer> sorted= map.entrySet().stream()                .sorted(Map.Entry.comparingByKey())                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,                 (oldValue, newValue) -> oldValue, LinkedHashMap::new));		//System.out.println(sorted.toString());		List<Integer> keys = new ArrayList<Integer>(sorted.keySet());		int moves=0,i= keys.size()-1;		while(i>=0)		{			int key = keys.get(i);			int curv=sorted.get(key);			while(key%2==0)			{				if(sorted.containsKey(key/2)) {sorted.replace(key/2, sorted.get(key/2)+curv);moves++;break;}				key /= 2;				moves++;				//System.out.println(sorted.toString()+" "+moves+" "+key);			}			//System.out.println(sorted.toString()+" "+moves);			i--;		}						System.out.println(moves);		}						}}
