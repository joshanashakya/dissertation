import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer; public class CF1174_D2_B {    static boolean change = true;     public static void main(String[] args) {        FastScanner scanner = new FastScanner();        int n = scanner.nextInt();        int[] arr = scanner.nextArray(n);        boolean odd = false;        boolean even = false;        for (int i = 0; i < n; i++) {            if (arr[i] % 2 == 0) {                even = true;            } else {                odd = true;            }        }        if (odd && even)            sort(arr);        for (int i = 0; i < n; i++) {            System.out.print(arr[i] + " ");        }        System.out.println();    }      private static void sort(int[] arr) {        int[] aux = new int[arr.length];        sortHelper(arr, aux, 0, arr.length - 1);    }     private static void sortHelper(int[] a, int[] aux, int lo, int hi) {        if (hi <= lo) return;        int mid = lo + (hi - lo) / 2;        sortHelper(a, aux, lo, mid);        sortHelper(a, aux, mid + 1, hi);        merge(a, aux, lo, mid, hi);    }     private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {        for (int k = lo; k <= hi; k++)            aux[k] = a[k];        int i = lo, j = mid + 1;        for (int k = lo; k <= hi; k++) {            if (i > mid) {                a[k] = aux[j++];            } else if (j > hi) {                a[k] = aux[i++];            } else if (aux[j] < aux[i]) {                a[k] = aux[j++];            } else {                a[k] = aux[i++];            }        }    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }         int[] nextArray(int n) {            int[] arr = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }         Integer[] nextArray(int n, boolean object) {            Integer[] arr = new Integer[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }    }}
