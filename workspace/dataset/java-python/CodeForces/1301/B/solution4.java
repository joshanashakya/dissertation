//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class B {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=sc.nextInt();		while(test-->0)		{			int n=sc.nextInt();			int arr[]=new int[n];			for(int i=0;i<n;i++) {				arr[i]=sc.nextInt();			}						ArrayList<Integer> li=new ArrayList<Integer>();			for(int i=0;i<n;i++) {				if(arr[i] != -1) {					if(i>0 && arr[i-1] == -1) {						li.add(arr[i]);						continue;					}					if(i<n-1 && arr[i+1] == -1) {						li.add(arr[i]);						continue;					}				}			}			Collections.sort(li);			if(li.size() == 0) {				ans.append(0+" "+0+"\n");				continue;			}			int m=0;			int res =( li.get(0) + li.get(li.size()-1) )/(2);			int k=res;						for(int i=0;i<n-1;i++) {				if(arr[i] == -1) arr[i]=k;				if(arr[i+1] == -1) arr[i+1]=k;				int diff =Math.abs(arr[i]-arr[i+1]);				m =Math.max(m, diff);			}			ans.append(m+" "+k+"\n");		}			    System.out.print(ans);	}         static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	} } 
