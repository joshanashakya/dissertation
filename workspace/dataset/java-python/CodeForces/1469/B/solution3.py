import osimport

sysfrom
io
import BytesIO, IOBase  

def main():    pass

    # region fastio BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0     def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") # endregion if __name__ == "__main__":    main() M=0def solve(n,m,l1,l2):    if(n==0 and m==0):        return 0    if(n>0 and m>0):            temp=max(l1[n-1]+solve(n-1,m,l1,l2),l2[m-1]+solve(n,m-1,l1,l2))    if(n==0 and m>0):        temp=l2[m-1]+solve(n,m-1,l1,l2)    if(m==0 and n>0):        temp=l1[n-1]+solve(n-1,m,l1,l2)    M=max(M,temp)        return temp def solve1(n,m,l1,l2):    ans=-float("inf")    t=[[0 for j in range(m+1)] for i in range(n+1)]    for i in range(n+1):        for j in range(m+1):            if(i==0 and j==0):                t[i][j]=0            elif(i>0 and j>0):                t[i][j]=max(l1[i-1]+t[i-1][j],l2[j-1]+t[i][j-1])            elif(i==0 and j>0):                t[i][j]=l2[j-1]+t[i][j-1]            elif(j==0 and i>0):                t[i][j]=l1[i-1]+t[i-1][j]            ans=max(ans,t[i][j])           return ans         for testcase in range(int(input())):    n=int(input())    l1=[int(x) for x in input().split()]        m=int(input())    l2=[int(x) for x in input().split()]        print(solve1(n,m,l1,l2))    M=0
