import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int k = in.nextInt();            int[] b = new int[n];            for (int i = 0; i < n; i++) {                b[i] = in.nextInt();            }            int[] ans = new int[n];            boolean[] used = new boolean[n];            for (int i = 0; i < n; i++) {                int next = 0;                for (; next <= n && (b[next] != 0 || used[next]); next++) ;                for (int j = 0; j <= next - k; j++) {                    b[j]--;                }                used[next] = true;                ans[i] = next + 1;            }            for (int i = 0; i < n; i++) {                out.print(ans[i] + " ");            }        }     }     static class InputReader {        private BufferedReader reader;        private StringTokenizer stt;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));        }         public String nextLine() {            try {                return reader.readLine();            } catch (IOException e) {                return null;            }        }         public String next() {            while (stt == null || !stt.hasMoreTokens()) {                stt = new StringTokenizer(nextLine());            }            return stt.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
