import sysfrom

math
import log2, floor, ceil, sqrt, gcdimport

bisect  # from collections import dequesys.setrecursionlimit(10**5) Ri = lambda : [int(x) for x in sys.stdin.readline().split()]ri = lambda : sys.stdin.readline().strip() def input(): return sys.stdin.readline().strip()def list2d(a, b, c): return [[c] * b for i in range(a)]def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]def list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]def ceil(x, y=1): return int(-(-x // y))def INT(): return int(input())def MAP(): return map(int, input().split())def LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]def Yes(): print('Yes')def No(): print('No')def YES(): print('YES')def NO(): print('NO')INF = 10 ** 18MOD =  1000000007 # for _ in range(int(ri())):n = int(ri())st = ri()arr = [0]*(n)ind = []cnt = 1arr[0] = 1cnt=0for i in range(len(st)):    if st[i] == 'L':        if arr[i] == 1:            arr[i]+=1        arr[i+1] = 1    elif st[i] == 'R':        arr[i+1] = arr[i]+1     else:        arr[i+1] = arr[i]# minn = min(arr)# if minn <= 0:#     arr =  [ arr[i]+abs(minn)+1 for i in range(len(arr))]# for i in ind:for i in range(n-2,-1,-1):    if st[i] == '=':        if arr[i] != arr[i+1]:            arr[i] = arr[i+1]    elif st[i] == 'L':        if not arr[i] > arr[i+1]:            arr[i] = arr[i+1]+1    else:        if not arr[i] < arr[i+1]:            arr[i+1] = arr[i]+1print(*arr)
