import java.io.*;import java.math.BigInteger;import java.util.*;   public class Main {	 	public static class FastReader {		BufferedReader br;		StringTokenizer root;		 		public FastReader() {			br = new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (root == null || !root.hasMoreTokens()) {				try {					root = new StringTokenizer(br.readLine());				} catch (Exception addd) {					addd.printStackTrace();				}			}			return root.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		double nextDouble() {			return Double.parseDouble(next());		} 		long nextLong() {			return Long.parseLong(next());		} 		String nextLine() {			String str = "";			try {				str = br.readLine();			} catch (Exception addd) {				addd.printStackTrace();			}			return str;		}	}		public static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));		public static FastReader sc = new FastReader(); 	static int mod = (int) (1e9+7),MAX=(int) (2e5);    static List<Integer>[] edges;    static int[] in;    	public static void main(String[] args) throws IOException {				int n = sc.nextInt();		int[] ans = new int[n+1];		ans[0] = 1;		char[] s = sc.next().toCharArray();		for (int i=0;i<n;i++) {		    int m1=0, j=i;		    while (j<n-1 && s[j]!='R') {		          if (s[j] == 'L') m1++;		          j++;		    }		    int m2=0; j=i-1;		    while (j>=0 && s[j]!='L') { 		          if (s[j] == 'R') m2++;		          j--;		    }		    ans[i] = 1 + Math.max(m1,m2);		}		for(int i=0;i<n;++i) out.print(ans[i]+" ");		out.close();	}		 }   
