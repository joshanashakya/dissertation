import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;// import java.math.BigInteger;import java.util.*; public class Solution {    public static void main(String[] args) {        int T = 1;    TEST:        while (T-- > 0) {            int n = in.nextInt(), m = in.nextInt();            long[] a = in.readLongArray(n);            long[] b = in.readLongArray(m);            sort(a);            long t = 0;            for (int i = 1; i < n; i++) {                t = gcd(a[i]-a[i-1], t);            }            for (int j = 0; j < m; j++) {                out.print(gcd(a[0] + b[j], t) + " ");            }            out.println();        }        out.flush();    }        // Random Shuffle guarantees O(nlogn) WCTC for Quick Sort.    static void sort(long[] arr) {        Random rnd = new Random();        for (int i = arr.length - 1; i > 0; i--) {            swap(arr, i, rnd.nextInt(i));        }        // Dual-Pivot Quicksort Implementation        Arrays.sort(arr);    }     // Swap Elements in an Array    static void swap(long[] arr, int i, int j) {        arr[i] = arr[i] ^ arr[j];        arr[j] = arr[i] ^ arr[j];        arr[i] = arr[i] ^ arr[j];    }        // Iterative computation of gcd(<long> x, <long> y).    static long gcd(long x, long y) {        while (x > 0) {            long temp = x;            x = y%x;            y = temp;        }        return y;    }        // Handle I/O    static FastScanner in = new FastScanner();    static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));    static class FastScanner {        BufferedReader br;        StringTokenizer st;        public FastScanner() {            br = new BufferedReader(new InputStreamReader(System.in));            st = null;        }         String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] readIntArray(int size) {            int[] arr = new int[size];            for (int i = 0; i < size; i++) {                arr[i] = nextInt();            }            return arr;        }         long nextLong() {            return Long.parseLong(next());        }         long[] readLongArray(int size) {            long[] arr = new long[size];            for (int i = 0; i < size; i++) {                arr[i] = nextLong();            }            return arr;        }    }}
