#------------------------template--------------------------#import osimport sysfrom math import *from collections import *# from fractions import *# from heapq import*from bisect import *from io import BytesIO, IOBasedef vsInput():    sys.stdin = open('input.txt', 'r')    sys.stdout = open('output.txt', 'w')BUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")ALPHA='abcdefghijklmnopqrstuvwxyz'M=998244353EPS=1e-6def Ceil(a,b): return a//b+int(a%b>0)def value():return tuple(map(int,input().split()))def array():return [int(i) for i in input().split()]def Int():return int(input())def Str():return input()def arrayS():return [i for i in input().split()]  #-------------------------code---------------------------## vsInput()    def dif(a,b):    if(a > 0 and b < 0): return True    if(b > 0 and a < 0): return True    return False a,b = value()s = input()C = Counter(s) X = C['R'] - C['L']Y = C['U'] - C['D'] x = 0y = 0 ans = "No"if((x,y) == (a,b)): ans = "Yes"  for i in s:     if(i == 'R'): x += 1    elif(i == 'L'): x -= 1    elif(i == 'U'): y += 1    else: y -= 1      need_x = a - x    need_y = b - y    ok = True    if((x,y) == (a,b)): ans = "Yes"     if(need_x == 0 or X == 0):         if(need_x != X): ok = False        else: flag1 = -1    elif( dif(X,need_x) or abs(need_x)%abs(X)):         ok = False    else:        flag1 = abs(need_x)//abs(X)     if(need_y == 0 or Y == 0):         if(need_y != Y): ok = False        else: flag2 = -1    elif( dif(Y,need_y) or abs(need_y)%abs(Y)):         ok = False    else:        flag2 = abs(need_y)//abs(Y)     if(ok and (flag2 == flag1 or flag1 == -1 or flag2 == -1)): ans = "Yes"    # print(X,need_x,Y,need_y,ans)    # print(x,y,ok)     print(ans)
