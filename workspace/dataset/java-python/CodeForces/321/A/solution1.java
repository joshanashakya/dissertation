import java.util.*; import java.io.*; public class Main {    public static void main(String[] args) throws IOException {        FastScanner in = new FastScanner(System.in);        PrintWriter out = new PrintWriter(System.out);        new Main().run(in, out);        out.close();    }     // U D L R    int[] dx = {0, 0, -1, 1};    int[] dy = {1, -1, 0, 0};    int U = 0, D = 1, L = 2, R = 3;     void run(FastScanner in, PrintWriter out) {         long tx = in.nextInt();        long ty = in.nextInt();         char[] ca = in.next().toCharArray();        int[] ops = new int[ca.length];        for (int i = 0; i < ca.length; i++) {            if (ca[i] == 'U') ops[i] = U;            else if (ca[i] == 'D') ops[i] = D;            else if (ca[i] == 'L') ops[i] = L;            else ops[i] = R;        }         long x = 0, y = 0;         for (int op : ops) {            if (x == tx && y == ty) {                out.println("Yes");                return;            }            x += dx[op];            y += dy[op];        }         if (x == tx && y == ty) {            out.println("Yes");            return;        }         // does there exist some n such that        // (nx + op1, ny + op1) = (tx, ty)        boolean possible = false;        for (int i = 0; i < ops.length; i++) {            tx -= dx[ops[i]];            ty -= dy[ops[i]];             if (x == 0 && y == 0) {                possible = tx == 0 && ty == 0;            } else if (x == 0) {                possible = (tx == 0 && ty % y == 0 && ty/y > 0);            } else if (y == 0) {                possible = (ty == 0 && tx % x == 0 && tx/x > 0);            } else if (tx%x == 0 && ty%y == 0) {                if (tx/x == ty/y && tx/x >= 0) possible = true;            }            if (possible) break;        }         out.println(possible ? "Yes" : "No");    }     static class FastScanner {        BufferedReader br;        StringTokenizer st;         public FastScanner(InputStream in) {            br = new BufferedReader(new InputStreamReader(in));            st = null;        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
