import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main{	public static void main(String[] args) {		new Thread(null, new Runnable() {			public void run() {                solve();            }        }, "1", 1 << 26).start();	}	static void solve () {		FastReader fr =new FastReader();	PrintWriter op =new PrintWriter(System.out);  		int n =fr.nextInt() ,m =fr.nextInt() ,ceil[][] =new int[m][2] ,i ,j ,k ,dm ,ans =0 ; 		String s ; 		ArrayList<Integer> atk =new ArrayList<>() ,def =new ArrayList<>() ;  		for (i =0 ; i<n ; ++i) { 			s =fr.next() ;	j =fr.nextInt() ;  			if (s.charAt(0)=='A')	atk.add(j) ; 			else 	def.add(j) ; 		}  		for (i =0 ; i<m ; ++i)	ceil[i][0] =fr.nextInt() ;  		sort2d (ceil,0,m-1) ;	Collections.sort(atk) ;	Collections.sort(def) ;  		for (i =0 ; i<Math.min(m,atk.size()) ; ++i) { 			dm =0 ; 			for (j =i ; j>-1 ; --j) { 				for (k =m-1-i ; k<m ; ++k) { 					if (atk.get(j) <= ceil[k][0] && ceil[k][1]==0) { 						dm += (ceil[k][0]-atk.get(j)) ;	ceil[k][1] =-1 ;	break; 					} 				} 				if (k==m)	break; 			} 			for (k =m-1-i ; k<m ; ++k)	ceil[k][1] =0 ;  			if (j!=-1)	break;	ans =Math.max(ans,dm) ; 		}  		if (n<=m) { 			dm =0 ;  			for (i =def.size()-1 ; i>-1 ; --i) { 				for (j =0 ; j<m ; ++j) { 					if (def.get(i)<ceil[j][0] && ceil[j][1]==0) { 						ceil[j][1] =-1 ;	break; 					} 				} 				if (j==m)	break; 			} 			if (i==-1) { 				for (i =atk.size()-1 ; i>-1 ; --i) { 					for (j =0 ; j<m ; ++j) { 						if (atk.get(i)<=ceil[j][0] && ceil[j][1]==0) { 							dm += (ceil[j][0]-atk.get(i)) ;	ceil[j][1] =-1 ;	break; 						} 					} 					if (j==m)	break; 				} 				if (i==-1) {	 				for (j =0 ; j<m ; ++j) {	 					if (ceil[j][1]==0)	dm += ceil[j][0] ;	 				}	 				ans =Math.max(ans , dm) ;	 			} 			} 			 		}		op.println(ans) ;	op.flush();	op.close();	}	public static void sort2d(int[][] arr , int l , int u)	{		int m ; 		if(l < u){			m =(l + u)/2 ; 			sort2d(arr , l , m);	sort2d(arr , m + 1 , u); 			merge(arr , l , m , u);		}	} 	public static void merge(int[][]arr , int l , int m , int u)	{		int[][] low = new int[m - l + 1][2]; 		int[][] upr = new int[u - m][2]; 		int i ,j =0 ,k =0 ; 		for(i =l;i<=m;i++){			low[i - l][0] =arr[i][0];			low[i - l][1] =arr[i][1];		} 		for(i =m + 1;i<=u;i++){			upr[i - m - 1][0] =arr[i][0];			upr[i - m - 1][1] =arr[i][1];		} 		i =l; 		while((j < low.length) && (k < upr.length))		{			if(low[j][0] < upr[k][0])			{				arr[i][0] =low[j][0];				arr[i++][1] =low[j++][1];			}			else			{				if(low[j][0] > upr[k][0])				{					arr[i][0] =upr[k][0];					arr[i++][1] =upr[k++][1];				}				else				{					if(low[j][1] < upr[k][1])					{						arr[i][0] =low[j][0];						arr[i++][1] =low[j++][1];					}					else					{						arr[i][0] =upr[k][0];						arr[i++][1] =upr[k++][1];					}				}			}		} 		while(j < low.length)		{			arr[i][0] =low[j][0];			arr[i++][1] =low[j++][1];		} 		while(k < upr.length)		{			arr[i][0] =upr[k][0];			arr[i++][1] =upr[k++][1];		}	}	static class FastReader {		BufferedReader br;		StringTokenizer st; 		public FastReader() {			br =new BufferedReader(new InputStreamReader(System.in));		} 		String next() {			while (st==null || (!st.hasMoreElements())) 			{				try				{					st =new StringTokenizer(br.readLine());				}				catch(IOException e)				{					e.printStackTrace();				}							}			return st.nextToken();		} 		String nextLine() {			String str =""; 			try			{				str =br.readLine();			}			catch(IOException e)			{				e.printStackTrace();			} 			return str;		} 		int nextInt() {			return Integer.parseInt(next());		} 		long nextLong() {			return Long.parseLong(next()) ;		}	}}
