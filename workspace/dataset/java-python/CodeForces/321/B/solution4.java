import java.util.*;import java.io.*; public class Main {	static int n, m, atkn, defn, memo[][][][], INF = (int) 1e9;	static ArrayList<Integer> arr, atk, def; 	public static void main(String[] args) throws IOException {		Scanner sc = new Scanner(System.in);		PrintWriter out = new PrintWriter(System.out);		n = sc.nextInt();		m = sc.nextInt();		arr = new ArrayList<Integer>();		atk = new ArrayList<Integer>();		def = new ArrayList<Integer>();		for (int i = 0; i < n; i++) {			String s = sc.next();			if (s.equals("ATK"))				atk.add(sc.nextInt());			else				def.add(sc.nextInt());		}		for (int i = 0; i < m; i++)			arr.add(sc.nextInt());		atkn = atk.size();		defn = def.size();		Collections.sort(arr);		Collections.sort(atk);		Collections.sort(def);		memo = new int[m][atkn + 1][defn + 1][2];		for (int i = 0; i < m; i++)			for (int j = 0; j <= atkn; j++)				for (int k = 0; k <= defn; k++)					memo[i][j][k][0] = memo[i][j][k][1] = -1;		out.println(dp(0, 0, 0, 0));		out.close();	} 	private static int dp(int i, int j, int k, int allKilled) {		if (i == m) {			if (allKilled == 0)				return 0;			else				return ((j == atkn && k == defn) ? 0 : -INF);		}		if (memo[i][j][k][allKilled] != -1)			return memo[i][j][k][allKilled];		int ans = -INF;		if (j < atkn && arr.get(i) >= atk.get(j))			ans = Math.max(ans, arr.get(i) - atk.get(j) + dp(i + 1, j + 1, k, allKilled));		if (k < defn && arr.get(i) > def.get(k))			ans = Math.max(ans, dp(i + 1, j, k + 1, allKilled));		ans = Math.max(ans, arr.get(i) + dp(i + 1, j, k, 1)); // direct attack 		ans = Math.max(ans, dp(i + 1, j, k, allKilled)); // don't attack //		System.out.println(i + " " + j + " " + k + " " + allKilled + " " + ans);		return memo[i][j][k][allKilled] = ans;	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream s) {			br = new BufferedReader(new InputStreamReader(s));		} 		public Scanner(String s) throws FileNotFoundException {			br = new BufferedReader(new FileReader(s));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public int[] nextIntArray(int n) throws IOException {			int[] ans = new int[n];			for (int i = 0; i < n; i++)				ans[i] = nextInt();			return ans;		} 		public long nextLong() throws IOException {			return Long.parseLong(next());		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public boolean ready() throws IOException {			return br.ready();		} 	}}
