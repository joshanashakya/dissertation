import java.io.*;import java.lang.reflect.Array;import java.math.*;import java.text.DecimalFormat;import java.util.*;    public class Main {    private static long a,b,ans = Long.MIN_VALUE;    private static StringBuilder out;     private static long getMax(long x,int ctr) {        if (ctr > x) return -(1L << 60);        long y = x - ctr + 1;        long ret = y*y + ctr - 1;        return ret;    }     private static long getMin(long x,int ctr) {        long v = x/ctr,r = x%ctr;        long ret = (v+1)*(v+1)*r + (ctr - r)*v*v;        return ret;    }     private static void solve(){        out = new StringBuilder();        if (a == 0) {            ans = -b*b;            for (int i = 0;i < b;i++)                out.append('x');            return;        }         long tmp = 0;        int tcnt = 0;        for (int cnt = 1;cnt <= a;cnt++) {            tmp = getMax(a,cnt) - getMin(b,cnt + 1);            if (tmp > ans) {                ans = tmp;                tcnt = cnt;            }        }          long v = b/(tcnt + 1),r = b%(tcnt + 1);        for (int i = 0;i < tcnt;i++) {            for (int j = 0;j < v;j++)                out.append('x');            if (r > 0) {                out.append('x');                r--;            }            int y = 1;            if (i == 0) y = (int)(a - tcnt + 1);            for (int j = 0;j < y;j++)                out.append('o');        }        for (int j = 0;j < v;j++)            out.append('x');        if (r > 0) {            out.append('x');            r--;        }    }    public static void main(String[] args) throws Exception {        IO io = new IO(null,null);        a = io.getNextInt();        b = io.getNextInt();        solve();        io.println(ans);        io.println(out);        io.close();    }}   class IO{    private BufferedReader br;    private StringTokenizer st;    private PrintWriter writer;    private String inputFile,outputFile;     public boolean hasMore() throws IOException{        if(st != null && st.hasMoreTokens()) return true;        if(br != null && br.ready()) return true;        return false;    }     public String getNext() throws FileNotFoundException, IOException{        while(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());        return st.nextToken();    }     public String getNextLine() throws FileNotFoundException, IOException{        return br.readLine().trim();    }     public int getNextInt() throws FileNotFoundException, IOException{        return Integer.parseInt(getNext());    }    public long getNextLong() throws FileNotFoundException, IOException{        return Long.parseLong(getNext());    }     public void print(double x,int num_digits) throws  IOException{        writer.printf("%." + num_digits + "f" ,x);    }    public void println(double x,int num_digits) throws  IOException{        writer.printf("%." + num_digits + "f\n" ,x);    }    public void print(Object o) throws  IOException{        writer.print(o.toString());    }     public void println(Object o) throws  IOException{        writer.println(o.toString());    }    public IO(String x,String y) throws FileNotFoundException, IOException{        inputFile = x;        outputFile = y;        if(x != null) br = new BufferedReader(new FileReader(inputFile));        else br = new BufferedReader(new InputStreamReader(System.in));        if(y != null) writer = new PrintWriter(new BufferedWriter(new FileWriter(outputFile)));        else writer = new PrintWriter(new OutputStreamWriter(System.out));    }     protected void close() throws IOException{        br.close();        writer.close();    }    public void outputArr(Object [] A) throws IOException{        int L = A.length;        for (int i = 0;i < L;i++) {            if(i > 0) writer.print(" ");            writer.print(A[i]);        }        writer.print("\n");    }}
