import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int a = in.nextInt();            int b = in.nextInt();            int n = a + b;            if (a == 0) {                char[] ansStr = new char[n];                for (int i = 0; i < n; i++) {                    ansStr[i] = 'x';                }                out.println(-((long) b * b));                out.println(ansStr);                return;            }            if (b == 0) {                char[] ansStr = new char[n];                for (int i = 0; i < n; i++) {                    ansStr[i] = 'o';                }                out.println((long) a * a);                out.println(ansStr);                return;            }            long ans = Long.MIN_VALUE;            int maxP = Math.min(a, b);            int ap = 0, bp = 0;            for (int i = 1; i <= maxP; i++) {                long cur = getMax(a, i) - getMin(b, i + 1);                if (cur > ans) {                    ans = cur;                    ap = i;                    bp = i + 1;                }                cur = getMax(a, i) - getMin(b, i);                if (cur > ans) {                    ans = cur;                    ap = i;                    bp = i;                }            }            out.println(ans);            out.println(getAns(a, b, ap, bp));        }         long getMin(int q, int p) {            if (p > q) {                return Long.MAX_VALUE / 10;            }            long minPor = q / p;            long rem = q % p;            return (minPor + 1) * (minPor + 1) * rem + (p - rem) * minPor * minPor;        }         long getMax(int q, int p) {            if (p > q) {                return -Long.MAX_VALUE / 5;            }            long maxPor = q - p + 1;            return p - 1 + maxPor * maxPor;        }         char[] getAns(int a, int b, int ap, int bp) {            int n = a + b;            char[] ansStr = new char[n];            int ind = 0;            boolean xSub = true;            int xSize = b / bp;            int xRem = b % bp;            int oSize = a - ap + 1;            while (ind < n) {                if (xSub) {                    for (int i = 0; i < xSize && ind < n; i++) {                        ansStr[ind++] = 'x';                    }                    if (xRem > 0) {                        ansStr[ind++] = 'x';                        xRem--;                    }                } else {                    for (int i = 0; i < oSize && ind < n; i++) {                        ansStr[ind++] = 'o';                    }                    oSize = 1;                }                xSub = !xSub;            }            return ansStr;        }     }     static class InputReader {        private StringTokenizer tokenizer;        private BufferedReader reader;         public InputReader(InputStream inputStream) {            reader = new BufferedReader(new InputStreamReader(inputStream));        }         private void fillTokenizer() {            if (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (Exception e) {                    throw new RuntimeException(e);                }            }        }         public String next() {            fillTokenizer();            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
