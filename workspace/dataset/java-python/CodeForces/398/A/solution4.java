import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.InputStream;import java.util.NoSuchElementException;import java.io.OutputStreamWriter;import java.math.BigInteger;import java.io.OutputStream;import java.io.PrintWriter;import java.io.Writer;import java.io.IOException;import java.util.*; /** * Built using CHelper plug-in * Actual solution is at the top * @author Árysson Cavalcanti */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        TaskE solver = new TaskE();        solver.solve(1, in, out);        out.close();    }} class TaskE {     public void solve(int testNumber, InputReader in, OutputWriter out) {        int a=in.readInt(), b=in.readInt(), best=-1;        long ret=Long.MIN_VALUE;        if (a==0 || b<=1) {            out.printLine(1L*a*a-1L*b*b);            while (a-->0) out.print('o');            while (b-->0) out.print('x');            return;        }        for (int i=1; i<=a && i<b; i++) {            long aux=f(a, b, i);            if (ret<aux) {                ret=aux;                best=i;            }        }        out.printLine(ret);        int[] arr=new int[best*2+1];        for (int i=0; i<=best; i++) {            arr[2*i]=b/(best+1);            if (i<b%(best+1)) arr[2*i]++;            if (i==best) break;            arr[2*i+1]=1;        }        arr[1]+=a-best;        for (int i=0; i<arr.length; i++) while (arr[i]-->0) out.print(i%2==0?'x':'o');    }        long f(int a, int b, int i) {        long ret=1L*(a-i+1)*(a-i+1)+i-1;        i++;        ret-=1L*(b%i)*(b/i+1)*(b/i+1)+1L*(i-b%i)*(b/i)*(b/i);        return ret;    }} class InputReader {        private boolean finished = false;         private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private SpaceCharFilter filter;         public InputReader(InputStream stream) {                this.stream = stream;        }         public int read() {                if (numChars == -1)                        throw new InputMismatchException();                if (curChar >= numChars) {                        curChar = 0;                        try {                                numChars = stream.read(buf);                        } catch (IOException e) {                                throw new InputMismatchException();                        }                        if (numChars <= 0)                                return -1;                }                return buf[curChar++];        }         public int peek() {                if (numChars == -1)                        return -1;                if (curChar >= numChars) {                        curChar = 0;                        try {                                numChars = stream.read(buf);                        } catch (IOException e) {                                return -1;                        }                        if (numChars <= 0)                                return -1;                }                return buf[curChar];        }                public int readInt() {                int c = read();                while (isSpaceChar(c))                        c = read();                int sgn = 1;                if (c == '-') {                        sgn = -1;                        c = read();                }                int res = 0;                do {                        if (c < '0' || c > '9')                                throw new InputMismatchException();                        res *= 10;                        res += c - '0';                        c = read();                } while (!isSpaceChar(c));                return res * sgn;        }         public long readLong() {                int c = read();                while (isSpaceChar(c))                        c = read();                int sgn = 1;                if (c == '-') {                        sgn = -1;                        c = read();                }                long res = 0;                do {                        if (c < '0' || c > '9')                                throw new InputMismatchException();                        res *= 10;                        res += c - '0';                        c = read();                } while (!isSpaceChar(c));                return res * sgn;        }                public String readString() {                int c = read();                while (isSpaceChar(c))                        c = read();                StringBuilder res = new StringBuilder();                do {                        if (Character.isValidCodePoint(c))                                res.appendCodePoint(c);                        c = read();                } while (!isSpaceChar(c));                return res.toString();        }         public boolean isSpaceChar(int c) {                if (filter != null)                        return filter.isSpaceChar(c);                return isWhitespace(c);        }         public static boolean isWhitespace(int c) {                return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         private String readLine0() {                StringBuilder buf = new StringBuilder();                int c = read();                while (c != '\n' && c != -1) {                        if (c != '\r')                                buf.appendCodePoint(c);                        c = read();                }                return buf.toString();        }         public String readLine() {                String s = readLine0();                while (s.trim().length() == 0)                        s = readLine0();                return s;        }                String readLine(boolean ignoreEmptyLines) {                if (ignoreEmptyLines)                        return readLine();                else                        return readLine0();        }         public BigInteger readBigInteger() {                try {                        return new BigInteger(readString());                } catch (NumberFormatException e) {                        throw new InputMismatchException();                }        }         public char readCharacter() {                int c = read();                while (isSpaceChar(c))                        c = read();                return (char) c;        }                public double readDouble() {                int c = read();                while (isSpaceChar(c))                        c = read();                int sgn = 1;                if (c == '-') {                        sgn = -1;                        c = read();                }                double res = 0;                while (!isSpaceChar(c) && c != '.') {                        if (c == 'e' || c == 'E')                                return res * Math.pow(10, readInt());                        if (c < '0' || c > '9')                                throw new InputMismatchException();                        res *= 10;                        res += c - '0';                        c = read();                }                if (c == '.') {                        c = read();                        double m = 1;                        while (!isSpaceChar(c)) {                                if (c == 'e' || c == 'E')                                        return res * Math.pow(10, readInt());                                if (c < '0' || c > '9')                                        throw new InputMismatchException();                                m /= 10;                                res += (c - '0') * m;                                c = read();                        }                }                return res * sgn;        }         public boolean isExhausted() {                int value;                while (isSpaceChar(value = peek()) && value != -1)                        read();                return value == -1;        }                public String next() {                return readString();        }         public SpaceCharFilter getFilter() {                return filter;        }         public void setFilter(SpaceCharFilter filter) {                this.filter = filter;        }         public interface SpaceCharFilter {                public boolean isSpaceChar(int ch);        }} class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {                writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {                this.writer = new PrintWriter(writer);        }         public void print(char[] array) {                writer.print(array);        }         public void print(Object...objects) {                for (int i = 0; i < objects.length; i++) {                        if (i != 0)                                writer.print(' ');                        writer.print(objects[i]);                }        }     public void print(int[] array) {        for (int i = 0; i < array.length; i++) {            if (i != 0)                writer.print(' ');            writer.print(array[i]);        }    }     public void print(long[] array) {        for (int i = 0; i < array.length; i++) {            if (i != 0)                writer.print(' ');            writer.print(array[i]);        }    }            public void printLine(int[] array) {        print(array);        writer.println();    }     public void printLine(long[] array) {        print(array);        writer.println();    }         public void printLine() {                writer.println();        }     public void printLine(Object...objects) {                print(objects);                writer.println();        }         public void print(char i) {                writer.print(i);        }         public void printLine(char i) {                writer.println(i);        }                public void printLine(char[] array) {                writer.println(array);        }         public void printFormat(String format, Object...objects) {                writer.printf(format, objects);        }         public void close() {                writer.close();        }         public void flush() {                writer.flush();        }         public void print(long i) {                writer.print(i);        }         public void printLine(long i) {                writer.println(i);        }         public void print(int i) {                writer.print(i);        }         public void printLine(int i) {                writer.println(i);        }}
