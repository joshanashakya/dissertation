import java.util.*;import java.io.*;import java.math.*; public class Main {	static class Solution {		public int getv(String s, int idx) {			char c = s.charAt(idx);			if (Character.isDigit(c))				return c - '0';			else				return c - 'A' + 10;		}		public boolean get(String s, int base, int max) {			int N = s.length();			double val = 0;			for (int i = 0; i < s.length(); i++) {				val += Math.pow(base, N - i - 1) * getv(s, i);				if (val >= max)					return false;			}			return true;		}		public void solve(InputReader in, OutputWriter out) {			String s = in.next();			int colon = s.indexOf(':');			String pre = s.substring(0, colon);			String post = s.substring(colon + 1);			int max = 1;			for (char c : s.toCharArray()) {				if (c == ':') continue;				if (Character.isDigit(c))					max = Math.max(c - '0' + 1, max);				else					max = Math.max(c - 'A' + 11, max);			}			if (get(pre, 60, 24) && get(post, 60, 60)) {				out.println(-1);				return;			}			List<Integer> res = new ArrayList();			for (int i = max; i < 60; i++) {				if (get(pre, i, 24) && get(post, i, 60)) {					res.add(i);				}			}			if (res.size() == 0) {				out.println(0);			}			else {				for (int i = 0; i < res.size(); i++) {					out.print(res.get(i) + " ");				}			}		}	} 	public static void main(String[] args) {		InputReader in = new InputReader(System.in);		OutputWriter out = new OutputWriter(System.out);		Solution sol = new Solution();		sol.solve(in, out);		out.close();	}		static class InputReader {		BufferedReader br;		StringTokenizer st;		InputReader(InputStream in) {br = new BufferedReader(new InputStreamReader(in));}		int nextInt() {return Integer.parseInt(next());}		long nextLong() {return Long.parseLong(next());}		double nextDouble() {return Double.parseDouble(next());}		String next() {			while (st == null || !st.hasMoreElements()) {				try {st = new StringTokenizer(br.readLine());}				catch (IOException e) {e.printStackTrace();}			}			return st.nextToken();		}		String nextLine() {			String str = "";			try {str = br.readLine();}			catch (IOException e) {e.printStackTrace();}			return str;		}	} 	static class OutputWriter {		PrintWriter pw;		OutputWriter(OutputStream out) {pw = new PrintWriter(new BufferedOutputStream(out), true);}		void printf(String s, Object... objects) {print(String.format(s, objects));}		void println(Object... objects) {print(objects); pw.println();}		void close() {pw.close();}		void print(Object... objects) {			for (int i = 0; i < objects.length; i++) {				if (i != 0) pw.print(' ');				pw.print(objects[i]);			}		}	}}
