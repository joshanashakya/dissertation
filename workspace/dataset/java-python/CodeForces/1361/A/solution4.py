"""#If FastIO not needed, used this and don't forget to strip#import sys, math#input = sys.stdin.readline""" import osimport sysfrom io import BytesIO, IOBaseimport heapq as h from bisect import bisect_left, bisect_right from types import GeneratorTypeBUFSIZE = 8192class FastIO(IOBase):    newlines = 0     def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") import collections as colimport math, string def getInts():    return [int(s) for s in input().split()] def getInt():    return int(input()) def getStrs():    return [s for s in input().split()] def getStr():    return input() def listStr():    return list(input()) MOD = 10**9+7 """The numbers are breadth-first search levels, so BFS connected components, and output them in BFS order, assigning them level numbers.Cycles are a problemSo actually we need to find connected components, deal with them one at a timeIf a node is 1, it either goes first, or it is not connected to any other onesIf T[i] == T[j] and (i,j) is an edge, failIf T[i] == K then i must have an edge to j where T[j] = 1, 2, ..., K-1 (at least one for each)Do all the 1s, then all the 2s, etcBut need to check that the neighbours conditions are satisfied """ def solve():    N, M = getInts()    neighbours = col.defaultdict(set)    max_neighbour = col.defaultdict(int)    for n in range(1,N+1):        max_neighbour[n] = 0        neighbours[n] = set()    edge = []    for m in range(M):        A, B = getInts()        edge.append((A,B))    T = [0] + getInts()    for A, B in edge:        if T[A] == T[B]:            print(-1)            return        if T[A] > T[B]:            neighbours[A].add(T[B])            max_neighbour[A] = max(max_neighbour[A],T[B])        else:            neighbours[B].add(T[A])            max_neighbour[B] = max(max_neighbour[B],T[A])    #print(neighbours,max_neighbour)    for n in range(1,N+1):        if max_neighbour[n] != T[n]-1 or len(neighbours[n]) != T[n]-1:            print(-1)            return    T = [(t,i) for i,t in enumerate(T)]    T.sort(reverse=True)    T.pop()    ans = []    while T:        t, i = T.pop()        ans.append(i)    print(*ans)    return    #for _ in range(getInt()):solve()
