import io, osinput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readlinefrom collections import defaultdict,dequedef bfs(node):    vis[node]=1    q=deque([node])    while q:        cur=q.popleft()        dict1={}        for j in edge[cur]:            if vis[j]==0:                vis[j]=1                q.append(j)            if topic[j-1]==topic[cur-1]:                return False            if topic[j-1]<topic[cur-1]:                dict1[topic[j-1]]=1        b=len(dict1.keys())        if b!=topic[cur-1]-1:            return False    return Truen,m=list(map(int,input().split()))edge=defaultdict(list)for i in range(m):    u,v=list(map(int,input().split()))    edge[u].append(v)    edge[v].append(u)topic=list(map(int,input().split()))vis=[0]*(n+1)s=0for i in range(1,n+1):    if vis[i]==0:        temp=bfs(i)        if temp==False:            s+=1            breakif s==1:    print(-1)else:    ans=[]    for i in range(n):        ans.append([topic[i],i+1])    ans.sort(key=lambda x:x[0],reverse=False)    num=[]    for i in range(n):        num.append(ans[i][1])    print(" ".join(str(x) for x in num))    
