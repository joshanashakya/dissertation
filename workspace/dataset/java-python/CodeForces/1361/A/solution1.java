import java.io.*;import java.util.*;public class Ishu{    static class Reader         {             final private int BUFFER_SIZE = 1 << 16;             private DataInputStream din;             private byte[] buffer;             private int bufferPointer, bytesRead;                   public Reader()             {                 din = new DataInputStream(System.in);                 buffer = new byte[BUFFER_SIZE];                 bufferPointer = bytesRead = 0;             }                   public Reader(String file_name) throws IOException             {                 din = new DataInputStream(new FileInputStream(file_name));                 buffer = new byte[BUFFER_SIZE];                 bufferPointer = bytesRead = 0;             }                   public String readLine() throws IOException             {                 byte[] buf = new byte[64]; // line length                 int cnt = 0, c;                 while ((c = read()) != -1)                 {                     if (c == '\n')                         break;                     buf[cnt++] = (byte) c;                 }                 return new String(buf, 0, cnt);             }                   public int nextInt() throws IOException             {                 int ret = 0;                 byte c = read();                 while (c <= ' ')                     c = read();                 boolean neg = (c == '-');                 if (neg)                     c = read();                 do                {                     ret = ret * 10 + c - '0';                 }  while ((c = read()) >= '0' && c <= '9');                       if (neg)                     return -ret;                 return ret;             }                   public long nextLong() throws IOException             {                 long ret = 0;                 byte c = read();                 while (c <= ' ')                     c = read();                 boolean neg = (c == '-');                 if (neg)                     c = read();                 do {                     ret = ret * 10 + c - '0';                 }                 while ((c = read()) >= '0' && c <= '9');                 if (neg)                     return -ret;                 return ret;             }                   public double nextDouble() throws IOException             {                 double ret = 0, div = 1;                 byte c = read();                 while (c <= ' ')                     c = read();                 boolean neg = (c == '-');                 if (neg)                     c = read();                       do {                     ret = ret * 10 + c - '0';                 }                 while ((c = read()) >= '0' && c <= '9');                       if (c == '.')                 {                     while ((c = read()) >= '0' && c <= '9')                     {                         ret += (c - '0') / (div *= 10);                     }                 }                       if (neg)                     return -ret;                 return ret;             }                   private void fillBuffer() throws IOException             {                 bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);                 if (bytesRead == -1)                     buffer[0] = -1;             }                   private byte read() throws IOException             {                 if (bufferPointer == bytesRead)                     fillBuffer();                 return buffer[bufferPointer++];             }                   public void close() throws IOException             {                 if (din == null)                     return;                 din.close();             }         }     static List<Integer>[] graph = new ArrayList[1];    static Reader scan = new Reader();    static BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));     static void tc() throws Exception    {    int n = scan.nextInt();    int m = scan.nextInt();        graph = new ArrayList[n];        int i,j;    for(i=0;i<n;++i)        graph[i] = new ArrayList<Integer>();            for(i=0;i<m;++i)        {        int a = scan.nextInt();        int b = scan.nextInt();        graph[a-1].add(b);        graph[b-1].add(a);        }            int[] t = new int[n];                for(i=0;i<n;++i)             t[i] = scan.nextInt();                    boolean pos = true;        for(i=0;i<n;++i)        {        int cur = t[i];        int size = graph[i].size();        int cnt = 0;        Map<Integer,Boolean> map = new HashMap<Integer,Boolean>();                for(j=0;j<size;++j)                {            int u = graph[i].get(j) - 1;            if(t[u] == cur)                {                pos = false;                i = n;                break;                }            else if(t[u] < cur && !map.containsKey(t[u]))                {                ++cnt;                map.put(t[u], true);                }            }        if(cnt < cur - 1)            {            pos = false;            break;            }        }             if(!pos)        {        output.write("-1\n");        output.flush();        return;        }              int[][] ans = new int[n][2];    for(i=0;i<n;++i)        {        ans[i][0] = i + 1;        ans[i][1] = t[i];        }        Arrays.sort(ans, Comparator.comparingInt(o -> o[1]));    for(i=0;i<n;++i)        output.write(ans[i][0] + " ");    output.write("\n");    output.flush();    }    public static void main(String[] args) throws Exception    {    int t = 1;    //t = scan.nextInt();    while(t-- > 0)        tc();    }}
