import java.io.*;import java.util.*;public class Main {    public static void main(String args[])    {        long start=System.currentTimeMillis();        FastReader input=new FastReader();        PrintWriter out=new PrintWriter(System.out);        int T=1;        while(T-->0)        {            int n=input.nextInt();            int m=input.nextInt();            ArrayList<Integer> adj[]=new ArrayList[n+1];            Vertex V[]=new Vertex[n+1];            for(int i=1;i<=n;i++)            {                V[i]=new Vertex(i,0);                adj[i]=new ArrayList<>();            }            for(int i=0;i<m;i++)            {                int u=input.nextInt();                int v=input.nextInt();                adj[u].add(v);                adj[v].add(u);            }            ArrayList<Integer> a[]=new ArrayList[n];            int b[]=new int[n+1];            for(int i=0;i<n;i++)            {                int p=input.nextInt();                b[i+1]=p;                ArrayList<Integer> l=new ArrayList<>();                l.add(p);                l.add(i+1);                a[i]=l;            }            mergeSort(a,0,n-1);            for(int i=0;i<n;i++)            {                HashSet<Integer> set=new HashSet<>();                int v=a[i].get(1);                for(int j=0;j<adj[v].size();j++)                {                    int u=adj[v].get(j);                    set.add(V[u].n);                }                int x=0;                for(int j=1;j<=n;j++)                {                    if(!set.contains(j))                    {                        x=j;                        break;                    }                }                V[v].n=x;             }            int flag=0;            for(int i=1;i<=n;i++)            {                if(V[i].n!=b[i])                {                    flag=1;                    break;                }            }            if(flag==1)            {                out.println(-1);            }            else            {                for(int i=0;i<a.length;i++)                {                    out.print(a[i].get(1)+" ");                }                out.println();            }        }        long end=System.currentTimeMillis();        //out.println(end-start);        out.close();    }    static class Vertex    {        int key,n;        Vertex(int key,int n)        {            this.key=key;            this.n=n;        }    }    public static void mergeSort(ArrayList<Integer> a[],int p,int r)    {        if(p<r)        {            int q=(p+r)/2;            mergeSort(a,p,q);            mergeSort(a,q+1,r);            merge(a,p,q,r);        }    }    public static void merge(ArrayList<Integer> a[],int p,int q,int r)    {        int n1=q-p+2;        ArrayList<Integer> L[]=new ArrayList[n1];        int n2=r-q+1;        ArrayList<Integer> R[]=new ArrayList[n2];        for(int i=p;i<=q;i++)        {            L[i-p]=a[i];        }        ArrayList<Integer> l=new ArrayList<>();        l.add(Integer.MAX_VALUE);        L[n1-1]=l;        for(int i=q+1;i<=r;i++)        {            R[i-q-1]=a[i];        }        R[n2-1]=l;        int x=0,y=0;        for(int i=p;i<=r;i++)        {            if(L[x].get(0)<=R[y].get(0))            {                a[i]=L[x];                x++;            }            else            {                a[i]=R[y];                y++;            }        }    }    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }}
