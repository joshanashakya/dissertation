import java.util.*;import java.io.*; public class B {    public static long MOD = 1000000007;    public static void main(String[] args) throws IOException{        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));        int t = Integer.parseInt(f.readLine());        while(t-->0){            StringTokenizer st = new StringTokenizer(f.readLine());            int n = Integer.parseInt(st.nextToken());            long p = Long.parseLong(st.nextToken());            Long[] arr = new Long[n];            st = new StringTokenizer(f.readLine());            for(int i = 0; i < n; i++){                arr[i] = Long.parseLong(st.nextToken());            }            Arrays.sort(arr);            long screwedThreshold = Long.MAX_VALUE;            if(p != 1){                int ct = 0;                long res = 1L;                while(res <= 1000000000L){                    res*=p;                    ct++;                }                screwedThreshold = ct;            }             long diff = 0;            long lastOne = -1;            boolean found = false;            boolean screwed = false;            for(int i = n-1; i >= 0; i--){                if(i < n-1 && diff != 0) {                    if (!screwed && lastOne-arr[i] >= screwedThreshold) screwed = true;                    diff *= power(p, arr[i+1]-arr[i], MOD);                    diff %= MOD;                    diff+=MOD;                    diff%=MOD;                }                    if(!found){                        found = true;                        diff++;                        lastOne = arr[i];                    }else {                        if (screwed) diff--;                        else {                            diff--;                            if (diff == 0) {                                found = false;                            }                        }                    }            }            out.println(((diff*power(p, arr[0], MOD))%MOD+MOD)%MOD);        }           out.close();    }    public static long power(long x, long y, long p)    {        // Initialize result        long res = 1L;         // Update x if it is more        // than or equal to p        x = x % p;         if (x == 0) return 0L; // In case x is divisible by p;         while (y > 0)        {            // If y is odd, multiply x            // with result            if((y & 1L)==1)                res = (res * x) % p;             // y must be even now            // y = y / 2            y = y >> 1L;            x = (x * x) % p;        }        return res;    }}
