import java.io.*; import java.util.*;public class CF1361B {Â     /**     * Sort powers     * Go from big to small     * Sweep down     * If p^(cur-next)>i we just subtract     * Otherwise we just use "base" array structure and go down, by above won't exceed int       */     static class FastReader     {         BufferedReader br;         StringTokenizer st;           public FastReader()         {             br = new BufferedReader(new                     InputStreamReader(System.in));         }           String next()         {             while (st == null || !st.hasMoreElements())             {                 try                {                     st = new StringTokenizer(br.readLine());                 }                 catch (IOException  e)                 {                     e.printStackTrace();                 }             }             return st.nextToken();         }           int nextInt()         {             return Integer.parseInt(next());         }               }     static int MOD=1000000007;    public static void main(String[] args) {        FastReader br=new FastReader();        int T=br.nextInt();        StringBuilder sb=new StringBuilder();        int n,p=0; int[] a=new int[0]; int num=0; int cur=0; long ans=0;        // num and pwr means currently we are dealing with p^cur        boolean flag=false;        for (int i = 0; i < T; i++) {            flag=false;            n=br.nextInt(); p=br.nextInt();            a=new int[n];            for (int j = 0; j < n; j++) {                a[j]=br.nextInt();            }            if(p==1){                sb.append(n%2).append("\n"); continue;            }            Arrays.sort(a);            ans=0;             int cnt=0; int ind=n-1; num=0;             x:            for (int j = n-1; j >=0; j--) {                if(j==n-1){                    cur=a[j]; continue;                }                if(a[j]<cur){                                        cnt=ind-j;                                        if(num==0){                        num=cnt%2;                     }else if(num>cnt){                        num-=cnt;                    }else{                        num=(cnt-num)%2;                    }                    if(num>0){                        for (int k = 1; k <= cur-a[j]; k++) {                                                        num*=p;                            //System.out.println(a[j]+" "+num);                            if(num>j){                                                                ans+=num*pwr(p,cur-k);//Indexing                                                                for (int l = 0; l <= j; l++) {                                    ans-=pwr(p,a[l]); ans%=MOD;                                                                    }                                if(ans<0){                                    ans+=MOD;                                }                                sb.append(ans).append("\n"); flag=true;                                break x;                            }                        }                    }                                        ind=j;                                    }                cur=a[j];            }            if(!flag){                                ans=(int)((long) (((num+ind+1)%2)*pwr(p,cur))%MOD);                sb.append(ans).append("\n");            }        }        System.out.println(sb.toString());    }    public static long pwr(int p, int k){        if(k==0)return (long)1;        if(k==1)return (long)p;        long a=pwr(p,k/2);        return ((a*a)%MOD)*pwr(p,k%2)%MOD;    }}
