import java.util.*;import java.io.*;import java.math.*; public class Main {     final static int mod = 1000000007;    static FastReader sc;    static PrintWriter out;     public static void solution() throws IOException {        int n = sc.nextInt();        int l = sc.nextInt();        int r = sc.nextInt();        int x = sc.nextInt();        int a[] = new int[n];        for(int i=0; i<n; i++) a[i] = sc.nextInt();         int istwo = 0, count = 0;        for(int i = 1; i < (1 << n); i++) {            if(i == (1 << istwo)) {                istwo++;                continue;            }            int sum = 0, min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;            for(int mask = 0; mask < n; mask++) {                if((i & (1 << mask)) != 0) {                    int val = a[n -1- mask];                    sum += val;                    min = Math.min(val, min);                    max = Math.max(val, max);                }            }            if(sum >= l && sum <= r && max - min >= x) {                count++;            }        }        out.println(count);    }     // Fast IO    static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() throws FileNotFoundException {            File in = new File("input.txt");            if (in.exists()) {                br = new BufferedReader(new InputStreamReader(new FileInputStream("input.txt")));            } else {                br = new BufferedReader(new InputStreamReader(System.in));            }        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         float nextFloat() {            return Float.parseFloat(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    }     // GCD    public static int __gcd(int a, int b) {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.intValue();    }     public static long __gcd(long a, long b) {        BigInteger n1 = BigInteger.valueOf(a);        BigInteger n2 = BigInteger.valueOf(b);        BigInteger gcd = n1.gcd(n2);        return gcd.longValue();    }     public static void main(String args[]) throws IOException {        long start = 0, end = 0;        try {            File output = new File("output.txt");            sc = new FastReader();            if (output.exists()) {                out = new PrintWriter(new FileOutputStream("output.txt"));                start = System.nanoTime();            } else {                out = new PrintWriter(System.out);            }             int test_cases = 1;//            test_cases = sc.nextInt();            while (test_cases-- > 0) {                solution();            }            if (output.exists()) {                end = System.nanoTime();                out.println("Execution time: " + (end - start) / 1000000 + " ms");            }            out.flush();            out.close();        } catch (Exception e) {            out.println("Exception: " + e);            out.flush();            out.close();            return;        }    }}
