//189301019.akshayimport java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Scanner; import java.util.Random;import java.util.Arrays;import java.util.StringTokenizer; import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Collections; public class C {     public static void main(String[] args) 	{ 		FastReader sc=new FastReader(); 		StringBuffer ans=new StringBuffer();		int test=1;		while(test-->0)		{			int r=sc.nextInt(),g=sc.nextInt(),b=sc.nextInt();			ans.append(solve(r,g,b)+"\n");		}			    System.out.print(ans);	}             static int solve(int r,int g,int b) {    	int cnt=0;				if(r%3 == 0 && r != 0) {			cnt+=(r-3)/3;			r=3;		}		else {			cnt+=(r/3);			r%=3;		}		if(g%3 == 0 && g!= 0) {			cnt+=(g-3)/3;			g=3;		}		else {			cnt+=(g/3);			g%=3;		}		if(b%3 == 0 && b!= 0) {			cnt+=(b-3)/3;				b=3;		}		else {			cnt+=(b/3);			b%=3;		}		//		System.out.println(" R:"+r+" G:"+g+" B:"+b);				cnt+=Math.max(op1(r,g,b), op2(r,g,b));								return cnt;    }    static int op1(int r,int g,int b) {    	int cnt=0;    	int k=Math.min(Math.min(r,g),b);		cnt+=k;		r-=k;g-=k;b-=k;				cnt+=(r/3);		cnt+=(g/3);		cnt+=(b/3);//		System.out.println("Option 1: "+cnt);		return cnt;    }        static int op2(int r,int g,int b) {    	int cnt=0;    	    	cnt+=(r/3);    	r=r%3;    	cnt+=(g/3);    	g=g%3;    	cnt+=(b/3);    	b%=3;    	    	cnt+=Math.min(Math.min(r, g), b);//    	System.out.println("Option 2: "+cnt);    	return cnt;    }        static final Random random=new Random();    	static void ruffleSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static void ruffleSort(long[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			long temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}		static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		} 	}   } 
