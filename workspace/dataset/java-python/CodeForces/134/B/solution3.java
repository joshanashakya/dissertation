import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.InputMismatchException;import java.util.LinkedList;import java.util.Map;import java.util.Queue;import java.util.Stack;import java.util.StringTokenizer;  /** * * @author Kayali */public class Aday {       public static int dd(int a,int b)    {        int count=0;        while(true)        {            if(a<1||b<1)            return 100000000;            else if(a==1&&b==1)            return count;            count++;            if(a>b)            a-=b;            else            b-=a;        }    }            public static void main(String[] args) throws Exception {       FastReader in = new FastReader();       PrintWriter pw = new PrintWriter(System.out);                   int n=in.nextInt();        int ans=1000000000;        for(int i=1;i<=n;i++)        ans=Math.min(ans,dd(i,n));                pw.println(ans);                     pw.flush();     pw.close();                                                    }   static class FastReader {         StringTokenizer st;        BufferedReader br;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         public String next() throws IOException {            if (st == null || !st.hasMoreTokens()) {                st = new StringTokenizer(br.readLine());            }            return st.nextToken();        }         public boolean hasNext() throws IOException {            if (st != null && st.hasMoreTokens()) {                return true;            }            String s = br.readLine();            if (s == null || s.isEmpty()) {                return false;            }            st = new StringTokenizer(s);            return true;        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public String nextLine() throws IOException {            return br.readLine();        }    }      }
