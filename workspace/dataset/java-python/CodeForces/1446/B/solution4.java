import java.util.*;import java.io.*; public class cf_7 {    public static void main(String[] args) {        new Solution().solve();    }} class Solution {    private int[][] dp;     public void solve() {        FastScanner fs = new FastScanner();        int m = fs.nextInt(), n = fs.nextInt();        String a = fs.next();        String b = fs.next();        dp = new int[m][n];        // Initialize DP matrix with -1        for (int i=0; i < dp.length; i++) {            Arrays.fill(dp[i], -1);        }        int result = 0;        for (int i=0; i < m; i++) {            for (int j=0; j < n; j++) {                int currentResult = helper(a, b, i, j);                result = Math.max(result, currentResult);            }        }        System.out.println(result);    }     private int helper(String a, String b, int i, int j) {        if (i == a.length() || j == b.length()) { // reached end of string            return 0;        }        if (dp[i][j] != -1) {            return dp[i][j];        }        int result = 0;        result = Math.max(result, helper(a, b, i+1, j) - 1);        result = Math.max(result, helper(a, b, i, j+1) - 1);        if (a.charAt(i) == b.charAt(j)) {            result = Math.max(result, helper(a, b, i+1, j+1) + 2);        }        dp[i][j] = result;        return result;    }} class FastScanner {    private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    private StringTokenizer st = new StringTokenizer("");        public String next() {        while (!st.hasMoreTokens())            try {                st = new StringTokenizer(br.readLine());            } catch (IOException e) {                e.printStackTrace();            }        return st.nextToken();    }        public int[] readIntArray(int n) {        int[] arr = new int[n];        for (int i=0; i<n; i++) {            arr[i] = nextInt();        }        return arr;    }     public int nextInt() {        return Integer.parseInt(next());    }            public long nextLong() {        return Long.parseLong(next());    }     public double nextDouble() {        return Double.parseDouble(next());    }     public float nextFloat() {        return Float.parseFloat(next());    }    }
