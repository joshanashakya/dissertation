#!/usr/bin/env python3.9 from operator import itemgetter def maxS(A, B):    ''' S(C,D) = 4*LCS(C,D) - |C| - |D| '''    # tuple(lcs, len(c), len(d)), len(c) <= len(d)    # zero-padding (1, 1, 0, 0)    # LCS = [[(0, 0, 0,)]*(len(B)+1) for _ in range(len(A)+1)]    # LCS = [[(0, 0, 0,)]*(len(B)+1) for _ in range(2)]    S = [[0]*(len(B)+1) for _ in range(2)]    # SS1 = [[0]*(len(B)+1) for _ in range(len(A)+1)]    maxS = 0    for i in range(1, len(A)+1):        ii = i % 2        for j in range(1, len(B)+1):            res_lcs = 0, 0, 0            # S = 0            if A[i-1] == B[j-1]:                # lcs, lc, ld = LCS[ii-1][j-1]                # S = 4*lcs - lc - ld                if S[ii-1][j-1] < 0:                    # res_lcs = 1, 1, 1                    S[ii][j] = 2                else:                    # res_lcs = lcs+1, lc+1, ld+1                    S[ii][j] = S[ii-1][j-1] + 2            else:                # up = LCS[ii-1][j]                # left = LCS[ii][j-1]                 # lcs, lc, ld = 0, 0, 0                # left_S = 4 * left[0] - left[1] - left[2]                # up_S = 4 * up[0] - up[1] - up[2]                if S[ii][j-1] >= S[ii-1][j]:                    # lcs, lc, ld = left                    S[ii][j] = S[ii][j-1] - 1                else:                    # lcs, lc, ld = up                    S[ii][j] = S[ii-1][j] - 1                 # lcs, lc, ld = max(left, up, key=itemgetter(0))                # res_lcs = lcs, lc, ld+1             # S = 4 * res_lcs[0] - res_lcs[1] - res_lcs[2]            # LCS[ii][j] = res_lcs            # SS1[i][j] = max(S, 0)            if S[ii][j] > maxS:                maxS = S[ii][j]     # [print(*s) for s in LCS]    # print()    # [print(*s) for s in SS1]    # print()    return maxS n, m = list(map(int, input().split(' ')))A = input()B = input()if len(B) > len(A):    A, B = B, Aprint(maxS(A, B))
