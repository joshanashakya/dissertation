import math,sys,bisect,heapq,osfrom collections import defaultdict,Counter,dequefrom itertools import groupby,accumulatefrom functools import lru_cache#sys.setrecursionlimit(200000000)int1 = lambda x: int(x) - 1def input(): return sys.stdin.readline().rstrip('\r\n')#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__aj = lambda: list(map(int, input().split()))def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]#MOD = 1000000000 + 7def Y(c):  print(["NO","YES"][c])def y(c):  print(["no","yes"][c])def Yy(c):  print(["No","Yes"][c]) def gcd(a,b):	if b == 0:		return a	return gcd(b,a%b) def solve():	n, = aj()	if n<=2:		print(n)		exit(0)	a = n*(n-1)	b = (n-1)*(n-2)	ans = 0	#print(a,b)	for i in range(n-2,0,-1):		if gcd(i,a) == 1:			ans = max(ans,a*i)		if i <= n-3 and gcd(b,i) == 1:			ans = max(ans,b*i)	print(ans)try:	#os.system("online_judge.py")	sys.stdin = open('input.txt', 'r') 	sys.stdout = open('output.txt', 'w')except:	pass solve()
