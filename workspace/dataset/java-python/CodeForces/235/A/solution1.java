import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        ALCMChallenge solver = new ALCMChallenge();        solver.solve(1, in, out);        out.close();    }     static class ALCMChallenge {        public void solve(int testNumber, InputReader in, OutputWriter out) {            long n = in.nextLong();            if (n <= 2) {                out.println(n);                return;            }            if (n % 2 == 1) {                long ans = n * (n - 1) * (n - 2);                out.println(ans);            } else {                long ans1 = (n - 1) * (n - 2) * (n - 3);                long ans2 = (n - 1) * (n / 2) * (n - 2);                long ans3 = 0;                if (n % 3 != 0) {                    ans3 = (n) * (n - 1) * (n - 3);                }                out.println(Math.max(ans1, Math.max(ans2, ans3)));            }        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public long nextLong() {            return Long.parseLong(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void println(long i) {            writer.println(i);        }     }} 
