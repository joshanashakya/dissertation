import java.util.*; public class Absolutezero {    public static void main(String[] args) {        //List<Integer> numbbers= new Absolutezero().testt(2000000);        //System.out.println(numbbers);        // System.out.println(primes);        Scanner sc = new Scanner(System.in);        int a = sc.nextInt();        int b = sc.nextInt();        int c = sc.nextInt();        int d = sc.nextInt();         long score1=Math.max(3*a/10,a-a/250 * c);        long score2=Math.max(3*b/10,b-b/250 * d);        if (score1>score2){            System.out.println("Misha");        }else if(score1<score2){            System.out.println("Vasya");        }else {            System.out.println("Tie");        }     }     public List<Integer> almostp(int n) {        List<Integer> list = new ArrayList<>();        for (int i = 2; i * i <= n; i++) {            if (n % i == 0) {                while (n % i == 0) {                    n = n / i;                }                list.add(i);            }        }        if (n > 1) {            list.add(n);        }        return list;    }     static int countSetBits(int n) {        int count = 0;        while (n > 0) {            count += n & 1;            n >>= 1;        }        return count;    }     public List<Integer> getDivisors(int n) {        List<Integer> list = new ArrayList<>();        for (int d = 2; d * d <= n; d++) {            int c = 0;            if (n % d == 0) {                while (n % d == 0) {                    n /= d;                    c++;                }                if (c == 1) {                    list.add(d);                }            }        }        if (n > 1) {            list.add(n);        }        return list;    }     public int lcm(int n1, int n2) {        int gcd = 1;        for (int i = 1; i <= n1 && i <= n2; ++i) {            // Checks if i is factor of both integers            if (n1 % i == 0 && n2 % i == 0)                gcd = i;        }         int lcm = (n1 * n2) / gcd;        return lcm;    }     public List<Long> primes(int n) {        boolean[] p = new boolean[n + 1];        long h = n * n;        List<Long> list = new ArrayList<>();        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            if (p[i]) {                //  list.add((long)(i*i));                for (int j = i * i; j <= n; j += i) {                    p[j] = false;                }            }        }         List<Integer> list1 = new ArrayList<>();         for (int i = 2; (long) (i * i) <= h; i++) {            if (p[i]) {                list.add(((long) (i * i)));            }        }        return list;    }     public int primeFactor(int n) {        int c = 0;         while (n % 2 == 0) {            n /= 2;            c++;        }        //  System.out.println(n);        return c;     }     public boolean[] primes1(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            for (int j = i * i; j <= n; j += i) {                p[j] = false;            }        }        return p;    }     public List<Integer> testt(int n) {         List<Integer> longs = new ArrayList<>();        process:        for (int p = 1; p <= n; p++) {            // System.out.println(i);            int i = p;            //List<Integer> ls=new ArrayList<>();            int count = 0;            for (int j = 2; j * j <= i; j++) {                int c = 0;                if (i % j == 0) {                    while (i % j == 0) {                        i /= j;                        c++;                    }                    if (c == 1) {                        count++;                    }                    if (count >= 2) {                        longs.add(p);                        continue process;                    }                }            }             if (i > 1) {                count++;            }            if (count >= 2) {                longs.add(p);                continue process;            }         }         //Collections.sort(longs);          return longs;    }}	  		 		 		   			 		  				   		
