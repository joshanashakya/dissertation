import java.io.*; import java.util.*;public class CF0543A {     /**     * Let dp[i][j][k]=# of ways to get the first i programmers to get j lines done in under k bugs     * Note that we have an ugly recurrence:     * for (int l = 0; l \le Math.min(j,k/a[i-1]); l++) {                        dp[i][j][k]+=dp[i-1][j-l][k-a[i-1]*l];                        dp[i][j][k]%=MOD;         }         * To speed this up, realize programmer i either does work or doesn't         * If he doesn't get to work we get dp[i-1][j][k]         * If he does we get dp[i][j-1][k-a[i-1]], since he works for one line     */    public static void main(String[] args) throws IOException {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st=new StringTokenizer(br.readLine());        int N=Integer.parseInt(st.nextToken());        int M=Integer.parseInt(st.nextToken());        int B=Integer.parseInt(st.nextToken());        int MOD=Integer.parseInt(st.nextToken());        int[] a=new int[N];st=new StringTokenizer(br.readLine());        for (int i = 0; i < N; i++) {            a[i]=Integer.parseInt(st.nextToken());        }                /*        //Base Case: one programmer        for (int i =0; i <=N; i++) {            for (int j = 0; j <=B; j++) {                dp[i][0][j]=1;            }        }        for (int i = 1; i <=N; i++) {            for (int j = 1; j <=M; j++) {                for (int k = 1; k <= B; k++) {                    if(k>=a[i-1]){                        dp[i][j][k]=(dp[i-1][j][k]+dp[i][j-1][k-a[i-1]])%MOD;                    }else{                        dp[i][j][k]=dp[i-1][j][k];                    }                }            }        }         System.out.println(dp[N][M][B]);        */        //Memory compressions:        int[][] dp=new int[M+1][B+1];        int[][] dp2=new int[M+1][B+1];        //Initialize dp        for (int i = 0; i <=B; i++) {            dp[0][i]=1;        }                for (int i = 0; i <N; i++) {            for (int j = 0; j <= B; j++) {                dp2[0][j]=1;            }            for (int j = 1; j <= M; j++) {                for (int k = 0; k <=B; k++) {                    dp2[j][k]=dp[j][k];                                        if(k>=a[i]){                        dp2[j][k]+=dp2[j-1][k-a[i]];                                                dp2[j][k]%=MOD;                    }                }            }                        dp=dp2.clone();            dp2=new int[M+1][B+1];        }        System.out.println(dp[M][B]);    }    }
