import java.util.*; public  class DestroyedRoads {    public static void main(String[] args) {        Scanner in = new Scanner(System.in);        int n = in.nextInt();        int m = in.nextInt();         List<Integer>[] ls = new ArrayList[n];        for (int i = 0; i < n; i++) {            ls[i] = new ArrayList<>();        }         for (int i = 0; i < m; i++) {            int a = in.nextInt() - 1;            int b = in.nextInt() - 1;            ls[a].add(b);            ls[b].add(a);        }         int s0 = in.nextInt() - 1;        int t0 = in.nextInt() - 1;        int l0 = in.nextInt();         int s1 = in.nextInt() - 1;        int t1 = in.nextInt() - 1;        int l1 = in.nextInt();         int[][] distances = new int[n][n];        for (int[] a : distances) {            Arrays.fill(a, Integer.MAX_VALUE);        }         for (int i = 0; i < n; i++) {            Queue<Integer> q = new ArrayDeque<>();            q.add(i);            distances[i][i] = 0;            while (!q.isEmpty()) {                int p = q.poll();                for (int j : ls[p]) {                    if (distances[i][j] == Integer.MAX_VALUE) {                        distances[i][j] = distances[i][p] + 1;                        q.add(j);                    }                }            }        }         if (distances[s0][t0] > l0 || distances[s1][t1] > l1) {            System.out.println(-1);            return;        }                int ans = distances[s0][t0] + distances[s1][t1];        for (int x = 0; x < n; x++) {            for (int y = 0; y < n; y++) {                if (distances[s0][x] + distances[x][y] + distances[y][t0] <= l0 && distances[s1][x] + distances[x][y] + distances[y][t1] <= l1) {                    ans = Math.min(ans, distances[s0][x] + distances[s1][x] + distances[x][y] + distances[y][t0] + distances[y][t1]);                }                if (distances[s0][x] + distances[x][y] + distances[y][t0] <= l0 && distances[t1][x] + distances[x][y] + distances[y][s1] <= l1) {                    ans = Math.min(ans, distances[s0][x] + distances[t1][x] + distances[x][y] + distances[y][t0] + distances[y][s1]);                }            }        }        System.out.println(m - ans);    }}	  		 	 	 	 		 	 			 	 	 		 	 	
