import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Random;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; public class Solution{		static int n, m;	static ArrayList<Integer>[] g;	static int[][] dist;	static final int inf = (int)1e9;	static int ans = -1;		    public static void main(String[] args) throws IOException {    			    	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    		    	int tt = 1;    	while(tt-->0) {     		n = fs.nextInt();    		m = fs.nextInt();    		    		g = new ArrayList[n];    		for(int i=0;i<n;i++) g[i] = new ArrayList<Integer>();    		    		for(int i=0;i<m;i++) {    			int u = fs.nextInt()-1, v = fs.nextInt()-1;    			g[u].add(v);    			g[v].add(u);    		}    		    		    		int s1 = fs.nextInt()-1, d1 = fs.nextInt()-1, l1 = fs.nextInt();    		int s2 = fs.nextInt()-1, d2 = fs.nextInt()-1, l2 = fs.nextInt();    		    		    		dist = new int[n][n];    		int[][] DIST = dist;    		    		for(int i=0;i<n;i++) {    			bfs(i, dist[i]);    		}    		    		    		    		if(dist[s1][d1]<=l1 && dist[s2][d2]<=l2) {    			ans = Math.max(ans, m - (dist[s1][d1]+dist[s2][d2]));    		}    		    		    		    		calc(s1, d1, l1, s2, d2, l2);    		int temp = s1; s1 = d1; d1 =temp;    		calc(s1, d1, l1, s2, d2, l2);    		    		out.println(ans);    		    		    		    		    		    		    		    		    		    		    		    	}    	    	out.close();    	    }            static void calc(int s1, int d1, int l1, int s2, int d2, int l2) {    	for(int i=0;i<n;i++) {			for(int j=0;j<n;j++) {				int k = dist[i][j];				if(dist[s1][i]+dist[j][d1]+k<=l1 && dist[s2][i]+dist[j][d2]+k<=l2) {					ans = Math.max(ans, m - (dist[s1][i]+dist[s2][i]+dist[j][d1]+dist[j][d2]+k));				}			}		}    }         static void bfs(int v, int[] dist) {    	Arrays.fill(dist, inf);    	dist[v] = 0;    	ArrayDeque<Integer> q = new ArrayDeque<>();    	q.add(v);    	while(!q.isEmpty()) {    		int u = q.poll();    		for(int next: g[u]) {    			if(dist[next]!=inf) continue;    			dist[next] = dist[u] + 1;    			q.add(next);    		}    	}    }               static final Random random=new Random();        static <T> void shuffle(T[] arr) {    	int n = arr.length;    	for(int i=0;i<n;i++	) {    		int k = random.nextInt(n);    		T temp = arr[k]; arr[k] = arr[i]; arr[i] = temp;    	}    }        	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }        static void ruffleSort(long[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); long temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
