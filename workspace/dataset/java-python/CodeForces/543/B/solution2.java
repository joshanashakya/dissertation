import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.Arrays;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Queue;import java.util.Scanner;import java.util.StringTokenizer;import java.util.Vector;  public class Main{	 	public static void main(String[] args) throws IOException {		int n = MyReader.nextInt();		int m = MyReader.nextInt();		Map<Integer, List<Integer>> map = new HashMap<>(n);		for(int i=0;i<m;i++){			int temp1 = MyReader.nextInt();			int temp2 = MyReader.nextInt();			map.computeIfAbsent(temp1, x->new LinkedList<>()).add(temp2);			map.computeIfAbsent(temp2, x->new LinkedList<>()).add(temp1);		}		int []s = new int[2];		int []t = new int[2];		int []l = new int[2];		for (int i = 0; i < 2; i++) {			s[i] = MyReader.nextInt();			t[i] = MyReader.nextInt();			l[i] = MyReader.nextInt();		}		if (m==0) {			System.out.println((s[0]==t[0]&&s[1]==t[1])?0:-1);			return ;		}		int [][]dis = new int[n+1][n+1];		for(int[]arr:dis){			Arrays.fill(arr, 0x3f3f3f3f);		}		for (int i = 1; i <= n; i++) {						Queue<Integer> queue = new LinkedList<>();			boolean[]vis = new boolean[n+1];			dis[i][i]=0;			queue.offer(i);			vis[i]=true;			while(!queue.isEmpty()){				int temp = queue.poll();				for(int x:map.get(temp)){					if (vis[x]) {						continue;					}					dis[i][x]=dis[i][temp]+1;					queue.offer(x);					vis[x]=true;				}			}		}		if (dis[s[0]][t[0]]>l[0]||dis[s[1]][t[1]]>l[1]) {			System.out.println(-1);			return;		}		int res = dis[s[0]][t[0]]+dis[s[1]][t[1]];		for (int i = 1; i <= n; i++) {			for (int j = 1; j <= n; j++) {				int temp1 = dis[s[0]][i]+dis[j][t[0]];				int temp2 = dis[s[1]][i]+dis[j][t[1]];				int temp3 = dis[t[1]][i]+dis[j][s[1]];				if (temp1+dis[i][j]<=l[0]&&temp2+dis[i][j]<=l[1]) {					res = Math.min(res, temp1+temp2+dis[i][j]);				}				if (temp1+dis[i][j]<=l[0]&&temp3+dis[i][j]<=l[1]) {					res = Math.min(res, temp1+temp3+dis[i][j]);				}			}		}		System.out.println(m-res);				 	}		static class MyReader{		static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));		static StringTokenizer tokenizer = new StringTokenizer("");		static String nextLine() throws IOException{			return reader.readLine();		}		static String next() throws IOException{			while(!tokenizer.hasMoreTokens()){				tokenizer = new StringTokenizer(reader.readLine());			}			return tokenizer.nextToken();		}		static int nextInt() throws IOException{			return Integer.parseInt(next());		}	} }  				 	    		  			 	 			  		 	
