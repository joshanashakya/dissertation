import java.io.*;import java.util.*; public class B_Hongcow_Solves_A_Puzzle{        @SuppressWarnings("unchecked")    public static void main(String[] args) throws Exception{        int[] nm = in.readA();        int n = nm[0], m = nm[1];        char[][] mat = new char[n][m];        for(int i = 0; i < n; i++){            char[] line = in.readLine().toCharArray();            mat[i] = line;        }        // check if it has atleast one X        // check if it is rectangle        boolean valid = true, oneX = false;        // top left coordinates        int tx = -1, ty = -1;        // bottom right coordinates        int bx = -1, by = -1;        for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                if(mat[i][j] == 'X'){                    oneX = true;                    if(tx == -1){                        tx = i; ty = j;                    }                    bx = i; by = j;                }            }        }        for(int i = tx; i <= bx; i++){            for(int j = ty; j <= by; j++){                if(mat[i][j] != 'X')                    valid = false;                mat[i][j] = '.';            }        }        for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                if(mat[i][j] != '.')                    valid = false;            }        }        if(valid && oneX)            System.out.println("YES");        else System.out.println("NO");    }     static Inputer in;    static {        in = new Inputer();    }     static class Inputer{        BufferedReader br;        Inputer(){            try{                br = new BufferedReader(new InputStreamReader(System.in));            }            catch(Exception e){}        }        public int readInt() throws Exception{            return Integer.parseInt(readLine());        }        public long readLong() throws Exception{            return Long.parseLong(readLine());        }        public int[] readA(String delim) throws Exception{            String[] s = readLine().split(delim);            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public int[] readA() throws Exception{            String[] s = readLine().split("\\s+");            int[] A = new int[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Integer.parseInt(s[i]);            return A;        }        public long[] readLA() throws Exception{            String[] s = readLine().split("\\s+");            long[] A = new long[s.length];            for(int i = 0; i < s.length; i++)                A[i] = Long.parseLong(s[i]);            return A;        }        public String readLine() throws Exception{            return br.readLine();        }        public int[] copyA(int[] A){            int[] B = new int[A.length];            for(int i= 0 ; i < A.length; i++)                B[i] = A[i];            return B;        }    }    static void shuffle(int[] A){        int n = A.length;        Random rand = new Random();        for(int t = 0; t < A.length; t++){            int i1 = rand.nextInt(n);            int i2 = rand.nextInt(n);            int tmp = A[i1];            A[i1] = A[i2];            A[i2] = tmp;        }    }}
