import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.StringTokenizer;import java.util.*; public class CF621B {    public static void main(String[] args) {        FastReader input = new FastReader();        PrintWriter pw = new PrintWriter(System.out);         boolean[][] matrix = new boolean[1000+1][1000+1];         int n = input.nextInt();         for(int i = 0;i < n;i++){            int x = input.nextInt();            int y = input.nextInt();             matrix[x][y] = true;        }         ArrayList<Integer> list = new ArrayList<Integer>();         for(int i = 1;i <= 1000;i++){            int p = 1;            int q = i;            int count = 0;            while (true){                if(matrix[p][q]){                    count++;                }                p++;                q++;                if(p > 1000 || q > 1000)                    break;              //  System.out.println("Here");            }            list.add(count);        }           for(int i = 1000;i > 1;i--){            int p = i;            int q = 1;            int count = 0;             while (true){                if(matrix[p][q]){                    count++;                }                p++;                q++;                if(p > 1000 || q > 1000)                    break;            }            list.add(count);        }         for(int i = 1;i <= 1000;i++){            int p = 1;            int q = i;            int count = 0;            while (true){                if(matrix[p][q]){                    count++;                }                p++;                q--;                if(p > 1000 || q < 1){                    break;                }            }            list.add(count);        }         for(int i = 2;i <= 1000;i++){            int p = i;            int q = 1000;            int count = 0;            while (true){                if(matrix[p][q]){                    count++;                }                p++;                q--;                if(p > 1000 || q < 1){                    break;                }            }            list.add(count);        }         long ans = 0;         for(int i : list){            if(i > 1){                int N = i;                int R = 2;                if(R > (N-R)){                    R = (N-R);                }                int t = 1;                for(int j = 0;j <= (R-1);j++){                    t = t * (N - j);                    t = t / (j + 1);                }                ans += t;            }        }         System.out.println(ans);        // ****If sorting is required, use ArrayList        // *** If string concatenation is required, use StringBuffer        // ** check for overflow        // ** Check for case with min value        // ** check for case with max value         pw.flush();        pw.close();    }     static void sort(int[] arr){        ArrayList<Integer> list = new ArrayList<Integer>();        for(int i : arr)            list.add(i);        Collections.sort(list);        for(int i = 0;i < list.size();i++){            arr[i] = list.get(i);        }        return;    }     static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }}
