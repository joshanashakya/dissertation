import java.io.*;import java.util.*;public class Asd {static PrintWriter w=new PrintWriter(System.out);static FastScanner s=new FastScanner();	public static void main(String[] args) {				int t=1;//s.nextInt();		while(t-->0)                {		    solve();		}	       w.close();}        public static void solve()        {           int n=s.nextInt();           int x[]=new int[n];           int y[]=new int[n];           int diff[]=new int[n+1];           for(int i=0;i<n;i++)           {               x[i]=s.nextInt();y[i]=s.nextInt();               diff[i]=y[i]-x[i];           }           diff[n]=Integer.MAX_VALUE;           Arrays.sort(diff);int t=01;                      long count=0;           for(int i=01;i<=n;i++)           {               if(diff[i]==diff[i-1])                   t++;               else               {                   if(t==1)                       count+=0;                   else                    count+=((t*(t-1))/2);                   t=01;               }           }           for(int i=0;i<n;i++)           {x[i]*=(-1);diff[i]=y[i]-x[i];}            diff[n]=Integer.MAX_VALUE;           Arrays.sort(diff); t=01;           for(int i=01;i<=n;i++)           {               if(diff[i]==diff[i-1])                   t++;               else               {                                       count+=((t*(t-1))/2);                   t=01;               }           }           w.println(count);        }	static long factorial(int n)        {            long su=1;            for(int i=1;i<=n;i++)                su*=(long)i;            return su;        }	static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer("");		public String next() {			while (!st.hasMoreElements())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		}		int[] readArray(int n) {			int[] a=new int[n]; 			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}				int nextInt () {			return Integer.parseInt(next());		}                long nextLong () {			return Long.parseLong(next());		}                double nextDouble () {			return Double.parseDouble(next());		}	}Â }
