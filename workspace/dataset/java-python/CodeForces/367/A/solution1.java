import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            ASerejaAndAlgorithm solver = new ASerejaAndAlgorithm();            solver.solve(1, in, out);            out.close();        }    }     static class ASerejaAndAlgorithm {        public void solve(int testNumber, FastInput in, FastOutput out) {            char[] s = new char[(int) 1e5];            int n = in.rs(s);            for (int i = 0; i < n; i++) {                s[i] -= 'x';            }            int m = in.ri();            IntegerPreSum[] ps = new IntegerPreSum[3];            for (int j = 0; j < 3; j++) {                int finalJ = j;                ps[j] = new IntegerPreSum(i -> s[i] == finalJ ? 1 : 0, n);            }            int[] cnts = new int[3];            for (int i = 0; i < m; i++) {                int l = in.ri() - 1;                int r = in.ri() - 1;                for (int j = 0; j < 3; j++) {                    cnts[j] = ps[j].intervalSum(l, r);                }                Arrays.sort(cnts);                if (r - l + 1 < 3 || cnts[2] - cnts[0] <= 1) {                    out.println("YES");                } else {                    out.println("NO");                }            }        }     }     static interface IntToIntegerFunction {        int apply(int x);     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public int rs(char[] data, int offset) {            return readString(data, offset);        }         public int rs(char[] data) {            return rs(data, 0);        }         public int readString(char[] data, int offset) {            skipBlank();             int originalOffset = offset;            while (next > 32) {                data[offset++] = (char) next;                next = read();            }             return offset - originalOffset;        }     }     static class IntegerPreSum {        private int[] pre;        private int n;         public IntegerPreSum(int n) {            pre = new int[n];        }         public void populate(IntToIntegerFunction a, int n) {            this.n = n;            if (n == 0) {                return;            }            pre[0] = a.apply(0);            for (int i = 1; i < n; i++) {                pre[i] = pre[i - 1] + a.apply(i);            }        }         public IntegerPreSum(IntToIntegerFunction a, int n) {            this(n);            populate(a, n);        }         public int intervalSum(int l, int r) {            return prefix(r) - prefix(l - 1);        }         public int prefix(int i) {            i = Math.min(i, n - 1);            if (i < 0) {                return 0;            }            return pre[i];        }         public String toString() {            StringBuilder ans = new StringBuilder();            for (int i = 0; i < n; i++) {                ans.append(intervalSum(i, i)).append(',');            }            if (ans.length() > 0) {                ans.setLength(ans.length() - 1);            }            return ans.toString();        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            return append('\n');        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
