import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        ASerejaAndAlgorithm solver = new ASerejaAndAlgorithm();        solver.solve(1, in, out);        out.close();    }     static class ASerejaAndAlgorithm {        public void solve(int testNumber, InputReader in, PrintWriter out) {            String s = in.next();            int[][] mat = new int[3][s.length()];            for (int i = 0; i < s.length(); i++) {                int a = s.charAt(i) - 'x';                mat[a][i]++;            }            for (int i = 0; i < mat.length; i++) {                for (int j = 1; j < mat[i].length; j++) {                    mat[i][j] += mat[i][j - 1];                }            }            int m = in.nextInt();            for (int i = 0; i < m; i++) {                int l = in.nextInt() - 1;                int r = in.nextInt() - 1;                if (r - l + 1 < 3)                    out.println("YES");                else {                    int a = mat[0][r] - (l == 0 ? 0 : mat[0][l - 1]);                    int b = mat[1][r] - (l == 0 ? 0 : mat[1][l - 1]);                    int c = mat[2][r] - (l == 0 ? 0 : mat[2][l - 1]);                    boolean possible = false;                    if (Math.abs(a - b) >= 2 || Math.abs(a - c) >= 2 || Math.abs(b - c) >= 2)                        possible = true;                    if (possible)                        out.println("NO");                    else                        out.println("YES");                }            }        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
