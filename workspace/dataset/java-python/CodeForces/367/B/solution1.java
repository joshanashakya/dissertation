import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Arrays;import java.io.IOException;import java.util.Random;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BSerejaAnsAnagrams solver = new BSerejaAnsAnagrams();            solver.solve(1, in, out);            out.close();        }    }     static class BSerejaAnsAnagrams {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int m = in.ri();            int p = in.ri();            long[] a = in.rl(n);            long[] b = in.rl(m);            int leftShift = (int) Math.min((long) m * p, n + 1);            MultiSetHasher hasher = new SparseMultiSetHasher(n + m);            for (int i = 0; i < n; i++) {                a[i] = hasher.hash(a[i]);            }            long target = 0;            for (int i = 0; i < m; i++) {                b[i] = hasher.hash(b[i]);                target = hasher.merge(target, b[i]);            }            int ans = 0;            boolean[] ok = new boolean[n];            for (int i = 0; i < p && i < n; i++) {                long sum = 0;                for (int j = i; j < n; j += p) {                    sum = hasher.merge(sum, a[j]);                    if (j >= leftShift) {                        sum = hasher.remove(sum, a[j - leftShift]);                    }                    if (sum == target) {                        ok[j - p * (m - 1)] = true;                        ans++;                    }                }            }             out.println(ans);            for (int i = 0; i < n; i++) {                if (ok[i]) {                    out.append(i + 1).append(' ');                }            }        }     }     static interface LongEntryIterator {        boolean hasNext();         void next();         long getEntryKey();         long getEntryValue();     }     static interface ILongModular {        long getMod();         default long plus(long a, long b) {            return DigitUtils.modplus(a, b, getMod());        }         default long subtract(long a, long b) {            return DigitUtils.modsub(a, b, getMod());        }     }     static class Hasher {        private long time = System.nanoTime() + System.currentTimeMillis() * 31L;         public int shuffle(long z) {            z += time;            z = (z ^ (z >>> 33)) * 0x62a9d9ed799705f5L;            return (int) (((z ^ (z >>> 28)) * 0xcb24d0a5c88c35b3L) >>> 32);        }         public int hash(long x) {            return shuffle(x);        }     }     static class DigitUtils {        private DigitUtils() {        }         public static long modsub(long a, long b, long mod) {            long ans = a - b;            if (ans < 0) {                ans += mod;            }            return ans;        }         public static long modplus(long a, long b, long mod) {            long ans = a + b;            if (ans >= mod) {                ans -= mod;            }            return ans;        }     }     static class RandomWrapper {        private Random random;        public static final RandomWrapper INSTANCE = new RandomWrapper();         public RandomWrapper() {            this(new Random());        }         public RandomWrapper(Random random) {            this.random = random;        }         public RandomWrapper(long seed) {            this(new Random(seed));        }         public long nextLong(long l, long r) {            return nextLong(r - l + 1) + l;        }         public long nextLong(long n) {            return Math.round(random.nextDouble() * (n - 1));        }     }     static class MultiSetHasherImpl implements MultiSetHasher {        static LongModular2305843009213693951 mod = LongModular2305843009213693951.getInstance();         public long hash(long x) {            return RandomWrapper.INSTANCE.nextLong(1, mod.getMod() - 1);        }         public long merge(long a, long b) {            return mod.plus(a, b);        }         public long remove(long a, long b) {            return mod.subtract(a, b);        }     }     static class LongHashMap {        private int now;        private int[] slot;        private int[] version;        private int[] next;        private long[] keys;        private long[] values;        private int alloc;        private boolean[] removed;        private int mask;        private int size;        private boolean rehash;        private Hasher hasher = new Hasher();         public LongHashMap(int cap, boolean rehash) {            now = 1;            this.mask = (1 << (32 - Integer.numberOfLeadingZeros(cap - 1))) - 1;            slot = new int[mask + 1];            version = new int[slot.length];            next = new int[cap + 1];            keys = new long[cap + 1];            values = new long[cap + 1];            removed = new boolean[cap + 1];            this.rehash = rehash;        }         private void doubleCapacity() {            int newSize = Math.max(next.length + 10, next.length * 2);            next = Arrays.copyOf(next, newSize);            keys = Arrays.copyOf(keys, newSize);            values = Arrays.copyOf(values, newSize);            removed = Arrays.copyOf(removed, newSize);        }         public void alloc() {            alloc++;            if (alloc >= next.length) {                doubleCapacity();            }            next[alloc] = 0;            removed[alloc] = false;            size++;        }         private void rehash() {            int[] newSlots = new int[Math.max(16, slot.length * 2)];            int[] newVersions = new int[newSlots.length];            int newMask = newSlots.length - 1;            for (int i = 0; i < slot.length; i++) {                access(i);                if (slot[i] == 0) {                    continue;                }                int head = slot[i];                while (head != 0) {                    int n = next[head];                    int s = hash(keys[head]) & newMask;                    next[head] = newSlots[s];                    newSlots[s] = head;                    head = n;                }            }            this.slot = newSlots;            this.version = newVersions;            now = 0;            this.mask = newMask;        }         private int hash(long x) {            return hasher.hash(x);        }         public void put(long x, long y) {            put(x, y, true);        }         public void put(long x, long y, boolean cover) {            int h = hash(x);            int s = h & mask;            access(s);            if (slot[s] == 0) {                alloc();                slot[s] = alloc;                keys[alloc] = x;                values[alloc] = y;            } else {                int index = findIndexOrLastEntry(s, x);                if (keys[index] != x) {                    alloc();                    next[index] = alloc;                    keys[alloc] = x;                    values[alloc] = y;                } else if (cover) {                    values[index] = y;                }            }            if (rehash && size >= slot.length) {                rehash();            }        }         public long getOrDefault(long x, long def) {            int h = hash(x);            int s = h & mask;            access(s);            if (slot[s] == 0) {                return def;            }            int index = findIndexOrLastEntry(s, x);            return keys[index] == x ? values[index] : def;        }         public long get(long x) {            return getOrDefault(x, 0);        }         private int findIndexOrLastEntry(int s, long x) {            int iter = slot[s];            while (keys[iter] != x) {                if (next[iter] != 0) {                    iter = next[iter];                } else {                    return iter;                }            }            return iter;        }         private void access(int i) {            if (version[i] != now) {                version[i] = now;                slot[i] = 0;            }        }         public LongEntryIterator iterator() {            return new LongEntryIterator() {                int index = 1;                int readIndex = -1;                  public boolean hasNext() {                    while (index <= alloc && removed[index]) {                        index++;                    }                    return index <= alloc;                }                  public long getEntryKey() {                    return keys[readIndex];                }                  public long getEntryValue() {                    return values[readIndex];                }                  public void next() {                    if (!hasNext()) {                        throw new IllegalStateException();                    }                    readIndex = index;                    index++;                }            };        }         public String toString() {            LongEntryIterator iterator = iterator();            StringBuilder builder = new StringBuilder("{");            while (iterator.hasNext()) {                iterator.next();                builder.append(iterator.getEntryKey()).append("->").append(iterator.getEntryValue()).append(',');            }            if (builder.charAt(builder.length() - 1) == ',') {                builder.setLength(builder.length() - 1);            }            builder.append('}');            return builder.toString();        }     }     static interface MultiSetHasher {        long hash(long x);         long merge(long a, long b);         long remove(long a, long b);     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(int c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            return append('\n');        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class LongModular2305843009213693951 implements ILongModular {        private static long mod = 2305843009213693951L;        private static final LongModular2305843009213693951 INSTANCE = new LongModular2305843009213693951();         private LongModular2305843009213693951() {        }         public static final LongModular2305843009213693951 getInstance() {            return INSTANCE;        }         public long getMod() {            return mod;        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         public void populate(long[] data) {            for (int i = 0; i < data.length; i++) {                data[i] = readLong();            }        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public long[] rl(int n) {            long[] ans = new long[n];            populate(ans);            return ans;        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public long readLong() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             long val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }     static class SparseMultiSetHasher extends MultiSetHasherImpl {        private LongHashMap map;         public SparseMultiSetHasher(int cap) {            map = new LongHashMap(cap, true);        }         public long hash(long x) {            long ans = map.getOrDefault(x, -1);            if (ans == -1) {                ans = super.hash(x);                map.put(x, ans);            }            return map.get(x);        }     }} 
