import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.PriorityQueue;import java.util.Random;import java.util.StringTokenizer;Â public class Solution{		    public static void main(String[] args) throws IOException {         	FastScanner fs = new FastScanner();    	PrintWriter out = new PrintWriter(System.out);    	    	    		    	int tt = 1;    	while(tt-->0) {    		    		int n = fs.nextInt(), m = fs.nextInt(), p = fs.nextInt();    		int[] a = new int[n+1], b = new int[m+1];    		for(int i=1;i<=n;i++) a[i] = fs.nextInt();    		for(int i=1;i<=m;i++) b[i] = fs.nextInt();    		    		    		ArrayList<Integer> ans = new ArrayList<>();    		    		for(int i=1;i<=Math.min(n, p);i++) {    			int cur = i;    			if(cur+(long)(m-1)*p>n) break;    			HashMap<Integer, Integer> map = new HashMap<>();    			    			for(int j=1;j<=m;j++) map.put(b[j], map.getOrDefault(b[j], 0)+1);    			    			int size = map.size();    			    			int cnt = 0;    			    			for(int j=cur;j<=cur+(m-1)*p;j+=p) {    				if(map.containsKey(a[j])) {    					map.put(a[j], map.get(a[j])-1);    					if(map.get(a[j])==0) cnt++;    				}    			}    			    			if(cnt==size) ans.add(cur);    			if(cur+(long)m*p>n) continue;    			cur = cur + (m)*p;    			    			while(cur<=n) {    				int pre = cur - m*p;    				if(map.containsKey(a[pre])) {    					map.put(a[pre], map.get(a[pre])+1);    					if(map.get(a[pre])==1) cnt--;    				}    				if(map.containsKey(a[cur])) {    					map.put(a[cur], map.get(a[cur])-1);    					if(map.get(a[cur])==0) cnt++;    				}    				if(cnt==size) ans.add(cur-(m-1)*p);    				cur += p;    			}    			    		}    		    		Collections.sort(ans);    		out.println(ans.size());    		for(int i: ans) out.print(i+" ");    		out.println();    		    		    		    	}    	    		    		    		    	out.close();    		    }                                                  static final Random random=new Random();    	    static void ruffleSort(int[] a) {    	int n=a.length;//shuffle, then sort     	for (int i=0; i<n; i++) {    		int oi=random.nextInt(n); int temp=a[oi];    		a[oi]=a[i]; a[i]=temp;    	}    	Arrays.sort(a);    }             static void reverse(int[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		int temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }        static void reverse(long[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++){    		long temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }            static <T> void reverse(T[] arr, int l, int r) {    	for(int i=l;i<l+(r-l)/2;i++) {    		T temp = arr[i]; arr[i] = arr[r-i+l-1]; arr[r-i+l-1] = temp;    	}    }    	    	    static class FastScanner{    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    	StringTokenizer st = new StringTokenizer("");         	public String next(){    		while(!st.hasMoreElements()){    			try{    				st = new StringTokenizer(br.readLine());    			} catch(IOException e){    				e.printStackTrace();    			}    		}    		return st.nextToken();    	}    		    	public String nextLine() throws IOException {    		return br.readLine();    	}    		    	public int nextInt(){    		return Integer.parseInt(next());    	}         	public int[] readArray(int n){    		int[] a = new int[n];    		for(int i=0;i<n;i++)    			a[i] = nextInt();    		return a;    	}    		    	public long nextLong() {    		return Long.parseLong(next());    	}    		    	public char nextChar() {    		return next().toCharArray()[0];    	}    }   	}
