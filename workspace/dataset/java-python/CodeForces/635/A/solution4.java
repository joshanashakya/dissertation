import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigDecimal;import java.math.BigInteger;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.LinkedList;import java.util.Map;import java.util.Map.Entry;import java.util.PriorityQueue;import java.util.Stack;import java.util.StringTokenizer;import java.util.TreeMap;import java.util.TreeSet; public class byo {	static long gcd(long a, long b) { 		if (b == 0)			return a;		return gcd(b, a % b);	}	static char addc(char a,char b) {		int x=Integer.parseInt(a+"");		int y=Integer.parseInt(b+"");		int z=x+y;		if(z<=9) {			return (char)('0'+z);		}		z=z%10;		return (char)('0'+z);	}	static String add(String a,String b) {		String r="";		if(a.length()>=b.length()) {			int ai=a.length()-1;int bi=b.length()-1;			while(bi>=0) {				char c=addc(a.charAt(ai),b.charAt(bi));				ai--;bi--;								r=c+r;			}			while(ai>=0) {				r=a.charAt(ai)+r;ai--;			}		}		else {			int ai=a.length()-1;int bi=b.length()-1;			while(ai>=0) {				char c=addc(a.charAt(ai),b.charAt(bi));				ai--;bi--;								r=c+r;			}			while(bi>=0) {				r=b.charAt(bi)+r;bi--;			}		}				String f="";		int o=0;		while(o<r.length() && r.charAt(o)=='0') {			o++;		}		while(o<r.length()) {			f+=r.charAt(o);o++;		}		if(f.length()==0)return "0";		return f;	}	static long sub(String b,boolean flag) {		StringBuilder re=new StringBuilder();		for(int i=0;i<b.length();i++) {			if(b.charAt(i)=='0') {				if(re.length()==0)continue;				re.append('0');			}			else {				re.append((char)('9'+'1'-b.charAt(i)));			}		}		if(re.length()==0) {			return 0;		}		if(flag) {			StringBuilder o=new StringBuilder();			for(int i=0;i<re.length();i++) {				if(re.charAt(i)=='0') {					o.append('9');				}				else					if(re.charAt(i)=='1' && o.length()==0) {						continue;					}					else						o.append((char)(re.charAt(i)-1));			}			if(o.length()==0) {				return 0;			}			return Long.parseLong(o.toString());		}		return Long.parseLong(re.toString());	}	static long k;static int n;	static char[]in;	static HashSet<StringBuilder>[]sets;	static StringBuilder [][][]memo;	static int x=1;	static int sumbm(int u,int d,int l,int r,char[][]in) {		int s=0;		for(int i=u;i<=d;i++) {			for(int j=l;j<=r;j++) {				if(in[i][j]=='*') {					s++;				}			}		}		return s;	}    public static void main(String[] args) throws Exception{        MScanner sc = new MScanner(System.in);        PrintWriter pw = new PrintWriter(System.out);        int r=sc.nextInt();int c=sc.nextInt();int n=sc.nextInt();int k=sc.nextInt();        char[][]in=new char[r][c];        for(int i=0;i<n;i++) {        	in[sc.nextInt()-1][sc.nextInt()-1]='*';        }        int ans=0;        for(int i=0;i<r;i++) {        	for(int j=0;j<c;j++) {        		for(int z=i;z<r;z++) {                	for(int o=j;o<c;o++) {                		int sum=sumbm(i,z,j,o,in);                		if(sum>=k)ans++;                	}                }        	}        }        pw.println(ans);        pw.flush();    }    static class tri implements Comparable<tri>{    	int x;int y;    	tri(int a,int b){    		x=a;y=b;    	}		@Override		public int compareTo(tri o) {			if(x!=o.x) {				return x-o.x;			}				return y-o.y;					}		public String toString() {			return "("+x+" "+y+")";		}    }    static class MScanner {        StringTokenizer st;        BufferedReader br;         public MScanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public boolean ready() throws IOException {            return br.ready();        }     }}
