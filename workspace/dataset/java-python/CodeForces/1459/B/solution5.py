# def solve(n, left, position=(0, 0)):#     global lattice#     global points#     if lattice[position[0] + n][position[1] + n][1][left] != 0:#         return#     lattice[position[0] + n][position[1] + n][1][left] = 1#     if left == 0 and lattice[position[0] + n][position[1] + n][0] == 0:#         points += 1#         lattice[position[0] + n][position[1] + n] = (1, lattice[position[0] + n][position[1] + n][1])#         return#     if left >= 2:#         solve(n, left-2, (position[0] + 1, position[1] + 1))#         solve(n, left-2, (position[0] + 1, position[1] - 1))#         solve(n, left-2, (position[0] - 1, position[1] + 1))#         solve(n, left-2, (position[0] - 1, position[1] - 1))#     else:#         solve(n, left-1, (position[0] + 1, position[1]))#         solve(n, left-1, (position[0] - 1, position[1]))#         solve(n, left-1, (position[0], position[1] - 1))#         solve(n, left-1, (position[0], position[1] + 1))### points = 0# n = int(input())# lattice = [[(0, [0 for _ in range(n+1)]) for _ in range(2*n+1)] for _ in range(2*n+1)]# solve(n, n)# print(points)n = int(input())if n % 2:    n = (n+1) // 2    print(2*n*(n+1))else:    n = n // 2 + 1    print(n * n)
