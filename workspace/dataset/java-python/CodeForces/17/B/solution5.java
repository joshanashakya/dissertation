import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet; public class Solution {    private static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));     public static void main(String[] args) throws IOException {         int n= nextInt();        int arr[]= readIntArray();        int q= nextInt();        int sum=0;        int parents[]= new int[n+1];        HashMap<Integer,int[]> map= new HashMap<>();        while(q-->0){            int inp[]= readIntArray();            int child= inp[1];            int parent= inp[0];            int cost= inp[2];            if(map.containsKey(child)){                if(map.get(child)[1]>cost){                    sum-= map.get(child)[1];                    sum+=cost;                    parents[child]=parent;                    map.put(child,new int[]{parent,cost});                }            }            else{                map.put(child,new int[]{parent,cost});                parents[child]=parent;                sum+=cost;            }        }        int withoutParent=0;        for(int i=1;i<=n;i++){            if(parents[i]==0)                withoutParent++;        }                if(withoutParent==1)            println(sum);        else            println(-1);     }   // *********************************************************************************************** //     public static String readLine() throws IOException{        return br.readLine();    }    public static String[] readStringArray()throws  IOException{        return br.readLine().split(" ");    }    public static int[] readIntArray()throws IOException{        return Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();    }    public static long[] readLongArray() throws IOException{        return Arrays.stream(br.readLine().split(" ")).mapToLong(Long::parseLong).toArray();    }    public static long nextLong()throws IOException{        return Long.parseLong(br.readLine().trim());    }    public static int nextInt()throws IOException{        return Integer.parseInt(br.readLine().trim());    }     public static void println(String out){        System.out.println(out);    }     public static void println(int out){        System.out.println(out);    }     public static void println(double out){        System.out.print(out);    }     public static void print(String out){        System.out.print(out);    }     public static void print(int out){        System.out.print(out);    }     public static void print(double out){        System.out.print(out);    }}
