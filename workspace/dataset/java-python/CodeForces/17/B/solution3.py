import sysinput = sys.stdin.readline############ ---- Input Functions ---- ############def inp():    return(int(input()))def inlt():    return(list(map(int,input().split())))def insr():    s = input()    return(list(s[:len(s) - 1]))def invr():    return(map(int,input().split())) 	 from typing import List  def minCostCreateHierarchy(n: int, edges) -> int:    # sort by distance    # (i, j, d)    # take third element for sort    edges.sort(key=lambda x: x[2])     has_boss = [False for _ in range(n+1)]     res = 0    for u, v, d in edges:        if not has_boss[v]:            res += d            has_boss[v] = True    return res  def task4(n: int, qualifications: List[int],          statements: List[List[int]]) -> int:    """    Parameters:    :n (int): number of company employees    :qualifications (list): staff qualifications    :statements (list): list of statements    :return: minimum cost of creating a hierarchy    """    # qualifications are needed only to state that no cycles exist    subordinates = set(statement[1] for statement in statements)    if len(subordinates) != n - 1:        return -1    return minCostCreateHierarchy(n, statements)	n = inp()qualifications = inlt()statements = []m = inp()for i in range(m):    statements.append(inlt()) print(task4(n, qualifications, statements))
