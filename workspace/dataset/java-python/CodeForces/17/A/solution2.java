import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskD solver = new TaskD();        solver.solve(in, out);        out.close();    }     static class TaskD {    	List<Integer> primes = new ArrayList<Integer>();    	        public void solve(InputReader in, PrintWriter out) {        	int n = in.nextInt();        	int k = in.nextInt();        	boolean prime[] = new boolean[n+1];        	for(int i=0;i<=n;i++)        		prime[i] = true;        	        	for(int p = 2; p*p<=n; p++){        		        		if(prime[p] == true){        			        			for(int i = p*p; i <= n; i += p)        				prime[i] = false;        		}        	}        	        	        	for(int i = 2; i <= n; i++){        		if(prime[i] == true){        			        			primes.add(i);        		}        		        			        	}        	        	        	int count = 0;        	        	level:         	for(int i=0; i<primes.size(); i++){        		if((i+1)<primes.size() && primes.get(i)+primes.get(i+1)<n){        			        			int temp = primes.get(i)+primes.get(i+1)+1;        			for(int j=0; j<primes.size();j++){        				        				if(temp==primes.get(j)){        					        					count++;        					continue level;        				}        			}        		}        		        	}        	        	if(count>=k)out.println("YES");        	else out.println("NO");        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }   }
