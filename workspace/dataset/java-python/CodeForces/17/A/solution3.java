import java.io.*;import java.util.*; public class MAIN{     private static final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));     public static void main(String[] args) throws Exception{         String[] s = reader.readLine().split(" ");        int n = Integer.parseInt(s[0]);        int k = Integer.parseInt(s[1]);         List<Integer> primes = getPrimes(n);        int count = 0;        for(int i=0;i<primes.size();++i){            for(int j=1;j<i;++j){                if(1+primes.get(j-1)+primes.get(j) == primes.get(i)){                    ++count;                }            }        }         System.out.println((count >= k) ? "YES":"NO");     }     private static class Pair{        int first;        int second;        public Pair(int first, int second) {            this.first = first;            this.second = second;        }    }     private static List<List<Integer>> getCombinations(int[] a, int count){        List<List<Integer>> ret = new ArrayList<>(0);        if(a == null || a.length > 64 || count <= 0 || count > a.length){            return null;        } else {            long lim = (1L<<a.length);            for(long i=0;i<lim;++i){                List<Integer> poss = getBitPositionList(i);                if(poss.size() == count){                    List<Integer> list = new ArrayList<>(0);                    for(int j=0;j< poss.size();++j){                        list.add(a[poss.get(j)]);                    }                    ret.add(list);                }            }        }        return ret;     }     private static int getBitCount(long n){        int onCount = 0;        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                ++onCount;            }        }        return onCount;    }    private static List<Integer> getBitPositionList(long n){        List<Integer> idxs = new ArrayList<>(0);        for(long i=0L;i<64L;++i){            if((n&(1L<<i)) != 0){                idxs.add(((int) i));            }        }        return idxs;    }    private static Pair getIrreducibleFraction(int x, int y){        int min = (x <= y) ? x : y;        for(int i=2; i<=min; ++i){            while (x%i==0 && y%i==0){                x = x/i;                y = y/i;            }        }        return new Pair(x,y);    }     private static int getDigitSumInBase(int n, int b){        int sum = 0;        while (true){            sum += n%b;            n = n/b;            if(n==0){                break;            }        }        return sum;    }     private static List<Integer> getPrimes(int n){         List<Integer> primes = new ArrayList<>(0);         boolean[] flags = new boolean[n+1];        for(int i=0, len = n+1; i<len; ++i){            flags[i] = true;        }        flags[0] = false;        flags[1] = false;         for(int i=2;i*i<=n;++i){            if(flags[i]){                for(int j = i*i; j <= n; j += i){                    flags[j] = false;                }            }        }         for(int i=0, len = n+1; i < len; ++i){            if(flags[i]){                primes.add(i);            }        }         return primes;    }    private static boolean isPrime(int n){        if(n<=1){            return false;        } else if(n==2){            return true;        } else {            for(int i=2;i<n;++i){                if(n%i == 0){                    return false;                }            }        }        return true;    } }
