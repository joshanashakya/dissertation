import java.io.*;import java.util.*; public class B {  public static void main(String[] args) throws IOException{    FastReader fr = new FastReader();    PrintWriter pr = new PrintWriter(new OutputStreamWriter(System.out));    int t = fr.nextInt();     while (t-- > 0) {      int n = fr.nextInt();      TreeMap<Integer, List<Integer>> map = new TreeMap<>();       for (int i = 0; i < n; i++) {        int add = fr.nextInt();        map.putIfAbsent(add, new ArrayList<>());        map.get(add).add(i + 1);      }       // find smallest key with size of 1 and print index      int ans = -1;      for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {        if (entry.getValue().size() == 1) {          ans = (entry.getValue().get(0));          break;        }      }       pr.println(ans);    }     pr.close();  }   static class Pair {      int x, y;      public Pair(int x, int y) {          this.x = x;          this.y = y;      }  }   static int toInt(String s) {    return Integer.parseInt(s);  }   static class FastReader   {       BufferedReader br;       StringTokenizer st;        public FastReader() throws FileNotFoundException       {           br = new BufferedReader(new InputStreamReader(System.in));       }        String next()       {           while (st == null || !st.hasMoreElements())           {               try              {                   st = new StringTokenizer(br.readLine());               }               catch (IOException  e)               {                   e.printStackTrace();               }           }           return st.nextToken();       }        int nextInt()       {           return Integer.parseInt(next());       }        long nextLong()       {           return Long.parseLong(next());       }        double nextDouble()       {           return Double.parseDouble(next());       }        String nextLine()       {           String str = "";           try          {               str = br.readLine();           }           catch (IOException e)           {               e.printStackTrace();           }           return str;       }   }}
