import java.util.Scanner;import java.io.*;import java.util.*;import java.math.*;import java.lang.*;import static java.lang.Math.*;  public class Check2 {	static class InputReader	{		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int numChars;		private SpaceCharFilter filter;				public InputReader(InputStream stream)		{			this.stream = stream;		}				public int read()		{			if (numChars==-1) 				throw new InputMismatchException();						if (curChar >= numChars)			{				curChar = 0;				try 				{					numChars = stream.read(buf);				}				catch (IOException e)				{					throw new InputMismatchException();				}								if(numChars <= 0)									return -1;			}			return buf[curChar++];		}	 		public String nextLine()		{			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));			String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;		}		public int nextInt()		{			int c = read();						while(isSpaceChar(c)) 				c = read();						int sgn = 1;						if (c == '-') 			{				sgn = -1;				c = read();			}						int res = 0;			do 			{				if(c<'0'||c>'9') 					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			while (!isSpaceChar(c)); 						return res * sgn;		}				public long nextLong() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') 			{				sgn = -1;				c = read();			}			long res = 0;						do 			{				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			while (!isSpaceChar(c));				return res * sgn;		}				public double nextDouble() 		{			int c = read();			while (isSpaceChar(c))				c = read();			int sgn = 1;			if (c == '-') 			{				sgn = -1;				c = read();			}			double res = 0;			while (!isSpaceChar(c) && c != '.') 			{				if (c == 'e' || c == 'E')					return res * Math.pow(10, nextInt());				if (c < '0' || c > '9')					throw new InputMismatchException();				res *= 10;				res += c - '0';				c = read();			}			if (c == '.') 			{				c = read();				double m = 1;				while (!isSpaceChar(c)) 				{					if (c == 'e' || c == 'E')						return res * Math.pow(10, nextInt());					if (c < '0' || c > '9')						throw new InputMismatchException();					m /= 10;					res += (c - '0') * m;					c = read();				}			}			return res * sgn;		}				public String readString() 		{			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do 			{				res.appendCodePoint(c);				c = read();			} 			while (!isSpaceChar(c));						return res.toString();		}	 		public boolean isSpaceChar(int c) 		{			if (filter != null)				return filter.isSpaceChar(c);			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}	 		public String next() 		{			return readString();		}				public interface SpaceCharFilter 		{			public boolean isSpaceChar(int ch);		}	}	           	public static void main(String args[]) throws Exception	{		InputReader in=new InputReader(System.in);				PrintWriter w=new PrintWriter(System.out);			  int n=in.nextInt();        int m=in.nextInt();        int flag=0;        int flag2=1;        for(int i=0;i<m;i++){                                                int k=in.nextInt();            int a[]=new int[k];            flag=0;            HashMap <Integer,Integer> map=new HashMap();            for(int ie=0;ie<k;ie++){                a[ie]=in.nextInt();                                if(map.containsKey(-a[ie])&&flag2==1){                    flag=1;                }                                map.put(a[ie],1);                                            }                                    if(flag==0){                flag2=0;            }                                                                                }        if(flag==1){            w.println("NO");        }        else            w.println("YES");                                                        	   w.close();								}          static int gcd(int a,int b){                  if(b==0){             return a;         }         return gcd(b,a%b);                       }     }
