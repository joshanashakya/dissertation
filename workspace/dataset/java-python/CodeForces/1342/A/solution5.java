import java.io.*; import java.util.*;   public class Solve{    static final int MOD=1000000007;       public static void main (String[] args) throws Exception{         BufferedReader in=new BufferedReader(new InputStreamReader(System.in));          PrintWriter out=new  PrintWriter(System.out,true);                         int t=Integer.parseInt(in.readLine());         while(t-->0)          solve(in,out);           }     private static void solve(BufferedReader in,PrintWriter out)throws Exception {        String[] xy=in.readLine().trim().split(" ");        String[] ab=in.readLine().trim().split(" ");        long x=Math.max(Integer.parseInt(xy[0]), Integer.parseInt(xy[1]));        long y=Math.min(Integer.parseInt(xy[0]), Integer.parseInt(xy[1]));        long ans=0;        if(2*Integer.parseInt(ab[0])<Integer.parseInt(ab[1])){            ans=(x+y)*Long.parseLong(ab[0]);        }else{            ans=(x-y)*Long.parseLong(ab[0])+(y*Long.parseLong(ab[1]));        }        out.println(ans);      }       private static long power(int n,int p,int m){        if(p==0)return 1;                long temp=power(n, p/2, m)%m;         if(p%2==0){            return (temp*temp)%m;        }else return (n*temp*temp)%m;    }    private int gcd(int a, int b) {        if(b==0)            return a;        else            return gcd(b, a % b);    }      private static void sieve(int n){         boolean[] prime=new boolean[n];         for(int i=0;i<n;i++)             prime[i]=true;         for(int i=2;i*i<n;i++){            if(prime[i]){                for(int j=i*i;j<n;j+=i)                 prime[j]=false;            }        }         for ( int i = 2; i < prime.length; i++) {             if(prime[i])              System.out.print(i+" ");         }                   }     private static void segmentedSieve(int low,int high){         int sqrt=(int) Math.sqrt(high);        int[] prime=new int[sqrt+1];        boolean[] arr=new boolean[sqrt+1];         for(int i=0;i<=sqrt;i++)            arr[i]=true;         int k=0;        for(int i=2;i<=sqrt;i++){           //generate all prime numbers till square root of high            if(arr[i]){                prime[k]=i;                                k++;                for (int j = i*i; j <= sqrt; j+=i)                     arr[j]=false;                                     }        }        // System.out.println(Arrays.toString(prime));         int diff=high-low+1;          // arr size of required length         arr=new boolean[diff];        for(int i=0;i<diff;i++)             arr[i]=true;                for(int i=0;i<k;i++){               // mark false to multiple of prime numbers in the range of low to high            int div=(low/prime[i])*prime[i];        // It gives multiple of prime[i] nearest to low             if(div<low || div==prime[i])               div+=prime[i];            for(int j=div;j<=high;j+=prime[i]){                 if(j!=prime[i])               arr[j-low]=false;            }        }        for(int i=0;i<diff;i++){                //print prime numbers in the given segment            if(arr[i] && (i+low)!=1){                System.out.print(i+low+" ");            }        }        System.out.println();     }     class Pair implements Comparable<Pair>{        int a;        int b;        public Pair(int a,int b){            this.a=a;            this.b=b;        }            @Override        public int compareTo(Pair o) {          if(this.a>o.a) return this.a-o.a;          else if(this.a<o.a)              return this.b-o.b;                    else  return 0;                 }    }}
