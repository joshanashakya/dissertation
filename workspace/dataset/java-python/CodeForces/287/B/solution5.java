import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.math.BigInteger; public class Pipeline_CodeForces { 	public static BigInteger sumSuffix(long idx, int k){		BigInteger t2 = new BigInteger(2+"");		BigInteger tIDX = new BigInteger(idx+"");				BigInteger k1 = new BigInteger(k+"");		BigInteger k2 = new BigInteger((k + 1)+"");		BigInteger n1 = (k1.multiply(k2)).divide(t2); 		BigInteger idx1 = new BigInteger(idx+"");		BigInteger idx2 = new BigInteger((idx + 1)+"");		BigInteger n2 = (idx1.multiply(idx2)).divide(t2); 		return n1.subtract(n2).add(tIDX);			}		public static long BSfindfirstSmaller(BigInteger N, int k){		long start = 1;		long end = k;		long mid = 0;		while(start < end){			mid = start + (end - start) / 2;//			System.out.println("start: "+ start);//			System.out.println("mid: "+ mid);//			System.out.println("end: "+ end);			if(sumSuffix(mid, k).compareTo(N) < 0){				end = mid;			}			else if(sumSuffix(mid, k).compareTo(N) > 0){				start = mid + 1;			}			else {//				System.out.println(mid+" here  ");				return k - mid + 1;			}		}//		System.out.println("end");//		System.out.println(end);		return k - end + 2;	}			public static void main(String[] args) throws IOException {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		PrintWriter out = new PrintWriter(System.out);		String[]r = br.readLine().split(" ");		BigInteger N = (new BigInteger(r[0])).subtract(new BigInteger("1"));		int k = Integer.parseInt(r[1]) - 1;		BigInteger max = sumSuffix(1, k);		if(max.compareTo(N) < 0)			out.println(-1);		else if(N.equals(new BigInteger("0")))			out.println(0);		else if(N.compareTo(new BigInteger(k+"")) <= 0)			out.println(1);		else			out.println(BSfindfirstSmaller(N, k));				out.flush();		out.close();	}}
