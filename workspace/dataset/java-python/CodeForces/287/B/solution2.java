import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader; public class BinarySearchAdv { 	public static void main(String[] args) throws NumberFormatException, IOException {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringBuilder sb = new StringBuilder();		String s[];		s = br.readLine().split(" ");		long n = Long.parseLong(s[0]);	long k = Long.parseLong(s[1]);	long sum = (k*k-k)/2 +1;//	System.out.println(sum+" sum");	//	System.out.println((999999998*999999998-999999998)/2+1);	if(n==1)		System.out.println(0);	else if(k>=n)		System.out.print(1);	else if(sum==n)	System.out.print(k-1);		else if(sum<n)	{		System.out.print(-1);	}else {	long ans = binarySearch(2,k,sum,n);//	System.out.println(ans);//	System.out.println(k-ans);//	System.out.println(sum - ((ans*ans-ans)/2 +1));//	System.out.println(((ans*ans-ans)/2 +1));	if(sum - ((ans*ans-ans)/2)==n)	{		//	System.out.println("eq");		System.out.println(k-ans);	}else		System.out.println((k-ans)+1);	}	} 	private static long binarySearch(long start,long end,long sum,long n) {		long index=-1;		while(start<=end) {		long mid = (start+end)/2;					if(calCheck(mid,sum)==n)		return mid;				else if(n>calCheck(mid,sum))		{			index=mid;				end=mid-1;			}			else {				start=mid+1;			}		}		return index;			} 	private static long calCheck(long mid, long sum) {		return sum - ((mid*mid-mid)/2) ;	}}
