import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.PrintWriter;    public class A {   	public static void main(String[]args)throws IOException {		FastReader sc = new FastReader();		PrintWriter out = new PrintWriter(System.out);		char [][] arr = new char[4][4];		arr[0] = sc.nextLine().toCharArray();		arr[1] = sc.nextLine().toCharArray();		arr[2] = sc.nextLine().toCharArray();		arr[3] = sc.nextLine().toCharArray();		int white = 0;		int black = 0;		boolean found = false;		first:		for (int i = 0; i < 3; i++) { 			for (int j = 0; j < 3; j++) { 				white = 0;				black = 0;				if (arr[i][j] == '#')					white++;				else					black++; 				if (arr[i][j + 1] == '#')					white++;				else					black++; 				if (arr[i + 1][j] == '#')					white++;				else					black++; 				if (arr[i + 1][j + 1] == '#')					white++;				else					black++; 				if (white >= 3 || black >= 3) {					found = true;					break first;				} 			} 		}		out.println(found ? "YES" : "NO");		out.close();	}     // public static euclidTriplet euclidExtended(int a, int b) {// 	if (b == 0)// 		return new euclidTriplet(1, 0, a); // 	euclidTriplet ans = euclidExtended(b, a % b); // 	return new euclidTriplet(ans.y, ans.x - (a / b) * ans.y, ans.gcd);// }  // public static int  gcd(int a, int b) {// 	if (a == 0)// 		return b; // 	return gcd(b % a, a);// } } // class euclidTriplet {// 	int x, y, gcd;// 	euclidTriplet(int x, int y, int gcd) {// 		this.x = x;// 		this.y = y;// 		this.gcd = gcd;// 	}// }  // class comp implements Comparator<long []> {// 	public int compare(long [] arr1, long[] arr2) {// 		if ((2 * arr2[0] + arr2[1]) > (2 * arr1[0] + arr1[1]))// 			return 1; // 		else// 			return -1;// 	}// }  class FastReader { 	BufferedReader br;	StringTokenizer st; 	public FastReader() {		br = new BufferedReader(new InputStreamReader(System.in));	} 	String next() {		while (st == null || !st.hasMoreElements()) {			try {				st = new StringTokenizer(br.readLine());			} catch (IOException  e) {				e.printStackTrace();			}		}		return st.nextToken();	} 	int nextInt() {		return Integer.parseInt(next());	} 	int [] nextIntArray(int n) {		int [] arr = new int[n];		for (int i = 0; i < n; i++)			arr[i] = nextInt(); 		return arr; 	}  	long nextLong() {		return Long.parseLong(next());	} 	long [] nextLongArray(int n) {		long [] arr = new long[n];		for (int i = 0; i < n; i++)			arr[i] = nextLong(); 		return arr; 	} 	double nextDouble() {		return Double.parseDouble(next());	} 	String nextLine() {		String str = "";		try {			str = br.readLine();		} catch (IOException e) {			e.printStackTrace();		}		return str;	} }
