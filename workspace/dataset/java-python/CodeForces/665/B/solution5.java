import java.io.*;import java.util.*; public class Main {	static int t,n,m,k,mod=998244353,maxn=300005;    static long INF=(long)1e16;        void solve(PrintWriter out, Reader in) throws IOException{        n = in.nextInt();        m = in.nextInt();        k = in.nextInt();                int[] arr = new int[k+1];        for(int i=1;i<=k;i++) arr[i] = in.nextInt();                int ans = 0,tmp=0;        for(int i=0;i<n;i++){            for(int j=1;j<=m;j++){                int z=1;                tmp = in.nextInt();                                while(arr[z]!=tmp) z++;                ans+=z;                                for(int d=z;d>=2;d--){                    arr[d] = arr[d-1];                }                arr[1] = tmp;            }        }                out.println(ans);            }        static class Reader {     private InputStream mIs;    private byte[] buf = new byte[1024];    private int curChar;    private int numChars;     public Reader() {        this(System.in);    }     public Reader(InputStream is) {        mIs = is;    }     public int read() {        if (numChars == -1) {            throw new InputMismatchException();     }        if (curChar >= numChars) {            curChar = 0;            try {                numChars = mIs.read(buf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (numChars <= 0) {                return -1;            }        }        return buf[curChar++];    }     public String nextLine() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isEndOfLine(c));        return res.toString();    }     public String next() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        StringBuilder res = new StringBuilder();        do {            res.appendCodePoint(c);            c = read();        } while (!isSpaceChar(c));        return res.toString();    }     double nextDouble()    {        return Double.parseDouble(next());    }     public long nextLong() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        long res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public int nextInt() {        int c = read();        while (isSpaceChar(c)) {            c = read();        }        int sgn = 1;        if (c == '-') {            sgn = -1;            c = read();        }        int res = 0;        do {            if (c < '0' || c > '9') {                throw new InputMismatchException();            }            res *= 10;            res += c - '0';            c = read();        } while (!isSpaceChar(c));        return res * sgn;    }     public boolean isSpaceChar(int c) {        return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;    }     public boolean isEndOfLine(int c) {        return c == '\n' || c == '\r' || c == -1;    }     }    public static void main(String[] args) throws IOException {        PrintWriter out = new PrintWriter(System.out);        Reader in = new Reader();        Main solver = new Main();        solver.solve(out, in);        out.flush();        out.close();     }}
