import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintStream;import java.util.*; // Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail public class Ideone {	static char [][]a;	static int n;	public static void main(String args[]) throws Exception {		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		//int t = ni(br.readLine());		//int []a,c,ca;		int i,j,k,l,m,s;		n = 4;//ni(br.readLine());		a = new char[4][4];		for(i = 0; i< n; i++) {			a[i] = br.readLine().toCharArray();		}				for(i = 0; i< n; i++) {			for(j = 0; j< n; j++)				if(row(i,j) || column(i,j) || diagonal(i,j)) {					//if(diagonal(i,j)) { 					System.out.println("YES");					return;				}		}						System.out.println("NO"); 		//while(t-- > 0) { 								//}			}	 	private static boolean row(int i, int j) {		if(j + 2 >= n)			return false;		int count = 0;		for(int k =0; k <3; k++) {			if(a[i][j+k] == 'o')				return false;			else if(a[i][j+k] == 'x')				count++;		}		return count == 2;	}  	private static boolean diagonal(int i, int j) {				int count =0;		if(i + 2 < n && j+2 < n)		for(int k =0; k <3; k++) {			if(a[i+k][j+k] == 'o') {				 count= -1;				 break;				 }			else if(a[i+k][j+k] == 'x')				count++;		}		if( count >= 2 )			return true;				count =0;		if(i + 2 <n && j-2 >= 0)		for(int k =0; k <3; k++) {			if(a[i+k][j-k] == 'o')				 return false;			else if(a[i+k][j-k] == 'x')				count++;		}		return count >= 2;		}  	private static boolean column(int i, int j) { 		if(i + 2 >= n)			return false;		int count = 0;		for(int k =0; k <3; k++) {			if(a[i+k][j] == 'o')				return false;			else if(a[i+k][j] == 'x')				count++;		}		return count == 2;		}  	static Integer[] nIa(BufferedReader br) throws Exception {		String sa[] = br.readLine().split(" ");		Integer[] a = new Integer[sa.length];		for (int i = 0; i < sa.length; i++) {			a[i] = ni(sa[i]);		}		return a;	} 	static int[] nia(BufferedReader br) throws Exception {		String sa[] = br.readLine().split(" ");		int[] a = new int[sa.length];		for (int i = 0; i < sa.length; i++) {			a[i] = ni(sa[i]);		}		return a;	} 	static long[] nla(BufferedReader br) throws Exception {		String sa[] = br.readLine().split(" ");		long[] a = new long[sa.length];		for (int i = 0; i < sa.length; i++) {			a[i] = nl(sa[i]);		}		return a;	} 	static int ni(String s) {		return Integer.parseInt(s);	} 	static long nl(String s) {		return Long.parseLong(s);	} 	static float nf(String s) {		return Float.parseFloat(s);	} 	static double nd(String s) {		return Double.parseDouble(s);	} 	////// specific to problem 	static int[][] nia(BufferedReader br, int a[][]) throws Exception {		for (int i = 0; i < a.length; i++) {			String sa[] = br.readLine().split(" ");			a[i][0] = ni(sa[0]);			a[i][1] = ni(sa[1]);		}		return a;	} }
