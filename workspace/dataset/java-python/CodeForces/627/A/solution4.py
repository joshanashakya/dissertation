import sys,os,iofrom sys import stdinfrom math import log, gcd, ceilfrom collections import defaultdict, deque, Counterfrom heapq import heappush, heappopfrom bisect import bisect_left , bisect_rightimport math   alphabets = list('abcdefghijklmnopqrstuvwxyz')  def isPrime(x):    for i in range(2,x):        if i*i>x:            break        if (x%i==0):            return False    return Truedef ncr(n, r, p):      num = den = 1    for i in range(r):        num = (num * (n - i)) % p        den = (den * (i + 1)) % p    return (num * pow(den,                      p - 2, p)) % pdef primeFactors(n):     l = []    while n % 2 == 0:         l.append(2)        n = n / 2    for i in range(3,int(math.sqrt(n))+1,2):         while n % i== 0:             l.append(int(i))            n = n / i     if n > 2:         l.append(n)    return list(set(l))def power(x, y, p) : 	res = 1	x = x % p 	if (x == 0) : 		return 0	while (y > 0) : 		if ((y & 1) == 1) : 			res = (res * x) % p 		y = y >> 1	 # y = y/2 		x = (x * x) % p 			return res def SieveOfEratosthenes(n):    prime = [True for i in range(n+1)]    p = 2    while (p * p <= n):        if (prime[p] == True):            for i in range(p * p, n+1, p):                prime[i] = False        p += 1    return primedef countdig(n):    c = 0    while (n > 0):        n //= 10        c += 1    return cdef si():    return input()def prefix_sum(arr):    r = [0] * (len(arr)+1)    for i, el in enumerate(arr):        r[i+1] = r[i] + el    return rdef divideCeil(n,x):    if (n%x==0):        return n//x    return n//x+1def ii():    return int(input())def li():    return list(map(int,input().split()))def ws(s): sys.stdout.write(s + '\n')def wi(n): sys.stdout.write(str(n) + '\n')def wia(a): sys.stdout.write(' '.join([str(x) for x in a]) + '\n')def power_set(L):     cardinality=len(L)    n=2 ** cardinality    powerset = []        for i in range(n):        a=bin(i)[2:]        subset=[]        for j in range(len(a)):            if a[-j-1]=='1':                subset.append(L[j])        powerset.append(subset)    powerset_orderred=[]    for k in range(cardinality+1):        for w in powerset:            if len(w)==k:                powerset_orderred.append(w)            return powerset_orderreddef fastPlrintNextLines(a):    # 12    # 3    # 1    #like this    #a is list of strings    print('\n'.join(map(str,a))) def sortByFirstAndSecond(A):    A = sorted(A,key = lambda x:x[0])    A = sorted(A,key = lambda x:x[1])    return list(A) #__________________________TEMPLATE__________________OVER_______________________________________________________  if(os.path.exists('input.txt')):    sys.stdin = open("input.txt","r") ; sys.stdout = open("output.txt","w") else:    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline  def solve():    s,x = li()    andval = (s-x) /2    # print(andval)    if andval!=int(andval) or s<x or int(andval)&x:        print(0)    else:        w = andval        andval=int(andval)        andval = list(bin(andval)[2:]);x = list(bin(x)[2:])          s=andval[:]        if len(x)>len(s):            s = ['0']*(len(x)-len(s))+s        else:            x = ['0']*(len(s)-len(x))+x         andval=s[:]        ans=0        for i in range(len(s)-1,-1,-1):            if x[i]=='1':                ans+=1        # print(andval,x)        ans=2**ans        if w==0:            ans-=2        print(ans)     # s = list(bin(s)[1:]);x = list(bin(x)[1:])    # if len(x)>len(s):    #     s = [0]*(len(x)-len(s))+s    # else:    #     x = [0]*(len(s)-len(x))+x     # dp = [[0,0]]*(len(s))    # for i in range(len(s)-1,-1,-1):    #     if s[i]=='0' and x[i]=='0':    #         if i<len(s)-1:    #             dp[i][0]=dp[i+1][0]+dp[i+1][1]    #         else:    #             dp[i][0]=1    #         continue    #     if s[i]=='1' and x[i]=='1':                       t = 1# t = int(input())for _ in range(t):    solve()    
