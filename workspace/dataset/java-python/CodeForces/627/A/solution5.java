import java.io.*;import java.util.Arrays;import java.util.StringTokenizer;  public class Main {    static final int UNCALC = -1;    static long sum, xor;    static long memo[][];     public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out);        sum = sc.nextLong();        xor = sc.nextLong();        memo = new long[2][60];        for (long[] a : memo)            Arrays.fill(a, UNCALC);        out.println(dp(0, 0) - (xor == sum? 2 : 0));        out.flush();        out.close();    }     static long dp(int carry, int i) {        if (i == 60) return carry == 1 ? 0 : 1;        if (memo[carry][i] != UNCALC)            return memo[carry][i];        long cnt = 0;        int s = (sum & 1l << i) == 0 ? 0 : 1, x = (xor & 1l << i) == 0 ? 0 : 1;        if (s == 0 && x == 0 && carry == 0)            cnt = dp(1, i + 1) + dp(0, i + 1);        if (s == 0 && x == 1 && carry == 1)            cnt = 2 * dp(1, i + 1);        if (s == 1 && x == 0 && carry == 1)            cnt = dp(1, i + 1) + dp(0, i + 1);        if (s == 1 && x == 1 && carry == 0)            cnt = 2 * dp(0, i + 1);        return memo[carry][i] = cnt;    }      static class Scanner {         StringTokenizer st;        BufferedReader br;         public Scanner(InputStream system) {            br = new BufferedReader(new InputStreamReader(system));        }          public String next() throws IOException {            while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public String nextLine() throws IOException {            return br.readLine();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public double nextDouble() throws IOException {            return Double.parseDouble(next());        }         public char nextChar() throws IOException {            return next().charAt(0);        }         public Long nextLong() throws IOException {            return Long.parseLong(next());        }         public boolean ready() throws IOException {            return br.ready();        }          public int[] nextIntArray(int n) throws IOException {            int[] a = new int[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public long[] nextLongArray(int n) throws IOException {            long[] a = new long[n];            for (int i = 0; i < n; i++)                a[i] = nextLong();            return a;        }          public Integer[] nextIntegerArray(int n) throws IOException {            Integer[] a = new Integer[n];            for (int i = 0; i < n; i++)                a[i] = nextInt();            return a;        }         public double[] nextDoubleArray(int n) throws IOException {            double[] ans = new double[n];            for (int i = 0; i < n; i++)                ans[i] = nextDouble();            return ans;        }         public short nextShort() throws IOException {            return Short.parseShort(next());        }     }}
