#------------------------template--------------------------#import osimport sysfrom math import *from collections import *#from fractions import *from bisect import *from io import BytesIO, IOBasedef vsInput():    sys.stdin = open('input.txt', 'r')    sys.stdout = open('output.txt', 'w')BUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n")def value():return tuple(map(int,input().split()))def array():return [int(i) for i in input().split()]def Int():return int(input())def Str():return input()def arrayS():return [i for i in input().split()] #-------------------------code---------------------------##vsInput() def check(a,b):    i=0    #print(a+b)    while(i<len(a)):        if(a[i]=='-' or b[i]=='-'):            pass        elif(a[i]!=b[i]):            return False        i+=1    return True s=input()k=Int()n=len(s)s+='-'*kn+=k#print(s)ans=0for i in range(0,n):    #print(i,s[i])    for j in range(i,-1,-1):        l=i+1-j        #print(s[j:i+1],l)        if(l%2):            continue        a=s[j:j+l//2]        b=s[j+l//2:i+1]        flag=check(a,b)        if(flag):            ans=max(ans,l)print(ans)        
