import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.AbstractCollection;import java.util.PriorityQueue;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int n = in.nextInt();            int k = in.nextInt();            char[] d = in.next().toCharArray();            PriorityQueue<Integer> ind = new PriorityQueue<>();            for (int i = 1; i < n; i++) {                if (d[i - 1] == '4' && d[i] == '7') {                    ind.offer(i);                }            }            int prev = -2;            while (!ind.isEmpty()) {                int curInd = ind.poll();                if (prev - curInd == 1) {                    k = k % 2;                }                if (k == 0) break;                if (curInd % 2 == 1) {                    d[curInd - 1] = '4';                    d[curInd] = '4';                    if (curInd < n - 1 && d[curInd + 1] == '7') {                        ind.offer(curInd + 1);                    }                } else {                    d[curInd - 1] = '7';                    d[curInd] = '7';                    if (curInd > 1 && d[curInd - 2] == '4') {                        ind.offer(curInd - 1);                    }                }                prev = curInd;                k--;            }            out.println(d);        }     }     static class InputReader {        private StringTokenizer tokenizer;        private BufferedReader reader;         public InputReader(InputStream inputStream) {            reader = new BufferedReader(new InputStreamReader(inputStream));        }         private void fillTokenizer() {            if (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (Exception e) {                    throw new RuntimeException(e);                }            }        }         public String next() {            fillTokenizer();            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
