import java.io.*;import java.util.*;import java.util.concurrent.CompletableFuture;import java.util.function.BiConsumer;import java.util.function.BiFunction;import java.util.function.Consumer;import java.util.function.Function;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.Stream;import java.util.Map.Entry; public class Main implements Runnable {    static final int MOD = (int) 1e9 + 7;    static final int MI = (int) 1e9;    static final long ML = (long) 1e18;    static final Reader in = new Reader();    static final PrintWriter out = new PrintWriter(System.out);    StringBuilder answer = new StringBuilder();    Random random = new Random(751454315315L + System.currentTimeMillis());     public static void main(String[] args) {        new Thread(null, new Main(), "persefone", 1 << 28).start();    }     @Override    public void run() {        solve();        printf();        flush();    }     @FunctionalInterface    interface Function<T1, T2, T3, T4> {        public T4 apply(T1 t1, T2 t2, T3 t3);    }     Function<Integer, Integer, Integer, Integer> dfs;     void solve() {        int n = in.nextInt();        int m = in.nextInt();        List<int[]>[] graph = Stream.generate(ArrayList<int[]>::new).limit(n).toArray(List[]::new);        for (int i = 0; i < m; i++) {            int from = in.nextInt() - 1;            int to = in.nextInt() - 1;            int c = in.next().charAt(0) - 'a';            graph[from].add(new int[] { to, c });        }         int[][][] dp = new int[n][n][26];        for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                Arrays.fill(dp[i][j], -1);            }        }         dfs = (from, to, c) -> {            if (dp[from][to][c] != -1) {                return dp[from][to][c];            }            int ans = 0;            for (int[] n_to : graph[from]) {                if (n_to[1] >= c) {                    ans |= 1 - dfs.apply(to, n_to[0], n_to[1]);                }            }            return dp[from][to][c] = ans;        };         for (int i = 0; i < n; i++) {            for (int j = 0; j < n; j++) {                dfs.apply(i, j, 0);                add(dp[i][j][0] == 1 ? 'A' : 'B');            }            add('\n');        }    }     void printf() {        out.print(answer);    }     void close() {        out.close();    }     void flush() {        out.flush();    }     void printf(Stream<?> str) {        str.forEach(o -> add(o, " "));        add("\n");    }      void printf(Object... obj) {        printf(false, obj);    }     void printfWithDescription(Object... obj) {        printf(true, obj);    }      private void printf(boolean b, Object... obj) {         if (obj.length > 1) {            for (int i = 0; i < obj.length; i++) {                if (b) add(obj[i].getClass().getSimpleName(), " - ");                if (obj[i] instanceof Collection<?>) {                    printf((Collection<?>) obj[i]);                } else if (obj[i] instanceof int[][]) {                    printf((int[][]) obj[i]);                } else if (obj[i] instanceof long[][]) {                    printf((long[][]) obj[i]);                } else if (obj[i] instanceof double[][]) {                    printf((double[][]) obj[i]);                } else printf(obj[i]);            }            return;        }         if (b) add(obj[0].getClass().getSimpleName(), " - ");        printf(obj[0]);    }     void printf(Object o) {        if (o instanceof int[])            printf(Arrays.stream((int[]) o).boxed());        else if (o instanceof char[])            printf(new String((char[]) o));        else if (o instanceof long[])            printf(Arrays.stream((long[]) o).boxed());        else if (o instanceof double[])            printf(Arrays.stream((double[]) o).boxed());        else if (o instanceof boolean[]) {            for (boolean b : (boolean[]) o) add(b, " ");            add("\n");        } else            add(o, "\n");    }     void printf(int[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(long[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(double[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(boolean[]... obj) {        for (int i = 0; i < obj.length; i++) printf(obj[i]);    }     void printf(Collection<?> col) {        printf(col.stream());    }     <T, K> void add(T t, K k) {        if (t instanceof Collection<?>) {            ((Collection<?>) t).forEach(i -> add(i, " "));        } else if (t instanceof Object[]) {            Arrays.stream((Object[]) t).forEach(i -> add(i, " "));        } else            add(t);        add(k);    }      <T> void add(T t) {        answer.append(t);    }     static class Reader {        private BufferedReader br;        private StringTokenizer st;         Reader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         Reader(String fileName) throws FileNotFoundException {            br = new BufferedReader(new FileReader(fileName));        }         boolean isReady() throws IOException {            return br.ready();        }         String next() {            try {                while (st == null || !st.hasMoreTokens()) {                    st = new StringTokenizer(br.readLine());                }            } catch (IOException e) {                e.printStackTrace();            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         int[] nextIntArray(int n) {            int[] arr = new int[n];            for (int i = 0; i < n; i++)                arr[i] = nextInt();            return arr;        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String s = "";            try {                s = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return s;        }    }}
