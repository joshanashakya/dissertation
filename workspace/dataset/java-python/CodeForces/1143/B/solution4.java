import java.io.*;import java.math.BigInteger;import java.util.*;public class C {	static BufferedReader br;	static PrintWriter pr;	static int cin() throws Exception	{		return Integer.valueOf(br.readLine());	}	static int[] split() throws Exception	{		String[] cmd=br.readLine().split(" ");		int[] ans=new int[cmd.length];		for(int i=0;i<cmd.length;i++)		{			ans[i]=Integer.valueOf(cmd[i]);		}		return ans;	}	static long[] splitL() throws IOException	{		String[] cmd=br.readLine().split(" ");		long[] ans=new long[cmd.length];		for(int i=0;i<cmd.length;i++)		{			ans[i]=Long.valueOf(cmd[i]);		}		return ans;	}	static long p=1000000007;	static long power(long x, long y)     {         long res = 1;              x = x % p;         if (x == 0) return 0;        while (y > 0)         {             if((y & 1)==1)                 res = (res * x) % p;             y = y >> 1;              x = (x * x) % p;          }         return res;     }	static char[]ch;	static int[][]dp;	static int calc(int ind,int st)	{		if(ind==ch.length)			return 1;		if(dp[ind][st]!=-1)			return dp[ind][st];		int mx=ch[ind]-'0';		if(ind!=0 && st==1)			mx=9;		int res=0;		for(int i=0;i<=mx;i++)		{			int b=0;			if(i<(ch[ind]-'0') || st==1)				b=1;			res=Math.max(res,Math.max(i,1)*calc(ind+1,b));		}		return dp[ind][st]=res;	}	public static void main(String[] args) throws Exception{		// TODO Auto-generated method stub		br=new BufferedReader(new InputStreamReader(System.in));		pr=new PrintWriter(new OutputStreamWriter(System.out));		int cases=1;		while(cases!=0)		{			cases--;			ch=br.readLine().toCharArray();			if(ch.length==1)				System.out.println(ch[0]);			else			{				dp=new int[ch.length+1][2];				for(int i=0;i<=ch.length;i++)				{					Arrays.fill(dp[i],-1);				}				System.out.println(calc(0,0));			}		}	}}
