n, k = map(int, input().split()) grid = [    list(map(int, input().split()))    for _ in range(4)]  possible = Trueif all(c != 0 for cars in (grid[1], grid[2]) for c in cars):    if all(a != b for (a, b) in zip(grid[0], grid[1])):        if all(a != b for (a, b) in zip(grid[3], grid[2])):            possible = False            print(-1) sol = []if possible:    while True:        # Park cars where possible        for col in range(n):            if grid[1][col] != 0 and grid[1][col] == grid[0][col]:                # Move car to space                sol.append((grid[1][col], 1, col+1))                grid[1][col] = 0                k -= 1            if grid[2][col] != 0 and grid[2][col] == grid[3][col]:                # Move car to space                sol.append((grid[2][col], 4, col+1))                grid[2][col] = 0                k -= 1        if k == 0:            break        # Rotate cars        row = None        col = None        while True:            if grid[2][0] != 0 and grid[1][0] == 0:                # Can rotate clockwise starting with first car in second row                row = 2                col = 0                break            if grid[1][n-1] != 0 and grid[2][n-1] == 0:                # Can rotate clockwise starting with last car in first row                row = 1                col = n-1                break            for idx in range(n-1):                if grid[1][idx] != 0 and grid[1][idx+1] == 0:                    row = 1                    col = idx                    break            if col is not None:                break            for idx in range(n-1):                if grid[2][idx] == 0 and grid[2][idx+1] != 0:                    row = 2                    col = idx+1                    break            break        # Rotate all cars one spot clockwise        for _ in range(k):            # Rotate car            if row == 1 and col == n-1:                #print("Move down")                sol.append((grid[row][col], 3, n))                grid[2][col] = grid[row][col]                grid[row][col] = 0            elif row == 2 and col == 0:                #print("Move up")                sol.append((grid[row][col], 2, 1))                grid[1][col] = grid[row][col]                grid[row][col] = 0            elif row == 2:                #print("Move left")                sol.append((grid[row][col], row+1, col))                grid[row][col-1] = grid[row][col]                grid[row][col] = 0            else:                #print("Move right")                sol.append((grid[row][col], row+1, col+2))                grid[row][col+1] = grid[row][col]                grid[row][col] = 0            # Go to next car            while True:                if row == 1 and col == 0:                    row = 2                elif row == 2 and col == n-1:                    row = 1                elif row == 2:                    col += 1                else:                    col -= 1                if grid[row][col] != 0:                    break    print(len(sol))    for move in sol:        print(*move) 
