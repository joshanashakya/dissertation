//package com.company; import java.io.*;import java.util.*; public class Main {    static long TIME_START, TIME_END;    public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);//        Scanner sc = new Scanner(new FileInputStream("Test.in"));        PrintWriter pw = new PrintWriter(System.out);//        PrintWriter pw = new PrintWriter(new FileOutputStream("Test.out"));//        PrintWriter pw = new PrintWriter(new FileOutputStream("Test.in"));         Runtime runtime = Runtime.getRuntime();        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();        TIME_START = System.currentTimeMillis();        Task.solve(sc, pw);        TIME_END = System.currentTimeMillis();        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();        pw.close();        System.out.println("Memory increased:" + (usedMemoryAfter-usedMemoryBefore) / 1000000 );        System.out.println("Time used: " + (TIME_END - TIME_START) + ".");    }     public static class Task {         public static int[] getDr(int v, int n) {            if (v < n) {                return new int[]{v, 1};            } else {                int tbt = 2 * n - v;                return new int[]{tbt - 1, 2};            }        }         public static int getResolve(int x, int y, int n) {            if (y == 1) {                return x;            } else {                return n + n - 1 - x;            }        }          public static void solve(Scanner sc, PrintWriter pw) throws IOException {            int n = sc.nextInt();            int k = sc.nextInt();            int[][] rows = new int[4][n];            for (int i = 0; i < 4; i++) {                for (int j = 0; j < n; j++) {                    rows[i][j] = sc.nextInt();                    if ((i == 0 || i == 3) && rows[i][j] == 0) {                        rows[i][j] = -1;                    }                }            }            List<Integer[]> l = new ArrayList<>();            while (true) {                int fx = -1, fy = -1;                boolean nre = false;                for (int i = 0; i < n; i++) {                    if (rows[1][i] != 0 || rows[2][i] != 0) {                        nre = true;                    }                    if (rows[1][i] == rows[0][i]) {                        l.add(new Integer[]{rows[1][i], 1, i + 1});                        rows[1][i] = 0;                    }                    if (rows[2][i] == rows[3][i]) {                        l.add(new Integer[]{rows[2][i], 4, i + 1});                        rows[2][i] = 0;                    }                    if (rows[1][i] == 0) {                        fx = i; fy = 1;                    } else if (rows[2][i] == 0) {                        fx = i; fy = 2;                    }                }                if (nre && fx == -1) {                    pw.println(-1);                    return;                }                if (!nre) {                    break;                }                for (int i = 0; i < 2 * n - 1; i++) {                    int ft = getResolve(fx, fy, n);                    ft += -i - 1 + 2 * n; ft %= 2 * n;                    int[] r = getDr(ft, n);                    int tx = r[0], ty = r[1];                    if (rows[ty][tx] != 0) {                        int[] rr = getDr((ft + 1) % (2 * n), n);                        int rx = rr[0], ry = rr[1];                        assert rows[ry][rx] == 0;                        l.add(new Integer[]{rows[ty][tx], ry + 1, rx + 1});                        rows[ry][rx] = rows[ty][tx];                        rows[ty][tx] = 0;                    }                }            }            pw.println(l.size());            for (int i = 0; i < l.size(); i++) {                pw.println(l.get(i)[0] + " " + l.get(i)[1] + " "+ l.get(i)[2]);            }         }    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s){  br = new BufferedReader(new InputStreamReader(s));}         public Scanner(FileReader s) throws FileNotFoundException {br = new BufferedReader(s);}         public String next() throws IOException        {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {return Integer.parseInt(next());}         public long nextLong() throws IOException {return Long.parseLong(next());}         public String nextLine() throws IOException {return br.readLine();}         public double nextDouble() throws IOException { return Double.parseDouble(next()); }         public boolean ready() throws IOException {return br.ready();}    }}
