n, k = map(int, input().split())m = [] for _ in range(4):    m.extend(list(map(int, input().split()))) moves = []ans = 0zeros = 0 d = {1: 1, 2: 4}def park():    #print("\n parking \n")    global ans, moves, m, zeros    zeros = 0     for i in range(n, 3 * n):        r = d[i // n]        if m[i] == 0:            zeros += 1        elif m[i] == m[(r - 1) * n + i % n]:            moves.append(f"{m[i]} {r} {i % n + 1}")            m[i] = 0            ans += 1            zeros += 1 def rotate():    #print("\n rotating \n") #    global ans, moves, m     t1 = m[2 * n]    zero_found = False    ls1 = []    ls2 = []     ll = [(n + i, 2) for i in range(n)] + [(3 * n - 1 - i, 3) for i in range(n)]     for i in ll:        if not zero_found and t1 != 0 and m[i[0]] == 0:            zero_found = True            moves.append(f"{t1} {i[1]} {i[0] % n + 1}")            ans += 1         elif t1 != 0:            if zero_found:                ls2.append(f"{t1} {i[1]} {i[0] % n + 1}")            else:                ls1.append(f"{t1} {i[1]} {i[0] % n + 1}")            ans += 1                t2 = m[i[0]]        m[i[0]] = t1        t1 = t2     #print('hey', ls1, ls2) #    ls1.reverse()    ls2.reverse()    #print('yo', ls1, ls2)     moves.extend(ls1 + ls2)      park()if zeros == 0:    print(-1)else:    while zeros != 2 * n:        rotate()        park()        #print(zeros) #        #print(m) #     print(ans)    for i in moves:        print(i) '''print('original', m)park()print('parked', m)rotate()print('rotated', m)park()print('parked', m)'''
