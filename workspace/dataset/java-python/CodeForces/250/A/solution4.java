import java.util.*;import java.lang.*;import java.math.*;import java.text.DecimalFormat;import java.text.NumberFormat;import java.io.*;public class Solution {	static class FastReader {        BufferedReader br;        StringTokenizer st;Â         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }        String next() {            while (st == null || !st.hasMoreElements()) {                try{                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e) {                    e.printStackTrace();                }            }            return st.nextToken();        }        int nextInt() {            return Integer.parseInt(next());        }        long nextLong() {            return Long.parseLong(next());        }        static int fact(int n) {   		 if(n == 1) return 1;   		 return n * fact(n-1);   	 }	public int[] readIntArray(int n) {			int[] arr = new int[n];			for(int i=0; i<n; ++i)				arr[i]=nextInt();			return arr;		}		static int gcd(int a, int b) { 	    if (b == 0) return a; 	    return gcd(b, a % b);  		}        double nextDouble() {            return Double.parseDouble(next());        }        String nextLine() {            String str = "";            try{                str = br.readLine();            }            catch (IOException e) {                e.printStackTrace();            }            return str;        }    }	static void solve(int[] arr,int n) {		int d = 0, count = 0;		List<Integer> list = new ArrayList<>();		for(int i=0;i<n;i++) {			if(arr[i] < 0 ) {				count++;			}			if(count == 3) {				list.add(i - d);				d = i;				count = 1;			}			if(i == n-1) {				list.add(i+1 - d);			}		}		System.out.println(list.size());				for(Integer i:list) {			System.out.print(i+" ");		}	}	public static void main(String args[]) {        FastReader sc = new FastReader();        		int n = sc.nextInt();        		        		int[] arr = sc.readIntArray(n);        		solve(arr,n);        	long end = System.currentTimeMillis();        	NumberFormat formatter = new DecimalFormat("#0.00000");        	//System.out.print("Execution time is " + formatter.format((end - start) / 1000d) + " seconds");        }}
