import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer; public class Restoring_IPv6 {    public static void main(String[] args) {        FastReader in = new FastReader();        int i,j,a,b,n,c,l,sum;        String[] s_array = new String[8];        String ss,s1,s2,s_tem = "0000";        StringBuilder s;         s_array[0] = s_tem;        for (i=1; i<8; i++){            s_array[i] = s_array[i-1] + ":" + s_tem;        }          n = in.nextInt();         while (n-- > 0) {            String[] s_main = new String[8];            s1 = "";            sum = 0;            ss = in.nextLine();            s = new StringBuilder(ss);            l = s.length();             if (!ss.contains(":")) {                ss += ":";                ss += s_array[7];                s1 = ss;            } else if (ss.contains("::")) {                  //first                if (s.charAt(l - 1) == ':' && s.charAt(l - 2) == ':') {                     for (i = 0; i < l; i++) {                        if (s.charAt(i) == ':') sum++;                    }                     sum--;                    a = 8 - sum;                    s.deleteCharAt(l - 1);                      if (s.length() == 1) {                        s1 = s_array[7];                    } else {                        s1 = s.toString();                        s1 += s_array[--a];                    }                     //System.out.println(s1);                }                   //second ....                else {                     for (i = 0; i < l; i++) {                        if (s.charAt(i) == ':') sum++;                    }                     a = 8 - sum;                    for (i = 0; i < l; i++) {                        if (s.charAt(i) == ':' && s.charAt(i + 1) == ':') {                            break;                        }                    } //                    System.out.println(s);//                    System.out.println(i + " =i a= " + a);                     if (a != 0)                    s.insert(i + 1, s_array[--a]);                    else s.deleteCharAt(0);                    s1 = s.toString();                    //System.out.println(s1);                }            }            else {                s1 = ss;               // System.out.println(s);            }             int k = 0;            j = 0;            b = 0;            l = s1.length();            for (i = 0; i < l; i++) {                 if (s1.charAt(i) == ':') {                    s_main[k++] = s1.substring(j, i);                    j = i + 1;                }             }             s_main[k] = s1.substring(j, i); //        for (i=0; i<8; i++)//            System.out.print(s_main[i]+ " ");//        System.out.println();             for (i = 0; i < 8; i++) {                 b = s_main[i].length();                if (b != 4) {                    a = 4 - b;                    while (a-- > 0) {                        System.out.print("0");                    }                }                System.out.print(s_main[i]);                if (i < 7)                    System.out.print(":");             }            System.out.println();        }     }     static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new                    InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    } }
