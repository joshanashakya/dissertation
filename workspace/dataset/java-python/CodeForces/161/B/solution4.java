import java.util.*;import java.io.*;public class Solution{ 	public static Integer INT(String s){		return Integer.parseInt(s);	} 	public static Long LONG(String s){		return Long.parseLong(s);	} 	//====================================================================================================================  	static class Pair implements Comparable<Pair>{		int cost, index;		Pair(int cost, int index){			this.cost=cost;			this.index=index;		} 		public int compareTo(Pair obj){			return this.cost-obj.cost;		}	}  	public static void main(String args[])throws IOException{ 		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));	Scanner in=new Scanner(System.in);	StringBuilder out=new StringBuilder(); 		String line[]=br.readLine().split("\\s");		int n=INT(line[0]),			k=INT(line[1]); 		ArrayList<Pair> type[]=new ArrayList[3];		for(int i=0; i<=2; i++)	type[i]=new ArrayList<>(); 		for(int i=1; i<=n; i++){			line=br.readLine().split("\\s");			int c=INT(line[0]),				t=INT(line[1]);			type[t].add(new Pair(c, i));		} 		Collections.sort(type[1], Collections.reverseOrder());		Collections.sort(type[2]); 		int min_cost[]=new int[k], i_1=0, i_2=0;		Arrays.fill(min_cost, -1);		double total_cost=0;		ArrayList<Integer> item[]=new ArrayList[k]; 		for(int i=0; i<k; i++){			item[i]=new ArrayList<>(); 			if(i_1!=type[1].size()){				Pair temp=type[1].get(i_1++);				item[i].add(temp.index);				if(i==k-1)					total_cost+=temp.cost;				else					total_cost+=(double)temp.cost/2.0;				min_cost[i]=temp.cost;			}			else{				Pair temp=type[2].get(i_2++);				item[i].add(temp.index);				total_cost+=temp.cost;			}		} 		while(i_1!=type[1].size()){			Pair temp=type[1].get(i_1++);			item[k-1].add(temp.index);			total_cost+=temp.cost;			min_cost[k-1]=temp.cost;		} 		int i=0, j;		for(j=type[2].size()-1; j>=i_2 && i!=k-1; ){			Pair temp=type[2].get(j);			if(temp.cost>=min_cost[i]){				item[i].add(temp.index);				total_cost+=temp.cost;				j--;			}			else				i++;		} 		for(; j>=i_2; j--){			Pair temp=type[2].get(j);			total_cost+=temp.cost;			item[k-1].add(temp.index);			if(min_cost[k-1]!=-1)				min_cost[k-1]=Math.min(min_cost[k-1], temp.cost);		} 		if(min_cost[k-1]!=-1)			total_cost-=(double)min_cost[k-1]/2.0;  		if((long)total_cost==total_cost)			out.append((long)total_cost+".0");		else			out.append((long)total_cost+".5");		out.append("\n"); 		for(i=0; i<k; i++){			out.append(item[i].size()+" ");			for(int value: item[i])				out.append(value+" ");			out.append("\n");		} 		System.out.print(out);	}}
