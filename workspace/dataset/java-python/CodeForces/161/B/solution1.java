import java.io.*;import java.math.*;import java.util.*; public class Main {	static final long MOD = 1000000007L;	static final int INF = 50000000;		public static void main(String[] args) {		FastScanner sc = new FastScanner();		PrintWriter pw = new PrintWriter(System.out);				int N = sc.ni();		int K = sc.ni(); 		ArrayList<Pair> type[]=new ArrayList[3];		for(int i=0; i < 3; i++)			type[i]=new ArrayList<Pair>(); 		for(int i = 0; i < N; i++) {			int a = sc.ni();			int b = sc.ni();			type[b].add(new Pair(a,i));		} 		Collections.sort(type[1], Collections.reverseOrder());		Collections.sort(type[2]); 		int[] min_cost=new int[K];		int i_1=0;		int i_2=0;		Arrays.fill(min_cost, -1);		double total_cost=0;		ArrayList<Integer>[] item = new ArrayList[K]; 		for(int i=0; i < K; i++){			item[i]=new ArrayList<>(); 			if(i_1!=type[1].size()){				Pair temp=type[1].get(i_1);				i_1++;				item[i].add(temp.index);				if(i==K-1)					total_cost+=temp.cost;				else					total_cost+=(double)temp.cost/2.0;				min_cost[i]=temp.cost;			}			else{				Pair temp=type[2].get(i_2);				i_2++;				item[i].add(temp.index);				total_cost+=temp.cost;			}		} 		while(i_1!=type[1].size()){			Pair temp=type[1].get(i_1++);			item[K-1].add(temp.index);			total_cost+=temp.cost;			min_cost[K-1]=temp.cost;		} 		int i=0, j;		for(j=type[2].size()-1; j>=i_2 && i!=K-1; ){			Pair temp=type[2].get(j);			if(temp.cost>=min_cost[i]){				item[i].add(temp.index);				total_cost+=temp.cost;				j--;			}			else				i++;		} 		for(; j>=i_2; j--){			Pair temp=type[2].get(j);			total_cost+=temp.cost;			item[K-1].add(temp.index);			if(min_cost[K-1]!=-1)				min_cost[K-1]=Math.min(min_cost[K-1], temp.cost);		} 		if(min_cost[K-1]!=-1)			total_cost-=(double)min_cost[K-1]/2.0;  		if((long)total_cost==total_cost)			pw.println((long)total_cost+".0");		else			pw.println((long)total_cost+".5"); 		for(i=0; i< K; i++){			pw.print(item[i].size()+" ");			for(int value: item[i])				pw.print((value+1)+" ");			pw.println();		}				pw.close();	}		static class Pair implements Comparable<Pair>{		int cost, index;		Pair(int cost, int index){			this.cost=cost;			this.index=index;		}Â 		public int compareTo(Pair obj){			return this.cost-obj.cost;		}	}	    static class FastScanner {         BufferedReader br;         StringTokenizer st;           public FastScanner() {             br = new BufferedReader(new InputStreamReader(System.in));         }           String next() {             while (st == null || !st.hasMoreElements()) {                 try {                     st = new StringTokenizer(br.readLine());                } catch (IOException  e) {                     e.printStackTrace();                 }             }             return st.nextToken();         }                int ni() {             return Integer.parseInt(next());         }          long nl() {             return Long.parseLong(next());         }           double nd() {             return Double.parseDouble(next());         }           String nextLine() {            String str = "";             try {                 str = br.readLine();             } catch (IOException e) {                e.printStackTrace();             }             return str;        }    }}
