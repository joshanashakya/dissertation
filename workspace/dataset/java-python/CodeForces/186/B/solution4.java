import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.StringTokenizer; public class GrowingMushrooms {    public static void main(String[] args) {        FastReader fs = new FastReader();        StringBuilder sb = new StringBuilder();        List<double[]> list = new ArrayList<>();        int n = fs.nextInt();        int t1 = fs.nextInt();        int t2 = fs.nextInt();        int k = fs.nextInt();        for(int i = 1; i <= n; i++) {            int a = fs.nextInt();            int b = fs.nextInt();            list.add(new double[] {i, Math.max((a * t1 - (k / 100.00) * (a * t1) + b * t2)                    ,(b * t1 - (k / 100.00) * (b * t1) + a * t2))});        }        Collections.sort(list, (a, b) -> {            int compare = Double.compare(a[1], b[1]);            if(compare != 0) return -compare;            else return Double.compare(a[0], b[0]);        });        for(double[] l : list) {            sb.append((int) l[0]);            sb.append(" ");            sb.append(String.format("%.2f", l[1]));            sb.append("\n");        }        System.out.print(sb.toString());    }     static class FastReader {        BufferedReader br;        StringTokenizer st;        public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while(st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                }                catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         float nextFloat() {            return Float.parseFloat(next());        }    }}
