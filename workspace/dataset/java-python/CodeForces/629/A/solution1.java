import java.math.BigInteger;import java.util.Scanner;import java.util.StringTokenizer; public class FarRelative {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        int n = Integer.parseInt(scanner.nextLine());         boolean[][] cake = new boolean[n][n];         for (int i = 0; i < n; i++){            String line = scanner.nextLine();            for (int j = 0; j < n; j++) {                cake[i][j] = line.charAt(j) == 'C' ? true : false;            }        }         long total = 0;        for (int i = 0; i < n; i++) {            int countC = 0;            for (int j = 0; j < n; j++) {                if (cake[i][j]) {                    countC++;                }            }            long res = combination(countC, 2);            total += res ;        }         for (int i = 0; i < n; i++) {            int countC = 0;            for (int j = 0; j < n; j++) {                if (cake[j][i]) {                    countC++;                }            }            total += combination(countC, 2);        }          System.out.println(total);    }     private static BigInteger factorial(BigInteger n){        if (n.intValue() == 0 || n.intValue() == 1){            return BigInteger.ONE;        }else{            return n.multiply(factorial(n.subtract(BigInteger.ONE)));        }    }     private static long combination(int n, int r){        try {            if (r > n) {                return 0;            }             BigInteger denom = factorial(BigInteger.valueOf(r)).multiply(factorial(BigInteger.valueOf(n - r)));             return factorial(BigInteger.valueOf(n)).divide(denom).longValue();        } catch (Exception ex) {            System.out.println(n + " " + r);            throw ex;        }     }}
