import java.util.*;import java.io.*;import static java.lang.Math.*; public class PracticeProblem{    /*     * This FastReader code is taken from GeeksForGeeks.com     * https://www.geeksforgeeks.org/fast-io-in-java-in-competitive-programming/     *     * The article was written by Rishabh Mahrsee     */    public static class FastReader    {        BufferedReader br;        StringTokenizer st;         public FastReader()        {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next()        {            while (st == null || !st.hasMoreElements())            {                try                {                    st = new StringTokenizer(br.readLine());                }                catch (IOException  e)                {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt()        {            return Integer.parseInt(next());        }         long nextLong()        {            return Long.parseLong(next());        }         double nextDouble()        {            return Double.parseDouble(next());        }         String nextLine()        {            String str = "";            try            {                str = br.readLine();            }            catch (IOException e)            {                e.printStackTrace();            }            return str;        }    }     public static FastReader in = new FastReader();    public static PrintWriter out = new PrintWriter(System.out);    public static StringBuilder answer = new StringBuilder();     public static void main(String[] args)    {        solve();        out.close();    }     private static void solve()    {        char[] s = in.nextLine().toCharArray();        int n = s.length;         if (n < 4)        {            out.println("YES");            out.println(new String(s));            return;        }         int[] charCount = new int[26];         for (char c : s)            charCount[c - 'a']++;         // Do Sieve of Eratosthenes         boolean[] sieve = new boolean[n + 1]; // true means we have visited this index        int sameCount = 0;         for (int i = 2; i <= n / 2; i++)        {            if (!sieve[i])            {                for (int j = i; j <= n; j += i)                {                    if (!sieve[j])                    {                        sieve[j] = true;                        sameCount++;                    }                }            }        }         // Make sure we have a digit that occurs at least sameCount amt of times        boolean found = false;        char charToRepeat = 0;        for (int i = 0; i < 26; i++)        {            if (charCount[i] >= sameCount)            {                found = true;                charToRepeat = (char)('a' + i);                break;            }        }         if (!found)        {            out.println("NO");            return;        }         out.println("YES");         char[] answer = new char[n];         for (int i = 1; i <= n; i++)            if (sieve[i])                answer[i - 1] = charToRepeat;         charCount[charToRepeat - 'a'] -= sameCount;         // The rest of the characters can be anything else really         int curLetter = 0;        int curCount = 0;         for (int i = 0; i < n; i++)        {            if (!sieve[i + 1])            {                // Find the next unused character                while (charCount[curLetter] <= curCount)                {                    curLetter++;                    curCount = 0;                }                answer[i] = (char) ('a' + curLetter);                curCount++;            }        }         out.println(new String(answer));    }}
