import java.io.*;import java.util.*; public class B_NeuralNetworkCountry {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader inp = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Solver solver = new Solver();        solver.solve(inp, out);        out.close();    }     private static class Solver {        private void solve(InputReader inp, PrintWriter out) {            int n = inp.nextInt(), l = inp.nextInt(), m = inp.nextInt();            long[][] t = new long[m][m];            long[] v = new long[m];            for (int i = 0; i < n; i++) {                v[inp.nextInt() % m]++;            }            int[] l1 = new int[n];            long[] cnt = new long[m];            for (int i = 0; i < n; i++) {                l1[i] = inp.nextInt();                cnt[l1[i] % m]++;            }            for (int i = 0; i < m; i++) {                for (int j = 0; j < m; j++) {                    for (int k = 0; k < m; k++) {                        if ((j + k) % m == i) {                            t[i][j] += cnt[k];                        }                    }                }            }             long[] rem = pow(t, v, l - 2);            //for (int i = 0; i < m; i++) {            //    out.println(i + ": " + rem[i]);            //}            long res = 0;            long[] l2 = new long[m];            for (int i = 0; i < n; i++) {                l2[(inp.nextInt() + l1[i]) % m]++;            }            for (int i = 0; i < m; i++) {                for (int j = 0; j < m; j++) {                    if ((j + i) % m == 0) {                        res = (res + rem[i] * l2[j]) % MOD;                    }                }            }            out.print(res);        }         private static final int MOD = 1000000007;        private static final long BIG = 8L * (long) MOD * MOD;         private static long[] pow(long[][] A, long[] v, long e) {            for(int i = 0;i < v.length;i++) {                if(v[i] >= MOD) v[i] %= MOD;            }            long[][] MUL = A;            for(;e > 0;e>>>=1) {                if((e&1)==1)v = mul(MUL, v);                MUL = p2(MUL);            }            return v;        }          private static long[] mul(long[][] A, long[] v) {            int m = A.length;            int n = v.length;            long[] w = new long[m];            for(int i = 0;i < m;i++){                long sum = 0;                for(int k = 0;k < n;k++){                    sum += A[i][k] * v[k];                    if(sum >= BIG) sum -= BIG;                }                w[i] = (sum % MOD);            }            return w;        }         private static long[][] p2(long[][] A) {            int n = A.length;            long[][] C = new long[n][n];            for(int i = 0;i < n;i++){                long[] sum = new long[n];                for(int k = 0;k < n;k++){                    for(int j = 0;j < n;j++){                        sum[j] += A[i][k] * A[k][j];                        if(sum[j] >= BIG) sum[j] -= BIG;                    }                }                for(int j = 0;j < n;j++) C[i][j] = (sum[j] % MOD);            }            return C;        }    }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }    }}
