import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BNeuralNetworkCountry solver = new BNeuralNetworkCountry();        solver.solve(1, in, out);        out.close();    }     static class BNeuralNetworkCountry {        public int MODULO = (int) (1e9 + 7);        int n;        int m;        int L;         public void solve(int testNumber, FastReader in, PrintWriter out) {            n = in.nextInt();            L = in.nextInt();            m = in.nextInt();             int[] first = new int[m];            int[] last = new int[n];            int[] middle = new int[n];            int[] v = new int[m];            for (int i = 0; i < n; ++i) {                first[in.nextInt() % m]++;            }            for (int i = 0; i < n; ++i) {                int idx = in.nextInt() % m;                ++v[idx];                middle[i] = idx;            }            for (int i = 0; i < n; ++i) {                last[i] = in.nextInt() % m;            }            int[] ret = multiply(first, power(v, L - 2));            long ans = 0;            for (int i = 0; i < n; ++i) {                int cur = (middle[i] + last[i]) % m;                int need = (m - cur) % m;                ans += ret[need];                ans %= MODULO;            }            out.println(ans);        }         private int[] power(int[] v, int times) {            int[] ans = new int[m];            ans[0] = 1;            while (times != 0) {                if (times % 2 == 1) {                    ans = multiply(ans, v);                }                v = multiply(v, v);                times >>= 1;            }            return ans;        }         private int[] multiply(int[] a, int[] b) {            int[] c = new int[m];            for (int i = 0; i < m; ++i) {                for (int j = 0; j < m; ++j) {                    c[(i + j) % m] += a[i] * 1L * b[j] % MODULO;                    c[(i + j) % m] %= MODULO;                }            }            return c;        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int pnumChars;         public FastReader(InputStream stream) {            this.stream = stream;        }         private int pread() {            if (pnumChars == -1) {                throw new InputMismatchException();            }            if (curChar >= pnumChars) {                curChar = 0;                try {                    pnumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (pnumChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = pread();            while (isSpaceChar(c))                c = pread();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = pread();            }            int res = 0;            do {                if (c == ',') {                    c = pread();                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = pread();            } while (!isSpaceChar(c));            return res * sgn;        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }} 
