#pragma GCC target("avx2")#pragma GCC optimize("O3")#include <iostream>#include <iostream>#include <vector>#include <algorithm>#include <iomanip>#include <tuple>#include <math.h>#include <set>#include <stack>#include <bitset>#include <map>#include <queue>#include <random>#include <unordered_set>#include <cassert>#include <unordered_map>#define DEBUG#define fi first#define se second#define pqueue priority_queue#define pb(x) push_back(x)//#define endl '\n'#define all(x) x.begin(), x.end()#define int long long#define mk(a, b) make_pair(a, b)     using namespace std;      typedef long long ll;typedef unsigned long long ull;typedef long double ld;typedef vector<int> vi;typedef vector<vector<ll> > vvi;typedef vector<ull> vull;typedef vector<ll> vll;// typedef tuple<ll, ll, ll> tiii;typedef pair<int, int> pii;typedef vector<pair<int, int> > vpii;typedef pair<ll, ll> pll;typedef vector<bool> vb;typedef vector<string> vs;typedef vector< vector<ll> > vvi;typedef vector<char> vc;      const ll INF = 1e9 + 228;const ll INFLL = 1e18;const ll MOD = 1e9 + 7;//static const int maxn = 1e6 + 228;const ld eps = 1e-5;const ld eps2 = 1e-9;const ll MOD2 = 998244353;const ll dosz = 5e5;const ll SZ = (1<<18);const ld PI = atan2l(0, -1);     void fast_io(){    ios_base::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);//    freopen("log.in", "r", stdin);//    freopen("log.out", "w", stdout);}  mt19937 rng(time(NULL)); void solve(){    ll n, k, q;    cin >> n >> k;    ll l = 1, r = n;    int cnt = 0;    ll mid;    string ans;    int add;    while(true){        cnt++;        mid = (l + r)/2;        if((r-l+1) <= 4 * k){            add = rng();            add = abs(add);            add <<= 32;            add += abs((int)rng());            add = abs(add);            mid = l + add%(r-l+1);            cout << mid << " " << mid << endl;            cin >> ans;            if(ans == "Yes"){                return;            }            l -= k;            if(l < 1)                l = 1;            r += k;            if(r > n)                r = n;            continue;        }//        mid += my_rand();//        if(mid < l)//            mid = l;//        if(mid > r)//            mid = r;//        mid = min(mid, r);//        cout << my_rand() << endl;        cout << l << " " << mid << "\n";        cout.flush();        cin >> ans;        if(ans == "Yes"){            if(l == mid){//                cout << 1 << endl;                return;            }            l = l-k;            if(l < 1)                l = 1;            r = mid+k;            if(r > n)                r = n;        } else{            l = mid+1-k;            if(l < 1)                l = 1;            r = r+k;            if(r > n)                r = n;        }        if(cnt == q){            assert(false);        }    }} signed main(){    fast_io();    srand(time(NULL));//    cout << fixed << setprecision(12);    int q = 1;//    cin >> q;    while(q--)        solve();     }
