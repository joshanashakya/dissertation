import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.InputMismatchException;import java.util.Random;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author cunbidun */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        Task1039B solver = new Task1039B();        solver.solve(1, in, out);        out.close();    }     static class Task1039B {        private InputReader in;        private OutputWriter out;        private long n;        private long l;        private long r;        private int k;         public void solve(int testNumber, InputReader in, OutputWriter out) {            this.in = in;            this.out = out;            n = in.nextLong();            k = in.nextInt();            l = 1;            r = n;            while (true) {                while (r - l >= 48) {                    getInterval();//                System.out.println("!!!" + " " + l + " " + r);                }                if (randomGuess()) return;                l = MaxMin.Max(1L, l - k);                r = MaxMin.Min(n, r + k);            }        }         private boolean randomGuess() {            Random rnd = new Random();            int num = rnd.nextInt((int) (r - l + 1));            out.println((l + num) + " " + (l + num));            out.flush();            String s = in.nextString();            return s.charAt(0) == 'Y';        }         private void getInterval() {            out.println(l + " " + (l + r) / 2);            out.flush();            String s = in.nextString();            if (s.charAt(0) == 'Y') {                l = MaxMin.Max(1L, l - k);                r = MaxMin.Min(n, (l + r) / 2 + k);            } else {                l = MaxMin.Max(1L, (l + r) / 2 + 1 - k);                r = MaxMin.Min(n, r + k);             }        }     }     static class OutputWriter {        private final PrintWriter out;         public OutputWriter(OutputStream outputStream) {            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.out = new PrintWriter(writer);        }         public void close() {            out.close();        }         public void flush() {            out.flush();        }         public void println(String i) {            out.println(i);        }     }     static class InputReader extends InputStream {        private InputStream stream;        private byte[] buf = new byte[1 << 16];        private int curChar;        private int numChars;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public long nextLong() {            int c = read();            while (isSpaceChar(c))                c = read();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public String nextString() {            int c;            while (isSpaceChar(c = read())) ;            StringBuilder result = new StringBuilder();            result.appendCodePoint(c);            while (!isSpaceChar(c = read()))                result.appendCodePoint(c);            return result.toString();        }         private static boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }     static class MaxMin {        public static <T extends Comparable<T>> T Max(T x, T y) {            T max = x;            if (y.compareTo(max) > 0) max = y;            return max;        }         public static <T extends Comparable<T>> T Min(T x, T y) {            T min = x;            if (y.compareTo(min) < 0) min = y;            return min;        }     }} 
