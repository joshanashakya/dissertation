import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.OutputStream;import java.util.InputMismatchException;import java.io.IOException;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Pradyumn */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastReader in = new FastReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, FastReader in, PrintWriter out) {            Debug debug = new Debug(out);            int n = in.nextInt();            long T = in.nextLong();            long[] a = in.nextLongArray(n);            int[] p = in.nextIntArray(n);            MiscUtils.decreaseByOne(p);            for (int i = 0; i < n; ++i) {                if (p[i] < i || i > 0 && p[i] < p[i - 1]) {                    out.println("No");                    return;                }            }            long[] b = new long[n];            for (int i = 0; i < n; ++i) {                if (p[i] == i) {                    if (i == 0 || p[i] != p[i - 1]) {                        b[i] = a[i] + T;                    } else {                        b[i] = b[i - 1] + 1;                    }                } else {                    b[i] = a[i + 1] + T;                }            }            for (int i = 0; i < n; ++i) {                if (i > 0 && b[i] <= b[i - 1]) {                    out.println("No");                    return;                }                if (p[i] < n - 1 && a[p[i] + 1] + T <= b[p[i]]) {                    out.println("No");                    return;                }            }            out.println("Yes");            ArrayUtils.printArray(out, b);        }     }     static class FastReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int pnumChars;         public FastReader(InputStream stream) {            this.stream = stream;        }         private int pread() {            if (pnumChars == -1) {                throw new InputMismatchException();            }            if (curChar >= pnumChars) {                curChar = 0;                try {                    pnumChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (pnumChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = pread();            while (isSpaceChar(c))                c = pread();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = pread();            }            int res = 0;            do {                if (c == ',') {                    c = pread();                }                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = pread();            } while (!isSpaceChar(c));            return res * sgn;        }         public int[] nextIntArray(int n) {            int[] array = new int[n];            for (int i = 0; i < n; i++) {                array[i] = nextInt();            }            return array;        }         public long nextLong() {            int c = pread();            while (isSpaceChar(c))                c = pread();            int sgn = 1;            if (c == '-') {                sgn = -1;                c = pread();            }            long res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = pread();            } while (!isSpaceChar(c));            return res * sgn;        }         public long[] nextLongArray(int n) {            long[] array = new long[n];            for (int i = 0; i < n; i++) {                array[i] = nextLong();            }            return array;        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }     static class Debug {        PrintWriter out;        boolean oj;        boolean system;        long timeBegin;        Runtime runtime;         public Debug(PrintWriter out) {            oj = System.getProperty("ONLINE_JUDGE") != null;            this.out = out;            this.timeBegin = System.currentTimeMillis();            this.runtime = Runtime.getRuntime();        }         public Debug() {            system = true;            oj = System.getProperty("ONLINE_JUDGE") != null;            OutputStream outputStream = System.out;            this.out = new PrintWriter(outputStream);            this.timeBegin = System.currentTimeMillis();            this.runtime = Runtime.getRuntime();        }     }     static class MiscUtils {        public static void decreaseByOne(int[]... arrays) {            for (int[] array : arrays) {                for (int i = 0; i < array.length; i++) {                    array[i]--;                }            }        }     }     static class ArrayUtils {        public static void printArray(PrintWriter out, long[] array) {            if (array.length == 0) return;            for (int i = 0; i < array.length; i++) {                if (i != 0) out.print(" ");                out.print(array[i]);            }            out.println();        }     }} 
