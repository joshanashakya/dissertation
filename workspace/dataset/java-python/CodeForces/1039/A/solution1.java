import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }     static class TaskA {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int N = in.nextInt();            long t = in.nextLong();            long[] leave = new long[N];            for (int i = 0; i < N; i++) {                leave[i] = in.nextLong();            }            int[] max = new int[N];            boolean[] isMaxed = new boolean[N];            for (int i = 0; i < N; i++) {                max[i] = in.nextInt() - 1;                isMaxed[max[i]] = true;            }            for (int i = 0; i < N; i++) {                if (i > max[i] || i > 0 && max[i] < max[i - 1] || i > 0 && max[i] != max[i - 1] && max[i - 1] != i - 1) {                    out.println("No");                    return;                }            }            long[] res = new long[N];            long last = (long) (3 * 1e18);            for (int i = N - 1; i >= 0; i--) {                if (isMaxed[i]) {                    if (i == N - 1) {                        res[i] = last;                    } else {                        res[i] = leave[i + 1] + t - 1;                        if (res[i] > last - 1) {                            out.println("No");                            return;                        }                    }                } else {                    if (leave[i + 1] + t > last - 1) {                        out.println("No");                        return;                    } else {                        res[i] = last - 1;                    }                }                last = res[i];            }            out.println("Yes");            for (long val : res) {                out.print(val + " ");            }        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }     }} 
