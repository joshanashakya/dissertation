import java.awt.List;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.PriorityQueue;import java.util.Random;import java.util.TreeSet;     public final class CF_507_D1_A { 	static boolean verb=true;	static void log(Object X){if (verb) System.err.println(X);}	static void log(Object[] X){if (verb) {for (Object U:X) System.err.print(U+" ");System.err.println("");}}	static void log(int[] X){if (verb) {for (int U:X) System.err.print(U+" ");System.err.println("");}}	static void log(int[] X,int L){if (verb) {for (int i=0;i<L;i++) System.err.print(X[i]+" ");System.err.println("");}}	static void log(long[] X){if (verb) {for (long U:X) System.err.print(U+" ");System.err.println("");}} 	static void logWln(Object X){if (verb) System.err.print(X);}	static void info(Object o){	System.out.println(o);}	static void output(Object o){outputWln(""+o+"\n");	}	static void outputWln(Object o){try {out.write(""+ o);} catch (Exception e) {}}   	// Global vars	static BufferedWriter out;	static InputReader reader; 	static int CX=26;  	static void solveOKSlow(int n,long t,long[] a,int[] x){		long[] min=new long[n];		for (int i=0;i<n;i++)			min[i]=a[i]+t;		long[] max=new long[n];		Arrays.fill(max,3000000000000000000L);		long[] b=new long[n];		boolean ok=true;		loop:for (int i=0;i<n;i++){ 			int xi=x[i];			if (xi>i){				for (int u=i+1;u<=xi;u++){					min[u-1]=Math.max(min[u-1],a[u]+t);				}			} 			if (xi<i){				ok=false;				break loop;			} 			// no more then xi			if (xi<n-1){				max[xi]=Math.min(max[xi],a[xi+1]+t-1);			}		}		if (ok){			for (int i=0;i+1<n;i++){				if (min[i+1]<=min[i]){					min[i+1]=min[i]+1;				}			} 			for (int i=0;i<n;i++){				if (max[i]<min[i]){					ok=false;					//log("issue");					//log(min);					//log(max); 					break;				} else					b[i]=min[i];			}		}		if (ok){			output("Yes");			for (int i=0;i<n;i++){				outputWln(b[i]+" ");			}			output("");		} else {			output("No");		}	} 	static long MX=3000000000000000000L;		static void solveAlt(int n,long t,long[] a,int[] x){		long[] min=new long[n];		for (int i=0;i<n;i++)			min[i]=a[i]+t;		long[] max=new long[n];		Arrays.fill(max,MX);		long[] b=new long[n];		boolean ok=true;		int[] mem=new int[n];		//int[] mem2=new int[n];		for (int i=0;i<n;i++){			int xi=x[i];			if (xi<i){				ok=false;				break;			}			// mark between i+1 and xi			if (i+1<n){				mem[i+1]++;				if (xi+1<n)					mem[xi+1]--;			}  			// prevent other values			if (xi<n-1){				max[xi]=Math.min(max[xi],a[xi+1]+t-1);			} 		}		 		// process marked values		if (ok){			int cur=0;			for (int u=0;u<n;u++){				cur+=mem[u];				if (cur>0){					min[u-1]=Math.max(min[u-1],a[u]+t);				}											}		}					// mark2			/*			for (int y=0;y<n-1;y++){				if (mem2[y]>0){					max[y]=Math.min(max[y],a[y+1]+t-1);				}			}			*/  		if (ok){			for (int i=0;i+1<n;i++){				if (min[i+1]<=min[i]){					min[i+1]=min[i]+1;				}			} 			for (int i=0;i<n;i++){				if (max[i]<min[i]){					ok=false;					//log("issue");					//log(min);					//log(max); 					break;				} else {					b[i]=min[i];					if (b[i]>MX){						ok=false;					}				}			}		}		if (ok){			output("Yes");			for (int i=0;i<n;i++){				outputWln(b[i]+" ");			}			output("");		} else {			output("No");		}	}   	static void process() throws Exception {  		out = new BufferedWriter(new OutputStreamWriter(System.out));		reader=new InputReader(System.in);		//log((""+MX).length()); 		int n=reader.readInt();		long t=reader.readLong();		long[] a=new long[n];		int[] x=new int[n];		for (int i=0;i<n;i++)			a[i]=reader.readLong();		for (int i=0;i<n;i++)			x[i]=reader.readInt()-1;		solveAlt(n,t,a,x);		//solveOKSlow(n,t,a,x); 		try {			out.close();		}		catch (Exception EX){}  	}  	public static void main(String[] args) throws Exception {		process(); 	} 	static final class InputReader {		private final InputStream stream;		private final byte[] buf = new byte[1024];		private int curChar;		private int numChars; 		public InputReader(InputStream stream) {			this.stream = stream;		} 		private int read() throws IOException {			if (curChar >= numChars) {				curChar = 0;				numChars = stream.read(buf);				if (numChars <= 0) {					return -1;				}			}			return buf[curChar++];		}  		public final String readString() throws IOException {			int c = read();			while (isSpaceChar(c)) {				c = read();			}			StringBuilder res=new StringBuilder();			do {				res.append((char)c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public final int readInt() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			int res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		} 		public final long readLong() throws IOException {			int c = read();			boolean neg=false;			while (isSpaceChar(c)) {				c = read();			}			char d=(char)c;			//log("d:"+d);			if (d=='-') {				neg=true;				c = read();			}			long res = 0;			do {				res *= 10;				res += c - '0';				c = read();			} while (!isSpaceChar(c));			//log("res:"+res);			if (neg)				return -res;			return res; 		}    		private boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		}	}  }
