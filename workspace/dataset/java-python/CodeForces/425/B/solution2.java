import java.util.*;import java.io.*;public class Bdiv1 {		public static void main(String...thegame) {		FastScanner sc = new FastScanner();		int n = sc.nextInt();		int m = sc.nextInt();		int k = sc.nextInt();		int[][] map = new int[n][m];		for(int i = 0; i < n; i++){			for(int j = 0; j < m; j++){				map[i][j] = sc.nextInt();			}		}		if(n > 10) {			int res = k+1;			for(int t = 0; t < n; t++){				//pick this row				int curr = 0;				for(int i = 0; i < n; i++){					int a = 0, b = 0;					for(int j = 0; j < m; j++){						if(map[t][j] == map[i][j]) a++;						else b++;					}					curr += Math.min(a, b);				}				res = Math.min(res, curr);			}			if(res > k) System.out.println(-1);			else System.out.println(res);		}		else {			map = transpose(map);			int aux = n; n = m; m = aux;			int res = k+1;			for(int mask = 0; mask < (1 << m); mask++) {// pick a way to transform row 1.				int[] row = new int[m];				aux = mask;				for(int i = 0; i < m; i++){					row[i] = aux % 2; aux /= 2;				}				int curr = 0;				for(int i = 0; i < n; i++){					int a = 0, b = 0;					for(int j = 0; j < m; j++){						if(map[i][j] == row[j]) a++;						else b++;					}					curr += Math.min(a, b);				}				res = Math.min(res, curr);			}			if(res > k) System.out.println(-1);			else System.out.println(res);		}	}	static int[][] transpose(int[][] map) {		int n = map.length;		int m = map[0].length;		int[][] res = new int[m][n];		for(int i = 0; i < n; i++){			for(int j = 0; j < m; j++){				res[j][i] = map[i][j];			}		}		return res;	}	static class FastScanner {		public BufferedReader reader;		public StringTokenizer tokenizer;		public FastScanner() {			reader = new BufferedReader(new InputStreamReader(System.in), 32768);			tokenizer = null;		}		public String next() {			while (tokenizer == null || !tokenizer.hasMoreTokens()) {				try {					tokenizer = new StringTokenizer(reader.readLine());				} catch (IOException e) {					throw new RuntimeException(e);				}			}			return tokenizer.nextToken();		}		public int nextInt() {			return Integer.parseInt(next());		}		public long nextLong() {			return Long.parseLong(next());		}		public double nextDouble() {			return Double.parseDouble(next());		}		public String nextLine() {			try {				return reader.readLine();			} catch(IOException e) {				throw new RuntimeException(e);			}		}	}Â }
