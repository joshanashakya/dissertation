import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.IOException;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BSerejaAndTable solver = new BSerejaAndTable();            solver.solve(1, in, out);            out.close();        }    }     static class BSerejaAndTable {        public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int m = in.ri();            int k = in.ri();            int[][] mat = new int[n][m];            for (int i = 0; i < n; i++) {                for (int j = 0; j < m; j++) {                    mat[i][j] = in.ri();                }            }            int best = (int) 1e9;            if (n <= k) {                for (int choice = 0; choice < 1 << n; choice++) {                    int minCost = 0;                    for (int j = 0; j < m; j++) {                        int c1 = 0;                        int c0 = 0;                        for (int i = 0; i < n; i++) {                            c1 += Bits.get(choice, i) ^ 1 ^ mat[i][j];                            c0 += Bits.get(choice, i) ^ 0 ^ mat[i][j];                        }                        minCost += Math.min(c1, c0);                    }                    best = Math.min(minCost, best);                }            } else {                int[] Y = new int[m];                for (int choice = 0; choice < n; choice++) {                    for (int t = 0; t < 2; t++) {                        int minCost = 0;                        for (int j = 0; j < m; j++) {                            Y[j] = mat[choice][j] ^ t;                        }                        for (int i = 0; i < n; i++) {                            int c1 = 0;                            int c0 = 0;                            for (int j = 0; j < m; j++) {                                c1 += mat[i][j] ^ 1 ^ Y[j];                                c0 += mat[i][j] ^ 0 ^ Y[j];                            }                            minCost += Math.min(c1, c0);                        }                        best = Math.min(minCost, best);                    }                }            }             out.println(best > k ? -1 : best);        }     }     static class Bits {        private Bits() {        }         public static int get(int x, int i) {            return (x >>> i) & 1;        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 32 << 10;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(int c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(int c) {            return append(c).println();        }         public FastOutput println() {            return append('\n');        }         public FastOutput flush() {            try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                os.append(cache);//            }                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }     static class FastInput {        private final InputStream is;        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }     }} 
