import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        Scanner in = new Scanner(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BAnExpressTrainToReveries solver = new BAnExpressTrainToReveries();        solver.solve(1, in, out);        out.close();    }     static class BAnExpressTrainToReveries {        int n;        int[][] arr;        int[] count;         public void readInput(Scanner sc) {            n = sc.nextInt();            arr = new int[2][n];            for (int i = 0; i < n; i++)                arr[0][i] = sc.nextInt();            for (int i = 0; i < n; i++)                arr[1][i] = sc.nextInt();        }         public void solve(int testNumber, Scanner sc, PrintWriter pw) {            int q = 1;            while (q-- > 0) {                readInput(sc);                count = new int[n + 1];                ArrayList<Integer> first = new ArrayList<>(), second = new ArrayList<>();                for (int x : arr[0])                    count[x]++;                int firstMissing = 1;                int maxCount = 1;                for (int i = 1; i <= n; i++)                    if (count[i] == 0)                        firstMissing = i;                    else if (count[i] > 1)                        maxCount = i;                for (int i = 0; i < n; i++)                    if (arr[0][i] == maxCount)                        first.add(i);                count = new int[n + 1];                for (int x : arr[1])                    count[x]++;                int secondMissing = 1;                maxCount = 1;                for (int i = 1; i <= n; i++)                    if (count[i] == 0)                        secondMissing = i;                    else if (count[i] > 1)                        maxCount = i;                for (int i = 0; i < n; i++)                    if (arr[1][i] == maxCount)                        second.add(i);                for (int x : first)                    for (int y : second) {                        if (valid(x, y, firstMissing, secondMissing)) {                            arr[0][x] = firstMissing;                            arr[1][y] = secondMissing;                            for (int i = 0; i < n; i++)                                pw.print(arr[0][i] + " ");                            return;                        }                    }            }        }         private boolean valid(int x, int y, int first, int second) {            int[][] temp = new int[2][n];            temp[0] = arr[0].clone();            temp[1] = arr[1].clone();            temp[0][x] = first;            temp[1][y] = second;            for (int i = 0; i < n; i++)                if (temp[0][i] != temp[1][i])                    return false;            return true;        }     }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens())                    st = new StringTokenizer(br.readLine());                return st.nextToken();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public int nextInt() {            return Integer.parseInt(next());        }     }} 
