import java.util.*;public class Check2 {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        //int t=sc.nextInt();        String s=sc.next();        char s1[]=s.toCharArray();         Set<Character> set=new HashSet<>();        for(int i=0;i<s.length();i++){            set.add(s1[i]);        }         if(set.size()==1){            System.out.println(0);        }else {          int max=Integer.MIN_VALUE;          for(int i=0;i<s1.length;i++){              for(int j=i;j<=s1.length;j++){                  String s12=s.substring(i,j);                  //System.out.println(s12);                  String u=checkPalindrone(s12);                 // System.out.println(u);                  if(s12.length()>0&&u.length()>=max){                      max=u.length();                  }              }          }            System.out.println(max);        }     }     public static String checkPalindrone(String s){         boolean check=true;        for(int p=0;p<s.length();p++){            if(p<=(s.length()-1-p)){                if(s.charAt(p)!=s.charAt(s.length()-1-p)){                    check=false;                    break;                }            }        }        if(check){            return "";        }else {            return s;        }       /* Stack<Character> stack=new Stack<>();        char s1[]=s.toCharArray();        stack.add(s1[0]);        for(int i=1;i<s1.length;i++){            char ch=s1[i];            if(stack.isEmpty() || stack.peek()!=ch){                stack.push(ch);            }else {                stack.pop();            }        }        if(stack.isEmpty()){            return "";        }else{            StringBuilder y= new StringBuilder();            while (!stack.isEmpty()){                y.insert(0, stack.pop());            }            return y.toString();        }*/     }     public static int  getAns(int[] swim,int[] bugs,int[] homework,int n,int choice,int[][] dp){        if(n<0){            return 0;        }         if(dp[n][choice]!=-1){            return dp[n][choice];        }         if(n==swim.length-1){            int ans1=swim[n]+getAns(swim,bugs,homework,n-1,0,dp);            int ans2=bugs[n]+getAns(swim,bugs,homework,n-1,1,dp);            int ans3=homework[n]+getAns(swim,bugs,homework,n-1,2,dp);            dp[n][choice]= Math.max(ans1,Math.max(ans2,ans3));            return dp[n][choice];        }else {            if(choice==0){                int ans2=bugs[n]+getAns(swim,bugs,homework,n-1,1,dp);                int ans3=homework[n]+getAns(swim,bugs,homework,n-1,2,dp);               dp[n][choice]= Math.max(ans2,ans3);             }else if(choice==1){                int ans1=swim[n]+getAns(swim,bugs,homework,n-1,0,dp);                int ans3=homework[n]+getAns(swim,bugs,homework,n-1,2,dp);                dp[n][choice]= Math.max(ans1,ans3);            }else {                int ans1=swim[n]+getAns(swim,bugs,homework,n-1,0,dp);                int ans2=bugs[n]+getAns(swim,bugs,homework,n-1,1,dp);                dp[n][choice]= Math.max(ans1,ans2);            }            return dp[n][choice];        }       }     public static long power(long a, long b, long c) {        long ans = 1;        while (b != 0) {            if (b % 2 == 1) {                ans = ans * a;                ans %= c;            }            a = a * a;            a %= c;            b /= 2;        }        return ans;    }     public static long power1(long a, long b, long c) {        long ans = 1;        while (b != 0) {            if (b % 2 == 1) {                ans = multiply(ans, a, c);            }            a = multiply(a, a, c);            b /= 2;         }        return ans;     }     public static long multiply(long a, long b, long c) {        long res = 0;        a %= c;        while (b > 0) {            if (b % 2 == 1) {                res = (res + a) % c;            }            a = (a + a) % c;            b /= 2;        }         return res % c;     }     public static long totient(long n) {        long result = n;        for (long i = 2; i * i <= n; i++) {            if (n % i == 0) {                //sum=sum+2*i;                while (n % i == 0) {                    n /= i;                    // sum=sum+n;                }                result -= result / i;             }        }        if (n > 1) {            result -= result / n;         }        return result;    }      public static long gcd(long a, long b) {        if (b == 0) {            return a;        } else {            return gcd(b, a % b);        }    }     public static boolean[] primes(int n) {        boolean[] p = new boolean[n + 1];        p[0] = false;        p[1] = false;        for (int i = 2; i <= n; i++) {            p[i] = true;        }         for (int i = 2; i * i <= n; i++) {            if (p[i]) {                for (int j = i * i; j <= n; j += i) {                    p[j] = false;                }            }         }        return p;    }     static int val(char c) {        if (c >= '0' && c <= '9')            return (int) c - '0';        else            return (int) c - 'A' + 10;    }     // Function to convert a// number from given base// 'b' to decimal    static int toDeci(String str,                      int base) {        int len = str.length();        int power = 1; // Initialize        // power of base        int num = 0; // Initialize result        int i;         // Decimal equivalent is        // str[len-1]*1 + str[len-2] *        // base + str[len-3]*(base^2) + ...        for (i = len - 1; i >= 0; i--) {            // A digit in input number            // must be less than            // number's base            if (val(str.charAt(i)) >= base) {                System.out.println("Invalid Number");                return -1;            }             num += val(str.charAt(i)) * power;            power = power * base;        }         return num;    }}  	  	 				  	  	 	 				 			 		
