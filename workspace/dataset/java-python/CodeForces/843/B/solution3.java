/** * Created by Aminul on 8/24/2017. */ import java.io.*;import java.util.Arrays;import java.util.Random;import java.util.StringTokenizer;import java.util.TreeSet;  public class CF844D_2 {    public static int index;    public static void main(String[] args)throws Exception {        InputReader in = new InputReader(System.in);        PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));         TreeSet<Node> set = new TreeSet<>();        int n = in.nextInt(), start = in.nextInt(), x = in.nextInt();         pw.println("? "+start); pw.flush();        int v = in.nextInt(), nextIdx = in.nextInt();        set.add(new Node(v, start, nextIdx));         Random rand = new Random();         for(int i = 0; i < 999; i++){            int r = rand.nextInt(n+1);            if(r == 0) r++;            pw.println("? "+r); pw.flush();            v = in.nextInt(); nextIdx = in.nextInt();            set.add(new Node(v, i, nextIdx));        }         Node smaller = set.lower(new Node(x, 0, 0));        if(smaller != null){            int ni = smaller.next;            for(int i = 0; i < 999; i++){               if(ni == -1) break;               pw.println("? "+ni); pw.flush();               v = in.nextInt(); nextIdx = in.nextInt();               set.add(new Node(v, ni, nextIdx));               ni = nextIdx;            }        }          if(set.ceiling(new Node(x, 0, 0)) != null) pw.println("! "+set.ceiling(new Node(x, 0, 0)).v);        else pw.println("! -1");         pw.flush();         pw.close();    }     static class Node implements Comparable<Node>{        int v, i, next;        Node(int V, int I, int N){            v = V; i = I; next = N;        }         public int compareTo(Node n){            return v - n.v;        }         public String toString(){            return v+" "+i+" "+next;        }    }     static void debug(Object...obj) {        System.err.println(Arrays.deepToString(obj));    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream));            tokenizer = null;        }         //InputReader in = new InputReader(new FileReader("File_Name"));        public InputReader(FileReader file) {            reader = new BufferedReader(file);            tokenizer = null;        }         public String next() {             try {                while (tokenizer == null || !tokenizer.hasMoreTokens())                    tokenizer = new StringTokenizer(reader.readLine());            } catch (IOException e) {                return null;            }             return tokenizer.nextToken();        }         public String nextLine() {            String line = null;            try {                tokenizer = null;                line =  reader.readLine();            } catch (IOException e) {                throw new RuntimeException(e);            }            return line;        }         public int nextInt() {            return Integer.parseInt(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public long nextLong() {            return Long.parseLong(next());        }        public boolean hasNext(){            try {                while (tokenizer == null || !tokenizer.hasMoreTokens())                    tokenizer = new StringTokenizer(reader.readLine());            }            catch (Exception e) {                return false;            }             return true;         }    }}
