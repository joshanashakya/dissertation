import java.util.*; public class Main {    public static class Fuck implements Comparable<Fuck>{        public int c, w;        public int compareTo(Fuck o1) {            if (c == o1.c)            {                if (w < o1.w){                    return -1;                }                else if (w > o1.w) {                    return 1;                }                return 0;            }                            else if (c > o1.c)                return -1;            else                return 1;        }    }      public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        int m = sc.nextInt();        long d = sc.nextInt();        Fuck[] a = new Fuck[n];        Fuck[] b = new Fuck[m];         for (int i = 0; i < n; i++){            int c = sc.nextInt();            int w = sc.nextInt();            a[i] = new Fuck();            a[i].c = c;            a[i].w = w;        }         for (int i = 0; i < m; i++){            int c = sc.nextInt();            int w = sc.nextInt();            b[i] = new Fuck();            b[i].c = c;            b[i].w = w;        }         Arrays.sort(a);        Arrays.sort(b);         long[] asumw = new long[n];        long[] asumc = new long[n];        long[] bsumw = new long[m];        long[] bsumc = new long[m];        asumw[0] = a[0].w;        asumc[0] = a[0].c;        bsumw[0] = b[0].w;        bsumc[0] = b[0].c;         for (int i = 1; i < n; i++)        {            asumw[i] = (long)(a[i].w) + asumw[i - 1];            asumc[i] = (long)(a[i].c) + asumc[i - 1];        }         for (int i = 1; i < m; i++) {            bsumw[i] = (long)(b[i].w) + bsumw[i - 1];            bsumc[i] = (long)(b[i].c) + bsumc[i - 1];        }          long best = 0;        for (int i = 0; i < n; i++)        {            if (asumw[i] > d) {                break;            }            int l = 0, r = m;            while (r - l > 0)            {                int mid = l + (r - l) / 2;                if (d >= asumw[i] + bsumw[mid]) {                    l = mid + 1;                }                else {                    r = mid;                }            }            if (l == 0) {                break;            }            best = Math.max(best, asumc[i] + bsumc[l - 1]);        }        System.out.println(best);    }}
