import javafx.util.Pair; import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.OutputStream;import java.io.IOException;import java.util.*;import java.io.InputStreamReader;import java.io.Writer;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author Niyaz Nigmatullin */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        FastScanner in = new FastScanner(inputStream);        FastPrinter out = new FastPrinter(outputStream);         Integer n = in.nextInt(), m = in.nextInt(), d = in.nextInt();         ArrayList<Pair<Long, Long> > a = new ArrayList<>(), b = new ArrayList<>();         for (int i = 0; i < n; i++) {            Pair<Long, Long> c = new Pair<Long, Long>((long) in.nextInt(), (long) in.nextInt());             a.add(c);        }         for (int i = 0; i < m; i++) {            Pair<Long, Long> c = new Pair<Long, Long>((long) in.nextInt(), (long) in.nextInt());             b.add(c);        }         Collections.sort(a, new Comparator<Pair<Long, Long>>() {            @Override            public int compare(final Pair<Long, Long> o1, final Pair<Long, Long> o2) {                if (o1.getKey() < o2.getKey()) {                    return 1;                } else if (o1.getKey().equals(o2.getKey())) {                    if (o1.getValue() < o2.getValue()) {                        return -1;                    } else if (o1.getValue().equals(o2.getValue())) {                        return 0;                    } else {                        return 1;                    }                } else {                    return -1;                }            }});         Collections.sort(b, new Comparator<Pair<Long, Long>>() {            @Override            public int compare(final Pair<Long, Long> o1, final Pair<Long, Long> o2) {                if (o1.getKey() < o2.getKey()) {                    return 1;                } else if (o1.getKey().equals(o2.getKey())) {                    if (o1.getValue() < o2.getValue()) {                        return -1;                    } else if (o1.getValue().equals(o2.getValue())) {                        return 0;                    } else {                        return 1;                    }                } else {                    return -1;                }            }});         for (int i = 1; i < n; i++) {            a.set(i, new Pair<Long, Long> (a.get(i - 1).getKey() + a.get(i).getKey(), a.get(i - 1).getValue() + a.get(i).getValue()));        }         for (int i = 1; i < m; i++) {            b.set(i, new Pair<Long, Long> (b.get(i - 1).getKey() + b.get(i).getKey(), b.get(i - 1).getValue() + b.get(i).getValue()));        } //        for (int i = 0; i < n; i++) {//            out.println(String.valueOf(a.get(i).getKey()) + " " + String.valueOf(a.get(i).getValue()));//        }         long ans = 0;         for (int i = 0; i < n; i++) {             int l = -1, r = m;             while (r - l > 1) {                int mid = (l + r) / 2;                 if (b.get(mid).getValue() + a.get(i).getValue() <= (long) d) {                    l = mid;                } else {                    r = mid;                }            }             if (l == -1) continue;             if (ans < a.get(i).getKey() + b.get(l).getKey()) {//                out.println(String.valueOf(i) + " " + String.valueOf(l));                ans = a.get(i).getKey() + b.get(l).getKey();            }        }         out.println(ans);        out.close();    }     static class FastPrinter extends PrintWriter {        public FastPrinter(OutputStream out) {            super(out);        }         public FastPrinter(Writer out) {            super(out);        }     }     static class FastScanner extends BufferedReader {        public FastScanner(InputStream is) {            super(new InputStreamReader(is));        }          public int read() {            try {                int ret = super.read();//            if (isEOF && ret < 0) {//                throw new InputMismatchException();//            }//            isEOF = ret == -1;                return ret;            } catch (IOException e) {                throw new InputMismatchException();            }        }         static boolean isWhiteSpace(int c) {            return c >= 0 && c <= 32;        }         public int nextInt() {            int c = read();            while (isWhiteSpace(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int ret = 0;            while (c >= 0 && !isWhiteSpace(c)) {                if (c < '0' || c > '9') {                    throw new NumberFormatException("digit expected " + (char) c                            + " found");                }                ret = ret * 10 + c - '0';                c = read();            }            return ret * sgn;        }         public String readLine() {            try {                return super.readLine();            } catch (IOException e) {                return null;            }        }     }}
