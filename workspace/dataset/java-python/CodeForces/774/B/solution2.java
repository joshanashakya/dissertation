import java.util.*;import java.io.*; public class J10 {    public static void main(String[] args) {        Scanner in = new Scanner(System.in);        PrintWriter out = new PrintWriter(System.out, true);        int n = in.nextInt();        int m = in.nextInt();        int d = in.nextInt();        Pair[] phys = new Pair[n];        Pair[] inf = new Pair[m];        for (int i = 0; i < n; i++) {            int s = in.nextInt();            int w = in.nextInt();            phys[i] = new Pair(s, w);        }        for (int i = 0; i < m; i++) {            int s = in.nextInt();            int w = in.nextInt();            inf[i] = new Pair(s, w);        }        int currIdx = -1, i = 0, j = 0;        long maxSign = 0, currSign = 0, currWght = 0;        Arrays.sort(phys);        Arrays.sort(inf);        while (i < n && currWght + phys[i].w <= d) {            currSign += phys[i].s;            currWght += phys[i].w;            currIdx = i;            i++;        }        while (currIdx >= 0) {            while (j < m && currWght + inf[j].w <= d) {                currSign += inf[j].s;                currWght += inf[j].w;                j++;            }            if (j > 0)                maxSign = Math.max(maxSign, currSign);            currSign -= phys[currIdx].s;            currWght -= phys[currIdx].w;            currIdx--;        }        out.print(maxSign);        out.close();    }     static class Pair implements Comparable<Pair> {        int s;        int w;         Pair(int first, int second) {            this.s = first;            this.w = second;        }         @Override        public int compareTo(Pair pair) {            if (this.s == pair.s)                return this.w - pair.w;            else                return pair.s - this.s;        }         @Override        public boolean equals(Object o) {            if (!(o instanceof Pair))                return false;            Pair p = (Pair) o;            return Objects.equals(p.s, s) && Objects.equals(p.w, w);        }         @Override        public int hashCode() {            return this.s ^ this.w;        }         @Override        public String toString() {            return "" + '(' + this.s + ',' + this.w + ')';        }    }}
