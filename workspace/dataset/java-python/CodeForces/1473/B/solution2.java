import java.util.Scanner;public class Main {    public static void main(String args[]) {        Scanner s = new Scanner(System.in);        int t = s.nextInt();        while(t-- != 0){            String a = s.next();            String b = s.next();            int num = lcm(a.length(),b.length());            //System.out.println(num);            StringBuilder sb = new StringBuilder();            if(a.length() >= b.length()){                num = num/a.length();                while(num > 0){                    sb.append(a);                    num--;                }            }            else{                num = num/b.length();                while(num > 0){                    sb.append(b);                    num--;                }            }            if(repeatedSubstringPattern(sb.toString(),a) && repeatedSubstringPattern(sb.toString(),b)){                System.out.println(sb);            }            else{                System.out.println(-1);            }        }    }    public static boolean repeatedSubstringPattern(String s,String check) {        if(s.equals(check)){            return true;        }       for(int i = s.length()/2; i >= 1; i--){           if(s.length() % i == 0){              String str = s.substring(0,i);              if(str.equals(check)){                  int times = s.length()/i;                  int start = 0,end = i;                  boolean flag = true;                  while(end <= s.length()){                      if(!s.substring(start,end).equals(check)){                          flag = false;                          break;                      }                        start = end;                          end = end + i;                  }                  if(flag){                      return true;                  }                                                }           }        }        return false;    }     static int gcd(int a, int b)    {        if (a == 0)            return b;         return gcd(b % a, a);     }    static int lcm(int a, int b)    {        return (a / gcd(a, b)) * b;    }}
