import java.io.*;import java.util.Arrays;import java.util.StringTokenizer; public class A {     public void solve() {         int t = in.nextInt();         while (t-- > 0) {            int n = in.nextInt();            int d = in.nextInt();            boolean answer = true;            int a[] = in.readIntArray(n);            for (int i = 0; i < n; i++) {                if (a[i] > d) {                    answer = false;                    break;                }            }             if (answer) {                out.println("YES");                continue;            }             Arrays.sort(a);            out.println(a[0]+a[1]<=d ? "YES":"NO");        }    }     class Pair implements Comparable<Pair> {        int x;        int y;         public Pair(int x, int y) {            this.x = x;            this.y = y;        }          @Override        public int compareTo(Pair o) {            if (this.x == o.x)                return this.y - o.y;            return this.x - o.x;        }         @Override        public String toString() {            return "Pair{" +                    "x=" + x +                    ", y=" + y +                    '}';        }    }     public long binaryPower(long x, int exp, long mod) {        if (exp == 0)            return 1;         long result = binaryPower(x, exp / 2, mod);         if (exp % 2 == 0)            return result * result % mod;         return result * result % mod * x % mod;    }     String input = "";    String output = "";    FastScanner in;    PrintWriter out;     void run() throws Exception {        if (input.length() == 0) {            in = new FastScanner(System.in);        } else {            in = new FastScanner(new File(input));        }        if (output.length() == 0) {            out = new PrintWriter(System.out);        } else {            out = new PrintWriter(new File(output));        }         solve();         out.close();     }     public static void main(String[] args) throws Exception {        new A().run();    }     class FastScanner {         BufferedReader bf;        StringTokenizer st;         public FastScanner(InputStream is) {            bf = new BufferedReader(new InputStreamReader(is));        }         public FastScanner(File fr) throws FileNotFoundException {            bf = new BufferedReader(new FileReader(fr));        }         public String next() {            try {                while (st == null || !st.hasMoreTokens()) {                    st = new StringTokenizer(bf.readLine());                }            } catch (IOException ex) {                ex.printStackTrace();            }            return st.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public double nextDouble() {            return Double.parseDouble(next());        }         public int[] readIntArray(int length) {            int arr[] = new int[length];            for (int i = 0; i < length; i++)                arr[i] = nextInt();            return arr;        }    }}
