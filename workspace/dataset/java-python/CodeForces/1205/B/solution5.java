//created by Whiplash99import java.io.*;import java.util.*;public class A{    private static ArrayList<Integer>[] count;    private static ArrayDeque<Integer>[] edge;    private static long[] a;     private static void addBits(long N, int id)    {        int cur=0;        while (N>0)        {            if((N&1)==1) count[cur].add(id);            N>>=1; cur++;        }    }    private static void addEdges()    {        for(int i=0;i<65;i++)        {            if(count[i].size()<2) continue;            int u=count[i].get(0);            int v=count[i].get(1);             long x=a[u]&a[v];            int cur=0;            while (x>0)            {                if((x&1)==1) break;                cur++; x>>=1;            }             if(cur==i)            {                edge[u].add(v);                edge[v].add(u);            }        }    }    private static int BFS(int u, int v)    {        ArrayDeque<Integer> Q=new ArrayDeque<>();        HashMap<Integer,Integer> dist=new HashMap<>();         dist.put(u,0); Q.addLast(u);        while (!Q.isEmpty())        {            int x=Q.pollFirst();            int d=dist.get(x);             if(x==v) return d+1;            for(int y:edge[x])            {                if(dist.containsKey(y)) continue;                dist.put(y,d+1); Q.addLast(y);            }        }        return -1;    }    public static void main(String[] args) throws IOException    {        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));         int i,N;         N=Integer.parseInt(br.readLine().trim());         count=new ArrayList[65]; edge=new ArrayDeque[N];        for(i=0;i<65;i++) count[i]=new ArrayList<>();        for(i=0;i<N;i++) edge[i]=new ArrayDeque<>();         a=new long[N];        String[] s=br.readLine().trim().split(" ");        for(i=0;i<N;i++) a[i]=Long.parseLong(s[i]);         for(i=0;i<N;i++) addBits(a[i], i);        for(i=0;i<65;i++) if(count[i].size()>=3) break;        if(i<65)        {            System.out.println(3);            System.exit(0);        }         addEdges();        int ans=Integer.MAX_VALUE;        for(int u=0;u<N;u++)        {            int size=edge[u].size();            while (size-->0)            {                int v=edge[u].pollFirst();                int len=BFS(u,v);                 if(len!=-1) ans=Math.min(ans,len);                edge[u].addLast(v);            }        }         if(ans==Integer.MAX_VALUE) System.out.println(-1);        else System.out.println(ans);    }}
