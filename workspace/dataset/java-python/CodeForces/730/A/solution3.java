import javafx.scene.layout.Priority; import java.io.*;import java.math.BigInteger;import java.util.*; public class Main {      long MODULO = 998244353;    int INF = Integer.MAX_VALUE - 1234567;     class Point implements Comparable<Point>{        int value, index;         public Point(int value, int index) {            this.value = value;            this.index = index;        }         @Override        public int compareTo(Point o) {            return Integer.compare(o.value, this.value);        }    }     void solve() throws IOException {        int n = readInt();         int[] r = readIntArray(n);        int[] count = new int[1000];        HashSet<Integer> st = new HashSet<>();        PriorityQueue<Point> q = new PriorityQueue<>();        for (int i=0; i<n; ++i){            q.add(new Point(r[i], i));            count[r[i]]++;            st.add(r[i]);        }        if (st.size() == 1){            out.println(r[0]);            out.print(0);            return;        }        ArrayList<HashSet<Integer>> ansList = new ArrayList<>();        int ansValue = 0;        boolean flag = true;        while(flag){            ArrayList<Point> curPoints = new ArrayList<>();            curPoints.add(q.poll());            curPoints.add(q.poll());             while (q.size() > 0 && q.peek().value == curPoints.get(0).value && curPoints.size() < (curPoints.size() >= 3 && count[curPoints.get(0).value] == 6 ? 4 : 5)){                curPoints.add(q.poll());            }            HashSet<Integer> curAnsPoints = new HashSet<>();            for (Point p: curPoints){                count[p.value]--;                count[Math.max(p.value-1, 0)]++;                curAnsPoints.add(p.index);                 q.add(new Point(Math.max(p.value-1, 0), p.index));            }            if (count[Math.max(curPoints.get(0).value-1, 0)] == n) {                flag = false;                ansValue = Math.max(curPoints.get(0).value-1, 0);            }            ansList.add(curAnsPoints);        }        out.println(ansValue);        out.println(ansList.size());        for (HashSet<Integer> ansSt: ansList){            for (int i=0; i<n; ++i){                out.print(ansSt.contains(i) ? 1 : 0);            }            out.println();        }     }     long gcd(long a, long b){        return a % b == 0 ? b : gcd(b, a % b);    }     int[][] steps = {{1, 0}, {0, 1}};    String fileName = "";    private final static Random rnd = new Random();    boolean checkBit(long mask, int bit) {        return (mask & (1l << bit)) > 0;    }     ////////////////////////////////////////////////////////////    public static void main(String[] args) throws NumberFormatException, IOException {        // TODO Auto-generated method stub        new Main().run();    }     void run() throws NumberFormatException, IOException {        solve();        out.close();    }     ;     BufferedReader in;    PrintWriter out;     StringTokenizer tok;    String delim = " ";     Main() throws FileNotFoundException {        try {            in = new BufferedReader(new FileReader("input.txt"));            out = new PrintWriter("output.txt");        } catch (Exception e) {            if (fileName.isEmpty()) {                in = new BufferedReader(new InputStreamReader(System.in));                out = new PrintWriter(System.out);            } else {                in = new BufferedReader(new FileReader(fileName + ".in"));                out = new PrintWriter(fileName + ".out");            }         }        tok = new StringTokenizer("");    }     String readLine() throws IOException {        return in.readLine();    }     String readString() throws IOException {        while (!tok.hasMoreTokens()) {            String nextLine = readLine();            if (null == nextLine) {                return null;            }             tok = new StringTokenizer(nextLine);        }        return tok.nextToken(delim);    }     int readInt() throws NumberFormatException, IOException {        return Integer.parseInt(readString());    }     long readLong() throws NumberFormatException, IOException {        return Long.parseLong(readString());    }     int[] readIntArray(int n) throws NumberFormatException, IOException {        int[] a = new int[n];        for (int i = 0; i < n; ++i) {            a[i] = readInt();        }        return a;    }     double readDouble() throws NumberFormatException, IOException {        return Double.parseDouble(readString());    }}
