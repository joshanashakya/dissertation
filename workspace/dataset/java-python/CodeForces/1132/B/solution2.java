import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.PrintStream;import java.io.PrintWriter;import java.security.AccessControlException;import java.util.Arrays;import java.util.Collection;import java.util.List;import java.util.Objects;import java.util.Scanner;import java.util.function.Function;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.LongStream;import java.util.stream.Stream;public class _p001132B {    static public void main(final String[] args) throws IOException {        p001132B._main(args);    }//begin p001132B.javastatic private class p001132B extends Solver{public p001132B(){nameIn="in/900/p001132B.in";singleTest=true;}int n;int[]a;int m;int[]q;@Override protected void solve(){Arrays.sort(a);long sum=Arrays.stream(a).mapToLong(Long::valueOf).sum();pw.println(joinToString(Arrays.stream(q).mapToLong(v->sum-a[n-v])).replace(" ","\n"));}@Override publicvoid readInput()throws IOException{n=sc.nextInt();if(sc.hasNextLine()){sc.nextLine();}a=Arrays.stream(sc.nextLine().trim().split("\\s+")).mapToInt(Integer::valueOf).toArray();m=sc.nextInt();if(sc.hasNextLine()){sc.nextLine();}q=Arrays.stream(sc.nextLine().trim().split("\\s+")).mapToInt(Integer::valueOf).toArray();}static publicvoid _main(String[]args)throws IOException{new p001132B().run();}}//end p001132B.java//begin net/leksi/contest/Solver.javastatic private abstract class Solver{protected String nameIn=null;protected StringnameOut=null;protected boolean singleTest=false;protected boolean preprocessDebug=false;protected boolean doNotPreprocess=false;protected PrintStream debugPrintStream=null;protected Scanner sc=null;protected PrintWriter pw=null;final String SPACE=" ";final String SPACES="\\s+";private void process()throws IOException{if(!singleTest){int t=lineToIntArray()[0];while(t-->0){readInput();solve();}}else{readInput();solve();}}abstract protected void readInput()throws IOException;abstract protectedvoid solve()throws IOException;protected int[]lineToIntArray()throws IOException{return Arrays.stream(sc.nextLine().trim().split(SPACES)).mapToInt(Integer::valueOf).toArray();}protected long[]lineToLongArray()throws IOException{return Arrays.stream(sc.nextLine().trim().split(SPACES)).mapToLong(Long::valueOf).toArray();}protectedString joinToString(final int[]a){return Arrays.stream(a).mapToObj(Integer::toString).collect(Collectors.joining(SPACE));}protected String joinToString(final long[]a){return Arrays.stream(a).mapToObj(Long::toString).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final T[]a){return Arrays.stream(a).map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final T[]a,final Function<T,String>toString){return Arrays.stream(a).map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(finalCollection<T>a){return a.stream().map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final Collection<T>a,final Function<T,String>toString){return a.stream().map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final Stream<T>a){return a.map(v->Objects.toString(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final Stream<T>a,final Function<T,String>toString){return a.map(v->toString.apply(v)).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final IntStreama){return a.mapToObj(Integer::toString).collect(Collectors.joining(SPACE));}protected<T>String joinToString(final LongStream a){return a.mapToObj(Long::toString).collect(Collectors.joining(SPACE));}protected List<Long>intArrayToLongList(final int[]a){return Arrays.stream(a).mapToObj(Long::valueOf).collect(Collectors.toList());}protected List<Integer>toList(final int[]a){return Arrays.stream(a).mapToObj(Integer::valueOf).collect(Collectors.toList());}protected List<Integer>toList(final IntStreama){return a.mapToObj(Integer::valueOf).collect(Collectors.toList());}protected List<Long>toList(final long[]a){return Arrays.stream(a).mapToObj(Long::valueOf).collect(Collectors.toList());}protected List<Long>toList(final LongStream a){return a.mapToObj(Long::valueOf).collect(Collectors.toList());}protected<T>List<T>toList(final Stream<T>a){return a.collect(Collectors.toList());}protected<T>List<T>toList(final T[]a){return Arrays.stream(a).collect(Collectors.toList());}protected void run()throwsIOException{boolean done=false;try{if(nameIn !=null&&new File(nameIn).exists()){try(FileInputStream fis=new FileInputStream(nameIn);PrintWriter pw0=select_output();){done=true;sc=new Scanner(fis);pw=pw0;process();}}}catch(IOException ex){}catch(AccessControlException ex){}if(!done){try(PrintWriter pw0=select_output();){sc=new Scanner(System.in);pw=pw0;process();}}}private PrintWriter select_output()throwsFileNotFoundException{if(nameOut !=null){return new PrintWriter(nameOut);}returnnew PrintWriter(System.out);}}//end net/leksi/contest/Solver.java}
