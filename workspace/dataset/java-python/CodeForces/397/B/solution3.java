import java.io.*;import java.util.*; public class Template implements Runnable {     BufferedReader in;    PrintWriter out;    StringTokenizer tok = new StringTokenizer("");     void init() throws FileNotFoundException {        try {            in = new BufferedReader(new FileReader("input.txt"));            out = new PrintWriter("output.txt");        } catch (Exception e) {            in = new BufferedReader(new InputStreamReader(System.in));            out = new PrintWriter(System.out);        }    }     class GraphBuilder {        int n, m;        int[] x, y;        int index;        int[] size;          GraphBuilder(int n, int m) {            this.n = n;            this.m = m;            x = new int[m];            y = new int[m];            size = new int[n];        }         void add(int u, int v) {            x[index] = u;            y[index] = v;            size[u]++;            size[v]++;            index++;        }         int[][] build() {            int[][] graph = new int[n][];            for (int i = 0; i < n; i++) {                graph[i] = new int[size[i]];            }            for (int i = m - 1; i >= 0; i--) {                int u = x[i];                int v = y[i];                graph[u][--size[u]] = v;                graph[v][--size[v]] = u;            }            return graph;        }    }     String readString() throws IOException {        while (!tok.hasMoreTokens()) {            try {                tok = new StringTokenizer(in.readLine());            } catch (Exception e) {                return null;            }        }        return tok.nextToken();    }     int readInt() throws IOException {        return Integer.parseInt(readString());    }     int[] readIntArray(int size) throws IOException {        int[] res = new int[size];        for (int i = 0; i < size; i++) {            res[i] = readInt();        }        return res;    }     long readLong() throws IOException {        return Long.parseLong(readString());    }     double readDouble() throws IOException {        return Double.parseDouble(readString());    }     <T> List<T>[] createGraphList(int size) {        List<T>[] list = new List[size];        for (int i = 0; i < size; i++) {            list[i] = new ArrayList<>();        }        return list;    }     public static void main(String[] args) {        new Template().run();        // new Thread(null, new Template(), "", 1l * 200 * 1024 * 1024).start();    }     long timeBegin, timeEnd;     void time() {        timeEnd = System.currentTimeMillis();        System.err.println("Time = " + (timeEnd - timeBegin));    }     long memoryTotal, memoryFree;     void memory() {        memoryFree = Runtime.getRuntime().freeMemory();        System.err.println("Memory = " + ((memoryTotal - memoryFree) >> 10)                + " KB");    }     public void run() {        try {            timeBegin = System.currentTimeMillis();            memoryTotal = Runtime.getRuntime().freeMemory();            init();            solve();            out.close();            if (System.getProperty("ONLINE_JUDGE") == null) {                time();                memory();            }        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }     String no = "No";    String yes = "Yes";     boolean ans(int n, int l, int r) {        if (n < l) return false;        if (n >= l && n <= r) return true;        long free = 0;        long canDown = 0;        free = n % r;        long c = n / r;        canDown = c * (r - l);        while (free > 0) {            if (free >= l && free <= r) return true;            if (free + canDown >= l) return true;            return false;        }        return true;    }     void solve() throws IOException {        int n = readInt();//        System.err.println(ans(5, 2, 2));//        for (int x = 1; x < 100; x++) {//            for (int l = 1; l < 100; l++) {//                for (int r = l; r < 100; r++) {//                    if (ans(x, l, r) != new Solve(x, l, r).solve()) {//                        throw new RuntimeException(x + " " + l + " " + r);//                    }//                    System.err.println("success " + x + " " + l + " " + r);//                }//            }//        }         while (n-- > 0) {            int x = readInt();            int l = readInt();            int r = readInt();            out.println(ans(x, l, r) ? "Yes" : "No");        }    }     class Solve {         int x, l, r;         public Solve(int x, int l, int r) {            this.x = x;            this.l = l;            this.r = r;        }         boolean solve() {            return brut(x, l, r);        }         Boolean[] cache = new Boolean[100000];         boolean brut(int x, int l, int r) {            if (x == 0) return true;            if (x < 0) return false;            if (cache[x] != null) {                return cache[x];            }            for (int i = l; i <= r; i++) {                if (brut(x - i, l, r)) return cache[x] = true;            }            return cache[x] = false;        }     }  }
