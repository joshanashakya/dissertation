import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.InputMismatchException;import java.io.IOException;import java.util.ArrayList;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * * @author V3NOM */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BColorTheFence solver = new BColorTheFence();        solver.solve(1, in, out);        out.close();    }     static class BColorTheFence {        public void solve(int testNumber, InputReader in, OutputWriter out) {             int v = in.nextInt();            int[] costs = new int[10];            int mini = Integer.MAX_VALUE;             for (int i = 1; i <= 9; i++) {                costs[i] = in.nextInt();                mini = Math.min(mini, costs[i]);            }             int d = v / mini;            if (d == 0) {                out.print("-1");                return;            }             int idx = -1;            for (int i = 1; i <= 9; i++) {                if (costs[i] == mini)                    idx = i;            }             ArrayList<Integer> ans = new ArrayList<>();            for (int i = 0; i < d; i++) {                ans.add(idx);            }             int left = v - (mini * d);             for (int i = 0; i < d; i++) {                for (int j = 9; j >= 1; j--) {                    if (left + mini >= costs[j]) {                        ans.set(i, j);                        left -= costs[j];                        left += mini;                        break;                    }                }            }             for (int el : ans)                out.print(el);             // 8            // 3 4 4 5 10 10 10 10 10   Ans : 41        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[1024];        private int curChar;        private int numChars;        private InputReader.SpaceCharFilter filter;         public InputReader(InputStream stream) {            this.stream = stream;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         public boolean isSpaceChar(int c) {            if (filter != null) {                return filter.isSpaceChar(c);            }            return isWhitespace(c);        }         public static boolean isWhitespace(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }         public interface SpaceCharFilter {            public boolean isSpaceChar(int ch);         }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                if (i != 0) {                    writer.print(' ');                }                writer.print(objects[i]);            }        }         public void close() {            writer.close();        }         public void print(int i) {            writer.print(i);        }     }}
