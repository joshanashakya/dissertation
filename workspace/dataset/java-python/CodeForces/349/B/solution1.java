import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.BufferedReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BColorTheFence solver = new BColorTheFence();        solver.solve(1, in, out);        out.close();    }     static class BColorTheFence {        public void solve(int testNumber, InputReader in, OutputWriter out) {            int v = in.nextInt();            int[] arr = in.nextIntArray(9);            int min = Integer.MAX_VALUE;            int min_ind = -1;            for (int i = 0; i < 9; i++) {                if (arr[i] <= min) {                    min = arr[i];                    min_ind = i + 1;                }            }            int l = v / min;            if (l == 0) {                out.println(-1);                return;            }            int rem = v % min + min;             while (l > 0) {                int rem_ind = -1;                for (int i = 0; i < 9; i++) {                    if (arr[i] <= rem && i + 1 >= min_ind) {                        rem_ind = i + 1;                    }                }                if (rem_ind != -1 && rem_ind > min_ind) {                    out.print(rem_ind);                    rem = min + rem - arr[rem_ind - 1];                } else {                    out.print(min_ind);                }                l--;            }        }     }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int[] nextIntArray(int n) {            int[] array = new int[n];            for (int i = 0; i < n; ++i) array[i] = nextInt();            return array;        }         public int nextInt() {            return Integer.parseInt(next());        }     }     static class OutputWriter {        private final PrintWriter writer;         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void close() {            writer.close();        }         public void print(int i) {            writer.print(i);        }         public void println(int i) {            writer.println(i);        }     }} 
