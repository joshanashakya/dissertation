import java.io.*;import java.util.*;import java.lang.*;public class Main{    static InputReader sc;    static PrintWriter pw;    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        sc = new InputReader(inputStream);        pw = new PrintWriter(outputStream);        solve();        pw.close();    }    // static int L,R,top,bottom;    // static int cnt,edge;    public static void solve() {        // int t=sc.nextInt();        int t=1;        u:while(t-->0){            int v=s(0);            int[]arr=new int[9];            feedArr(arr);            int max=0,p=-1;            boolean flag;            int [][]dp=new int [v+1][10];            for(int i=1;i<=v;i++){                for(int j=0;j<9;j++){                    if(arr[j]>i)                        continue;                    if(dp[i][0]<dp[i-arr[j]][0]+1){                        dp[i][0]=dp[i-arr[j]][0]+1;                        for(int itr=1;itr<=9;itr++)                            dp[i][itr]=dp[i-arr[j]][itr];                        dp[i][j+1]++;                    }                    else if(dp[i][0]==dp[i-arr[j]][0]+1){                        flag=false;                        for(int itr=9;itr>0;itr--)                            if(dp[i][itr]<dp[i-arr[j]][itr]+(j+1==itr?1:0)){                                flag=true;                                break;                            }                        if(flag){                            for(int itr=1;itr<=9;itr++)                                dp[i][itr]=dp[i-arr[j]][itr];                            dp[i][j+1]++;                        }                    }                }                if(dp[i][0]>max){                    max=dp[i][0];                    p=i;                }                else if(dp[i][0]==max&&max>0){                    flag=false;                    for(int itr=9;itr>0;itr--)                        if(dp[i][itr]>dp[p][itr]){                            flag=true;                            break;                        }                    if(flag)                        p=i;                }            }            if(p==-1){                pw.println(-1);                continue;            }            for(int i=9;i>0;i--)                while(dp[p][i]-->0)                    pw.print(i);            pw.println();        }    }    public static long atMostK(char []chrr, int k){        if(k<0)            return 0;        int l=0,cnt=0;        long ans=0l;        for(int i=0;i<chrr.length;i++){            if(chrr[i]=='1')                cnt++;            while(cnt>k){                if(chrr[l++]=='1')                    cnt--;            }            ans+=(long)(i-l)+1l;        }        return ans;    }    public static int ask(int l, int r){        System.out.println("? "+l+" "+r);        System.out.flush();        return sc.nextInt();    }    public static void sort(long []arr){        ArrayList<Long> list=new ArrayList<>();        for(int i=0;i<arr.length;i++)            list.add(arr[i]);        Collections.sort(list);        for(int i=0;i<arr.length;i++)            arr[i]=list.get(i);    }    public static void swap(char []chrr, int i, int j){        char temp=chrr[i];        chrr[i]=chrr[j];        chrr[j]=temp;    }    public static int countSetBits(int n){        int a=0;        while(n>0){            a+=(n&1);            n>>=1;        }        return a;    }    static class Pair{        int a, b;        Pair(int a,int b){            this.a=a;            this.b=b;        }     //*    }    /*/        public int compareTo(Pair p){            return (b-p.b);        }        public int hashCode(){            int hashcode = (a+" "+b).hashCode();            return hashcode;        }        public boolean equals(Object obj){            if (obj instanceof Pair) {                Pair p = (Pair) obj;                return (p.a==this.a && p.b == this.b);            }            return false;        }    }    //*/    static boolean isPrime(int n) {         if (n <= 1)             return false;         if (n <= 3)             return true;         if (n % 2 == 0 || n % 3 == 0)             return false;         for (int i = 5; i * i <= n; i = i + 6)             if (n % i == 0 || n % (i + 2) == 0)                 return false;         return true;     }     static int gcd(int a, int b) {         if (b == 0)             return a;         return a>b?gcd(b, a % b):gcd(a, b % a);      }     static long fast_pow(long base,long n,long M){        if(n==0)           return 1;        if(n==1)        return base;        long halfn=fast_pow(base,n/2,M);        if(n%2==0)            return ( halfn * halfn ) % M;        else            return ( ( ( halfn * halfn ) % M ) * base ) % M;    }    static long modInverse(long n,long M){        return fast_pow(n,M-2,M);    }    public static int s(int n){        return sc.nextInt();    }    public static long s(long n){        return sc.nextLong();    }    public static String s(String n){        return sc.next();    }    public static double s(double n){        return sc.nextDouble();    }    public static void feedArr(long []arr){        for(int i=0;i<arr.length;i++)            arr[i]=sc.nextLong();    }    public static void feedArr(double []arr){        for(int i=0;i<arr.length;i++)            arr[i]=sc.nextDouble();    }    public static void feedArr(int []arr){        for(int i=0;i<arr.length;i++)            arr[i]=sc.nextInt();    }    public static void feedArr(String []arr){        for(int i=0;i<arr.length;i++)            arr[i]=sc.next();    }    public static String printArr(int []arr){        StringBuilder sbr=new StringBuilder();        for(int i:arr)            sbr.append(i+" ");        return sbr.toString();    }    public  static String printArr(long []arr){        StringBuilder sbr=new StringBuilder();        for(long i:arr)            sbr.append(i+" ");        return sbr.toString();    }    public static String printArr(String []arr){        StringBuilder sbr=new StringBuilder();        for(String i:arr)            sbr.append(i+" ");        return sbr.toString();    }    public static String printArr(double []arr){        StringBuilder sbr=new StringBuilder();        for(double i:arr)            sbr.append(i+" ");        return sbr.toString();    }    static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }        public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }        public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }        public double nextDouble() {            return Double.parseDouble(next());        }    }}
