ans = []def DFS(x,n): 	count = 0 	stack = [(x,count)]	leaf = 0	ans = 0	max1 = 0	back_stack = []	# points = [0 ]	points = [0 for i in range(n+1)]	while len(stack):						temp,count = stack.pop()			# visited[temp] = 1				back_stack.append( temp ) 		# if temp == len(visited) - 1:		# 	print(temp,"---")		# 	break		if 2*temp >= n:			continue				for j in range(2): 			stack.append((2*temp+j,count + l[2*temp+j-2])) 			points[2*temp+j] = count + l[2*temp+j-2]	# print(points,back_stack)	while len(back_stack): 		temp = back_stack.pop()		if 2*temp >= n:			continue		ans = ans + abs(points[2*temp]-points[2*temp+1])		if points[2*temp] > points[2*temp+1]: 			points[2*temp+1] = points[2*temp]		else:			points[2*temp] = points[2*temp+1] 		points[temp] = points[2*temp]				# print(ans)	# print(points)	return ans n = int(input()) l = list(map(int,input().split())) visited = [0 for i in range(2**(n+1))]x = 1print( DFS(x,2**(n+1)) )
