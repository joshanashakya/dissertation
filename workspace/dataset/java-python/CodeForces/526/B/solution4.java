import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintWriter;import java.io.BufferedWriter;import java.util.InputMismatchException;import java.io.IOException;import java.io.FileInputStream;import java.util.ArrayList;import java.io.Writer;import java.io.OutputStreamWriter;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        OutputWriter out = new OutputWriter(outputStream);        BOmNomAndDarkPark solver = new BOmNomAndDarkPark();        solver.solve(1, in, out);        out.close();    }     static class BOmNomAndDarkPark {        private int n;        private int[] lights;        private int[] totalLightsFromRoot;        private int[] extraLights;         private void bfs(int v) {            int c1 = v << 1, c2 = (v << 1) | 1;            totalLightsFromRoot[c1] = lights[c1] + totalLightsFromRoot[c1 >> 1];            totalLightsFromRoot[c2] = lights[c2] + totalLightsFromRoot[c2 >> 1];            if (c1 < (1 << n)) bfs(c1);            if (c2 < (1 << n)) bfs(c2);        }         private void bfs2(int v) {            int c1 = v << 1, c2 = (v << 1) | 1;            if (v >= (1 << n)) return;            if (v < (1 << n)) {                bfs2(c1);                bfs2(c2);            }            extraLights[v] = Math.min(extraLights[c1], extraLights[c2]);            int min = Math.min(extraLights[c1], extraLights[c2]);            extraLights[c1] -= min;            extraLights[c2] -= min;        }         public void solve(int testNumber, InputReader in, OutputWriter out) {            n = in.nextInt();            lights = new int[1 << (n + 1)];            totalLightsFromRoot = new int[1 << (n + 1)];            extraLights = new int[1 << (n + 1)];            for (int i = 2; i < lights.length; i++) lights[i] = in.nextInt();            bfs(1);            int maxLights = totalLightsFromRoot[1 << n];            for (int i = (1 << n); i < totalLightsFromRoot.length; i++) {                maxLights = Math.max(maxLights, totalLightsFromRoot[i]);            }            for (int i = (1 << n); i < totalLightsFromRoot.length; i++) {                extraLights[i] = maxLights - totalLightsFromRoot[i];            }            bfs2(1);            int ans = 0;            for (int i = 2; i < extraLights.length; i++) ans += extraLights[i];            out.print(ans);            out.println();            out.flush();        }     }     static class InputReader {        private InputStream stream;        private byte[] buf = new byte[8192];        private int curChar;        private int numChars;         public InputReader(InputStream stream) {            this.stream = stream;        }         public InputReader(FileInputStream file) {            this.stream = file;        }         public int read() {            if (numChars == -1) {                throw new InputMismatchException();            }            if (curChar >= numChars) {                curChar = 0;                try {                    numChars = stream.read(buf);                } catch (IOException e) {                    throw new InputMismatchException();                }                if (numChars <= 0) {                    return -1;                }            }            return buf[curChar++];        }         public int nextInt() {            int c = read();            while (isSpaceChar(c)) {                c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            int res = 0;            do {                if (c < '0' || c > '9') {                    throw new InputMismatchException();                }                res = (res << 3) + (res << 1) + c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;        }         private boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;        }     }     static class OutputWriter {        private final PrintWriter writer;        private ArrayList<String> res = new ArrayList<>();        private StringBuilder sb = new StringBuilder("");         public OutputWriter(OutputStream outputStream) {            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));        }         public OutputWriter(Writer writer) {            this.writer = new PrintWriter(writer);        }         public void println() {            res.add(sb.toString());            sb = new StringBuilder("");        }         public void print(Object... objects) {            for (int i = 0; i < objects.length; i++) {                sb.append(objects[i]);            }        }         public void close() {//        writer.flush();            writer.close();        }         public void flush() {            for (String str : res) writer.printf("%s\n", str);            res.clear();            sb = new StringBuilder("");        }     }} 
