import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class Main {     static class Stable {        int idx;        int parity;         Stable(int i, int p) {            idx = i;            parity = p;        }    }    public static void main(String[] args) throws Exception {        Scanner sc = new Scanner(System.in);         ArrayList<Stable> stables = new ArrayList<>();        int n = sc.nextInt();        int arr [] = new int[n];        for (int i = 0; i < n; i++)            arr[i] = sc.nextInt();         for (int i = 0; i < n; i++)            if (i == 0 || i == n - 1) stables.add(new Stable(i, arr[i]));            else {                if (arr[i] == arr[i - 1] || arr[i] == arr[i + 1])                    stables.add(new Stable(i, arr[i]));            }         Collections.sort(stables, new Comparator<Stable>() {            @Override            public int compare(Stable stable, Stable t1) {                return stable.idx - t1.idx;            }        });         int idx = 0;        int max = 0;        int res [] = new int[n];        res[0] = arr[0];        res[n - 1] = arr[n - 1];         for (int i = 1; i < n - 1; i++) {            if (arr[i] == arr[i - 1] || arr[i] == arr[i + 1]) {                res[i] = arr[i];                continue;            }            while (idx < stables.size() - 1 &&                    Math.abs(i - stables.get(idx).idx) > Math.abs(i - stables.get(idx + 1).idx)) idx++;            max = Math.max(max, Math.abs(i - stables.get(idx).idx));            res[i] = stables.get(idx).parity;        }         PrintWriter out = new PrintWriter(System.out);        out.println(max);        for (int i = 0; i < n; i++)            if (i == 0) out.print(res[i]);            else out.print(" " + res[i]);        out.println();        out.close();    }                             static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() throws IOException {            while (st == null || !st.hasMoreTokens())                st = new StringTokenizer(br.readLine());            return st.nextToken();        }         public int nextInt() throws IOException {            return Integer.parseInt(next());        }         public long nextLong() throws IOException {            return Long.parseLong(next());        }         public String nextLine() throws IOException {            return br.readLine();        }         public double nextDouble() throws IOException {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public boolean ready() throws IOException {            return br.ready();        }     }}
