import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.Reader;import java.util.ArrayList;import java.util.Arrays;import java.util.Scanner;import java.util.StringTokenizer; public class ProblemA { 	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner input = new Scanner(System.in);		int n = input.nextInt();		int[] arr = new int[n + 2];		for (int a = 1; a < n + 1; a++) {			arr[a] = input.nextInt();		}		arr[0] = arr[1];		arr[n + 1] = arr[n];		ArrayList<Integer> switches = new ArrayList<Integer>();		for (int b = 0; b < n + 1; b++) {			if (arr[b] != arr[b + 1]) {				switches.add(b);			}		}		int maxConseqSwitches = 0;		int currentCount = 0;		int previous = -1;		for (Integer i : switches) {			if (previous == i - 1) {				currentCount++;			} else {				if (previous != -1) {					int TMP = previous+1;					if (arr[TMP] == arr[TMP - currentCount]) {						for (int j = TMP - currentCount; j <= TMP; j++) {							arr[j] = arr[TMP];						}					} else {						for (int j = TMP - currentCount; j < TMP								- currentCount / 2; j++) {							arr[j] = arr[TMP - currentCount];						}						for (int j = TMP - currentCount / 2; j <= TMP; j++) {							arr[j] = arr[TMP];						}					}				}				currentCount = 1;			} 			if (maxConseqSwitches < currentCount) {				maxConseqSwitches = currentCount;			}			previous = i;		}		if (currentCount > 1) {			int TMP = previous+1;			if (arr[TMP] == arr[TMP - currentCount]) {				for (int j = TMP - currentCount; j <= TMP; j++) {					arr[j] = arr[TMP];				}			} else {				for (int j = TMP - currentCount; j < TMP						- currentCount / 2; j++) {					arr[j] = arr[TMP - currentCount];				}				for (int j = TMP - currentCount / 2; j <= TMP; j++) {					arr[j] = arr[TMP];				}			}		}		System.out.println((maxConseqSwitches) / 2);		StringBuilder out = new StringBuilder();		for (int a = 1; a < n + 1; a++) {			out.append(arr[a] + " ");		}		System.out.println(out);	}	 public static class FastScanner {	        BufferedReader br;	        StringTokenizer st; 	        public FastScanner (Reader in) {	            br = new BufferedReader(in);	        } 	        public FastScanner () { this(new InputStreamReader(System.in)); } 	        String next() {	            while (st == null || !st.hasMoreElements()) {	                try {	                    st = new StringTokenizer(br.readLine());	                } catch (IOException e) {	                    e.printStackTrace();	                }	            }	            return st.nextToken();	        } 	        int nextInt() { return Integer.parseInt(next()); }	        long nextLong() { return Long.parseLong(next()); }	        double nextDouble() { return Double.parseDouble(next()); } 	        // Slightly different from java.util.Scanner.nextLine(),	        // which returns any remaining characters in current line,	        // if any.  	        String readNextLine() {	            String str = "";	            try {	                str = br.readLine();	            } catch (IOException e) {	                e.printStackTrace();	            }	            return str;	        }	    }}
