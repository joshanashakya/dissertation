import java.io.*;import java.math.*;import java.text.DecimalFormat;import java.util.*;  public class Main {     private static double compute(point v,point dnr,double vmax) {        double vp = v.dot(dnr),vt = v.cross(dnr);        // (v - vp)^2  <= vmax        double vr = Math.sqrt(vmax) + vp;        return vr;    }     public static void main(String[] args) throws Exception{        IO io = new IO(null,null);        point S = new point(io.getNextInt(),io.getNextInt());        point E = new point(io.getNextInt(),io.getNextInt());        int vmax = io.getNextInt(),tw = io.getNextInt();        point v = new point(io.getNextInt(),io.getNextInt());        point w = new point(io.getNextInt(),io.getNextInt());         double s = 0,e = 1e9;        for (int it = 0;it < 100;it++) {            double curT = s + (e-s)/2.0;            double x = S.x + Math.min(tw+0.0,curT)*v.x + Math.max(curT-tw,0.0)*w.x                    ,y = S.y + Math.min(tw+0.0,curT)*v.y + Math.max(curT-tw,0.0)*w.y;            double dist = Math.hypot(x - E.x,y - E.y);            if (dist < curT*vmax) e = curT;            else s = curT;        }         io.print(s,10);        io.close();    }} class point{    private static DecimalFormat df = new DecimalFormat("#.###");    double x,y;    public point(double x,double y){        this.x = x;        this.y = y;    }    point vec(point to) {        return new point(to.x - x,to.y - y);    }    public double length(){        return Math.sqrt(x*x + y*y);    }    @Override    public String toString(){        return "(" + df.format(x) + ", " + df.format(y) + ")";    }    double dot(point p) {        return x*p.x + y*p.y;    }    double cross(point p) {        return x*p.y - y*p.x;    }}  class IO{    private BufferedReader br;    private StringTokenizer st;    private PrintWriter writer;    private String inputFile,outputFile;     public boolean hasMore() throws IOException{        if(st != null && st.hasMoreTokens()) return true;        if(br != null && br.ready()) return true;        return false;    }    public String getNext() throws FileNotFoundException, IOException{        while(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());        return st.nextToken();    }     public String getNextLine() throws FileNotFoundException, IOException{        return br.readLine().trim();    }     public int getNextInt() throws FileNotFoundException, IOException{        return Integer.parseInt(getNext());    }    public long getNextLong() throws FileNotFoundException, IOException{        return Long.parseLong(getNext());    }     public void print(double x,int num_digits) throws  IOException{        writer.printf("%." + num_digits + "f" ,x);    }    public void println(double x,int num_digits) throws  IOException{        writer.printf("%." + num_digits + "f\n" ,x);    }    public void print(Object o) throws  IOException{        writer.print(o.toString());    }     public void println(Object o) throws  IOException{        writer.println(o.toString());    }    public IO(String x,String y) throws FileNotFoundException, IOException{        inputFile = x;        outputFile = y;        if(x != null) br = new BufferedReader(new FileReader(inputFile));        else br = new BufferedReader(new InputStreamReader(System.in));        if(y != null) writer = new PrintWriter(new BufferedWriter(new FileWriter(outputFile)));        else writer = new PrintWriter(new OutputStreamWriter(System.out));    }     protected void close() throws IOException{        br.close();        writer.close();    }    public void outputArr(Object [] A) throws IOException{        int L = A.length;        for (int i = 0;i < L;i++) {            if(i > 0) writer.print(" ");            writer.print(A[i]);        }        writer.print("\n");    }} 
