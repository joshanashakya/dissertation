/* Keep solving problems. */import java.util.*;import java.io.*; public class CF590B {     BufferedReader br;    PrintWriter out;    StringTokenizer st;    boolean eof;    final long MOD = 1000L * 1000L * 1000L + 7;    void solve() throws IOException {        long x1 = nextLong();        long y1 = nextLong();        long x2 = nextLong();        long y2 = nextLong();         long vmax = nextLong();        long t = nextLong();        long vx = nextLong();        long vy = nextLong();        long wx = nextLong();        long wy = nextLong();        double l = 0;        double h = 1000000000.0;        for(int i = 0; i < 1000; i++) {            double mid = (l + h) / 2;            double x0 = x1;            double y0 = y1;            if(mid <= t) {                x0 += mid * vx;                y0 += mid * vy;            }            else {                x0 += t * vx;                y0 += t * vy;                x0 += (mid - t) * wx;                y0 += (mid - t) * wy;            }            double dx = Math.abs(x0 - x2);            double dy = Math.abs(y0 - y2);            double dist = Math.sqrt(dx * dx + dy * dy);            if(dist <= vmax * mid) {                h = mid;            }            else {                l = mid;            }        }        out(l);    }    void shuffle(int[] a) {        int n = a.length;        for(int i = 0; i < n; i++) {            int r = i + (int) (Math.random() * (n - i));            int tmp = a[i];            a[i] = a[r];            a[r] = tmp;        }    }    private void outln(Object o) {        out.println(o);    }    private void out(Object o) {        out.print(o);    }    public CF590B() throws IOException {        br = new BufferedReader(new InputStreamReader(System.in));        out = new PrintWriter(System.out);        solve();        out.close();    }    public static void main(String[] args) throws IOException {        new CF590B();    }     public long[] nextLongArr(int n) throws IOException{        long[] res = new long[n];        for(int i = 0; i < n; i++)            res[i] = nextLong();        return res;    }    public int[] nextIntArr(int n) throws IOException {        int[] res = new int[n];        for(int i = 0; i < n; i++)            res[i] = nextInt();        return res;    }    public String nextToken() {        while (st == null || !st.hasMoreTokens()) {            try {                st = new StringTokenizer(br.readLine());            } catch (Exception e) {                eof = true;                return null;            }        }        return st.nextToken();    }    public String nextString() {        try {            return br.readLine();        } catch (IOException e) {            eof = true;            return null;        }    }    public int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }    public long nextLong() throws IOException {        return Long.parseLong(nextToken());    }    public double nextDouble() throws IOException {        return Double.parseDouble(nextToken());    }} 
