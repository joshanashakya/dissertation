// Don't place your source in a packageimport java.util.*;import java.lang.*;import java.io.*;import java.math.*;      // Please name your class Mainpublic class Main {    static Scanner in = new Scanner(System.in);    public static void main (String[] args) throws java.lang.Exception {        PrintWriter out = new PrintWriter(System.out);           int T=Int();        for(int t=0;t<T;t++){            int n=Int();             int A[]=new int[n];            for(int i=0;i<A.length;i++){                A[i]=Int();            }              Solution sol=new Solution();            sol.solution(out,A);        }        out.flush();     }     public static long Long(){ return in.nextLong();}    public static int Int(){        return in.nextInt();    }    public static String Str(){        return in.next();    }}   class Solution{    public void solution(PrintWriter out,int A[]){        if(A.length<=2){            out.println(A.length);            return;        }         int mx=0;        int res=0;        for(int i:A){            mx=Math.max(mx,i);        }          Seg1 seg1=new Seg1(0,mx+10);        Seg2 seg2=new Seg2(0,mx+10);         for(int i=0;i<A.length;i++){            int cur=A[i];            int pair[]=seg2.query(0,cur);            int index=seg1.query(cur+1,mx+10-1);             /*System.out.println(cur+"  ");            System.out.println(pair[0]+"  "+pair[1]+"  "+index);            System.out.println();*/             if(index==-1){//no element large than cur                if(pair[0]==-1){                    res=Math.max(res,1);                    seg2.update(cur,1,i);                }                else{                    res=Math.max(res,1+pair[0]);                    seg2.update(cur,1+pair[0],i);                 }            }            else{                if(pair[1]==Integer.MAX_VALUE){                    res=Math.max(res,2);                    seg2.update(cur,2,i);                }                else if(pair[1]<index){                    res=Math.max(res,2+Math.max(pair[0],0));                    seg2.update(cur,2+Math.max(pair[0],0),i);                }                else{                    res=Math.max(res,1+pair[0]);                    seg2.update(cur,1+pair[0],i);                }            }            seg1.update(cur,i);        }          out.println(res);    }     class Seg1{//for index        int l,r;        int max=-1;        Seg1 left=null,right=null;        public Seg1(int l,int r){            this.l=l;            this.r=r;            if(l!=r){                int mid=l+(r-l)/2;                if(l<=mid)left=new Seg1(l,mid);                if(r>=mid+1)right=new Seg1(mid+1,r);                if(left!=null)max=Math.max(left.max,max);                if(right!=null)max=Math.max(right.max,max);            }else{             }        }        public int query(int s,int e){            if(l==s&&r==e){                return max;            }            int mid=l+(r-l)/2; //left :  to mid-1,            if(e<=mid){                return left.query(s,e);            }            else if(s>=mid+1){                return right.query(s,e);            }else{                return Math.max(left.query(s,mid),right.query(mid+1,e));            }        }         public void update(int index,int val){            if(l==r){                max=val;                return;            }            int mid=l+(r-l)/2;            if(index<=mid){                left.update(index,val);            }else{                right.update(index,val);            }            this.max=Math.max(left.max,right.max);        }    }       class Seg2{        int l,r;        int max=-1;        int i=Integer.MAX_VALUE;        Seg2 left=null,right=null;        public Seg2(int l,int r){            this.l=l;            this.r=r;            if(l!=r){                int mid=l+(r-l)/2;                if(l<=mid)left=new Seg2(l,mid);                if(r>=mid+1)right=new Seg2(mid+1,r);            }else{             }        }        public int[] query(int s,int e){            if(l==s&&r==e){                return new int[]{max,i};            }            int mid=l+(r-l)/2; //left :  to mid-1,            if(e<=mid){                return left.query(s,e);            }            else if(s>=mid+1){                return right.query(s,e);            }else{                int ll[]=this.left.query(s,mid);                int rr[]=this.right.query(mid+1,e);                 if(ll[0]==rr[0]){                    return new int[]{ll[0],Math.min(ll[1],rr[1])};                }                else if(ll[0]>rr[0]){                    return ll;                }                else{                    return rr;                }            }        }         public void update(int index,int val,int i){            if(l==r){                if(val>max){                    max=val;                    this.i=i;                }                return;            }            int mid=l+(r-l)/2;            if(index<=mid){                left.update(index,val,i);            }else{                right.update(index,val,i);            }             if(this.left.max>=this.max){                if(this.left.max==this.max){                    if(this.i>this.left.i){                        this.i=this.left.i;                    }                }                else{                    this.max=this.left.max;                    this.i=this.left.i;                }            }             if(this.right.max>=this.max){                if(this.right.max==this.max){                    if(this.i>this.right.i){                        this.i=this.right.i;                    }                }                else{                    this.max=this.right.max;                    this.i=this.right.i;                }            }         }    }}  
