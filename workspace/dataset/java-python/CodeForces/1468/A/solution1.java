import java.util.*;import java.io.*; public class Main {    public static void main(String args[]) {new Main().run();}     FastReader in = new FastReader();    PrintWriter out = new PrintWriter(System.out);    void run(){        for(int q=ni();q>0;q--){            work();        }        out.flush();    }    long mod=998244353;    long gcd(long a,long b) {        return a==0?b:gcd(b%a,a);    }    int[] S1;//最大值线段树    int[] S2;//最大dp值索引的线段树    int[] A;    int[] dp;    void work() {        int n=ni();        S1=new int[n<<2];        S2=new int[(n+1)<<2];        Arrays.fill(S2,-1);        A=nia(n);        for(int i=0;i<n;i++){            insert1(1,0,n-1,i);        }        dp=new int[n];        for(int i=0;i<n;i++){            int pre=query2(1,0,n,0,A[i]);            int v=pre==-1?0:dp[pre];            int s=pre+1,e=i-1;            int d=v+1;            int num=query1(1, 0, n - 1, s, e);            if(num>=A[i]){                d++;            }            dp[i]=d;            insert2(1,0,n,i);        }        int max=0;        for(int d:dp){            max=Math.max(max,d);        }        out.println(max);    }     private void insert1(int node, int l, int r, int idx) {        int m=(l+r)/2;        if(l==r){            S1[node]=A[idx];            return;        }        if(m>=idx){            insert1(node<<1,l,m,idx);        }else{            insert1(node<<1|1,m+1,r,idx);        }        S1[node]=Math.max(S1[node<<1],S1[node<<1|1]);    }    private int query1(int node, int l, int r, int s,int e) {        if(s>e){            return -1;        }        int m=(l+r)/2;        if(l>=s&&r<=e){            return S1[node];        }        int ret=0;        if(m>=s){            ret=query1(node<<1,l,m,s,e);        }        if(m+1<=e){            ret=Math.max(ret,query1(node<<1|1,m+1,r,s,e));        }        return ret;    }    private void insert2(int node, int l, int r, int idx) {        int m=(l+r)/2;        if(l==r){            if(S2[node]==-1||(dp[S2[node]]<dp[idx])){                S2[node]=idx;            }            return;        }        int v=A[idx];        if(m>=v){            insert2(node<<1,l,m,idx);        }else{            insert2(node<<1|1,m+1,r,idx);        }        int r1=S2[node<<1],r2=S2[node<<1|1];        if(r1==-1){            S2[node]=r2;        }else if(r2==-1){            S2[node]=r1;        }else{            if(dp[r1]>dp[r2]||(dp[r1]==dp[r2]&&r1<r2)){                S2[node]=r1;            }else{                S2[node]=r2;            }        }    }    private int query2(int node, int l, int r, int s,int e) {        if(s>e){            return -1;        }        int m=(l+r)/2;        if(l>=s&&r<=e){            return S2[node];        }        int r1=-1,r2=-1;        if(m>=s){            r1=query2(node<<1,l,m,s,e);        }        if(m+1<=e){            r2=query2(node<<1|1,m+1,r,s,e);        }        if(r1==-1){            return r2;        }else if(r2==-1){            return r1;        }else{            if(dp[r1]>dp[r2]||(dp[r1]==dp[r2]&&r1<r2)){                return r1;            }else{                return r2;            }        }    }     //input    @SuppressWarnings("unused")    private ArrayList<Integer>[] ng(int n, int m) {        ArrayList<Integer>[] graph=(ArrayList<Integer>[])new ArrayList[n];        for(int i=0;i<n;i++) {            graph[i]=new ArrayList<>();        }        for(int i=1;i<=m;i++) {            int s=in.nextInt()-1,e=in.nextInt()-1;            graph[s].add(e);            graph[e].add(s);        }        return graph;    }     private ArrayList<long[]>[] ngw(int n, int m) {        ArrayList<long[]>[] graph=(ArrayList<long[]>[])new ArrayList[n];        for(int i=0;i<n;i++) {            graph[i]=new ArrayList<>();        }        for(int i=1;i<=m;i++) {            long s=in.nextLong()-1,e=in.nextLong()-1,w=in.nextLong();            graph[(int)s].add(new long[] {e,w});            graph[(int)e].add(new long[] {s,w});        }        return graph;    }     private int ni() {        return in.nextInt();    }     private long nl() {        return in.nextLong();    }     private String ns() {        return in.next();    }     private long[] na(int n) {        long[] A=new long[n];        for(int i=0;i<n;i++) {            A[i]=in.nextLong();        }        return A;    }    private int[] nia(int n) {        int[] A=new int[n];        for(int i=0;i<n;i++) {            A[i]=in.nextInt();        }        return A;    }} class FastReader{    BufferedReader br;    StringTokenizer st;     public FastReader()    {        br=new BufferedReader(new InputStreamReader(System.in));    }      public String next()    {        while(st==null || !st.hasMoreElements())//回车，空行情况        {            try {                st = new StringTokenizer(br.readLine());            } catch (IOException e) {                e.printStackTrace();            }        }        return st.nextToken();    }     public int nextInt()    {        return Integer.parseInt(next());    }     public long nextLong()    {        return Long.parseLong(next());    }}
