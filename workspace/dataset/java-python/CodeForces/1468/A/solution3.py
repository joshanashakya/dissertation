import osimport

sysfrom
io
import BytesIO, \
    IOBase  # region fastioBUFSIZE = 8192class FastIO(IOBase):    def __init__(self, file):        self.newlines = 0        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline() # -------------------------------------------------------------------- def RL(): return map(int, sys.stdin.readline().split())def RLL(): return list(map(int, sys.stdin.readline().split()))def N(): return int(input())def S(): return input().strip()def print_list(l): print(' '.join(map(str, l)))    # sys.setrecursionlimit(100000)# import random# from functools import reduce# from functools import lru_cache# from heapq import *# from collections import deque as dq# from math import ceilimport bisect as bs# from collections import Counter# from collections import defaultdict as dc  # a = "169 291 471 404 199 306 21 289 147 223 109 97 100 477 188 485 454 170 95 429 398 385 397 12 53 207 107 163 417 418 487 94 335 53 286 69 207 358 268 285 368 54 420 33 213 357 282 453 141 16 479 439 272 404 84 109 452 466 107 155 313 205 364 395 76 105 18 300 184 24 364 471 132 148 88 223 387 343 239 320 101 75 335 491 359 498 444 464 398 18 451 302 36 382 418 279 158 260 326 238 297 333 483 419 373 252 325 327 481 71 13 253 357 36 339 6 374 242 335 149 73 322 476 256 180 350 180 113 340 489 323 74 214 172 27 182 410 170 5 465 27 490 47 232 289 92 52 150 205 28 319 357 128 91 220 315 197 471 334 209 326 184 323 40 27 309 460 26 420 427 46 237 317 7 477 137 321 446 417 177 392 40 356 143 172 227 489 357 109 295 88 388 421 289 364 476 137 397 388 65 397 258 199 440 200 410 496 333 326 187 130 351 448 451 484 319 64 244 374 69 406 110 143 60 472 88 498 382 66 331 21 39 271 51 364 277 283 203 147 87 67 297 287 170 320 104 165 457 264 421 448 223 159 126 370 403 139 354 463 299 37 207 486 98 285 414 498 253 102 374 494 475 188 158 313 48 360 287 486 198 480 175 13 307 4 453 41 104 178 142 61 410 59 133 79 412 192 240 255 254 121 268 373 97 453 365 391 84 349 20 84 249 48 368 163 234 274 262 133 496 218 172 467 231 285 205 380 432 366 19 189 230 169 228 224 393 291 178 457 51 441 232 201 194 157 143 421 179 455 281 276 38 369 356 193 403 224 100 294 238 45 281 416 292 121 391 4 328 109 22 39 51 286 438 323 97 42 260 72 370 281 230 196 286 213 139 223 204 331 113 4 39 320 246 410 412 133 491 256 457 23 332 417 270 275 238 317 223 91 375 278 211 96 486 232 488 374 156 182 88 395 472 62 401 207 180 289 199 481 226 232 249 145 228 172 363 261 160 216 487 469 89 421 459 122 308 429 144 6 479 321 199 278 438 85 162 187 277 280 484 14 363 77 106 476 382 299 139 239 309 394 349 406 85 500 21 201 396 397 131 303 73 52 411 122 61 76 130 215 500 475 107 351 94 370 246 95 227 23 236"# a = list(map(int, a.split(' '))) for _ in range(N()):    n = N()    a = RLL()    stack, m, p = [a[0]], [], [(1000000, 0)]    for v in a[1:]:        k = bs.bisect_right(m, v)        if k == len(m):            stack.append(v)            m.append(min(stack[-1], stack[-2]))        else:            stack[k + 1] = m[k] = v         while p[-1][0] <= v:            vv, kk = p.pop()            m[kk] = min(m[kk], vv)         if k + 1 < len(m):            p.append((v, k + 1))    print(len(stack))
