import java.io.*;import java.util.*;import java.lang.*; public class C {	public static void solve(FastReader in,PrintWriter out,int nTestCase) {		int n = in.nextInt();		long k  = in.nextLong();		if(k%2==1) out.println(1);		else {			long K = k;//			if(K>(long)Math.pow(2, n)/2) K -= Math.pow(2, n)/2;				int ans = 2;			while(K>0) {				K = K/2;				if(K%2==1) {					out.println(ans);					return;				}				ans++;			}		}//		out.println("NO");	}	public static boolean check(int n,int m,int cnt) {		if((n+1)*2-cnt<m) return false;		if(n-1>m) return false;		return true;	}	public static void main(String[] args) {		FastReader in = new FastReader();		PrintWriter out = new PrintWriter(System.out);		long startT = System.currentTimeMillis();//		int T = in.nextInt();		int T = 1;		for(int tt=1;tt<=T;tt++) {			solve(in,out,tt);		}		if(System.getProperty("ONLINE_JUDGE")==null)			out.println("Total time: "+(System.currentTimeMillis()-startT)+"ms");		out.close();	}	public static int findSqRt(int n) {		int i = 1;		while(i*(long)i<n) i++;		return i;	}	static final Random random=new Random();	//	static void ruffleSort(Pair[] a) {	//		int n=a.length;//shuffle, then sort 	//		for (int i=0; i<n; i++) {	//			int oi=random.nextInt(n);	//			Pair temp=a[oi];	//			a[oi]=a[i]; a[i]=temp;	//		}	//		Arrays.sort(a);	//	}	static void fastSort(int[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n), temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}	static void fastSort(char[] a) {		int n=a.length;//shuffle, then sort 		for (int i=0; i<n; i++) {			int oi=random.nextInt(n);			char temp=a[oi];			a[oi]=a[i]; a[i]=temp;		}		Arrays.sort(a);	}	static class FastReader 	{ 		BufferedReader br; 		StringTokenizer st;  		public FastReader() 		{ 			br = new BufferedReader(new					InputStreamReader(System.in)); 		}  		String next() 		{ 			while (st == null || !st.hasMoreElements()) 			{ 				try				{ 					st = new StringTokenizer(br.readLine()); 				} 				catch (IOException  e) 				{ 					e.printStackTrace(); 				} 			} 			return st.nextToken(); 		}  		int nextInt() 		{ 			return Integer.parseInt(next()); 		}  		long nextLong() 		{ 			return Long.parseLong(next()); 		}  		double nextDouble() 		{ 			return Double.parseDouble(next()); 		}  		String nextLine() 		{ 			String str = ""; 			try			{ 				str = br.readLine(); 			} 			catch (IOException e) 			{ 				e.printStackTrace(); 			} 			return str; 		}  		int[] nextArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++) a[i]=nextInt();			return a;		}	}} //class Pair implements Comparable<Pair>{//    int a;//    int b;//    public Pair(int a, int b) {//        this.a = a;//        this.b = b;//    }//    public int compareTo(Pair o) {//        if(this.a==o.a)//            return this.b - o.b;//        return this.a - o.a;//    }   //}
