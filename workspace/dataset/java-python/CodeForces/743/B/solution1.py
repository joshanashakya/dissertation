import os,sys;from io import BytesIO, IOBaseBUFSIZE = 8192class FastIO(IOBase):    newlines = 0    def __init__(self, file):        self._fd = file.fileno();self.buffer = BytesIO();self.writable = "x" in file.mode or "r" not in file.mode;self.write = self.buffer.write if self.writable else None    def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:break            ptr = self.buffer.tell();self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()    def readline(self):        while self.newlines == 0:b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE));self.newlines = b.count(b"\n") + (not b);ptr = self.buffer.tell();self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()    def flush(self):        if self.writable:os.write(self._fd, self.buffer.getvalue());self.buffer.truncate(0), self.buffer.seek(0)class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file);self.flush = self.buffer.flush;self.writable = self.buffer.writable;self.write = lambda s: self.buffer.write(s.encode("ascii"));self.read = lambda: self.buffer.read().decode("ascii");self.readline = lambda: self.buffer.readline().decode("ascii")sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)try:sys.stdin,sys.stdout=open('in.txt','r'),open('out.txt','w')except:passii1=lambda:int(sys.stdin.readline().strip()) # for intergeris1=lambda:sys.stdin.readline().strip() # for striia=lambda:list(map(int,sys.stdin.readline().strip().split())) # for List[int]isa=lambda:sys.stdin.readline().strip().split() # for List[str]mod=int(1e9 + 7);from collections import *;from math import *# abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'# sys.setrecursionlimit(500000)###################### Start Here ####################### from functools import lru_cache# from collections import defaultdict as dd from collections import deque as dq  def search(l,r,k,val):    mid = (l+r)>>1    if mid>k:        return search(l,mid-1,k,val-1)    elif mid<k:        return search(mid+1,r,k,val-1)    else:        return val  n,k = iia()maxx = 1 for i in range(n-1):    maxx = maxx*2 + 1# print(maxx) ans = search(1,maxx,k,n) print(ans)
