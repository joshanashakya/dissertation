 import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.DataInputStream;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.HashSet;import java.util.Iterator;import java.util.Scanner; public class a {	static class Reader {		final private int BUFFER_SIZE = 1 << 16;		private DataInputStream din;		private byte[] buffer;		private int bufferPointer, bytesRead; 		public Reader() {			din = new DataInputStream(System.in);			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		} 		public Reader(String file_name) throws IOException {			din = new DataInputStream(new FileInputStream(file_name));			buffer = new byte[BUFFER_SIZE];			bufferPointer = bytesRead = 0;		} 		public String readLine() throws IOException {			byte[] buf = new byte[64]; // line length			int cnt = 0, c;			while ((c = read()) != -1) {				if (c == '\n')					break;				buf[cnt++] = (byte) c;			}			return new String(buf, 0, cnt);		} 		public int nextInt() throws IOException {			int ret = 0;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read();			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		} 		public long nextLong() throws IOException {			long ret = 0;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read();			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9');			if (neg)				return -ret;			return ret;		} 		public double nextDouble() throws IOException {			double ret = 0, div = 1;			byte c = read();			while (c <= ' ')				c = read();			boolean neg = (c == '-');			if (neg)				c = read();			do {				ret = ret * 10 + c - '0';			} while ((c = read()) >= '0' && c <= '9');			if (c == '.') {				while ((c = read()) >= '0' && c <= '9') {					ret += (c - '0') / (div *= 10);				}			}			if (neg)				return -ret;			return ret;		} 		private void fillBuffer() throws IOException {			bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);			if (bytesRead == -1)				buffer[0] = -1;		} 		private byte read() throws IOException {			if (bufferPointer == bytesRead)				fillBuffer();			return buffer[bufferPointer++];		} 		public void close() throws IOException {			if (din == null)				return;			din.close();		}	} 	// User Defined Method start	public static int inputInt() throws IOException {		return sc.nextInt();	} 	public static long inputLong() throws IOException {		return sc.nextLong();	} 	public static double inputDouble() throws IOException {		return sc.nextDouble();	} 	public static String inputString() throws IOException {		return sc.readLine();	} 	public static void print(String a) throws IOException {		bw.write(a);	} 	public static void printSp(String a) throws IOException {		bw.write(a + " ");	} 	public static void println(String a) throws IOException {		bw.write(a + "\n");	}	// User Defined Method End 	// Helper Function - start	private static void printArray(Integer arr[]) {		for (int i : arr)			System.out.print(i + " ");		System.out.println();	} 	private static void inputArray(int arr[]) throws IOException {		for (int i = 0; i < arr.length; i++) {			arr[i] = s1.nextInt();		}	} 	// helper Function - End 	// Defining input and output stream obj - Start	static Reader sc = new Reader();	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	static Scanner s1 = new Scanner(System.in);  	public static void main(String[] args) throws Exception {		int n = s1.nextInt();		long k = s1.nextLong();				long limit = 1;		for(int i=1;i<n;i++)			limit = (limit*2L) + 1L;				System.out.println(go(1,limit,k,n));	} 	public static long go(long l,long r,long find,long alp)	{		long mid = l + (r-l)/2;				if(find > mid)			return go(mid+1L,r,find,alp-1L);		else if(find < mid)			return go(l,mid-1L,find,alp-1L);		else			return alp;	}}
