import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.*;import java.io.BufferedReader;import java.io.InputStreamReader; public class Two {     public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.call(in,out);         out.close();    }     static class TaskA {        public void call(InputReader in, PrintWriter out) {            int n , m  , b =0;            long k ,a;            n = in.nextInt();            m = in.nextInt();            k = in.nextLong();            if(k<=n-1){                out.println((k+1)+" "+ 1);            }            else{                k-= n-1;                if(k%(m-1)==0){                    a = (k/(long) (m-1));                    if(a%2==0){                        out.println(n-(a-1)+" "+2);                    }                    else{                        out.println(n-(a-1)+" "+m);                    }                }                else{                    a = (k/(long) (m-1));                    if(a%2==0){                        out.println(n-(a)+" "+(1+k%(m-1)));                    }                    else{                        out.println(n-(a)+" "+(m-((k%(m-1))-1)));                    }                }          //                if(k%(m-1)!=0)//                    a=1;//                a += k/(m-1);//                if(a%2==0){//                    if(k%(m-1)!=0)//                        out.println(n-(a-1)+" "+(m-(k%(m-1))));//                    else//                        out.println(n-(a-1)+" "+m);//                }//                else{//                    if(k%(m-1)!=0)//                        out.println(n-(a-1)+" "+(1+((k%(m-1)))));//                    else//                        out.println(n-(a-1)+" "+m);//                }            }         }    }     static final Random random=new Random();     static void shuffleSort(int[] arr) {        int n=arr.length;        for (int i=0; i<n; i++) {            int a=random.nextInt(n), temp=arr[a];            arr[a]=arr[i];            arr[i]=temp;        }        Arrays.sort(arr);    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong(){            return Long.parseLong(next());        }     }}
