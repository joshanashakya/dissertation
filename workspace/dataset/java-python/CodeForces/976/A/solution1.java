 import javax.print.DocFlavor;import javax.swing.*;import javax.swing.text.StyleContext;import java.awt.image.AreaAveragingScaleFilter; import javax.print.attribute.Attribute;import javax.print.attribute.HashAttributeSet;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger;import java.nio.channels.AcceptPendingException;import java.nio.charset.IllegalCharsetNameException;import java.util.*;import java.io.BufferedReader;import java.io.IOException;import java.util.Collections;import java.io.InputStreamReader;import java.util.logging.SimpleFormatter;      public class Main1 {          public static void main(String[] args) {              FastScanner in = new FastScanner();            PrintWriter out = new PrintWriter(System.out);               int n = in.nextInt() ;            char A[] = in.next().toCharArray() ;            int ct1 = 0 ;            for (int i = 0; i <n ; i++) {                if (A[i] == '1')                    ct1++ ;            }            int zero = n-ct1 ;            StringBuilder stringBuilder = new StringBuilder() ;            if (ct1>0)            stringBuilder.append("1") ;            while (zero-- > 0)stringBuilder.append("0") ;             System.out.println(stringBuilder);                        out.flush();            out.close();          }          static class FastOutput implements AutoCloseable, Closeable, Appendable {            private static final int THRESHOLD = 32 << 10;            private final Writer os;            private StringBuilder cache = new StringBuilder(THRESHOLD * 2);             public FastOutput append(CharSequence csq) {                cache.append(csq);                return this;            }             public FastOutput append(CharSequence csq, int start, int end) {                cache.append(csq, start, end);                return this;            }             private void afterWrite() {                if (cache.length() < THRESHOLD) {                    return;                }                flush();            }             public FastOutput(Writer os) {                this.os = os;            }             public FastOutput(OutputStream os) {                this(new OutputStreamWriter(os));            }             public FastOutput append(char c) {                cache.append(c);                afterWrite();                return this;            }             public FastOutput append(long c) {                cache.append(c);                afterWrite();                return this;            }             public FastOutput append(String c) {                cache.append(c);                afterWrite();                return this;            }             public FastOutput println() {                return append(System.lineSeparator());            }             public FastOutput flush() {                try {//            boolean success = false;//            if (stringBuilderValueField != null) {//                try {//                    char[] value = (char[]) stringBuilderValueField.get(cache);//                    os.write(value, 0, cache.length());//                    success = true;//                } catch (Exception e) {//                }//            }//            if (!success) {                    os.append(cache);//            }                    os.flush();                    cache.setLength(0);                } catch (IOException e) {                    throw new UncheckedIOException(e);                }                return this;            }             public void close() {                flush();                try {                    os.close();                } catch (IOException e) {                    throw new UncheckedIOException(e);                }            }             public String toString() {                return cache.toString();            }         }               static class FastScanner {            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));            StringTokenizer st = new StringTokenizer("");             String next() {                while (!st.hasMoreTokens())                    try {                        st = new StringTokenizer(br.readLine());                    } catch (IOException e) {                        e.printStackTrace();                    }                return st.nextToken();            }             int nextInt() {                return Integer.parseInt(next());            }             int[] readArray(int n) {                int[] a = new int[n];                for (int i = 0; i < n; i++) a[i] = nextInt();                return a;            }              long nextLong() {                return Long.parseLong(next());            }        }      }       
