import java.io.*;import java.util.StringTokenizer; public class Main {     public static void main(String[] args) throws IOException {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            int t = 1;            for (int tt = 0; tt < t; tt++) {                int n = in.nextInt();                char[] arr = in.next().toCharArray();                StringBuilder sb = new StringBuilder();                sb = n == 1 && arr[0] == '0' ? sb.append(0) : sb.append(1);                for (int i = 0; i < arr.length; i++) {                    if (arr[i] == '0' && i != 0) {                        sb.append("0");                    }                }                out.println(sb.toString());            }          }    }     private static int naib(int a, int b) {        return a / (nod(a, b)) * b;    }     private static int nod(int a, int b) {        while (a != 0 && b != 0) {            if (a > b) {                a = a % b;            } else {                b = b % a;            }        }        return a + b;    }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }         public Long nextLong() {            return Long.parseLong(next());        }         public Double nextDouble() {            return Double.parseDouble(next());        }         public int[] readArray(int n) {            int arr[] = new int[n];            for (int i = 0; i < n; i++) {                arr[i] = nextInt();            }            return arr;        }    }}
