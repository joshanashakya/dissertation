/*⠀⠀⠀⠀⣠⣶⡾⠏⠉⠙⠳⢦⡀⠀⠀⠀⢠⠞⠉⠙⠲⡀⠀⠀⠀⠀⣴⠿⠏⠀⠀⠀⠀⠀⠀⢳⡀⠀⡏⠀⠀Y⠀⠀⢷⠀⠀⢠⣟⣋⡀⢀⣀⣀⡀⠀⣀⡀⣧⠀⢸⠀⠀A⠀⠀ ⡇⠀⠀⢸⣯⡭⠁⠸⣛⣟⠆⡴⣻⡲⣿⠀⣸⠀⠀S⠀  ⡇⠀⠀⣟⣿⡭⠀⠀⠀⠀⠀⢱⠀⠀⣿⠀⢹⠀⠀H⠀⠀ ⡇⠀⠀⠙⢿⣯⠄⠀⠀⠀⢀⡀⠀⠀⡿⠀⠀⡇⠀⠀⠀⠀⡼⠀⠀⠀⠀⠹⣶⠆⠀⠀⠀⠀⠀⡴⠃⠀⠀⠘⠤⣄⣠⠞⠀⠀⠀⠀⠀⠀⢸⣷⡦⢤⡤⢤⣞⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣴⣿⣏⠁⠀⠀⠸⣏⢯⣷⣖⣦⡀⠀⠀⠀⠀⠀⠀⢀⣾⣽⣿⣿⣿⣿⠛⢲⣶⣾⢉⡷⣿⣿⠵⣿⠀⠀⠀⠀⠀⠀⣼⣿⠍⠉⣿⡭⠉⠙⢺⣇⣼⡏⠀⠀⠀⣄⢸⠀⠀⠀⠀⠀⠀⣿⣿⣧⣀⣿………⣀⣰⣏⣘⣆⣀⠀⠀ */import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter; // System.out is a PrintStreamimport java.util.HashMap;import java.util.Arrays;// import java.util.ArrayDeque;// import java.util.ArrayList;// import java.util.Collections;    //  for sorting ArrayList mainly// import java.util.HashMap;// import java.util.HashSet;// import java.util.Random;import java.util.StringTokenizer; public class A88 {    public static void main(String[] args) throws IOException {        FastScanner scn = new FastScanner();        PrintWriter out = new PrintWriter(System.out);        String[] arr = { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "B", "H" };        HashMap<String, Integer> mp = new HashMap<>();        int sz = arr.length;        for (int i = 0; i < sz; i++) {            mp.put(arr[i], i);        }        String[] notes = { scn.next(), scn.next(), scn.next() };        int idx1 = mp.get(notes[0]), idx2 = mp.get(notes[1]), idx3 = mp.get(notes[2]);        boolean minor = (check(idx1 + 3, idx2, sz) && check(idx1 + 7, idx3, sz))                     || (check(idx1 + 3, idx3, sz) && check(idx1 + 7, idx2, sz))                     || (check(idx2 + 3, idx1, sz) && check(idx2 + 7, idx3, sz))                     || (check(idx2 + 3, idx3, sz) && check(idx2 + 7, idx1, sz))                     || (check(idx3 + 3, idx2, sz) && check(idx3 + 7, idx1, sz))                     || (check(idx3 + 3, idx1, sz) && check(idx3 + 7, idx2, sz));        boolean major = (check(idx1 + 4, idx2, sz) && check(idx1 + 7, idx3, sz))                     || (check(idx1 + 4, idx3, sz) && check(idx1 + 7, idx2, sz))                     || (check(idx2 + 4, idx1, sz) && check(idx2 + 7, idx3, sz))                     || (check(idx2 + 4, idx3, sz) && check(idx2 + 7, idx1, sz))                     || (check(idx3 + 4, idx2, sz) && check(idx3 + 7, idx1, sz))                     || (check(idx3 + 4, idx1, sz) && check(idx3 + 7, idx2, sz));        if (minor) {            out.println("minor");        } else if (major) {            out.println("major");        } else {            out.println("strange");        }        out.close();    }     private static boolean check(int i1, int i2, int N) {        return i1 % N == i2 % N;    }     private static int gcd(int num1, int num2) {        int temp = 0;        while (num2 != 0) {            temp = num1;            num1 = num2;            num2 = temp % num2;        }        return num1;    }     private static int lcm(int num1, int num2) {        return (int) ((1L * num1 * num2) / gcd(num1, num2));    }     private static void ruffleSort(int[] arr) {        // int N = arr.length;        // Random rand = new Random();        // for (int i = 0; i < N; i++) {        // int oi = rand.nextInt(N), temp = arr[i];        // arr[i] = arr[oi];        // arr[oi] = temp;        // }        // Arrays.sort(arr);    }     private static class FastScanner {        BufferedReader br;        StringTokenizer st;         FastScanner() {            this.br = new BufferedReader(new InputStreamReader(System.in));            this.st = new StringTokenizer("");        }         String next() {            while (!st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException err) {                    err.printStackTrace();                }            }            return st.nextToken();        }         String nextLine() {            if (st.hasMoreTokens()) {                return st.nextToken("").trim();            }            try {                return br.readLine().trim();            } catch (IOException err) {                err.printStackTrace();            }            return "";        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }    }}
