import java.io.*;import java.util.*; public class TaskC {      public static void main(String[] args) throws Exception {         Scanner sc = new Scanner(System.in);        PrintWriter pw = new PrintWriter(System.out);          int[]board = new int[]{sc.nextInt(),sc.nextInt()};        int[]p1 = new int[]{sc.nextInt(),sc.nextInt()};        int[]p2 = new int[]{sc.nextInt(),sc.nextInt()};        Arrays.sort(board);        Arrays.sort(p1);        Arrays.sort(p2);         if( (p1[0] + p2[0] <= board[0] && Math.max(p1[1] , p2[1]) <= board[1]) || (p1[0] + p2[1] <= board[0] && Math.max(p1[1],p2[0]) <= board[1])        ||  (p1[1] + p2[0] <= board[0] && Math.max(p1[0],  p2[1]) <= board[1]) || (p1[1] + p2[1] <= board[0] && Math.max(p1[0],p2[0]) <= board[1])        ||  (p1[0] + p2[0] <= board[1] && Math.max(p1[1],  p2[1]) <= board[0]) || (p1[0] + p2[1] <= board[1] && Math.max(p1[1],p2[0]) <= board[0])        ||  (p1[1] + p2[0] <= board[1] && Math.max(p1[0],  p2[1]) <= board[0]) || (p1[1] + p2[1] <= board[1] && Math.max(p1[0],p2[0]) <= board[0]))            System.out.println("YES");        else            System.out.println("NO");        pw.close();     }       private static long gcd(long a, long b) {        if( b == 0)            return a;        return gcd(b  , a%b);    }     static long lcm(int a, int b)    {        return (a*b)/gcd(a, b);    }      private  static int dis(int xa , int ya , int xb , int yb)    {        return (xa-xb)*(xa - xb) + (ya- yb)*(ya-yb);    }      static class Pair1 extends Pair{        int idx;        public Pair1(int x, int y , int idx) {            super(x, y);            this.idx = idx;        }         public int compareTo(Pair o) {             if(y == o.y)                return x - o.x;            return o.y  - y;        }         public String toString()        {            return x + " " + y +" "+idx;        }    }    static class Pair implements Comparable<Pair> {        int x,y;          public Pair(int x, int y) {            this.x = x;            this.y = y;        }         public int compareTo(Pair o) {            if (x == o.x)                return y - o.y;            return x - o.x;        }        public double dis(Pair a){         //   return  0;            return (a.x - x)*(a.x - x) + (a.y-y)*(a.y-y);        }        public String toString() {            return  x+" "+ y;        }        public boolean overlap(Pair a)        {        if((this.x >= a.x && this.x <= a.y) || (a.x >= this.x && a.x <= this.y)) return true;            return false;         }    }     static class Scanner {        StringTokenizer st;        BufferedReader br;         public Scanner(FileReader r) {            br = new BufferedReader(r);        }         public Scanner(InputStream s) {            br = new BufferedReader(new InputStreamReader(s));        }         public String next() {            while (st == null || !st.hasMoreTokens()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return st.nextToken();        }         public boolean check() {            if (!st.hasMoreTokens())                return false;            return true;        }         public int nextInt() {            return Integer.parseInt(next());        }         public long nextLong() {            return Long.parseLong(next());        }         public String nextLine() {            try {                return br.readLine();            } catch (Exception e) {                throw new RuntimeException(e);            }        }         public double nextDouble() {            String x = next();            StringBuilder sb = new StringBuilder("0");            double res = 0, f = 1;            boolean dec = false, neg = false;            int start = 0;            if (x.charAt(0) == '-') {                neg = true;                start++;            }            for (int i = start; i < x.length(); i++)                if (x.charAt(i) == '.') {                    res = Long.parseLong(sb.toString());                    sb = new StringBuilder("0");                    dec = true;                } else {                    sb.append(x.charAt(i));                    if (dec)                        f *= 10;                }            res += Long.parseLong(sb.toString()) / f;            return res * (neg ? -1 : 1);        }         public boolean ready() {            try {                return br.ready();            } catch (IOException e) {                throw new RuntimeException(e);            }        }    }}
