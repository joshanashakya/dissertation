import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solution {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static class FastReader {	    BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;	    }		static int gcd(int a, int b) { 		if (b == 0) return a; 		return gcd(b, a % b);  		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }				static long solve(int[] arr1) {			int n = 14;			long max = -1;						for(int i = 0;i<n;i++) {				int[] arr = new int[14];				for(int k = 0;k<n;k++) {					arr[k] = arr1[k];				}				int x = arr[i]%14;				int y = arr[i]/14;				arr[i] = 0;				long res = 0;				int j = 0;				for(j = i+1;j<n;j++) {					arr[j] += y;				}				for(j = 0;j<=i;j++) {					arr[j] += y;				}				int k = j;				while(x != 0) {					if(k == n) {						k = 0;					}					arr[k] += 1;					x--;					k++;				}				for(int l = 0;l<n;l++) {					if(arr[l]%2 == 0) {						res += arr[l];					}				}				if(res > max) {					max = res;				}			}			return max;		}		public static void main(String args[]) throws Exception {	    FastReader sc = new FastReader();	    long start = System.currentTimeMillis();	    int[] arr = sc.readIntArray(14);		out.println(solve(arr));	    flush();	    long end = System.currentTimeMillis();	    NumberFormat formatter = new DecimalFormat("#0.00000");	    //System.out.print("Execution time is " + formatter.format((end - start) / 1000d) + " seconds");	    }	}						
