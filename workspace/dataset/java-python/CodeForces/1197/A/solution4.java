//package testing;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.*; public class A {	static public class Pair{		int a,b;		public Pair(int a,int b) {			this.a = a;			this.b = b;		}	}	static class cmp implements Comparator<Pair>{		public int compare(Pair p,Pair q) {			if(p.a<q.a) {				return -1;			}			return 1;		}	}	static int mxn = 5005; 	static long dp[][] = new long[mxn][mxn]; 	static int n,k,q;	static int mod = 1000000007;	static long solve(int ind,int moves) {		if(ind>=n||ind<0) {			return 0;		}		if(moves==0) {			return 1;		}		if(dp[ind][moves]!=-1) {			return dp[ind][moves];		}		dp[ind][moves] = (solve(ind+1,moves-1)+solve(ind-1,moves-1))%mod;		return dp[ind][moves];	}	public static void main(String[] args) {		FastScanner fs = new FastScanner();		PrintWriter out = new PrintWriter(System.out);		int t = 1;		t = fs.nextInt();		outer:		while(t-->0) {	 	       n = fs.nextInt();	       ArrayList<Integer>arr = new ArrayList<Integer>();	       for(int i=0;i<n;i++) {	    	   int a;	    	   a = fs.nextInt();	    	   arr.add(a);	       }	       Collections.sort(arr);	       Collections.reverse(arr);	       int ans = 0;	       if(n<=2) {	    	   ans = 0;	       }	       else {	    	   int k = n - 2;	    	   int p = arr.get(1);	    	   ans = Math.min(p-1, k);	       }	       out.println(ans);	       		}		out.close();	    		    	} 	static class FastScanner {		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));		StringTokenizer st=new StringTokenizer(""); 		String next() {			while (!st.hasMoreTokens())				try {					st=new StringTokenizer(br.readLine());				} catch (IOException e) {					e.printStackTrace();				}			return st.nextToken();		} 		int nextInt() {			return Integer.parseInt(next());		} 		int[] readArray(int n) {			int[] a=new int[n];			for (int i=0; i<n; i++)				a[i]=nextInt();			return a;		} 		long nextLong() {			return Long.parseLong(next());		}	} }
