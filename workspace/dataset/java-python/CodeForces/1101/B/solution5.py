"""#If FastIO not needed, used this and don't forget to strip#import sys, math#input = sys.stdin.readline""" import osimport sysfrom io import BytesIO, IOBaseimport heapq as h from bisect import bisect_left, bisect_right from types import GeneratorTypeBUFSIZE = 8192class FastIO(IOBase):    newlines = 0     def __init__(self, file):        import os        self.os = os        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None     def read(self):        while True:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            self.os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") import collections as colimport math, string def getInts():    return [int(s) for s in input().split()] def getInt():    return int(input()) def getStrs():    return [s for s in input().split()] def getStr():    return input() def listStr():    return list(input()) MOD = 10**9+7 """need [ then : then : then ]""" def solve():    S = listStr()    L = len(S)    ans = 0    while S and S[-1] != ']':        ans += 1        S.pop()    if not S:        return -1    S.pop()    while S and S[-1] != ':':        ans += 1        S.pop()    if not S:        return -1    S.pop()    S.reverse()    while S and S[-1] != '[':        ans += 1        S.pop()    if not S:        return -1    S.pop()    while S and S[-1] != ':':        ans += 1        S.pop()    if not S:        return -1    S.pop()    for a in S:        if a != '|':            ans += 1    return L-ans    #for _ in range(getInt()):print(solve())
