import java.io.IOException;import java.io.InputStream;import java.util.InputMismatchException;public class BEducation58 { 	public static void main(String[] args) {		FastScanner in = new FastScanner(System.in);		String g = in.next();		int ans = ans(g);		System.out.println(ans);	}		public static int ans(String g) {		int index0 = g.indexOf('[');				int index1 = g.lastIndexOf(']');				if(index0 == -1 || index1 == -1 || index0 > index1) {			return -1;		}				int index2 = g.indexOf(':', index0);				int index3 = -1;		for(int i = index1; i >= 0; i--) {			if(g.charAt(i) == ':') {				index3 = i;				break;			}		}						if(index2 == -1 || index3 == -1 || index2 >= index3) {			return -1;		}				//System.out.println("index0, index1 = " + index0 + " " + index1);		//System.out.println("inex2, index3 = " + index2 + " " + index3);				int count = 4;		for(int i = index2; i <= index3; i++) {			if(g.charAt(i) == '|') {				count++;			}		}						return count;			}	/**	 * Source: Matt Fontaine	 */	static class FastScanner {		private InputStream stream;		private byte[] buf = new byte[1024];		private int curChar;		private int chars; 		public FastScanner(InputStream stream) {			this.stream = stream;		} 		int read() {			if (chars == -1)				throw new InputMismatchException();			if (curChar >= chars) {				curChar = 0;				try {					chars = stream.read(buf);				} catch (IOException e) {					throw new InputMismatchException();				}				if (chars <= 0)					return -1;			}			return buf[curChar++];		} 		boolean isSpaceChar(int c) {			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;		} 		boolean isEndline(int c) {			return c == '\n' || c == '\r' || c == -1;		} 		public int nextInt() {			return Integer.parseInt(next());		} 		public long nextLong() {			return Long.parseLong(next());		} 		public double nextDouble() {			return Double.parseDouble(next());		} 		public String next() {			int c = read();			while (isSpaceChar(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isSpaceChar(c));			return res.toString();		} 		public String nextLine() {			int c = read();			while (isEndline(c))				c = read();			StringBuilder res = new StringBuilder();			do {				res.appendCodePoint(c);				c = read();			} while (!isEndline(c));			return res.toString();		}	} }/*|[a:b:|]outputCopy4inputCopy|]:[|:]outputCopy-1 [::][:||||||||:]12*/
