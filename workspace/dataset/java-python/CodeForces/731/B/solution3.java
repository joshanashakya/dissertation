import java.util.*;import java.io.*;import java.lang.reflect.Array;import java.math.BigInteger; public class tr0 {	static PrintWriter out;	static StringBuilder sb;	static int mod = (int) 1e9 + 9;	static long inf = (long) 1e14;	static int n, m, k, a, b;	static ArrayList<int[]>[] ad, ad1, adr;	static int[][] memo;	static boolean f;	static boolean vis[];	static long[] hash1, hash2; 	public static void main(String[] args) throws Exception {		Scanner sc = new Scanner(System.in);		out = new PrintWriter(System.out);		int n = sc.nextInt();		int[] a = sc.nextArrInt(n);		int active = 0;		for (int i = 0; i < n; i++) {			if (active == 1) {				a[i]--;				if (a[i] < 0) {					System.out.println("NO");					return;				}			}			if ((a[i] & 1) == 1) {				active = 1;			} else				active = 0; 		}		if(active==1)			System.out.println("NO");		else			System.out.println("YES");		out.close();	} 	static class Scanner {		StringTokenizer st;		BufferedReader br; 		public Scanner(InputStream system) {			br = new BufferedReader(new InputStreamReader(system));		} 		public Scanner(String file) throws Exception {			br = new BufferedReader(new FileReader(file));		} 		public String next() throws IOException {			while (st == null || !st.hasMoreTokens())				st = new StringTokenizer(br.readLine());			return st.nextToken();		} 		public String nextLine() throws IOException {			return br.readLine();		} 		public int nextInt() throws IOException {			return Integer.parseInt(next());		} 		public double nextDouble() throws IOException {			return Double.parseDouble(next());		} 		public char nextChar() throws IOException {			return next().charAt(0);		} 		public Long nextLong() throws IOException {			return Long.parseLong(next());		} 		public int[] nextArrInt(int n) throws IOException {			int[] a = new int[n];			for (int i = 0; i < n; i++)				a[i] = nextInt();			return a;		} 		public long[] nextArrLong(int n) throws IOException {			long[] a = new long[n];			for (int i = 0; i < n; i++)				a[i] = nextLong();			return a;		} 		public boolean ready() throws IOException {			return br.ready();		} 		public void waitForInput() throws InterruptedException {			Thread.sleep(3000);		}	}}
