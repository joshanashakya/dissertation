import java.util.*;import java.io.*;public class MainClass{    public static void main(String[] args) throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        int[] A = new int[n];        for (int i=0;i<n;i++)        {            int x = in.nextInt();            if (x == 0) continue;            if (x % 2 == 1) A[i] = 1;            else    A[i] = 2;        }        int[] count = new int[n];        count[0] = (A[0] == 2?1:0);        for (int i=1;i<n;i++)   count[i] = count[i - 1] + (A[i] == 2?1:0);        ArrayList<Integer> B = new ArrayList<>();        for (int i=0;i<n;i++)   if (A[i] == 1)  B.add(i);        if (B.size() % 2 == 1)            System.out.println("NO");        else        {            boolean ff = true;            for (int i=0;i<B.size();i+=2)            {                int x = B.get(i);                int y = B.get(i + 1);                int countOf0 = (y - x - 1) - (count[y] - count[x]);                if (countOf0 > 0)                    ff = false;            }            if (ff)                System.out.println("YES");            else                System.out.println("NO");        }    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
