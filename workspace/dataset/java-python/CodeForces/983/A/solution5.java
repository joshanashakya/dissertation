import java.io.BufferedInputStream;import java.io.IOException;import java.io.PrintWriter; public class CF_483_A {     static final BufferedInputStream input = new BufferedInputStream(System.in);    static final PrintWriter output = new PrintWriter(System.out);     public static void main(String[] args) throws Exception {        int n = readInt();        for (int i = 0; i < n; i++) {            long p = readLong();            long q = readLong();            long b = readLong();            q = q / gcd(q, p);            long d = gcd(q, b);            while (d > 1) {                q /= d;                while ((q % d) == 0) {                    q /= d;                }                d = gcd(q, d);            }            output.println((q == 1) ? "Finite" : "Infinite");        }        output.flush();        output.close();    }     static long gcd(long a, long b) {//        if (a < 0) {//            return gcd(-a, b);//        }//        if (b < 0) {//            return gcd(a, -b);//        }        if (a < b) {            return gcd(b, a);        }        while (b > 0) {            long c = a % b;            a = b;            b = c;        }        return a;    }     static int readInt() throws IOException {        return Math.toIntExact(readLong());    }     static long readLong() throws IOException {        boolean negative = false;        int c = readNextSignificantChar();        if (c == '-') {            negative = true;            c = input.read();        }        if (c < '0' || c > '9') {            throw new RuntimeException("Can't read number");        }        long res = c - '0';        c = input.read();        while (c >= '0' && c <= '9') {            res = Math.addExact(Math.multiplyExact(res, 10), c - '0');            c = input.read();        }        return negative ? -res : res;    }     static int readNextSignificantChar() throws IOException {        int c = input.read();        while (((c < 33) || (c > 126)) && (c != -1)) {            c = input.read();        }        return c;    }}
