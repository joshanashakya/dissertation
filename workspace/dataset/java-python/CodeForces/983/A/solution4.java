//package codeforces.Round483; import java.io.*;import java.util.*; public class FiniteOrNot2 {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader inp = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        Solver solver = new Solver();        solver.solve(inp, out);        out.close();    }     static class Solver {        private long gcd(long a, long b) {            if (b == 0) return a;            return gcd(b, a % b);        }        private void solve(InputReader inp, PrintWriter out) {            int n = inp.nextInt();            for (int i = 0; i < n; i++) {                long p = inp.nextLong();                long q = inp.nextLong();                long b = inp.nextLong();                 q /= gcd(p, q);                p = gcd(b, q);                while (p != 1) {                    while (q % p == 0) q /= p;                    p = gcd(b, q);                }                if (q == 1) out.println("Finite");                else out.println("Infinite");            }        }    }     static class InputReader {        BufferedReader reader;        StringTokenizer tokenizer;         InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }         public int nextInt() {            return Integer.parseInt(next());        }        public long nextLong() {            return Long.parseLong(next());        }    }}
