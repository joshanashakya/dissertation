import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Random;import java.util.StringTokenizer; public class Main implements Runnable { 	long INF = (long) 1e9 + 9; 	private void solve() throws IOException {		int n = nextInt();		int a[] = new int[n];		for (int i = 0; i < n; ++i) {			a[i] = nextInt();		}		// compute value of fn in range a[l.. r] using dp		int dp[][] = new int[n][n];		for (int i = 0; i < n; ++i) {			for (int j = 0; j + i < n; ++j) {				if (i == 0) {					// value of f when m == 1 is a[1]					dp[j][j + i] = a[j];				} else {					dp[j][j + i] = dp[j][j + i - 1] ^ dp[j + 1][j + i];				}			}		}		for (int i = 1; i < n; ++i) {			for (int j = 0; j + i < n; ++j) {				dp[j][j + i] = Math.max(dp[j][j + i], Math.max(dp[j][j + i - 1], dp[j + 1][j + i]));			}		}		int q = nextInt();		for (int qq = 0; qq < q; ++qq) {			int l = nextInt();			int r = nextInt();			l--;			r--;			pw.println(dp[l][r]);		}	} 	long inv(long x) {		return binpow(x, INF - 2) % INF;	} 	long binpow(long x, long y) {		long prod = 1;		while (y > 0) {			if ((y & 1) == 1) {				prod = prod * x % INF;			}			x = x * x % INF;			y >>= 1;		}		return prod % INF;	} 	void test() throws IOException {		Random rnd = new Random();		for (int i = 0; i < 5; ++i) {			int n = rnd.nextInt(10) + 1;			int a[] = new int[n];			System.err.println(n);			for (int j = 0; j < n; ++j) {				a[j] = rnd.nextInt(20) + 1;				System.err.print(a[j] + " ");			}//			solve(n, a);			System.err.println();		}	} 	BufferedReader br;	StringTokenizer st;	PrintWriter pw; 	public static void main(String args[]) {		new Main().run();	} 	public void run() {		try {			br = new BufferedReader(new InputStreamReader(System.in), 32768);			pw = new PrintWriter(System.out);			st = null;			solve();			pw.flush();			pw.close();			br.close();		} catch (IOException e) {			e.printStackTrace();			System.exit(1);		}	} 	int nextInt() throws IOException {		return Integer.parseInt(next());	} 	long nextLong() throws IOException {		return Long.parseLong(next());	} 	double nextDouble() throws IOException {		return Double.parseDouble(next());	} 	String next() throws IOException {		while (st == null || !st.hasMoreTokens()) {			st = new StringTokenizer(br.readLine());		}		return st.nextToken();	}}
