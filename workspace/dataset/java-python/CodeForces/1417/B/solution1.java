import java.math.BigInteger;import java.util.Arrays;import java.util.Collections;import java.util.HashMap;import java.util.HashSet;import java.util.Scanner;import java.util.Vector;import javafx.util.Pair; public class NewClass { 	static int n11 = 100000;	static boolean a11[] = new boolean[n11 + 1];	static Vector<Long> v11 = new Vector(); 	static long gcd(long a, long b) {		if (b == 0) {			return a;		}		return gcd(b, a % b);	} 	static void seive() {		//a=new boolean[n+1];		for (int i = 0; i < n11; i++) {			a11[i] = true;		} 		for (int i = 2; i < Math.sqrt(n11); i++) {			if (a11[i] == true) {				for (int j = i * i; j <= n11; j += i) {					a11[j] = false;				}			}		} 		for (int i = 2; i < n11; i++) {			if (a11[i] == true) {				v11.add((long) i);			}		}		//System.out.println(v.size());	} 	public static void main(String[] args) {		//System.out.println(gcd(876043,28));		//System.out.println(gcd((long)Math.pow(10, 18),(long)Math.pow(10, 18)+1));		Scanner fs = new Scanner(System.in);		//HashMap<Integer, String> hs = new HashMap();		//HashSet<Integer> h = new HashSet();		//Vector<Integer> v = new Vector();		int t = fs.nextInt();		while (t-- > 0) { 			int n = fs.nextInt();			int T = fs.nextInt();			Vector<Pair<Integer, Integer>> v = new Vector();			int a[] = new int[n]; 			for (int i = 0; i < n; i++) {				a[i] = fs.nextInt();			}			int mid = T / 2;			long count = 0;			for (int i = 0; i < n; i++) {				if (a[i] < mid) {					System.out.print("0 ");				} else if (a[i] > mid) {					System.out.print("1 ");				} else {					if (a[i] + a[i] == T) {						if (count % 2 == 0) {							System.out.print("0 ");						} else {							System.out.print("1 ");						}						count++;					}					else{						System.out.print("0 ");					}				}			}				System.out.println();		}	}}/*ll ans = 0, temp = 0;    sort(all(a));    for(int i = 0; i < n; i++) {        ans += temp * a[i];        ans %= mod;        ans += a[i] * 1ll * a[i];        ans %= mod;        temp *= 2;        temp %= mod;        temp += a[i];        temp %= mod;    }    print1(ans); */
