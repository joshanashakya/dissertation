#define _CRT_SECURE_NO_WARNINGS#include<bits/stdc++.h>#include<unordered_map>using namespace std;#define ll long long#define sz(s) (int)s.size()#define vi vector<int>#define ii pair<int,int>#define vii vector<ii>const int MOD = 1e9 + 7;const double pi = acos(-1);const double EPS = 1e-9;ll binpowmod(ll a, ll b){	a %= MOD;	ll ret = 1;	while (b)	{		if (b & 1)			ret = ret * a % MOD;		a = a * a % MOD;		b >>= 1;	}	return ret % MOD;}ll gcd(ll a, ll b){	if (!b)		return a;	return gcd(b, a % b);}const int N = 1 << 18;const int E = N * 2;#define neigh(u,v,e) for (int e = head[u], v; ~e && ((v = to[e]), 1); e = nxt[e])#define foreach(it, x) for(auto it = x.begin(); it != x.end(); ++it)bool cmp(ii p, ii o){	if (p.second == o.second)		return p.first > o.first;Â 	return p.second < o.second;}void solve(){	int n, m;	cin >> n >> m;	vi points;	vii a(m);	for (int i = 0; i < m; ++i)	{		int x, y;		cin >> x >> y;		points.push_back(x);		points.push_back(y);		a[i] = make_pair(x, y);	};	points.push_back(0);	points.push_back(n);	sort(points.begin(), points.end());	points.resize(unique(points.begin(), points.end()) - points.begin());	sort(a.begin(), a.end(), cmp);	for (int i = 0; i < m; ++i)	{		a[i].first = lower_bound(points.begin(), points.end(), a[i].first) - points.begin();		a[i].second = lower_bound(points.begin(), points.end(), a[i].second) - points.begin();	}	n = lower_bound(points.begin(), points.end(), n) - points.begin();	vector<ll> dp(n + 10);	dp[n] = 1;	ll cur = 0;	int idx = m - 1;	priority_queue<pair<int,ll>,vector<pair<int,ll>>,less<pair<int,ll>>> pq;	for (int i = n - 1; i >= 0; --i)	{		while (idx >= 0 && a[idx].second > i)		{			cur = (cur + dp[a[idx].second]) % MOD;			pq.push({ a[idx].first,dp[a[idx].second] });			idx--;		}		dp[i] = cur;		while (!pq.empty() && pq.top().first >= i)		{			ii x = pq.top();			pq.pop();			cur = (cur - x.second + MOD) % MOD;		}	}	cout << dp[0] << '\n';}int main(void){#ifdef ONLINE_JUDGE	//freopen("hamming.in", "r", stdin);#endif	//freopen("output.txt", "w", stdout);	ios::sync_with_stdio(false);	cin.tie(NULL);	cout.tie(NULL);	int tc = 1;	//cin >> tc;	while (tc--)	{		solve();	}}
