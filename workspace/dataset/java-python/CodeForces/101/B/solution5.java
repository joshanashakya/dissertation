import java.io.*;import java.util.*; public class MainClass{    public static void main(String[] args)throws IOException    {        Reader in = new Reader();        int n = in.nextInt();        int m = in.nextInt();        TreeSet<Integer> t = new TreeSet<>();        Game[] A = new Game[m];        for (int i=0;i<m;i++)        {            int x = in.nextInt();            int y = in.nextInt();            A[i] = new Game(x, y);            t.add(x);            t.add(y);        }        ArrayList<Integer> B = new ArrayList<>(t);        Game[] C = new Game[m];        for (int i=0;i<m;i++)        {            int x = Collections.binarySearch(B, A[i].l) + 1;            int y = Collections.binarySearch(B, A[i].r) + 1;            C[i] = new Game(x, y);        }        Arrays.sort(A);        Arrays.sort(C);        BIT BIT = new BIT(200000 + 5);        long[] dp = new long[m];        long M = (long)(1e9 + 7);        HashMap<Integer, Long> h = new HashMap<>();        long ans = 0L;        for (int i=m - 1;i>=0;i--)        {            int actualL = A[i].l;            int actuaLR = A[i].r;            int modL = C[i].l;            int modR = C[i].r;            if (actuaLR == n)            {                dp[i] = 1L;            }            else            {                long sum = BIT.sum(modR);                long sameStop = h.getOrDefault(modR, 0L);                sum = (sum - sameStop + M) % M;                dp[i] = sum;            }            if (actualL == 0L)                ans = (ans + dp[i]) % M;            BIT.update(modL, dp[i]);            if (!h.containsKey(modR))                h.put(modR, dp[i]);            else                h.put(modR, (h.get(modR) + dp[i]) % M);        }        System.out.println(ans);    }}class Game implements Comparable<Game>{    int l;    int r;     public Game(int l, int r)    {        this.l = l;        this.r = r;    }     @Override    public int compareTo(Game ob)    {        if (this.r < ob.r)            return -1;        else if (this.r > ob.r)            return 1;        else            return 0;    }}class BIT{    long[] table;    int size;     public BIT(int size)    {        this.table = new long[size];        this.size = size;    }     public void update(int i, long delta)    {        while (i < size)        {            table[i] += delta;            i += Integer.lowestOneBit(i);        }    }     public long sum(int i)    {        long sum = 0L;        while (i > 0)        {            sum += table[i];            i -= Integer.lowestOneBit(i);        }        return sum;    }}class Reader{    final private int BUFFER_SIZE = 1 << 16;    private DataInputStream din;    private byte[] buffer;    private int bufferPointer, bytesRead;     public Reader()    {        din = new DataInputStream(System.in);        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public Reader(String file_name) throws IOException    {        din = new DataInputStream(new FileInputStream(file_name));        buffer = new byte[BUFFER_SIZE];        bufferPointer = bytesRead = 0;    }     public String readLine() throws IOException    {        byte[] buf = new byte[64]; // line length        int cnt = 0, c;        while ((c = read()) != -1)        {            if (c == '\n')                break;            buf[cnt++] = (byte) c;        }        return new String(buf, 0, cnt);    }     public int nextInt() throws IOException    {        int ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do        {            ret = ret * 10 + c - '0';        }  while ((c = read()) >= '0' && c <= '9');         if (neg)            return -ret;        return ret;    }     public long nextLong() throws IOException    {        long ret = 0;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();        do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');        if (neg)            return -ret;        return ret;    }     public double nextDouble() throws IOException    {        double ret = 0, div = 1;        byte c = read();        while (c <= ' ')            c = read();        boolean neg = (c == '-');        if (neg)            c = read();         do {            ret = ret * 10 + c - '0';        }        while ((c = read()) >= '0' && c <= '9');         if (c == '.')        {            while ((c = read()) >= '0' && c <= '9')            {                ret += (c - '0') / (div *= 10);            }        }         if (neg)            return -ret;        return ret;    }     private void fillBuffer() throws IOException    {        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);        if (bytesRead == -1)            buffer[0] = -1;    }     private byte read() throws IOException    {        if (bufferPointer == bytesRead)            fillBuffer();        return buffer[bufferPointer++];    }     public void close() throws IOException    {        if (din == null)            return;        din.close();    }}
