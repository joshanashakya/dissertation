import java.util.*;import java.util.Map.Entry;import java.lang.*;import java.math.*;import java.text.*;import java.io.*;		public final class Solve {		static PrintWriter out = new PrintWriter(System.out); 		static void flush() {	 	out.flush();	 	}		static void run(long s, long e) {		NumberFormat formatter = new DecimalFormat("#0.00000");		System.out.print("Execution time is " + formatter.format((e - s) / 1000d) + " seconds");		}		static class FastReader {	    BufferedReader br;	    StringTokenizer st;		    public FastReader() {	    br = new BufferedReader(new	    InputStreamReader(System.in));	    }	    static boolean isPalindrome(String str1, String str2) {	    String str3 = str1+str2;	    int i = 0, j = str3.length()-1;	    while(i < j) {	    char a = str3.charAt(i), b = str3.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    static boolean isPalindrome(String str) {	    int i = 0, j = str.length()-1;	    while(i < j) {	    char a = str.charAt(i), b = str.charAt(j);	    if(a != b) return false;	    i++;j--;	    }	    return true;	    }	    String next() {	    while (st == null || !st.hasMoreElements()) {	    try{st = new StringTokenizer(br.readLine());}	    catch (IOException  e) {e.printStackTrace();}	    }	    return st.nextToken();	    }	    int nextInt(){ return Integer.parseInt(next()); }	    long nextLong() { return Long.parseLong(next());}	    static int fact(int n) {	    if(n == 1) return 1;	    return n * fact(n-1);	   	}	    public int[] readIntArray(int n) {	    int[] arr = new int[n];		for(int i=0; i<n; ++i)		arr[i]=nextInt();		return arr;		}	    public int[][] readIntArray(int m, int n){		int[][] arr = new int[m][n];		for(int i = 0;i<m;i++) 		for(int j = 0;j<n;j++) 		arr[i][j] = nextInt();		return arr;	    }	    public String[] readStringArray(int n) {		String[] arr = new String[n];		for(int i=0; i<n; ++i)		arr[i]= nextLine();		return arr;	    }		static int gcd(int a, int b) { 		if (b == 0) return a; 		return gcd(b, a % b);  		}	    double nextDouble() {return Double.parseDouble(next());}	    String nextLine() {	    String str = "";	    try{str = br.readLine();}	    catch (IOException e) {e.printStackTrace();}	    return str;}	    }		static void solve(char[] ch, int k) {			int[] arr = new int[26];			char[] c = new char[26];			int n = ch.length;			int[] ex1 = new int[26];			char[] ex2 = new char[26];			for(int i = 0;i<n;i++) {				arr[ch[i] - 'a']++;				c[ch[i] - 'a'] = ch[i];				ex1[ch[i] - 'a']++;				ex2[ch[i] - 'a'] = ch[i];			}						for(int i = 0;i<25;i++) {				for(int j = i+1;j<26;j++) {					if(arr[i] > arr[j]) {						int temp = arr[i];						arr[i] = arr[j];						arr[j] = temp;												char te = c[i];						c[i] = c[j];						c[j] = te;					}				}			}			int left = k;			int cou = 0;			for(int i = 0;i<26;i++) {				int us = Math.min(left, arr[i]);				if(c[i] != 0) {				ex1[c[i] - 'a'] -= us;				}				arr[i] -= us;				left -= us;				if(left == 0) {					break;				}			}			Set<Character> set = new HashSet<> ();			for(int i = 0;i<26;i++) {				if(c[i] != 0) {					if(arr[i] != 0) {						set.add(c[i]);					}				}			}			out.println(set.size());			for(int i = 0;i<n;i++) {				if(ex1[ch[i] - 'a']-- > 0) {					out.print(ch[i]);				}			}			out.println();		}		public static void main(String args[]) throws Exception {	    FastReader sc = new FastReader();	    long s = System.currentTimeMillis();	   char[] ch = sc.nextLine().toCharArray();	   	int k = sc.nextInt();	    solve(ch, k);	    flush();	    long e = System.currentTimeMillis();//	    run(s,e);	    }	}						
