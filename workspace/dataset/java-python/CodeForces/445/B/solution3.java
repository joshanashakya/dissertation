import java.io.BufferedWriter;import java.io.ByteArrayInputStream;import java.io.FileInputStream;import java.io.FileWriter;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.InputMismatchException;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Queue;import java.util.Set; public class Main {    private static final long MOD = (long) 1e9 + 7;    static InputStream is;    static PrintWriter out;    static String INPUT = "";    static int lenbuf = 0, ptrbuf = 0;    private static byte[] inbuf = new byte[1024];    static boolean readFile = false; //set to true if the questions require file I/O     static void solve() {        int n = ni(), m = ni();        DSU dsu = new DSU(n);        for (int i = 0; i < m; i++) {            int x = ni(), y  = ni();            dsu.union(x, y);        }        int componentCnt = 0;        for (int i = 1; i <= n; i++) {            if (dsu.find(i) == i) {                componentCnt++;            }        }        out.println((long) (Math.pow(2, n - componentCnt)));    }     static void execute() throws IOException {            solve();    }     public static class DSU {        private int[] parent;        private int[] rank;         public DSU(int n) {            parent = new int[n + 1];            rank = new int[n + 1];            for (int i = 1; i < parent.length; i++) {                parent[i] = i;            }        }         public int find(int x) {            if (parent[x] != x) {                parent[x] = find(parent[x]);            }            return parent[x];        }         public boolean union(int x, int y) {            int xr = find(x), yr = find(y);            if (xr == yr) {                return false;            } else if (rank[xr] < rank[yr]) {                parent[xr] = yr;            } else if (rank[xr] > rank[yr]) {                parent[yr] = xr;            } else {                parent[yr] = xr;                rank[xr]++;            }            return true;        }    }      public static void main(String[] args) throws Exception {        long S = System.currentTimeMillis();        if (readFile) {            is = new FileInputStream("input.txt");            out = new PrintWriter(new BufferedWriter(new FileWriter("output.txt")));        } else {            is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());            out = new PrintWriter(System.out);        }         execute();        out.flush();        long G = System.currentTimeMillis();        tr(G - S + "ms");    }     private static int upperBound(int[] a, int l, int r, int target) {        while (l < r) {            int mid = l + (r - l) / 2;            if (a[mid] > target) {                r = mid;            } else {                l = mid + 1;            }        }        return l;    }     private static boolean eof() {        if (lenbuf == -1) {            return true;        }        int lptr = ptrbuf;        while (lptr < lenbuf) {            if (!isSpaceChar(inbuf[lptr++])) {                return false;            }        }         try {            is.mark(1000);            while (true) {                int b = is.read();                if (b == -1) {                    is.reset();                    return true;                } else if (!isSpaceChar(b)) {                    is.reset();                    return false;                }            }        } catch (IOException e) {            return true;        }    }     private static int readByte() {        if (lenbuf == -1) {            throw new InputMismatchException();        }        if (ptrbuf >= lenbuf) {            ptrbuf = 0;            try {                lenbuf = is.read(inbuf);            } catch (IOException e) {                throw new InputMismatchException();            }            if (lenbuf <= 0) {                return -1;            }        }        return inbuf[ptrbuf++];    }     private static boolean isSpaceChar(int c) {        return !(c >= 33 && c <= 126);    }     //	private static boolean isSpaceChar(int c) { return !(c >= 32 && c <= 126); }    private static int skip() {        int b;        while ((b = readByte()) != -1 && isSpaceChar(b)) {            ;        }        return b;    }     private static double nd() {        return Double.parseDouble(ns());    }     private static char nc() {        return (char) skip();    }     private static String ns() {        int b = skip();        StringBuilder sb = new StringBuilder();        while (!(isSpaceChar(b))) {            sb.appendCodePoint(b);            b = readByte();        }        return sb.toString();    }     private static char[] ns(int n) {        char[] buf = new char[n];        int b = skip(), p = 0;        while (p < n && !(isSpaceChar(b))) {            buf[p++] = (char) b;            b = readByte();        }        return n == p ? buf : Arrays.copyOf(buf, p);    }     private static char[][] nm(int n, int m) {        char[][] map = new char[n][];        for (int i = 0; i < n; i++) {            map[i] = ns(m);        }        return map;    }     private static int[] na(int n) {        int[] a = new int[n];        for (int i = 0; i < n; i++) {            a[i] = ni();        }        return a;    }     private static int ni() {        int num = 0, b;        boolean minus = false;        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) {            ;        }        if (b == '-') {            minus = true;            b = readByte();        }         while (true) {            if (b >= '0' && b <= '9') {                num = num * 10 + (b - '0');            } else {                return minus ? -num : num;            }            b = readByte();        }    }     private static long nl() {        long num = 0;        int b;        boolean minus = false;        while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) {            ;        }        if (b == '-') {            minus = true;            b = readByte();        }         while (true) {            if (b >= '0' && b <= '9') {                num = num * 10 + (b - '0');            } else {                return minus ? -num : num;            }            b = readByte();        }    }     private static void tr(Object... o) {        if (INPUT.length() != 0) {            System.out.println(Arrays.deepToString(o));        }    }}
