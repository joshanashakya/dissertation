import java.util.*;import java.util.zip.CRC32; public class Solution {     static Scanner scan = new Scanner(System.in);     static class DSU{        int parent[];        int groupSize[];        public DSU(int nodes){            parent = new int[nodes + 1];            groupSize = new int[nodes + 1];            for(int i=0; i<=nodes; i++){                parent[i] = i;                groupSize[i] = 1;            }        }         public int findSuperParent(int node){            if(parent[node] == node) return node;            return parent[node] = findSuperParent(parent[node]);        }        public void mergeGroup(int x, int y){            int xSuperParent = findSuperParent(x);            int ySuperParent = findSuperParent(y);            if(xSuperParent == ySuperParent) return;            if(groupSize[xSuperParent] > groupSize[ySuperParent]){                parent[ySuperParent] = xSuperParent;                groupSize[xSuperParent] += groupSize[ySuperParent];            }            else{                parent[xSuperParent] = ySuperParent;                groupSize[ySuperParent] += groupSize[xSuperParent];            }        }          public int getExpectedFriends(int element){            return groupSize[findSuperParent(element)] - 1;        }    }     public static void main(String[] args) {        // write your code here         int n = scan.nextInt(), m = scan.nextInt();        DSU dsu = new DSU(n);        while(m-- > 0){            int firstChemical = scan.nextInt(), secondChemical = scan.nextInt();            dsu.mergeGroup(firstChemical, secondChemical);        }         long result = 1;        for(int i=1; i<=n; i++){            if(dsu.findSuperParent(i) == i){                result *= Math.pow(2l, dsu.groupSize[i] - 1);            }        }        System.out.println(result);     }} 
