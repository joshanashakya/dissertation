import java.io.*;import java.util.*; public class Main {	static class FastReader{         BufferedReader br;         StringTokenizer st;         public FastReader(){br = new BufferedReader(new InputStreamReader(System.in));}        String next(){while (st == null || !st.hasMoreElements()){try{st = new StringTokenizer(br.readLine());}         catch (IOException  e){e.printStackTrace();}}return st.nextToken();}        int nextInt(){ return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}        String nextLine(){String str = ""; try{str = br.readLine(); } catch (IOException e) {e.printStackTrace();} return str; }     }	static FastReader sc = new FastReader();	static List<pair> g[];	public static void main (String[] args) throws Exception {        PrintWriter out = new PrintWriter(System.out);        int k = 1;//        t = sc.nextInt();        z : while(k-->0) {        	int n = sc.nextInt();    		int m = sc.nextInt();    		DSU d = new DSU(n+1);    		while(m-->0) {    			int u = sc.nextInt();    			int v = sc.nextInt();    			d.join(u, v);    		}    		long ans = 1;    		for(int i=1;i<=n;i++) {    			if(i!=d.findPar(i)) ans *= 2;    		}    		out.write(ans+"\n");      	}		out.close();	}}class DSU {	int par[];	int size[];	DSU(int n) {		par = new int[n];		size = new int[n];		Arrays.fill(size, 1);		for(int i=0;i<n;i++) par[i] = i;	}	int findPar(int x) {		if(x == par[x]) return x;				return par[x] = findPar(par[x]);	}	boolean join(int u,int v) {		int fu = findPar(u);		int fv = findPar(v);		if(fu!=fv) {			if(size[fu]>size[fv]) {				par[fv] = fu;				size[fu] += size[fv];			}			else {				par[fu] = fv;				size[fv] += size[fu];			}			return true;		}		else return false;	}}Â class pair implements Comparable<pair>{	int a;	int b; 	pair(int a,int b){		this.a = a;		this.b = b;	}	@Override    public int compareTo(pair p){        return this.b - p.b;    }}
