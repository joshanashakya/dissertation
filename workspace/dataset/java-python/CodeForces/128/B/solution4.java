import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.io.FilterInputStream;import java.io.BufferedInputStream;import java.util.PriorityQueue;import java.io.InputStream; /** * @author khokharnikunj8 */ public class Main {    public static void main(String[] args) {        new Thread(null, new Runnable() {            public void run() {                new Main().solve();            }        }, "1", 1 << 26).start();    }     void solve() {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        ScanReader in = new ScanReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        BString solver = new BString();        solver.solve(1, in, out);        out.close();    }     static class BString {        char[] ar;         public void solve(int testNumber, ScanReader in, PrintWriter out) {            ar = in.scanString().toCharArray();            int k = in.scanInt();            long len = ar.length;            if ((len * (len + 1)) / 2 < k) {                out.println("No such line.");                return;            }            PriorityQueue<Pair> pq = new PriorityQueue<>();            for (int i = 0; i < len; i++) pq.add(new Pair(i, i));            while (pq.size() > 0 && k-- > 1) {                Pair temp = pq.poll();                if (temp.end + 1 < len) pq.add(new Pair(temp.st, temp.end + 1));            }            for (int i = pq.peek().st; i <= pq.peek().end; i++) out.print(ar[i]);        }         class Pair implements Comparable<Pair> {            int st;            int end;             public int compareTo(Pair o) {                int st = o.st;                int end = o.end;                for (int i = this.st, j = st; i <= this.end && j <= end; i++, j++) {                    if (ar[i] < ar[j]) return -1;                    else if (ar[i] > ar[j]) return 1;                }                if (this.end - this.st <= end - st) return -1;                else return 1;            }             public Pair(int st, int end) {                this.st = st;                this.end = end;            }         }     }     static class ScanReader {        private byte[] buf = new byte[4 * 1024];        private int index;        private BufferedInputStream in;        private int total;         public ScanReader(InputStream inputStream) {            in = new BufferedInputStream(inputStream);        }         private int scan() {            if (index >= total) {                index = 0;                try {                    total = in.read(buf);                } catch (Exception e) {                    e.printStackTrace();                }                if (total <= 0) return -1;            }            return buf[index++];        }         public int scanInt() {            int integer = 0;            int n = scan();            while (isWhiteSpace(n)) n = scan();            int neg = 1;            if (n == '-') {                neg = -1;                n = scan();            }            while (!isWhiteSpace(n)) {                if (n >= '0' && n <= '9') {                    integer *= 10;                    integer += n - '0';                    n = scan();                }            }            return neg * integer;        }         public String scanString() {            int c = scan();            if (c == -1) return null;            while (isWhiteSpace(c)) c = scan();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = scan();            } while (!isWhiteSpace(c));            return res.toString();        }         private boolean isWhiteSpace(int n) {            if (n == ' ' || n == '\n' || n == '\r' || n == '\t' || n == -1) return true;            else return false;        }     }} 
