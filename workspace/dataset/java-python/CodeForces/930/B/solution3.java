import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.IOException;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskB solver = new TaskB();        solver.solve(1, in, out);        out.close();    }     static class TaskB {        public void solve(int testNumber, InputReader in, PrintWriter out) {            String str = in.next();            int N = str.length();            int[][] ways = new int[26][N];            int[][] unique = new int[26][N];            int[] cnt = new int[26];             int[][][] sets = new int[26][N][26];             for (int i = 0; i < N; i++) {                char c = str.charAt(i);                cnt[c - 'a']++;                for (int j = 1; j < N; j++) {                    int nxt = (i + j) % N;                    char nc = str.charAt(nxt);                    sets[c - 'a'][j][nc - 'a']++;                    ways[c - 'a'][j]++;                }            }             for (int i = 0; i < 26; i++) {                for (int j = 0; j < N; j++) {                    for (int k = 0; k < 26; k++) {                        if (sets[i][j][k] == 1) unique[i][j]++;                    }                }            }            double ans = 0D;             double[] WIN = new double[26];             for (int c = 'a'; c <= 'z'; c++) {                int ci = c - 'a';                for (int i = 1; i < N; i++) {                    if (ways[ci][i] == 0) continue;                    WIN[ci] = Math.max(WIN[ci], 1d * unique[ci][i] / ways[ci][i]);                }            }             for (int c = 'a'; c <= 'z'; c++) {                int ci = c - 'a';                ans += (1d * cnt[ci] / N) * WIN[ci];            }             out.println(ans);        }     }     static class InputReader {        public BufferedReader reader;        public StringTokenizer tokenizer;         public InputReader(InputStream stream) {            reader = new BufferedReader(new InputStreamReader(stream), 32768);            tokenizer = null;        }         public String next() {            while (tokenizer == null || !tokenizer.hasMoreTokens()) {                try {                    tokenizer = new StringTokenizer(reader.readLine());                } catch (IOException e) {                    throw new RuntimeException(e);                }            }            return tokenizer.nextToken();        }     }} 
