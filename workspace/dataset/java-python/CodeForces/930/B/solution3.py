#Code by Sounak, IIESTS#------------------------------warmup---------------------------- import osimport sysimport mathfrom io import BytesIO, IOBasefrom fractions import Fractionimport collectionsfrom itertools import permutationsfrom collections import defaultdict  BUFSIZE = 8192  class FastIO(IOBase):    newlines = 0        def __init__(self, file):        self._fd = file.fileno()        self.buffer = BytesIO()        self.writable = "x" in file.mode or "r" not in file.mode        self.write = self.buffer.write if self.writable else None         def read(self):        while True:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            if not b:                break            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines = 0        return self.buffer.read()     def readline(self):        while self.newlines == 0:            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))            self.newlines = b.count(b"\n") + (not b)            ptr = self.buffer.tell()            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)        self.newlines -= 1        return self.buffer.readline()     def flush(self):        if self.writable:            os.write(self._fd, self.buffer.getvalue())            self.buffer.truncate(0), self.buffer.seek(0)  class IOWrapper(IOBase):    def __init__(self, file):        self.buffer = FastIO(file)        self.flush = self.buffer.flush        self.writable = self.buffer.writable        self.write = lambda s: self.buffer.write(s.encode("ascii"))        self.read = lambda: self.buffer.read().decode("ascii")        self.readline = lambda: self.buffer.readline().decode("ascii")  sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)input = lambda: sys.stdin.readline().rstrip("\r\n") #-------------------game starts now-----------------------------------------------------s = input()l = len(s) instances = [[] for x in range(26)] s_i = [ord(c) - 97 for c in s]  for i in range(l):    instances[s_i[i]].append(i)   #sum_probability += len * probability#probability = sum_probabilty sum_probability = 0 for c in range(0,26):    if not instances[c]:        continue    if len(instances[c]) == 0:        sum_probability += 1        continue    max_probability = 0    for guess in range(1, l):        num_seen = [0]*26        probability = 0        for index in instances[c]:            num_seen[s_i[(index+guess)%l]] += 1        for x in num_seen:            if x == 1:                probability += 1        max_probability = max(max_probability, probability)    sum_probability += max_probability     print(sum_probability/l)
