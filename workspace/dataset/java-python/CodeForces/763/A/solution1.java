import java.util.*;import java.io.*; public class Main2 {	static class FastReader{         BufferedReader br;         StringTokenizer st;         public FastReader(){br = new BufferedReader(new InputStreamReader(System.in));}        String next(){while (st == null || !st.hasMoreElements()){try{st = new StringTokenizer(br.readLine());}         catch (IOException  e){e.printStackTrace();}}return st.nextToken();}        int nextInt(){ return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}        String nextLine(){String str = ""; try{str = br.readLine(); } catch (IOException e) {e.printStackTrace();} return str; }     }	static int mod = (int)(1e9+7);	static FastReader sc = new FastReader();	static PrintWriter out = new PrintWriter(System.out);	static List<Integer> tre[];	static int c[];	public static void main (String[] args) {		int t = 1;//    	t = sc.nextInt();	    z : while(t-->0) {	    	int n = sc.nextInt();	    	tre = new ArrayList[n+1];	    	for(int i=1;i<=n;i++) tre[i] = new ArrayList<>();	    	for(int i=1;i<n;i++) {	    		int u = sc.nextInt();	    		int v = sc.nextInt();	    		tre[u].add(v);	    		tre[v].add(u);	    	}	    	c = new int[n+1];	    	for(int i=1;i<=n;i++) {	    		c[i] = sc.nextInt();	    	}	    		    	int r1 = -1, r2 = -1;	    	for(int i=1;i<=n;i++) {	    		for(int adj : tre[i]) {	    			if(c[i]!=c[adj]) {	    				r1 = i;	    				r2 = adj;	    				break;	    			}	    		}	    	}	    	if(r1 == -1) {	    		out.write("YES\n1");	    		continue;	    	}	    	boolean is1 = true, is2 = true;	    		    	is1 &= solve(r1);	    	is2 &= solve(r2);	    		    	if(is1) {	    		out.write("YES\n");	    		out.write(r1+"");	    	}	    	else if(is2) {	    		out.write("YES\n");	    		out.write(r2+"");	    	}	    	else out.write("NO");		}		out.close();	}	private static boolean solve(int root) {		boolean ans = true;		for(int adj : tre[root]) {			ans &= dfs(adj,root,c[adj]);		}		return ans;	}	private static boolean dfs(int node, int par, int col) {		if(col != c[node]) return false;				for(int adj : tre[node]) {			if(adj != par) {				if(!dfs(adj,node,col)) return false;			}		}				return true;	}}
