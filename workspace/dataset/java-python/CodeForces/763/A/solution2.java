import java.util.*;import java.io.*; public class a implements Runnable{   static List<Integer> [] al;  static int [] c;   static boolean check(int u,int color,int p){      for(int v : al[u]){          if(v==p)continue;          if(color!=-1 && c[v]!=color)return false;          if(!check(v,c[v],u))return false;      }      return true;   }      public void run() {         try{         FastScanner sc=new FastScanner();        int n=sc.nextInt();        al=new ArrayList[n+1];        for(int i=0;i<=n;i++)al[i]=new ArrayList<>();         int start=-1,end=-1;        int [][] edge=new int[n][2];         for(int i=1;i<n;i++){            int u=sc.nextInt();            int v=sc.nextInt();            al[u].add(v);            al[v].add(u);            edge[i-1][0]=u;            edge[i-1][1]=v;        }         c=new int[n+1];        for(int i=1;i<=n;i++)c[i]=sc.nextInt();         for(int i=0;i<n;i++){            if(c[edge[i][0]]!=c[edge[i][1]]){                start=edge[i][0];                end=edge[i][1];                break;            }        }         //System.out.println(start+" "+end);         if(start==-1 && end==-1){            System.out.println("YES");            System.out.println("1");            return;        }         if(check(start,-1,-1)){            System.out.println("YES");            System.out.println(start);            return;        }         if(check(end,-1,-1)){            System.out.println("YES");            System.out.println(end);            return;        }         System.out.println("NO");    }    catch(IOException e){}        }     public static void main(String [] sst) throws IOException{        Thread th=new Thread(null,new a(),"dfsthread",1<<16);        th.start();           } }                class FastScanner{	    private int BUFFER_SIZE = 1 << 16;      private  DataInputStream din;      private  byte[] buffer;      private int bufferPointer, bytesRead;      public FastScanner() {       din = new DataInputStream(System.in);       buffer = new byte[BUFFER_SIZE];       bufferPointer = bytesRead = 0;   }    public FastScanner( String file_name) throws IOException {       din = new DataInputStream(new FileInputStream(file_name));       buffer = new byte[BUFFER_SIZE];       bufferPointer = bytesRead = 0;   }      public String readLine() throws IOException {        byte[] buf = new byte[64];       int cnt = 0, c;       while ((c = read()) != -1) {           if (c == '\n')               break;           buf[cnt++] = (byte) c;       }       return new String(buf, 0, cnt);   }      public String next() throws IOException{        byte c = read();       while(Character.isWhitespace(c)){           c = read();       }              StringBuilder builder = new StringBuilder();       builder.append((char)c);       c = read();       while(!Character.isWhitespace(c)){           builder.append((char)c);           c = read();       }              return builder.toString();   }    public int nextInt() throws IOException {       int ret = 0;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();       do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');        if (neg)           return -ret;       return ret;   }      public int[] nextIntArray( int n) throws IOException {        int arr[] = new int[n];       for(int i = 0; i < n; i++){           arr[i] = nextInt();       }       return arr;   }    public long nextLong() throws IOException {       long ret = 0;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();       do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');       if (neg)           return -ret;       return ret;   }      public long[] nextLongArray( int n) throws IOException {        long arr[] = new long[n];       for(int i = 0; i < n; i++){           arr[i] = nextLong();       }       return arr;   }    public char nextChar() throws IOException{       byte c = read();       while(Character.isWhitespace(c)){           c = read();       }       return (char) c;	   }      public double nextDouble() throws IOException {       double ret = 0, div = 1;       byte c = read();       while (c <= ' ')           c = read();        boolean neg = (c == '-');       if (neg)           c = read();        do {           ret = ret * 10 + c - '0';       } while ((c = read()) >= '0' && c <= '9');        if (c == '.') {           while ((c = read()) >= '0' && c <= '9') {               ret += (c - '0') / (div *= 10);           }       }        if (neg)           return -ret;       return ret;   }      public double[] nextDoubleArray( int n) throws IOException {        double arr[] = new double[n];       for(int i = 0; i < n; i++){           arr[i] = nextDouble();       }       return arr;   }    private void fillBuffer() throws IOException {       bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);       if (bytesRead == -1)           buffer[0] = -1;   }    private byte read() throws IOException {       if (bufferPointer == bytesRead)           fillBuffer();       return buffer[bufferPointer++];   }    public void close() throws IOException {       if (din == null)           return;       din.close();   } }             
