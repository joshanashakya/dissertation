import sysfrom types import GeneratorType#sys.setrecursionlimit(10**6)def bootstrap(f, stack=[]):    def wrappedfunc(*args, **kwargs):        if stack:            return f(*args, **kwargs)        else:            to = f(*args, **kwargs)            while True:                if type(to) is GeneratorType:                    stack.append(to)                    to = next(to)                else:                    stack.pop()                    if not stack:                        break                    to = stack[-1].send(to)            return to    return wrappedfunc @bootstrapdef dfs(v,c,d,k,p):    if o[v-1] != c:        k[0] = 0     for i in d[v]:        if i != p:            yield dfs(i, c, d, k, v)     yield n = int(input())l = []d = {}for _ in range(n-1):    u,v = map(int,input().split())    if u in d:        d[u].append(v)     else:        d[u] = [v]     if v in d:        d[v].append(u)     else:        d[v] = [u]     l.append((u,v)) o = list(map(int,input().split()))f = 0for i in l:    e1 = i[0]    e2 = i[1]    if o[e1-1] != o[e2-1]:        k1 = [1]        for z in d[e1]:            dfs(z, o[z - 1], d, k1, e1)         if k1[0] == 1:            print("YES")            print(e1)            exit()         k2 = [1]        for z in d[e2]:            dfs(z, o[z - 1], d, k2, e2)         if k2[0] == 1:            print("YES")            print(e2)            exit()         print("NO")        exit() print("YES")print(1)
