import sys,os,ioimport math,bisect,operatorinf,mod = float('inf'),10**9+7# sys.setrecursionlimit(10 ** 6)from itertools import groupby,accumulatefrom heapq import heapify,heappop,heappushfrom collections import deque,Counter,defaultdictinput = iter(sys.stdin.buffer.read().decode().splitlines()).__next__Neo = lambda : list(map(int,input().split()))test, = Neo()n = testedges = []for _ in range(n - 1):    u, v = Neo()    u -= 1    v -= 1    edges.append((u, v)) colors = Neo()suspect = [(u, v) for (u, v) in edges if colors[u] != colors[v]] if len(suspect) == 0:    print("YES")    print(1)else:    cands = set(suspect[0])    for u, v in suspect:        cands &= set([u, v])    # print(cands)    if len(cands) == 0:        print("NO")    else:        print("YES")        e = list(cands)[0]        print(e + 1)      
