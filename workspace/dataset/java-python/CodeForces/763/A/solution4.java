import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.*;import java.math.*;import java.util.*; public class Main {     static FastReader in;    static PrintWriter o;     public static void solve() {       int n = in.nextInt();       List<Pair> list = new ArrayList<>();       int[][] arr = new int[n-1][2];       for (int i = 0; i < n - 1; i++) {           int u = in.nextInt() - 1;           int v = in.nextInt() - 1;           arr[i][0] = u;           arr[i][1] = v;       }       int[] c = new int[n];       for (int i = 0; i < n; i++) {           c[i] = in.nextInt();       }       for (int i = 0; i < n - 1; i++) {           int u = arr[i][0];           int v = arr[i][1];           if (c[u] != c[v]) {               list.add(new Pair(u, v));           }       }        if (list.size() == 0) {           o.println("YES");           o.println("1");       } else {           if (list.size() == 1) {               o.println("YES");               o.println(list.get(0).u+1);           } else {               Pair p = list.get(0);               Pair q = list.get(1);               int req = -1;               if (p.u == q.u) {                   req = p.u;               }               if (p.u == q.v) {                   req = p.u;               }               if (p.v == q.u) {                   req = p.v;               }               if (p.v == q.v) {                   req = p.v;               }               if (req == -1) {                   o.println("NO");               } else {                   boolean b = true;                   for (int i = 0; i < list.size(); i++) {                       int x = list.get(i).u;                       int y = list.get(i).v;                       if (req != x && req != y) {                           b = false;                       }                   }                   if (b) {                       o.println("YES");                       o.println(req+1);                   } else {                       o.println("NO");                   }               }           }       }       o.close();       return;    }     static class Pair {        int u;        int v;        Pair (int u, int v) {            this.u = u;            this.v = v;        }    }      public static void main(String[] args) {        in = new FastReader();        o = new PrintWriter(System.out);        solve();        return;    }      static class FastReader {        BufferedReader br;        StringTokenizer st;         public FastReader() {            br = new BufferedReader(new InputStreamReader(System.in));        }         String next() {            while (st == null || !st.hasMoreElements()) {                try {                    st = new StringTokenizer(br.readLine());                } catch (IOException e) {                    e.printStackTrace();                }            }            return st.nextToken();        }         int nextInt() {            return Integer.parseInt(next());        }         long nextLong() {            return Long.parseLong(next());        }         double nextDouble() {            return Double.parseDouble(next());        }         int[] readArray(int n) {            int[] a = new int[n];            for (int i = 0; i < n; i++) a[i] = nextInt();            return a;        }         long[] readLongArray(int n) {            long[] a = new long[n];            for (int i = 0; i < n; i++) a[i] = nextLong();            return a;        }         String nextLine() {            String str = "";            try {                str = br.readLine();            } catch (IOException e) {                e.printStackTrace();            }            return str;        }    } }
