import java.io.OutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintStream;import java.util.Arrays;import java.util.Collection;import java.io.IOException;import java.util.Deque;import java.io.UncheckedIOException;import java.io.Closeable;import java.io.Writer;import java.io.OutputStreamWriter;import java.util.ArrayDeque;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top */public class Main {    public static void main(String[] args) throws Exception {        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 29);        thread.start();        thread.join();    }     static class TaskAdapter implements Runnable {        @Override        public void run() {            InputStream inputStream = System.in;            OutputStream outputStream = System.out;            FastInput in = new FastInput(inputStream);            FastOutput out = new FastOutput(outputStream);            BPhillipAndTrains solver = new BPhillipAndTrains();            int testCount = Integer.parseInt(in.next());            for (int i = 1; i <= testCount; i++)                solver.solve(i, in, out);            out.close();        }    }     static class BPhillipAndTrains {        Debug debug = new Debug(false);         public boolean isBlock(char c) {            return c >= 'A' && c <= 'Z';        }         public void solve(int testNumber, FastInput in, FastOutput out) {            int n = in.ri();            int k = in.ri();            char[][] mat = new char[3][n + 3];            SequenceUtils.deepFill(mat, '.');            for (int i = 0; i < 3; i++) {                in.rs(mat[i], 0);            }            Deque<int[]> dq = new ArrayDeque<>(3 * (n + 3));            boolean[][] access = new boolean[3][n + 3];            for (int i = 0; i < 3; i++) {                for (int j = 0; j < n; j++) {                    if (mat[i][j] == 's') {                        access[i][j] = true;                        dq.add(new int[]{i, j});                    }                }            }             while (!dq.isEmpty()) {                int[] head = dq.removeFirst();                debug.debugArray("head", head);                int x = head[0];                int y = head[1];                if (y >= n) {                    out.println("YES");                    return;                }                if (isBlock(mat[x][y + 1])) {                    continue;                }                for (int v = -1; v <= 1; v++) {                    int nx = x + v;                    if (nx < 0 || nx >= 3) {                        continue;                    }                    boolean valid = true;                    for (int i = 1; i <= 3; i++) {                        if (isBlock(mat[nx][i + y])) {                            valid = false;                        }                    }                    int ny = y + 3;                    if (valid && !access[nx][ny]) {                        access[nx][ny] = true;                        dq.add(new int[]{nx, ny});                    }                }            }             out.println("NO");        }     }     static class Debug {        private boolean offline;        private PrintStream out = System.err;         public Debug(boolean enable) {            offline = enable && System.getSecurityManager() == null;        }         public Debug debugArray(String name, int[] matrix) {            if (offline) {                debug(name, Arrays.toString(matrix));            }            return this;        }         public Debug debug(String name, String x) {            if (offline) {                out.printf("%s=%s", name, x);                out.println();            }            return this;        }     }     static class FastInput {        private final InputStream is;        private StringBuilder defaultStringBuf = new StringBuilder(1 << 13);        private byte[] buf = new byte[1 << 13];        private int bufLen;        private int bufOffset;        private int next;         public FastInput(InputStream is) {            this.is = is;        }         private int read() {            while (bufLen == bufOffset) {                bufOffset = 0;                try {                    bufLen = is.read(buf);                } catch (IOException e) {                    bufLen = -1;                }                if (bufLen == -1) {                    return -1;                }            }            return buf[bufOffset++];        }         public void skipBlank() {            while (next >= 0 && next <= 32) {                next = read();            }        }         public String next() {            return readString();        }         public int ri() {            return readInt();        }         public int readInt() {            int sign = 1;             skipBlank();            if (next == '+' || next == '-') {                sign = next == '+' ? 1 : -1;                next = read();            }             int val = 0;            if (sign == 1) {                while (next >= '0' && next <= '9') {                    val = val * 10 + next - '0';                    next = read();                }            } else {                while (next >= '0' && next <= '9') {                    val = val * 10 - next + '0';                    next = read();                }            }             return val;        }         public String readString(StringBuilder builder) {            skipBlank();             while (next > 32) {                builder.append((char) next);                next = read();            }             return builder.toString();        }         public String readString() {            defaultStringBuf.setLength(0);            return readString(defaultStringBuf);        }         public int rs(char[] data, int offset) {            return readString(data, offset);        }         public int readString(char[] data, int offset) {            skipBlank();             int originalOffset = offset;            while (next > 32) {                data[offset++] = (char) next;                next = read();            }             return offset - originalOffset;        }     }     static class SequenceUtils {        public static void deepFill(Object array, char val) {            if (!array.getClass().isArray()) {                throw new IllegalArgumentException();            }            if (array instanceof char[]) {                char[] charArray = (char[]) array;                Arrays.fill(charArray, val);            } else {                Object[] objArray = (Object[]) array;                for (Object obj : objArray) {                    deepFill(obj, val);                }            }        }     }     static class FastOutput implements AutoCloseable, Closeable, Appendable {        private static final int THRESHOLD = 1 << 13;        private final Writer os;        private StringBuilder cache = new StringBuilder(THRESHOLD * 2);         public FastOutput append(CharSequence csq) {            cache.append(csq);            return this;        }         public FastOutput append(CharSequence csq, int start, int end) {            cache.append(csq, start, end);            return this;        }         private void afterWrite() {            if (cache.length() < THRESHOLD) {                return;            }            flush();        }         public FastOutput(Writer os) {            this.os = os;        }         public FastOutput(OutputStream os) {            this(new OutputStreamWriter(os));        }         public FastOutput append(char c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput append(String c) {            cache.append(c);            afterWrite();            return this;        }         public FastOutput println(String c) {            return append(c).println();        }         public FastOutput println() {            return append(System.lineSeparator());        }         public FastOutput flush() {            try {                os.append(cache);                os.flush();                cache.setLength(0);            } catch (IOException e) {                throw new UncheckedIOException(e);            }            return this;        }         public void close() {            flush();            try {                os.close();            } catch (IOException e) {                throw new UncheckedIOException(e);            }        }         public String toString() {            return cache.toString();        }     }} 
