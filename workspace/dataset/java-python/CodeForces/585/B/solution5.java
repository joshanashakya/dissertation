 import java.util.*;import java.lang.*;import java.lang.reflect.Array;import java.io.*;import java.math.*;import java.text.DecimalFormat;public class Prac{         static class InputReader {         private final InputStream stream;	private final byte[] buf = new byte[8192];	private int curChar, snumChars; 	public InputReader(InputStream st) {            this.stream = st;	} 	public int read() {            if (snumChars == -1)	 	throw new InputMismatchException();            if (curChar >= snumChars) {		curChar = 0;                try {                    snumChars = stream.read(buf);		}                 catch (IOException e) {                    throw new InputMismatchException();           	}		if (snumChars <= 0)                    return -1;            }            return buf[curChar++];	}        public int ni() {            int c = read();            while (isSpaceChar(c)) {               	c = read();            }            int sgn = 1;            if (c == '-') {		sgn = -1;		c = read();            }            int res = 0;            do {		res *= 10;		res += c - '0';		c = read();            } while (!isSpaceChar(c));            return res * sgn;	} 	public long nl() {            int c = read();            while (isSpaceChar(c)) {            c = read();            }            int sgn = 1;            if (c == '-') {                sgn = -1;                c = read();            }            long res = 0;            do {                res *= 10;                res += c - '0';                c = read();            } while (!isSpaceChar(c));            return res * sgn;	} 	public int[] nia(int n) {            int a[] = new int[n];            for (int i = 0; i < n; i++) {		a[i] = ni();            }            return a;	} 	public String rs() {            int c = read();            while (isSpaceChar(c)) {		c = read();            }            StringBuilder res = new StringBuilder();            do {		res.appendCodePoint(c);                    c = read();            } while (!isSpaceChar(c));            return res.toString();	}	public String nextLine() {            int c = read();            while (isSpaceChar(c))		c = read();            StringBuilder res = new StringBuilder();            do {                res.appendCodePoint(c);                c = read();            } while (!isEndOfLine(c));            return res.toString();        } 	public boolean isSpaceChar(int c) {            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;	} 	private boolean isEndOfLine(int c) {            return c == '\n' || c == '\r' || c == -1;	}     }    static PrintWriter w = new PrintWriter(System.out);          static int arr[][],n;        static boolean dfs(int r,int c,int res[][]){        if(r<0||r>2){            return false;        }        if(c>=n){            return true;        }        if(res[r][c]!=0){            return res[r][c]==1;        }        int row[]={-1,0,1};        boolean f=false;        for(int i=0;i<3;i++){            if(c>=n-1||(arr[r][c+1]==0&&(r+row[i])>=0&&(r+row[i])<=2&&arr[r+row[i]][c+1]==0&&arr[r+row[i]][Math.min(n-1,c+2)]==0&&arr[r+row[i]][Math.min(n-1,c+3)]==0)){                boolean found=dfs(r+row[i],c+3,res);                if(found){                    f=found;                    break;                }            }        }        if(f){            res[r][c]=1;        }        else res[r][c]=-1;        return f;    }    public static void main(String[] args) throws IOException {           InputReader sc=new InputReader(System.in);        int t=sc.ni();        while(t-->0){            n=sc.ni();            int k=sc.ni();            arr=new int[3][n];            int res[][]=new int[3][n];            int r=0,c=0;            for(int i=0;i<3;i++){                //Arrays.fill(arr,1);                String s=sc.nextLine();                for(int j=0;j<s.length();j++){                    if(s.charAt(j)!='s'&&s.charAt(j)!='.'){                        arr[i][j]=1;                    }                    if(s.charAt(j)=='s'){                        r=i;                        c=j;                    }                }            }            boolean ans=dfs(r,c,res);            w.println(ans?"YES":"NO");        }                                        w.close();    }}          
