import java.io.BufferedReader;import java.io.OutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.StringTokenizer;import java.io.InputStream; /** * Built using CHelper plug-in * Actual solution is at the top * @author K0T */public class Main {    public static void main(String[] args) {        InputStream inputStream = System.in;        OutputStream outputStream = System.out;        InputReader in = new InputReader(inputStream);        PrintWriter out = new PrintWriter(outputStream);        TaskA solver = new TaskA();        solver.solve(1, in, out);        out.close();    }} class TaskA {     static final int C = 3;     int n;    long k;     int[] a;     public void solve(int testNumber, InputReader scn, PrintWriter pw) {        n = scn.nextInt();        k = scn.nextLong();        a = new int[n + C];        for (int i = 1; i <= n; i++) {            a[i] = scn.nextInt();        }        long sums = 0L;        int curN = n;        int addI = 0;        for (int i = 1; i <= n; i++) {            int undo = i + addI - 1;            int koef = (curN - (i + addI));            long value = sums - 1L * koef * undo * a[i];            if (value < k) {                pw.println(i);                --curN;                --addI;            } else {                sums += (1L * (i + addI - 1) * a[i]);            }        }    }} class InputReader {    public BufferedReader reader;    public StringTokenizer tokenizer;     public InputReader(InputStream stream) {        reader = new BufferedReader(new InputStreamReader(stream), 32768);        tokenizer = null;    }     public String next() {        while (tokenizer == null || !tokenizer.hasMoreTokens()) {            try {                tokenizer = new StringTokenizer(reader.readLine());            } catch (IOException e) {                throw new RuntimeException(e);            }        }        return tokenizer.nextToken();    }     public int nextInt() {        return Integer.parseInt(next());    }     public long nextLong() {        return Long.parseLong(next());    } }
