import java.io.*;import java.util.*; public class A implements Runnable{	public static void main (String[] args) {new Thread(null, new A(), "_cf", 1 << 28).start();} 	public void run() {		FastScanner fs = new FastScanner();		PrintWriter out = new PrintWriter(System.out);		System.err.println("Go!"); 		int n = fs.nextInt();		long k = fs.nextLong();		long[] a = new long[n + 1];		for(int i = 1; i <= n; i++)			a[i] = fs.nextLong();		BIT value = new BIT(n + 1);		BIT alive = new BIT(n + 1);		for(int i = 1; i <= n; i++) {			long sub = (n - i) * a[i];			sub *= alive.sum(i - 1);			long add = value.sum(i - 1);			long di = add - sub;//			System.out.printf("%d %d %d %d\n", i, sub, add, di);			if(di < k) {				out.println(i);			}			else {				alive.update(i, 1);				value.update(i, a[i] * (alive.sum(i) - 1));			}		} 		out.close();	} 	class BIT {				long[] bit;		int n;				public BIT(int a) {			n = a + 1;			bit = new long[n];		}				//Remember that when querying a sum to query the 1-based index of the value.				void update (int index, long val) {			while(index < n) {				bit[index] += val;				index += (index & (-index));			}		}				long sum (int index) {			long sum = 0;			while(index > 0) {				sum += bit[index];				index -= (index & (-index));			}			return sum;		}	}		void sort (int[] a) {		int n = a.length;		for(int i = 0; i < 50; i++) {			Random r = new Random();			int x = r.nextInt(n), y = r.nextInt(n);			int temp = a[x];			a[x] = a[y];			a[y] = temp;		}		Arrays.sort(a);	} 	class FastScanner {		public int BS = 1<<16;		public char NC = (char)0;		byte[] buf = new byte[BS];		int bId = 0, size = 0;		char c = NC;		double num = 1;		BufferedInputStream in; 		public FastScanner() {			in = new BufferedInputStream(System.in, BS);		} 		public FastScanner(String s) throws FileNotFoundException {			in = new BufferedInputStream(new FileInputStream(new File(s)), BS);		} 		public char nextChar(){			while(bId==size) {				try {					size = in.read(buf);				}catch(Exception e) {					return NC;				}                				if(size==-1)return NC;				bId=0;			}			return (char)buf[bId++];		} 		public int nextInt() {			return (int)nextLong();		} 		public long nextLong() {			num=1;			boolean neg = false;			if(c==NC)c=nextChar();			for(;(c<'0' || c>'9'); c = nextChar()) {				if(c=='-')neg=true;			}			long res = 0;			for(; c>='0' && c <='9'; c=nextChar()) {				res = (res<<3)+(res<<1)+c-'0';				num*=10;			}			return neg?-res:res;		} 		public double nextDouble() {			double cur = nextLong();			return c!='.' ? cur:cur+nextLong()/num;		} 		public String next() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c>32) {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public String nextLine() {			StringBuilder res = new StringBuilder();			while(c<=32)c=nextChar();			while(c!='\n') {				res.append(c);				c=nextChar();			}			return res.toString();		} 		public boolean hasNext() {			if(c>32)return true;			while(true) {				c=nextChar();				if(c==NC)return false;				else if(c>32)return true;			}		}				public int[] nextIntArray(int n) {			int[] res = new int[n];			for(int i = 0; i < n; i++) res[i] = nextInt();			return res;		}			} }
