def STR(): return list(input())def INT(): return int(input())def MAP(): return map(int, input().split())def LIST(): return list(map(int, input().split()))def STRING(): return input() from heapq import heappop , heappushfrom bisect import *from collections import dequefrom math import *from itertools import permutationsdx = [-1 , 1 , 0 , 0  ]dy = [0 , 0  , 1  , - 1]#visited = [[False for i in range(m)] for j in range(n)] def valid(i , j):    if i >= 0 and i <= n - 1 and j >= 0 and j <= m - 1:        return True    return False n , m = MAP()g = []for i in range(n):    g.append(STRING())#print(g)s = STRING()s1 , s2 = 0 , 0e1 , e2 = 0 , 0f = 0for i in range(n):    for j in range(m):        if g[i][j] == 'S':            s1 = i            s2 = j            f = 1            break        if f == 1 :            breakstart = (s1,s2)f = 0for i in range(n):    for j in range(m):        if g[i][j] == 'E':            e1 = i            e2 = j            f = 1            break        if f == 1 :            breakend = (e1 , e2)mapping = ((0, -1), (0, 1), (-1, 0), (1, 0))cnt = 0 for i in permutations(mapping, 4):    now = start    for j in s:        k = i[int(j)]        x = now[0] + k[0]        y = now[1] + k[1]        if valid(x , y) == False:            break        now = (x , y)        if now == end:            cnt += 1            break        elif g[x][y] == '#':            break print(cnt)          
