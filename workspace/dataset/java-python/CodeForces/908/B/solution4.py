def STR(): return list(input())def INT(): return int(input())def MAP(): return map(int, input().split())def LIST(): return list(map(int, input().split()))def STRING(): return input()from heapq import heappop , heappushfrom bisect import *from collections import dequefrom math import *from itertools import permutationsdx = [-1 , 1 , 0 , 0  ]dy = [0 , 0  , 1  , - 1]#visited = [[False for i in range(m)] for j in range(n)] n , m = MAP()g = []for i in range(n):    g.append(STRING())s = STRING()s1 , s2 = 0 , 0e1 , e2 = 0 , 0for i in range(n):    for j in range(m):        if g[i][j] == 'S':            s1 , s2 = i , j         if g[i][j] == 'E':            e1 , e2 = i , jstart = (s1 , s2)end = (e1 , e2)directions = ((0 , 1) , (1 , 0) , (0 , -1) , (-1, 0))cnt = 0for i in permutations(directions , 4):    k = start    for j in s :        h = i[int(j)]        x = k[0] + h[0]        y = k[1] + h[1]        if not  0<=x<n or not 0<=y<m :            break         k = (x , y)        if k == end :            cnt += 1            break        elif g[x][y] == '#':            break print(cnt)        
