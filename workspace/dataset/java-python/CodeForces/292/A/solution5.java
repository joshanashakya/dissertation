import java.io.*;import java.util.*; public class TaskD {     final static double EPS = 1e-8;     public void solve() throws IOException {        int n = in.nextInt();        int[] t = new int[n];        int[] c = new int[n];        int[] cnt = new int[1_000_100];        for (int i = 0; i < n; ++i) {            t[i] = in.nextInt();            c[i] = in.nextInt();            cnt[t[i]] += c[i];        }        int ma = 0;        int now = 0;        int last = 0;        for (int time = 0; time < cnt.length; ++time) {            if (now > 0) {                --now;                last = time;            }            now += cnt[time];            ma = Math.max(ma, now);            if (cnt[time] != 0) {                last = time;            }        }        last += now;        out.println(last + " " + ma);    }     static FastReader in;    static PrintWriter out;    static PrintStream err;     public static void main(String[] args) throws IOException {        try {            in = new FastReader();            out = new PrintWriter(System.out);            err = System.err;            new TaskD().solve();            out.close();        } catch (IOException e) {            e.printStackTrace();            System.exit(1);        }    }} class FastReader {    BufferedReader br;    StringTokenizer in;     FastReader() {        this.br = new BufferedReader(new InputStreamReader(System.in));    }     FastReader(String filename) {        try {            this.br = new BufferedReader(new FileReader(filename));        } catch (IOException e) {            e.printStackTrace();            System.exit(1);        }    }     public String nextToken() throws IOException {        while (in == null || !in.hasMoreTokens()) {            in = new StringTokenizer(br.readLine());        }        return in.nextToken();    }     public int nextInt() throws IOException {        return Integer.parseInt(nextToken());    }     public double nextDouble() throws IOException {        return Double.parseDouble(nextToken());    }     public long nextLong() throws IOException {        return Long.parseLong(nextToken());    }}
