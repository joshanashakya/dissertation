import java . io . * ; class GfG { static int sumOfTheSeries ( int n ) { return ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( "Sum = " + sumOfTheSeries ( n ) ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001143A { static public void main ( final String [ ] args ) throws IOException { p001143A . _main ( args ) ; }
class GFG { static int PositionRightmostSetbit ( int n ) { int position = 1 ; int m = 1 ; while ( ( n & m ) == 0 ) { m = m << 1 ; position ++ ; } return position ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( PositionRightmostSetbit ( n ) ) ; } }
import java . util . * ; public class PuzzleFromTheFuture {  public static void main ( String [ ] args ) {
class GFG { static int findSum ( int N , int k ) { int sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += ( int ) Math . pow ( i , k ) ; } return sum ; } public static void main ( String [ ] args ) { int N = 8 , k = 4 ; System . out . println ( findSum ( N , k ) ) ; } }
import java . io . * ; class GFG { static float cyl ( float r , float R , float h ) { if ( h < 0 && r < 0 && R < 0 ) return - 1 ; float r1 = r ; float h1 = h ; float V = ( float ) ( 3.14 * Math . pow ( r1 , 2 ) * h1 ) ; return V ; } public static void main ( String [ ] args ) { float r = 7 , R = 11 , h = 6 ; System . out . print ( cyl ( r , R , h ) ) ; } }
import java . util . Scanner ;  public class _0709DiceTower {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long n = sc . nextLong ( ) ; if ( n <= 14 ) { System . out . println ( "NO" ) ; } else if ( n % 14 <= 6 && n % 14 >= 1 ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }  }
import java . util . * ; public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ar [ ] = new int [ n + 2 ] ; for ( int i = 2 ; i < ( n + 1 ) ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; } List < Integer > list = new ArrayList < > ( ) ; int k = n ; while ( k >= 1 ) {
class GFG { static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) > 0 ) i += 1 ; if ( ( i * i ) > n ) i = n ; return ( 1 + ( n - i ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countOperations ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; long l = ( long ) n / a ; long k = ( long ) m / a ; if ( n % a != 0 ) l ++ ; if ( m % a != 0 ) k ++ ; System . out . println ( l * k ) ; } }
import java . util . * ;  public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int h = m + n + 1 ; h = h - n ; System . out . print ( h + " " ) ; for ( int i = 0 ; i < n ; i ++ ) { h ++ ; System . out . print ( h + " " ) ; } h = m + 1 ; for ( int j = 0 ; j < m ; j ++ ) { h -- ; System . out . print ( h + " " ) ;    } }  }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;  public class absolute { public static int binary ( int n , int m , int k ) { int st = 0 , end = k , pos = - 1 ; while ( st <= end ) { int mid = st + ( end - st ) / 2 ;
import java . util . Scanner ;  public class StupidWalker { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;  long d = Math . abs ( scan . nextLong ( ) ) + Math . abs ( scan . nextLong ( ) ) ; long s = scan . nextLong ( ) - d ;  if ( s >= 0 && s % 2 == 0 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . io . * ; class GFG { static int ncr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i += 1 ) { ans *= ( n - r + i ) ; ans /= i ; } return ans ; } static int totalWays ( int X , int Y , int M , int W ) { return ( ncr ( M , X ) * ncr ( W , Y ) ) ; } public static void main ( String [ ] args ) { int X = 4 , Y = 3 , M = 6 , W = 5 ; System . out . println ( totalWays ( X , Y , M , W ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c693a {
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; class GFG { static boolean checkOrigin ( int x1 , int y1 , int x2 , int y2 ) { return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ; } public static void main ( String [ ] args ) { if ( checkOrigin ( 1 , 28 , 2 , 56 ) == true ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static int countNum ( int N , int arr [ ] ) { int sum = 0 , count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < N ; i ++ ) { if ( ( sum - arr [ i ] ) % arr [ i ] == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 10 , 4 , 6 , 7 } ; int n = arr . length ; System . out . println ( countNum ( n , arr ) ) ; } }
import java . util . * ; class GFG { static void print ( int n , int k ) { System . out . print ( k + " " ) ; for ( int i = 2 ; i <= n ; i ++ ) { int x = ( int ) ( Math . pow ( k , i ) - Math . pow ( k , i - 1 ) ) ; System . out . print ( x + " " ) ; } } public static void main ( String [ ] args ) { int N = 3 , K = 4 ; print ( N , K ) ; } }
import java . io . * ; class GFG { static float squarearea ( float r ) { if ( r < 0 ) return - 1 ; float a = 4 * ( float ) ( Math . pow ( r , 2 ) / 5 ) ; return a ; } public static void main ( String [ ] args ) { float r = 5 ; System . out . println ( squarearea ( r ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int a = 9 * n ; int b = 8 * n ; System . out . println ( a + " " + b ) ; } }
import java . lang . System . * ; class GFG { static int findBucketNo ( int p ) { return ( int ) Math . ceil ( ( Math . sqrt ( 8 * p + 1 ) - 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int p = 10 ; System . out . println ( findBucketNo ( p ) ) ; } }
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class Square { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException { int t = sc . nextInt ( ) ; while ( t -- > 0 ) { 
import java . io . * ; class GFG { static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 1 ; j <= arr [ i ] ; j ++ ) k ^= arr [ i ] ; result += k ; } return result ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 6 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( XorSum ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }  void run ( FastScanner in , PrintWriter out ) { 
import java . util . Arrays ; import java . io . * ; class GFG { static int items ( int n , int a [ ] ) { Arrays . sort ( a ) ; int z = a [ n - 1 ] ; int x = 1 ; int s = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { s += a [ i ] ; if ( s <= z ) x += 1 ; else break ; } return x ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 5 , 3 , 1 , 5 , 6 } ; System . out . println ( items ( n , a ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s . nextInt ( ) ; } int ans = Math . abs ( sum ) / k ; if ( Math . abs ( sum ) % k > 0 ) { ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class MainClass { public static void main ( String [ ] args ) throws IOException { Reader in = new Reader ( ) ;
public final class p007 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p007 ( ) . run ( ) ) ; } public String run ( ) { for ( int i = 2 , count = 0 ; ; i ++ ) { if ( Library . isPrime ( i ) ) { count ++ ; if ( count == 10001 ) return Integer . toString ( i ) ; } } } }
import java . io . * ; import java . util . * ;  public class B { static ArrayList < Long > power = new ArrayList < > ( ) ; static ArrayList < Long > divisors = new ArrayList < > ( ) ; public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; dp ( ) ; long n = in . nextLong ( ) ; divisor ( n ) ;
class GFG { public static int arraySum ( int arr [ ] , int n ) { int x = ( n + 1 ) / 2 ; return ( arr [ 0 ] - 1 ) * n + x * x ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 11 , 12 , 13 , 12 , 11 , 10 } ; int n = arr . length ; System . out . print ( arraySum ( arr , n ) ) ; } }
import java . util . * ;  public class CompProg2 {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int w = scan . nextInt ( ) ; int price = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { price += i * k ; } if ( n > price ) System . out . println ( 0 ) ; else System . out . println ( price - n ) ;   }  }
class GFG { public static int Valid ( int a , int b , int c , int d ) { if ( a + b + c + d == 360 ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int a = 80 , b = 70 , c = 100 , d = 110 ; if ( Valid ( a , b , c , d ) == 1 ) System . out . println ( "Valid quadilateral" ) ; else System . out . println ( "Invalid quadilateral" ) ; } }
class GFG { static void findNumbers ( int n ) { int i = 1 ; while ( i <= n ) { System . out . print ( ( ( 2 * i ) - 1 ) + " " ) ; i ++ ; } } public static void main ( String args [ ] ) { int n = 3 ; findNumbers ( n ) ; } }
import java . io . * ; class GFG { static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; } public static void main ( String args [ ] ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }
import java . util . Scanner ;  public class EvenOdds { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; if ( k <= ( n + 1 ) / 2 ) { System . out . println ( k * 2 - 1 ) ; } else { System . out . println ( ( k - ( n + 1 ) / 2 ) * 2 ) ; }  } }
 import java . util . Scanner ;  public class MemeProblem { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long p = 1 , c = 0 ; while ( Math . pow ( 10 , p ) - 1 <= b ) { c += a ; p ++ ; } System . out . println ( c ) ; } } }
import java . util . * ;   public class Practise { 
import java . util . Scanner ; public class p1331B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; StringBuilder s = new StringBuilder ( ) ; for ( int i = 2 , j = ( int ) Math . sqrt ( n ) ; i <= j ; i ++ ) { if ( n % i == 0 ) { System . out . print ( i + "" + n / i ) ; return ; } } } }
import java . util . Scanner ; public class cards { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int len = s . nextInt ( ) ; String str = s . next ( ) ; s . close ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == 'n' ) System . out . print ( "1 " ) ; } for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == 'z' ) System . out . print ( "0 " ) ; } } }
class GFG { static int CountZeroBit ( int n ) { int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) != 0 ) count ++ ; n >>= 1 ; } return count ; } static int CountORandSumEqual ( int N ) { int count = CountZeroBit ( N ) ; return ( 1 << count ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . print ( CountORandSumEqual ( N ) ) ; } }
import java . io . * ; class GFG { static int countMoves ( int n ) { int ct = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ct += i * ( n - i ) ; ct += n ; return ct ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countMoves ( n ) ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { double n = 12 ; System . out . println ( Math . sqrt ( n ) ) ; } }
class Solution { public int pivotIndex ( int [ ] nums ) { int totalsum = 0 , leftsum = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) totalsum += nums [ i ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( leftsum == totalsum - leftsum - nums [ i ] ) return i ; leftsum += nums [ i ] ; } return - 1 ; } }
import java . util . Scanner ;  public class maxstack { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long m = sc . nextLong ( ) ; long c = 0 ; if ( m <= n ) { c = ( m - 1 ) / 2 ; } else c = n - m / 2 ; System . out . println ( c < 0 ? 0 : c ) ; }  }
import java . util . * ; public class Practice { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long n = sc . nextLong ( ) ; long v [ ] = { x , y , y - x , - 1 * x , - 1 * y , x - y } ; n -- ; long M = 1000000007 ; System . out . print ( ( ( v [ ( int ) n % 6 ] % M ) + M ) % M ) ;  } } 
import java . util . * ; public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int arr [ ] = new int [ 101 ] ; int n = sc . nextInt ( ) ; arr [ 0 ] = 1 ; arr [ 1 ] = 5 ; for ( int i = 2 ; i < 101 ; i ++ ) { arr [ i ] = arr [ i - 1 ] + 2 * ( arr [ i - 1 ] - arr [ i - 2 ] ) ; } System . out . println ( 2 * n * ( n - 1 ) + 1 ) ; } }
import java . io . * ; class GFG { int MAX = 100 ; static int countCommon ( int mat [ ] [ ] , int n ) { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; return res ; } public static void main ( String args [ ] ) throws IOException { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; System . out . println ( countCommon ( mat , 3 ) ) ; } }
import java . io . * ; class GFG { static int centeredTetrahedralNumber ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 3 ) / 3 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( centeredTetrahedralNumber ( n ) ) ; } }
import java . io . * ; class GFG { static int centered_square_num ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( n + "th Centered" + " square number: " + centered_square_num ( n ) ) ; } }
import java . io . * ; class GFG { static long countOfMultiples ( long n ) { return ( n / 3 + n / 5 - n / 15 ) ; } static public void main ( String [ ] args ) { System . out . println ( countOfMultiples ( 6 ) ) ; System . out . println ( countOfMultiples ( 16 ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class Gfg { static int getHeight ( int X ) { return ( 2 * X ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { int X = 35 ; System . out . println ( getHeight ( X ) ) ; } }
class GFG { static float Cel_To_Fah ( float n ) { return ( ( n * 9.0f / 5.0f ) + 32.0f ) ; } public static void main ( String [ ] args ) { float n = 20.0f ; System . out . println ( Cel_To_Fah ( n ) ) ; } }
 import java . math . * ; import java . util . * ; import java . io . * ; public class gr13b {
import java . util . * ; class GFG { static int findRotations ( String str ) { String tmp = str + str ; int n = str . length ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { String substring = tmp . substring ( i , str . length ( ) ) ; if ( str == substring ) return i ; } return n ; } public static void main ( String [ ] args ) { String str = "abc" ; System . out . println ( findRotations ( str ) ) ; } }
import java . util . Scanner ;  public class codeforces { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long start = in . nextLong ( ) ; long end = in . nextLong ( ) ; int click = 0 ; while ( start < end ) { if ( end % 2 == 0 ) { end /= 2 ; } else { end += 1 ; } click ++ ; } System . out . println ( click + start - end ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { public static int counLastDigitK ( int low , int high , int k ) { int count = ( high - low ) / 10 ; if ( high % 10 >= k ) count ++ ; if ( low % 10 > k ) count -- ; return count ; } public static void main ( String argc [ ] ) { int low = 3 , high = 35 , k = 3 ; System . out . println ( counLastDigitK ( low , high , k ) ) ; } }
import java . io . IOException ; import java . util . Scanner ;  public class fafa { public static void main ( String [ ] args ) throws IOException { Scanner scanner = new Scanner ( System . in ) ; int m = scanner . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= m / 2 ; i ++ ) { if ( ( m - i ) % i == 0 ) { count += 1 ; } } System . out . print ( count ) ; }  }
class GFG { static String largestSubStr ( String s ) { while ( s . length ( ) != 0 && s . charAt ( s . length ( ) - 1 ) == '1' ) s = s . substring ( 0 , s . length ( ) - 1 ) ; if ( s . length ( ) == 0 ) return "-1" ; else return s ; } public static void main ( String [ ] args ) { String s = "11001" ; System . out . println ( largestSubStr ( s ) ) ; } }
import java . io . * ;  public class Main { static final int N = 1010 ; static String [ ] arr = new String [ N ] ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n , m , k ; n = sc . nextInt ( ) ; m = sc . nextInt ( ) ; k = sc . nextInt ( ) ; if ( ( n <= m ) && ( n <= k ) ) { System . out . println ( "yes" ) ; } else System . out . println ( "No" ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Main main = new Main ( ) ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int num1 = 0 ; int num2 = 0 ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { num1 = i ; num2 = n / i ; } } System . out . println ( num1 + " " + num2 ) ; } } 
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int edgeCover ( int n ) { int result = 0 ; result = ( int ) Math . ceil ( ( double ) n / 2.0 ) ; return result ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . print ( edgeCover ( n ) ) ; } }
import java . util . * ;  public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int number = sc . nextInt ( ) ; int sum = number ; int cesh = 0 ; while ( number > 9 ) { int q = number % 10 ; cesh += number / 10 ; number /= 10 ; number += q ; } System . out . println ( sum + cesh ) ; } }  }
import java . util . * ;  public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- != 0 ) { long n = sc . nextLong ( ) ; System . out . println ( ( n + 1 ) / 2 ) ; } } }
public class GFG { static void printExpansion ( String str ) { for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) { String subStr = str . substring ( i ) ; System . out . print ( subStr ) ; } } public static void main ( String args [ ] ) { String str = "geeks" ; printExpansion ( str ) ; } }
import java . io . * ; class GFG { static void angleextcycquad ( int z ) { System . out . print ( "The exterior angle of the" + " cyclic quadrilateral is " + z + " degrees" ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleextcycquad ( z ) ; } }
import java . util . Scanner ;  public class B1459 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int answer ; if ( N % 2 == 0 ) { answer = ( N / 2 + 1 ) * ( N / 2 + 1 ) ; } else { answer = ( N + 2 ) * ( N + 2 ) / 2 ; } System . out . println ( answer ) ; }  }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String str = br . readLine ( ) ; int lastvacant = - 1 ; int [ ] ans = new int [ 10 ] ;
import java . io . * ; public class GFG { static void divide ( int n , int m ) { System . out . println ( "Remainder = " + ( ( n ) & ( m - 1 ) ) ) ; System . out . println ( "Quotient = " + ( n > > ( int ) ( Math . log ( m ) / Math . log ( 2 ) ) ) ) ; } static public void main ( String [ ] args ) { int n = 43 , m = 8 ; divide ( n , m ) ; } }
import java . io . * ; import java . math . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ;  public class RoughBackup {  static Scanner scn = new Scanner ( System . in ) ;  public static void main ( String [ ] args ) throws Exception { int h = scn . nextInt ( ) ;
import java . io . * ; class Nth { static float CalculateRatio ( float m , float n ) { return ( 2 * m - 1 ) / ( 2 * n - 1 ) ; } } class GFG { public static void main ( String [ ] args ) { float m = 6 , n = 2 ; Nth a = new Nth ( ) ; System . out . println ( a . CalculateRatio ( m , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner lol = new Scanner ( System . in ) ;  int n = lol . nextInt ( ) ; int num8 = 0 ; String nn = lol . next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( '8' == nn . charAt ( i ) ) { num8 ++ ; } } int Fina_res = 0 ; for ( int i = 0 ; i < n / 11 ; i ++ ) { if ( num8 == 0 ) break ; Fina_res ++ ; num8 -- ; } System . out . println ( Fina_res ) ; } }
import java . io . * ; import java . util . * ;    public class A {
class GFG { static void makePolygon ( double a ) { double n = 360 / ( 180 - a ) ; if ( n == ( int ) n ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } public static void main ( String [ ] args ) { double a = 90 ; makePolygon ( a ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static boolean oppositeSigns ( int x , int y ) { return ( ( x ^ y ) < 0 ) ; } public static void main ( String [ ] args ) { int x = 100 , y = - 100 ; if ( oppositeSigns ( x , y ) == true ) System . out . println ( "Signs are opposite" ) ; else System . out . println ( "Signs are not opposite" ) ; } }
import java . util . Stack ; public class p343B { public static void main ( String [ ] args ) { Stack < Character > st = new Stack < > ( ) ; char pre = ' ' ; for ( char c : new java . util . Scanner ( System . in ) . next ( ) . toCharArray ( ) ) { if ( c == pre ) st . pop ( ) ; else st . add ( c ) ; if ( ! st . isEmpty ( ) ) pre = st . peek ( ) ; else pre = ' ' ; } System . out . println ( st . empty ( ) ? "Yes" : "No" ) ; } }
import java . util . * ; class solution { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + ( int ) Math . pow ( n , 2 ) ; } public static void main ( String arr [ ] ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ;   public class dummycodes {  public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . print ( n + " " ) ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { System . out . print ( i + " " ) ; } } }  
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int calculateSum ( int n ) { return n * ( n + 1 ) / 2 + n * ( n + 1 ) * ( 2 * n + 1 ) / 6 ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . print ( "Sum = " + calculateSum ( n ) ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; while ( t -- > 0 ) { int n = scanner . nextInt ( ) ; System . out . println ( n % 2 == 0 ? n / 2 : ( n - 1 ) / 2 ) ; } } }
import java . util . Scanner ;  public class CME { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int q = in . nextInt ( ) ; int n ; while ( q -- != 0 ) { n = in . nextInt ( ) ; if ( n == 2 ) System . out . println ( "2" ) ; else if ( n % 2 == 0 ) System . out . println ( "0" ) ; else System . out . println ( "1" ) ; } } }
import java . util . * ; import java . util . Collections ; public class HelloWorld {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) {
import java . util . * ; public class Practice { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] += sc . nextInt ( ) ; } int ans = n + arr [ 0 ] ; for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { ans += Math . abs ( arr [ i + 1 ] - arr [ i ] ) + 1 ; } System . out . println ( ans ) ; } } 
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 2 ) { System . out . println ( 0 ) ; return ; } if ( n % 2 != 0 ) System . out . println ( ( int ) Math . ceil ( n / 2 ) ) ; else System . out . println ( ( ( n / 2 ) + n ) % ( n + 1 ) ) ;  } }
import java . io . * ; class GFG { static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( "Invalid Input" ) ; return - 1 ; } return ( n + 1 ) / 2 ; } public static void main ( String args [ ] ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . io . * ; class GFG { static int binaryToDecimal ( String n ) { String num = n ; int dec_value = 0 ; int base = 1 ; int len = num . length ( ) ; for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( num . charAt ( i ) == '1' ) dec_value += base ; base = base * 2 ; } return dec_value ; } public static void main ( String [ ] args ) { String num = new String ( "10101001" ) ; System . out . println ( binaryToDecimal ( num ) ) ; } }
class GFG { static void printSeriesSum ( int N ) { double sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i % 2 == 1 ) { sum += ( double ) i / ( i + 1 ) ; } else { sum -= ( double ) i / ( i + 1 ) ; } } System . out . print ( sum + "\n" ) ; } public static void main ( String [ ] args ) { int N = 10 ; printSeriesSum ( N ) ; } }
import java . io . * ; class GFG { static int sumNatural ( int n ) { int sum = ( n * ( n + 1 ) ) ; return sum ; } static int sumEven ( int l , int r ) { return sumNatural ( r / 2 ) - sumNatural ( ( l - 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int l = 2 , r = 5 ; System . out . println ( "Sum of Natural numbers from L to R is " + sumEven ( l , r ) ) ; } }
class GFG { static int calculate ( int x , int k , int m ) { int result = x ; k -- ; while ( k -- > 0 ) { result = ( int ) Math . pow ( result , x ) ; if ( result > m ) result %= m ; } return result ; } public static void main ( String args [ ] ) { int x = 5 , k = 2 , m = 3 ; System . out . println ( calculate ( x , k , m ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
class GFG { static int count ( int n ) { int x = ( n / 3 ) - 1 ; if ( n % 3 > 0 ) { x ++ ; } return ( 4 * x + 4 * n ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( count ( n ) + "\n" ) ; } }
import java . io . * ; class GFG { static int number_of_digits ( int n ) { int i ; int res ; int sum = 0 ; for ( i = 4 , res = 1 ; ; i *= 4 , res ++ ) { sum += i ; if ( sum >= n ) break ; } return res ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( number_of_digits ( n ) ) ; } }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class A632 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; public class TheFibonacciSegment {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . Scanner ; public class Main {
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int count = 0 ; int tot = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int m = sc . nextInt ( ) ; if ( 5 - m >= k ) { count ++ ; } if ( count == 3 ) { tot ++ ; count = 0 ; } } System . out . println ( tot ) ; } } ;
import java . io . * ; import java . math . * ; import java . util . * ; import java . awt . Point ; public class Main {
import java . util . HashSet ; import java . util . Scanner ;  public class fifteen {  public static void main ( String [ ] args ) {
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; if ( a + b <= n + 1 ) { System . out . println ( "White" ) ; } else { System . out . println ( "Black" ) ; } } }
import java . io . * ; class GFG { static int count ( int S [ ] , int m , int n ) { if ( n == 0 ) return 1 ; if ( n < 0 ) return 0 ; if ( m <= 0 && n >= 1 ) return 0 ; return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int m = arr . length ; System . out . println ( count ( arr , m , 4 ) ) ; } }
import java . io . * ; class GFG { static int minimumNumbers ( int n , int s ) { if ( ( s % n ) > 0 ) return s / n + 1 ; else return s / n ; } public static void main ( String [ ] args ) { int n = 5 ; int s = 11 ; System . out . println ( minimumNumbers ( n , s ) ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int P = scan . nextInt ( ) ; long sum = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { String first = i + "" ; StringBuilder last = new StringBuilder ( first ) . reverse ( ) ; sum += Long . parseLong ( first + last ) ; sum = sum % P ; } System . out . println ( sum ) ; } }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class B632 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;
import java . util . * ; public class SortExample { static void mySort ( Integer [ ] arr ) { int n = arr . length ; Arrays . sort ( arr , 0 , n / 2 ) ; Arrays . sort ( arr , n / 2 , n , Collections . reverseOrder ( ) ) ; } public static void main ( String [ ] args ) { Integer [ ] arr = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; mySort ( arr ) ; System . out . printf ( "Modified arr[] : %s" , Arrays . toString ( arr ) ) ; } }
import java . io . * ; public class GFG { static boolean allCharactersSame ( String s ) { int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return false ; return true ; } static public void main ( String [ ] args ) { String s = "aaa" ; if ( allCharactersSame ( s ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . * ;  public class test { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCase = scanner . nextInt ( ) ; for ( int i = 0 ; i < testCase ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a % b == 0 ) { System . out . println ( 0 ) ; } else System . out . println ( b - ( a % b ) ) ; } }  }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int factorial ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static int calculateSeries ( int n ) { return 2 + ( n * n + n - 2 ) * factorial ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( calculateSeries ( n ) ) ; } }
class GFG { static int MAX = 11 ; static boolean isMultipleof5 ( int n ) { char str [ ] = new char [ MAX ] ; int len = str . length ; if ( str [ len - 1 ] == '5' || str [ len - 1 ] == '0' ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . println ( n + " is multiple " + "of 5" ) ; else System . out . println ( n + " is not a " + "multiple of 5" ) ; } }
class GFG { static double increaseInVol ( double l , double b , double h ) { double percentInc = ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) ; percentInc -= 1 ; percentInc *= 100 ; return percentInc ; } public static void main ( String [ ] args ) { double l = 50 , b = 20 , h = 10 ; System . out . println ( increaseInVol ( l , b , h ) + "%" ) ; } }
import java . io . * ; class GFG { static void NicomachuTheorum_sum ( int n ) { int sum = 0 ; for ( int k = 1 ; k <= n ; k ++ ) sum += k * k * k ; int triNo = n * ( n + 1 ) / 2 ; if ( sum == triNo * triNo ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } public static void main ( String [ ] args ) { int n = 5 ; NicomachuTheorum_sum ( n ) ; } }
import java . io . * ; import java . util . * ;  import static java . lang . Math . max ; import static java . lang . Math . min ; import static java . lang . StrictMath . abs ;   public class Solution implements Runnable { public static void main ( String [ ] args ) throws IOException , InterruptedException {
import java . io . * ; public class GFG { static long squareRoot ( int n ) { int x = n ; int y = 1 ; while ( x > y ) { x = ( x + y ) / 2 ; y = n / x ; } return ( long ) x ; } static public void main ( String [ ] args ) { int n = 49 ; System . out . println ( "root of " + n + " is " + squareRoot ( n ) ) ; } }
class GFG { static int countNumbers ( int l , int r ) { return ( ( r / 6 ) - ( l - 1 ) / 6 ) ; } public static void main ( String [ ] args ) { int l = 1000 , r = 6000 ; System . out . println ( countNumbers ( l , r ) ) ; } }
import java . io . * ; class GFG { static int stepRequired ( int n ) { return Integer . bitCount ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 94 ; System . out . println ( stepRequired ( n ) ) ; } }
class GFG { static void findArea ( float a , float b ) { float Area ; Area = ( float ) 3.142 * a * b ; System . out . println ( "Area: " + Area ) ; } public static void main ( String [ ] args ) { float a = 5 , b = 4 ; findArea ( a , b ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
 import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {  Scanner s = new Scanner ( System . in ) ; int c [ ] = new int [ 4 ] ; int m = 0 ; int bus = 0 , tro = 0 ; for ( int i = 0 ; i < c . length ; i ++ ) { c [ i ] = s . nextInt ( ) ; }
import java . io . * ; class GFG { static int evenDecimalValue ( String str , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) { result += ( n - i ) ; } } return result ; } public static void main ( String [ ] args ) { String str = "10010" ; int n = 5 ; System . out . println ( evenDecimalValue ( str , n ) ) ; } }
import java . util . * ; import java . lang . * ; class GFG { public static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int flag = 0 ; while ( n != 1 ) { System . out . print ( n + " " ) ; flag = 0 ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { flag = 1 ; n /= i ; break ; } } if ( flag == 0 ) break ; } System . out . println ( 1 ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class Cv {
import java . util . Scanner ;  public class BitPlusPlus {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int am = scanner . nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < am ; i ++ ) { String line = scanner . next ( ) ; if ( line . contains ( "++" ) ) x ++ ; else x -- ; } System . out . println ( x ) ; }  }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main {  private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . * ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; System . out . println ( x ^ y ) ; } } }
class GFG { static int maxAND ( int L , int R ) { int maximum = L & R ; for ( int i = L ; i < R ; i ++ ) for ( int j = i + 1 ; j <= R ; j ++ ) maximum = Math . max ( maximum , ( i & j ) ) ; return maximum ; } public static void main ( String [ ] args ) { int L = 1 , R = 632 ; System . out . println ( maxAND ( L , R ) ) ; } }
 import java . util . * ; import java . lang . * ;  public class Codeforces {  public static void main ( String [ ] args ) {
class GFG { static int log_a_to_base_b ( int a , int b ) { int rslt = ( a > b - 1 ) ? 1 + log_a_to_base_b ( a / b , b ) : 0 ; return rslt ; } public static void main ( String [ ] args ) { int a = 3 ; int b = 2 ; System . out . println ( log_a_to_base_b ( a , b ) ) ; a = 256 ; b = 4 ; System . out . println ( log_a_to_base_b ( a , b ) ) ; } }
import java . util . * ; class Geeks { static float maxVol ( float P , float A ) { float l = ( float ) ( P - Math . sqrt ( P * P - 24 * A ) ) / 12 ; float V = ( float ) ( l * ( A / 2.0 - l * ( P / 4.0 - l ) ) ) ; return V ; } public static void main ( String args [ ] ) { float P = 20 , A = 16 ; System . out . println ( maxVol ( P , A ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; import java . util . * ; public class kuchBhi { public static void main ( String [ ] args ) throws Throwable {
public class GFG { static int calculateSum ( int n ) { return n * ( n + 1 ) / 2 + ( int ) Math . pow ( ( n * ( n + 1 ) / 2 ) , 2 ) ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( "Sum = " + calculateSum ( n ) ) ; } }
import java . util . Scanner ; public class WorldCup { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int pow = 2 ; int i = 1 ; for ( i = 1 ; Math . abs ( ( ( a - 1 ) / pow ) - ( ( b - 1 ) / pow ) ) > 0 ; i ++ ) { pow *= 2 ; } System . out . println ( pow >= n ? "Final!" : i ) ; } }
import java . util . * ; public class test { public static void main ( String [ ] agrs ) { int n ; String s ; Scanner scan = new Scanner ( System . in ) ; n = scan . nextInt ( ) ; s = scan . nextLine ( ) ;
import java . io . * ; import java . util . * ;  public class practice675a { public static void main ( String [ ] args ) throws Exception {
import java . util . Scanner ;  public class Main { static boolean flag ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; fun ( a , b , c ) ;
class Solution { static int smallestEven ( int n ) { if ( n == 1 ) return 0 ; return Math . pow ( 10 , n - 1 ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( smallestEven ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nextPerfectCube ( int N ) { int nextN = ( int ) Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; } public static void main ( String args [ ] ) { int n = 35 ; System . out . print ( nextPerfectCube ( n ) ) ; } }
import java . util . Scanner ;  public class OmkarAndComp {  public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t > 0 ) { int natasha = s . nextInt ( ) ; for ( int i = natasha ; i > 0 ; i -- ) { System . out . print ( 1 + " " ) ; } System . out . println ( ) ; t -- ; }  }  }
class GFG { static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = result * ar [ i ] ; return result ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = ar . length ; System . out . printf ( "%d" , product ( ar , n ) ) ; } }
import java . util . Scanner ;  public class BinaryPeriod {  public static void main ( String [ ] args ) {
 import java . util . * ;   public class Practise { 
import java . util . * ; import java . lang . * ; public class GfG { public static int counLastDigitK ( int low , int high , int k ) { int count = 0 ; for ( int i = low ; i <= high ; i ++ ) if ( i % 10 == k ) count ++ ; return count ; } public static void main ( String args [ ] ) { int low = 3 , high = 35 , k = 3 ; System . out . println ( counLastDigitK ( low , high , k ) ) ; } }
public class GFG { static void find_array ( int [ ] a , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] += x ; System . out . print ( a [ i ] + " " ) ; x = Math . max ( x , a [ i ] ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 40 , 12 , 62 } ; int n = a . length ; find_array ( a , n ) ; } }
import java . util . Scanner ;  public class _0721NastyaIsPlayingComputerGames {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; System . out . println ( 3 * n + Math . min ( n - k , k - 1 ) ) ; }  }
import java . util . * ; import java . io . * ; import java . math . * ; import java . text . * ;  public class Main { static PrintWriter out ; static Reader in ; public static void main ( String [ ] args ) throws IOException { input_output ( ) ;
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;  public class problem100 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class _0714FoxandNumberGame { static boolean isPrime ( int n ) {
import java . io . * ; class GFG { static int series ( int n ) { return ( 8 * n * n ) + 1 ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . println ( series ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
class GFG { static int XorSum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) result += arr [ i ] ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( XorSum ( arr , n ) ) ; } }
import java . util . Scanner ;  public class problem65 {  public static void main ( String [ ] args ) {
import java . util . Scanner ; public class MammothSGenomeDecoding {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int arr [ ] = new int [ 5 ] ;
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; public static void main ( String [ ] args ) { int t = 1 ;
import com . sun . security . jgss . GSSUtil ; import org . w3c . dom . Node ;  import javax . print . DocFlavor ; import javax . swing . table . AbstractTableModel ; import java . io . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; 
import java . util . Scanner ;  public class CommentaryBoxes { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; long n = in . nextLong ( ) , m = in . nextLong ( ) , d = n / m * m ; int a = in . nextInt ( ) , b = in . nextInt ( ) ;  in . close ( ) ; System . out . println ( n % m == 0 ? 0 : Math . min ( ( d + m - n ) * a , ( n - d ) * b ) ) ; } }
class GFG { static int count ( int n ) { return ( int ) ( 15 * Math . pow ( 16 , n - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( count ( n ) ) ; } }
import java . util . Scanner ; public class p66A { public static void main ( String [ ] args ) { Scanner x = new Scanner ( new Scanner ( System . in ) . next ( ) ) ; String s ; if ( x . hasNextByte ( ) ) s = "byte" ; else if ( x . hasNextShort ( ) ) s = "short" ; else if ( x . hasNextInt ( ) ) s = "int" ; else if ( x . hasNextLong ( ) ) s = "long" ; else s = "BigInteger" ; System . out . println ( s ) ; } }
import java . io . * ; class GFG { static int findTrailingZeros ( int n ) { int count = 0 ; for ( int i = 5 ; n / i >= 1 ; i *= 5 ) count += n / i ; return count ; } public static void main ( String [ ] args ) { int n = 100 ; System . out . println ( "Count of trailing 0s in " + n + "! is " + findTrailingZeros ( n ) ) ; } }
import java . util . Scanner ;  public class A1418 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { long X = in . nextLong ( ) ; long Y = in . nextLong ( ) ; long K = in . nextLong ( ) ; long sticksNeeded = K * ( Y + 1 ) ; long answer = K + ( sticksNeeded - 1 + X - 2 ) / ( X - 1 ) ; System . out . println ( answer ) ; } }  }
class GFG { static int LucasSum ( int N ) { int sum = 0 ; int a = 2 , b = 1 , c ; sum += a ; while ( b <= N ) { sum += b ; c = a + b ; a = b ; b = c ; } return sum ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . println ( LucasSum ( N ) ) ; } }
class GFG { static int binaryToDecimal ( int n ) { int num = n ; int dec_value = 0 ; int base = 1 ; int temp = num ; while ( temp > 0 ) { int last_digit = temp % 10 ; temp = temp / 10 ; dec_value += last_digit * base ; base = base * 2 ; } return dec_value ; } public static void main ( String [ ] args ) { int num = 10101001 ; System . out . println ( binaryToDecimal ( num ) ) ; } }
import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static long centered_heptagonal_num ( long n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { long n = 5 ; System . out . println ( n + "th Centered " + "heptagonal number : " + centered_heptagonal_num ( n ) ) ; } }
import java . io . * ; class GFG { static int unitDigitXRaisedY ( int x , int y ) { int res = 1 ; for ( int i = 0 ; i < y ; i ++ ) res = ( res * x ) % 10 ; return res ; } public static void main ( String args [ ] ) throws IOException { System . out . println ( unitDigitXRaisedY ( 4 , 2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String n = sc . nextLine ( ) ; String s = sc . nextLine ( ) ; System . out . println ( s . length ( ) + 1 ) ; } }
import java . io . * ; class GFG { static int xorPairSum ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum = sum ^ ( ar [ i ] + ar [ j ] ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int n = arr . length ; System . out . print ( xorPairSum ( arr , n ) ) ; } }
import java . util . * ;  public class BogoSort {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { System . out . print ( a [ i ] + " " ) ; } } }  }
class Solution { public int [ ] xorQueries ( int [ ] arr , int [ ] [ ] queries ) { int [ ] res = new int [ queries . length ] , q ; for ( int i = 1 ; i < arr . length ; i ++ ) arr [ i ] ^= arr [ i - 1 ] ; for ( int i = 0 ; i < queries . length ; i ++ ) { q = queries [ i ] ; res [ i ] = q [ 0 ] > 0 ? arr [ q [ 0 ] - 1 ] ^ arr [ q [ 1 ] ] : arr [ q [ 1 ] ] ; } return res ; } }
import java . io . * ; class GFG { static int bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n > > ( k - 1 ) ; return ( new_num & 1 ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 2 ; if ( bitAtGivenPosSetOrUnset ( n , k ) == 1 ) System . out . println ( "Set" ) ; else System . out . println ( "Unset" ) ; } }
import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ; 
import java . util . * ; import java . util . Map . Entry ;   import java . io . * ; import java . math . * ; import static java . util . stream . Collectors . * ; import static java . util . Map . Entry . * ;  public class Hey { public static void main ( String [ ] args ) throws IOException { final long mod = ( long ) ( 1e9 + 7 ) ; Reader s = new Reader ( ) ; PrintWriter pt = new PrintWriter ( System . out ) ;
import java . util . Scanner ;  public class A492 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) , i = 1 , sum = 0 ; while ( n > sum ) { sum += i ; n = n - sum ; if ( n < 0 ) break ; i ++ ; } System . out . println ( i - 1 ) ; } }
class OddPosition { public static long getFinalElement ( long n ) { long finalNum ; for ( finalNum = 2 ; finalNum * 2 <= n ; finalNum *= 2 ) ; return finalNum ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( getFinalElement ( N ) ) ; } }
import java . util . * ; class GFG { static int findNthNumber ( int A , int B , int N ) { int sum = 0 ; for ( int i = 2 ; i < N ; i ++ ) { sum = A + B ; A = B ; B = sum ; } return sum ; } public static void main ( String [ ] args ) { int A = 5 , B = 7 , N = 10 ; System . out . println ( findNthNumber ( A , B , N ) ) ; } }
import java . util . * ;  public class CF10 { public static void main ( String [ ] args ) {
class GFG { static int sumNatural ( int n ) { int sum = ( n * ( n + 1 ) ) / 2 ; return sum ; } static int suminRange ( int l , int r ) { return sumNatural ( r ) - sumNatural ( l - 1 ) ; } public static void main ( String [ ] args ) { int l = 2 , r = 5 ; System . out . println ( "Sum of Natural numbers from L to R is " + suminRange ( l , r ) ) ; } }
import java . util . * ; public class Roadside_Trees {  public static void main ( String [ ] args ) {
import java . util . * ; 
import java . io . * ; class GFG { static int getMaxNum ( int a , int b , int c ) { if ( b % c == 0 ) return b ; int x = ( ( b / c ) * c ) ; if ( x >= a && x <= b ) return x ; else return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 10 , c = 3 ; System . out . println ( getMaxNum ( a , b , c ) ) ; } }
import java . util . * ; import java . lang . * ; class GFG { public static int sumOfSeries ( int n ) { int x ; if ( n % 2 == 0 ) x = ( n / 2 ) * ( n + 1 ) ; else x = ( ( n + 1 ) / 2 ) * n ; return x * x ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( sumOfSeries ( n ) ) ; } }
class GFG { static float sumOfAP ( float a , float d , float n ) { float sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { float n = 20 ; float a = 2.5f , d = 1.5f ; System . out . print ( sumOfAP ( a , d , n ) ) ; } }
class PellNumber { public static int pell ( int n ) { if ( n <= 2 ) return n ; return 2 * pell ( n - 1 ) + pell ( n - 2 ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } }
import java . io . * ; class GFG { static void printMultiples ( int n ) { int unit_digit = n % 10 ; if ( unit_digit == 0 ) unit_digit = 10 ; for ( int i = unit_digit ; i <= n ; i += unit_digit ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { int n = 39 ; printMultiples ( n ) ; } }
class GFG { static long calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; while ( k > 0 ) { if ( ( k & 1 ) == 1 ) res = ( res * n ) % MOD ; k = k / 2 ; n = ( n * n ) % MOD ; } return res ; } public static void main ( String [ ] args ) { int n = 4 , k = 3 ; System . out . print ( calculateSum ( n , k ) ) ; } } ;
import java . util . Scanner ;  public class Draw { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , x = 0 , y = 0 , o = 1 ;  for ( i = 0 ; i < n ; i ++ ) { int a = in . nextInt ( ) , b = in . nextInt ( ) ; o += Math . max ( 0 , Math . min ( a , b ) - Math . max ( x , y ) + ( x != y ? 1 : 0 ) ) ; x = a ; y = b ; } in . close ( ) ; System . out . println ( o ) ; } }
import java . io . * ; import java . util . * ; class GFG { static int product ( int x , int y ) { if ( x < y ) return product ( y , x ) ; else if ( y != 0 ) return ( x + product ( x , y - 1 ) ) ; else return 0 ; } public static void main ( String [ ] args ) { int x = 5 , y = 2 ; System . out . println ( product ( x , y ) ) ; } }
import java . util . Scanner ;  public class nineteen {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static void printTwoSetBitNums ( int n ) { int x = 1 ; while ( n > 0 ) { int y = 0 ; while ( y < x ) { System . out . print ( ( ( 1 << x ) + ( 1 << y ) ) + " " ) ; n -- ; if ( n == 0 ) return ; y ++ ; } x ++ ; } } public static void main ( String [ ] args ) { int n = 4 ; printTwoSetBitNums ( n ) ; } }
class GFG { static int setKthBit ( int n , int k ) { return ( ( 1 << k ) | n ) ; } public static void main ( String arg [ ] ) { int n = 10 , k = 2 ; System . out . print ( "Kth bit set number = " + setKthBit ( n , k ) ) ; } }
import java . io . * ; class GFG { static int summation ( int n ) { int sum = 0 , j = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + j ; j = ( j * 10 ) + 1 ; } return sum ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . println ( summation ( n ) ) ; } }
import java . util . * ; import java . util . Arrays ; public class Finding_Sasuke {  public static void main ( String [ ] args ) {
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ;  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static String areAllBitsSet ( int n ) { if ( n == 0 ) return "No" ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) return "No" ; n = n > > 1 ; } return "Yes" ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( areAllBitsSet ( n ) ) ; } }
import java . io . * ; import java . math . * ; class GFG { static int countDigits ( int a , int b ) { int count = 0 ; int p = Math . abs ( a * b ) ; if ( p == 0 ) return 1 ; while ( p > 0 ) { count ++ ; p = p / 10 ; } return count ; } public static void main ( String args [ ] ) { int a = 33 ; int b = - 24 ; System . out . println ( "Number of digits = " + countDigits ( a , b ) ) ; } }
import java . util . Scanner ;  public class Verse_Pattern { static Scanner scanner = new Scanner ( System . in ) ; static int n ; static boolean valid ( String s , int n ) { int count = 0 ;
import java . util . * ;  public class JavaApplication116 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long n , m , a = 1 , count = 0 ; n = in . nextLong ( ) ; m = in . nextLong ( ) ; for ( int i = 0 ; i < m ; i ++ ) { long b = in . nextLong ( ) ; if ( a <= b ) count += b - a ; else count += ( n - a ) + b ; a = b ; } System . out . println ( count ) ; } }
import java . util . Arrays ; class GFG { static int minNumber ( int a [ ] , int n , int x ) { Arrays . sort ( a ) ; int k ; for ( k = 0 ; a [ ( n ) / 2 ] != x ; k ++ ) { a [ n ++ ] = x ; Arrays . sort ( a ) ; } return k ; } public static void main ( String [ ] args ) { int x = 10 ; int a [ ] = { 10 , 20 , 30 } ; int n = 3 ; System . out . println ( minNumber ( a , n - 1 , x ) ) ; } }
import java . util . Scanner ; public class cf { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , cnt = 1 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = n - 1 ; i > 0 ; i -- ) { if ( a [ i - 1 ] < a [ i ] ) cnt ++ ; else break ; } System . out . println ( n - cnt ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; 
import javax . swing . plaf . IconUIResource ; import java . util . * ; 
import java . util . * ;  public class CodeForces922A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; y -- ; x -= y ; if ( x % 2 == 0 && x >= 0 && y > 0 || y == 0 && x == 0 ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } }
class GFG { static int factorial ( int start , int end ) { int res = 1 ; for ( int i = start ; i <= end ; i ++ ) res *= i ; return res ; } static int sumofsquare ( int n ) { return factorial ( n + 1 , 2 * n ) / factorial ( 1 , n ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( sumofsquare ( n ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Main { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . Scanner ;  public class AgainTwentyFive { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String n = scanner . nextLine ( ) ; System . out . println ( 25 ) ; 
class GFG { static int minXOR ( int arr [ ] , int n ) { int min_xor = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j ] ) ; return min_xor ; } public static void main ( String args [ ] ) { int arr [ ] = { 9 , 5 , 3 } ; int n = arr . length ; System . out . println ( minXOR ( arr , n ) ) ; } }
 import java . util . * ; import java . io . * ; import java . math . * ;  public class Main { static FastReader sc = new FastReader ( ) ; static int dp [ ] [ ] ;
import java . util . * ; import java . util . regex . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; System . out . println ( ( 3 * n ) / 2 ) ; } }
class GFG { static void printFloydTriangle ( int n ) { int i , j , val = 1 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { System . out . print ( val + " " ) ; val ++ ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { printFloydTriangle ( 6 ) ; } }
import java . io . * ; class GFG { static long doublefactorial ( long n ) { if ( n == 0 || n == 1 ) return 1 ; return n * doublefactorial ( n - 2 ) ; } static public void main ( String [ ] args ) { System . out . println ( "Double factorial" + " is " + doublefactorial ( 5 ) ) ; } }
import java . util . Scanner ;   public class PostcardsAndPhotos { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String s = input . next ( ) ; int count = 1 ; char c = s . charAt ( 0 ) ; int temp = 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != c || temp == 5 ) { count ++ ; temp = 1 ; c = s . charAt ( i ) ; } else temp ++ ; } System . out . println ( count ) ; } }
import java . util . Scanner ;  public class B820 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; double alpha = Math . toRadians ( in . nextInt ( ) ) ; double minDiff = Double . POSITIVE_INFINITY ; int [ ] answer = null ;
import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; public static void main ( String args [ ] ) throws IOException { int t = 1 ;
import java . io . * ; class GFG { static long evenPowerSum ( int n ) { return ( 8 * n * ( n + 1 ) * ( 2 * n + 1 ) * ( 3 * n * n + 3 * n - 1 ) ) / 15 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( evenPowerSum ( n ) ) ; } }
class GFG { static double sumOfSeries ( int n ) { double res = 0.0 ; int sum = 0 , prod = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; res += ( ( double ) sum / prod ) ; } return res ; } public static void main ( String arg [ ] ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . util . * ; class GFG { static int minDiff ( int n , int x , int A [ ] ) { int mn = A [ 0 ] , mx = A [ 0 ] ; for ( int i = 0 ; i < n ; ++ i ) { mn = Math . min ( mn , A [ i ] ) ; mx = Math . max ( mx , A [ i ] ) ; } return Math . max ( 0 , mx - mn - 2 * x ) ; } public static void main ( String [ ] args ) { int n = 3 , x = 3 ; int A [ ] = { 1 , 3 , 6 } ; System . out . println ( minDiff ( n , x , A ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; public class HelloWorld { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n >= 10 ) { n = sum ( n ) ; } System . out . println ( n ) ; } static int sum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; } }
public final class p072 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p072 ( ) . run ( ) ) ; } private static final int LIMIT = Library . pow ( 10 , 6 ) ; public String run ( ) { long sum = 0 ; int [ ] totients = Library . listTotients ( LIMIT ) ; for ( int i = 2 ; i < totients . length ; i ++ ) sum += totients [ i ] ; return Long . toString ( sum ) ; } }
import java . util . * ; class Odd { public static int oddSum ( int n ) { int sum = 0 , curr = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += curr ; curr += 2 ; } return sum ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( " Sum of first " + n + " Odd Numbers is: " + oddSum ( n ) ) ; } }
import com . sun . security . jgss . GSSUtil ;  import javax . swing . table . AbstractTableModel ; import java . io . * ; import java . util . * ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; 
import java . io . * ; import java . util . * ; class GFG { static int xorEqualsOrCount ( int N ) { int count = 0 ; int bit ; while ( N > 0 ) { bit = N % 2 ; if ( bit == 0 ) count ++ ; N = N / 2 ; } return ( int ) Math . pow ( 2 , count ) ; } public static void main ( String args [ ] ) { int N = 7 ; System . out . println ( xorEqualsOrCount ( N ) ) ; } }
import java . lang . * ; class GFG { static int findKHCF ( int x , int y , int k ) { int small = Math . min ( x , y ) ; int count = 1 ; for ( int i = 2 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) count ++ ; if ( count == k ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int x = 4 , y = 24 , k = 3 ; System . out . print ( findKHCF ( x , y , k ) ) ; } }
import java . util . * ; class solution { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 2 * n + 2 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; class GFG { static int Centered_Trigunal_num ( int n ) { return ( 3 * n * n + 3 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( Centered_Trigunal_num ( n ) ) ; n = 12 ; System . out . println ( Centered_Trigunal_num ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Love_A {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  String s = in . nextLine ( ) ; int sa = s . replaceAll ( "[^a]" , "" ) . length ( ) ;  if ( sa <= s . length ( ) / 2 ) { System . out . println ( 2 * sa - 1 ) ; } else { System . out . println ( s . length ( ) ) ; } }  }
public class GFG { static int countOddPair ( int A [ ] , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ( A [ i ] % 2 != 1 ) ) { count ++ ; } } int evenPairCount = count * ( count - 1 ) / 2 ; int totPairs = N * ( N - 1 ) / 2 ; return totPairs - evenPairCount ; } public static void main ( String [ ] args ) { int A [ ] = { 5 , 6 , 2 , 8 } ; int N = A . length ; System . out . println ( countOddPair ( A , N ) ) ; } }
class GFG { static int count ( int n ) { int cnt = 0 ; int p = 1 ; while ( p <= n ) { cnt ++ ; p *= 2 ; } return cnt ; } public static void main ( String args [ ] ) { int n = 7 ; System . out . print ( count ( n ) ) ; } }
import java . util . Scanner ;  public class Codeforces_932A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; for ( int i = 0 ; i < s . length ; i ++ ) { System . out . printf ( "%c" , s [ i ] ) ; } for ( int i = s . length - 1 ; i >= 0 ; i -- ) { System . out . printf ( "%c" , s [ i ] ) ; } } }
import java . util . * ; import java . lang . * ; class GFG { public static int summation ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( summation ( n ) ) ; } }
public class Solution { public int subarraySum ( int [ ] nums , int k ) { int count = 0 , sum = 0 ; HashMap < Integer , Integer > map = new HashMap < > ( ) ; map . put ( 0 , 1 ) ; for ( int i = 0 ; i < nums . length ; i ++ ) { sum += nums [ i ] ; if ( map . containsKey ( sum - k ) ) count += map . get ( sum - k ) ; map . put ( sum , map . getOrDefault ( sum , 0 ) + 1 ) ; } return count ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int w = sc . nextInt ( ) ; if ( w % 2 == 0 && w != 2 ) out . println ( "YES" ) ; else out . println ( "NO" ) ;
import java . lang . * ; import java . util . * ; class GFG { public int countPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) ; } public static void main ( String args [ ] ) { GFG g = new GFG ( ) ; int n = 5 , m = 5 ; System . out . println ( g . countPaths ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( "" ) ; while ( n > 3 ) { sb . append ( "1" ) ; n -= 2 ; } String s = sb . toString ( ) ; if ( n == 3 ) s = '7' + s ; if ( n == 2 ) s = s + '1' ; System . out . println ( s ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; 
import java . io . * ; class GFG { static float area ( float r ) { return ( float ) ( ( 0.5 ) * ( 3.14 ) * ( r * r ) ) ; } static float perimeter ( float r ) { return ( float ) ( ( 3.14 ) * ( r ) ) ; } public static void main ( String [ ] args ) { float r = 10 ; System . out . println ( "The Area of Semicircle: " + area ( r ) ) ; System . out . println ( "The Perimeter of Semicircle:" + + perimeter ( r ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import javax . swing . plaf . IconUIResource ; import java . awt . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . * ; import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ;
import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;   public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ;
import java . util . Scanner ;  public class PythogoreanTriplets { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;  int n = scan . nextInt ( ) ; int count = 0 ;  for ( int a = 2 ; a < n ; a ++ ) { for ( int b = 1 ; b < a ; b ++ ) { double c = Math . sqrt ( a * a + b * b ) ; if ( c - ( int ) c == 0.0 && c <= n ) count ++ ; } } System . out . println ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ;      public class Main { static double binarySearch ( int arr [ ] , int l , int r , double x ) {  if ( r >= l ) { int mid = l ;  if ( ( arr [ mid ] - arr [ mid - 1 ] ) / 2.0 > x ) { x = ( arr [ mid ] - arr [ mid - 1 ] ) / 2.0 ;  }  return binarySearch ( arr , mid + 1 , r , x ) ; } 
import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int N = 59173 ; if ( isDivisible ( N ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class problem69 {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ;  public class Practice { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) {
class GFG { static int solve ( double M , double N , double s ) { int ans = ( ( int ) ( Math . ceil ( M / s ) ) * ( int ) ( Math . ceil ( N / s ) ) ) ; return ans ; } public static void main ( String [ ] args ) { double N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } }
import java . io . * ; class GFG { static double Area ( int b1 , int b2 , int h ) { return ( ( b1 + b2 ) / 2 ) * h ; } public static void main ( String [ ] args ) { int base1 = 8 , base2 = 10 , height = 6 ; double area = Area ( base1 , base2 , height ) ; System . out . println ( "Area is: " + area ) ; } }
import java . io . * ; class GFG { static int sum_even_and_even_index ( int arr [ ] , int n ) { int i = 0 , sum = 0 ; for ( i = 0 ; i < n ; i += 2 ) { if ( arr [ i ] % 2 == 0 ) { sum += arr [ i ] ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 12 , 1 , 18 , 8 } ; int n = arr . length ; System . out . println ( "Sum of even numbers" + " at even indices is " + + sum_even_and_even_index ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int calculateSum ( int n ) { return ( int ) ( ( 2 * Math . pow ( ( n * ( n + 1 ) / 2 ) , 2 ) ) ) + ( ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( "Sum = " + calculateSum ( n ) ) ; } }
import static java . lang . Math . pow ; class Test { static int sumOfTermsInNthRow ( int n ) { int sum = ( int ) ( n * ( 2 * pow ( n , 2 ) + 1 ) ) ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( "Sum of all the terms in nth row = " + sumOfTermsInNthRow ( n ) ) ; } }
import java . util . Scanner ;  public class A1325 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = t ; i > 0 ; i -- ) { int x = scanner . nextInt ( ) ; System . out . println ( 1 + " " + ( x - 1 ) ) ; } } }
import java . io . * ; import java . util . * ;  public class test {
import java . util . Scanner ; public class DigestThread { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int num1 , num2 ; num1 = sc . nextInt ( ) ; num2 = sc . nextInt ( ) ; if ( num1 * 2 > num2 ) System . out . println ( "-1 -1" ) ; else System . out . println ( num1 + " " + num1 * 2 ) ; } } }
import java . util . * ; import java . lang . * ; class GFG { static int N = 3 ; static double calcDeterminant ( int arr [ ] ) { double determinant = 0 ; for ( int i = 0 ; i < N ; i ++ ) { determinant += Math . pow ( arr [ i ] , 3 ) ; } determinant -= 3 * arr [ 0 ] * arr [ 1 ] * arr [ 2 ] ; return determinant ; } static public void main ( String args [ ] ) { int [ ] arr = { 4 , 5 , 3 } ; System . out . println ( calcDeterminant ( arr ) ) ; } }
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; if ( a [ n - 1 ] > 25 ) { sum = a [ n - 1 ] - 25 ; } System . out . println ( sum ) ; } }
import java . util . * ; public class a1 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int l = 0 ; int c = 0 ; String s ; while ( in . hasNextLine ( ) ) { s = in . nextLine ( ) ; if ( s . charAt ( 0 ) == '+' ) c ++ ; else if ( s . charAt ( 0 ) == '-' ) c -- ; else { l += c * ( s . length ( ) - s . indexOf ( ':' ) - 1 ) ; } } System . out . println ( l ) ; } }
class GFG { static boolean isMultipleof5 ( int n ) { while ( n > 0 ) n = n - 5 ; if ( n == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 19 ; if ( isMultipleof5 ( n ) == true ) System . out . printf ( "%d is multiple of 5\n" , n ) ; else System . out . printf ( "%d is not a multiple of 5\n" , n ) ; } }
class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ; class GFG { static int make_permutation ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += Math . abs ( i + 1 - arr [ i ] ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 8 , 1 , 1 } ; int n = arr . length ; System . out . print ( make_permutation ( arr , n ) ) ; } }
class GFG { static void last_digit ( int X , int Y ) { System . out . print ( X % Y ) ; } public static void main ( String [ ] args ) { int X = 55 , Y = 3 ; last_digit ( X , Y ) ; } }
import java . util . * ; public class SlightlyDecreasingPermutations {  public static void main ( String [ ] args ) {
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ; public class test { public static void main ( String [ ] args ) throws java . lang . Exception {
public final class p015 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p015 ( ) . run ( ) ) ; } public String run ( ) { return Library . binomial ( 40 , 20 ) . toString ( ) ; } }
public class GFG { static int sum ( int x , int y , int n ) { int sum1 = ( int ) ( ( Math . pow ( x , 2 ) * ( Math . pow ( x , 2 * n ) - 1 ) ) / ( Math . pow ( x , 2 ) - 1 ) ) ; int sum2 = ( int ) ( ( x * y * ( Math . pow ( x , n ) * Math . pow ( y , n ) - 1 ) ) / ( x * y - 1 ) ) ; return sum1 + sum2 ; } public static void main ( String args [ ] ) { int x = 2 , y = 2 , n = 2 ; System . out . println ( sum ( x , y , n ) ) ; } }
import java . util . Scanner ; public class CF800 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; boolean y = false ; int [ ] k = new int [ x ] ; for ( int i = 0 ; i < x ; i ++ ) { k [ i ] = input . nextInt ( ) ; if ( k [ i ] == 1 ) { y = true ; } } if ( y == true ) { System . out . println ( "Hard" ) ; } else { System . out . println ( "Easy" ) ; } } }
import java . util . * ; import java . io . * ; public class A { public static void main ( String ar [ ] ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int arr [ ] = new int [ n ] ; String str [ ] = br . readLine ( ) . split ( " " ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = Integer . parseInt ( str [ i ] ) ; sort ( arr , n ) ;
import java . io . * ; class GFG { public static void main ( String [ ] args ) { System . out . println ( Integer . bitCount ( 4 ) ) ; System . out . println ( Integer . bitCount ( 15 ) ) ; } }
import java . util . * ;  public class CodeForces1013A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = input . nextInt ( ) ; sum += x ; } for ( int i = 0 ; i < n ; i ++ ) { sum -= input . nextInt ( ) ; } if ( sum < 0 ) { System . out . println ( "No" ) ; } else { System . out . println ( "Yes" ) ; } } }
import java . util . Scanner ;  public class _0844InitialBet {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int c3 = sc . nextInt ( ) ; int c4 = sc . nextInt ( ) ; int c5 = sc . nextInt ( ) ; int sum = c1 + c2 + c3 + c4 + c5 ; if ( sum % 5 == 0 && sum != 0 ) { System . out . println ( sum / 5 ) ; } else { System . out . println ( - 1 ) ; } }  }
import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long s = n * ( n + 1 ) / 2 ; if ( s % 2 == 0 ) System . out . println ( 0 ) ; else System . out . println ( 1 ) ; } }
import java . util . * ; class GFG { static int findAnswer ( int n , int [ ] arr ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n / 2 ; ++ i ) { sum += ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ; } return sum ; } public static void main ( String [ ] args ) { int [ ] arr = { 53 , 28 , 143 , 5 } ; int n = arr . length ; System . out . println ( findAnswer ( n , arr ) ) ; } }
public class GFG { public static double floatError ( double no ) { double sum = 0.0 ; for ( int i = 0 ; i < 10 ; i ++ ) { sum = sum + no ; } return sum ; } public static void main ( String [ ] args ) { System . out . println ( floatError ( 0.1 ) ) ; } }
import java . io . * ; class GFG { static boolean sameLength ( int A , int B ) { while ( ( A > 0 ) && ( B > 0 ) ) { A = A / 10 ; B = B / 10 ; } if ( ( A == 0 ) && ( B == 0 ) ) return true ; return false ; } public static void main ( String [ ] args ) { int A = 21 , B = 1 ; if ( sameLength ( A , B ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . * ; class solution { static void printExpansion ( String str ) { String suff = "" ; for ( int i = str . length ( ) - 1 ; i >= 0 ; i -- ) { suff = suff + str . charAt ( i ) ; System . out . print ( suff ) ; } } public static void main ( String args [ ] ) { String str = "geeks" ; printExpansion ( str ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {
class GFG { static int xorOfArray ( int arr [ ] , int n ) { int xor_arr = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xor_arr = xor_arr ^ arr [ i ] ; } return xor_arr ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 12 , 13 , 15 } ; int n = arr . length ; System . out . println ( xorOfArray ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ; import java . lang . * ;  public class pracs { public static int dp [ ] ; public static int [ ] arr ; public static int MOD = ( int ) ( 1e9 + 7 ) ; public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; int n = in . nextInt ( ) ; arr = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = in . nextInt ( ) ; dp = new int [ n + 2 ] ;
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( int ) Math . max ( Math . pow ( Math . max ( a , b ) , 2 ) , Math . pow ( 2 * Math . min ( a , b ) , 2 ) ) ) ; } } } ;
class GFG { static boolean isPower ( int x , int y ) { int res1 = ( int ) Math . log ( y ) / ( int ) Math . log ( x ) ; double res2 = Math . log ( y ) / Math . log ( x ) ; return ( res1 == res2 ) ; } public static void main ( String args [ ] ) { if ( isPower ( 27 , 729 ) ) System . out . println ( "1" ) ; else System . out . println ( "0" ) ; } }
class GFG { static boolean isPalindrome ( int n ) { if ( n % 11 == 0 ) { return true ; } return false ; } public static void main ( String [ ] args ) { System . out . println ( isPalindrome ( 123321 ) ? "Palindrome" : "Not Palindrome" ) ; } }
class Geeks { static int countways ( int n ) { if ( n == 1 ) return 0 ; else if ( n % 2 == 0 ) return 1 + countways ( n / 2 ) ; else return 1 + Math . min ( countways ( n - 1 ) , countways ( n + 1 ) ) ; } public static void main ( String args [ ] ) { int n = 15 ; System . out . println ( countways ( n ) ) ; } }
class GFG { static int highestPowerof2 ( int n ) { int res = 0 ; for ( int i = n ; i >= 1 ; i -- ) { if ( ( i & ( i - 1 ) ) == 0 ) { res = i ; break ; } } return res ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( highestPowerof2 ( n ) ) ; } }
import java . util . * ; public class AppleMan {  public static void main ( String [ ] args ) {
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int ans = 0 ; for ( int a = 0 ; a * a <= n && a <= m ; a ++ ) { int b = n - a * a ; if ( a + ( b * b ) == m ) { ans ++ ; } } System . out . print ( ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int T = 1 ;
import java . util . * ; public class Output { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; System . out . println ( "YES" ) ; for ( long i = a ; i < b ; i += 2 ) { System . out . println ( Long . toString ( i ) + " " + Long . toString ( i + 1 ) ) ; }  } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; if ( t <= k ) { System . out . println ( t ) ; } else if ( t >= k && t <= n ) { System . out . println ( k ) ; } else { int d = n + k - t ; System . out . println ( d ) ; } } }
 import java . util . * ;  public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char p = 'a' ; int c = 1 ; StringBuilder h = new StringBuilder ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( c > 2 ) { if ( p == 'a' ) p = 'b' ; else p = 'a' ; c = 1 ; } h . append ( p ) ;
import java . util . * ; class GFG { public static int findMaximumPieces ( int n ) { int x = n / 2 ; return ( ( x + 1 ) * ( n - x + 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( "Max number of pieces for n = " + n + " is " + findMaximumPieces ( 3 ) ) ; } }
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = s . charAt ( 0 ) - 96 ; int r = s . charAt ( 1 ) - 48 ;
import java . io . * ; class GFG { static void findValues ( int a , int b ) { if ( ( a - b ) % 2 == 1 ) { System . out . println ( "-1" ) ; return ; } System . out . println ( ( ( a - b ) / 2 ) + " " + ( ( a + b ) / 2 ) ) ; } public static void main ( String [ ] args ) { int a = 12 , b = 8 ; findValues ( a , b ) ; } }
class GFG { static int frequencyDigits ( int n , int d ) { int c = 0 ; while ( n > 0 ) { if ( n % 10 == d ) c ++ ; n = n / 10 ; } return c ; } public static void main ( String args [ ] ) { int N = 1122322 ; int D = 2 ; System . out . println ( frequencyDigits ( N , D ) ) ; } }
class GFG { static float rectanglearea ( float r ) { if ( r < 0 ) return - 1 ; float a = r * r ; return a ; } public static void main ( String [ ] args ) { float r = 5 ; System . out . println ( ( int ) rectanglearea ( r ) ) ; } }
import java . io . * ; import java . util . * ; public class MyClass { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s [ ] = br . readLine ( ) . split ( " " ) ;
class GFG { static float kPresentProbability ( int a [ ] , int n , int k ) { float count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == k ) count ++ ; return count / n ; } public static void main ( String [ ] args ) { int A [ ] = { 4 , 7 , 2 , 0 , 8 , 7 , 5 } ; int K = 2 ; int N = A . length ; double n = kPresentProbability ( A , N , K ) ; double p = ( double ) Math . round ( n * 100 ) / 100 ; System . out . println ( p ) ; } }
import java . util . Arrays ; class GFG { static int maxLen ( int [ ] arr , int n ) { int min_val = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int freq = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_val ) freq ++ ; } return freq ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 1 } ; int n = arr . length ; System . out . println ( maxLen ( arr , n ) ) ; } }
import java . io . * ; class GFG { static int countSolutions ( int a ) { int count = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }
public int [ ] sumZero ( int n ) { int [ ] res = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { res [ i ] = i ; res [ 0 ] -= i ; } return res ; }
import java . util . Scanner ;  public class MagicNumbers { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . next ( ) ; String s3 = s . replace ( "144" , "" ) ; String s2 = s3 . replace ( "14" , "" ) ; String s1 = s2 . replace ( "1" , "" ) ;
import java . util . Scanner ;  public class NewMain {  public static void main ( String [ ] args ) {
class GFG { static int countSquares ( int n ) { return ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( "Count of squares is " + countSquares ( n ) ) ; } }
import java . lang . * ; class GFG { static int findTerm ( int n ) { if ( n == 1 ) return n ; else { int term = 7 ; for ( int i = 2 ; i <= n ; i ++ ) term = term * 2 + ( i - 1 ) ; return term ; } } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( findTerm ( n ) ) ; } }
public class GFG { static int maxPrefix ( String s , String t ) { int count = 0 ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { if ( count == s . length ( ) ) break ; if ( t . charAt ( i ) == s . charAt ( count ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { String S = "digger" ; String T = "biggerdiagram" ; System . out . println ( maxPrefix ( S , T ) ) ; } }
class GFG { static boolean isEven ( int n ) { return ( ( n & 1 ) != 1 ) ; } public static void main ( String [ ] args ) { int n = 101 ; System . out . print ( isEven ( n ) == true ? "Even" : "Odd" ) ; } }
import java . util . * ;  public class Test { public static void main ( String [ ] args ) {  Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int t = n % 10 ; System . out . println ( ( t >= 5 ) ? n + ( 10 - t ) : n - t ) ; } }
import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_inscribed ( double P , double B , double H ) { return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double P = 3 , B = 4 , H = 5 ; System . out . println ( area_inscribed ( P , B , H ) ) ; } }
import java . io . * ; class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }
import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;  public class pblm3 { static int a ; static int b ; static int k ; static HashMap < Integer , Long > map ; public static long steps ( int n ) {
class GFG { static int countStrings ( int n ) { int a [ ] = new int [ n ] , b [ ] = new int [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ; } public static void main ( String args [ ] ) { System . out . println ( countStrings ( 5 ) ) ; } }
import java . io . * ; class GFG { public static int countSetBits ( int n ) { if ( n == 0 ) return 0 ; else return ( n & 1 ) + countSetBits ( n > > 1 ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( countSetBits ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static int mod = ( int ) Math . pow ( 10 , 9 ) + 7 ;
import java . io . * ; import java . util . * ;  public class B { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int t = 1 ;
import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;  public class Welcomejava {  public static void main ( String [ ] args ) {
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; System . out . println ( Math . max ( 0 , a [ 2 ] - a [ 1 ] - a [ 0 ] + 1 ) ) ;  } }
class GFG { static int countUnsetBits ( int n ) { int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int temp = i ; while ( temp > 0 ) { if ( temp % 2 == 0 ) { cnt = cnt + 1 ; } temp = temp / 2 ; } } return cnt ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countUnsetBits ( n ) ) ; } }
  import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;   public class file {  
import java . io . * ; import java . util . * ;  public class practice807b { public static void main ( String [ ] args ) throws Exception {
class Rectangle { static int count ( int N ) { int a = 0 ; a = ( N * ( N + 1 ) ) / 2 ; return a ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . print ( count ( n ) ) ; } }
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
class GFG { static int Maxsum ( int c1 , int c2 , int c3 , int c4 ) { int sum = 0 ; int two34 = Math . min ( c2 , Math . min ( c3 , c4 ) ) ; sum = two34 * 234 ; c2 -= two34 ; sum += Math . min ( c2 , c1 ) * 12 ; return sum ; } public static void main ( String [ ] args ) { int c1 = 5 , c2 = 2 , c3 = 3 , c4 = 4 ; System . out . println ( Maxsum ( c1 , c2 , c3 , c4 ) ) ; } }
import java . util . * ; public class Sleuth {  public static void main ( String [ ] args ) {
class GFG { static void findSetBits ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) System . out . print ( Integer . bitCount ( i ) + " " ) ; } public static void main ( String [ ] args ) { int n = 5 ; findSetBits ( n ) ; } }
public void push ( int new_data ) { Node new_Node = new Node ( new_data ) ; new_Node . next = head ; new_Node . prev = null ; if ( head != null ) head . prev = new_Node ; head = new_Node ; }
public class DLL { Node head ; class Node { int data ; Node prev ; Node next ; Node ( int d ) { data = d ; } } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int countSubStr ( String str , int len ) { int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += ( i + 1 ) ; } return ans ; } public static void main ( String [ ] args ) { String str = "10010" ; int len = str . length ( ) ; System . out . println ( countSubStr ( str , len ) ) ; } }
import java . io . * ; class GFG { static int squaresum ( int n ) { return ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } public static void main ( String args [ ] ) throws IOException { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static void printNumber ( int n ) { int count [ ] = new int [ 10 ] ; while ( n > 0 ) { count [ n % 10 ] ++ ; n /= 10 ; } for ( int i = 1 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < count [ i ] * i ; j ++ ) System . out . print ( i ) ; } } public static void main ( String [ ] args ) { int n = 3225 ; printNumber ( n ) ; } }
class GFG { static boolean isToOne ( int n ) { return ( n > 0 ) ; } public static void main ( String [ ] args ) { int n = 5 ; if ( isToOne ( n ) == true ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . Scanner ;  public class B_RedAndBlueBalls { 
import java . util . Scanner ; public class MyClass { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int k = s . nextInt ( ) ; int n = s . nextInt ( ) ; int w = s . nextInt ( ) ; int x = 0 , y = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { x = k * i ; y = y + x ; } if ( y > n ) { k = y - n ; System . out . println ( k ) ; } else System . out . println ( "0" ) ; } }
import java . util . HashMap ; import java . util . Scanner ;  public class VasyaAndBooks2 { public static void main ( String [ ] args ) {  Scanner entrada = new Scanner ( System . in ) ; String n ;
import java . util . * ; class GFG { static double polyarea ( double n , double r ) { if ( r < 0 && n < 0 ) return - 1 ; double A = ( ( r * r * n ) * Math . sin ( ( 360 / n ) * 3.14159 / 180 ) ) / 2 ; return A ; } public static void main ( String [ ] args ) { float r = 9 , n = 6 ; System . out . println ( polyarea ( n , r ) ) ; } }
import java . util . * ; class GFG { public static int findY ( int x ) { if ( x > 2 ) return x - 2 ; return x + 2 ; } public static void main ( String [ ] args ) { int x = 5 ; System . out . println ( findY ( x ) ) ; } }
public class GFG { static int countX ( int n ) { int count = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( n - i == ( n ^ i ) ) count ++ ; } return count ; } public static void main ( String args [ ] ) { int n = 5 ; int answer = countX ( n ) ; System . out . println ( answer ) ; } }
class GfG { static int calcNodes ( int N , int I ) { int result = 0 ; result = I * ( N - 1 ) + 1 ; return result ; } public static void main ( String [ ] args ) { int N = 5 , I = 2 ; System . out . println ( "Leaf nodes = " + calcNodes ( N , I ) ) ; } }
import java . util . Scanner ;  public class problem116 {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int Circumference ( int l , int w ) { return ( 2 * ( l + w ) ) ; } static public void main ( String [ ] args ) { int l = 8 , w = 4 ; int c = Circumference ( l , w ) ; System . out . println ( "Circumference of " + "a rectangle is " + c ) ; } }
import java . math . * ; class GFG { public static void cal_IST ( int h , double r ) { double IST = ( h * r * 1.0 ) / 360 ; int int_IST = ( int ) IST ; int float_IST = ( int ) Math . ceil ( ( int ) ( ( IST - int_IST ) * 60 ) ) ; System . out . println ( int_IST + ":" + float_IST ) ; } public static void main ( String [ ] args ) { int h = 20 ; double r = 150 ; cal_IST ( h , r ) ; } }
class GFG { static int cntWays ( int n ) { if ( n % 2 == 1 ) { return 0 ; } else { return ( n - 2 ) / 4 ; } } public static void main ( String [ ] args ) { int n = 18 ; System . out . println ( cntWays ( n ) ) ; } }
 import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ; import java . util . Vector ;  public class Javaweb {  public static void main ( String [ ] args ) {
public class GFG { static int maxval ( int a [ ] , int n ) { if ( n < 2 ) { return - 99999 ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = ( a [ i ] + i ) * ( a [ j ] + j ) ; if ( max < x ) { max = x ; } } } return max ; } public static void main ( String args [ ] ) { int arr [ ] = { 4 , 5 , 3 , 1 , 10 } ; int len = arr . length ; System . out . println ( maxval ( arr , len ) ) ; } }
import java . util . * ; public class ch1 { public static void main ( String [ ] args ) throws Exception { int a , b = 0 ; char ch ; Scanner reader = new Scanner ( System . in ) ; a = reader . nextInt ( ) ; String str = reader . next ( ) ; for ( int i = 0 ; i < a ; ++ i ) { if ( str . charAt ( i ) == '+' ) ++ b ; else if ( b > 0 ) -- b ; } System . out . print ( b ) ; } }
 import java . util . * ; import java . lang . * ;
class GFG { static int calculateLeaps ( int n ) { if ( n == 0 ) return 1 ; return ( 1 << ( n - 1 ) ) ; } public static void main ( String [ ] args ) { System . out . println ( calculateLeaps ( 4 ) ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = a [ 0 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } for ( int i = 0 ; i < 4 ; i ++ ) { if ( max - a [ i ] != 0 ) { System . out . println ( max - a [ i ] + " " ) ; } }  } }
import java . util . Scanner ;  public class Test { public static void main ( String [ ] args ) {  Scanner input = new Scanner ( System . in ) ;  short j = input . nextShort ( ) ;  while ( ( ( j / 1000 ) + ( j % 1000 / 100 ) + ( j % 100 / 10 ) + ( j % 10 ) ) % 4 != 0 ) { j ++ ; }  System . out . println ( j ) ; } }
import java . util . * ; import java . io . * ;  public class Codeforces { InputStream is ; PrintWriter out ; String INPUT = "" ; 
import java . util . * ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) {
public class GFG { static void perfectCube ( int N ) { int cube_root ; cube_root = ( int ) Math . round ( Math . cbrt ( N ) ) ; if ( cube_root * cube_root * cube_root == N ) { System . out . println ( "Yes" ) ; return ; } else { System . out . println ( "NO" ) ; return ; } } public static void main ( String [ ] args ) { int N = 125 ; perfectCube ( N ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;  public static void main ( String [ ] args ) {
class sol { static boolean isPossible ( int l , int m , int x , int y ) { if ( l * m == x + y ) return true ; return false ; } public static void main ( String args [ ] ) { int l = 3 , m = 2 , x = 4 , y = 2 ; if ( isPossible ( l , m , x , y ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
class Test { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int a = 98 , b = 56 ; System . out . println ( "GCD of " + a + " and " + b + " is " + gcd ( a , b ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ; public class Main {  public void solve ( ) throws IOException {  int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int k = in . nextInt ( ) ;  int [ ] aa = new int [ n ] ; int [ ] bb = new int [ m ] ;  for ( int i = 0 ; i < n ; i ++ ) { aa [ i ] = in . nextInt ( ) ; }  for ( int i = 0 ; i < m ; i ++ ) { bb [ i ] = in . nextInt ( ) ; } 
import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_cicumscribed ( double c ) { return ( c * c * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double c = 8.0 ; System . out . println ( area_cicumscribed ( c ) ) ; } }
import java . io . * ; class GFG { static long evenPowerSum ( int n ) { long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int j = 2 * i ; sum = sum + ( j * j * j * j ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( evenPowerSum ( n ) ) ; } }
import java . util . * ; class GFG { static int numberOfMen ( int D , int m , int d ) { int Men = ( m * ( D - d ) ) / d ; return Men ; } public static void main ( String args [ ] ) { int D = 5 , m = 4 , d = 4 ; System . out . println ( numberOfMen ( D , m , d ) ) ; } }
import java . util . * ; public class Contest8 { static Scanner scn = new Scanner ( System . in ) ;
import java . io . * ; class GFG { public static int countDivisors ( int N , int a , int b ) { int count1 = N / a ; int count2 = N / b ; int count3 = ( N / ( a * b ) ) ; return count1 + count2 - count3 ; } public static void main ( String [ ] args ) { int N = 1000 , a = 3 , b = 4 ; System . out . println ( countDivisors ( N , a , b ) ) ; } }
public class GFG { static int calculateSum ( int n ) { int r1 = 2 , r2 = 3 ; int a1 = 1 , a2 = 1 ; return ( int ) ( a1 * ( Math . pow ( r1 , n ) - 1 ) / ( r1 - 1 ) + a2 * ( Math . pow ( r2 , n ) - 1 ) / ( r2 - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( "Sum = " + calculateSum ( n ) ) ; } }
import java . util . * ; class solution { static int findSum ( int N ) { return ( N * ( N + 1 ) * ( 2 * N - 5 ) + 4 * N ) / 2 ; } public static void main ( String arr [ ] ) { int N = 3 ; System . out . println ( findSum ( N ) ) ; } }
 import java . io . * ; import java . util . * ; public class S { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int q = n / 3 , r = n % 3 , f = 0 , i = 0 ; if ( r == 2 ) q ++ ; f += ( q / 12 ) ; i += q % 12 ; System . out . print ( f + " " + i ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class problem102 {  public static void main ( String [ ] args ) {
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
class GFG { static int largestPower ( int x , int P ) { int res = 0 ; while ( x != 0 ) { x /= P ; res += x ; } return res ; } static int sumOfDivisblePowers ( int L , int R , int P ) { return largestPower ( R , P ) - largestPower ( L - 1 , P ) ; } public static void main ( String [ ] args ) { int L = 1 , R = 10 , P = 2 ; System . out . println ( sumOfDivisblePowers ( L , R , P ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { static int [ ] A ;
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner r = new Scanner ( System . in ) ; int n = r . nextInt ( ) ; int h = r . nextInt ( ) ; int result = 0 ;  for ( int i = 0 ; i < n ; i ++ ) {  result += ( r . nextInt ( ) > h ) ? 2 : 1 ; }  System . out . println ( result ) ;  r . close ( ) ; }  }
import java . io . * ; import java . util . * ; public class Solution { static Scanner sc = new Scanner ( System . in ) ; static PrintWriter out = new PrintWriter ( System . out ) ;
import java . io . * ; class GFG { public static void main ( String [ ] args ) { int x = 10 ; int y = 5 ; x = x * y ; y = x / y ; x = x / y ; System . out . println ( "After swaping:" + " x = " + x + ", y = " + y ) ; } }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; char [ ] s1 = s . toCharArray ( ) ; long sum = 0 ; boolean check = false ;
import java . util . * ; public class RandomTeams {  public static void main ( String [ ] args ) {
import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; StringBuilder n = new StringBuilder ( sc . next ( ) ) ; String ans = n + n . reverse ( ) . toString ( ) ; System . out . println ( ans ) ;   }   public static int getAns ( String s , int k , int start1 , int end1 ) {
import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) throws Exception { int n = in . readInt ( ) ; long [ ] A = in . readLA ( ) ; long ans = 0 , cur = 0 , next = ( long ) 1e18 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( next == 0 ) {
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ;
class GFG { static int countOdd ( int L , int R ) { int N = ( R - L ) / 2 ; if ( R % 2 != 0 || L % 2 != 0 ) N ++ ; return N ; } public static void main ( String [ ] args ) { int L = 3 , R = 7 ; int odds = countOdd ( L , R ) ; int evens = ( R - L + 1 ) - odds ; System . out . println ( "Count of odd numbers is " + odds ) ; System . out . println ( "Count of even numbers is " + evens ) ; } }
import java . util . * ; class GFG { static void isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; if ( sr * sr == x ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } public static void main ( String args [ ] ) { int n = 7 , k = 2 ; isPerfectSquare ( n + k ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;  public class absolute { public static void main ( String [ ] args ) {
import java . util . Arrays ; import java . util . Scanner ;  public class problem106 {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . StringTokenizer ;
import java . io . * ; class GFG { static int findNth ( int N ) { int b = 14 ; int i ; for ( i = 2 ; i <= N ; i ++ ) { if ( i % 2 == 0 ) b = b * 2 ; else b = b - 8 ; } return b ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . print ( findNth ( N ) ) ; } }
import java . io . * ; import java . util . * ; class GFG { static float rainDayProbability ( int a [ ] , int n ) { float count = 0 , m ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) count ++ ; } m = count / n ; return m ; } public static void main ( String args [ ] ) { int a [ ] = { 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = a . length ; System . out . print ( rainDayProbability ( a , n ) ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . Scanner ;  public class B1455 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int X = in . nextInt ( ) ; int jump = 1 ; while ( X > 0 ) { X -= jump ++ ; } int answer = ( X == - 1 ) ? jump : ( jump - 1 ) ; System . out . println ( answer ) ; } }  }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int temp1 = p6 ( a ) ; int temp2 = p3 ( a * 3 - 2 ) ;  System . out . println ( temp2 * 2 - temp1 ) ; } static int p6 ( int n ) { return p3 ( n ) * 6 - n * 6 + 1 ; } static int p3 ( int n ) { return n * ( n + 1 ) / 2 ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String a [ ] = new String [ 8 ] ; int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; if ( k == 0 || k == n ) System . out . println ( 0 + " " + 0 ) ; else { System . out . print ( 1 + " " ) ; int sale = n - k ; System . out . println ( Math . min ( sale , k * 2 ) ) ; } } }
import java . io . * ; class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }
import java . util . * ; public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class OddOccurance { int getOddOccurrence ( int ar [ ] , int ar_size ) { int i ; int res = 0 ; for ( i = 0 ; i < ar_size ; i ++ ) { res = res ^ ar [ i ] ; } return res ; } public static void main ( String [ ] args ) { OddOccurance occur = new OddOccurance ( ) ; int ar [ ] = new int [ ] { 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 4 , 2 } ; int n = ar . length ; System . out . println ( occur . getOddOccurrence ( ar , n ) ) ; } }
class GFG { static void fibonacci ( double n ) { double fib ; for ( double i = 0 ; i < n ; i ++ ) { fib = ( Math . pow ( ( 1 + Math . sqrt ( 5 ) ) , i ) - Math . pow ( ( 1 - Math . sqrt ( 5 ) ) , i ) ) / ( Math . pow ( 2 , i ) * Math . sqrt ( 5 ) ) ; System . out . print ( ( int ) fib + " " ) ; } } public static void main ( String [ ] args ) { double n = 8 ; fibonacci ( n ) ; } }
class GFG { static long product ( int [ ] [ ] mat , int n ) { long d1 = 0 , d2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d1 += mat [ i ] [ i ] ; d2 += mat [ i ] [ n - i - 1 ] ; } return 1L * d1 * d2 ; } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 5 , 8 , 1 } , { 5 , 10 , 3 } , { - 6 , 17 , - 9 } } ; int n = mat . length ; System . out . print ( product ( mat , n ) ) ; } }
import java . io . * ; class GFG { static void printPartition ( int n , int m ) { int k = n / m ; int ct = n % m ; int i ; for ( i = 1 ; i <= ct ; i ++ ) System . out . print ( k + 1 + " " ) ; for ( ; i <= m ; i ++ ) System . out . print ( k + " " ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 2 ; printPartition ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner infile = new Scanner ( System . in ) ; int T = infile . nextInt ( ) ; while ( T -- > 0 ) { int N = infile . nextInt ( ) ; int [ ] freq = new int [ N + 1 ] ; while ( N -- > 0 ) { freq [ infile . nextInt ( ) ] ++ ; } int res = 0 ; for ( int x : freq ) res = Math . max ( res , x ) ; System . out . println ( res ) ; } } }
import java . util . Scanner ;  public class Problem25 {  public static void main ( String [ ] args ) {
class demo { public static double sumOfTheSeries ( int n ) { double sum = 0.0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += 1.0 / ( i * ( i + 1 ) ) ; return sum ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( sumOfTheSeries ( n ) ) ; } }
import java . util . * ; class solution { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ;  public class questionCF { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long h = sc . nextInt ( ) ; long l = sc . nextInt ( ) ; System . out . printf ( "%.13f" , ( double ) ( l * l - h * h ) / ( 2 * h ) ) ; } }
import java . io . * ; class GFG { static boolean isDivisible ( long n ) { while ( n / 100 > 0 ) { long d = n % 10 ; n /= 10 ; n += d * 2 ; } return ( n % 19 == 0 ) ; } public static void main ( String [ ] args ) { long n = 101156 ; if ( isDivisible ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . io . * ; class GFG { static double findSum ( long n ) { return Math . sqrt ( 3 ) * ( n * ( n + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { long n = 10 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ; public class vesya_clender {  public static void main ( String [ ] args ) {
import java . util . * ; import java . lang . Math ; import java . io . * ; class GFG { static int nextPowerOfFour ( int n ) { int x = ( int ) Math . floor ( Math . sqrt ( Math . sqrt ( n ) ) ) ; if ( Math . pow ( x , 4 ) == n ) return n ; else { x = x + 1 ; return ( int ) Math . pow ( x , 4 ) ; } } public static void main ( String [ ] args ) throws java . lang . Exception { int n = 122 ; System . out . println ( nextPowerOfFour ( n ) ) ; } }
class GFG { static int nthEven ( int n ) { return ( 2 * n ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( nthEven ( n ) ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;  public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; long x = n / k ; if ( x % 2 == 0 ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } }
class GFG { static int GIF ( double n ) { return ( int ) Math . floor ( n ) ; } public static void main ( String [ ] args ) { double n = 2.3 ; System . out . println ( GIF ( n ) ) ; } }
import java . io . * ; class Series { static int term ( int n ) { int x = ( ( ( 1 ) + ( int ) Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ; return x ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( term ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class tre { public static void main ( String [ ] Args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long x = 0 , y = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { x += sc . nextLong ( ) ; y += sc . nextLong ( ) ;   } System . out . println ( x / n + " " + y / n ) ;  }  }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int n = sc . nextInt ( ) ; while ( n -- > 0 ) { long a = sc . nextLong ( ) , b = sc . nextLong ( ) , c = sc . nextLong ( ) ; System . out . println ( Math . max ( ( Math . abs ( a - b ) + Math . abs ( a - c ) + Math . abs ( b - c ) - 4 ) , 0 ) ) ; } } } }
import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ; 
class GFG { static void findNums ( int arr [ ] , int n ) { int S = 0 , X = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += arr [ i ] ; X ^= arr [ i ] ; } System . out . println ( X + " " + ( X + S ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 } ; int n = arr . length ; findNums ( arr , n ) ; } }
public class GFG { static int maxZeros ( int N ) { int maxm = - 1 ; int cnt = 0 ; while ( N != 0 ) { if ( ( N & 1 ) == 0 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; } public static void main ( String args [ ] ) { int N = 14 ; System . out . println ( maxZeros ( N ) ) ; } }
import java . util . * ; class GFG { static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = s + arr [ i ] ; } System . out . print ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
class GFG { public static void main ( String [ ] args ) { long ans = 1 ; long mod = ( long ) 1000000007 * 120 ; for ( int i = 0 ; i < 5 ; i ++ ) ans = ( ans * ( 55555 - i ) ) % mod ; ans = ans / 120 ; System . out . println ( "Answer using" + " shortcut: " + ans ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
class Test { static final double PI = Math . PI ; static double findArea ( int r ) { return PI * Math . pow ( r , 2 ) ; } public static void main ( String [ ] args ) { System . out . println ( "Area is " + findArea ( 5 ) ) ; } }
import java . util . * ; public class HelloWorld {  public static void main ( String [ ] args ) {
import java . util . Scanner ; public class Main { static Scanner in = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int ans = 0 ; int n = in . nextInt ( ) ; if ( n % 2 == 0 ) { if ( ( n > > 1 ) % 2 == 1 ) ans = 1 ; else ans = 0 ; } else { if ( ( ( n - 1 ) > > 1 ) % 2 == 0 ) ans = 1 ; else ans = 0 ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { public static int findremainder ( int arr [ ] , int len , int n ) { int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) mul = ( mul * ( arr [ i ] % n ) ) % n ; return mul % n ; } public static void main ( String argc [ ] ) { int [ ] arr = new int [ ] { 100 , 10 , 5 , 25 , 35 , 14 } ; int len = 6 ; int n = 11 ; System . out . println ( findremainder ( arr , len , n ) ) ; } }
class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int countRectangles ( int l , int w ) { int squareSide = __gcd ( l , w ) ; return ( l * w ) / ( squareSide * squareSide ) ; } public static void main ( String [ ] args ) { int l = 4 , w = 6 ; System . out . println ( countRectangles ( l , w ) ) ; } }
public final class p002 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p002 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; int x = 1 ; int y = 2 ; while ( x <= 4000000 ) { if ( x % 2 == 0 ) sum += x ; int z = x + y ; x = y ; y = z ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class Pangram { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( char c = 'a' ; c <= 'z' ; c ++ ) { if ( s . toLowerCase ( ) . contains ( String . valueOf ( c ) ) ) count ++ ; } if ( count == 26 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . io . * ; class GFG { static int countReduce ( String str ) { int n = str . length ( ) ; int res = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) res += Math . abs ( str . charAt ( i ) - str . charAt ( n - i - 1 ) ) ; return res ; } public static void main ( String [ ] args ) { String str = "abcd" ; System . out . println ( countReduce ( str ) ) ; } }
class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( "Reverse of no. is " + reversDigits ( num ) ) ; } }
public class GFG { static int search ( int arr [ ] , int n , int x ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 10 , 30 , 15 } ; int x = 30 ; int n = arr . length ; System . out . printf ( "%d is present at index %d" , x , search ( arr , n , x ) ) ; } }
import java . util . Scanner ;  public class Problem_272A { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int friends = s . nextInt ( ) ; int fingerSum = 0 ; for ( int i = 0 ; i < friends ; i ++ ) fingerSum += s . nextInt ( ) ;  int ways = 0 ; for ( int i = 1 ; i <= 5 ; i ++ ) { if ( ( fingerSum + i ) % ( friends + 1 ) != 1 ) { ways ++ ; } }  System . out . println ( ways ) ;  } }
import java . io . IOException ; import java . util . Scanner ;  public class A { public static void main ( String [ ] args ) throws IOException { Scanner scan = new Scanner ( System . in ) ;  int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int min = scan . nextInt ( ) ; int max = scan . nextInt ( ) ; 
import java . util . Scanner ;  public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int row [ ] = new int [ n ] ; int col [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) {
import java . util . Scanner ;  public class B667 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; long sum = 0 ; long max = 0 ; for ( int n = 0 ; n < N ; n ++ ) { int length = in . nextInt ( ) ; sum += length ; max = Math . max ( max , length ) ; } long answer = max - ( sum - max ) + 1 ; System . out . println ( answer ) ; }  }
import java . util . * ; class GFG { static void printNonConsecutive ( int n ) { int p = ( 1 << n ) ; for ( int i = 1 ; i < p ; i ++ ) if ( ( i & ( i << 1 ) ) == 0 ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { int n = 3 ; printNonConsecutive ( n ) ; } }
import java . lang . * ; public class GFG { static int cost ( int [ ] a , int n ) { int min = a [ 0 ] ; for ( int i = 1 ; i < a . length ; i ++ ) { if ( a [ i ] < min ) min = a [ i ] ; } return ( n - 1 ) * min ; } static public void main ( String [ ] args ) { int [ ] a = { 4 , 3 , 2 } ; int n = a . length ; System . out . println ( cost ( a , n ) ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; public class GukiZandContest {  public static void main ( String [ ] args ) {
class GFG { static int addOne ( int x ) { return ( - ( ~ x ) ) ; } public static void main ( String [ ] args ) { System . out . printf ( "%d" , addOne ( 13 ) ) ; } }
import java . io . * ; class GFG { static void printPair ( int g , int l ) { System . out . print ( g + " " + l ) ; } public static void main ( String [ ] args ) { int g = 3 , l = 12 ; printPair ( g , l ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001106A { static public void main ( final String [ ] args ) throws IOException { p001106A . _main ( args ) ; }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n == 1 || n == 2 ) System . out . println ( - 1 ) ; else { for ( int i = n ; i >= 1 ; i -- ) { System . out . print ( i + " " ) ; } }  } }
import java . util . * ;  public class PermutationF { public static void main ( String [ ] agrs ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) System . out . print ( a [ i ] + " " ) ; System . out . println ( ) ; } } }
import java . util . * ; class GFG { static double sum ( int n ) { if ( n == 0 ) return 1 ; double ans = 1 / ( double ) Math . pow ( 3 , n ) + sum ( n - 1 ) ; return ans ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( sum ( n ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ;   public class atcbg {
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String s1 = s . nextLine ( ) ; if ( s1 . contains ( "ABC" ) || s1 . contains ( "ACB" ) || s1 . contains ( "BAC" ) || s1 . contains ( "BCA" ) || s1 . contains ( "CBA" ) || s1 . contains ( "CAB" ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . Scanner ;  public class NewMain4 {  public static void main ( String [ ] args ) {
import java . io . * ; import java . lang . * ; class GFG { public static double answer ( double X , double K ) { double i = 10 ; double MIN = Math . pow ( i , K - 1 ) ; if ( MIN % X == 0 ) return ( MIN ) ; else return ( ( MIN + X ) - ( ( MIN + X ) % X ) ) ; } public static void main ( String [ ] args ) { double X = 83 ; double K = 5 ; System . out . println ( ( int ) answer ( X , K ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static void printCombination ( int n ) { System . out . print ( 1 + " " ) ; if ( ( n - 2 ) % 3 == 0 ) System . out . print ( 2 + " " + ( n - 3 ) ) ; else System . out . print ( 1 + " " + ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Main { public static void main ( String args [ ] ) throws Exception { FastScanner fs = new FastScanner ( ) ;
import java . lang . * ; class GFG { public static double per ( double a , double b ) { return ( a + b ) ; } public static double area ( double s ) { return ( s / 2 ) ; } public static void main ( String [ ] args ) { double a = 7 , b = 8 , s = 10 ; System . out . println ( per ( a , b ) ) ; System . out . println ( area ( s ) ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
 import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ;
import java . util . * ; import java . io . * ; import static java . lang . System . out ; import static java . util . Arrays . * ; import static java . lang . Math . * ; public class ContestMain { private static Reader in = new Reader ( ) ; private static StringBuilder ans = new StringBuilder ( ) ; private static long MOD = 1000000007 ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . io . * ; class GFG { static long oddNumSum ( int n ) { int j = 0 ; long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { j = ( 2 * i - 1 ) ; sum = sum + ( j * j * j * j ) ; } return sum ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( oddNumSum ( n ) ) ; } }
import java . io . * ; class GFG { static int countSolutions ( int a ) { int count = Integer . bitCount ( a ) ; count = ( int ) Math . pow ( 2 , count ) ; return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }
import java . util . Scanner ;  public class RequiredRemainder { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int ans = - 1 ; int k = n - ( ( n - y ) % x ) ; System . out . println ( k ) ; } } }
 import java . util . * ;   public class Practise { 
import java . util . Scanner ;  public class B194 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { long N = in . nextInt ( ) ; long gcd = gcd ( N + 1 , 4 * N ) ; long answer = 4 * N / gcd ; System . out . println ( answer + 1 ) ; } }  static long gcd ( long a , long b ) { return ( b == 0 ) ? a : gcd ( b , a % b ) ; }  }
import java . util . * ; public class mashmokh {   public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int x = in . nextInt ( ) ; for ( int j = x - 1 ; j < n ; j ++ ) if ( a [ j ] == 0 ) a [ j ] = x ; } for ( int i : a ) System . out . print ( i + " " ) ; }  }
class GFG { static int countSum ( int N , int L , int R ) { if ( L > R ) { return 0 ; } if ( N == 1 ) { return R - L + 1 ; } if ( N > 1 ) { return ( N - 2 ) * ( R - L ) + 1 ; } return 0 ; } public static void main ( String [ ] args ) { int N = 4 , L = 4 , R = 6 ; System . out . print ( countSum ( N , L , R ) ) ; } }
import java . io . * ; class GFG { static int getResult ( int n ) { if ( ( n & 1 ) > 0 ) return 1 ; return - 1 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( getResult ( n ) ) ; } }
import java . util . Scanner ;  public class C {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static int minimumIncrease ( int a , int b , int c ) { int arr [ ] = { a , b , c } ; Arrays . sort ( arr ) ; if ( arr [ 0 ] + arr [ 1 ] >= arr [ 2 ] ) return 0 ; else return arr [ 2 ] - ( arr [ 0 ] + arr [ 1 ] ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 10 ; System . out . println ( minimumIncrease ( a , b , c ) ) ; } }
import java . io . * ; import java . util . * ; import java . util . Scanner ; import java . util . Arrays ;  public class cas { public static void main ( String [ ] args ) {
import java . util . * ; public class Taymyr_is_calling_you {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static void newvol ( double x ) { System . out . print ( "percentage increase in the" + " volume of the sphere is " + ( Math . pow ( x , 3 ) / 10000 + 3 * x + ( 3 * Math . pow ( x , 2 ) ) / 100 ) + "%" ) ; } public static void main ( String [ ] args ) { double x = 10 ; newvol ( x ) ; } }
import java . io . * ; class GFG { static int seriesSum ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) ) / 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; public class OPPJava {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , t = sc . nextInt ( ) , k = sc . nextInt ( ) , d = sc . nextInt ( ) ; System . out . println ( ( n - 1 ) / k * t > d ? "YES" : "NO" ) ; }  }
import java . io . * ; class GFG { static float exponential ( int n , float x ) { float sum = 1 ; for ( int i = n - 1 ; i > 0 ; -- i ) sum = 1 + x * sum / i ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; float x = 1 ; System . out . println ( "e^x = " + exponential ( n , x ) ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001183A { static public void main ( final String [ ] args ) throws IOException { p001183A . _main ( args ) ; }
import java . util . * ; public class BuggySorting {  public static void main ( String [ ] args ) {
import java . util . * ; public class HelloWorld {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static float area ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = a * b ; return A ; } public static void main ( String [ ] args ) { float a = 5 , b = 2 ; System . out . println ( area ( a , b ) ) ; } }
 import java . util . * ;   public class Practise { 
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ;  int g = 0 ; int prev = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int m = in . nextInt ( ) ; if ( m != prev ) { g ++ ; prev = m ; } }  System . out . println ( g ) ; } }
class GFG { static float circlearea ( float R ) { if ( R < 0 ) return - 1 ; float a = ( float ) ( ( 3.14 * R * R ) / 4 ) ; return a ; } public static void main ( String [ ] args ) { float R = 2 ; System . out . println ( circlearea ( R ) ) ; } }
class GFG { static double PHI = 1.6180339 ; static int f [ ] = { 0 , 1 , 1 , 2 , 3 , 5 } ; static int fib ( int n ) { if ( n < 6 ) return f [ n ] ; int t = 5 ; int fn = 5 ; while ( t < n ) { fn = ( int ) Math . round ( fn * PHI ) ; t ++ ; } return fn ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( n + "th Fibonacci Number = " + fib ( n ) ) ; } }
import java . util . * ;  public class LuckySubstring_B {  public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Array ; import java . nio . Buffer ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ;  public class ColoredFields {  public static int floorSearch ( int arr [ ] , int low , int high , int x ) {  if ( low > high ) return - 1 ; 
import java . util . Scanner ; public class p1085B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , k = sc . nextInt ( ) , p = k - 1 ; while ( n % p > 0 && p > 0 ) p -- ; System . out . println ( n / p * k + p ) ; } }
import java . io . * ; class GFG { float sum ( float n ) { if ( n < 2 ) return 1 ; else return 1 / n + ( sum ( n - 1 ) ) ; } public static void main ( String args [ ] ) { GFG g = new GFG ( ) ; System . out . println ( g . sum ( 8 ) ) ; System . out . print ( g . sum ( 10 ) ) ; } }
import java . util . Arrays ; class GFG { static int solve ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ; else b = b * 10 + arr [ i ] ; } return a + b ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 8 , 4 , 5 , 2 , 3 } ; int n = arr . length ; System . out . print ( "Sum is " + solve ( arr , n ) ) ; } }
import java . util . * ;  public class AWords {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int length = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String password = "" ;  for ( int i = 0 ; i < length ; i ++ ) { password += ( char ) ( ( int ) 'a' + i % k ) ; }  System . out . println ( password ) ; } }
import java . io . * ; class GFG { public static int countP ( int n , int k ) { if ( n == 0 || k == 0 || k > n ) return 0 ; if ( k == 1 || k == n ) return 1 ; return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1 ) ) ; } public static void main ( String args [ ] ) { System . out . println ( countP ( 3 , 2 ) ) ; } }
import java . util . Scanner ; public class Main {  public static void main ( String [ ] args ) { Scanner SC = new Scanner ( System . in ) ; int N , Cnt = 0 , A [ ] , B [ ] [ ] , Min , ID , Tmp ; N = SC . nextInt ( ) ; A = new int [ N ] ; B = new int [ 2 ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) A [ i ] = SC . nextInt ( ) ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; System . out . println ( ( N / 2 ) + 1 ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static void findNumberOfDigits ( long n , int base ) { int dig = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( base ) ) + 1 ) ; System . out . println ( "The Number of digits of Number " + n + " in base " + base + " is " + dig ) ; } public static void main ( String [ ] args ) { long n = 1446 ; int base = 7 ; findNumberOfDigits ( n , base ) ; } }
class GFG { public static int countunsetbits ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x = x << 1 ) if ( ( x & n ) == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countunsetbits ( n ) ) ; } }
class GFG { static void bin ( Integer n ) { if ( n > 1 ) bin ( n > > 1 ) ; System . out . printf ( "%d" , n & 1 ) ; } public static void main ( String [ ] args ) { bin ( 131 ) ; System . out . printf ( "\n" ) ; bin ( 3 ) ; } }
import java . util . * ;  public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] ar = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; if ( k % ar [ i ] == 0 ) { min = Math . min ( min , k / ar [ i ] ) ; } } System . out . println ( min ) ;
class GFG { public static int countPairs ( int n ) { if ( n == 2 ) return 4 ; int num = ( ( n / 2 ) + 1 ) ; int max = n % num ; int count = n - max ; return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }
import java . io . * ; class GFG { static int findNthTerm ( int x , int y , int n ) { int [ ] f = new int [ 6 ] ; f [ 0 ] = x ; f [ 1 ] = y ; for ( int i = 2 ; i <= 5 ; i ++ ) f [ i ] = f [ i - 1 ] - f [ i - 2 ] ; return f [ n % 6 ] ; } public static void main ( String args [ ] ) { int x = 2 , y = 3 , n = 3 ; System . out . println ( findNthTerm ( x , y , n ) ) ; } }
import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ; 
class GFG { static int toDecimal ( String binary , int i ) { int n = binary . length ( ) ; if ( i == n - 1 ) return binary . charAt ( i ) - '0' ; return ( ( binary . charAt ( i ) - '0' ) << ( n - i - 1 ) ) + toDecimal ( binary , i + 1 ) ; } public static void main ( String [ ] args ) { String binary = "1010" ; int i = 0 ; System . out . println ( toDecimal ( binary , i ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main { static final int N = 15 ; static String str1 , str2 ; static Character [ ] arr = new Character [ N ] ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . * ; class GFG { static int angle ( int n ) { return 2 * n ; } public static void main ( String [ ] args ) { int n = 30 ; System . out . println ( angle ( n ) ) ; } }
class GFG { static int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } public static void main ( String [ ] args ) { int x = 2 ; int y = 3 ; System . out . printf ( "%d" , power ( x , y ) ) ; } }
import java . util . * ; public class contest16 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . util . * ; public class CF_357B {  public static void main ( String [ ] args ) {
class GFG { static void myCopy ( char s1 [ ] , char s2 [ ] , int index ) { s2 [ index ] = s1 [ index ] ; if ( index == s1 . length - 1 ) { return ; } myCopy ( s1 , s2 , index + 1 ) ; } public static void main ( String [ ] args ) { char s1 [ ] = "GEEKSFORGEEKS" . toCharArray ( ) ; char s2 [ ] = new char [ s1 . length ] ; int index = 0 ; myCopy ( s1 , s2 , index ) ; System . out . println ( String . valueOf ( s2 ) ) ; } }
import java . io . * ; import java . util . * ;  public class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int y = ( int ) ( ( double ) Math . log ( N ) / Math . log ( 2 ) ) ; System . out . println ( y + 1 ) ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . io . * ; class GFG { static int Nth_Term ( int n ) { return ( int ) ( 3 * Math . pow ( n , 2 ) - n + 2 ) / ( 2 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( Nth_Term ( N ) ) ; } }
import java . io . * ; class GFG { static int findCullen ( int n ) { return ( 1 << n ) * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( findCullen ( n ) ) ; } }
import java . util . Scanner ;  public class pROBLEM39 {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static int countDigit ( long n ) { if ( n == 0 ) return 0 ; return 1 + countDigit ( n / 10 ) ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "Number of digits : " + countDigit ( n ) ) ; } }
import java . util . Scanner ; public class GameOfSticks { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int total = n * m ; int res = - 1 ; int inter = total ; while ( inter != 0 ) { res ++ ; n -- ; m -- ; inter = n * m ; } if ( res % 2 != 0 ) { System . out . println ( "Malvika" ) ; } else { System . out . println ( "Akshat" ) ; } } }
import java . util . Scanner ; public class DMCA { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; while ( n / 10 > 0 ) { while ( n > 0 ) { int dig = n % 10 ; sum += dig ; n /= 10 ; } n = sum ; sum = 0 ; } System . out . println ( n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main {  private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;  public static void main ( String [ ] args ) throws IOException {
class GFG { static int countCubes ( int a , int b ) { return ( int ) ( Math . floor ( Math . cbrt ( b ) ) - Math . ceil ( Math . cbrt ( a ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 ; System . out . print ( "Count of cubes is " + countCubes ( a , b ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int findCount ( int d ) { return 9 * ( ( int ) ( Math . pow ( 10 , d - 1 ) ) - ( int ) ( Math . pow ( 9 , d - 1 ) ) ) ; } public static void main ( String args [ ] ) { int d = 1 ; System . out . println ( findCount ( d ) ) ; d = 2 ; System . out . println ( findCount ( d ) ) ; d = 4 ; System . out . println ( findCount ( d ) ) ; } }
import java . io . * ; import java . util . * ;  public class cf553B {  public static void main ( String [ ] args ) {
class GFG { static int a , b , c ; static void swapThree ( ) { a = a + b + c ; b = a - ( b + c ) ; c = a - ( b + c ) ; a = a - ( b + c ) ; } public static void main ( String [ ] args ) { a = 10 ; b = 20 ; c = 30 ; System . out . println ( "Before swapping a = " + a + ", b = " + b + ", c = " + c ) ; swapThree ( ) ; System . out . println ( "After swapping a = " + a + ", b = " + b + ", c = " + c ) ; } }
class GFG { static double sum ( double a , double b , double c , double d , double x ) { double ans = ( x * ( a + b ) * ( c - d ) ) / ( ( a * d ) - ( b * c ) ) ; return ans ; } public static void main ( String [ ] args ) { double a = 1 , b = 2 , c = 9 , d = 13 , x = 5 ; System . out . println ( sum ( a , b , c , d , x ) ) ; } }
import java . util . Scanner ; public class A1393 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int answer = N / 2 + 1 ; System . out . println ( answer ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; import java . util . * ; public final class code
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ; public class foodbying { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 1 ; i <= t ; i ++ ) { int s = sc . nextInt ( ) ; int spent ; int total = 0 ; while ( s != 0 ) { if ( s < 10 ) { total += s ; s = 0 ; } else { spent = s - s % 10 ; total += spent ; s = s % 10 + spent / 10 ; } } System . out . println ( total ) ; } } }
import java . io . * ; import java . util . * ; import java . lang . * ; public class Main { static InputReader sc ; static PrintWriter pw ; public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; sc = new InputReader ( inputStream ) ; pw = new PrintWriter ( outputStream ) ; solve ( ) ; pw . close ( ) ; }
class GFG { static int numLen ( int K ) { if ( K % 2 == 0 || K % 5 == 0 ) { return - 1 ; } int number = 0 ; int len = 1 ; for ( len = 1 ; len <= K ; len ++ ) { number = number * 10 + 1 ; if ( ( number % K == 0 ) ) { return len ; } } return - 1 ; } public static void main ( String [ ] args ) { int K = 7 ; System . out . println ( numLen ( K ) ) ; } }
class GFG { static int minOperations ( int A , int B ) { if ( A > B ) { A = A + B ; B = A - B ; A = A - B ; } B = B / __gcd ( A , B ) ; return B - 1 ; } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int A = 7 , B = 15 ; System . out . print ( minOperations ( A , B ) + "\n" ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; class solution { static int countNumbers ( int N ) { return ( int ) Math . sqrt ( N ) - 1 ; } public static void main ( String args [ ] ) { int N = 36 ; System . out . println ( countNumbers ( N ) ) ; } }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class B545 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . util . * ;  public class CodeForces1037A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; System . out . println ( ( long ) ( Math . log ( n ) / Math . log ( 2 ) ) + 1 ) ; } }
import java . io . * ; class GFG { static int countDivisibles ( int A , int B , int M ) { int counter = 0 ; for ( int i = A ; i <= B ; i ++ ) if ( i % M == 0 ) counter ++ ; return counter ; } public static void main ( String [ ] args ) { int A = 30 , B = 100 , M = 30 ; System . out . println ( countDivisibles ( A , B , M ) ) ; } }
import java . io . * ; class GFG { static int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; } public static void main ( String [ ] args ) { System . out . println ( getRemainder ( 100 , 7 ) ) ; } }
import java . util . Scanner ;   public class MutliTable { public static void main ( String [ ] args ) { Scanner S = new Scanner ( System . in ) ; int table = S . nextInt ( ) ; int find = S . nextInt ( ) ; int answer = 0 ; for ( int x = 1 ; x <= table ; x ++ ) { if ( find % x == 0 && find / x <= table ) answer ++ ; } System . out . print ( answer ) ; } }
import java . util . * ; import java . lang . * ; class GFG { static int sum_of_series ( int n ) { int result = 0 ; if ( n % 2 == 0 ) { result = - ( n * ( n + 1 ) ) / 2 ; } else { result = ( n * ( n + 1 ) ) / 2 ; } return result ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( sum_of_series ( n ) ) ; n = 10 ; System . out . println ( sum_of_series ( n ) ) ; } }
class GFG { static int sum ( int k , int n ) { int sum = ( int ) ( Math . pow ( k , n + 1 ) - Math . pow ( k - 1 , n + 1 ) ) ; return sum ; } public static void main ( String args [ ] ) { int n = 3 ; int K = 3 ; System . out . print ( sum ( K , n ) ) ; } }
class GFG { public static int nthTerm ( int N ) { int nth = 0 ; nth = ( N * N * ( N + 1 ) ) / 2 ; return nth ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; import java . io . * ; 
class GFG { static int min_elimination ( int n , int arr [ ] ) { int countOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 1 ) countOdd ++ ; return Math . min ( countOdd , n - countOdd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 7 , 9 } ; int n = arr . length ; System . out . println ( min_elimination ( n , arr ) ) ; } }
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class XorNiacci { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException { int t = sc . nextInt ( ) ; while ( t -- > 0 ) { 
import java . io . * ; import java . lang . * ; class GFG { public static double sumOfSeries ( double num ) { double res = 0 , fact = 1 ; for ( int i = 1 ; i <= num ; i ++ ) { fact = fact * i ; res = res + ( i / fact ) ; } return ( res ) ; } public static void main ( String [ ] args ) { double n = 5 ; System . out . println ( "Sum: " + sumOfSeries ( n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) throws Exception { char [ ] garland = in . readLine ( ) . toCharArray ( ) ;
class GFG { static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( "(" + ( int ) ( 2 * x2 - x1 ) + "," + ( int ) ( 2 * y2 - y1 ) + " )" ) ; } public static void main ( String args [ ] ) { int x1 = 0 , y1 = 0 , x2 = 1 , y2 = 1 ; findPoint ( x1 , y1 , x2 , y2 ) ; } }
import java . util . Scanner ; public class FootBall { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; checkSituation ( str ) ; sc . close ( ) ; } private static void checkSituation ( String str ) { if ( str . contains ( "0000000" ) || str . contains ( "1111111" ) ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {  int n ; String input = "" ; String home ; Scanner sc = new Scanner ( System . in ) ;  n = sc . nextInt ( ) ; home = sc . next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sc . reset ( ) ; input = sc . next ( ) ; } 
class Solution { public boolean isOneBitCharacter ( int [ ] bits ) { int pos = 0 ; while ( pos < bits . length - 1 ) { pos += bits [ pos ] + 1 ; } return pos == bits . length - 1 ; } }
import java . util . Scanner ;  public class codeforces62 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int total = 1 ; int total_temp = 0 ;  while ( true ) { total_temp = total * k ; if ( total_temp % 10 == 0 || total_temp % 10 == r ) { break ; } else { total ++ ; } }  System . out . println ( total ) ; } }
class GfG { static void printElements ( int arr [ ] , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) System . out . print ( arr [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 } ; int n = arr . length ; printElements ( arr , n ) ; } }
class GFG { static boolean isDivisible ( long n ) { while ( n / 100 != 0 ) { int d = ( int ) ( n % 10 ) ; n /= 10 ; n -= d * 4 ; } return ( n % 41 == 0 ) ; } public static void main ( String [ ] args ) { long n = 104413920565933L ; if ( isDivisible ( n ) ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } }
import java . util . * ; class solution { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Scanner ;  public class A1437 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int L = in . nextInt ( ) ; int R = in . nextInt ( ) ; boolean possible = R < 2 * L ; System . out . println ( possible ? "YES" : "NO" ) ; } }  }
import java . util . * ;  
import java . io . * ; class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) / 2 ; sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c693a {
class GFG { static void ladder_pattern ( int N ) { for ( int i = 0 ; i <= N ; i ++ ) { System . out . println ( "*   *" ) ; System . out . println ( "*   *" ) ; if ( i < N ) { System . out . println ( "*****" ) ; } } } public static void main ( String args [ ] ) { int N = 3 ; ladder_pattern ( N ) ; } }
import java . util . * ; import java . io . * ; public class EdE { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( b > 0 ) { System . out . println ( ( a + b % n - 1 ) % n + 1 ) ; } else { System . out . println ( ( a + n - ( - b % n ) - 1 ) % n + 1 ) ; } } }
import java . util . * ; public class Main { public static double calcTime ( double d , int vd , int vp ) { return d / ( vd - vp ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { Scanner in = new Scanner ( System . in ) ;
import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ;
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { System . out . println ( squareSum ( 8 ) ) ; } }
import java . util . * ; public class RomaandLuckyNumbers {  public static void main ( String [ ] args ) {
import java . io . * ; class Nth { public int nthTerm ( int N ) { return ( N * ( ( N % 2 ) + ( N % 3 ) ) ) ; } } class GFG { public static void main ( String [ ] args ) { int N = 5 ; Nth a = new Nth ( ) ; System . out . println ( "Nth term for N = " + N + " : " + a . nthTerm ( N ) ) ; } }
import java . io . * ; import java . util . * ; public class Main {  public static void main ( String [ ] args ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; Random gen = new Random ( ) ; int test = 1 ;
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static int minimumProduct ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int product = 1 ; for ( int i = 0 ; i < n ; i += 2 ) { product *= ( arr [ i ] + arr [ i + 1 ] ) ; } return product ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 6 , 3 , 1 , 7 , 8 } ; int n = arr . length ; System . out . print ( minimumProduct ( arr , n ) + "\n" ) ; } }
import java . util . * ; public class Main {  public static void main ( String [ ] args ) { int t , n ;  Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . nextInt ( ) ;  System . out . println ( n ) ;  for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " " ) ; } }
class GFG { static int alternate ( int a , int b , int x ) { return x = a ^ b ^ x ; } public static void main ( String [ ] args ) { int a = - 10 ; int b = 15 ; int x = a ; System . out . print ( "x is : " + x ) ; x = alternate ( a , b , x ) ; System . out . print ( "\nAfter exchange " ) ; System . out . print ( "\nx is : " + x ) ; } }
import java . util . * ;  public class watermelon { public static void main ( String args [ ] ) {  String word ; Scanner scanner = new Scanner ( System . in ) ; word = scanner . nextLine ( ) ;  for ( int i = 0 ; i < word . length ( ) ; i ++ ) { if ( i == 0 ) { char temp = word . toUpperCase ( ) . charAt ( 0 ) ; System . out . print ( temp ) ; } else { System . out . print ( word . charAt ( i ) ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  double x = in . nextDouble ( ) ; double m , conter = 0 ; for ( int i = 0 ; i < x ; i ++ ) { m = in . nextDouble ( ) ;  if ( 360 % ( 180 - m ) == 0 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } } }  
import java . util . * ; import java . lang . * ; public class GfG { public static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] + " " ) ; } public static void main ( String argc [ ] ) { char [ ] a = new char [ ] { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; int n = 6 ; print ( a , n , 3 ) ; } }
class GFG { static int getsum ( int x ) { return ( x * ( x + 1 ) ) / 2 ; } static int countJumps ( int n ) { n = Math . abs ( n ) ; int ans = 0 ; while ( getsum ( ans ) < n || ( ( getsum ( ans ) - n ) & 1 ) > 0 ) ans ++ ; return ans ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( countJumps ( n ) ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { public static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String argc [ ] ) { int n = 107 ; int m = 4 ; n = toggleLastMBits ( n , m ) ; System . out . println ( n ) ; } }
import java . util . Scanner ; public class suanfa5 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = 0 ; if ( n % 2 == 0 ) { int res = ( n / 2 + 1 ) ; m = res * res ; } else { m = ( n + 3 ) * ( n + 1 ) / 2 ; } System . out . println ( m ) ; } }
class GFG { static String LexicographicalMaxString ( String str ) { String mx = "" ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) { mx = str . substring ( i ) ; } } return mx ; } public static void main ( String [ ] args ) { String str = "ababaa" ; System . out . println ( LexicographicalMaxString ( str ) ) ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ;  public class Practice {  public static void main ( String [ ] args ) {
import java . lang . * ; import java . util . * ; class GFG { static double countNumbers ( int N ) { return ( Math . pow ( 10 , N ) - 1 ) - ( Math . pow ( 10 , N ) - Math . pow ( 8 , N ) ) / 2 ; } static public void main ( String args [ ] ) { int n = 2 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . IOException ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . InputStream ; 
import java . io . * ; import java . util . * ;  public class A1008 { public static void main ( String [ ] args ) { InputStream inputReader = System . in ; OutputStream outputReader = System . out ; InputReader in = new InputReader ( inputReader ) ;
import java . util . * ;  public class Main { public static void main ( String [ ] args ) {  Scanner scn = new Scanner ( System . in ) ; String num = scn . nextLine ( ) ; String num2 = scn . nextLine ( ) ; String str = "" ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == num2 . charAt ( i ) ) { str = str + 0 ; } else { str = str + 1 ; } } System . out . print ( str ) ;  } }
import java . util . * ;  public class PetyaAndStaircases_B {  public static void main ( String [ ] args ) {
class GFG { static int numberOfPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n - 1 ) ; } public static void main ( String args [ ] ) { System . out . println ( numberOfPaths ( 3 , 3 ) ) ; } }
class GFG { static int findSum ( int [ ] arr , int n , int k ) { int ans = arr [ n - k - 1 ] - arr [ 0 ] ; for ( int i = 1 ; i <= k ; i ++ ) { ans = Math . min ( arr [ n - 1 - ( k - i ) ] - arr [ i ] , ans ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 100 , 120 , 140 } ; int k = 2 ; int n = arr . length ; System . out . println ( findSum ( arr , n , k ) ) ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . Scanner ; 
class GFG { static int sumOfDigit ( int n , int b ) { int unitDigit , sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; } public static void main ( String [ ] args ) { int n = 50 ; int b = 2 ; System . out . print ( sumOfDigit ( n , b ) ) ; } }
import java . util . * ; public class YoungExplorers {  public static void main ( String [ ] args ) {
   import java . util . * ;   public class Main {  public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; long k = input . nextLong ( ) ; System . out . println ( Long . numberOfTrailingZeros ( k ) + 1 ) ; }  } 
import java . io . * ; class GFG { static void series ( int A , int X , int n ) { int term = ( int ) Math . pow ( A , n ) ; System . out . print ( term + " " ) ; for ( int i = 1 ; i <= n ; i ++ ) { term = term * X * ( n - i + 1 ) / ( i * A ) ; System . out . print ( term + " " ) ; } } public static void main ( String [ ] args ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; } }
import java . util . Scanner ;  public class AdjacentReplacement {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ;  int a [ ] = new int [ n ] ;  for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; if ( a [ i ] % 2 == 0 ) { a [ i ] -- ; }  System . out . print ( a [ i ] + " " ) ; }  }  }
import java . util . * ; class GFG { static int findTrailingZeros ( int n ) { if ( ( n & 1 ) == 1 ) return 0 ; else { int ans = 0 ; n /= 2 ; while ( n != 0 ) { ans += n / 5 ; n /= 5 ; } return ans ; } } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( findTrailingZeros ( n ) ) ; } }
import java . util . Scanner ;  public class Vsa {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  int n , m , k ; n = in . nextInt ( ) ; m = in . nextInt ( ) ; k = in . nextInt ( ) ;  boolean b = m >= n && k >= n ; System . out . println ( ( b ) ? "YES" : "NO" ) ;  } }
import java . lang . Math ; class gfg { static float sph ( float r , float R , float h ) { if ( r < 0 && R < 0 && h < 0 ) return - 1 ; float x = r ; float V = ( float ) ( 4 * 3.14f * Math . pow ( r , 3 ) ) / 3 ; return V ; } public static void main ( String [ ] args ) { float r = 5 , R = 8 , h = 11 ; System . out . println ( sph ( r , R , h ) ) ; } }
class GFG { public static void main ( String [ ] args ) { StringBuilder str = new StringBuilder ( "geeksforgeeks" ) ; str . reverse ( ) ; System . out . println ( str ) ; } }
import java . io . * ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . StringTokenizer ; import java . util . List ; import java . util . * ; public class realfast implements Runnable { private static final int INF = ( int ) 1e9 ; long in = 1000000007 ; long fac [ ] = new long [ 1000001 ] ; long inv [ ] = new long [ 1000001 ] ; public void solve ( ) throws IOException { 
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c582a {
import java . io . * ; class GFG { static int numberOfDays ( int a , int b , int n ) { int Days = b * ( n + a ) / ( a + b ) ; return Days ; } public static void main ( String [ ] args ) { int a = 10 , b = 20 , n = 5 ; System . out . println ( numberOfDays ( a , b , n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main {  static long res = 0 ; static int n , m ;  public static void main ( String [ ] args ) throws Exception { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ;
public class GFG { static int PowerOFPINnfactorial ( int n , int p ) { int ans = 0 ; int temp = p ; while ( temp <= n ) { ans += n / temp ; temp = temp * p ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( PowerOFPINnfactorial ( 4 , 2 ) ) ; } }
import java . io . * ; class Nth { public static int nthTerm ( int N ) { return N * N + ( N + 1 ) * ( N + 1 ) ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; import java . util . * ;  public class main { public static void solucion ( String strPalabra ) { List < String > ans = new ArrayList < > ( ) ;
class GFG { static int difference ( int n ) { int S , res ; S = ( n * ( n + 1 ) ) / 2 ; res = S * ( S - 1 ) ; return res ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( difference ( n ) ) ; } }
import java . io . * ; class GFG { static int remainder ( String str ) { int len = str . length ( ) ; int num , rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { num = rem * 10 + ( str . charAt ( i ) - '0' ) ; rem = num % 11 ; } return rem ; } public static void main ( String args [ ] ) { String str = "3435346456547566345436457867978" ; System . out . println ( remainder ( str ) ) ; } }
public class GFG { static double ReuleauxArea ( float a ) { if ( a < 0 ) return - 1 ; double A = ( double ) 0.70477 * Math . pow ( a , 2 ) ; return A ; } public static void main ( String args [ ] ) { float a = 6 ; System . out . println ( ReuleauxArea ( a ) ) ; } }
class GFG { static int cal ( int n ) { double res = Math . pow ( Math . ceil ( ( Math . pow ( Math . pow ( 10 , ( n - 1 ) ) , 1 / 4 ) ) ) , 4 ) ; return ( int ) res ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( cal ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Practice { static FastReader sc = new FastReader ( ) ; static int mod = ( int ) Math . pow ( 10 , 9 ) + 7 ; public static void main ( String [ ] args ) { int ttt = 1 ;
public class GFG { static int NumberOfRectangles ( int n , int m ) { if ( n % 2 == 0 ) return ( n / 2 ) * m ; else if ( m % 2 == 0 ) return ( m / 2 ) * n ; return ( n * m - 1 ) / 2 ; } public static void main ( String args [ ] ) { int n = 3 , m = 3 ; System . out . println ( NumberOfRectangles ( n , m ) ) ; } }
class GFG { static void maxRegions ( int n ) { int num ; num = n * ( n + 1 ) / 2 + 1 ; System . out . println ( num ) ; ; } public static void main ( String [ ] args ) { int n = 10 ; maxRegions ( n ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class UniversityEntrance { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ;  int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = input . nextInt ( ) ;  Arrays . sort ( arr ) ; System . out . println ( arr [ n / 2 ] ) ; } }
class GfG { static int getCount ( String a , String b ) { if ( b . length ( ) % a . length ( ) != 0 ) return - 1 ; int count = b . length ( ) / a . length ( ) ; String str = "" ; for ( int i = 0 ; i < count ; i ++ ) { str = str + a ; } if ( str . equals ( b ) ) return count ; return - 1 ; } public static void main ( String [ ] args ) { String a = "geeks" ; String b = "geeksgeeks" ; System . out . println ( getCount ( a , b ) ) ; } }
import java . io . * ; class GFG { static int NumberOfSolutions ( int a , int b , int c , int d ) { int ans = 0 ; for ( int i = a ; i <= b ; i ++ ) if ( d >= Math . max ( c , i + 1 ) ) ans += d - Math . max ( c , i + 1 ) + 1 ; return ans ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = 3 , d = 4 ; System . out . println ( NumberOfSolutions ( a , b , c , d ) ) ; } }
import java . io . * ; class GFG { static int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; } static int findMinDiff ( int a , int b , int x , int y ) { int g = gcd ( a , b ) ; int diff = Math . abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; } public static void main ( String [ ] args ) { int a = 20 , b = 52 , x = 5 , y = 7 ; System . out . println ( findMinDiff ( a , b , x , y ) ) ; } }
import java . io . * ; class GFG { static double squareRoot ( double n ) { return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . log ( 2 ) ) ) ; } public static void main ( String [ ] args ) { double n = 12 ; System . out . println ( squareRoot ( n ) ) ; } }
import java . util . * ;  public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; long low = 0 ; long high = n ; while ( low <= high ) { long mid = low + ( high - low ) / 2 ;
import java . io . * ; class GFG { static int countDivisors ( int n , int k ) { int count = 0 , i ; for ( i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && i % k == 0 ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
import java . util . Scanner ; public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n > m ) { System . out . println ( ( n - m ) % 2 ) ; } else { System . out . println ( m - n ) ; } } } }
import java . io . * ; import java . math . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int T = sc . nextInt ( ) ; sc . nextLine ( ) ; while ( T -- > 0 ) { String x = sc . nextLine ( ) ;
 import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int t , k , i ; long n ; t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; n = sc . nextLong ( ) ; k = sc . nextInt ( ) ; System . out . println ( k + ( n - 1 ) * 9 ) ; } } catch ( Exception e ) { } } }
import java . util . * ;  public class Stairs {  public static void main ( String [ ] args ) {
import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . BigInteger ; class GFG { static boolean getParity ( int n ) { boolean parity = false ; while ( n != 0 ) { parity = ! parity ; n = n & ( n - 1 ) ; } return parity ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( "Parity of no " + n + " = " + ( getParity ( n ) ? "odd" : "even" ) ) ; } }
import java . lang . reflect . Array ; import java . util . * ; import java . util . function . BiConsumer ; import java . util . function . Consumer ; import java . util . function . Function ; import java . util . stream . * ;  public class Main { public static void main ( String arg [ ] ) {
import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;   public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
class GFG { static void printAP ( int a , int d , int n ) { int curr_term ; curr_term = a ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( curr_term + " " ) ; curr_term = curr_term + d ; } } public static void main ( String [ ] args ) { int a = 2 ; int d = 1 ; int n = 5 ; printAP ( a , d , n ) ; } }
class CFG { static int Minsteps ( int n , int m ) { int ans = 0 ; while ( m > n ) { if ( m % 2 != 0 ) { m ++ ; ans ++ ; } m /= 2 ; ans ++ ; } return ans + n - m ; } public static void main ( String [ ] args ) { int n = 4 , m = 6 ; System . out . println ( Minsteps ( n , m ) ) ; } }
import java . io . * ; class GFG { static int pairAndSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] & arr [ j ] ; return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 10 , 15 } ; int n = arr . length ; System . out . println ( pairAndSum ( arr , n ) ) ; } }
import javax . print . DocFlavor ; import java . io . * ; import java . net . Inet4Address ; import java . sql . ClientInfoStatus ; import java . util . * ; 
public class GFG { static double sumProductDifference ( int a , int b , int c , int d , int e ) { double rootSum = ( double ) ( - 1 * b ) / a ; double rootProduct = ( double ) e / a ; return Math . abs ( rootSum - rootProduct ) ; } public static void main ( String args [ ] ) { System . out . println ( sumProductDifference ( 8 , 4 , 6 , 4 , 1 ) ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int c = s . nextInt ( ) ; int sum = s . nextInt ( ) ; int a = sum / c ; int b = sum % c ; System . out . println ( b * ( a + 1 ) * ( a + 1 ) + ( c - b ) * a * a ) ; } } }
import java . util . Scanner ; import java . util . * ;  public class fridgeLockers { static Scanner input = new Scanner ( System . in ) ; static int t ; static int n , m ;  public static void main ( String [ ] args ) { t = input . nextInt ( ) ;
class GFG { static double distance ( int x1 , int y1 , int x2 , int y2 ) { return Math . sqrt ( Math . pow ( x2 - x1 , 2 ) + Math . pow ( y2 - y1 , 2 ) * 1.0 ) ; } public static void main ( String [ ] args ) { System . out . println ( Math . round ( distance ( 3 , 4 , 4 , 3 ) * 100000.0 ) / 100000.0 ) ; } }
class GFG { static int NumUnsignBits = 64 ; static long findNum ( long x ) { for ( int i = 0 ; i < NumUnsignBits - 1 ; i ++ ) { if ( ( ( x > > i ) & 1 ) != ( ( x > > ( i + 1 ) ) & 1 ) ) { x ^= ( 1 << i ) | ( 1 << ( i + 1 ) ) ; return x ; } } return Long . MIN_VALUE ; } public static void main ( String [ ] args ) { int n = 92 ; System . out . println ( findNum ( n ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int tran = 0 ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = scan . nextInt ( ) ;
import java . io . * ; import java . util . * ; public class Mohammad { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , c = n / 2 ; System . out . println ( ++ c ) ; for ( int i = 1 ; i <= c ; i ++ ) System . out . println ( 1 + " " + i ) ; for ( int i = 2 ; i <= n - c + 1 ; i ++ ) System . out . println ( c + " " + i ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int countStrings ( String s ) { int sum = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i % 2 == 0 && s . charAt ( i ) == '$' ) sum *= 21 ; else if ( s . charAt ( i ) == '$' ) sum *= 5 ; } return sum ; } public static void main ( String args [ ] ) { String str = "s$$e$" ; System . out . println ( countStrings ( str ) ) ; } }
import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;  public class cp { static BufferedReader br ; static StringTokenizer st ;  public static void main ( String [ ] args ) throws IOException {  br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;  st = readLine ( ) ; int n = tokenInt ( ) ; int t = tokenInt ( ) ;  st = readLine ( ) ; int [ ] array = readIntArray ( n ) ; 
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c701a {
import java . io . * ; class GFG { static void newvol ( double x ) { System . out . print ( "percentage increase " + "in the volume of the cylinder is " + x + "%" ) ; } public static void main ( String [ ] args ) { double x = 10 ; newvol ( x ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int x = sc . nextInt ( ) ; int i = 0 ; int count = 0 ; for ( i = 0 ; i < 32 ; i ++ ) { if ( ( x & ( 1 << i ) ) != 0 ) count ++ ; } pw . print ( count ) ;     pw . close ( ) ; }              
import java . util . * ; class GFG { static int findpos ( String n ) { int k = 0 , pos = 0 , i = 0 ; while ( k != n . length ( ) ) { switch ( n . charAt ( i ) ) { case '4' : pos = pos * 2 + 1 ; break ; case '7' : pos = pos * 2 + 2 ; break ; } i ++ ; k ++ ; } return pos ; } public static void main ( String [ ] args ) { String n = "774" ; System . out . println ( findpos ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner myObj = new Scanner ( System . in ) ; int x = myObj . nextInt ( ) ; int y = myObj . nextInt ( ) ; int counter = 1 ; while ( x > 0 ) { x -- ;  if ( counter % y == 0 ) { x ++ ; } counter ++ ; } System . out . println ( counter - 1 ) ; } }
import java . util . * ; import java . io . * ;   public class Forces {  public static PrintWriter cout ; public static void main ( String ... arg ) {
import java . util . * ; import java . io . * ; public class Asd { static Scanner s = new Scanner ( System . in ) ; static PrintWriter w = new PrintWriter ( System . out ) ; public static void main ( String args [ ] ) { int t = 1 ;
import java . io . * ; public class GFG { static int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } static int trace ( int n , int m ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; } static public void main ( String [ ] args ) { int N = 3 , M = 3 ; System . out . println ( trace ( N , M ) ) ; } }
class GFG { static int countNumbers ( int X , int Y , int N ) { int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( ( i % X == 0 ) && ( i % Y != 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int X = 2 , Y = 3 , N = 10 ; System . out . println ( countNumbers ( X , Y , N ) ) ; } }
import java . util . Scanner ;  public class DoubleCola { public static String doubleCola ( int n ) { int [ ] sheldrons = getSheldon ( n ) ; int firstShedron = sheldrons [ 0 ] ; int numberOfShedron = sheldrons [ 1 ] ; int who = 0 ; int sum = firstShedron ; while ( sum < n ) { sum += numberOfShedron ; if ( sum <= n ) { who ++ ; }  } String [ ] names = { "Sheldon" , "Leonard" , "Penny" , "Rajesh" , "Howard" } ; return names [ who ] ; 
import java . io . * ; class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int minValidNumber ( int p , int q ) { if ( q % p == 0 ) return __gcd ( p , q ) ; else return - 1 ; } public static void main ( String [ ] args ) { int p = 2 , q = 6 ; System . out . print ( minValidNumber ( p , q ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . lang . * ; class GFG { public static int sumOfSeries ( int n ) { int x = ( n * ( n + 1 ) / 2 ) ; return x * x ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . io . * ; class GFG { static void printSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { int num = i * ( i + 1 ) * ( i + 2 ) / 6 ; System . out . print ( num + " " ) ; } } public static void main ( String [ ] args ) { int n = 10 ; printSeries ( n ) ; } }
import java . io . * ; class GFG { static int aliquotSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) if ( n % i == 0 ) sum += i ; return sum ; } public static void main ( String args [ ] ) throws IOException { int n = 12 ; System . out . println ( aliquotSum ( n ) ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class PavelAndBarbeque { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; sc . nextLine ( ) ;
import java . util . Scanner ;  public class Problem38 {  public static void main ( String [ ] args ) {
import java . io . * ; public class GFG { static int countNonEmptySubstr ( String str ) { int n = str . length ( ) ; return n * ( n + 1 ) / 2 ; } public static void main ( String args [ ] ) { String s = "abcde" ; System . out . println ( countNonEmptySubstr ( s ) ) ; } }
class GFG { static boolean adjacentSet ( int n ) { int x = ( n & ( n > > 1 ) ) ; if ( x == 1 ) return true ; else return false ; } public static void main ( String args [ ] ) { int n = 3 ; if ( adjacentSet ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { int [ ] segments = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; for ( int i = a ; i <= b ; i ++ ) { String str = i + "" ;
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001093A { static public void main ( final String [ ] args ) throws IOException { p001093A . _main ( args ) ; }
import java . util . * ; public class B_366B {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int ans = ( n / 2 ) * 3 ; System . out . println ( ans ) ;  } }
class GFG { static boolean isMember ( int a , int d , int x ) { if ( d == 0 ) return ( x == a ) ; return ( ( x - a ) % d == 0 && ( x - a ) / d >= 0 ) ; } public static void main ( String args [ ] ) { int a = 1 , x = 7 , d = 3 ; if ( isMember ( a , d , x ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example {
class Factorial { int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String args [ ] ) { Factorial obj = new Factorial ( ) ; int num = 5 ; System . out . println ( "Factorial of " + num + " is " + obj . factorial ( num ) ) ; } }
import java . util . Scanner ;   public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a , b ; int ans = 0 , p = 100 ; for ( int i = 0 ; i < n ; i ++ ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; p = Math . min ( p , b ) ; ans += p * a ; } System . out . println ( ans ) ;  } }
import java . lang . Math ; public class GfG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . sqrt ( n ) ; n -= ( largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 85 ; System . out . println ( countSteps ( n ) ) ; } }
import java . util . * ; class solution { static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; import java . util . * ;
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ; char ch = s . charAt ( 0 ) ; int c = 1 ; int ans = 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ch ) { if ( c < 5 ) c ++ ; else { ans += 1 ; c = 1 ; } } else { ans += 1 ; c = 1 ; ch = s . charAt ( i ) ; }
import java . io . * ; class GFG { static boolean isDivisible ( long n ) { while ( n / 100 > 0 ) { int last_digit = ( int ) n % 10 ; n /= 10 ; n += last_digit * 3 ; } return ( n % 29 == 0 ) ; } public static void main ( String [ ] args ) { long n = 348 ; if ( isDivisible ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static void printFactorialNums ( int n ) { int fact = 1 ; int x = 2 ; while ( fact <= n ) { System . out . print ( fact + " " ) ; fact = fact * x ; x ++ ; } } public static void main ( String [ ] args ) { int n = 100 ; printFactorialNums ( n ) ; } }
 import java . util . * ; public class f { public static void main ( String [ ] ta ) { Scanner sc = new Scanner ( System . in ) ; if ( sc . hasNext ( ) ) { int n = sc . nextInt ( ) ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . io . * ; import java . util . * ;  public class Task {  public static void main ( String [ ] args ) throws IOException {  new Task ( ) . go ( ) ; }  PrintWriter out ; Reader in ; BufferedReader br ;  Task ( ) throws IOException {  try { 
import java . util . * ; import java . io . * ; public class Solution { static int rock = 0 ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; public static void main ( String [ ] args ) throws Exception {
class GFG { static long productAscii ( String str ) { long prod = 1 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { prod *= str . charAt ( i ) ; } return prod ; } public static void main ( String [ ] args ) { String str = "GfG" ; System . out . println ( productAscii ( str ) ) ; } }
import java . util . Scanner ; public class Cf { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int totalbags = n * n ; for ( int i = 1 ; i <= totalbags / 2 ; i ++ ) { System . out . println ( i + " " + ( ( totalbags - i ) + 1 ) ) ; } } }
import java . util . Scanner ;  public class P570B { public static void main ( String [ ] args ) {  Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int m = s . nextInt ( ) ; if ( n == 1 ) { System . out . println ( 1 ) ; } else { if ( n - m > m - 1 ) { System . out . println ( m + 1 ) ; } else { System . out . println ( m - 1 ) ; } }  }  }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n , i , m , ans = 0 , mint ; n = in . nextInt ( ) ; for ( i = 1 ; i <= n ; i ++ ) { m = in . nextInt ( ) ; mint = Math . min ( m - 1 , 1000000 - m ) ; ans = Math . max ( ans , mint ) ; } System . out . println ( ans ) ; in . close ( ) ; } }
import java . io . * ; public class GFG { static void vowelOrConsonant ( char x ) { if ( x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'A' || x == 'E' || x == 'I' || x == 'O' || x == 'U' ) System . out . println ( "Vowel" ) ; else System . out . println ( "Consonant" ) ; } static public void main ( String [ ] args ) { vowelOrConsonant ( 'c' ) ; vowelOrConsonant ( 'E' ) ; } }
import java . io . * ; import java . util . * ;  public class a { public static void main ( String [ ] args ) throws IOException { FastReader scan = new FastReader ( ) ;
import java . util . * ; 
import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class Main { static InputReader in = new InputReader ( System . in ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static int oo = ( int ) 1e9 ;
import java . io . * ; class GFG { static long findF_N ( long n ) { long ans = 0 ; for ( long i = 0 ; i < n ; ++ i ) ans += ( i + 1 ) * ( n - i - 1 ) ; return ans ; } public static void main ( String [ ] args ) { long n = 3 ; System . out . println ( findF_N ( n ) ) ; } }
import java . util . Scanner ;  public class Holidays { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int n = scanner . nextInt ( ) ;  int min = 0 ; int max = 0 ;  for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 7 == 0 || ( i + 1 ) % 7 == 0 ) { min ++ ; } if ( i % 7 == 1 || i % 7 == 2 ) { max ++ ; } }  System . out . println ( min ) ; System . out . println ( max ) ;  } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; 
public class GFG { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) - 4 * n + 2 ; } public static void main ( String args [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; class GFG { static float heightCalculate ( int H , int n , int m ) { float N = ( float ) ( n * 1.0 ) ; float M = ( float ) ( m * 1.0 ) ; float h = H * ( float ) Math . sqrt ( N / ( N + M ) ) ; return h ; } public static void main ( String [ ] args ) { int H = 10 , n = 3 , m = 4 ; System . out . print ( heightCalculate ( H , n , m ) ) ; } }
import java . util . * ;  public class Absolutezero {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t1 = sc . nextInt ( ) ; if ( t1 % 2 != 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( int ) Math . pow ( 2 , t1 / 2 ) ) ; }    }  }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class B344 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . io . * ; import java . util . * ; public class Lvl3Taser {  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; List < int [ ] > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int [ ] ar = new int [ 2 ] ; ar [ 0 ] = sc . nextInt ( ) ; ar [ 1 ] = sc . nextInt ( ) ; list . add ( ar ) ; } boolean check = true ;
import java . io . * ; class GFG { static void anglechordtang ( int z ) { System . out . print ( "The angle between tangent" + " and the chord is " + z + " degrees" ) ; } public static void main ( String [ ] args ) { int z = 48 ; anglechordtang ( z ) ; } }
public final class p040 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p040 ( ) . run ( ) ) ; } public String run ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < 1000000 ; i ++ ) sb . append ( i ) ; int prod = 1 ; for ( int i = 0 ; i <= 6 ; i ++ ) prod *= sb . charAt ( Library . pow ( 10 , i ) - 1 ) - '0' ; return Integer . toString ( prod ) ; } }
class GFG { static boolean isEven ( int n ) { if ( ( n ^ 1 ) == n + 1 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 100 ; System . out . print ( isEven ( n ) == true ? "Even" : "Odd" ) ; } }
import java . util . Arrays ; class GFG { static void maxSum ( int [ ] a , int n ) { int maxAnd = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int maxOR = 0 ; for ( int i = 0 ; i < n ; i ++ ) { maxOR |= a [ i ] ; } System . out . println ( ( maxAnd + maxOR ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; int [ ] a = { 3 , 5 , 6 , 1 } ; maxSum ( a , n ) ; } }
class GFG { static int countSC ( int N ) { int res = ( int ) Math . sqrt ( N ) + ( int ) Math . cbrt ( N ) - ( int ) ( Math . sqrt ( Math . cbrt ( N ) ) ) ; return res ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . println ( "Number of squares " + "and cubes is " + countSC ( N ) ) ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a [ ] = new int [ n ] ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ input . nextInt ( ) - 1 ] = i ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += Math . abs ( a [ i ] - a [ i + 1 ] ) ; } System . out . println ( sum ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; import java . util . StringTokenizer ; import java . util . Arrays ; public class Solution { public static void main ( String [ ] args ) { try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ) { char [ ] word = in . readLine ( ) . toCharArray ( ) ; boolean flag = false ;
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ 101 ] ; for ( int i = 0 ; i < n ; i ++ ) { int s = sc . nextInt ( ) ; for ( int j = 0 ; j < s ; j ++ ) { int p = sc . nextInt ( ) ; a [ p ] ++ ; if ( a [ p ] == n ) System . out . print ( p + " " ) ; } } } }
class GFG { static int Remainder ( String str , int R ) { int len = str . length ( ) ; int Num , Rem = 0 ; for ( int i = 0 ; i < len ; i ++ ) { Num = Rem * 10 + ( str . charAt ( i ) - '0' ) ; Rem = Num % R ; } return Rem ; } public static void main ( String [ ] args ) { String str = "13589234356546756" ; int R = 13 ; System . out . println ( Remainder ( str , R ) ) ; } }
import java . util . * ; import java . io . * ;
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;  public class Gym { 
import java . util . Scanner ;  public class TilePainting {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  public class a { static int [ ] count , count1 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr ; static long [ ] [ ] mat , mat1 ; static long x ; static long maxl ; static double dec ; static String s ;
import java . io . * ; class GFG { static void findsolution ( long n , long x , long y ) { if ( ( y - n + 1 ) * ( y - n + 1 ) + n - 1 < x || y < n ) { System . out . println ( "No solution" ) ; return ; } System . out . println ( y - n + 1 ) ; while ( n -- > 1 ) System . out . println ( "1" ) ; } public static void main ( String [ ] args ) { long n , x , y ; n = 5 ; x = 15 ; y = 15 ; findsolution ( n , x , y ) ; } }
class GFG { static int toggle ( int n ) { int temp = 1 ; while ( temp <= n ) { n = n ^ temp ; temp = temp << 1 ; } return n ; } public static void main ( String arg [ ] ) { int n = 10 ; n = toggle ( n ) ; System . out . print ( n ) ; } }
import java . util . * ; public class f {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextInt ( ) ; long b = sc . nextInt ( ) ; long c = sc . nextInt ( ) ; if ( c == 0 ) System . out . println ( ( a == b ) ? "YES" : "NO" ) ; else System . out . println ( ( ( b - a ) % c == 0 && ( b - a ) / c >= 0 ) ? "YES" : "NO" ) ;  }  }
class GFG { static int setAllBitsAfterMSB ( int n ) { n |= n > > 1 ; n |= n > > 2 ; n |= n > > 4 ; n |= n > > 8 ; n |= n > > 16 ; return n ; } static int toggle ( int n ) { n = n ^ setAllBitsAfterMSB ( n ) ; return n ; } public static void main ( String arg [ ] ) { int n = 10 ; n = toggle ( n ) ; System . out . print ( n ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
class GFG { public static int countPairs ( int n ) { int num = ( ( n / 2 ) + 1 ) ; int max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }
import java . io . * ; class GFG { static int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ) ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fib ( n ) ) ; } }
class GFG { static void printPermutation ( int n , int k ) { for ( int i = 1 ; i <= n ; i ++ ) { int x = 2 * i - 1 ; int y = 2 * i ; if ( i <= k ) System . out . print ( y + " " + x + " " ) ; else System . out . print ( x + " " + y + " " ) ; } } public static void main ( String [ ] args ) { int n = 2 , k = 1 ; printPermutation ( n , k ) ; } }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { String s1 = s . substring ( 0 , i ) ; String s2 = s . substring ( i ) ; StringBuilder stringBuilder = new StringBuilder ( s1 ) ; s = stringBuilder . reverse ( ) + s2 ;
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = Integer . MAX_VALUE ;
class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void findgcd ( int n , int x , int y ) { int g = gcd ( x , y ) ; for ( int i = 0 ; i < g ; i ++ ) System . out . print ( n ) ; } public static void main ( String [ ] args ) { int n = 123 , x = 5 , y = 2 ; findgcd ( n , x , y ) ; } }
import java . util . * ; public class BuggySorting {  public static void main ( String [ ] args ) {
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 3 * n - 5 ; } public static void main ( String args [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Scanner ;  public class problem91 {  public static void main ( String [ ] args ) {
class GFG { static boolean check ( String s ) { for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { String s = "xzyyz" ; if ( check ( s ) ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class A1371 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; System . out . println ( n % 2 == 0 ? n / 2 : ( n + 1 ) / 2 ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public final class new_year { public static void main ( String [ ] args ) throws java . lang . Exception { Reader r = new Reader ( ) ; r . init ( System . in ) ; int n = r . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ;
import java . io . BufferedInputStream ; import java . io . IOException ; import java . util . * ;  public class Main { static int f [ ] [ ] = new int [ 201 ] [ 201 ] ;
import java . util . Scanner ;  public class _0669PashaandStick {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 != 0 ) { System . out . println ( 0 ) ; } else { int val = n / 2 ; val -- ; System . out . println ( val / 2 ) ; } }  }
class GFG { static int assignValue ( int a , int b , int x ) { int arr [ ] = { a , b } ; return ( arr [ x ] ) ; } public static void main ( String [ ] args ) { int y = assignValue ( 3 , 7 , 0 ) ; System . out . println ( y ) ; } }
class GFG { static void print ( int n ) { System . out . println ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; for ( int i = 1 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { int n = 3 ; print ( n ) ; } }
import java . io . * ; class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 4 * n ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) System . out . print ( k + " " ) ; else System . out . print ( 0 + " " ) ; } System . out . println ( ) ; } } }
import java . util . * ;  public class P3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; Map < String , Integer > map = new HashMap ( ) ; int c = 0 ; while ( t -- > 0 ) { String breed = sc . next ( ) ; String color = sc . next ( ) ; String m = breed + '.' + color ; if ( ! map . containsKey ( m ) ) { map . put ( m , 1 ) ; c ++ ; } } System . out . println ( c ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; class solution { static long minimumMoves ( int a [ ] , int n ) { long operations = 0 ; Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) operations += ( long ) Math . abs ( a [ i ] - ( i + 1 ) ) ; return operations ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 3 , 2 } ; int n = arr . length ; System . out . print ( minimumMoves ( arr , n ) ) ; } }
import java . util . * ; public class SubsetMex {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Task { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { System . out . println ( in . nextInt ( ) + in . nextInt ( ) ) ; } } }
import java . io . * ; class GFG { static int minJumps ( int a , int b , int d ) { int temp = a ; a = Math . min ( a , b ) ; b = Math . max ( temp , b ) ; if ( d >= b ) return ( d + b - 1 ) / b ; if ( d == 0 ) return 0 ; if ( d == a ) return 1 ; return 2 ; } public static void main ( String [ ] args ) { int a = 3 , b = 4 , d = 11 ; System . out . println ( minJumps ( a , b , d ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ;  public class Maximal_Continuous_Rest { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long [ ] arr = new long [ ( int ) ( 2 * n ) ] ; List < Long > l = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; }
import java . util . Scanner ;  public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int result = 0 , a , b , c ; a = sc . nextInt ( ) ; b = sc . nextInt ( ) ; c = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( x > b && x < c ) { result ++ ; } } System . out . println ( result ) ;  } }
class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { int g = gcd ( s . nextInt ( ) , s . nextInt ( ) ) ; if ( g > 1 ) { System . out . println ( "Infinite" ) ; } else { System . out . println ( "Finite" ) ; } } } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } }
class Solution { public int [ ] [ ] transpose ( int [ ] [ ] A ) { int R = A . length , C = A [ 0 ] . length ; int [ ] [ ] ans = new int [ C ] [ R ] ; for ( int r = 0 ; r < R ; ++ r ) for ( int c = 0 ; c < C ; ++ c ) { ans [ c ] [ r ] = A [ r ] [ c ] ; } return ans ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Ideone { static long gcd ( long a , long b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }
class GFG { static int setBitNumber ( int n ) { int k = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) ( Math . pow ( 2 , k ) ) ; } public static void main ( String arg [ ] ) { int n = 273 ; System . out . print ( setBitNumber ( n ) ) ; } }
class GFG { static void findEquation ( int a , int b ) { int sum = ( a + b ) ; int product = ( a * b ) ; System . out . println ( "x^2 - (" + sum + "x) + (" + product + ") = 0" ) ; } public static void main ( String args [ ] ) { int a = 2 , b = 3 ; findEquation ( a , b ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;   public class Problem_Solving1 { public static void main ( String [ ] args ) {
class GFG { static void powerSet ( String str , int index , String curr ) { int n = str . length ( ) ; if ( index == n ) { System . out . println ( curr ) ; return ; } powerSet ( str , index + 1 , curr + str . charAt ( index ) ) ; powerSet ( str , index + 1 , curr ) ; } public static void main ( String [ ] args ) { String str = "abc" ; int index = 0 ; String curr = "" ; powerSet ( str , index , curr ) ; } }
import java . io . * ; import java . util . * ;
 import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ;  import static java . lang . System . out ; public class c693a {
class GFG { static int countIntersections ( int n ) { return n * ( n - 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntersections ( n ) ) ; } }
import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . math . RoundingMode ; import java . util . * ; import java . util . concurrent . LinkedBlockingDeque ;   public class scratch_25 {
import java . io . * ;  import java . util . * ; public class Solution {
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . StringTokenizer ;  public class Main {  public static void main ( String [ ] args ) { InputReader in = new InputReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; 
import java . util . * ; public class DZYLovesStrings {  public static void main ( String [ ] args ) {
import java . util . * ;  public class CodeForces914B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] a = new int [ 100000 + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ input . nextInt ( ) ] ++ ; } String ans = "Agasa" ; for ( int i = 1 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 != 0 ) { ans = "Conan" ; break ; } }  System . out . println ( ans ) ;  } }
import java . util . * ; public class Depression {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ;   public class Forces {  public static PrintWriter cout ; public static void main ( String ... arg ) {
import java . io . * ; public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
import java . util . * ; class GFG { public static long rectCount ( int n , int m ) { return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ; } public static void main ( String [ ] args ) { int n = 5 , m = 4 ; System . out . println ( rectCount ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t , s , x ; boolean f = false ; t = sc . nextInt ( ) ; s = sc . nextInt ( ) ; x = sc . nextInt ( ) ; while ( t <= x ) { if ( t == x || t + s == x || t + s + 1 == x ) { System . out . println ( "YES" ) ; f = true ; break ; } t += s ; } if ( ! f ) System . out . println ( "NO" ) ; } }
class GFG { static void check ( int n ) { if ( n % 2 == 1 && n > 5 ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } public static void main ( String [ ] args ) { int a = 3 ; int b = 7 ; check ( a ) ; check ( b ) ; } }
import java . util . * ; class GFG { static int maxSelectionCount ( int a [ ] , int n ) { int res = 0 ; Arrays . sort ( a ) ; int select = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= select ) { res ++ ; select ++ ; } } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 1 , 3 , 5 , 1 , 4 } ; int N = arr . length ; System . out . println ( maxSelectionCount ( arr , N ) ) ; } }
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {
import java . util . * ;  public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ;
import java . util . * ;   public class Practise { 
import java . io . * ; class GFG { static int MaximumHeight ( int [ ] a , int n ) { int result = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int y = ( i * ( i + 1 ) ) / 2 ; if ( y < n ) result = i ; else break ; } return result ; } public static void main ( String [ ] args ) { int [ ] arr = { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ;  public class A { private BufferedReader reader ; private StreamTokenizer tokenizer ;
class GFG { static float Area ( float a ) { if ( a < 0 ) return - 1 ; float x = 0.464f * a ; float A = 0.70477f * ( float ) Math . pow ( x , 2 ) ; return A ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( String . format ( "%.5f" , Area ( a ) ) ) ; } }
class GFG { static int sumOfTheSeries ( int n ) { int sum_n = ( n * ( n + 1 ) / 2 ) ; int sum_sq_n = ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; return ( sum_n + sum_sq_n ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . printf ( "Sum = %d" , sumOfTheSeries ( n ) ) ; } }
 import java . io . * ; import java . util . * ;  public class C335A { static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Kioken sc = new Kioken ( ) ;  public static void main ( String args [ ] ) throws IOException { int t = 1 ;
import java . util . Arrays ; class GFG { static int minXOR ( int arr [ ] , int n ) { Arrays . parallelSort ( arr ) ; int minXor = Integer . MAX_VALUE ; int val = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { val = arr [ i ] ^ arr [ i + 1 ] ; minXor = Math . min ( minXor , val ) ; } return minXor ; } public static void main ( String args [ ] ) { int arr [ ] = { 9 , 5 , 3 } ; int n = arr . length ; System . out . println ( minXOR ( arr , n ) ) ; } }
import java . util . Scanner ; public class Test45 { public static void main ( String [ ] args ) { Scanner Input = new Scanner ( System . in ) ; int n = Input . nextInt ( ) ; int inches = ( n + 1 ) / 3 ; int feet = inches / 12 ; System . out . println ( feet + " " + ( inches - 12 * feet ) ) ; } }
import java . util . * ; import static java . lang . Math . pow ; class Triangle { public static double numberOfTriangles ( int n ) { double ans = 2 * ( pow ( 3 , n ) ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( numberOfTriangles ( n ) ) ; } }
import java . util . * ;
import java . util . * ; public class contest17 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;
import java . util . * ; public class Swim3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long p = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; System . out . println ( Math . min ( ( a - p % a ) % a , Math . min ( ( b - p % b ) % b , ( c - p % c ) % c ) ) ) ; } } }
class GFG { public static int countDyckPaths ( int n ) { int res = 1 ; for ( int i = 0 ; i < n ; ++ i ) { res *= ( 2 * n - i ) ; res /= ( i + 1 ) ; } return res / ( n + 1 ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( "Number of Dyck Paths is " + countDyckPaths ( n ) ) ; } }
import java . util . * ;  public class M_Round_4 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; 
import java . io . * ; class GFG { static int MAX = 100 ; static int summation ( int n ) { return n << ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( summation ( n ) ) ; } }
import java . util . Scanner ; public class Solution { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n > - 2 ) { long div = n + 1 ; int z1 ; int rem ; for ( int i1 = 0 ; i1 < 10 ; i1 ++ ) { z1 = 0 ; div = n + i1 + 1 ; while ( div > 0 ) { rem = ( int ) div % 10 ; div = div / 10 ; if ( rem == 8 ) { z1 ++ ; }
import java . util . * ; import java . lang . * ;
 import java . util . * ;   public class Practise { 
import java . util . * ; public class george { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; if ( ( q - p ) >= 2 ) c ++ ; } System . out . println ( c ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static void removeChar ( String s , char c ) { int j , count = 0 , n = s . length ( ) ; char [ ] t = s . toCharArray ( ) ; for ( int i = j = 0 ; i < n ; i ++ ) { if ( t [ i ] != c ) t [ j ++ ] = t [ i ] ; else count ++ ; } while ( count > 0 ) { t [ j ++ ] = '\0' ; count -- ; } System . out . println ( t ) ; } public static void main ( String [ ] args ) { String s = "geeksforgeeks" ; removeChar ( s , 'g' ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . io . * ; import java . util . * ; 
import java . util . * ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . io . * ; class GFG { static int findNumber ( int n ) { int x = ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + 8 * n - 8 ) ) / 2 ) ; int base = ( x * ( x + 1 ) ) / 2 + 1 ; return n - base + 1 ; } public static void main ( String [ ] args ) { int n = 55 ; System . out . println ( findNumber ( n ) ) ; } }
class Test { static int factorial ( int n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( "Factorial of " + num + " is " + factorial ( 5 ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] visit = new int [ 200 ] ; int count = 0 ;
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static double numberOfDigits ( double n ) { if ( n == 1 ) return 1 ; double d = ( n * Math . log10 ( 1.6180339887498948 ) ) - ( ( Math . log10 ( 5 ) ) / 2 ) ; return Math . ceil ( d ) ; } public static void main ( String [ ] args ) { double i ; for ( i = 1 ; i <= 10 ; i ++ ) System . out . println ( "Number of Digits in F(" + i + ") - " + numberOfDigits ( i ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i == 1 ) { System . out . println ( "2" ) ; } else { System . out . println ( ( long ) i * ( i + 1 ) * ( i + 1 ) - ( i - 1 ) ) ; } } } } 
import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double area_leaf ( double a ) { return ( a * a * ( PI / 2 - 1 ) ) ; } public static void main ( String [ ] args ) { double a = 7 ; System . out . println ( area_leaf ( a ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ; import java . io . * ;  public class A_Elevator {  public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( "input.txt" ) ) ; PrintWriter pw = new PrintWriter ( new File ( "output.txt" ) ) ;
class Test { static boolean canBeSumofConsec ( int n ) { return ( ( ( n & ( n - 1 ) ) != 0 ) && n != 0 ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( canBeSumofConsec ( n ) ? "true" : "false" ) ; } }
class GFG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . cbrt ( n ) ; n -= ( largest * largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 150 ; System . out . print ( countSteps ( n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main {  static int n ; static int [ ] arr ; static int [ ] [ ] dp ;  static int recur ( int L , int R ) { if ( L > R ) return 0 ; if ( L == R ) return 1 ; if ( dp [ L ] [ R ] != - 1 ) return dp [ L ] [ R ] ; int res = Integer . MAX_VALUE ; if ( arr [ L ] == arr [ R ] )
import java . io . * ; class GFG { static int maxProd ( int N ) { if ( N == 0 ) return 1 ; if ( N < 10 ) return N ; return Math . max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; } public static void main ( String [ ] args ) { int N = 390 ; System . out . println ( maxProd ( N ) ) ; } }
import com . sun . security . jgss . GSSUtil ;  import javax . swing . table . AbstractTableModel ; import java . io . * ; import java . util . * ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; 
import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;  public class cp { static BufferedReader br ; static StringTokenizer st ;  public static void main ( String [ ] args ) throws IOException {  br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
import java . util . Arrays ; class GFG { static int maxSum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { sum += a [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
import java . io . * ; class GFG { static void alternateFib ( int n ) { if ( n < 0 ) return ; int f1 = 0 ; int f2 = 1 ; System . out . print ( f1 + " " ) ; for ( int i = 2 ; i <= n ; i ++ ) { int f3 = f2 + f1 ; if ( i % 2 == 0 ) System . out . print ( f3 + " " ) ; f1 = f2 ; f2 = f3 ; } } public static void main ( String [ ] args ) { int N = 15 ; alternateFib ( N ) ; } }
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {
import java . util . * ; public class WizardsDuel {  public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . StringTokenizer ;  public class counting {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;
import java . io . * ; class GFG { static int findevenPair ( int A [ ] , int N ) { int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( A [ i ] % 2 != 0 ) count ++ ; int oddCount = count * ( count - 1 ) / 2 ; return ( N * ( N - 1 ) / 2 ) - oddCount ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 1 , 3 , 2 } ; int n = a . length ; System . out . print ( findevenPair ( a , n ) ) ; } }
import java . util . * ; public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String num = input . next ( ) ; System . out . println ( "25" ) ; } }
import java . io . * ; class GFG { static int findDelta ( int a , int b , int c , int d ) { return ( b * c - a * d ) / ( d - c ) ; } public static void main ( String args [ ] ) { int a = 3 , b = 9 , c = 3 , d = 5 ; System . out . print ( "X = " + findDelta ( a , b , c , d ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int a = s . nextInt ( ) ; while ( ! check ( a ) ) { a ++ ; } System . out . println ( a ) ; } public static boolean check ( int a ) { int sum = 0 ; while ( a > 0 ) { sum += a % 10 ; a = a / 10 ; } return sum % 4 == 0 ;  } }
import java . util . Scanner ;  public class Drinks { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double answear = 0 ; for ( int i = 0 ; i < n ; i ++ ) { answear += sc . nextInt ( ) ; } System . out . println ( answear / n ) ; } }
import java . util . * ; import java . io . * ;
import java . util . Arrays ; import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - k ] ) ; } } 
import java . util . * ; public class LittlePonyandCrystalMine {  public static void main ( String [ ] args ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double a = ( Math . sqrt ( 8 * sc . nextInt ( ) + 1 ) - 1 ) / 2 ; if ( a == ( int ) a ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . util . ArrayList ; import java . util . Scanner ;  public class problem53 {  public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  public class NewClass {  public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 ; 
import java . util . Scanner ;  public class ApproximatingaConstantRange {  static Scanner sc ;  public static void main ( String [ ] args ) {  sc = new Scanner ( System . in ) ;  int n = sc . nextInt ( ) ; 
class GFG { static int grayCode ( int n ) { return n ^ ( n > > 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }
class GFG { static int Divisible ( int arr [ ] , int n ) { int count_even = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] % 2 == 0 ) count_even ++ ; return count_even + ( n - count_even ) / 2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( Divisible ( arr , n ) ) ; } }
import java . io . BufferedReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . StringTokenizer ;  public class robber {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Codeforces {  public static void main ( String [ ] args ) {  Scanner input = new Scanner ( System . in ) ; 
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; int f [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; f [ a [ i ] ] = i ; } if ( f [ 1 ] < f [ n ] ) { System . out . println ( f [ n ] - f [ 1 ] + Math . abs ( Math . max ( f [ 1 ] , n - f [ n ] - 1 ) ) ) ;
import java . io . * ; class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a / n ) * ( b / n ) ; ans += ( a / n ) * ( b % n ) ; ans += ( a % n ) * ( b / n ) ; ans += ( ( a % n ) + ( b % n ) ) / n ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class PaintNumbers { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
public class GFG { static float trianglearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float area = ( float ) ( 3 * Math . sqrt ( 3 ) * Math . pow ( a , 2 ) ) / ( 4 * b ) ; return area ; } public static void main ( String [ ] args ) { float a = 4 , b = 2 ; System . out . println ( trianglearea ( a , b ) ) ; } }
import java . util . * ; import java . lang . * ; class GFG { static int numberOfSolutions ( int n ) { int c = 0 ; for ( int x = 0 ; x <= n ; ++ x ) if ( n == x + ( n ^ x ) ) ++ c ; return c ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . print ( numberOfSolutions ( n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { int k = i ^ j ; if ( k >= i && k >= j && i + j > k && k <= n ) { res ++ ; }
import java . util . * ;  public class balance { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int c1 = 1 << n ; int c2 = 0 ; for ( int i = 1 ; i < n ; ++ i ) { if ( i < n / 2 ) c1 += 1 << i ; else c2 += 1 << i ; }
class GFG { static double pie = 3.1415926535897 ; static double findsolution ( double d , double h , double m , double n ) { double k = ( 4 * m ) / ( pie * d * d ) ; if ( n > k ) return - 1 ; double ans = ( h / ( k - n ) ) ; return ans ; } public static void main ( String [ ] args ) { double d = 1 , h = 1 , m = 1 , n = 1 ; System . out . printf ( "%.5f" , findsolution ( d , h , m , n ) ) ; } }
import java . util . * ;  public class ICPC { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . * ; import java . util . * ; class GFG { static double surface_area_octahedron ( double side ) { return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ; } public static void main ( String [ ] args ) { double side = 7 ; System . out . println ( "Surface area of octahedron =" + surface_area_octahedron ( side ) ) ; } }
public final class p173 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p173 ( ) . run ( ) ) ; } private static final int TILES = 1000000 ; public String run ( ) { int count = 0 ; for ( int n = 3 ; n <= TILES / 4 + 1 ; n ++ ) { for ( int k = n - 2 ; k >= 1 ; k -= 2 ) { if ( ( long ) n * n - ( long ) k * k > TILES ) break ; count ++ ; } } return Integer . toString ( count ) ; } }
import java . util . * ;  public class cPermutation { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;
import java . math . * ; class GFG { static float geometricMean ( int arr [ ] , int n ) { float product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product = product * arr [ i ] ; float gm = ( float ) Math . pow ( product , ( float ) 1 / n ) ; return gm ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = arr . length ; System . out . println ( geometricMean ( arr , n ) ) ; } }
import java . io . * ; class GFG { static long calculateSum ( int n ) { long sum = 0 ; sum = 1 << n ; return ( sum - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( "Sum of all elements:" + calculateSum ( n ) ) ; } }
import com . sun . security . jgss . GSSUtil ; import org . w3c . dom . Node ;  import javax . print . DocFlavor ; import javax . swing . table . AbstractTableModel ; import java . io . * ; import java . util . * ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; 
class GFG { static int nthTerm ( int N ) { int nth = 0 , first_term = 4 ; int pi = 1 , po = 1 ; int n = N ; while ( n > 1 ) { pi *= n - 1 ; n -- ; po *= 2 ; } nth = ( first_term * pi ) / po ; return nth ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . print ( nthTerm ( N ) + "\n" ) ; } }
import java . io . * ; class GFG { static int ways ( int n ) { if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 2 ; } else { return ways ( n - 1 ) + ways ( n - 2 ) ; } } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( "Number of ways = " + ways ( n ) ) ; } }
import java . io . * ; class GFG { static int cost ( String str ) { int len = str . length ( ) ; int res = 0 ; for ( int i = 0 , j = len - 1 ; i < j ; i ++ , j -- ) if ( str . charAt ( i ) != str . charAt ( j ) ) res += Math . min ( str . charAt ( i ) , str . charAt ( j ) ) - 'a' + 1 ; return res ; } public static void main ( String [ ] args ) { String str = "abcdef" ; System . out . println ( cost ( str ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( b + " " + c + " " + c ) ; } } }
class GFG { static long computeXOR ( int n ) { int x = n & 3 ; switch ( x ) { case 0 : return n ; case 1 : return 1 ; case 2 : return n + 1 ; case 3 : return 0 ; } return 0 ; } public static void main ( String args [ ] ) { int l = 1 , r = 4 ; System . out . println ( computeXOR ( r ) ^ computeXOR ( l - 1 ) ) ; } }
class GFG { static void count ( String str1 , String str2 ) { int c = 0 , j = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { if ( str2 . indexOf ( str1 . charAt ( i ) ) >= 0 ) { c += 1 ; } } System . out . println ( "No. of matching characters are: " + c ) ; } public static void main ( String [ ] args ) { String str1 = "aabcddekll12@" ; String str2 = "bb2211@55k" ; count ( str1 , str2 ) ; } }
import java . util . * ;  public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ;  while ( t -- > 0 ) {  int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; boolean result = true ;  if ( ( x < 4 && y > 3 ) || ( x == 1 && y > x ) ) { result = false ; } System . out . println ( result ? "YES" : "NO" ) ; } } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int m = s . nextInt ( ) ; int count = 0 ; if ( m == 0 ) count = 1 ; else { count = Math . min ( m , n - m ) ; } System . out . println ( count ) ; } }
import java . util . * ;  public class practice { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; long k = scn . nextLong ( ) , b = scn . nextLong ( ) , n = scn . nextLong ( ) , t = scn . nextLong ( ) ; long z = 1 , time = 0 ; ; while ( z <= t ) { z = z * k + b ; time ++ ; } long ans = n - time + 1 ; if ( ans < 0 ) { ans = 0 ; } System . out . println ( ans ) ; } } 
class GFG { static int sizeofInt = 8 ; static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } static int unsetLastMBits ( int n , int m ) { int num = ( 1 << ( sizeofInt * 8 - 1 ) ) - 1 ; num = toggleLastMBits ( num , m ) ; return ( n & num ) ; } public static void main ( String [ ] args ) { int n = 150 , m = 4 ; System . out . println ( unsetLastMBits ( n , m ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long a = in . nextLong ( ) ; long b = in . nextLong ( ) ; in . close ( ) ; while ( true ) { if ( a == 0 || b == 0 ) break ; if ( a >= 2 * b ) a %= 2 * b ; else if ( b >= 2 * a ) b %= 2 * a ; else break ; } System . out . println ( a + " " + b ) ; } } 
import java . util . Scanner ;  public class DigestThread {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = in . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( "1 " ) ; } System . out . println ( "" ) ; } } }
class GFG { static long sumAP ( long n , long d ) { n /= d ; return ( n ) * ( 1 + n ) * d / 2 ; } static long sumMultiples ( long n ) { n -- ; return sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ; } public static void main ( String [ ] args ) { long n = 20 ; System . out . println ( sumMultiples ( n ) ) ; } }
import java . util . Scanner ;  public class Vsa {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ; System . out . println ( ( n % 2 == 0 ) ? "Mahmoud" : "Ehab" ) ;  } }
import java . util . Scanner ;  public class A1438 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; StringBuilder output = new StringBuilder ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; for ( int n = 0 ; n < N ; n ++ ) { output . append ( "1 " ) ; } output . append ( '\n' ) ; } System . out . print ( output ) ; }  }
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class Exam { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . util . Arrays ; import java . util . Scanner ;  public class NewMain5 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;   public class Dasha_Stairs_761A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ;  if ( a == 0 && b == 0 ) { System . out . println ( "NO" ) ; } else { int diff = Math . abs ( a - b ) ; if ( diff == 1 || a == b ) { System . out . println ( "YES" ) ; } else System . out . println ( "NO" ) ;  } } }
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) {
import java . io . * ; class GFG { static int countMultiples ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( i % 3 == 0 || i % 7 == 0 ) res ++ ; return res ; } public static void main ( String [ ] args ) { System . out . print ( "Count = " ) ; System . out . println ( countMultiples ( 25 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int l = 0 , h = 0 ; if ( a < b ) { l = a ; h = b ; } else { l = b ; h = a ; } long ans = 0 ; if ( 2 * l >= h ) { ans = 2 * l ; } else { ans = h ; } System . out . println ( ans * ans ) ; } } }
class Solution { static int sum ( int n ) { if ( n == 1 ) { return 2 ; } else { return ( n * ( n + 1 ) + sum ( n - 1 ) ) ; } } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  long n = in . nextLong ( ) ;  if ( n == 1 ) { System . out . println ( - 1 ) ; return ; }  long even ; long odd ; if ( n % 2 == 0 ) { even = n * ( 2 + n ) / 4 ; odd = n * n / 4 ; } else { even = n / 2 * ( 2 + n - 1 ) / 2 ; odd = ( n / 2 + 1 ) * ( 1 + n ) / 2 ; } System . out . println ( even - odd ) ; } }
import java . util . Arrays ; import java . util . Collections ; class Solution { public int minMoves ( int [ ] nums ) { if ( nums . length == 0 ) return 0 ; Arrays . sort ( nums ) ; int min_num = nums [ 0 ] ; int ans = 0 ; for ( int num : nums ) { ans += num - min_num ; } return ans ; } }
import java . io . * ; class GFG { static int countDigits ( int n ) { double ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += Math . log10 ( i ) ; ans = ans * n ; return 1 + ( int ) Math . floor ( ans ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( countDigits ( n ) + "\n" ) ; } }
import java . math . BigDecimal ; import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String str = input . nextLine ( ) ; System . out . println ( new BigDecimal ( str ) . stripTrailingZeros ( ) . toPlainString ( ) + "" ) ; } }
for i in range ( int ( input ( ) ) ) : a , b = map ( int , input ( ) . split ( ) ) print ( 0.5 + a / ( b << 4 ) if 4 * b > a else 1 - b / a if a else 1 )
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ; while ( n != 0 ) { n >>= 1 ; count += 1 ; } return 1 << count ; } public static void main ( String args [ ] ) { int n = 0 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001131A { static public void main ( final String [ ] args ) throws IOException { p001131A . _main ( args ) ; }
import java . io . * ; import java . util . * ; class GFG { static int unitnumber ( int x , int y ) { x = x % 10 ; if ( y != 0 ) y = y % 4 + 4 ; return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ; } public static void main ( String [ ] args ) { int x = 133 , y = 5 ; System . out . println ( unitnumber ( x , y ) ) ; } }
import java . util . ArrayList ; import java . util . List ; class Solution { public List < String > fizzBuzz ( int n ) { List < String > res = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { String tmp = "" ; if ( i % 3 == 0 ) tmp += "Fizz" ; if ( i % 5 == 0 ) tmp += "Buzz" ; if ( tmp . length ( ) == 0 ) tmp += String . valueOf ( i ) ; res . add ( tmp ) ; } return res ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { return ( float ) ( ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c705a {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Random ; import java . util . StringTokenizer ; 
class GFG { static int geometricMean ( int n ) { return ( int ) Math . sqrt ( n ) ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( geometricMean ( n ) ) ; } }
import java . util . Scanner ;  public class Candies {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  int t = in . nextInt ( ) ; int n , sum ;  while ( t -- != 0 ) { n = in . nextInt ( ) ; sum = 1 ;  for ( int i = 2 ; ; i *= 2 ) { sum += i ; if ( n % sum == 0 ) { System . out . println ( n / sum ) ; break ; }  } } }  }
import java . util . * ; public class Hulk { public static void main ( String args [ ] ) { int n = 0 ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; String res = "" ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 != 0 ) res = res + "I hate " ; else res = res + "I love " ; if ( i != n ) res = res + "that " ; } res = res + "it" ; System . out . println ( res ) ; } }
import java . util . Scanner ; import java . util . Stack ;  public class problem49 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class P222A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int j = n - 1 ; while ( j > 0 && a [ j ] == a [ j - 1 ] ) j -- ; System . out . println ( j < k ? j : - 1 ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class problem94 {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; System . out . println ( n * n + ( n - 1 ) * ( n - 1 ) ) ; } }
import java . io . * ; class GFG { static void angleequichord ( int z ) { System . out . println ( "The angle subtended at the center is " + z + " degrees" ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleequichord ( z ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { int ax = 5 , ay = 0 ; int bx = 1 , by = 1 ; int cx = 2 , cy = 5 ; System . out . println ( ax + ( cx - bx ) + ", " + ay + ( cy - by ) ) ; } }
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
import java . util . * ; public class RomaandLuckyNumbers {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class SolutionA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n == 0 ) { System . out . println ( 0 ) ; } else if ( n % 2 == 0 ) { System . out . println ( n + 1 ) ; } else { System . out . println ( ( n + 1 ) / 2 ) ; }  } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; if ( i > 0 ) System . out . print ( ( a [ i - 1 ] + a [ i ] ) + " " ) ; } System . out . print ( a [ n - 1 ] ) ; } }
public class GFG { static float sumOfSeries ( int x , int k ) { float y = ( float ) ( ( ( float ) ( x ) / 81 ) * ( 9 * k - 1 + Math . pow ( 10 , ( - 1 ) * k ) ) ) ; return y ; } public static void main ( String args [ ] ) { int x = 9 ; int k = 20 ; System . out . println ( sumOfSeries ( x , k ) ) ; } }
class GFG { static int solve ( int n , int base ) { int result = 0 ; while ( n > 0 ) { int remainder = n % base ; result = result + remainder ; n = n / base ; } return result ; } static void printSumsOfDigits ( int n ) { for ( int base = 2 ; base < n ; ++ base ) System . out . print ( solve ( n , base ) + " " ) ; } public static void main ( String [ ] args ) { int n = 8 ; printSumsOfDigits ( n ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  public class main {  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class GFG { static int get ( int x , int y , int z ) { if ( x > z ) return - 1 ; int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 5 , z = 8 ; System . out . print ( get ( x , y , z ) + "\n" ) ; } }
class GFG { static double sum ( int x , int n ) { double i , total = 1.0 , multi = x ; for ( i = 1 ; i <= n ; i ++ ) { total = total + multi / i ; multi = multi * x ; } return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "%.2f" , sum ( x , n ) ) ; } }
class GFG { static long evenFib ( int n ) { if ( n < 1 ) return n ; if ( n == 1 ) return 2 ; return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( evenFib ( n ) ) ; } }
import java . util . * ; public class sol { public static void main ( String ar [ ] ) { Scanner scan = new Scanner ( System . in ) ; int test = scan . nextInt ( ) ; while ( test -- > 0 ) { int n = scan . nextInt ( ) ; System . out . print ( 9 ) ; int i = 8 ; n -- ; while ( n -- > 0 ) { System . out . print ( i ) ; i = ( i + 1 ) % 10 ; } System . out . println ( ) ; } } }
import java . text . * ; class GFG { static double p = 1 , f = 1 ; static double e ( int x , int n ) { double r ; if ( n == 0 ) return 1 ; r = e ( x , n - 1 ) ; p = p * x ; f = f * n ; return ( r + p / f ) ; } public static void main ( String [ ] args ) { int x = 4 , n = 15 ; DecimalFormat df = new DecimalFormat ( "0.######" ) ; System . out . println ( df . format ( e ( x , n ) ) ) ; } }
import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . math . RoundingMode ; import java . util . * ; import java . util . concurrent . LinkedBlockingDeque ;   public class scratch_25 {
import java . util . * ; class GfG { static void pattern ( int n ) { int p , k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { p = k ; for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( p ) ; System . out . print ( " " ) ; p = p - ( n + j - i ) ; } System . out . println ( ) ; k = k + 1 + n - i ; } } public static void main ( String [ ] args ) { int n = 5 ; pattern ( n ) ; } }
import java . io . * ; class GFG { static void printGreater ( int x , int y ) { double X = y * Math . log ( x ) ; double Y = x * Math . log ( y ) ; if ( Math . abs ( X - Y ) < 1e-9 ) { System . out . println ( "Equal" ) ; } else if ( X > Y ) { System . out . println ( x + "^" + y ) ; } else { System . out . println ( y + "^" + x ) ; } } public static void main ( String [ ] args ) { int x = 5 , y = 8 ; printGreater ( x , y ) ; } }
import java . sql . ClientInfoStatus ; import java . util . * ;   public class Practise { 
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ;  public class Problem_352B {
import java . util . * ;  public class Monster { public static void main ( String [ ] args ) { int a = 2 ;
public class GFG { static float squareArea ( float l , float b , float h ) { if ( l < 0 || b < 0 || h < 0 ) return - 1 ; float a = ( l * b ) / ( l + b ) ; return a * a ; } public static void main ( String [ ] args ) { float l = 5 , b = 12 , h = 13 ; System . out . println ( squareArea ( l , b , h ) ) ; } }
import java . util . * ; import java . io . * ; public class a {  public static void main ( final String [ ] args ) throws IOException { BufferInput sc = new BufferInput ( ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ;
import java . io . * ; class GFG { static String allBitsSetInTheGivenRange ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; int new_num = n & num ; if ( new_num == 0 ) return "Yes" ; return "No" ; } public static void main ( String [ ] args ) { int n = 17 ; int l = 2 ; int r = 4 ; System . out . println ( allBitsSetInTheGivenRange ( n , l , r ) ) ; } }
 import java . util . * ; import java . io . * ;  public class Main { private static final int N = ( int ) 1e3 + 10 ; public static void main ( String [ ] args ) throws IOException { int t ; StreamTokenizer cin = new StreamTokenizer ( new BufferedReader ( new InputStreamReader ( System . in ) ) ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String n = sc . nextLine ( ) ; String s = sc . nextLine ( ) ; int Lout = 0 , Rout = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == 76 ) { Lout ++ ; } else { Rout ++ ; } } System . out . println ( Rout + Lout + 1 ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class B1452 { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;
import java . io . * ; class GFG { static int mod ( String num , int a ) { int res = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) res = ( res * 10 + ( int ) num . charAt ( i ) - '0' ) % a ; return res ; } public static void main ( String [ ] args ) { String num = "12316767678678" ; System . out . println ( mod ( num , 10 ) ) ; } }
class GFG { static void ifPossible ( int X , int Y ) { if ( X > Y ) swap ( X , Y ) ; if ( ( X + Y ) % 5 == 0 && 3 * X >= 2 * Y ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } static void swap ( int x , int y ) { int temp = x ; x = y ; y = temp ; } public static void main ( String [ ] args ) { int X = 33 , Y = 27 ; ifPossible ( X , Y ) ; } }
import java . util . * ; import java . util . Arrays ; import java . util . Collections ; public class LineToCashier {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static String FirstAndLast ( String str ) { String [ ] arrOfStr = str . split ( " " ) ; String res = "" ; for ( String a : arrOfStr ) { res += a . substring ( 1 , a . length ( ) - 1 ) + " " ; } return res ; } public static void main ( String args [ ] ) { String str = "Geeks for Geeks" ; System . out . println ( str ) ; System . out . println ( FirstAndLast ( str ) ) ; } }
import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ; public class B { public static void main ( String [ ] args ) throws Exception { BufferedReader bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
import java . util . Arrays ; import java . util . Scanner ;  public class _0646Mikeandpalindrome {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; char [ ] arr = s . toCharArray ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) / 2 ; i ++ ) {
import java . util . * ;  public class Practise {  static int [ ] [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; boolean tt = false ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a == 1 ) { tt = true ; } } if ( tt ) System . out . println ( - 1 ) ; else System . out . println ( 1 ) ;    } } 
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; if ( t < k ) { System . out . print ( t ) ; } else if ( t >= k && t <= n ) { System . out . print ( k ) ; } else { System . out . print ( k - ( t - n ) ) ; } } }
import java . util . Scanner ; public class Codeforces { public static Scanner scanner = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; for ( int j = 1 ; j <= n ; j ++ ) { System . out . print ( j + " " ) ; } System . out . println ( ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) != 0 ) res = res + a ; a = a << 1 ; b = b > > 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }
class GFG { static int OR ( int a [ ] , int n ) { int ans = a [ 0 ] ; int i ; for ( i = 1 ; i < n ; i ++ ) { ans |= a [ i ] ; } return ans ; } public static void main ( String args [ ] ) { int a [ ] = { 1 , 4 , 6 } ; int n = a . length ; System . out . println ( OR ( a , n ) ) ; } }
class GFG { static void printPairs ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( "(" + arr [ i ] + ", " + arr [ j ] + ")" + ", " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 } ; int n = arr . length ; printPairs ( arr , n ) ; } }
import java . util . * ; import java . util . Map . Entry ;  import java . math . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws FileNotFoundException { InputReader in = new InputReader ( System . in ) ;
class GFG { static int sumOfDivisblePowers ( int L , int R , int P ) { int res = 0 ; for ( int i = L ; i <= R ; i ++ ) { int x = i ; while ( x % P == 0 ) { res ++ ; x /= P ; } } return res ; } public static void main ( String [ ] args ) { int L = 1 , R = 10 , P = 2 ; System . out . println ( sumOfDivisblePowers ( L , R , P ) ) ; } }
 import java . util . * ; public class f { public static void main ( String [ ] a ) { Scanner sc = new Scanner ( System . in ) ; if ( sc . hasNext ( ) ) { int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( n / 2 ) ;   }  } } }
import java . io . * ; class GFG { static float circleradius ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float r = ( float ) ( ( l * b ) / ( 2 * Math . sqrt ( ( Math . pow ( l , 2 ) + Math . pow ( b , 2 ) ) ) ) ) ; return r ; } public static void main ( String [ ] args ) { float l = 5 , b = 3 ; System . out . print ( circleradius ( l , b ) ) ; } }
import java . util . Scanner ;  public class TestBetter { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a , b , r ; a = input . nextInt ( ) ; b = input . nextInt ( ) ; r = input . nextInt ( ) ;  System . out . println ( ( ( ( 2 * r ) <= a ) && ( ( 2 * r ) <= b ) ) ? "First" : "Second" ) ; } }
import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { n -- ; n |= n > > 1 ; n |= n > > 2 ; n |= n > > 4 ; n |= n > > 8 ; n |= n > > 16 ; n ++ ; return n ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }
import java . util . * ; public class ReplacingElements {  public static void main ( String [ ] args ) {
import java . util . * ; 
import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;  public class pblm3 { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int st = 1 , i = st ; int c = 0 ; List < Integer > al = new ArrayList < Integer > ( ) ; while ( i <= N ) { al . add ( i ) ; c ++ ;
class GFG { static int digSum ( int n ) { if ( n == 0 ) return 0 ; return ( n % 9 == 0 ) ? 9 : ( n % 9 ) ; } static int repeatedNumberSum ( int n , int x ) { int sum = x * digSum ( n ) ; return digSum ( sum ) ; } public static void main ( String [ ] args ) { int n = 24 , x = 3 ; System . out . println ( repeatedNumberSum ( n , x ) ) ; } }
import java . util . * ;  public class LittleArtern {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = "B" ; for ( int j = 0 ; j < m - 1 ; j ++ ) { if ( i == n - 1 ) { s += 'B' ; } else s += 'W' ; } System . out . println ( s ) ; } }  }  }
import java . util . Arrays ; import java . util . Collections ;  import java . util . Scanner ;  public class Problem36 {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int breakSum ( int n ) { if ( n == 0 || n == 1 ) return n ; return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + breakSum ( n / 4 ) ) , n ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( breakSum ( n ) ) ; } }
import java . util . * ;   public class l700 {  public static void main ( String [ ] args ) {
import javax . annotation . processing . SupportedSourceVersion ; import java . io . * ; import java . util . * ; import java . util . regex . Matcher ;  public class Main {  public static void main ( String [ ] args ) throws IOException { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( new FileReader ( "input.txt" ) ) ;
import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;
import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int cnt = 0 ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a < b - 1 ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
class GFG { static int nCr ( int n , int r ) { return fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; } static int fact ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } public static void main ( String [ ] args ) { int n = 5 , r = 3 ; System . out . println ( nCr ( n , r ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;
import java . io . IOException ; import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) throws IOException { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int ans = 0 ; int p = 110 ; for ( int i = 0 ; i < n ; i ++ ) { int a = in . nextInt ( ) ; p = Math . min ( p , in . nextInt ( ) ) ; ans += p * a ; } System . out . println ( ans ) ; } }
import java . io . * ; class GFG { static int centeredoctagonalNumber ( int n ) { return 4 * n * ( n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . print ( n + "th centered " + "octagonal number: " ) ; System . out . println ( centeredoctagonalNumber ( n ) ) ; n = 11 ; System . out . print ( n + "th centered " + "octagonal number: " ) ; System . out . println ( centeredoctagonalNumber ( n ) ) ; } }
import java . util . Scanner ;
import java . util . * ; class GFG { static void solve ( int n ) { int n_2 = n / 2 ; String den ; den = "1" ; while ( n_2 -- > 0 ) den += '0' ; System . out . println ( 1 + "/" + den ) ; } public static void main ( String [ ] args ) { int N = 5 ; solve ( N ) ; } }
import java . io . BufferedReader ;
import java . util . * ; import java . lang . * ; public class x { public static void main ( String [ ] args ) {
class GFG { static int product ( int a [ ] , int n ) { int ans = 1 ; int val = ( int ) Math . pow ( 2 , n - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { ans *= ( int ) Math . pow ( a [ i ] , val ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 2 ; int a [ ] = { 3 , 7 } ; System . out . println ( product ( a , n ) ) ; } }
import java . util . * ;
import java . util . * ;
import java . io . * ; class GFG { static int centered_pentagonal_Num ( int n ) { return ( 5 * n * n - 5 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( n + "th Centered " + "pentagonal number: " ) ; System . out . println ( centered_pentagonal_Num ( n ) ) ; } }
class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "LCM of " + a + " and " + b + " is " + lcm ( a , b ) ) ; } }
import java . io . * ; import java . math . * ; class GFG { static int sumofseries ( int n ) { int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res += ( i ) * ( i + 1 ) * ( i + 2 ) ; return res ; } public static void main ( String [ ] args ) { System . out . println ( sumofseries ( 3 ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; if ( w % 2 == 0 && w != 2 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . io . * ; class GFG { static int seriesSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }
import java . util . * ; public class fence { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long d = a + b + c - 1 ; System . out . println ( d ) ; } } }
import java . io . * ; class GFG { static int nextPowerOf2 ( int n ) { int p = 1 ; if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ; while ( p < n ) p <<= 1 ; return p ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . println ( nextPowerOf2 ( n ) ) ; } }
import java . util . * ; public class M_Round_5 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . Scanner ;  public class _0705BuyingaTVSet { static long gcd ( long a , long b ) {
import sys n , m , c = map ( int , input ( ) . split ( ) ) a = [ ] for i in range ( n + 1 ) : a . append ( 0 ) cnt = 0 while cnt < n : i = 0 x = int ( input ( ) ) if x * 2 <= c : i = 1 while a [ i ] and a [ i ] <= x : i += 1 else : i = n while a [ i ] and a [ i ] >= x : i -= 1 if a [ i ] == 0 : cnt += 1 a [ i ] = x print ( i ) sys . stdout . flush ( )
import java . util . Scanner ;  public class _0717HappyBirthdayPolycarp { static long gen ( int n ) { String s = "" ; for ( int i = 0 ; i < n && s . length ( ) < n ; i ++ ) { s += s + "1" ; }
import java . io . * ; import java . util . * ; import java . lang . * ; public class Main { static InputReader sc ; static PrintWriter pw ; public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; sc = new InputReader ( inputStream ) ; pw = new PrintWriter ( outputStream ) ; solve ( ) ; pw . close ( ) ; }
class GFG { static int smallestMultiple ( int n ) { if ( n == 1 ) return 5 ; return ( int ) ( Math . pow ( 10 , n - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( smallestMultiple ( n ) ) ; } }
import java . util . * ; public class FairNumber { public static int check ( long n ) { long x = n ; while ( x != 0 ) { if ( x % 10 != 0 && n % ( x % 10 ) != 0 ) return - 1 ; x /= 10 ; } return 1 ; }  public static void main ( String [ ] args ) {
import java . util . * ;  public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; double n = input . nextDouble ( ) ; double p = input . nextDouble ( ) ; double q = input . nextDouble ( ) ; double res = p * n / ( p + q ) ; if ( res % 1 != 0 ) System . out . printf ( Locale . UK , "%.4f\n" , res ) ; else System . out . printf ( "%d\n" , ( int ) res ) ; } }
import java . io . * ; class Sums { static void printXYZ ( int n ) { if ( n == 1 ) System . out . println ( - 1 ) ; else { System . out . println ( "x is " + n ) ; System . out . println ( "y is " + ( n + 1 ) ) ; System . out . println ( "z is " + ( n * ( n + 1 ) ) ) ; } } public static void main ( String [ ] args ) { int n = 7 ; printXYZ ( n ) ; } }
import java . util . Scanner ;  public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long a = sc . nextLong ( ) ;
import java . util . Scanner ;  public class A1360 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a > b ) { System . out . println ( 2 * b > a ? 2 * b * 2 * b : a * a ) ; } else { System . out . println ( 2 * a > b ? 2 * a * 2 * a : b * b ) ; } } } }
class GFG { static int index ( int i ) { return 1 + ( i > > 31 ) - ( - i > > 31 ) ; } static void check ( int n ) { String s [ ] = { "negative" , "zero" , "positive" } ; int val = index ( n ) ; System . out . println ( n + " is " + s [ val ] ) ; } public static void main ( String [ ] args ) { check ( 30 ) ; check ( - 20 ) ; check ( 0 ) ; } }
import java . io . * ; class GFG { static int fnMod ( int n ) { int rem = n % 4 ; if ( rem == 0 || rem == 3 ) return 0 ; else if ( rem == 1 || rem == 2 ) return 1 ; return 0 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . print ( fnMod ( n ) ) ; } }
import java . util . * ; class GFG { static int nthDigit ( int a , int n , int b ) { for ( int i = 1 ; i < n ; i ++ ) a = a / b ; return a % b ; } public static void main ( String [ ] args ) { int a = 100 ; int n = 3 ; int b = 4 ; System . out . print ( nthDigit ( a , n , b ) ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . valueOf ( scanner . nextLine ( ) ) ; scanner . nextLine ( ) ; System . out . println ( n + 1 ) ; } }
class Solution { static long getSum ( int n , int d ) { long sum = 0 ; while ( d <= n ) { sum += d ; d += 10 ; } return sum ; } public static void main ( String args [ ] ) { int n = 30 , d = 3 ; System . out . print ( getSum ( n , d ) ) ; } }
import java . util . * ; import java . io . * ; public class MainClass { public static void main ( String [ ] args ) throws IOException {
import javax . swing . plaf . IconUIResource ; import java . util . * ; 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . OutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . UncheckedIOException ; import java . io . Closeable ; import java . io . Writer ; import java . io . OutputStreamWriter ;  public class water { public static void main ( String [ ] args ) {  InputStream inputStream = System . in ;
import java . io . * ; class GFG { static float cube ( float h , float r ) { if ( h < 0 && r < 0 ) return - 1 ; float a = ( h * r * ( float ) Math . sqrt ( 2 ) ) / ( h + ( float ) Math . sqrt ( 2 ) * r ) ; return a ; } public static void main ( String [ ] args ) { float h = 5 , r = 6 ; System . out . println ( cube ( h , r ) ) ; } }
import java . util . * ;  public class Absolutezero {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t1 = sc . nextInt ( ) ; if ( t1 % 2 != 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( int ) Math . pow ( 2 , t1 / 2 ) ) ; }    }  }
import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;  public class absolute { public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main { static class Pair { int a ; int b ; Pair ( int a , int b ) { this . a = a ; this . b = b ; } }  private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class VanyaCubes {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int findNumber ( int n ) { n -- ; int i = 1 ; while ( n >= 0 ) { n -= i ; ++ i ; } return ( n + i ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findNumber ( n ) ) ; } }
import java . io . * ; class GFG { static int fnMod ( int n ) { if ( n % 5 == 1 ) return 4 ; else return 0 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( fnMod ( n ) ) ; n = 11 ; System . out . println ( fnMod ( n ) ) ; } }
import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { public static int countOddSquares ( int n , int m ) { return ( int ) Math . pow ( ( double ) m , 0.5 ) - ( int ) Math . pow ( ( double ) n - 1 , 0.5 ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 100 ; System . out . print ( "Count is " + countOddSquares ( n , m ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  public class Main {  static class Segment { long x1 , y1 , x2 , y2 ; long a , b , c ;
class Main { static int getMissingNo ( int a [ ] , int n ) { int x1 = a [ 0 ] ; int x2 = 1 ; for ( int i = 1 ; i < n ; i ++ ) x1 = x1 ^ a [ i ] ; for ( int i = 2 ; i <= n + 1 ; i ++ ) x2 = x2 ^ i ; return ( x1 ^ x2 ) ; } public static void main ( String args [ ] ) { int a [ ] = { 1 , 2 , 4 , 5 , 6 } ; int miss = getMissingNo ( a , 5 ) ; System . out . println ( miss ) ; } }
import java . util . Scanner ; public class test45 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int inches = ( n + 1 ) / 3 ; int feet = inches / 12 ; System . out . println ( feet + " " + ( inches - 12 * feet ) ) ; } }
import java . util . * ; class GFG { double polyapothem ( double n , double a ) { if ( a < 0 && n < 0 ) return - 1 ; return ( a / ( 2 * java . lang . Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ) ; } public static void main ( String args [ ] ) { double a = 9 , n = 6 ; GFG g = new GFG ( ) ; System . out . println ( g . polyapothem ( n , a ) ) ; } }
import java . util . * ; import java . io . * ;  public class interwoleg { public static int conv ( String s ) { return Integer . parseInt ( s ) ; }  public static void main ( String [ ] args ) throws IOException {
import java . io . * ; class GFG { static float Area ( float a ) { if ( a < 0 ) return - 1 ; float h = ( float ) 1.268 * a ; float A = ( float ) ( 0.70477 * Math . pow ( h , 2 ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( Area ( a ) ) ; } }
import java . util . * ; class GFG { static int sumOfTheSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int k = 1 ; for ( int j = 1 ; j <= i ; j ++ ) { sum += k ; k += 2 ; } } return sum ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( "Sum = " + sumOfTheSeries ( n ) ) ; } }
import java . io . * ; class GFG { static void printGroups ( int n ) { int x = 1 ; int y = n * n ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n / 2 ; j ++ ) { System . out . print ( "{ " + x + ", " + y + "} " ) ; x ++ ; y -- ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int n = 4 ; printGroups ( n ) ; } }
import java . io . * ; class GFG { static int heptagonalNumber ( int n ) { return ( ( 5 * n * n ) - ( 3 * n ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( heptagonalNumber ( n ) ) ; n = 15 ; System . out . println ( heptagonalNumber ( n ) ) ; } }
class demo { public static double sumOfTheSeries ( int n ) { return ( double ) n / ( n + 1 ) ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( sumOfTheSeries ( n ) ) ; } }
import java . io . * ; class GFG { static boolean findGreater ( int x , int y ) { if ( x > y ) { return false ; } else { return true ; } } public static void main ( String [ ] args ) { int x = 4 ; int y = 9 ; if ( findGreater ( x , y ) ) System . out . println ( "1" ) ; else System . out . println ( "2" ) ; } }
import java . util . * ; class solution { static int countPieces ( int N ) { return 2 * N ; } public static void main ( String args [ ] ) { int N = 100 ; System . out . println ( countPieces ( N ) ) ; } }
class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ;  import java . util . * ;  public class A_GENERAL {
import java . lang . * ; import java . lang . Math ; import java . io . * ; class GFG { static double getValue ( double n ) { double result = ( Math . floor ( Math . log ( n + 1 ) / Math . log ( 2 ) ) ) ; return Math . pow ( 2 , result ) ; } public static void main ( String [ ] args ) { double n = 9 ; System . out . println ( getValue ( n ) ) ; n = 1025 ; System . out . println ( getValue ( n ) ) ; } }
import java . util . * ; 
import java . util . * ; public class Main { static long count = 0 ; public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == 'B' ) { count += ( long ) Math . pow ( 2 , i ) ; } } System . out . println ( count ) ; } }
import java . util . Scanner ;  public class TrafficLights {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int r = sc . nextInt ( ) ;  double ans = l * 1.0 / v ; double v1 = ( d * 1.0 / v ) % ( g + r ) ; if ( v1 >= g ) ans += g + r - v1 ;  System . out . println ( ans ) ; } }
import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; import java . io . * ; 
import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) <= 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; } public static void main ( String args [ ] ) { int N = 5041 ; if ( isDivisible ( N ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static int countLattice ( int r ) { if ( r <= 0 ) return 0 ; int result = 4 ; for ( int x = 1 ; x < r ; x ++ ) { int ySquare = r * r - x * x ; int y = ( int ) Math . sqrt ( ySquare ) ; if ( y * y == ySquare ) result += 4 ; } return result ; } public static void main ( String arg [ ] ) { int r = 5 ; System . out . println ( countLattice ( r ) ) ; } }
import java . util . * ; public class MeasuringLengthsInBaden { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int inches = ( n + 1 ) / 3 ; int feets = inches / 12 ; System . out . println ( feets + " " + ( inches - 12 * feets ) ) ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ;  public class Letter { 
import java . io . * ; class GFG { static int findSum ( int N , int K ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) ans += ( i % K ) ; return ans ; } static public void main ( String [ ] args ) { int N = 10 , K = 2 ; System . out . println ( findSum ( N , K ) ) ; } }
import java . util . * ; class GFG { static boolean isPerfectCubeString ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) sum += ( int ) str . charAt ( i ) ; double cr = Math . round ( Math . cbrt ( sum ) ) ; return ( cr * cr * cr == sum ) ; } public static void main ( String [ ] args ) { String str = "ll" ; if ( isPerfectCubeString ( str ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . util . * ; class solution { static long getNthTerm ( long N ) { return ( ( int ) Math . pow ( N , 2 ) + N + 1 ) ; } public static void main ( String arr [ ] ) { long N = 11 ; System . out . println ( getNthTerm ( N ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
class GFG { static int maximum ( int x , int y ) { return ( ( x + y + Math . abs ( x - y ) ) / 2 ) ; } static int minimum ( int x , int y ) { return ( ( x + y - Math . abs ( x - y ) ) / 2 ) ; } public static void main ( String [ ] args ) { int x = 99 , y = 18 ; System . out . println ( "Maximum: " + maximum ( x , y ) ) ; System . out . println ( "Minimum: " + minimum ( x , y ) ) ; } }
import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . math . RoundingMode ; import java . util . * ; import java . util . concurrent . LinkedBlockingDeque ;   public class scratch_25 {
import java . util . * ;  public class CodeForces1175A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long n = input . nextLong ( ) ; long k = input . nextLong ( ) ; long count = 0 ; while ( n >= 1 ) { if ( n >= k ) { count += n % k + 1 ; n /= k ; } else { count += n ; n = 0 ; } } System . out . println ( count ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Comparator ; import java . util . List ;  public class BinaryPalindromes {
class Arraysum { static void pairwiseSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i + 1 < n ; i ++ ) { sum = arr [ i ] + arr [ i + 1 ] ; System . out . print ( sum + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 10 , 15 , 5 , 6 } ; int n = arr . length ; pairwiseSum ( arr , n ) ; } }
import java . util . * ; class GFG { static int distinctCount ( int arr [ ] , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( Math . abs ( arr [ i ] ) ) ; return s . size ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 2 , - 1 , 0 , 1 , 1 } ; int n = arr . length ; System . out . println ( "Count of absolute distinct values : " + distinctCount ( arr , n ) ) ; } }
class GFG { static long countWays ( int n , int k ) { long total = k ; int mod = 1000000007 ; int same = 0 , diff = k ; for ( int i = 2 ; i <= n ; i ++ ) { same = diff ; diff = ( int ) total * ( k - 1 ) ; diff = diff % mod ; total = ( same + diff ) % mod ; } return total ; } public static void main ( String [ ] args ) { int n = 3 , k = 2 ; System . out . println ( countWays ( n , k ) ) ; } }
import java . io . * ; import java . util . * ;    public class A {
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ;    int n = input . nextInt ( ) ;  for ( int i = 0 ; i < n ; i ++ ) { long l = input . nextInt ( ) , r = input . nextInt ( ) ;  System . out . println ( l + " " + l * 2 ) ; } } }
import java . io . * ; class GFG { static void checksum ( int n ) { if ( n % 5 == 0 ) System . out . println ( ( n / 5 - 2 ) + " " + ( n / 5 - 1 ) + " " + ( n / 5 ) + " " + ( n / 5 + 1 ) + " " + ( n / 5 + 2 ) ) ; else System . out . println ( "-1" ) ; } public static void main ( String [ ] args ) { int n = 15 ; checksum ( n ) ; } }
class GFG { static void printGP ( int a , int r , int n ) { int curr_term ; for ( int i = 0 ; i < n ; i ++ ) { curr_term = a * ( int ) Math . pow ( r , i ) ; System . out . print ( curr_term + " " ) ; } } public static void main ( String [ ] args ) { int a = 2 ; int r = 3 ; int n = 5 ; printGP ( a , r , n ) ; } }
import java . io . * ; class GFG { static void reverseFibonacci ( int n ) { int a [ ] = new int [ n ] ; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( int i = 2 ; i < n ; i ++ ) { a [ i ] = a [ i - 2 ] + a [ i - 1 ] ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { System . out . print ( a [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int n = 5 ; reverseFibonacci ( n ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . StringTokenizer ;  public class Main { public static void main ( String [ ] args )
import java . io . * ; class GFG { final int MAX = 1000000 ; static int breakSum ( int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = Math . max ( dp [ i / 2 ] + dp [ i / 3 ] + dp [ i / 4 ] , i ) ; return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 24 ; System . out . println ( breakSum ( n ) ) ; } }
class GFG { static double minRevolutions ( double r , int x1 , int y1 , int x2 , int y2 ) { double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ; return Math . ceil ( d / ( 2 * r ) ) ; } public static void main ( String arg [ ] ) { int r = 2 , x1 = 0 , y1 = 0 ; int x2 = 0 , y2 = 4 ; System . out . print ( ( int ) minRevolutions ( r , x1 , y1 , x2 , y2 ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  public class CF1370A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { System . out . println ( Integer . parseInt ( br . readLine ( ) ) / 2 ) ; } } }
class GFG { static int getPairs ( int a [ ] ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a . length ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Natasha { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . lang . * ; import java . util . * ; import java . io . * ; public class Codechef {  public void solve ( ) throws IOException { FastScanner fs = new FastScanner ( ) ; StringBuilder ans = new StringBuilder ( "" ) ;
import java . util . Arrays ; import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; int topb = - 1 , topc = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; }
import java . util . * ; class GFG { static int cntWays ( String str , int n ) { int x = n + 1 ; int ways = x * x * ( x * x - 1 ) / 12 ; return ways ; } public static void main ( String [ ] args ) { String str = "ab" ; int n = str . length ( ) ; System . out . println ( cntWays ( str , n ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Main { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . util . * ; public class Solution { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int n = sc . nextInt ( ) ; int a = n / 2 ; int b = n / 2 + ( n % 2 ) ; int ans = ( a + 1 ) * ( b + 1 ) ; if ( n % 2 != 0 ) ans *= 2 ; System . out . println ( ans ) ; } }
import java . io . * ; class GFG { static void halfsquare ( int n , int x , int y ) { int half = n / 2 ; if ( ( half == x || half == x - 1 ) && ( half == y || half == y - 1 ) ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } public static void main ( String [ ] args ) { int n = 100 ; int x = 51 , y = 100 ; halfsquare ( n , x , y ) ; } }
import java . util . Scanner ; public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tc = sc . nextInt ( ) ; while ( tc -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2020 <= n / 2020 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } sc . close ( ) ; } }
import java . io . * ; class GFG { static int countNumberOfTriangles ( int n ) { return n * ( n - 1 ) * ( n - 2 ) / 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( countNumberOfTriangles ( n ) ) ; } }
class Solution { public int peakIndexInMountainArray ( int [ ] A ) { int lo = 0 , hi = A . length - 1 ; while ( lo < hi ) { int mid = ( lo + hi ) / 2 ; if ( A [ mid ] < A [ mid + 1 ] ) lo = mid + 1 ; else hi = mid ; } return lo ; } }
class Solution { public int hammingDistance ( int x , int y ) { return Integer . bitCount ( x ^ y ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class Race3 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int x = in . nextInt ( ) ; for ( int i = 1 ; i <= x ; i ++ ) { for ( int j = 1 ; j <= x ; j ++ ) { if ( i % j == 0 && i * j > x && i / j < x ) { System . out . println ( i + " " + j ) ; System . exit ( 0 ) ; } } } System . out . println ( - 1 ) ; } }
import java . util . Arrays ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . TreeMap ;  public class orderBook {  public static void main ( String [ ] args ) {
import java . util . * ; import java . util . Scanner ; public class Blackjack { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) - 10 ; if ( n < 1 || n > 11 ) System . out . print ( 0 ) ; else if ( n == 10 ) System . out . print ( 15 ) ; else System . out . print ( 4 ) ; } }
import java . io . * ; class GFG { static void findAngle ( int n ) { int interiorAngle , exteriorAngle ; interiorAngle = ( n - 2 ) * 180 / n ; exteriorAngle = 360 / n ; System . out . println ( "Interior angle: " + interiorAngle ) ; System . out . println ( "Exterior angle: " + exteriorAngle ) ; } public static void main ( String [ ] args ) { int n = 10 ; findAngle ( n ) ; } }
class GFG { static int sum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) / 3 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ;  public class Practice  { static FastReader sc = new FastReader ( ) ; public static void main ( String [ ] args ) { int ttt = 1 ;
import java . util . * ; import java . io . * ; public class Solution { static void merge ( long arr [ ] , int l , int m , int r ) {
public class GFG { static double sum ( int x , int n ) { double total = 1.0 ; double previous = 1.0 ; for ( int i = 1 ; i <= n ; i ++ ) { previous = ( previous * x ) / ( i + 1 ) ; total = total + previous ; } return total ; } public static void main ( String [ ] args ) { int x = 5 , n = 4 ; System . out . print ( "Sum is: " + sum ( x , n ) ) ; } }
import java . util . * ;  public class dDiversity { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String s = scan . next ( ) ; int k = scan . nextInt ( ) ; int counter = 0 ; if ( s . length ( ) < k ) { System . out . println ( "impossible" ) ; } else { int [ ] AtoZcount = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { AtoZcount [ s . charAt ( i ) - 'a' ] ++ ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int l = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int d = scan . nextInt ( ) ; int t = 0 ; for ( int i = 1 ; i <= d ; i ++ ) { if ( i % k == 0 || i % l == 0 || i % m == 0 || i % n == 0 ) ; else t ++ ; } System . out . print ( ( d - t ) ) ; } }
import java . util . Scanner ;  public class LightOnNight { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;  int n = scan . nextInt ( ) * scan . nextInt ( ) ; int count = 0 ;  for ( int i = 0 ; i < n ; i ++ ) { int sum = scan . nextInt ( ) + scan . nextInt ( ) ;  if ( sum > 0 ) count ++ ; } System . out . println ( count ) ; } }
import java . io . * ; class GFG { static void perfectSquares ( int l , int r ) { for ( int i = l ; i <= r ; i ++ ) { if ( Math . sqrt ( i ) == ( int ) Math . sqrt ( i ) ) System . out . print ( i + " " ) ; } } public static void main ( String [ ] args ) { int l = 2 , r = 24 ; perfectSquares ( l , r ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ;  public class ICPC { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ;  for ( int i = 1 ; i <= t ; i ++ ) { long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; long c = 0 ;
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main {  private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int x1 = in . nextInt ( ) ; int x2 = in . nextInt ( ) ; int x3 = in . nextInt ( ) ; int max = Math . max ( x1 , Math . max ( x2 , x3 ) ) ; int min = Math . min ( x1 , Math . min ( x2 , x3 ) ) ;  System . out . println ( max - min ) ;   }  }  
 import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int t , n ; t = sc . nextInt ( ) ; if ( t < 3 ) System . out . println ( t ) ; else System . out . println ( 1 ) ; } catch ( Exception e ) { } } }
import java . util . Scanner ;  public class A638 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int A = in . nextInt ( ) ; int answer ; if ( A % 2 == 0 ) { answer = ( ( N + 2 ) - A ) / 2 ; } else { answer = ( A + 1 ) / 2 ; } System . out . println ( answer ) ; }  }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; if ( n % 3 == 0 ) System . out . println ( "1 1 " + ( n - 2 ) ) ; else System . out . println ( "1 2 " + ( n - 3 ) ) ; } }
class GFG { static int longestPrefixSuffix ( String s ) { int n = s . length ( ) ; if ( n < 2 ) { return 0 ; } int len = 0 ; int i = n / 2 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { ++ len ; ++ i ; } else { if ( len == 0 ) { ++ i ; } else { -- len ; } } } return len ; } public static void main ( String [ ] args ) { String s = "blablabla" ; System . out . println ( longestPrefixSuffix ( s ) ) ; } }
import java . io . * ; class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
class Solution { public ListNode middleNode ( ListNode head ) { ListNode fast , slow ; fast = slow = head ; while ( fast != null && fast . next != null ) { slow = slow . next ; fast = fast . next . next ; } return slow ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int total = n - 1 ; int ans = 1 ; for ( int i = 1 ; i <= total ; i ++ ) { ans += i ; if ( ans > n ) { ans = ans % n ; } if ( i == total ) { System . out . print ( ans ) ; } else { System . out . print ( ans + " " ) ; } } System . out . println ( ) ; scan . close ( ) ; }  }
class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; } public static void main ( String [ ] args ) { int N = 2795 ; if ( isDivisible ( N ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . util . Scanner ;  public class Codeforces {  public static void main ( String [ ] args ) {  Scanner input = new Scanner ( System . in ) ; 
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < 25 ; i ++ ) { if ( scan . nextInt ( ) == 1 ) { a = i % 5 ; b = i / 5 ; } } System . out . println ( Math . abs ( a - 2 ) + Math . abs ( b - 2 ) ) ; } }   
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ;
import java . io . * ; class GFG { static void printReverseFloyd ( int n ) { int curr_val = n * ( n + 1 ) / 2 ; for ( int i = n ; i >= 1 ; i -- ) { for ( int j = i ; j >= 1 ; j -- ) { System . out . printf ( "%2d  " , curr_val -- ) ; } System . out . println ( "" ) ; } } public static void main ( String [ ] args ) { int n = 7 ; printReverseFloyd ( n ) ; } }
import java . io . * ; import java . util . * ;  public class Diary {
class GFG { static void shuffle ( int N , int key ) { int NO_OF_BITS = N ; int reverse_num = 0 , temp ; for ( int i = 0 ; i < NO_OF_BITS ; i ++ ) { temp = ( key & ( 1 << i ) ) ; if ( temp > 0 ) reverse_num |= ( 1 << ( ( NO_OF_BITS - 1 ) - i ) ) ; } System . out . print ( reverse_num ) ; } public static void main ( String [ ] args ) { int N = 3 ; int key = 3 ; shuffle ( N , key ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {  int n ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ;  int l = n / 2 + 1 , r = n / 2 - 1 ;
class GFG { static int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; static int multiply ( int a [ ] , int n ) { if ( n == 0 ) return ( a [ n ] ) ; else return ( a [ n ] * multiply ( a , n - 1 ) ) ; } public static void main ( String [ ] args ) { System . out . println ( multiply ( arr , arr . length - 1 ) ) ; } }
class Test { static boolean isTidy ( int num ) { int prev = 10 ; while ( num != 0 ) { int rem = num % 10 ; num /= 10 ; if ( rem > prev ) return false ; prev = rem ; } return true ; } public static void main ( String [ ] args ) { int num = 1556 ; System . out . println ( isTidy ( num ) ? "Yes" : "No" ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int n = scn . nextInt ( ) ; int ans = ( n / 2 ) * 3 ; System . out . println ( ans ) ; } }
class GFG { static boolean isWordPresent ( String sentence , String word ) { String [ ] s = sentence . split ( " " ) ; for ( String temp : s ) { if ( temp . compareTo ( word ) == 0 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String s = "Geeks for Geeks" ; String word = "Geeks" ; if ( isWordPresent ( s , word ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
class GFG { static int countNumbers ( int x , int n ) { if ( x > n ) return 0 ; return 1 + countNumbers ( x * 10 , n ) + countNumbers ( x * 10 + 1 , n ) ; } public static void main ( String [ ] args ) { int n = 120 ; System . out . println ( countNumbers ( 1 , n ) ) ; } }
import java . io . * ; class GFG { static int minimumMoves ( int k , int l , int r ) { int count = r - l + 1 ; if ( count % k == 0 ) return 0 ; return ( k - ( count % k ) ) ; } public static void main ( String [ ] args ) { int k = 3 , l = 10 , r = 10 ; System . out . print ( minimumMoves ( k , l , r ) ) ; } }
import java . util . * ; import java . math . * ; public class ReachableNumbers { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; ArrayList < Long > arr = new ArrayList < > ( ) ; long n = sc . nextLong ( ) ; while ( ! arr . contains ( n ) ) { arr . add ( n ) ; n = f ( n ) ; } System . out . println ( arr . size ( ) ) ; } static long f ( long x ) { x += 1 ; while ( x % 10 == 0 ) x /= 10 ; return x ; }  }
import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; import java . util . Stack ;  public class test {  public static void main ( String [ ] args ) throws FileNotFoundException {
import java . util . * ; public class test { public static void main ( String args [ ] ) { int x = 0 , mx = 0 ; Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , s = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; x += a [ i ] ; if ( mx < a [ i ] ) mx = a [ i ] ; } if ( s >= x - mx ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . util . * ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = 0 ; for ( int i = 0 ; i < a ; i ++ ) { b += Math . abs ( in . nextInt ( ) ) ; } System . out . println ( b ) ; } }
import java . io . * ; class GFG { static void solve ( int A , int B ) { int count = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { if ( ( ( A > > i ) & 1 ) != ( ( B > > i ) & 1 ) ) { count ++ ; } } System . out . println ( "Number of different bits : " + count ) ; } public static void main ( String [ ] args ) { int A = 12 , B = 15 ; solve ( A , B ) ; } }
class GFG { static double longestRodInCuboid ( int length , int breadth , int height ) { double result ; int temp ; temp = length * length + breadth * breadth + height * height ; result = Math . sqrt ( temp ) ; return result ; } public static void main ( String [ ] args ) { int length = 12 , breadth = 9 , height = 8 ; System . out . println ( ( int ) longestRodInCuboid ( length , breadth , height ) ) ; } }
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) { int T = nextInt ( ) ;
import java . lang . * ; import java . util . * ; class GFG { static boolean func ( int a [ ] , int k ) { for ( int i = 0 ; i < a . length ; i ++ ) if ( a [ i ] % k == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { int [ ] a = { 14 , 27 , 38 , 76 , 84 } ; int k = 19 ; boolean res = func ( a , k ) ; System . out . println ( res ) ; } }
 import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; while ( input . hasNext ( ) ) { int n = input . nextInt ( ) ; System . out . println ( ( n + 1 ) / 2 - 1 ) ; } } } 
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) throws Exception { int [ ] nlr = in . readA ( ) ; int n = nlr [ 0 ] , l = nlr [ 1 ] , r = nlr [ 2 ] ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) throws IOException {
import java . lang . reflect . Array ; import java . util . * ;  public class Main { private static Scanner in = new Scanner ( System . in ) ; 
import java . io . * ; class GFG { static int setBitNumber ( int n ) { if ( n == 0 ) return 0 ; int msb = 0 ; while ( n != 0 ) { n = n / 2 ; msb ++ ; } return ( 1 << msb ) ; } public static void main ( String [ ] args ) { int n = 0 ; System . out . println ( setBitNumber ( n ) ) ; } }
import java . util . * ; class GFG { static int minAbsDiff ( int n ) { int left = ( int ) Math . pow ( 2 , ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; } public static void main ( String args [ ] ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int sum = m ; int r = 0 ; while ( n != 0 ) { n -- ; int a = in . nextInt ( ) ; if ( sum + a > m ) { r ++ ; sum = a ; } else sum = sum + a ; } System . out . println ( r ) ; } }
public class GFG { static int SquareCube ( long N ) { int cnt = 0 , i = 1 ; while ( ( int ) ( Math . pow ( i , 6 ) ) <= N ) { ++ cnt ; ++ i ; } return cnt ; } public static void main ( String [ ] args ) { long N = 100000 ; System . out . println ( SquareCube ( N ) ) ; } }
import java . util . Scanner ;   public class Main { static final int M = 1010 ;  public static void main ( String [ ] args ) {
 import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;   public class file {  
import java . io . * ; import java . util . * ; import java . lang . * ;  public class Main {  public static void main ( String [ ] args ) { FastReader in = new FastReader ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;
import java . util . * ; public class Soroban {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int previousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . round ( a ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( previousFibonacci ( n ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s ; int x = 0 , n , flag ; n = scanner . nextInt ( ) ; s = scanner . next ( ) ; while ( s . contains ( "xxx" ) ) { s = s . replaceFirst ( "xxx" , "xx" ) ; x ++ ; } System . out . println ( x ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int minAbsDiff ( int n ) { int left = 1 << ( ( int ) Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String str = scan . nextLine ( ) ;  StringBuilder sb = new StringBuilder ( str ) ; String rev = sb . reverse ( ) . toString ( ) ;  System . out . println ( str + rev ) ; } }
from math import gcdn , m = map ( int , input ( ) . split ( ) ) a = list ( map ( int , input ( ) . split ( ) ) ) b = list ( map ( int , input ( ) . split ( ) ) ) d = 0f or i in range ( 1 , n ) : d = gcd ( d , abs ( a [ i ] - a [ i - 1 ] ) ) ans = [ gcd ( d , a [ 0 ] + elm ) for elm in b ] print ( * ans )
class Solution { public TreeNode searchBST ( TreeNode root , int val ) { while ( root != null && root . val != val ) { root = val < root . val ? root . left : root . right ; } return root ; } }
import java . util . Scanner ; import java . lang . Math ; import java . util . Arrays ;  public class pa { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = sc . nextInt ( ) ; System . out . println ( n / 2 ) ; } } }
import java . util . * ;  public class test { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; short a = scanner . nextShort ( ) ; short b = scanner . nextShort ( ) ; short counter = 0 ;  while ( a <= b ) { a = ( short ) ( a * 3 ) ; b = ( short ) ( b * 2 ) ; counter ++ ; } System . out . println ( counter ) ;  }  }
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; System . out . println ( a [ n / 2 ] ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { int jugador1 , jugador2 , lanzamientos1 , lanzamientos2 ; Scanner teclado = new Scanner ( System . in ) ; jugador1 = teclado . nextInt ( ) ; jugador2 = teclado . nextInt ( ) ; if ( jugador1 > jugador2 ) { System . out . println ( "First" ) ; } else { System . out . println ( "Second" ) ; } }  } 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  public class CF579A { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int x = Integer . parseInt ( br . readLine ( ) ) ; int set_bits = 0 ; while ( x != 0 ) { set_bits += x & 1 ; x >>= 1 ; } System . out . print ( set_bits ) ; } }
import java . io . * ; class GFG { static double areaOctagon ( double side ) { return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * side ) ; } public static void main ( String arg [ ] ) { double side = 4 ; System . out . print ( "Area of Regular Octagon = " + areaOctagon ( side ) ) ; } }
import java . io . * ; class GFG { static long sumAP ( long n , long d ) { n = ( int ) n / d ; return ( n ) * ( 1 + n ) * d / 2 ; } static long sumMultiples ( long n , long a , long b ) { n -- ; return sumAP ( n , a ) + sumAP ( n , b ) - sumAP ( n , a * b ) ; } public static void main ( String [ ] args ) { long n = 10 , a = 3 , b = 5 ; System . out . println ( sumMultiples ( n , a , b ) ) ; } }
import java . util . Scanner ;  public class A1455 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String n = scanner . next ( ) ; System . out . println ( n . length ( ) ) ; } } }
import java . io . * ; class GFG { public static void printPascal ( int n ) { for ( int line = 1 ; line <= n ; line ++ ) { int C = 1 ; for ( int i = 1 ; i <= line ; i ++ ) { System . out . print ( C + " " ) ; C = C * ( line - i ) / i ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int n = 5 ; printPascal ( n ) ; } }
import java . io . * ; import java . util . * ;  public class B_Battleship { public static void main ( String [ ] args ) throws Exception { int [ ] nk = in . readA ( ) ; int n = nk [ 0 ] , k = nk [ 1 ] ; int [ ] [ ] mat = new int [ n ] [ n ] ; char [ ] [ ] inpMat = new char [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { inpMat [ i ] = in . readLine ( ) . toCharArray ( ) ; }
import java . util . * ; import java . lang . * ; public class GfG { static int evenSum ( int n ) { int curr = 2 , sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += curr ; curr += 2 ; } return sum ; } public static void main ( String argc [ ] ) { int n = 20 ; System . out . println ( "Sum of first " + n + " Even numbers is: " + evenSum ( n ) ) ; } }
import java . io . * ; class GFG { static void findSeries ( int num , int first , int sec ) { System . out . print ( first + " " + sec + " " ) ; int counter = 0 , sum ; while ( counter < num - 2 ) { sum = first + sec ; System . out . print ( sum + " " ) ; first = sec ; sec = sum ; counter ++ ; } } public static void main ( String [ ] args ) { int n = 5 , first = 2 , sec = 4 ; findSeries ( n , first , sec ) ; } }
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) { int T = nextInt ( ) ;
import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class Codeforces { public static void main ( String [ ] args ) throws UnsupportedEncodingException , IOException , Exception { StringBuilder out = new StringBuilder ( ) ; StringTokenizer tk ; Reader . init ( System . in ) ; Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; import java . math . * ; import java . lang . * ; import javafx . util . Pair ;  public class gfg { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int max = Math . max ( n , m ) ; int min = Math . min ( n , m ) ; System . out . println ( max - 1 + " " + min ) ; } }
class GFG { static void findNthTerm ( int N ) { int ans ; if ( N % 2 == 0 ) { ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; } else { ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; } System . out . print ( ans + "\n" ) ; } public static void main ( String [ ] args ) { int N = 3 ; findNthTerm ( N ) ; } }
import java . util . * ; import java . io . * ;  public class Main { private static final int N = ( int ) 1e3 + 10 ; public static void main ( String [ ] args ) throws IOException { int t ;
import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] | arr [ j ] ; return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , n ) ) ; } }
class GFG { static int XorAscii ( String str , int len ) { int ans = ( str . charAt ( 0 ) ) ; for ( int i = 1 ; i < len ; i ++ ) { ans = ( ans ^ ( ( str . charAt ( i ) ) ) ) ; } return ans ; } public static void main ( String [ ] args ) { String str = "geeksforgeeks" ; int len = str . length ( ) ; System . out . print ( XorAscii ( str , len ) + "\n" ) ; str = "GfG" ; len = str . length ( ) ; System . out . print ( XorAscii ( str , len ) ) ; } }
import java . util . Collections ;    import java . util . * ; import java . lang . * ; import java . io . * ; import java . util . Arrays ;  public class CodeChef { public static void merge ( int arr [ ] , int l , int m , int r ) {
class GFG { static float noOfYears ( int t1 , int n1 , int t2 ) { float years = ( ( t2 - 1 ) * n1 / ( float ) ( t1 - 1 ) ) ; return years ; } public static void main ( String [ ] args ) { int T1 = 3 , N1 = 5 , T2 = 6 ; System . out . println ( noOfYears ( T1 , N1 , T2 ) ) ; } }
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ;
import java . io . * ; class GFG { static int totalSumDivisibleByNum ( int n , int number ) { int firstnum = ( int ) Math . pow ( 10 , n - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , n ) ; int sum = 0 ; for ( int i = firstnum ; i < lastnum ; i ++ ) if ( i % number == 0 ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int n = 3 , num = 7 ; System . out . println ( totalSumDivisibleByNum ( n , num ) ) ; } }
import java . io . * ; class GFG { static int sumOdd ( int n ) { int terms = ( n + 1 ) / 2 ; int sum = terms * terms ; return sum ; } static int suminRange ( int l , int r ) { return sumOdd ( r ) - sumOdd ( l - 1 ) ; } public static void main ( String [ ] args ) { int l = 2 , r = 5 ; System . out . print ( "Sum of odd natural numbers from L to R is " + suminRange ( l , r ) ) ; } }
import java . io . BufferedReader ;  import java . io . IOException ; import java . io . InputStreamReader ; import java . math . BigInteger ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Scanner ;  public class test { 
import java . io . * ; class GFG { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + 2 * n - 5 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ;  public class questionCF { public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ;  int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ;  int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; ; System . out . println ( a [ n - k ] ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class Zad940B {  public static void main ( String [ ] args ) {
public final class p120 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p120 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int a = 3 ; a <= 1000 ; a ++ ) sum += a * ( a - ( a % 2 == 0 ? 2 : 1 ) ) ; return Integer . toString ( sum ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;  public static void main ( String [ ] args ) {
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import com . sun . corba . se . spi . orbutil . fsm . Guard . Result ; class Solution { public String toHex ( int num ) { String hex_map = "0123456789abcdef" ; if ( num == 0 ) return "0" ; String res = "" ; while ( num != 0 && res . length ( ) < 8 ) { res = hex_map . charAt ( num & 15 ) + res ; num = num > > 4 ; } return res ; } }
public class GFG { public static void SubString ( String str , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) System . out . println ( str . substring ( i , j ) ) ; } public static void main ( String [ ] args ) { String str = "abcd" ; SubString ( str , str . length ( ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
class GFG { static void find_numbers ( int N ) { if ( N == 1 ) { System . out . print ( - 1 ) ; } else { System . out . print ( N + " " + ( N + 1 ) + " " + ( N * ( N + 1 ) ) ) ; } } public static void main ( String [ ] args ) { int N = 5 ; find_numbers ( N ) ; } }
import java . math . * ; import java . util . * ; public class MagicalCalender { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int runs = sc . nextInt ( ) ; while ( runs -- > 0 ) { long n = sc . nextLong ( ) ; long r = sc . nextLong ( ) ; long out = 1 ; if ( r < n ) out = r * ( r + 1 ) / 2 ; else { out = n * ( n - 1 ) / 2 + 1 ; } System . out . println ( out ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( 2 * l <= r ) { System . out . printf ( "%d %d\n" , l , 2 * l ) ; } else { System . out . print ( "-1 -1\n" ) ; } } } } }
class GFG { static long getMinNum ( int N ) { int lcm = 1 ; for ( int i = 2 ; i <= N ; i ++ ) lcm = ( ( i * lcm ) / ( __gcd ( i , lcm ) ) ) ; return ( lcm + 1 ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } public static void main ( String args [ ] ) { int N = 5 ; System . out . println ( getMinNum ( N ) ) ; } }
class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static void flip ( int a , int b ) { int lcm = ( a * b ) / gcd ( a , b ) ; a = lcm / a ; b = lcm / b ; System . out . print ( ( a - 1 ) + " " + ( b - 1 ) ) ; } public static void main ( String [ ] args ) { int a = 10 ; int b = 5 ; flip ( a , b ) ; } }
import java . util . Scanner ;  public class DigitCounter { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  long n = scanner . nextLong ( ) ; long count = 0 ;  for ( int i = 1 ; i <= n ; i *= 10 ) { count += n - i + 1 ; }  System . out . println ( count ) ; } }
import java . util . * ; class solution { static float surfaceArea ( float a , float b , float h ) { return 5 * a * b + 5 * b * h ; } static float volume ( float b , float h ) { return ( 5 * b * h ) / 2 ; } public static void main ( String arr [ ] ) { float a = 5 ; float b = 3 ; float h = 7 ; System . out . println ( "surface area= " + surfaceArea ( a , b , h ) + ", " ) ; System . out . println ( "volume= " + volume ( b , h ) ) ; } }
import java . util . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int result = 2 + ( ( n / 2 ) - 1 ) ; System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String str = s . next ( ) ; int n = str . length ( ) , ca = 0 , co = 0 ; char [ ] a = str . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 'a' ) ca ++ ; else co ++ ; while ( co >= ca ) co -- ; System . out . println ( co + ca ) ; } }
import java . io . * ; class GFG { static float Time ( float arr [ ] , int n , float Emptypipe ) { float fill = 0 ; for ( int i = 0 ; i < n ; i ++ ) fill += 1 / arr [ i ] ; fill = fill - ( 1 / ( float ) Emptypipe ) ; return 1 / fill ; } public static void main ( String [ ] args ) { float arr [ ] = { 12 , 14 } ; float Emptypipe = 30 ; int n = arr . length ; System . out . println ( ( int ) ( Time ( arr , n , Emptypipe ) ) + " Hours" ) ; } }
import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long k = sc . nextLong ( ) ; long sz = 1 ;
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { long x = s . nextLong ( ) ; long y = s . nextLong ( ) ; String ans = "YES" ; if ( x - y == 1 ) { ans = "NO" ; } System . out . println ( ans ) ; } } }
import java . io . * ; class GFG { static String decToBin ( int n ) { if ( n == 0 ) return "0" ; String bin = "" ; while ( n > 0 ) { bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ; n >>= 1 ; } return bin ; } public static void main ( String [ ] args ) { int n = 38 ; System . out . println ( decToBin ( n ) ) ; } }
 import java . io . * ; import java . util . * ; import java . util . ArrayList ;   public class CryOut {   public static void main ( String [ ] args ) { InputStream stream = System . in ; PrintWriter out = new PrintWriter ( System . out ) ; FastReader sc = new FastReader ( stream ) ;
import java . util . Scanner ;  public class NearestInterestingNumber {  public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; for ( int i = n ; i <= 10000 ; i ++ ) { String s = String . valueOf ( i ) ; int sum = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { sum += s . charAt ( j ) - '0' ; } if ( sum % 4 == 0 ) { System . out . println ( i ) ; break ; } } }  }
import java . io . * ; import java . util . * ; import java . math . * ; import java . awt . Point ; public class Main { static final long MOD = 1000000007L ;
class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static void FindRatio ( int a , int b , int c ) { int up = Math . abs ( b - c ) ; int down = Math . abs ( c - a ) ; int g = gcd ( up , down ) ; up /= g ; down /= g ; System . out . println ( up + ":" + down ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 10 , c = 6 ; FindRatio ( a , b , c ) ; } }
import java . lang . Math ; class GFG { static float Area ( float r ) { if ( r < 0 ) return - 1 ; float x = ( 2 * r ) / ( float ) ( Math . sqrt ( 5 ) ) ; float A = 0.70477f * ( float ) ( Math . pow ( x , 2 ) ) ; return A ; } public static void main ( String [ ] args ) { float r = 5 ; System . out . println ( Area ( r ) ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001031A { static public void main ( final String [ ] args ) throws IOException { p001031A . _main ( args ) ; }
import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String letters = "abcdefghijklmnopqrstuvwxyz" ; String password = "" ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { password += letters . charAt ( t ) ; t ++ ; if ( t >= k ) { t = 0 ; } } System . out . println ( password ) ; } }
import java . lang . Math ; import java . io . * ; class GFG { static double calculateSide ( double n , double r ) { double theta , theta_in_radians ; theta = 360 / n ; theta_in_radians = theta * 3.14 / 180 ; return 2 * r * Math . sin ( theta_in_radians / 2 ) ; } public static void main ( String [ ] args ) { double n = 3 ; double r = 5 ; System . out . println ( calculateSide ( n , r ) ) ; } }
import java . io . * ; class GFG { static void newvol ( double x ) { System . out . print ( "percentage increase " + "in the volume of the cube is " + ( Math . pow ( x , 3 ) / 10000 + 3 * x + ( 3 * Math . pow ( x , 2 ) ) / 100 ) ) ; System . out . print ( "%" ) ; } public static void main ( String [ ] args ) { double x = 10 ; newvol ( x ) ; } }
import java . util . LinkedHashSet ; import java . util . Scanner ; public class A { public static int sol ( int x ) { x += 1 ; while ( x % 10 == 0 ) { x /= 10 ; } return x ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; LinkedHashSet < Integer > h = new LinkedHashSet < > ( ) ; while ( ! h . contains ( n ) ) { h . add ( n ) ; n = sol ( n ) ; }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long a = s . nextLong ( ) ; long b = s . nextLong ( ) ; long ans = 1L ; if ( b - a >= 10 ) { System . out . println ( "0" ) ; } else { for ( long i = a + 1 ; i <= b ; i ++ ) { ans = ans * ( i % 10 ) ; } ans = ans % 10 ; System . out . println ( ans ) ; } } }
import java . util . * ; import java . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int m = sc . nextInt ( ) ;
import java . io . * ; class GFG { static double PI = 3.14 ; static double areaOfInscribedCircle ( float a ) { return ( PI / 4 ) * a * a ; } public static void main ( String [ ] args ) { float a = 8 ; System . out . println ( "Area of an inscribed" + " circle: " + areaOfInscribedCircle ( a ) ) ; } }
import java . io . * ; import java . lang . * ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . BufferedReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . io . IOException ; import java . util . Arrays ; import java . util . Random ; import java . util . StringTokenizer ; import java . math . BigInteger ;  public class Birthday {
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; public class contest14 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long c = 0 ; long gcd = gcd ( x , y ) ; x = x / gcd ; y = y / gcd ; long a1 = a / x ; long a2 = b / y ; System . out . println ( Math . min ( a1 , a2 ) ) ;
import java . util . * ; class GFG { public static int findMinRec ( int A [ ] , int n ) { if ( n == 1 ) return A [ 0 ] ; return Math . min ( A [ n - 1 ] , findMinRec ( A , n - 1 ) ) ; } public static void main ( String args [ ] ) { int A [ ] = { 1 , 4 , 45 , 6 , - 50 , 10 , 2 } ; int n = A . length ; System . out . println ( findMinRec ( A , n ) ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ; import java . io . * ;  public class TokitsukazeCSLandStoneGame {
class GFG { static int swapNibbles ( int x ) { return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) > > 4 ) ; } public static void main ( String arg [ ] ) { int x = 100 ; System . out . print ( swapNibbles ( x ) ) ; } }
import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . util . * ;   public class CodeForce { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ;
import java . io . * ; class GFG { static void decToBinary ( int n ) { int [ ] binaryNum = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } for ( int j = i - 1 ; j >= 0 ; j -- ) System . out . print ( binaryNum [ j ] ) ; } public static void main ( String [ ] args ) { int n = 17 ; decToBinary ( n ) ; } }
import java . io . * ; import java . math . * ; import java . util . * ; public class A { public static void main ( String [ ] agrs ) { FastScanner sc = new FastScanner ( ) ;
import java . util . * ; class GFG { static void triangular_series ( int n ) { int i , j = 1 , k = 1 ; for ( i = 1 ; i <= n ; i ++ ) { System . out . printf ( "%d " , k ) ; j = j + 1 ; k = k + j ; } } public static void main ( String [ ] args ) { int n = 5 ; triangular_series ( n ) ; } }
import java . util . * ;  public class Solve {  static Scanner scan = new Scanner ( System . in ) ;   public static void solve ( int n , int t , int [ ] a ) {   int i = 1 ;  while ( i < t ) { i += a [ i ] ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String str = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . parseInt ( "" + str . charAt ( i ) ) % 2 == 0 ) sum += ( i + 1 ) ; } System . out . println ( sum ) ; } } 
import java . io . * ; class GFG { static void find_set ( int n ) { if ( n <= 2 ) { System . out . println ( "-1" ) ; return ; } int sum1 = ( n * ( n - 1 ) ) / 2 ; int sum2 = n ; System . out . println ( sum1 + " " + sum2 ) ; } public static void main ( String [ ] args ) { int n = 8 ; find_set ( n ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) , rem = 0 , res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int num = sc . nextInt ( ) ; rem += ( 86400 - num ) ; if ( rem >= t && res == 0 ) res = i ; } System . out . println ( res ) ; sc . close ( ) ; } }
import java . util . * ; class GFG { public static void removeDuplicates ( int [ ] arr ) { LinkedHashSet < Integer > set = new LinkedHashSet < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) set . add ( arr [ i ] ) ; System . out . print ( set ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 5 , 1 , 7 , 2 , 4 , 2 } ; removeDuplicates ( arr ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n > m ) { System . out . print ( m + " " + ( n - m ) / 2 ) ; } else { System . out . print ( n + " " + ( m - n ) / 2 ) ; }  } }
import java . io . * ; class GFG { static int leonardo ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ; } public static void main ( String args [ ] ) { System . out . println ( leonardo ( 3 ) ) ; } }
import java . util . Scanner ; public class Problem443A {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class Absolutezero {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int sum = 0 ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int n1 = sc . nextInt ( ) ; list . add ( n1 ) ; sum += n1 ; } int u1 = ( int ) Math . round ( ( double ) sum / n ) ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; import java . util . * ; public class Main { static InputReader in = new InputReader ( System . in ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static int oo = ( int ) 1e9 ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {
import java . util . * ;   public class Main {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static void fib ( int n ) { int a = 0 , b = 1 , c ; if ( n >= 0 ) System . out . print ( a + " " ) ; if ( n >= 1 ) System . out . print ( b + " " ) ; for ( int i = 2 ; i <= n ; i ++ ) { c = a + b ; System . out . print ( c + " " ) ; a = b ; b = c ; } } public static void main ( String [ ] args ) { fib ( 9 ) ; } }
import java . io . * ; import java . util . * ;     public class B {
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long p = ( long ) Math . ceil ( ( double ) n * ( double ) ( y ) / ( double ) 100 ) ; if ( p - x <= 0 ) System . out . print ( 0 ) ; else System . out . print ( p - x ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { ans += b / n ; ans += ( i % n + b % n ) >= n ? 1 : 0 ; } return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }
import java . io . * ; class GFG { static int sumOfSeries ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += i * i * i * i ; return ans ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }
class GFG { static void findAndPrintOriginalArray ( int arr [ ] , int n ) { int arr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) arr_sum += arr [ i ] ; arr_sum = arr_sum / ( n - 1 ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr_sum - arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 14 , 12 , 13 , 11 } ; int n = arr . length ; findAndPrintOriginalArray ( arr , n ) ; } }
class GfG { public static void main ( String [ ] args ) { int a = 10 , b = 5 ; if ( b > 0 ) { while ( b > 0 ) { a ++ ; b -- ; } } if ( b < 0 ) { while ( b < 0 ) { a -- ; b ++ ; } } System . out . println ( "Sum is: " + a ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class er103b {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; for ( int c = 1 ; c <= t ; c ++ ) { int n = scn . nextInt ( ) ;
 import java . io . DataInputStream ; import java . io . FileInputStream ; import java . io . IOException ;  import static java . lang . System . in ;  public class Chess { private static final int MOD = ( int ) ( 1E9 + 7 ) ; static FastReader scanner = new FastReader ( ) ;  public static void main ( String [ ] args ) throws IOException {
import java . math . BigInteger ; import java . util . * ;  public class Main {  static Scanner input = new Scanner ( System . in ) ;  public static void main ( String [ ] args ) { int n = input . nextInt ( ) ; System . out . println ( ( int ) Math . pow ( n + 1 , 2 ) / 4 ) ; } }
public class GEE { static void printPFsInPairs ( int n ) { for ( int i = 1 ; i * i <= n ; i ++ ) if ( n % i == 0 ) System . out . println ( i + "*" + n / i ) ; } public static void main ( String [ ] args ) { int n = 24 ; printPFsInPairs ( n ) ; } }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class B612 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . * ; public class GFG { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x ^ y ; y = x ^ y ; x = x ^ y ; System . out . println ( "After swap: x = " + x + ", y = " + y ) ; } }
import java . util . Scanner ;
import java . util . * ; class solution { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 2 * n + 2 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; class GFG { static int findK ( int n , int k ) { ArrayList < Integer > a = new ArrayList < Integer > ( n ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 1 ) a . add ( i ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 0 ) a . add ( i ) ; return ( a . get ( k - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 3 ; System . out . println ( findK ( n , k ) ) ; } }
import java . util . Scanner ;  public class cForces546A { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int k = scan . nextInt ( ) ; int n = scan . nextInt ( ) ; int w = scan . nextInt ( ) ; int total = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { total += i * k ; } if ( ( total - n ) < 0 ) { System . out . println ( 0 ) ; } else System . out . println ( total - n ) ; } }
import java . util . * ; class GFG { static int Alcuin ( int n ) { double _n = n , ans ; ans = Math . round ( ( _n * _n ) / 12 ) - Math . floor ( _n / 4 ) * Math . floor ( ( _n + 2 ) / 4 ) ; return ( int ) ans ; } static void solve ( int n ) { int i = 0 ; for ( i = 1 ; i <= n ; i ++ ) { System . out . print ( Alcuin ( i ) + ", " ) ; } } public static void main ( String [ ] args ) { int n = 15 ; solve ( n ) ; } }
import java . io . * ; class GFG { static boolean Move ( int a , int x , int b ) { if ( ( ( ( b - a ) % x == 0 ) || ( ( b - a - 1 ) % x == 0 ) && a + 1 != b ) && b >= a ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 3 , x = 2 , b = 7 ; if ( Move ( a , x , b ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . io . * ; import java . util . * ; public class Mohammad { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , c = n / 2 ; System . out . println ( ++ c ) ; for ( int i = 1 ; i <= c ; i ++ ) System . out . println ( 1 + " " + i ) ; for ( int i = 2 ; i <= n - c + 1 ; i ++ ) System . out . println ( c + " " + i ) ; } }
class GFG { static int findNthDigit ( int p , int q , int N ) { int res = 0 ; while ( N > 0 ) { N -- ; p *= 10 ; res = p / q ; p %= q ; } return res ; } public static void main ( String args [ ] ) { int p = 1 , q = 2 , N = 1 ; System . out . println ( findNthDigit ( p , q , N ) ) ; } }
import java . util . * ; class solution { static int calculateSum ( int n ) { return n * ( int ) ( Math . pow ( n , 2 ) + 3 * n + 5 ) / 3 ; } public static void main ( String arr [ ] ) { int n = 3 ; System . out . println ( "Sum = " + calculateSum ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . Arrays ; import java . io . * ; class GFG { static int CalculateMax ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int min_sum = arr [ 0 ] + arr [ 1 ] ; int max_sum = arr [ n - 1 ] + arr [ n - 2 ] ; return ( Math . abs ( max_sum - min_sum ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 7 , 1 , 11 } ; int n = arr . length ; System . out . println ( CalculateMax ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; ArrayList < Integer > ar = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { ar . add ( sc . nextInt ( ) ) ; } int max = Collections . max ( ar ) ; int ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { ans = ans + max - ar . get ( j ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ;  public class Div688A {
import java . util . * ; import java . lang . * ; import java . io . * ; public class GFG { static double heptdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.802 * a ; return d ; } public static void main ( String [ ] args ) { int a = 6 ; System . out . println ( heptdiagonal ( a ) ) ; } }
 import java . util . * ; import java . io . * ; import java . math . * ;  public class Main { static FastReader sc = new FastReader ( ) ; public static void main ( String [ ] args ) { StringBuffer sb = new StringBuffer ( "" ) ; int ttt = 1 ; ttt = i ( ) ; outer : while ( ttt -- > 0 ) { int n = i ( ) ; int k = i ( ) ; int A [ ] = input ( n ) ; int s = 0 ; for ( int i : A ) s += i ; System . out . println ( Math . min ( k , s ) ) ; }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; char [ ] s1 = s . toCharArray ( ) ; long sum = 0 ; boolean check = false ;
import java . io . * ; class GFG { static void printTrib ( int n ) { int dp [ ] = new int [ n ] ; dp [ 0 ] = dp [ 1 ] = 0 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i < n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + dp [ i - 3 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( dp [ i ] + " " ) ; } public static void main ( String args [ ] ) { int n = 10 ; printTrib ( n ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;  public static void main ( String [ ] args ) {
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ; import java . lang . * ; class GFG { static boolean isPrime ( int n ) { if ( n % 2 == 0 ) return false ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } public static void main ( String [ ] args ) { if ( isPrime ( 19 ) ) System . out . println ( " true" ) ; else System . out . println ( " false" ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int k = in . nextInt ( ) % 10 ; int r = in . nextInt ( ) ; int res = 1 ; int s = k ; while ( s % 10 != 0 && s % 10 != r ) { s = k * ++ res ; } System . out . println ( res ) ; }  }  
import java . util . * ; public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; k -- ; if ( n % 2 == 0 ) { long ans = k % n ; System . out . println ( ans + 1 ) ; } else { long mid = n / 2 ; long ans = ( ( k / mid ) + k ) % n ; System . out . println ( ans + 1 ) ; } } } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Main { static class Point { int x , y ; Point ( int x , int y ) { this . x = x ; this . y = y ; } } public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ; public class permutation { public static void main ( String [ ] args ) { int t , n , i ;  Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . nextInt ( ) ;  for ( i = 0 ; i < n ; i ++ ) { System . out . println ( ( i + 1 ) % n + 1 ) ; } } } }
import java . io . * ; class GFG { static int dodecahedral_num ( int n ) { return n * ( 3 * n - 1 ) * ( 3 * n - 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( n + "the Dodecahedral" + " number:" ) ; System . out . println ( dodecahedral_num ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class Test {
class GFG { public static boolean isEven ( int n ) { return ( n % 2 == 0 ) ; } public static void main ( String [ ] args ) { int n = 101 ; if ( isEven ( n ) == true ) System . out . print ( "Even" ) ; else System . out . print ( "Odd" ) ; } }
import java . * ; import java . util . Arrays ; class GFG { static int findMaxNum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int num = arr [ 0 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { num = num * 10 + arr [ i ] ; } return num ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 0 } ; int n = arr . length ; System . out . println ( findMaxNum ( arr , n ) ) ; } }
import java . io . * ; class GFG { static int countNumbers ( int N ) { return ( int ) ( Math . pow ( 10 , N ) - Math . pow ( 8 , N ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . io . * ; import java . util . * ;  import static java . lang . Integer . * ;  public class Main { static ArrayList < Long > power = new ArrayList < > ( ) ; static ArrayList < Long > divisors = new ArrayList < > ( ) ; public static void main ( String [ ] args ) throws IOException { FastReader in = new FastReader ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; dp ( ) ; long n = in . nextLong ( ) ; divisor ( n ) ;
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; s . nextLine ( ) ; String s1 = s . nextLine ( ) ; int [ ] last = new int [ 26 ] ; boolean c [ ] = new boolean [ 26 ] ;
class GFG { static int product ( int N ) { int ans = 1 ; int val = ( int ) Math . pow ( 2 , N - 1 ) ; for ( int i = 1 ; i <= N ; i ++ ) { ans *= ( int ) Math . pow ( i , val ) ; } return ans ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( product ( N ) ) ; } }
import java . util . * ; import java . util . Map . Entry ;   import java . io . * ; import java . math . * ; import static java . util . stream . Collectors . * ; import static java . util . Map . Entry . * ;  public class Main { static int k ; public static void main ( String [ ] args ) throws IOException { final long mod = ( long ) ( 1e9 + 7 ) ; Reader s = new Reader ( ) ; PrintWriter pt = new PrintWriter ( System . out ) ;
import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int b = in . nextInt ( ) ; int d = in . nextInt ( ) ; int a , size = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a = in . nextInt ( ) ; if ( a > b ) continue ; size += a ; if ( size > d ) { count ++ ; size = 0 ; } } System . out . println ( count ) ; } }
import java . io . * ; class GFG { static int binomialCoeffSum ( int n ) { return ( 1 << n ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( binomialCoeffSum ( n ) ) ; } }
import java . util . Scanner ; public class Solution { public static void main ( String [ ] args ) {  Scanner ss = new Scanner ( System . in ) ; int n = ss . nextInt ( ) ; int sum = 0 ; int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = ss . nextInt ( ) ; if ( x > max ) max = x ; sum += x ; } int k = max ; while ( k * n - sum <= sum ) { k ++ ; } System . out . println ( k ) ; } }
import java . lang . * ; import java . util . * ; class GFG { static long findSum ( int n ) { long sum2 , sum5 , sum10 ; sum2 = ( ( n / 2 ) * ( 4 + ( n / 2 - 1 ) * 2 ) ) / 2 ; sum5 = ( ( n / 5 ) * ( 10 + ( n / 5 - 1 ) * 5 ) ) / 2 ; sum10 = ( ( n / 10 ) * ( 20 + ( n / 10 - 1 ) * 10 ) ) / 2 ; return sum2 + sum5 - sum10 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ;    public class geek {  public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; }   public static void main ( String [ ] args ) { try { Scanner s = new Scanner ( System . in ) ;  int n = s . nextInt ( ) ; int x = s . nextInt ( ) ; int y = s . nextInt ( ) ; int min = Math . min ( x , y ) ; int a [ ] = new int [ n ] ;
import java . io . * ; class GFG { static void printPattern ( int n ) { if ( n == 0 || n < 0 ) { System . out . print ( n + " " ) ; return ; } System . out . print ( n + " " ) ; printPattern ( n - 5 ) ; System . out . print ( n + " " ) ; } public static void main ( String [ ] args ) { int n = 16 ; printPattern ( n ) ; } }
import java . util . * ;  public class WarOfTheCorporations { public static void main ( String [ ] args ) { int i , j , k ; String g , a ; Scanner sc = new Scanner ( System . in ) ; g = sc . nextLine ( ) ; a = sc . nextLine ( ) ; int index = g . indexOf ( a ) ; int count = 0 ; int len = g . length ( ) ; while ( index < len && index > - 1 ) { index = g . indexOf ( a , index + a . length ( ) ) ; count ++ ; } System . out . print ( count ) ; } }
class Solution { public boolean isToeplitzMatrix ( int [ ] [ ] matrix ) { for ( int r = 1 ; r < matrix . length ; ++ r ) for ( int c = 1 ; c < matrix [ 0 ] . length ; ++ c ) if ( matrix [ r - 1 ] [ c - 1 ] != matrix [ r ] [ c ] ) return false ; return true ; } }
import java . io . * ; class GFG { static int center_octadecagon_num ( int n ) { return 9 * n * n - 9 * n + 1 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( n + "th centered " + "octadecagonal number : " ) ; System . out . println ( center_octadecagon_num ( n ) ) ; n = 13 ; System . out . print ( n + "th centered " + "octadecagonal number : " ) ; System . out . println ( center_octadecagon_num ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . util . * ;  public class TheFibonacciSegment_B {  public static void main ( String [ ] args ) {
import java . util . * ; public class EasterEggs {  public static void main ( String [ ] args ) {
import java . util . Scanner ;   public class Main { public static Scanner in = new Scanner ( System . in ) ; public static int a , b , c , L ; public static long cal ( int l ) { int ti [ ] = new int [ 3 ] ; ti [ 0 ] = ( l + a + b - c + 1 ) / 2 ; ti [ 1 ] = ( l + a + c - b + 1 ) / 2 ; ti [ 2 ] = ( l + c + b - a + 1 ) / 2 ; for ( int i = 0 ; i < 3 ; i ++ ) if ( ti [ i ] <= 0 ) return 0 ;
import java . util . * ;  public class Absolutezero { public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n , x , y , r ; int i , j ; n = in . nextInt ( ) ; x = in . nextInt ( ) ; y = in . nextInt ( ) ; r = n / 2 ; if ( ( x == r || x == r + 1 ) && ( y == r || y == r + 1 ) ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } }
class GFG { static String replaceSpace ( String str ) { String s = "" ; for ( int i = 0 ; i < str . length ( ) ; ++ i ) { if ( str . charAt ( i ) == ' ' ) s += '-' ; else s += str . charAt ( i ) ; } return s ; } public static void main ( String [ ] args ) { String str = "A computer science portal for geeks" ; System . out . println ( replaceSpace ( str ) ) ; } }
class GFG { static int subsetCount ( int arr [ ] , int n ) { return 1 << n ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 } ; int n = A . length ; System . out . println ( subsetCount ( A , n ) ) ; } }
import java . io . * ; class GFG { static int factorial ( int n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; } static int LCMOfNeighbourFact ( int n ) { return factorial ( n + 1 ) ; } public static void main ( String args [ ] ) { int N = 5 ; System . out . println ( LCMOfNeighbourFact ( N ) ) ; } }
class Solution { public String defangIPaddr ( String address ) { return address . replace ( "." , "[.]" ) ; } }
import java . util . Arrays ; class GFG { static void sortString ( String str ) { char [ ] arr = str . toCharArray ( ) ; Arrays . sort ( arr ) ; System . out . print ( String . valueOf ( arr ) ) ; } public static void main ( String [ ] args ) { String s = "geeksforgeeks" ; sortString ( s ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { public static int firstDigit ( int n ) { while ( n >= 10 ) n /= 10 ; return n ; } public static int lastDigit ( int n ) { return ( n % 10 ) ; } public static void main ( String argc [ ] ) { int n = 98562 ; System . out . println ( firstDigit ( n ) + " " + lastDigit ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;
class GFG { static boolean isDivisible ( long n ) { while ( n / 100 != 0 ) { long d = n % 10 ; n /= 10 ; n += d * 7 ; } return ( n % 23 == 0 ) ; } public static void main ( String [ ] args ) { long n = 1191216 ; if ( isDivisible ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static int countDigit ( long n ) { int count = 0 ; while ( n != 0 ) { n = n / 10 ; ++ count ; } return count ; } public static void main ( String [ ] args ) { long n = 345289467 ; System . out . print ( "Number of digits : " + countDigit ( n ) ) ; } }
class GFG { static int findNumbers ( int n , int w ) { int x = 0 , sum = 0 ; if ( w >= 0 && w <= 8 ) { x = 9 - w ; } else if ( w >= - 9 && w <= - 1 ) { x = 10 + w ; } sum = ( int ) Math . pow ( 10 , n - 2 ) ; sum = ( x * sum ) ; return sum ; } public static void main ( String args [ ] ) { int n , w ; n = 3 ; w = 4 ; System . out . println ( findNumbers ( n , w ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; int t = sc . nextInt ( ) ; while ( t != 0 ) { if ( n % 10 == 0 ) n = n / 10 ; else n = n - 1 ; t -- ; } System . out . println ( n ) ; } }
import java . io . * ; class GFG { static int findProduct ( int arr [ ] , int n , int k ) { int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { prod *= arr [ i ] ; } } return prod ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 16 , 10 , 9 , 6 , 7 , 17 } ; int n = arr . length ; int k = 3 ; System . out . println ( findProduct ( arr , n , k ) ) ; } }
import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n = n / 2 ; System . out . print ( Math . pow ( 3 , n - 1 ) + "\n" ) ; } else { n = ( n / 2 ) + 1 ; System . out . print ( Math . pow ( 2 , n - 1 ) + "\n" ) ; } } public static void main ( String [ ] args ) { int N = 4 ; findNthTerm ( N ) ; N = 11 ; findNthTerm ( N ) ; } }
public class Fibonacci { static int findIndex ( int n ) { float fibo = 2.078087F * ( float ) Math . log ( n ) + 1.672276F ; return Math . round ( fibo ) ; } public static void main ( String [ ] args ) { int result = findIndex ( 55 ) ; System . out . println ( result ) ; } }
import java . util . * ; public class FillingDiamond { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( n ) ; } } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ; int unrated = 0 ; int police = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = in . nextInt ( ) ; if ( x != - 1 ) { police += x ; continue ; } if ( police == 0 ) unrated ++ ; else police -- ;  } System . out . println ( unrated ) ;  }  }  
import java . io . * ; class GFG { static int calculateSum ( int n ) { return 2 * ( n * ( n + 1 ) * ( 2 * n + 1 ) / 6 ) + n * ( n + 1 ) / 2 + 2 * ( n ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( "Sum = " + calculateSum ( n ) ) ; } }
class GFG { static int oddFib ( int n ) { n = ( 3 * n + 1 ) / 2 ; int a = - 1 , b = 1 , c = 0 , i ; for ( i = 1 ; i <= n ; i ++ ) { c = a + b ; a = b ; b = c ; } return c ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( oddFib ( n ) ) ; } }
import java . util . Scanner ;  public class problem97 {  public static void main ( String [ ] args ) {
class GFG { static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) return false ; else return true ; } public static void main ( String args [ ] ) { int n = 10 ; if ( isSumOfPowersOfTwo ( n ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; static HashSet < Long > list = new HashSet < > ( ) ; public static void main ( String [ ] args ) {
class GFG { static int nthOdd ( int n ) { return ( 2 * n - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( nthOdd ( n ) ) ; } }
import java . util . * ; import java . util . regex . * ; import java . io . * ;  public class Solution { 
import java . util . * ; import java . lang . * ; class GFG { static double Nth_Term ( int n ) { return ( 2 * Math . pow ( n , 3 ) - 3 * Math . pow ( n , 2 ) + n + 6 ) / 6 ; } static public void main ( String args [ ] ) { int N = 8 ; System . out . println ( Nth_Term ( N ) ) ; } }
public final class p006 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p006 ( ) . run ( ) ) ; } private static final int N = 100 ; public String run ( ) { int sum = 0 ; int sum2 = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += i ; sum2 += i * i ; } return Integer . toString ( sum * sum - sum2 ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long num = in . nextLong ( ) ; while ( num % 10 == 0 ) { num /= 10 ; } String str = String . valueOf ( num ) ; for ( int i = 0 ; i < str . length ( ) / 2 ; i ++ ) {
 import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int time_remaining = ( 4 * 60 ) - k ;  int sum = 0 ; int i = 0 ; while ( sum <= time_remaining && ( i ) <= n ) { i ++ ; sum += i * 5 ; } System . out . println ( i - 1 ) ; }
class Test { static boolean isPowerOfTwo ( int x ) { return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ; } public static void main ( String [ ] args ) { System . out . println ( isPowerOfTwo ( 31 ) ? "Yes" : "No" ) ; System . out . println ( isPowerOfTwo ( 64 ) ? "Yes" : "No" ) ; } }
import java . util . * ; class GFG { public static double Min_glass ( int n , int k , int [ ] a ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += a [ i ] ; double ans = Math . ceil ( ( double ) sum / ( double ) 100 ) ; return ans ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; int [ ] a = { 200 , 150 , 140 , 300 } ; Arrays . sort ( a ) ; System . out . println ( Min_glass ( n , k , a ) ) ; } }
import java . io . * ; class GFG { static float focal_length ( float image_distance , float object_distance ) { return 1 / ( ( 1 / image_distance ) + ( 1 / object_distance ) ) ; } public static void main ( String [ ] args ) { float image_distance = 2 ; float object_distance = 50 ; System . out . println ( "Focal length of a lens is " + focal_length ( image_distance , object_distance ) + " units." ) ; } }
class GFG { static void dist ( double x1 , double y1 , double x2 , double y2 , double r ) { System . out . println ( "The shortest distance " + "between a point and a circle is " + ( Math . sqrt ( ( Math . pow ( ( x2 - x1 ) , 2 ) ) + ( Math . pow ( ( y2 - y1 ) , 2 ) ) ) - r ) ) ; } public static void main ( String [ ] args ) { double x1 = 4 , y1 = 6 , x2 = 35 , y2 = 42 , r = 5 ; dist ( x1 , y1 , x2 , y2 , r ) ; } }
public class GFG { static int minimumMoves ( int n , int a [ ] , int s , int t ) { int i , x ; x = s ; for ( i = 1 ; i <= n ; i ++ ) { if ( x == t ) break ; x = a [ x ] ; } if ( x == t ) return i - 1 ; else return - 1 ; } public static void main ( String [ ] args ) { int s = 2 , t = 1 , i ; int a [ ] = { - 1 , 2 , 3 , 4 , 1 } ; int n = a . length ; System . out . println ( minimumMoves ( n , a , s , t ) ) ; } }
import java . io . * ; class GFG { static int sumDigits ( int no ) { return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ; } public static void main ( String [ ] args ) { System . out . println ( sumDigits ( 687 ) ) ; } }
 import java . util . * ;   public class Practise { 
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) throws Exception { int n = in . readInt ( ) ; int count = 0 ; for ( int a = 1 ; a <= n ; a ++ ) { for ( int b = a + 1 ; b <= n ; b ++ ) { int c = a ^ b ; if ( a + b > c && b + c > a && a + c > b && c <= n ) {
import java . util . Scanner ;  public class ReverseSubS { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i ; String s = in . next ( ) , o = "" ; in . close ( ) ;  boolean b = false ;  for ( i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) < s . charAt ( i - 1 ) ) { o = i + " " + ( i + 1 ) ; b = true ; } } System . out . println ( b ? "YES\n" + o : "NO" ) ; } }
import java . util . * ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l == r ) { System . out . println ( l ) ; } else { System . out . println ( "2" ) ; } } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n , x ; n = sc . nextInt ( ) ; x = sc . nextInt ( ) ; int sum = 0 ;  for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; }  sum = Math . abs ( sum ) ;  int cards = 0 ;  while ( sum > 0 ) { cards ++ ; sum -= x ; }  System . out . println ( cards ) ; } }
import java . util . * ;  public class bs { static int [ ] [ ] psum ; public static void precal ( String str ) {  for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; psum [ i + 1 ] [ ch - 'a' ] ++ ;  for ( int j = 0 ; j < 26 ; j ++ ) { psum [ i + 1 ] [ j ] += psum [ i ] [ j ] ; } } } public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ;
import java . util . Scanner ;  public class FancyFence { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scan . nextInt ( ) ; if ( 360 % ( 180 - n ) == 0 ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } scan . close ( ) ; } }
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;
import java . io . * ; class GFG { static int numberofterm ( int n , int number ) { int firstnum = ( int ) Math . pow ( 10 , n - 1 ) ; int lastnum = ( int ) Math . pow ( 10 , n ) ; int count = 0 ; for ( int i = firstnum ; i < lastnum ; i ++ ) if ( i % number == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 3 , num = 7 ; System . out . println ( numberofterm ( n , num ) ) ; } }
import java . io . * ; class GFG { static double maxDistance ( int n , int fuel ) { double dist_covered = 0 ; while ( n > 0 ) { dist_covered += ( double ) fuel / n ; n -= 1 ; } return dist_covered ; } public static void main ( String [ ] args ) { int n = 3 ; int fuel = 100 ; System . out . println ( "Maximum distance possible with " + n + " bikes is " + maxDistance ( n , fuel ) ) ; } }
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ;  Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) sum += a [ i + 1 ] - a [ i ] - 1 ; System . out . println ( sum ) ; } }
class GFG { static void lowerWythoff ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2.0 ; for ( int i = 1 ; i <= n ; i ++ ) { double ans = Math . floor ( i * phi ) ; System . out . print ( ( int ) ans ) ; if ( i != n ) System . out . print ( " , " ) ; } } public static void main ( String [ ] args ) { int n = 5 ; lowerWythoff ( n ) ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
import java . util . * ; class Odd { public static int oddSum ( int n ) { return ( n * n ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( " Sum of first " + n + " Odd Numbers is: " + oddSum ( n ) ) ; } }
class GFG { static int possibleways ( int n ) { if ( n % 2 == 1 ) return 0 ; else if ( n % 4 == 0 ) return n / 4 - 1 ; else return n / 4 ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( possibleways ( n ) ) ; } }
import java . io . * ; import java . util . * ;  public class B {  public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; FastOutput fo = new FastOutput ( ) ; int testcases = fs . nextInt ( ) ; for ( int tt = 0 ; tt < testcases ; tt ++ ) {
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ;  public class atcoderbg { static class Node { int key ; Node left ; Node right ; Node ( int k ) { key = k ; } }
import static java . lang . Math . pow ; class GFG { static double sum ( int x , int n ) { double i , total = 1.0 ; for ( i = 1 ; i <= n ; i ++ ) total = total + ( Math . pow ( x , i ) / i ) ; return total ; } public static void main ( String [ ] args ) { int x = 2 ; int n = 5 ; System . out . printf ( "%.2f" , sum ( x , n ) ) ; } }
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; for ( int i = 0 ; i < a ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( x + y ) ; } } }
import java . util . * ; import java . lang . * ; public class Socks { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int pairs = Math . min ( l , r ) ; int days = Math . abs ( l - r ) / 2 ; System . out . println ( pairs + " " + days ) ; } }
class GFG { static int multiplyWith4 ( int n ) { return ( n << 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . print ( multiplyWith4 ( n ) ) ; } }
import java . util . * ;  public class CodeForces { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ;  while ( t -- > 0 ) { int n = scan . nextInt ( ) ; int sum = 0 ;  for ( int i = 0 ; i < n ; i ++ ) sum += ( scan . nextInt ( ) % 2 ) ;  if ( sum == 0 || sum == n ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ;  } } }
public class GFG { public static int cubesum ( int n ) { return ( n ) * ( n ) * ( 2 * n * n - 1 ) ; } public static void main ( String args [ ] ) { int a = 4 ; System . out . println ( cubesum ( a ) ) ; } }
import java . io . * ; import java . util . * ; import java . lang . * ;  public class c1 { public static MyScanner scan ; public static PrintWriter out ; public static void main ( String [ ] args ) { scan = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ;  int t = 1 ;
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static long oo = Long . MAX_VALUE ;
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] path = new int [ n + 1 ] [ n + 1 ] ;
 import java . util . * ;   public class Practise { 
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {
import java . util . Arrays ; import java . util . Scanner ;  public class Main {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ; int c [ ] = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int x : c ) { sum += x ; } if ( sum % 5 != 0 || sum == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( sum / 5 ) ; } }  }
class GFG { static int CHAR_BIT = 8 ; static int min ( int x , int y ) { return y + ( ( x - y ) & ( ( x - y ) > > ( ( Integer . SIZE / 8 ) * CHAR_BIT - 1 ) ) ) ; } static int smallest ( int x , int y , int z ) { return Math . min ( x , Math . min ( y , z ) ) ; } public static void main ( String [ ] args ) { int x = 12 , y = 15 , z = 5 ; System . out . println ( "Minimum of 3 numbers is " + smallest ( x , y , z ) ) ; } }
class GFG { static int sum ( int k , int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { int p = 1 ; for ( int j = 0 ; j < n - i ; j ++ ) { p = p * k ; } for ( int j = 0 ; j < i ; j ++ ) { p = p * ( k - 1 ) ; } sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }
import java . util . * ;  public class ICPC { public static void main ( String [ ] args ) {
class GFG { static void result ( int N ) { for ( int num = 0 ; num < N ; num ++ ) { if ( num % 3 == 0 && num % 5 == 0 ) System . out . print ( num + " " ) ; } } public static void main ( String [ ] args ) { int N = 100 ; result ( N ) ; } }
class GFG { static int minSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += ( n % 10 ) ; n /= 10 ; } if ( sum == 1 ) return 10 ; return sum ; } public static void main ( String [ ] args ) { int n = 1884 ; System . out . print ( minSum ( n ) ) ; } }
class GFG { static int findThirdDigit ( int n ) { if ( n < 3 ) return 0 ; return ( n & 1 ) > 0 ? 1 : 6 ; } public static void main ( String args [ ] ) { int n = 7 ; System . out . println ( findThirdDigit ( n ) ) ; } }
import java . util . Scanner ;  public class _0855Joysticks {  static int letsgame ( int x , int y , int count ) {
import java . util . Scanner ;  public class _0692three_palindrome {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = "" ; while ( s . length ( ) < n ) { s += s + "aabb" ; } System . out . println ( s . substring ( 0 , n ) ) ; }  }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; class GFG { static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( int ) ( ( ( S - S1 ) / Math . floor ( S ) ) * 60 ) ; return Min ; } public static void main ( String [ ] args ) { int S = 30 , S1 = 10 ; System . out . println ( numberOfMinutes ( S , S1 ) + " min" ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int swapBits ( int x ) { int even_bits = x & 0xAAAAAAAA ; int odd_bits = x & 0x55555555 ; even_bits >>= 1 ; odd_bits <<= 1 ; return ( even_bits | odd_bits ) ; } public static void main ( String [ ] args ) { int x = 23 ; System . out . println ( swapBits ( x ) ) ; } }
class GFG { static int countFact ( int low , int high ) { int fact = 1 , x = 1 ; while ( fact < low ) { fact = fact * x ; x ++ ; } int res = 0 ; while ( fact <= high ) { res ++ ; fact = fact * x ; x ++ ; } return res ; } public static void main ( String [ ] args ) { System . out . print ( "Count is " + countFact ( 2 , 720 ) ) ; } }
import java . io . * ; class GFG { static double cyl ( double r , double h ) { if ( r < 0 && h < 0 ) return - 1 ; double R = ( 2 * r ) / 3 ; double H = ( 2 * h ) / 3 ; double V = 3.14 * Math . pow ( R , 2 ) * H ; return V ; } public static void main ( String [ ] args ) { double r = 4 , h = 8 ; System . out . println ( cyl ( r , h ) ) ; } }
import java . util . * ; class solution { static void divide ( int a , int b ) { for ( int i = 2 ; i <= Math . min ( a , b ) ; i ++ ) { while ( a % i == 0 && b % i == 0 ) { a = a / i ; b = b / i ; } } System . out . println ( "A = " + a + ", B = " + b ) ; } public static void main ( String args [ ] ) { int A = 10 , B = 15 ; divide ( A , B ) ; } }
import java . io . * ; class GFG { static void checkEVENodd ( int arr [ ] , int n , int l , int r ) { if ( arr [ r ] == 1 ) System . out . println ( "odd" ) ; else System . out . println ( "even" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 1 } ; int n = arr . length ; checkEVENodd ( arr , n , 1 , 3 ) ; } }
import javax . swing . plaf . IconUIResource ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class codeforces { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ; public class TheNewYearMeetingFriends { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int arr [ ] = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) arr [ i ] = in . nextInt ( ) ; Arrays . sort ( arr ) ; int result = ( arr [ 1 ] - arr [ 0 ] ) + ( arr [ 2 ] - arr [ 1 ] ) ; System . out . println ( result ) ; } }
import java . io . * ; class GFG { static int avg_of_even_num ( int n ) { return n + 1 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( avg_of_even_num ( n ) ) ; } }
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; public static void main ( String [ ] args ) { int t = 1 ;
import java . io . * ; class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { if ( N % 2 == 0 ) return 0 ; int res = 0 ; for ( int i = 0 ; i < N ; i += 2 ) res ^= arr [ i ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
class GFG { static int max_xor ( int arr [ ] , int n ) { int maxXor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { maxXor = Math . max ( maxXor , arr [ i ] ^ arr [ j ] ) ; } } return maxXor ; } public static void main ( String [ ] args ) { int arr [ ] = { 25 , 10 , 2 , 8 , 5 , 3 } ; int n = arr . length ; System . out . println ( max_xor ( arr , n ) ) ; } }
import java . io . * ; class GFG { static float harmonicMean ( float arr [ ] , int n ) { float sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + ( float ) 1 / arr [ i ] ; return ( float ) n / sum ; } public static void main ( String args [ ] ) { float arr [ ] = { 13.5f , 14.5f , 14.8f , 15.2f , 16.1f } ; int n = arr . length ; System . out . println ( harmonicMean ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ;  public class B760 { public static void main ( String [ ] args ) throws Exception { in . init ( System . in ) ; long n = in . nextLong ( ) ;
class Test { static int arr [ ] = { 12 , 3 , 4 , 15 } ; static int sum ( ) { int sum = 0 ; int i ; for ( i = 0 ; i < arr . length ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { System . out . println ( "Sum of given array is " + sum ( ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class Test {
import java . util . * ; public class stringgeneration { public static void main ( String [ ] args ) { int t , n , k , i ;  Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . nextInt ( ) ; k = sc . nextInt ( ) ;  for ( i = 0 ; i < n ; i ++ ) { System . out . print ( ( char ) ( 'a' + ( i % 3 ) ) ) ; }  System . out . println ( ) ;  } } }
import java . io . * ; import java . util . * ;  public class Solution { public static void main ( String [ ] args ) throws Exception { int N = in . readInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int layer = f ( i , N ) ; ans += layer ;
import java . lang . * ; class GFG { static int MaximumHeight ( int a [ ] , int n ) { return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = new int [ ] { 40 , 100 , 20 , 30 } ; int n = arr . length ; System . out . println ( MaximumHeight ( arr , n ) ) ; } }
class GFG { static void bin ( int n ) { if ( n > 1 ) bin ( n / 2 ) ; System . out . print ( n % 2 ) ; } public static void main ( String [ ] args ) { bin ( 7 ) ; System . out . println ( ) ; bin ( 4 ) ; } }
import java . io . * ; public class GFG { static boolean Arrive ( int a , int b , int n ) { if ( n >= Math . abs ( a ) + Math . abs ( b ) && ( n - ( Math . abs ( a ) + Math . abs ( b ) ) ) % 2 == 0 ) return true ; return false ; } int main ( ) { return 0 ; } public static void main ( String [ ] args ) { int a = 5 , b = 5 , n = 11 ; if ( Arrive ( a , b , n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . Scanner ;  public class BeautifulPaintings651 {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int count [ ] = new int [ 1001 ] ; int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , ++ count [ scan . nextInt ( ) ] ) ; } System . out . println ( n - max ) ; } }
import java . io . * ; class GFG { static int avg_of_even_num ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += 2 * i ; return ( sum / n ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . print ( avg_of_even_num ( n ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;
class Main { public static void main ( String [ ] args ) { int N = 43 ; int ans = findRemainder ( N ) ; System . out . println ( ans ) ; } public static int findRemainder ( int n ) { int x = n & 3 ; return x ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) ; int h [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { h [ i ] = sc . nextInt ( ) ; } Arrays . sort ( h ) ; System . out . println ( h [ b ] - h [ b - 1 ] ) ; } }
class GFG { static void findNthNum ( int N ) { int bit_L = 1 , last_num = 0 ; while ( bit_L * ( bit_L + 1 ) / 2 < N ) { last_num = last_num + bit_L ; bit_L ++ ; } int bit_R = N - last_num - 1 ; System . out . print ( ( 1 << bit_L ) + ( 1 << bit_R ) + "\n" ) ; } public static void main ( String [ ] args ) { int N = 13 ; findNthNum ( N ) ; } }
import java . io . * ; class GFG { static float area ( float a ) { if ( a < 0 ) return - 1 ; float area = ( float ) Math . sqrt ( a ) / 6 ; return area ; } public static void main ( String [ ] args ) { float a = 10 ; System . out . println ( area ( a ) ) ; } }
import java . util . * ; public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . Arrays ; import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;   String s = in . nextLine ( ) ;  s = s . replace ( "{" , "" ) . replace ( "}" , "" ) . replace ( " " , "" ) ; long a = Arrays . stream ( s . split ( "," ) ) . distinct ( ) . filter ( c -> ! c . isEmpty ( ) ) . count ( ) ; System . out . println ( a ) ; } }
import java . io . * ; class GFG { static void print ( int n , int k ) { int rem = 1 ; for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( ( 10 * rem ) / n ) ; rem = ( 10 * rem ) % n ; } } public static void main ( String [ ] args ) { int n = 7 , k = 3 ; print ( n , k ) ; System . out . println ( ) ; n = 21 ; k = 4 ; print ( n , k ) ; } }
class GFG { static void printValueOfPi ( int N ) { double pi = 2 * Math . acos ( 0.0 ) ; System . out . println ( pi ) ; } public static void main ( String [ ] args ) { int N = 4 ; printValueOfPi ( N ) ; } }
class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n > > 1 ; n |= n > > 2 ; n |= n > > 4 ; n |= n > > 8 ; n |= n > > 16 ; return Integer . bitCount ( x ^ n ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }
class GFG { static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ; return n ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 13 } ; int arr2 [ ] = { 2 , 4 , 6 , 8 , 10 , 12 } ; int n = arr2 . length ; System . out . println ( findExtra ( arr1 , arr2 , n ) ) ; } }
class GFG { static double areaCircle ( double b ) { double area = ( double ) 3.1415926 * b * b ; return area ; } public static void main ( String args [ ] ) { float a = 10 , b = 8 ; System . out . println ( areaCircle ( b ) ) ; } }
import java . io . * ; import java . util . * ;  public class practice105a { public static void main ( String [ ] args ) throws Exception {
class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( "Reverse of no. is " + reversDigits ( num ) ) ; } }
import java . util . * ; class GFG { public static int repUnitValue ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; int rem = 1 ; int power = 1 ; int k = 1 ; while ( rem % n != 0 ) { k ++ ; power = power * 10 % n ; rem = ( rem + power ) % n ; } return k ; } public static void main ( String [ ] args ) { int n = 13 ; System . out . println ( repUnitValue ( n ) ) ; } }
class Test { static int factorial ( int n ) { int res = 1 , i ; for ( i = 2 ; i <= n ; i ++ ) res *= i ; return res ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( "Factorial of " + num + " is " + factorial ( 5 ) ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ;  String s1 = sc . next ( ) ; char [ ] a = s1 . toCharArray ( ) ; int len = a . length ;  HashSet < Character > set = new HashSet < Character > ( ) ; int count = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( ! set . contains ( a [ i ] ) ) { set . add ( a [ i ] ) ; count ++ ; } }
public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }
class GFG { static int onesComplement ( int n ) { int number_of_bits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) + 1 ; return ( ( 1 << number_of_bits ) - 1 ) ^ n ; } public static void main ( String [ ] args ) { int n = 22 ; System . out . print ( onesComplement ( n ) ) ; } }
import java . io . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { if ( n < 2 ) return - 1 ; int ans = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i + 1 < n ; i ++ ) ans = Math . min ( ans , ( arr [ i ] + arr [ i + 1 ] ) ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 2 , 2 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
import java . util . Scanner ;  public class _0609Buttons {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = n ; int y = 1 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += x * y ; x -- ; y ++ ; } n -- ; sum -= ( n * ( n + 1 ) ) / 2 ; System . out . println ( sum ) ; }  }
import java . util . Scanner ;  public class RemoveaProgression { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ; System . out . println ( k * 2 ) ; } } }
import java . io . * ; class GFG { static int factorial ( int f ) { int fact = 1 ; for ( int i = 2 ; i <= f ; i ++ ) fact *= ( int ) i ; return fact ; } static int findPermutation ( int N , int M ) { int permutation = factorial ( N + M - 1 ) / ( factorial ( N ) * factorial ( M - 1 ) ) ; return permutation ; } public static void main ( String [ ] args ) { int N = 3 , M = 3 ; System . out . println ( findPermutation ( N , M ) ) ; } }
class Test { static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d > 0 && n % d == 0 ) count ++ ; } return count ; } public static void main ( String args [ ] ) { int n = 1012 ; System . out . println ( countDigit ( n ) ) ; } }
import java . util . * ;   public class Main { private static Scanner in = new Scanner ( System . in ) ;  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int seriesFunc ( int n ) { int sumSquare = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; int sumNatural = ( n * ( n + 1 ) / 2 ) ; return ( sumSquare + sumNatural + 1 ) ; } public static void main ( String args [ ] ) { int n = 8 ; System . out . println ( seriesFunc ( n ) ) ; n = 13 ; System . out . println ( seriesFunc ( 13 ) ) ; } }
import java . util . Scanner ;  public class LuckySubstring { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ; int a4 = 0 , a7 = 0 , i ; in . close ( ) ;  for ( i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '4' ) a4 ++ ; if ( s . charAt ( i ) == '7' ) a7 ++ ; } System . out . println ( a4 + a7 > 0 ? a4 >= a7 ? 4 : 7 : - 1 ) ; } }
import java . io . * ; 
import java . util . * ;  public class coverpoints { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = scan . nextInt ( ) + scan . nextInt ( ) ; if ( sum > max ) max = sum ; } System . out . println ( max ) ; } }
import java . util . * ;  public class LittlePonyAndSortByShift_B {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Codeforces {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; int [ ] ans = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { if ( j == 0 ) { ans [ j ] = 1 ; } else { ans [ j ] += ans [ j - 1 ] ; } } } System . out . println ( ans [ size - 1 ] ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int x1 = ( n / 7 ) * 2 ; int x2 = ( n / 7 ) * 2 ; x1 += Math . min ( 2 , n % 7 ) ; x2 += Math . max ( 0 , ( n % 7 ) - 5 ) ; System . out . println ( x2 + " " + x1 ) ; }  }
import java . util . Scanner ; import java . util . Stack ;  public class Chocolate {  static Scanner scanner = new Scanner ( System . in ) ; static int n , testCases ; static void solve ( ) { n = scanner . nextInt ( ) ; int total = 0 ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { total ++ ; } } if ( total == 0 ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; sc . nextLine ( ) ; for ( int i = 2 ; i <= k + 1 ; i ++ ) { String na = sc . nextLine ( ) ; int l = na . length ( ) ; if ( na . length ( ) > 10 ) { na = na . charAt ( 0 ) + String . valueOf ( l - 2 ) + na . charAt ( na . length ( ) - 1 ) ; } System . out . println ( na ) ; } } }
import java . io . * ; class ring { public static boolean checkcircle ( int r , int R , int r1 , int x1 , int y1 ) { int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ; return ( dis - r1 >= R && dis + r1 <= r ) ; } public static void main ( String args [ ] ) { int r = 8 , R = 4 , r1 = 2 , x1 = 6 , y1 = 0 ; if ( checkcircle ( r , R , r1 , x1 , y1 ) ) System . out . println ( "yes" ) ; else System . out . println ( "no" ) ; } }
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
import java . io . * ; class GFG { static void pairwiseProduct ( int [ ] arr , int n ) { int prod = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { prod = arr [ i ] * arr [ i + 1 ] ; System . out . print ( prod + " " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 10 , 15 , 5 , 6 } ; int n = arr . length ; pairwiseProduct ( arr , n ) ; } }
import java . math . * ; class GFG { public static int findGCD ( int a , int b ) { if ( b == 0 ) return a ; else return findGCD ( b , a % b ) ; } static void findNumbers ( int a , int b ) { int gcd = findGCD ( a , b ) ; System . out . println ( ( a / gcd ) + " " + ( b / gcd ) ) ; } public static void main ( String [ ] args ) { int a = 12 , b = 16 ; findNumbers ( a , b ) ; } }
import java . util . * ; public class CodeForces1487B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) - 1 ; if ( n % 2 == 0 ) { System . out . println ( ( k % n ) + 1 ) ; } else { int m = k / ( n / 2 ) ; System . out . println ( ( k + m ) % n + 1 ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ;  public class Gym { 
import java . io . * ; class GFG { static int numberOfSolutions ( int n ) { int c = 0 ; while ( n > 0 ) { c += n % 2 ; n /= 2 ; } return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( numberOfSolutions ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;  public class cp { static BufferedReader br ; static StringTokenizer st ;  public static void main ( String [ ] args ) throws IOException {  br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; List < Integer > answer = new ArrayList < Integer > ( ) ; 
import java . io . * ; import java . util . * ;  public class Main {   public static void main ( String [ ] args ) throws IOException { int n = sc . nextInt ( ) ; int [ ] r = sc . nextIntArr ( n ) ; int [ ] b = sc . nextIntArr ( n ) ; int R = 0 , B = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( r [ i ] != b [ i ] ) { if ( r [ i ] == 1 ) R ++ ; else B ++ ; } }
   import java . io . * ; import java . util . * ; import java . math . BigInteger ; import java . lang . Object ;   public class Main { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . io . * ; class GFG { static float trianglearea ( float r ) { if ( r < 0 ) return - 1 ; return r * r ; } public static void main ( String [ ] args ) { float r = 5 ; System . out . println ( trianglearea ( r ) ) ; } }
import java . io . * ; class GFG { static int factorial ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static int calculateSeries ( int n ) { return factorial ( n + 1 ) - 1 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( calculateSeries ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = true ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 2e9 ;
import java . util . * ; public class Training { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int q = 0 ; q < t ; q ++ ) { long x = in . nextLong ( ) ; long y = in . nextLong ( ) ; long diff = x - y ; if ( diff == 1 ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } } }
import java . util . * ;  public class CodeForces1260B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ;  if ( Math . min ( a , b ) * 2 >= Math . max ( a , b ) && ( a + b ) % 3 == 0 ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } } }
class GFG { static int reversDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } public static void main ( String [ ] args ) { int num = 4562 ; System . out . println ( "Reverse of no. is " + reversDigits ( num ) ) ; } }
 import java . util . Scanner ;  public class b { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; System . out . println ( scan . nextDouble ( ) * Math . pow ( 1.000000011 , scan . nextDouble ( ) ) ) ; } }
import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) {
 import java . util . * ; import java . io . * ; import java . math . * ;  public class Practice { static FastReader sc = new FastReader ( ) ; static int mod = ( int ) Math . pow ( 10 , 9 ) + 7 ; public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ;  public static void main ( String [ ] args ) {
import java . util . * ;  public class Test { public static void main ( String [ ] args ) {  Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; System . out . println ( ( n % 10 < 5 ) ? n / 10 * 10 : ( n / 10 + 1 ) * 10 ) ; } }
import java . util . * ; public class Vanya { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int count , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= f ) count = 1 ; else count = 2 ; sum += count ; } System . out . println ( sum ) ; } }
import java . util . * ; class GFG { static String find_number ( int N , int K ) { String r ; if ( N % 100 == 0 ) { N += 1 ; r = String . valueOf ( N ) ; } else { r = String . valueOf ( N ) ; } for ( int i = 1 ; i <= K ; i ++ ) r += "00" ; return r ; } public static void main ( String [ ] args ) { int N = 1000 , K = 2 ; String ans = find_number ( N , K ) ; System . out . println ( ans ) ; } }
import java . io . * ; class GFG { static double PI = ( 3.14159 / 180 ) ; static float areaOfKite ( int a , int b , double angle ) { angle = angle * PI ; double area = a * b * Math . sin ( angle ) ; return ( float ) area ; } public static void main ( String [ ] args ) { int a = 4 , b = 7 , angle = 78 ; System . out . println ( "Area of Kite = " + areaOfKite ( a , b , angle ) ) ; } }
import java . util . Scanner ;  public class SystemofEquations { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int a = ( int ) Math . max ( Math . sqrt ( n ) , Math . sqrt ( m ) ) ; int b = Math . max ( m , n ) - ( int ) Math . pow ( a , 2 ) ;
import java . util . * ; import java . io . * ; public class EdE { static long [ ] mods = { 1000000007 , 998244353 , 1000000009 } ; static long mod = mods [ 0 ] ; public static MyScanner sc ; public static PrintWriter out ; public static void main ( String [ ] omkar ) throws Exception {
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int findevenPair ( int [ ] A , int N ) { int i , j ; int evenPair = 0 ; for ( i = 0 ; i < N ; i ++ ) { for ( j = i + 1 ; j < N ; j ++ ) { if ( ( A [ i ] & A [ j ] ) % 2 == 0 ) evenPair ++ ; } } return evenPair ; } public static void main ( String [ ] args ) { int [ ] a = { 5 , 1 , 3 , 2 } ; int n = a . length ; System . out . println ( findevenPair ( a , n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; public class GFG { static int totalNumber ( int n ) { return 8 * ( int ) Math . pow ( 9 , n - 1 ) ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( totalNumber ( n ) ) ; } }
import java . util . * ; class Triangle { public static int numberOfTriangles ( int n ) { int [ ] answer = new int [ n + 1 ] ; answer [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ; return answer [ n ] ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( numberOfTriangles ( n ) ) ; } }
import java . util . Scanner ;  public class juicer {  public static void main ( String [ ] args ) {
public class GFG { static long answer ( long n ) { long m = 2 ; long ans = 1 ; long r = 1 ; while ( r < n ) { r = ( ( long ) Math . pow ( 2 , m ) - 1 ) * ( ( long ) Math . pow ( 2 , m - 1 ) ) ; if ( r < n ) ans = r ; m ++ ; } return ans ; } public static void main ( String args [ ] ) { long n = 7 ; System . out . println ( answer ( n ) ) ; } }
import java . io . * ; class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; ++ i ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }
class GFG { static int count ( int n , int x ) { int count = 0 ; for ( int i = 1 ; i <= n && i <= x ; i ++ ) { if ( x / i <= n && x % i == 0 ) count ++ ; } return count ; } public static void main ( String args [ ] ) { int n = 8 ; int x = 24 ; System . out . println ( count ( n , x ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class BoryaDiagnosis { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , l = 0 , o = 0 ;  for ( i = 0 ; i < n ; i ++ ) { int s = in . nextInt ( ) , d = in . nextInt ( ) ; while ( s <= l ) s += d ; o += s - l ; l = s ; } in . close ( ) ; System . out . println ( o ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . io . * ; class GFG { static int squareSum ( int n ) { return 2 * n * ( n + 1 ) * ( 2 * n + 1 ) / 3 ; } public static void main ( String args [ ] ) throws IOException { System . out . println ( squareSum ( 8 ) ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . * ; class GFG { static double PI = 3.14 ; static double circle_inscribed ( int a ) { return PI * ( a * a ) / 12 ; } public static void main ( String [ ] args ) { int a = 4 ; System . out . println ( circle_inscribed ( a ) ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ;  for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) System . out . print ( "I love " ) ; else System . out . print ( "I hate " ) ; if ( i == n ) System . out . print ( "it" ) ; else System . out . print ( "that " ) ; } } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ;  public class problem82 {  public static void main ( String [ ] args ) {
class GFG { static void perfectCube ( int N ) { int cube ; for ( int i = 0 ; i <= N ; i ++ ) { cube = i * i * i ; if ( cube == N ) { System . out . println ( "Yes" ) ; return ; } else if ( cube > N ) { System . out . println ( "NO" ) ; return ; } } } public static void main ( String [ ] args ) { int N = 216 ; perfectCube ( N ) ; } }
class GFG { static int lagDuration ( int h1 , int m1 , int h2 , int m2 , int k ) { int lag , t1 , t2 ; t1 = ( h1 + k ) * 60 + m1 ; t2 = h2 * 60 + m2 ; lag = t1 - t2 ; return lag ; } public static void main ( String args [ ] ) { int h1 = 12 , m1 = 0 ; int h2 = 12 , m2 = 58 ; int k = 1 ; int lag = lagDuration ( h1 , m1 , h2 , m2 , k ) ; System . out . println ( "Lag = " + lag + " minutes" ) ; } }
class GFG { static void findpair ( int l , int r ) { int ans1 = l ; int ans2 = 2 * l ; System . out . println ( ans1 + ", " + ans2 ) ; } public static void main ( String args [ ] ) { int l = 1 , r = 10 ; findpair ( l , r ) ; } }
import java . util . Scanner ;  public class A1369 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; if ( n % 4 == 0 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } } } 
import java . util . * ;  public class PaintingEggs_B {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ; public class EdB {  public static void main ( String [ ] args ) throws Exception { int num = 998244353 ; 
class GFG { static int Subtract ( int a , int b ) { int c ; c = a + ( ~ b + 1 ) ; return c ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( Subtract ( a , b ) ) ; a = 9 ; b = 7 ; System . out . println ( Subtract ( a , b ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { PrintWriter out ; FastReader sc ; long mod = ( long ) ( 1e9 + 7 ) ; long maxlong = Long . MAX_VALUE ; long minlong = Long . MIN_VALUE ; public void sol ( ) { int n = ni ( ) ; int [ ] c = new int [ n ] , d = new int [ n ] ;
import java . util . Scanner ;  public class Candies {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { System . out . println ( solve ( sc ) ) ; t -- ; }  }  private static int solve ( Scanner sc ) { int n = sc . nextInt ( ) ; int a = 3 ; for ( int i = 2 ; ; i ++ ) { int x = n / a ; if ( x * a == n ) return x ; a = a + ( int ) Math . pow ( 2 , i ) ; } }  }
class GFG { static void printPattern ( int n ) { int t ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) System . out . print ( "\t" ) ; t = i ; for ( int k = 1 ; k <= i ; k ++ ) { System . out . print ( t + "\t\t" ) ; t = t + n - k ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int n = 6 ; printPattern ( n ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
public class GFG { static long countMaxIntersect ( long n ) { return ( n ) * ( n - 1 ) / 2 ; } public static void main ( String args [ ] ) { long n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }
class GFG { static void findTriangles ( int n ) { int num ; num = n * ( n - 4 ) ; System . out . println ( num ) ; } public static void main ( String [ ] args ) { int n ; n = 6 ; findTriangles ( n ) ; } }
class GFG { static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } static int digitGCD ( int n ) { int gcd = 0 ; while ( n > 0 ) { gcd = __gcd ( n % 10 , gcd ) ; if ( gcd == 1 ) return 1 ; n = n / 10 ; } return gcd ; } public static void main ( String [ ] args ) { int n = 2448 ; System . out . print ( digitGCD ( n ) ) ; } }
import java . io . * ; class GFG { static int leonardo ( int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ; return dp [ n ] ; } public static void main ( String [ ] args ) { System . out . println ( leonardo ( 3 ) ) ; } }
import java . io . * ; public class GFG { static void vowelOrConsonant ( char x ) { if ( x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' ) System . out . println ( "Vowel" ) ; else System . out . println ( "Consonant" ) ; } static public void main ( String [ ] args ) { vowelOrConsonant ( 'c' ) ; vowelOrConsonant ( 'e' ) ; } }
import java . util . Scanner ;  public class BankRobbery { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; long a = in . nextLong ( ) , b = in . nextLong ( ) , c = in . nextLong ( ) , t = 0 ; int n = in . nextInt ( ) , i ;  for ( i = 0 ; i < n ; i ++ ) { long x = in . nextLong ( ) ; if ( x > b && x < c ) { t ++ ; } } in . close ( ) ; System . out . println ( t ) ; } }
import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . Scanner ;  public class laptop { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;
import java . util . Arrays ; import java . util . Scanner ;  public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String input = sc . nextLine ( ) ; sc . close ( ) ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner S = new Scanner ( System . in ) ; int i = S . nextInt ( ) ; int v1 = S . nextInt ( ) ; int v2 = S . nextInt ( ) ;  System . out . println ( i / ( Float . parseFloat ( String . valueOf ( v2 ) ) / v1 + 1 ) ) ; } }
import java . io . * ; class GFG { static int rev ( int n , int temp ) { if ( n == 0 ) return temp ; temp = ( temp * 10 ) + ( n % 10 ) ; return rev ( n / 10 , temp ) ; } public static void main ( String [ ] args ) { int n = 121 ; int temp = rev ( n , 0 ) ; if ( temp == n ) System . out . println ( "yes" ) ; else System . out . println ( "no" ) ; } }
import java . util . Scanner ;  public class Elephant { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ;  int res = 0 ; for ( int i = 5 ; i >= 1 ; i -- ) { res += n / i ; n = n % i ; }  System . out . println ( res ) ; } }
class Solution { static int smallestOdd ( int n ) { if ( n == 1 ) return 0 ; return Math . pow ( 10 , n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( smallestOdd ( n ) ) ; } }
import java . util . * ;  public class Practice {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; public class MyClass { public static void main ( String args [ ] ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ;
import java . io . * ; class GFG { public static void main ( String [ ] args ) { int side = 4 ; System . out . print ( "Volume of dodecahedron = " ) ; System . out . println ( vol_of_dodecahedron ( side ) ) ; } static double vol_of_dodecahedron ( int side ) { return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * ( Math . pow ( side , 3 ) ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int triplets ( int N ) { return ( ( N + 1 ) * ( N + 2 ) ) / 2 ; } public static void main ( String [ ] args ) { int N = 50 ; System . out . println ( triplets ( N ) ) ; } }
import java . io . * ; class GFG { static int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( "Factorial of " + num + " is " + factorial ( num ) ) ; } }
class GFG { static double area_of_circle ( int m , int n ) { int square_of_radius = ( m * n ) / 4 ; double area = ( 3.141 * square_of_radius ) ; return area ; } public static void main ( String [ ] args ) { int n = 10 ; int m = 30 ; System . out . println ( area_of_circle ( m , n ) ) ; } }
class MaxSum { static int maxSumLCM ( int n ) { int max_sum = 0 ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { max_sum += i ; if ( n / i != i ) max_sum += ( n / i ) ; } } return max_sum ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( maxSumLCM ( n ) ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String str = sc . next ( ) ; String ans = str . substring ( 0 , 1 ) . toUpperCase ( ) + str . substring ( 1 ) ; System . out . println ( ans ) ; } }
class CatalnNumber { int catalan ( int n ) { int res = 0 ; if ( n <= 1 ) { return 1 ; } for ( int i = 0 ; i < n ; i ++ ) { res += catalan ( i ) * catalan ( n - i - 1 ) ; } return res ; } public static void main ( String [ ] args ) { CatalnNumber cn = new CatalnNumber ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( cn . catalan ( i ) + " " ) ; } } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Reader pm = new Reader ( ) ;
import java . util . Scanner ;  public class A732 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) , r = scanner . nextInt ( ) ;  for ( int i = 1 ; ; i ++ ) { if ( i * k % 10 == 0 || i * k % 10 == r ) { System . out . println ( i ) ; break ; } } } }
import java . util . * ; class GFG { static int minimumflip ( int mat [ ] [ ] , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ; return flip ; } public static void main ( String [ ] args ) { int n = 3 ; int mat [ ] [ ] = { { 0 , 0 , 1 } , { 1 , 1 , 1 } , { 1 , 0 , 0 } } ; System . out . println ( minimumflip ( mat , n ) ) ; } }
import java . io . * ; class GFG { public static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N / 2 ) ) * ( 2 * 2 + ( N / 2 - 1 ) * 2 ) / 2 ; S2 = ( ( N / 7 ) ) * ( 2 * 7 + ( N / 7 - 1 ) * 7 ) / 2 ; S3 = ( ( N / 14 ) ) * ( 2 * 14 + ( N / 14 - 1 ) * 14 ) / 2 ; return S1 + S2 - S3 ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . println ( sum ( N ) ) ; } }
import java . io . * ; class GFG { static void midpoint ( int x1 , int x2 , int y1 , int y2 ) { System . out . print ( ( x1 + x2 ) / 2 + " , " + ( y1 + y2 ) / 2 ) ; } public static void main ( String [ ] args ) { int x1 = - 1 , y1 = 2 ; int x2 = 3 , y2 = - 6 ; midpoint ( x1 , x2 , y1 , y2 ) ; } }
  import java . util . Scanner ;  public class VusTheCossackAndContest {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; if ( x > y || x > z ) { System . out . println ( "NO" ) ; } else { System . out . println ( "YES" ) ; } } }
import java . util . Scanner ;  public class JavaApplication1 {  public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String a = input . next ( ) ; String b = input . next ( ) ; if ( a . equals ( b ) ) System . out . println ( - 1 ) ; else System . out . println ( Math . max ( a . length ( ) , b . length ( ) ) ) ; input . close ( ) ; }  }
class GFG { static void swap ( int xp , int yp ) { if ( xp == yp ) return ; xp = xp + yp ; yp = xp - yp ; xp = xp - yp ; } public static void main ( String [ ] args ) { int x = 10 ; swap ( x , x ) ; System . out . println ( "After swap(&x, &x): x = " + x ) ; } }
import java . util . Scanner ;  public class CF584_D2_B { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) * 3 ; long ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { ans *= 3 ; ans = ans % 1000000007 ; } long m = 1 ; for ( int i = 0 ; i < n / 3 ; i ++ ) { m *= 7 ; m = m % 1000000007 ; } System . out . println ( ( ans - m + 1000000007 ) % 1000000007 ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) {
class GFG { static double solve ( int s ) { double area = ( 1.732 * Math . pow ( s , 2 ) ) / 8 ; return area ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( solve ( n ) ) ; } }
class GfG { static long getTrailingZeroes ( long n ) { long count = 0 ; long val , powerTwo = 2 ; do { val = n / powerTwo ; count += val ; powerTwo *= 2 ; } while ( val != 0 ) ; return ( count / 4 ) ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( getTrailingZeroes ( n ) ) ; } }
import java . io . * ; class GFG { static int countUnmarked ( int N ) { if ( N % 2 == 0 ) return N / 2 ; else return N / 2 + 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( "Number of unmarked " + "elements: " + countUnmarked ( N ) ) ; } }
import java . util . * ; class GFG { static boolean isDivisible ( int n ) { int d ; while ( ( n / 100 ) > 0 ) { d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; } public static void main ( String [ ] args ) { int N = 1922 ; if ( isDivisible ( N ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ;  public class Solution { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int m = Integer . parseInt ( br . readLine ( ) ) ; System . out . println ( m % ( int ) Math . pow ( 2 , n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static void MinimumValue ( int x , int y ) { if ( x > y ) { int temp = x ; x = y ; y = temp ; } int a = 1 ; int b = x - 1 ; int c = y - b ; System . out . print ( a + " " + b + " " + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }
import java . util . * ; public class GFG { static void findWeights ( int X ) { int sum = 0 ; int power = 0 ; int number = 3 ; while ( sum < X ) { sum = number - 1 ; sum /= 2 ; power ++ ; number *= 3 ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + " " ) ; ans = ans * 3 ; } } public static void main ( String [ ] args ) { int X = 2 ; findWeights ( X ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
public static int count ( int S [ ] , int m , int n ) { int table [ ] = new int [ n + 1 ] ; table [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }
import java . util . * ; public class _1401B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) {  int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int z1 = sc . nextInt ( ) ;  int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int z2 = sc . nextInt ( ) ;  int res = 0 , score = 0 ;  score = Math . min ( z1 , y2 ) ;
import java . io . * ; import java . util . * ; public class Ishu { static Scanner scan = new Scanner ( System . in ) ; static void tc ( ) { long x = scan . nextLong ( ) ; long [ ] a = new long [ 100001 ] ; int i ; for ( i = 1 ; i <= 100000 ; ++ i ) a [ i ] = ( ( ( long ) ( i ) ) * ( i + 1 ) ) / 2 ; if ( x < 0 ) x *= ( - 1 ) ; int ans = 0 ; for ( i = 0 ; i < 100001 ; ++ i ) { if ( a [ i ] >= x ) { ans = i ; break ; } }
import java . util . Scanner ;  public class A1358 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int exp = n * m ; if ( exp % 2 == 0 ) { System . out . println ( exp / 2 ) ; } else { System . out . println ( ( exp + 1 ) / 2 ) ; } } } }
import java . util . * ;  public class game2 { public static void main ( String [ ] args ) {
public class GFG { public static void main ( String args [ ] ) { String binaryNumber = "1001" ; System . out . println ( Integer . parseInt ( binaryNumber , 2 ) ) ; } }
import java . io . * ; public class GFG { static int weightedMean ( int n ) { return ( 2 * n + 1 ) / 3 ; } static public void main ( String [ ] args ) { int n = 10 ; System . out . println ( weightedMean ( n ) ) ; } }
 import java . io . * ; import java . util . * ;     public class A {
import java . io . * ; import java . util . * ;   public class Main { public static Scanner in = new Scanner ( new BufferedReader ( new InputStreamReader ( System . in ) , 640000 ) ) ; public static PrintWriter out = new PrintWriter ( System . out ) ;   public static void solve ( ) { String s = in . next ( ) ; s += ';' ;   boolean isNumber = true ; boolean first = true ; boolean leadingZero = false ; StringBuilder part = new StringBuilder ( ) ;
import java . util . * ; import java . lang . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = 0 ; System . out . println ( n ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( 1 + " " ) ;   } System . out . println ( ) ; } }
import java . io . * ; class FibZero { static int findMinZero ( int p ) { int first = 1 , second = 1 , number = 2 , next = 1 ; while ( next > 0 ) { next = ( first + second ) % p ; first = second ; second = next ; number ++ ; } return number ; } public static void main ( String [ ] args ) { int p = 7 ; System . out . println ( "Minimal zero is " + findMinZero ( p ) ) ; } }
import java . io . * ; import java . util . * ; public class GFG { static int powerNumbers ( int n ) { HashSet < Integer > v = new HashSet < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i * i <= n ; i ++ ) { int j = i * i ; v . add ( j ) ; while ( j * i <= n ) { v . add ( j * i ) ; j = j * i ; } } return v . size ( ) ; } public static void main ( String args [ ] ) { System . out . print ( powerNumbers ( 50 ) ) ; } }
class GFG { static int percent ( int a , int b ) { float result = 0 ; result = ( ( b - a ) * 100 ) / a ; return ( int ) result ; } public static void main ( String [ ] args ) { int a = 20 , b = 25 ; System . out . println ( percent ( a , b ) + "%" ) ; } }
import java . io . * ; class countSetBits { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } public static void main ( String args [ ] ) { int i = 9 ; System . out . println ( countSetBits ( i ) ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long n = scanner . nextLong ( ) ; int k = scanner . nextInt ( ) ; long l = 0 ; while ( k -- != 0 ) { l = n % 10 ; if ( l == 0 ) { n = n / 10 ; } else { n = n - 1 ; } } System . out . println ( n ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . StringTokenizer ;
import java . util . Scanner ;  public class T112A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String first = sc . next ( ) ; String second = sc . next ( ) ; if ( first . compareToIgnoreCase ( second ) == 0 ) { System . out . println ( "0" ) ; } else if ( first . compareToIgnoreCase ( second ) > 0 ) { System . out . println ( "1" ) ; } else { System . out . println ( "-1" ) ; }  } }
import java . util . * ; import java . util . stream . * ; public class Solution { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int next ; int aSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { next = scan . nextInt ( ) ; aSum |= next ; } int bSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { next = scan . nextInt ( ) ; bSum |= next ; } System . out . println ( aSum + bSum ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Array ; import java . nio . Buffer ; import java . util . Arrays ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ;  public class ColoredFields {  public static int floorSearch ( int arr [ ] , int low , int high , int x ) {  if ( low > high ) return - 1 ; 
import java . util . Scanner ; public class Test45 { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int inches = ( n + 1 ) / 3 ; int feet = inches / 12 ; System . out . println ( feet + " " + ( inches - 12 * feet ) ) ; } }
class Solution { public List < String > readBinaryWatch ( int num ) { List < String > times = new ArrayList < > ( ) ; for ( int h = 0 ; h < 12 ; h ++ ) for ( int m = 0 ; m < 60 ; m ++ ) if ( Integer . bitCount ( h * 64 + m ) == num ) times . add ( String . format ( "%d:%02d" , h , m ) ) ; return times ; } }
public class GFG { static int bridge_length ( int trainLength , int Speed , int Time ) { return ( ( Time * Speed ) - trainLength ) ; } public static void main ( String [ ] args ) { int trainLength = 120 ; int Speed = 30 ; int Time = 18 ; System . out . print ( "Length of bridge = " + bridge_length ( trainLength , Speed , Time ) + " meters" ) ; } }
import java . io . * ; class GFG { static long center_pentadecagonal_num ( long n ) { return ( 15 * n * n - 15 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { long n = 3 ; System . out . print ( n + "th number : " ) ; System . out . println ( center_pentadecagonal_num ( n ) ) ; n = 10 ; System . out . print ( n + "th number : " ) ; System . out . println ( center_pentadecagonal_num ( n ) ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { double n = 5 , a = 2 ; System . out . println ( sumOfSeries ( a , n ) ) ; } static double sumOfSeries ( double a , double n ) { double res = 0 , prev = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { prev *= ( a / i ) ; res = res + prev ; } return ( res ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) {
class GFG { static void Loss ( int SP , int P ) { float loss = 0 ; loss = ( float ) ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ; System . out . println ( "Loss = " + loss ) ; } public static void main ( String [ ] args ) { int SP = 2400 , P = 30 ; Loss ( SP , P ) ; } }
class GFG { static int MinOfCubed ( int k ) { if ( k < 8 ) return k ; int res = k ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ( i * i * i ) > k ) return res ; res = Math . min ( res , MinOfCubed ( k - ( i * i * i ) ) + 1 ) ; } return res ; } public static void main ( String [ ] args ) { int num = 15 ; System . out . println ( MinOfCubed ( num ) ) ; } }
import java . util . * ; class solution { static double circlearea ( double a ) { if ( a < 0 ) return - 1 ; double A = ( 3.14 * 3 * Math . pow ( a , 2 ) ) / 4 ; return A ; } public static void main ( String arr [ ] ) { double a = 4 ; System . out . println ( circlearea ( a ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class alpha1b {
import sun . text . resources . fr . FormatData_fr ;  import java . io . * ; import java . math . BigInteger ; import java . util . * ;  public class Main { static class FastScanner {
class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int sameRemainder ( int a , int b , int c ) { int a1 = ( b - a ) , b1 = ( c - b ) , c1 = ( c - a ) ; return gcd ( a1 , gcd ( b1 , c1 ) ) ; } public static void main ( String [ ] args ) { int a = 62 , b = 132 , c = 237 ; System . out . println ( sameRemainder ( a , b , c ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int nCr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i += 1 ) { ans *= ( n - r + i ) ; ans /= i ; } return ans ; } static int total_ways ( int N , int X ) { return ( nCr ( N - 1 , X - 1 ) + nCr ( N - 1 , X ) ) ; } public static void main ( String [ ] args ) { int N = 5 , X = 3 ; System . out . println ( total_ways ( N , X ) ) ; } }
import java . util . * ; public class VasilytheBearandTriangle {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ;  public class Main { static FastReader sc = new FastReader ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int i = sc . nextInt ( ) ; if ( i % 2 == 0 ) System . out . println ( "Mahmoud" ) ; else System . out . println ( "Ehab" ) ; } }
class GFG { static int countNumbers ( int n ) { if ( n % 2 == 1 ) return 0 ; return ( 9 * ( int ) Math . pow ( 10 , n / 2 - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . print ( countNumbers ( n ) ) ; } }
import java . io . * ; class GFG { static int term ( int n ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += i ; return ans ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( term ( n ) ) ; } }
class Solution { public int [ ] sortArrayByParity ( int [ ] A ) { int lo = 0 , hi = A . length - 1 ; while ( lo < hi ) { if ( A [ lo ] % 2 > A [ hi ] % 2 ) { int tmp = A [ hi ] ; A [ hi ] = A [ lo ] ; A [ lo ] = tmp ; } if ( A [ lo ] % 2 == 0 ) lo ++ ; if ( A [ hi ] % 2 == 1 ) hi -- ; } return A ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { public static void main ( String [ ] args ) { int a = 2 ; float b = 2.0f ; double c = 2.0003 ; char d = 'D' ; System . out . printf ( "Integer value is = %d" , a ) ; System . out . printf ( "\nFloat value is = %f" , b ) ; System . out . printf ( "\nDouble value is = %f" , c ) ; System . out . printf ( "\nChar value is = %c" , d ) ; } }
import java . io . * ; class GFG { static int smallestDivisor ( int n ) { if ( n % 2 == 0 ) return 2 ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) return i ; } return n ; } public static void main ( String [ ] args ) { int n = 31 ; System . out . println ( smallestDivisor ( n ) ) ; } }
import java . util . * ;  public class Practise {  static int [ ] [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class GFG { public static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = ( number * 2 + arr [ i ] ) % x ; if ( number == 0 ) count += 1 ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 , 1 , 0 } ; int n = 7 ; int x = 2 ; System . out . print ( CntDivbyX ( arr , n , x ) ) ; } }
import java . util . Scanner ;  public class problem83 {  public static void main ( String [ ] args ) {
class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static void commDiv ( int a , int b ) { int n = gcd ( a , b ) ; a = a / n ; b = b / n ; System . out . println ( "A = " + a + ", B = " + b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; commDiv ( a , b ) ; } }
class gfg { static int getMinCost ( int n , int m ) { int cost = ( n - 1 ) * m + ( m - 1 ) * n ; return cost ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 ; System . out . println ( getMinCost ( n , m ) ) ; } }
class GFG { static int area_fun ( int side ) { int area = side * side ; return area ; } public static void main ( String arg [ ] ) { int side = 4 ; int area = area_fun ( side ) ; System . out . println ( area ) ; } }
class GFG { static void printModulus ( int X , int Y ) { int n = Math . max ( X , Y ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( X % i == Y % i ) System . out . print ( i + " " ) ; } } public static void main ( String [ ] args ) { int X , Y ; X = 10 ; Y = 20 ; printModulus ( X , Y ) ; } }
import java . util . * ; import java . math . * ; public class FakeNP { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l == r ) { System . out . println ( l ) ; return ; } System . out . println ( 2 ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;
import java . util . * ; public class Joysticks { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a1 = in . nextInt ( ) , a2 = in . nextInt ( ) ; System . out . println ( a1 + a2 - ( ( Math . abs ( a1 - a2 ) % 3 == 0 && a1 * a2 != 1 ) ? 3 : 2 ) ) ; } }
import java . io . * ; class GFG { static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) System . out . print ( "-1" ) ; else { System . out . print ( d ) ; k -- ; while ( k -- > 0 ) System . out . print ( "0" ) ; } } public static void main ( String [ ] args ) { int k = 4 , d = 4 ; printNumberWithDR ( k , d ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { String a = s . next ( ) ; String b = s . next ( ) ; int num = lcm ( a . length ( ) , b . length ( ) ) ;
  import java . math . BigInteger ; import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long n = input . nextLong ( ) ; long k = input . nextLong ( ) ; k = ( long ) Math . pow ( 10 , k ) ; for ( int i = 1 ; i <= k ; i ++ ) { if ( k % i == 0 && n * i % k == 0 ) { System . out . println ( n * i ) ; break ; } } }  } 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static int findStarNum ( int n ) { return ( 6 * n * ( n - 1 ) + 1 ) ; } public static void main ( String args [ ] ) { int n = 3 ; System . out . println ( findStarNum ( n ) ) ; } }
import java . io . * ; class GFG { static void findTriangles ( int n ) { int num = n ; System . out . print ( num + " " ) ; System . out . print ( num * ( num - 4 ) * ( num - 5 ) / 6 ) ; } public static void main ( String [ ] args ) { int n ; n = 6 ; findTriangles ( n ) ; } }
class GFG { static int countDigit ( int n ) { int temp = n , count = 0 ; while ( temp != 0 ) { int d = temp % 10 ; temp /= 10 ; if ( d == 2 || d == 3 || d == 5 || d == 7 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 1234567890 ; System . out . println ( countDigit ( n ) ) ; } }
 import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;  public class Solution implements Runnable {  public void run ( ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 , t = 0 ;
import java . util . Scanner ;  public class main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int k = 0 ; while ( ! ( a > b ) ) { a *= 3 ; b *= 2 ; k ++ ; } System . out . println ( k ) ;  } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class Main { public static int nth_term ( int n ) { int a = 1 , b = 1 , c = 1 ; for ( int i = 0 ; i < n ; i ++ ) { c = a + b ; a = b ; b = c ; } return c ; } public static void main ( String [ ] args ) { int n = 10 ; int c = nth_term ( n ) ; System . out . println ( c ) ; } }
import java . util . * ; import java . io . * ;
class GFG { static int minsteps ( int n , int m ) { if ( m > n ) { return - 1 ; } else { return ( ( n + 1 ) / 2 + m - 1 ) / m * m ; } } public static void main ( String [ ] args ) { int n = 17 , m = 4 ; int ans = minsteps ( n , m ) ; System . out . println ( ans ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class NewMain49 {  public static void main ( String [ ] args ) {
import java . io . * ; public class GFG { static int intersection ( int n ) { return n * ( n - 1 ) ; } public static void main ( String [ ] args ) throws IOException { System . out . println ( intersection ( 3 ) ) ; } }
public class Test { public static int findMajority ( int arr [ ] , int n ) { return arr [ n / 2 ] ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . println ( findMajority ( arr , n ) ) ; } }
import java . io . * ; class GFG { static int per ( int n ) { if ( n == 0 ) return 3 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 2 ; return per ( n - 2 ) + per ( n - 3 ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( per ( n ) ) ; } }
import javax . xml . crypto . dsig . spec . XSLTTransformParameterSpec ; import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int t = sc . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = sc . nextInt ( ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int sum = ( a + b ) / 3 ; int nas = Math . min ( a , Math . min ( b , sum ) ) ; System . out . println ( nas ) ; } } }
import java . util . Scanner ;  public class A1180 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) , s ; s = n * n + ( n - 1 ) * ( n - 1 ) ; System . out . print ( s ) ; } }
import java . util . * ;  public class Testing { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int sum = m ; int iteration = 0 ; boolean flag = false ; while ( iteration <= 20 ) { if ( sum % n == 0 ) { System . out . println ( "Yes" ) ; flag = true ; break ; } iteration ++ ; sum *= 2 ; } if ( ! flag ) System . out . println ( "No" ) ; } }  
import java . util . * ; public class CleaverBear {  public static void main ( String [ ] args ) {
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t , n , x , m ; t = in . nextInt ( ) ; while ( t -- != 0 ) { m = 1 ; n = in . nextInt ( ) ; x = in . nextInt ( ) ; n -= 2 ; if ( n <= 0 ) { System . out . println ( m ) ; continue ; } if ( n % x == 0 ) m += n / x ; else m += ( 1 + n / x ) ; System . out . println ( m ) ; } in . close ( ) ; } } 
class GFG { public static void main ( String args [ ] ) { int n = 5 ; int a [ ] [ ] = { { 1 , 2 , 3 , 4 , 5 } , { 5 , 6 , 7 , 8 , 6 } , { 9 , 5 , 6 , 8 , 7 } , { 2 , 3 , 5 , 6 , 8 } , { 1 , 2 , 3 , 4 , 5 } } ; int convergingele , mid ; int i , j ; if ( n % 2 == 0 ) { System . out . printf ( "NULL\n" ) ; } else { mid = n / 2 ; convergingele = a [ mid ] [ mid ] ; System . out . printf ( "%d\n" , convergingele ) ; } } }
import java . util . * ;   public class Main {  public static void main ( String [ ] args ) { Scanner reader = new Scanner ( System . in ) ; int t = reader . nextInt ( ) ; while ( t -- != 0 ) { int n = reader . nextInt ( ) ; int cnt = 0 ; while ( n > 1 ) { if ( n % 6 != 0 && n % 2 == 0 ) { cnt = - 1 ; break ; } if ( n % 6 != 0 ) n *= 2 ; else n /= 6 ; cnt ++ ; } System . out . println ( cnt ) ; } } }
import java . util . * ; class solution { static int Squares ( int n , int m , int a ) { return ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ; } public static void main ( String arr [ ] ) { int n = 6 , m = 6 , a = 4 ; System . out . println ( Squares ( n , m , a ) ) ; } }
class GFG { static double extrapolate ( double [ ] [ ] d , double x ) { double y = d [ 0 ] [ 1 ] + ( x - d [ 0 ] [ 0 ] ) / ( d [ 1 ] [ 0 ] - d [ 0 ] [ 0 ] ) * ( d [ 1 ] [ 1 ] - d [ 0 ] [ 1 ] ) ; return y ; } public static void main ( String [ ] args ) { double [ ] [ ] d = { { 1.2 , 2.7 } , { 1.4 , 3.1 } } ; double x = 2.1 ; System . out . println ( "Value of y at x = 2.1 : " + extrapolate ( d , x ) ) ; } }
class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) { return 0 ; } else if ( ( ang * n ) % 180 != 0 ) { return 0 ; } int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 , n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }
import java . io . * ; import java . lang . * ; class GFG { public static int breakEvenPoint ( int exp1 , int S , int M ) { double earn = S - M ; double exp = exp1 ; double res = Math . ceil ( exp / earn ) ; int res1 = ( int ) res ; return res1 ; } public static void main ( String [ ] args ) { int exp = 3550 , S = 90 , M = 65 ; System . out . println ( breakEvenPoint ( exp , S , M ) ) ; } }
import java . io . * ; import java . util . * ; class GFG { public static int squaresum ( int n ) { return ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . lang . Math ; class GFG { public static int findNth ( int n ) { int nthElement = 19 + ( n - 1 ) * 9 ; int outliersCount = ( int ) Math . log10 ( nthElement ) - 1 ; nthElement += 9 * outliersCount ; return nthElement ; } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
import java . io . * ; class GFG { static int doublefactorial ( int n ) { int res = 1 ; for ( int i = n ; i >= 0 ; i = i - 2 ) { if ( i == 0 || i == 1 ) return res ; else res *= i ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( "Double factorial" + " is " + doublefactorial ( 5 ) ) ; } }
import java . util . * ; public class contest13 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . file . Paths ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Map ; import java . util . StringTokenizer ;  public class FindingBorders {  public static void main ( String [ ] args ) throws Exception { 
class Solution { int ans ; public int diameterOfBinaryTree ( TreeNode root ) { ans = 1 ; depth ( root ) ; return ans - 1 ; } public int depth ( TreeNode node ) { if ( node == null ) return 0 ; int L = depth ( node . left ) ; int R = depth ( node . right ) ; ans = Math . max ( ans , L + R + 1 ) ; return Math . max ( L , R ) + 1 ; } }
import java . util . * ; public class M_Round_5 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . * ; import java . util . * ; public class Asd { static PrintWriter w = new PrintWriter ( System . out ) ; static FastScanner s = new FastScanner ( ) ; public static void main ( String [ ] args ) { int t = 1 ;
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) { int T = nextInt ( ) ;
import java . util . Scanner ; public class year { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int n = sc . nextInt ( ) ; double x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x = x + sc . nextInt ( ) ; } System . out . println ( String . format ( "%.12f" , ( x / n ) ) ) ; } }
class GFG { static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) / Math . log ( 8 ) ; return ( i - Math . floor ( i ) < 0.000001 ) ; } public static void main ( String args [ ] ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class Solution { public int missingNumber ( int [ ] nums ) { int res = nums . length ; for ( int i = 0 ; i < nums . length ; i ++ ) { res ^= i ; res ^= nums [ i ] ; } return res ; } }
class GFG { static int ack ( int m , int n ) { if ( m == 0 ) { return n + 1 ; } else if ( ( m > 0 ) && ( n == 0 ) ) { return ack ( m - 1 , 1 ) ; } else if ( ( m > 0 ) && ( n > 0 ) ) { return ack ( m - 1 , ack ( m , n - 1 ) ) ; } else return n + 1 ; } public static void main ( String args [ ] ) { System . out . println ( ack ( 1 , 2 ) ) ; } }
class GFG { static int calculate_sum ( int a , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; int ans = a * sum ; return ans ; } public static void main ( String [ ] args ) { int a = 7 , N = 49 ; System . out . println ( "Sum of multiples of " + a + " up to " + N + " = " + calculate_sum ( a , N ) ) ; } }
import java . util . HashSet ; import java . util . Scanner ;  public class Problem22 {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int twoEggDrop ( int k ) { return ( int ) Math . ceil ( ( - 1.0 + Math . sqrt ( 1 + 8 * k ) ) / 2.0 ) ; } public static void main ( String [ ] args ) { int k = 100 ; System . out . println ( twoEggDrop ( k ) ) ; } }
import java . util . * ;  public class Combination_B {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; System . out . println ( 2 * ( ( int ) Math . ceil ( 2 * Math . sqrt ( sc . nextInt ( ) ) ) ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {
import java . util . * ; public class GfG { static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) { n = sum ; sum = 0 ; } sum += n % 10 ; n /= 10 ; } return sum ; } public static void main ( String argc [ ] ) { int n = 1234 ; System . out . println ( digSum ( n ) ) ; } }
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "YES" ; private static final String no = "NO" ;  void solve ( ) { int T = nextInt ( ) ;
class GFG { static int [ ] num_to_bits = new int [ ] { 0 , 1 , 1 , 2 , 1 , 2 , 2 , 3 , 1 , 2 , 2 , 3 , 2 , 3 , 3 , 4 } ; static int countSetBitsRec ( int num ) { int nibble = 0 ; if ( 0 == num ) return num_to_bits [ 0 ] ; nibble = num & 0xf ; return num_to_bits [ nibble ] + countSetBitsRec ( num > > 4 ) ; } public static void main ( String [ ] args ) { int num = 31 ; System . out . println ( countSetBitsRec ( num ) ) ; } }
class Test { static boolean findPattern ( int n ) { int prev = n % 2 ; n = n / 2 ; while ( n > 0 ) { int curr = n % 2 ; if ( curr == prev ) return false ; prev = curr ; n = n / 2 ; } return true ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . println ( findPattern ( n ) ? "Yes" : "No" ) ; } }
import java . util . Scanner ;  public class ForgotEp { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , a [ ] = new int [ n ] , i ; for ( i = 0 ; i < n - 1 ; i ++ ) { a [ in . nextInt ( ) - 1 ] ++ ; } in . close ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) System . out . println ( i + 1 ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n % 2 == 0 ) { System . out . println ( n / 2 ) ; } else { System . out . println ( - ( ( n / 2 ) + 1 ) ) ; } } }
import java . io . * ; class GFG { static float area ( float r ) { if ( r < 0 ) return - 1 ; float area = ( float ) ( 3.14 * Math . pow ( r / ( 2 * Math . sqrt ( 2 ) ) , 2 ) ) ; return area ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( area ( a ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int tc = sc . nextInt ( ) ; while ( tc -- > 0 ) { long n = sc . nextLong ( ) ; while ( n % 2 == 0 ) { n /= 2 ; } if ( n == 1 ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } sc . close ( ) ; } }
class GFG { static int maxOR ( int L , int R ) { int maximum = Integer . MIN_VALUE ; for ( int i = L ; i < R ; i ++ ) for ( int j = i + 1 ; j <= R ; j ++ ) maximum = Math . max ( maximum , ( i | j ) ) ; return maximum ; } public static void main ( String [ ] args ) { int L = 4 , R = 5 ; System . out . println ( maxOR ( L , R ) ) ; } }
import java . io . * ; class GFG { static int countSteps ( int x , int y ) { if ( x % y == 0 ) return x / y ; return x / y + countSteps ( y , x % y ) ; } public static void main ( String [ ] args ) { int x = 100 , y = 19 ; System . out . println ( countSteps ( x , y ) ) ; } }
class Solution { public int [ ] [ ] flipAndInvertImage ( int [ ] [ ] A ) { int C = A [ 0 ] . length ; for ( int [ ] row : A ) for ( int i = 0 ; i < ( C + 1 ) / 2 ; ++ i ) { int tmp = row [ i ] ^ 1 ; row [ i ] = row [ C - 1 - i ] ^ 1 ; row [ C - 1 - i ] = tmp ; } return A ; } }
import java . util . * ;  public class RoadConstruction_B {  public static void main ( String [ ] args ) {
class Solution { public int [ ] sortArrayByParityII ( int [ ] A ) { int j = 1 ; for ( int i = 0 ; i < A . length ; i += 2 ) if ( A [ i ] % 2 == 1 ) { while ( A [ j ] % 2 == 1 ) j += 2 ; int tmp = A [ i ] ; A [ i ] = A [ j ] ; A [ j ] = tmp ; } return A ; } }
import java . io . * ; class GFG { static int centeredOctahedral ( int n ) { return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . print ( centeredOctahedral ( n ) ) ; System . out . println ( ) ; n = 9 ; System . out . print ( centeredOctahedral ( n ) ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { long n = 5 ; long fac1 = 1 ; for ( int i = 2 ; i <= n - 1 ; i ++ ) fac1 = fac1 * i ; long fac2 = fac1 * n ; long totalWays = fac1 * fac2 ; System . out . println ( totalWays ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; System . out . println ( x / 2 ) ; }  } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;  int n = s . nextInt ( ) ; int t = s . nextInt ( ) ;  int [ ] [ ] intv = new int [ n ] [ 2 ] ;  for ( int i = 0 ; i < n ; i ++ ) { intv [ i ] [ 0 ] = s . nextInt ( ) ; intv [ i ] [ 1 ] = s . nextInt ( ) ; }  Arrays . sort ( intv , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ;  int res = 2 ;
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ;
import java . util . * ; public class LongestRepeatingSequence {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) System . out . println ( ( n / 2 ) - 1 ) ; else System . out . println ( ( n / 2 ) ) ; t -- ; } } }
import java . io . * ; import java . util . * ; import java . math . * ;  public class B639 { public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ;
import java . io . * ; class GFG { static int countStr ( int n ) { return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countStr ( n ) ) ; } }
import java . util . Scanner ;  public class NewMain1 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; if ( x == 3 ) { System . out . println ( 5 ) ;
import java . util . Scanner ;  public class incARG { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; String s = in . next ( ) ;  in . close ( ) ; System . out . println ( s . indexOf ( '0' ) >= 0 ? s . indexOf ( '0' ) + 1 : n ) ; } }
class GFG { static void nDigitPerfectCubes ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n - 1 ) ) ) ) , 3 ) ; System . out . print ( smallest + " " ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . cbrt ( Math . pow ( 10 , ( n ) ) ) ) - 1 , 3 ) ; System . out . print ( largest ) ; } public static void main ( String args [ ] ) { int n = 3 ; nDigitPerfectCubes ( n ) ; } }
import java . nio . file . FileAlreadyExistsException ; import java . sql . SQLOutput ; import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class AlternateSetBits { static boolean allBitsAreSet ( int n ) { if ( ( ( n + 1 ) & n ) == 0 ) return true ; return false ; } static boolean bitsAreInAltOrder ( int n ) { int num = n ^ ( n > > > 1 ) ; return allBitsAreSet ( num ) ; } public static void main ( String args [ ] ) { int n = 10 ; if ( bitsAreInAltOrder ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . io . * ; class GFG { static void checkEvenOdd ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( "Even" ) ; return ; } } System . out . println ( "Odd" ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 12 , 20 , 36 , 38 } ; int n = arr . length ; checkEvenOdd ( arr , n ) ; } }
import java . io . * ; class GFG { static int calculateSum ( int n ) { int a1 = 1 , a2 = 2 ; int r = 2 ; int d = 1 ; return ( n ) * ( 2 * a1 + ( n - 1 ) * d ) / 2 + a2 * ( int ) ( Math . pow ( r , n ) - 1 ) / ( r - 1 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( "Sum = " + calculateSum ( n ) ) ; } }
class GFG { static int firstDigit ( int n ) { int fact = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { fact = fact * i ; while ( fact % 10 == 0 ) fact = fact / 10 ; } while ( fact >= 10 ) fact = fact / 10 ; return fact ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( firstDigit ( n ) ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { double cm , meter , kilometer ; cm = 1000 ; meter = cm / 100.0 ; kilometer = cm / 100000.0 ; System . out . println ( "Length in meter = " + meter + "m" ) ; System . out . println ( "Length in Kilometer = " + kilometer + "km" ) ; } }
import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  public class a { static int [ ] count , count1 ; static long [ ] arr ; static char [ ] ch , ch1 ; static long [ ] darr ; static long [ ] [ ] mat , mat1 ; static int x ; static long maxl ; static double dec ; static String s ;
import java . io . * ; import java . util . * ; import java . lang . * ; class GFG { static double MinimumMail ( int n , int k , int x ) { double m = ( n - 1 ) + Math . ceil ( ( n - 1 ) * 1.0 / x ) * ( n - 1 ) + Math . ceil ( n * 1.0 / x ) * ( k - n ) ; return m ; } public static void main ( String [ ] args ) { int N = 4 ; int K = 9 ; int X = 2 ; System . out . print ( ( int ) MinimumMail ( N , K , X ) + "\n" ) ; } }
import java . util . Scanner ;  public class A1476 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ; int reminder = Math . floorMod ( K - N , K ) ; int answer = 1 + ( reminder + N - 1 ) / N ; System . out . println ( answer ) ; } }  }
import java . util . Scanner ;  public class Archer { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  double a = sc . nextInt ( ) ; double b = sc . nextInt ( ) ; double c = sc . nextInt ( ) ; double d = sc . nextInt ( ) ; double r = ( 1 - c / d ) * ( 1 - a / b ) ; System . out . println ( ( a / b ) / ( 1 - r ) ) ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;   public class file {  
import java . util . Scanner ; import java . lang . StringBuffer ;  public class birthday {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static boolean isDivisible ( long n ) { while ( n / 100 > 0 ) { long d = n % 10 ; n /= 10 ; n -= d * 5 ; } return ( n % 17 == 0 ) ; } public static void main ( String [ ] args ) { long n = 19877658 ; if ( isDivisible ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . io . * ; import java . util . * ;  public class ProbB { public static void main ( String [ ] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream ) ; Task solver = new Task ( ) ; solver . solve ( in , out ) ; out . close ( ) ; }
import java . util . * ;  public class P1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; if ( n <= k ) { System . out . println ( 0 + " " + 0 + " " + n ) ;  } else { long a = ( n / 2 ) / ( k + 1 ) ;  long b = k * a ; long N = n - ( a + a * k ) ; System . out . println ( a + " " + b + " " + N ) ; }  } }
import java . util . * ; public class math { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; int i , j ; while ( t -- > 0 ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int x = Math . max ( a , b ) ; int y = Math . min ( a , b ) ; if ( ( 2 * x - y ) % 3 == 0 && y >= ( 2 * x - y ) / 3 ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } } }
import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException {
public class Solution { public TreeNode mergeTrees ( TreeNode t1 , TreeNode t2 ) { if ( t1 == null ) return t2 ; if ( t2 == null ) return t1 ; t1 . val += t2 . val ; t1 . left = mergeTrees ( t1 . left , t2 . left ) ; t1 . right = mergeTrees ( t1 . right , t2 . right ) ; return t1 ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  import java . util . Scanner ;  public class Main { private static FastReader scanner = new FastReader ( ) ; public static void main ( String [ ] args ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] array = new int [ n ] ; readArray ( array ) ;
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static boolean isPowerOfFour ( int n ) { return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAAAAAA ) == 0 ; } public static void main ( String [ ] args ) { int test_no = 64 ; if ( isPowerOfFour ( test_no ) ) System . out . println ( test_no + " is a power of 4" ) ; else System . out . println ( test_no + " is not a power of 4" ) ; } }
class Solution { static int minimumX ( int n , int k ) { int ans = Integer . MAX_VALUE ; for ( int rem = k - 1 ; rem > 0 ; rem -- ) { if ( n % rem == 0 ) ans = Math . min ( ans , rem + ( n / rem ) * k ) ; } return ans ; } public static void main ( String args [ ] ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }
public final class p218 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p218 ( ) . run ( ) ) ; } public String run ( ) { return "0" ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; public class magnets { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 0 , d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int m = sc . nextInt ( ) ; if ( m != c ) { c = m ; d ++ ; } } System . out . println ( d ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; System . out . println ( 2 * x > y ? ( ( - 1 ) + " " + ( - 1 ) ) : ( x + " " + x * 2 ) ) ; } } } }
import java . util . * ; class solution { static int findMinDifference ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int diff1 = arr [ n - 1 ] - arr [ 1 ] ; int diff2 = arr [ n - 2 ] - arr [ 0 ] ; return Math . min ( diff1 , diff2 ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 4 , 3 , 4 } ; int n = arr . length ; System . out . print ( findMinDifference ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ; class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String args [ ] ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . print ( minimumCost ( a , n ) ) ; } }
class GFG { static int sum ( int n ) { int sum = ( n * ( n + 1 ) ) / 2 ; return sum ; } static int repeatedSum ( int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { n = sum ( n ) ; } return n ; } public static void main ( String [ ] args ) { int n = 2 , k = 2 ; System . out . println ( repeatedSum ( n , k ) ) ; } }
import java . util . * ; class Main { static void printDistinct ( int arr [ ] ) { HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( ! set . contains ( arr [ i ] ) ) { set . add ( arr [ i ] ) ; System . out . print ( arr [ i ] + " " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 3 , 4 , 3 , 5 , 6 } ; printDistinct ( arr ) ; } }
import java . io . * ; class Nth { public int nthTerm ( int N ) { if ( N <= 1 ) return 1 ; int i , fact = 1 ; for ( i = 1 ; i < N ; i ++ ) fact = fact * i ; return fact ; } } class GFG { public static void main ( String [ ] args ) { int N = 3 ; Nth a = new Nth ( ) ; System . out . println ( a . nthTerm ( N ) ) ; } }
import java . io . * ; class GFG { public static int fact ( int N ) { int i , product = 1 ; for ( i = 1 ; i <= N ; i ++ ) product = product * i ; return product ; } public static int nthTerm ( int N ) { return ( N * N ) * fact ( N ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; import java . util . * ;  public class Olympiad { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( ! set . contains ( a ) && a != 0 ) { set . add ( a ) ; } } System . out . println ( set . size ( ) ) ; } }
import java . util . * ; public class CodeForces { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int t = scan . nextInt ( ) ; while ( t -- > 0 ) { int n = scan . nextInt ( ) ; int x = scan . nextInt ( ) ; System . out . println ( x * 2 ) ; } scan . close ( ) ; } }
class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i <= n - 2 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( m == 0 ) { System . out . println ( 1 ) ; } else { System . out . println ( Math . min ( m , n - m ) ) ; } } } 
class GFG { static float polydiagonal ( float n , float a ) { if ( a < 0 && n < 0 ) { return - 1 ; } return ( float ) ( 2 * a * Math . sin ( ( ( ( n - 2 ) * 180 ) / ( 2 * n ) ) * 3.14159 / 180 ) ) ; } public static void main ( String [ ] args ) { float a = 9 , n = 10 ; System . out . printf ( "%.3f" , polydiagonal ( n , a ) ) ; } }
import java . io . * ; class GFG { public static void main ( String [ ] args ) { int a = 5 , b = 7 , c = 10 ; if ( a <= b && a <= c ) System . out . println ( a + " is the smallest" ) ; else if ( b <= a && b <= c ) System . out . println ( b + " is the smallest" ) ; else System . out . println ( c + " is the smallest" ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; System . out . println ( ( scan . nextLong ( ) + 5 ) / 10 * 10 ) ; } }
import java . util . Scanner ;  public class covidSpread2 { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { solvex ( ) ; } public static void solvex ( ) { int n = sc . nextInt ( ) ; int fac = n / 3 ; int ans = 2 * fac ; if ( n % 3 != 0 ) ans ++ ; System . out . println ( ans ) ; } }
import java . io . * ; class GFG { static int countIntegralSolutions ( int n ) { return ( ( n + 1 ) * ( n + 2 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }
class GFG { static int claculate sum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( 1 << i ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( "Sum of the series : " + calculateSum ( n ) ) ; } } ;
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . Scanner ; public class sol { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; String letters = "abcdefghijklmnopqrstuvwxyz" ; String password = "" ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t < k ) password += letters . charAt ( t ) ; t ++ ; if ( t >= k ) { t = 0 ; } } System . out . println ( password ) ; } }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; String s = String . valueOf ( n ) ; long copy1 = n ; if ( n >= 10 ) { long y1 = ( long ) ( n / ( Math . pow ( 10 , s . length ( ) - 1 ) ) ) + 1 ;
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int m = s . nextInt ( ) ; int k = s . nextInt ( ) ; String ans = Math . min ( m , k ) >= n ? "YES" : "NO" ; System . out . println ( ans ) ; } } 
class GFG { static String isDivisible ( long n ) { long temp = n ; int sum = 0 ; while ( n != 0 ) { int k = ( int ) n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) return "YES" ; return "NO" ; } public static void main ( String [ ] args ) { long n = 123 ; System . out . println ( isDivisible ( n ) ) ; } }
class GFG { static String isDivisible ( int n ) { int temp = n ; while ( n > 0 ) { int k = n % 10 ; if ( temp % k == 0 ) { return "YES" ; } n /= 10 ; } return "NO" ; } public static void main ( String [ ] args ) { int n = 9876543 ; System . out . println ( isDivisible ( n ) ) ; } }
import java . io . * ; class GFG { static void printAsMaximalPrimeSum ( int n ) { if ( n % 2 == 1 ) { System . out . print ( "3 " ) ; n -= 3 ; } while ( n > 0 ) { System . out . print ( "2 " ) ; n -= 2 ; } } public static void main ( String [ ] args ) { int n = 5 ; printAsMaximalPrimeSum ( n ) ; } }
import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintWriter ; import java . util . * ; import java . io . * ; import java . math . * ; public class Main { InputStream is ; PrintWriter out ; String INPUT = "" ;
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
class Test { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 15 , b = 20 ; System . out . println ( "LCM of " + a + " and " + b + " is " + lcm ( a , b ) ) ; } }
import java . io . * ; class GFG { static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 2 ; printPossible ( a , b , c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int sqrt = ( int ) ( Math . floor ( Math . sqrt ( n ) ) ) ; if ( n == sqrt * sqrt ) System . out . println ( 2 * sqrt ) ; else if ( n - ( sqrt * sqrt ) <= sqrt ) System . out . println ( 2 * sqrt + 1 ) ; else System . out . println ( 2 * sqrt + 2 ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class PolandBall { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ; import java . io . * ; public class parakh { public static void swap ( char a [ ] , int i , int j ) { char c = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = c ; } public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;
class GFG { static int maxOR ( int arr [ ] , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } return maxVal ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; System . out . println ( maxOR ( arr , n ) ) ; } }
import java . io . * ; class GFG { static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } public static void main ( String [ ] args ) { int m = 3 , n = 9 ; check ( n , m ) ; } }
class GFG { static int Rate ( int N1 , int N2 ) { float rate = ( N2 - N1 ) * 100 / N1 ; return ( int ) rate ; } public static void main ( String [ ] args ) { int N1 = 100 , N2 = 120 ; System . out . println ( Rate ( N1 , N2 ) + " %" ) ; } }
 import java . util . * ;   public class Practise { 
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = 0 ; for ( int i = 0 ; i < a ; i ++ ) { b += Math . abs ( in . nextInt ( ) ) ; } System . out . println ( b ) ; } }
import java . util . Scanner ;  public class A1422 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int A = in . nextInt ( ) ; int B = in . nextInt ( ) ; int C = in . nextInt ( ) ; int D = Math . max ( A , Math . max ( B , C ) ) ; System . out . println ( D ) ; } }  }
import java . io . * ; import java . util . * ; import java . math . BigInteger ;  public class test1 { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {
class GFG { static int findLargest ( int [ ] arr , int n ) { int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) gcd = __gcd ( arr [ i ] , gcd ) ; return gcd ; } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 6 , 9 } ; int n = arr . length ; System . out . print ( findLargest ( arr , n ) ) ; } }
public class GFG { static int countX ( int n ) { String binary = Integer . toBinaryString ( n ) ; int count = 0 ; for ( int i = 0 ; i < binary . length ( ) ; i ++ ) { if ( binary . charAt ( i ) == '1' ) count ++ ; } int answer = ( int ) Math . pow ( 2 , count ) ; return answer ; } public static void main ( String args [ ] ) { int n = 5 ; int answer = countX ( n ) ; System . out . println ( answer ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class BeautifulYear271A { public static void main ( String [ ] args ) throws java . lang . Exception {
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . Scanner ;  public class A1401 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ; int K = in . nextInt ( ) ; int answer = 0 ; if ( ( N % 2 == 0 ) != ( K % 2 == 0 ) ) { N ++ ; answer ++ ; } answer += Math . max ( 0 , K - N ) ; System . out . println ( answer ) ; } }  }
import java . io . PrintWriter ; import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) ; int pre = 0 ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int input = in . nextInt ( ) ; sum += Math . abs ( input - pre ) ; pre = input ; } pw . println ( sum ) ;  pw . close ( ) ; }  } 
class GFG { static long calculateSum ( int n , int k ) { long res = 1 ; long MOD = 1000000007 ; for ( int i = 0 ; i < k ; i ++ ) { res = ( res * n ) % MOD ; } return res ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; System . out . print ( calculateSum ( n , k ) ) ; } } ;
import java . io . * ; class GFG { static int pentagon_pyramidal ( int n ) { return n * n * ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }
class GFG { static void printSumSeries ( int N ) { float sum = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { sum += 1.0 / ( 2 * i - 1 ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int N = 6 ; printSumSeries ( N ) ; } }
import java . io . * ; class GFG { static int seriesSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }
import java . util . * ; class GFG { static int sticks [ ] = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; static int countSticks ( String str , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += ( sticks [ str . charAt ( i ) - '0' ] ) ; } return cnt ; } public static void main ( String [ ] args ) { String str = "56" ; int n = str . length ( ) ; System . out . println ( countSticks ( str , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ;  public class Task {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = "" ; int c = 0 ; int k = n ; for ( int i = 2 ; i < n ; i ++ ) { if ( k % i == 0 ) { s = s + i ; s = s + ( k / i ) ; break ;
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; System . out . print ( min + " " + ( max - min ) / 2 ) ; }
import java . io . * ; class Nth { public int nthTerm ( int N ) { return ( N * ( ( N / 2 ) + ( ( N % 2 ) * 2 ) + N ) ) ; } } class GFG { public static void main ( String [ ] args ) { int N = 5 ; Nth a = new Nth ( ) ; System . out . println ( "Nth term for N = " + N + " : " + a . nthTerm ( N ) ) ; } }
class GFG { static void generateSequence ( int n , int g ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( i * g + " " ) ; ; } public static void main ( String [ ] args ) { int n = 6 , g = 5 ; generateSequence ( n , g ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class code { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; int count = 0 ; while ( m > n ) { if ( m % 2 != 0 ) { m ++ ; count ++ ; } m /= 2 ; count ++ ; }  System . out . println ( count + n - m ) ; }   }
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {   public static void main ( String [ ] args ) {
import java . util . * ; import java . lang . * ; import java . io . * ; class Gfg { static void Digits ( int n ) { int largest = 0 ; int smallest = 9 ; while ( n != 0 ) { int r = n % 10 ; largest = Math . max ( r , largest ) ; smallest = Math . min ( r , smallest ) ; n = n / 10 ; } System . out . println ( largest + " " + smallest ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { int n = 2346 ; Digits ( n ) ; } }
class GFG { static float find_Area ( float a ) { float R = a * ( float ) ( 2.0 - Math . sqrt ( 2 ) ) ; float area = ( float ) ( ( 3.14 * R * R ) / 2.0 ) ; return area ; } public static void main ( String [ ] args ) { float a = 4 ; System . out . println ( " Area of semicircle = " + find_Area ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; check ( n ) ; } public static void check ( int n ) { int t = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { t += i ; if ( t == n ) { System . out . println ( "YES" ) ; return ; } } System . out . println ( "NO" ) ; } }
import java . io . * ; class GFG { int Circumference ( int a ) { return 4 * a ; } public static void main ( String args [ ] ) { GFG obj = new GFG ( ) ; int a = 5 ; System . out . println ( "Circumference of " + "a square is " + obj . Circumference ( a ) ) ; } }
class GFG { static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( ( n - 1 ) & ( n - 2 ) ) == 0 ) ; } public static void main ( String [ ] args ) { int n = 9 ; if ( onlyFirstAndLastAreSet ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class GFG { static double decdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.902 * a ; return d ; } public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( decdiagonal ( a ) ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;  public class absolute {  public static void main ( String [ ] args ) {
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; System . out . println ( "25" ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class Solution {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + " " ) ; } } }
import java . io . * ; class GFG { static int minimum_cost ( int a [ ] , int n ) { int mn = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mn = Math . min ( a [ i ] , mn ) ; sum += a [ i ] ; } return mn * ( sum - mn ) ; } public static void main ( String [ ] args ) { int a [ ] = { 4 , 3 , 2 , 5 } ; int n = a . length ; System . out . println ( minimum_cost ( a , n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
class GFG { public static long SubArraySum ( int arr [ ] , int n ) { long result = 0 , temp = 0 ; for ( int i = 0 ; i < n ; i ++ ) { temp = 0 ; for ( int j = i ; j < n ; j ++ ) { temp += arr [ j ] ; result += temp ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int n = arr . length ; System . out . println ( "Sum of SubArray : " + SubArraySum ( arr , n ) ) ; } }
import java . io . FileInputStream ; import java . util . Scanner ;  public class Project_01 {  public static void main ( String [ ] args ) { try {
class GFG { static int largestNum ( int a , int b ) { return a * ( ( a / b ) > 0 ? 1 : 0 ) + b * ( ( b / a ) > 0 ? 1 : 0 ) ; } public static void main ( String [ ] args ) { int a = 22 , b = 1231 ; System . out . print ( largestNum ( a , b ) ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner scn = new Scanner ( System . in ) ; int t = scn . nextInt ( ) ; for ( int c = 1 ; c <= t ; c ++ ) { int n = scn . nextInt ( ) ;
import java . io . * ; class GFG { static int divisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( divisorSum ( n ) ) ; n = 5 ; System . out . println ( divisorSum ( n ) ) ; } }
import java . util . * ; class GFG { static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) if ( i % M == 0 ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int A = 6 , B = 15 , M = 3 ; System . out . print ( sumDivisibles ( A , B , M ) + "\n" ) ; } }
import java . io . * ; import java . util . * ;  public class MAIN {  private static BufferedReader reader = null ; private static BufferedWriter writer = null ;  public static void main ( String [ ] args ) throws Exception { 
class GFG { static int sum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } sum = sum * ( int ) Math . pow ( 2 , n - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 5 , 6 } ; int n = arr . length ; System . out . println ( sum ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; String s = in . next ( ) ; char c [ ] = s . toCharArray ( ) ; Arrays . sort ( c ) ; System . out . println ( String . valueOf ( c ) ) ; } } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int l = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ;  int L = l ; int B = b ;  int counter = 0 ; while ( B >= L ) { L *= 3 ; B *= 2 ;  counter ++ ; }  System . out . println ( counter ) ; } }
class GFG { static int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return - 1 ; } public static void main ( String [ ] args ) { System . out . print ( "\n" + multiply ( 5 , - 11 ) ) ; } }
import java . util . * ; class solution { static float SellingPrice ( float CP , float PP ) { float P_decimal = 1 + ( PP / 100 ) ; float res = P_decimal * CP ; return res ; } public static void main ( String args [ ] ) { float C = 720 , P = 13 ; System . out . println ( SellingPrice ( C , P ) ) ; } }
public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String args [ ] ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( '1' ) ; else System . out . println ( '0' ) ; } }
import java . util . * ; public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( ( x == n / 2 || x == n / 2 + 1 ) && ( y == n / 2 || y == n / 2 + 1 ) ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; }  }
import java . io . * ; class GFG { static int findSum ( int arr [ ] , int n , int k ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { sum += arr [ i ] ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 16 , 10 , 9 , 6 , 7 , 17 } ; int n = arr . length ; int k = 3 ; System . out . println ( findSum ( arr , n , k ) ) ; } }
import java . io . * ; import java . math . * ; public class GFG { int getMinNum ( int a , int b , int c ) { if ( c < a || c > b ) { return c ; } int x = ( ( b / c ) * c ) + c ; return x ; } public static void main ( String args [ ] ) { int a = 2 ; int b = 4 ; int c = 4 ; GFG g = new GFG ( ) ; System . out . println ( g . getMinNum ( a , b , c ) ) ; } }
import java . nio . file . FileAlreadyExistsException ; import java . sql . SQLOutput ; import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; public class test { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long rook = sc . nextLong ( ) ; Set < Long > rows = new HashSet < Long > ( ) ; Set < Long > cols = new HashSet < Long > ( ) ;
import java . io . * ; import java . util . * ; class GFG { static int sumOfSeries ( int n ) { return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;
import java . util . * ; class GFG { static int nth_group ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String arr [ ] ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }
import java . util . * ; import java . io . * ; public class horses { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; if ( n - 1 <= v ) { System . out . println ( n - 1 ) ; return ; } long cost = v - 1 ; for ( int i = 1 ; i <= n - v ; i ++ ) cost += i ; System . out . println ( cost ) ; } }
import java . util . Scanner ;  public class WilburAndArray {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long prev , curr ; prev = sc . nextInt ( ) ; long count = Math . abs ( prev ) ; for ( int i = 1 ; i < n ; i ++ ) { curr = sc . nextInt ( ) ; count += Math . abs ( prev - curr ) ; prev = curr ; } System . out . println ( count ) ; sc . close ( ) ; } }
  import java . io . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main1 {  static class pair implements Comparable < pair > { int a ; int b ; public pair ( int a , int b ) { this . a = a ; this . b = b ; } @ Override public int compareTo ( pair o ) {
import java . io . * ; class GFG { static float cone ( float a ) { if ( a < 0 ) return - 1 ; float r = ( float ) ( a * Math . sqrt ( 2 ) ) / 3 ; float h = ( 2 * a ) / 3 ; float V = ( float ) ( 3.14 * Math . pow ( r , 2 ) * h ) ; return V ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( cone ( a ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 4 * ( int ) Math . pow ( n , 2 ) - 3 * n + 2 ; } public static void main ( String args [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static float rectanglearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; return 2 * a * b ; } public static void main ( String args [ ] ) { float a = 10 , b = 8 ; System . out . println ( rectanglearea ( a , b ) ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; scan . nextLine ( ) ; String s = scan . nextLine ( ) ; char [ ] temp = s . toCharArray ( ) ; Arrays . sort ( temp ) ; String l = String . valueOf ( temp ) ;
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001031A { static public void main ( final String [ ] args ) throws IOException { p001031A . _main ( args ) ; }
import java . lang . Math ; class GFG { public static int nthTerm ( int N ) { int nth = 0 , i ; for ( i = N ; i > 0 ; i -- ) { nth += Math . pow ( i , i ) ; } return nth ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Scanner ;   public class submission { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int d = in . nextInt ( ) ; int l = in . nextInt ( ) ; int v1 = in . nextInt ( ) ; int v2 = in . nextInt ( ) ; double distance = l - d ; double v = v1 + v2 ; double t = distance / v ; System . out . println ( t ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextLong ( ) ; }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
class GFG { public static int arraySum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 11 , 12 , 13 , 12 , 11 , 10 } ; int n = arr . length ; System . out . print ( arraySum ( arr , n ) ) ; } }
import java . io . * ; class GFG { static int numberOfWays ( int x ) { int dp [ ] = new int [ x + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= x ; i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; return dp [ x ] ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 3 == 0 ) System . out . print ( 'a' ) ; else if ( i % 3 == 1 ) System . out . print ( 'b' ) ; else System . out . print ( 'c' ) ; }  System . out . println ( ) ; } } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n == 1 ) { System . out . println ( 1 ) ; System . out . println ( 1 ) ; } else if ( n == 2 ) { System . out . println ( 1 ) ; System . out . println ( 1 + " " + 1 ) ; } else { long [ ] prices = new long [ ( int ) n + 2 ] ;
import java . io . * ; class GFG { static int frequency ( int a [ ] , int n , int x ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == x ) count ++ ; return count ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 5 , 5 , 5 , 4 } ; int x = 5 ; int n = a . length ; System . out . println ( frequency ( a , n , x ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static boolean check ( String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) return true ; } return false ; } public static void main ( String args [ ] ) { String s = "geeksforgeeks" ; if ( check ( s ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . * ; import java . lang . * ; class GFG { public static void main ( String args [ ] ) { float x1 = 2 , x2 = 1 , x3 = 3 ; float y1 = 2 , y2 = 1 , y3 = 1 ; float a = 2 , b = 1 , c = 1 ; float x = ( a * x1 + b * x2 + c * x3 ) / ( a + b + c ) ; float y = ( a * y1 + b * y2 + c * y3 ) / ( a + b + c ) ; System . out . println ( "Incenter= " + "(" + x + ", " + y + ")" ) ; } }
import java . util . Scanner ;  public class Comp11HW3 { static int m ( int i1 ) { return i1 % 2 == 0 ? i1 / 2 - 1 : i1 / 2 ; }  public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int i1 = input . nextInt ( ) ; 
class Solution { public char findTheDifference ( String s , String t ) { int total = t . charAt ( s . length ( ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) total += ( t . charAt ( i ) - s . charAt ( i ) ) ; return ( char ) total ; } }
import java . util . Scanner ;  public class P849A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ 0 ] % 2 != 0 && a [ n - 1 ] % 2 != 0 && n % 2 != 0 ? "Yes" : "No" ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( 1 ) ; } else { System . out . println ( ( int ) Math . ceil ( ( double ) ( n - 2 ) / ( double ) x ) + 1 ) ; } } } }
import java . util . * ; public class TwoBagsOfPotatoes { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int y = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; sc . close ( ) ; boolean falg = false ; int start = y / k + 1 ; for ( int i = start ; i <= n / k ; i ++ ) { falg = true ; System . out . print ( ( k * i - y ) + " " ) ; } if ( ! falg ) System . out . println ( - 1 ) ; } }
class GFG { static double innerCirclearea ( double radius ) { if ( radius < 0 ) { return - 1 ; } double r = radius / 2 ; double Area = ( 3.14 * Math . pow ( r , 2 ) ) ; return Area ; } public static void main ( String arr [ ] ) { double radius = 4 ; System . out . println ( "Area of circle c2 = " + innerCirclearea ( radius ) ) ; } }
import java . util . * ;  public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; double n = input . nextDouble ( ) ; double p = input . nextDouble ( ) ; double q = input . nextDouble ( ) ; System . out . printf ( Locale . UK , "%.4f\n" , p * n / ( p + q ) ) ; } }
import java . util . * ; import java . io . * ; public class Asd { static Scanner s = new Scanner ( System . in ) ; static PrintWriter w = new PrintWriter ( System . out ) ; public static void main ( String args [ ] ) { int t = 1 ;
import java . math . BigInteger ; import java . util . * ; import java . io . * ;  public class CFB { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ;
import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;  public class ExamA3 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s1 = in . next ( ) ; Set < Character > setS1 = new HashSet < > ( ) ; for ( char c : s1 . toCharArray ( ) ) { setS1 . add ( c ) ; } String s2 = in . next ( ) ;  int flag = - 1 ;
class Solution { public int firstUniqChar ( String s ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) freq [ s . charAt ( i ) - 'a' ] ++ ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( freq [ s . charAt ( i ) - 'a' ] == 1 ) return i ; return - 1 ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int nextPerfectSquare ( int N ) { int nextN = ( int ) Math . floor ( Math . sqrt ( N ) ) + 1 ; return nextN * nextN ; } public static void main ( String args [ ] ) { int n = 35 ; System . out . println ( nextPerfectSquare ( n ) ) ; } }
class GFG { static boolean check ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] == 1 ) return true ; return false ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 1 , 0 , 1 } ; int n = a . length ; if ( check ( a , n ) == true ) System . out . println ( "YES\n" ) ; else System . out . println ( "NO\n" ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001013A { static public void main ( final String [ ] args ) throws IOException { p001013A . _main ( args ) ; }
class GFG { static int dayofweek ( int d , int m , int y ) { int t [ ] = { 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 } ; y -= ( m < 3 ) ? 1 : 0 ; return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d ) % 7 ; } public static void main ( String arg [ ] ) { int day = dayofweek ( 30 , 8 , 2010 ) ; System . out . print ( day ) ; } }
public final class p001 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p001 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 0 ; i < 1000 ; i ++ ) { if ( i % 3 == 0 || i % 5 == 0 ) sum += i ; } return Integer . toString ( sum ) ; } }
class GFG { static int sum ( int N ) { int S1 , S2 , S3 ; S1 = ( ( N / 3 ) ) * ( 2 * 3 + ( N / 3 - 1 ) * 3 ) / 2 ; S2 = ( ( N / 4 ) ) * ( 2 * 4 + ( N / 4 - 1 ) * 4 ) / 2 ; S3 = ( ( N / 12 ) ) * ( 2 * 12 + ( N / 12 - 1 ) * 12 ) / 2 ; return S1 + S2 - S3 ; } public static void main ( String [ ] args ) { int N = 20 ; System . out . print ( sum ( 12 ) ) ; } }
class GFG { public static void main ( String [ ] args ) { char i ; System . out . printf ( "The Alphabets from A to Z are: \n" ) ; for ( i = 'A' ; i <= 'Z' ; i ++ ) { System . out . printf ( "%c " , i ) ; } } }
class GFG { static void result ( long n , long k , long t ) { if ( t <= k ) System . out . println ( t ) ; else if ( t <= n ) System . out . println ( k ) ; else { long temp = t - n ; temp = k - temp ; System . out . println ( temp ) ; } } public static void main ( String args [ ] ) { long n , k , t ; n = 10 ; k = 5 ; t = 12 ; result ( n , k , t ) ; } }
import java . io . * ; class GfG { static void solution ( int a , int b , int n ) { for ( int i = 0 ; i * a <= n ; i ++ ) { if ( ( n - ( i * a ) ) % b == 0 ) { System . out . println ( "x = " + i + ", y = " + ( n - ( i * a ) ) / b ) ; return ; } } System . out . println ( "No solution" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , n = 7 ; solution ( a , b , n ) ; } }
import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ;  int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ;  int size = m * n ; int max = size / 2 ; System . out . print ( max ) ;  } }
class GFG { static int maxTeams ( int N1 , int N2 ) { int count = 0 ; while ( N1 > 0 && N2 > 0 && N1 + N2 >= 3 ) { if ( N1 > N2 ) { N1 -= 2 ; N2 -= 1 ; } else { N1 -= 1 ; N2 -= 2 ; } count ++ ; } return count ; } public static void main ( String [ ] args ) { int N1 = 4 , N2 = 5 ; System . out . println ( maxTeams ( N1 , N2 ) ) ; } }
import java . io . * ; class GFG { static int seriesSum ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) ) / 6 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriesSum ( n ) ) ; } }
import java . io . * ; class GFG { public static void main ( String args [ ] ) { float P = 1 , R = 1 , T = 1 ; float SI = ( P * T * R ) / 100 ; System . out . println ( "Simple interest = " + SI ) ; } }
class GFG { static int power ( int n , int r ) { int count = 0 ; for ( int i = r ; ( n / i ) >= 1 ; i = i * r ) count += n / i ; return count ; } public static void main ( String [ ] args ) { int n = 6 , r = 3 ; System . out . print ( power ( n , r ) ) ; } }
import com . sun . security . jgss . GSSUtil ;  import javax . swing . table . AbstractTableModel ; import java . io . * ; import java . util . * ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ; 
import java . io . * ; class GFG { static int findNumber ( int n ) { int num = n - 1 ; num = 2 * ( int ) Math . pow ( 4 , num ) ; num = ( int ) Math . floor ( num / 3.0 ) ; return num ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findNumber ( n ) ) ; } }
class GFG { static int factorial ( int n ) { int fact = 1 ; for ( int i = 2 ; i <= n ; i ++ ) fact = fact * i ; return ( fact ) ; } static int result ( int n , int m ) { return ( factorial ( n ) - factorial ( n - m + 1 ) * factorial ( m ) ) ; } public static void main ( String args [ ] ) { System . out . println ( result ( 5 , 3 ) ) ; } }
class GFG { static void myCopy ( char s1 [ ] , char s2 [ ] ) { int i = 0 ; for ( i = 0 ; i < s1 . length ; i ++ ) s2 [ i ] = s1 [ i ] ; } public static void main ( String [ ] args ) { char s1 [ ] = "GEEKSFORGEEKS" . toCharArray ( ) ; char s2 [ ] = new char [ s1 . length ] ; myCopy ( s1 , s2 ) ; System . out . println ( String . valueOf ( s2 ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static float ellipse ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float x = ( float ) ( 3.14 * l * b ) / 4 ; return x ; } public static void main ( String args [ ] ) { float a = 5 , b = 3 ; System . out . println ( ellipse ( a , b ) ) ; } }
import java . util . HashSet ; import java . util . Scanner ;  public class problem112 {  public static void main ( String [ ] args ) {
import java . util . * ; public class VanyaandCards {  public static void main ( String [ ] args ) {
import java . io . IOException ; import java . util . * ; public class Punctuation {  public static void main ( String [ ] args ) throws IOException {
import java . util . Arrays ; import java . util . Locale ; import java . util . Scanner ; import java . lang . String ; import java . util . Random ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; n != 0 ; i ++ ) { if ( n % 2 == 0 ) { n = n / 2 ; } else { n -- ; ans ++ ; }  } System . out . println ( ans ) ; } }
public final class p301 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p301 ( ) . run ( ) ) ; } public String run ( ) { int a = 0 ; int b = 1 ; for ( int i = 0 ; i < 32 ; i ++ ) { int c = a + b ; a = b ; b = c ; } return Integer . toString ( a ) ; } }
class GFG { static boolean isPerfectSquare ( double x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } public static void main ( String [ ] args ) { double x = 2500 ; if ( isPerfectSquare ( x ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
class GFG { long ll ; static void solve ( long n ) { if ( n == 1 ) { System . out . println ( - 1 ) ; } else { int num = 2 ; for ( long i = 0 ; i < n - 1 ; i ++ ) { num = ( num * 10 ) + 3 ; } System . out . println ( num ) ; } } public static void main ( String [ ] args ) { long n = 4 ; solve ( n ) ; } }
import java . io . * ; class GFG { static int count ( int S [ ] , int m , int n ) { if ( n == 0 ) return 1 ; if ( n < 0 ) return 0 ; if ( m <= 0 && n >= 1 ) return 0 ; return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int m = arr . length ; System . out . println ( count ( arr , m , 4 ) ) ; } }
import java . util . Scanner ;  public class TileArea { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;  int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ; int c = scan . nextInt ( ) ;  System . out . println ( ( b + a - 1 ) * ( c + a - 1 ) - a * ( a - 1 ) ) ; } }
import java . util . * ; public class DimaandGuards {  public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;  public class NewClass {  public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int len = Integer . parseInt ( reader . readLine ( ) ) ; String str = reader . readLine ( ) ; int conuterOnces = 0 , counterZeros = 0 ; 
import java . util . * ; class GFG { static int two_sets ( int a [ ] , int n ) { Arrays . sort ( a ) ; return a [ n / 2 ] - a [ ( n / 2 ) - 1 ] ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 6 , 7 , 9 } ; int n = a . length ; System . out . println ( two_sets ( a , n ) ) ; } }
import java . util . * ; class GFG { static void findNumbers ( int N ) { int i = 1 ; while ( i <= N ) { System . out . print ( ( i * i * i ) + " " ) ; i ++ ; } } public static void main ( String [ ] args ) { int N = 4 ; findNumbers ( N ) ; } }
class GFG { static int maxN = 20 ; static int maxM = 64 ; static int cntSplits ( String s ) { if ( s . charAt ( s . length ( ) - 1 ) == '1' ) return 0 ; int c_zero = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) c_zero += ( s . charAt ( i ) == '0' ) ? 1 : 0 ; return ( int ) Math . pow ( 2 , c_zero - 1 ) ; } public static void main ( String [ ] args ) { String s = "10010" ; System . out . println ( cntSplits ( s ) ) ; } }
import java . util . Scanner ;  public class LittleArtem { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int remaining = n % 3 ; if ( remaining != 0 ) { System . out . println ( ( n / 3 ) * 2 + 1 ) ; } else { System . out . println ( ( n / 3 ) * 2 ) ; }  } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
public class GFG { static int kthOdd ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) k -- ; if ( k == 0 ) return arr [ i ] ; } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 2 ; System . out . print ( kthOdd ( arr , n , k ) ) ; } }
import java . util . * ; class GFG { static int minimumValue ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) answer += arr [ i ] * arr [ i ] ; return answer * ( 2 * k - 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 21 , 5 , 3 , 8 } , k = 3 ; int n = arr . length ; System . out . print ( minimumValue ( arr , n , k ) ) ; } }
import java . util . * ; public class square { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] num = new int [ 100001 ] ; for ( int i = 1 ; i <= n ; i ++ ) { int p = sc . nextInt ( ) ; num [ p ] ++ ; } for ( int i = 1 ; i <= 100000 ; i ++ ) if ( num [ i ] % 2 != 0 ) { System . out . println ( "Conan" ) ; return ; } System . out . println ( "Agasa" ) ; } }
import java . util . * ; class GFG { static void printOrder ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n / 2 ; i ++ ) System . out . print ( arr [ i ] + " " ) ; for ( int j = n - 1 ; j >= n / 2 ; j -- ) System . out . print ( arr [ j ] + " " ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; int n = arr . length ; printOrder ( arr , n ) ; } }
import java . io . * ; import java . util . * ; class GFG { public static int findMaxValue ( ) { int res = 2 ; long fact = 2 ; while ( true ) { if ( fact < 0 ) break ; res ++ ; fact = fact * res ; } return res - 1 ; } public static void main ( String [ ] args ) { System . out . println ( "Maximum value of" + " integer " + findMaxValue ( ) ) ; } }
import java . util . * ; import java . lang . Math ;  public class NewClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) , k = sc . nextLong ( ) ; if ( k > Math . ceil ( n / 2.0 ) ) { long num = 0 ; k -= Math . ceil ( n / 2.0 ) ; num += 2 * k ; System . out . println ( num ) ; } else { k -- ; long num = 1 ; num += k * 2 ; System . out . println ( num ) ; } } }
import java . io . * ; import java . util . * ; import java . math . * ; public class Maths { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ; public static void main ( String args [ ] ) throws IOException {
import java . io . * ; import java . util . * ; import java . math . * ; import java . lang . * ;  public class Solution implements Runnable {  public void run ( ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 ; int testcase = 0 ;
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) {
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {
class GFG { static String recursiveFun ( int n ) { if ( n == 1 ) return "int" ; return "gcd(int, " + recursiveFun ( n - 1 ) + ")" ; } public static void main ( String [ ] arg ) { int n = 5 ; System . out . println ( recursiveFun ( n ) ) ; } }
import java . util . * ; import java . math . * ; public class SnowFootprints { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int size = sc . nextInt ( ) ; String s = sc . next ( ) ;
class GFG { static void findEncryptedArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum - arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; findEncryptedArray ( arr , N ) ; } }
import java . util . * ; class GFG { static int checkSparse ( int n ) { if ( ( n & ( n > > 1 ) ) >= 1 ) return 0 ; return 1 ; } public static void main ( String [ ] args ) { System . out . println ( checkSparse ( 72 ) ) ; System . out . println ( checkSparse ( 12 ) ) ; System . out . println ( checkSparse ( 2 ) ) ; System . out . println ( checkSparse ( 3 ) ) ; } }
import java . util . Scanner ; public class Prism { public static void Calculate_area ( ) { double b = 3 , h = 4 , s1 = 3 , s2 = 6 ; double s3 = 6 , Ht = 8 , SA ; SA = b * h + ( s1 + s2 + s3 ) * Ht ; System . out . printf ( "The area of triangular prism is : %f" , SA ) ; } public static void main ( String [ ] args ) { Calculate_area ( ) ; } }
   import java . io . * ; import java . util . * ; import java . math . BigInteger ; import java . lang . Object ;   public class Main { static class sort implements Comparator < int [ ] > { public int compare ( int [ ] a , int [ ] b ) {
import java . util . * ; public class FoxandNumberGame {  public static void main ( String [ ] args ) {
import java . util . * ;  public class CodeForces842A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int l = input . nextInt ( ) ; int r = input . nextInt ( ) ; int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; int k = input . nextInt ( ) ; long c = 1 ; for ( int i = x ; i <= y ; i ++ ) { c = ( long ) k * i ; if ( c >= l && c <= r ) {
import java . io . * ; class GFG { static int setmiddlebits ( int n ) { n |= n > > 1 ; n |= n > > 2 ; n |= n > > 4 ; n |= n > > 8 ; n |= n > > 16 ; return ( n > > 1 ) ^ 1 ; } static int togglemiddlebits ( int n ) { if ( n == 1 ) return 1 ; return n ^ setmiddlebits ( n ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( togglemiddlebits ( n ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ;   public class Practise { 
class Test { static int factorial ( int n ) { int i = n , fact = 1 ; while ( n / i != n ) { fact = fact * i ; i -- ; } return fact ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( "Factorial of " + num + " is " + factorial ( 5 ) ) ; } }
import java . util . * ; public class LovelyPalindromes {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; } public static void main ( String args [ ] ) { System . out . println ( "Count = " + countMultiples ( 25 ) ) ; } }
import java . util . * ; public class GFG { static int fact ( int n ) { if ( n <= 1 ) return 1 ; return n * fact ( n - 1 ) ; } static int nPr ( int n , int r ) { return fact ( n ) / fact ( n - r ) ; } public static void main ( String args [ ] ) { int n = 5 ; int r = 2 ; System . out . println ( n + "P" + r + " = " + nPr ( n , r ) ) ; } }
import java . util . Scanner ;  public class cf1430A {  public static void main ( String [ ] args ) throws Exception { 
import java . util . * ;  public class P1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int sum = 0 ;  int a = sc . nextInt ( ) ; int f = a ; int b = sc . nextInt ( ) ; while ( a >= b ) { sum ++ ; a -= b ; a += 1 ; } System . out . println ( f + sum ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . io . IOException ; import java . util . Scanner ;  public class Codeforce {  public static void main ( String [ ] args ) throws IOException {  Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) , y = input . nextInt ( ) ; System . out . println ( ( x + y - 1 ) / x ) ; } }
import java . util . * ; import java . io . * ;  public class CFA { BufferedReader br ; PrintWriter out ; StringTokenizer st ; boolean eof ; private static final long MOD = 1000L * 1000L * 1000L + 7 ; private static final int [ ] dx = { 0 , - 1 , 0 , 1 } ; private static final int [ ] dy = { 1 , 0 , - 1 , 0 } ; private static final String yes = "Yes" ; private static final String no = "No" ;  void solve ( ) { int T = nextInt ( ) ;
import java . io . * ; class GFG { static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return ( n ^ num ) ; } public static void main ( String [ ] args ) { int n = 50 ; int l = 2 , r = 5 ; System . out . println ( toggleBitsFromLToR ( n , l , r ) ) ; } }
class GFG { static void SubarraysWithSumS ( int n , int k , int s ) { for ( int i = 0 ; i < k ; i ++ ) System . out . print ( s + " " ) ; for ( int i = k ; i < n ; i ++ ) System . out . print ( s + 1 + " " ) ; } public static void main ( String [ ] args ) { int n = 4 , k = 2 , s = 3 ; SubarraysWithSumS ( n , k , s ) ; } }
import java . util . * ; class GFG { static int calculate_change ( int length , int breadth ) { int change = 0 ; change = length + breadth + ( ( length * breadth ) / 100 ) ; return change ; } public static void main ( String args [ ] ) { int cL = 20 ; int cB = - 10 ; int cA = calculate_change ( cL , cB ) ; System . out . println ( + cA ) ; } }
import java . util . * ; public class Main { final static int maxn = ( int ) 1e5 + 10 ; static int b [ ] = new int [ maxn ] ; static int g [ ] = new int [ maxn ] ; public static void main ( String args [ ] ) {
 import java . util . * ;   public class Practise { 
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
class GFG { static int countWays ( int n ) { int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 ; } return dp [ n ] ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( countWays ( n ) ) ; } }
import java . util . * ;  public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; long sum = 0 ; int min = 0 ;  for ( int i = 0 ; i < n ; i ++ ) { int x = input . nextInt ( ) ; if ( ( x & 1 ) == 1 && ( x < min || min == 0 ) ) { min = x ; } sum += x ; } System . out . println ( ( sum & 1 ) == 0 ? sum : sum - min ) ; } }
 import java . util . * ; import java . lang . * ;
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class Exam { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . util . * ; class GFG { static int sumPairs ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + ( arr [ i ] * ( 2 * n ) ) ; } return sum ; } static public void main ( String [ ] arg ) { int arr [ ] = { 1 , 2 , 3 } ; int n = arr . length ; System . out . println ( sumPairs ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ;  public class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ;
class GFG { public static void main ( String [ ] args ) { String str = "Mr John Smith   " ; str = str . trim ( ) ; str = str . replaceAll ( "\\s" , "%20" ) ; System . out . println ( str ) ; } }
class GFG { static int nextGreater ( int N ) { int power_of_2 = 1 , shift_count = 0 ; while ( true ) { if ( ( ( N > > shift_count ) & 1 ) % 2 == 0 ) break ; shift_count ++ ; power_of_2 = power_of_2 * 2 ; } return ( N + power_of_2 ) ; } public static void main ( String [ ] a ) { int N = 11 ; System . out . println ( "The next number is = " + nextGreater ( N ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { String str = scanner . next ( ) ; if ( str . length ( ) > 10 ) { System . out . println ( "" + str . charAt ( 0 ) + ( str . length ( ) - 2 ) + str . charAt ( str . length ( ) - 1 ) ) ; } else { System . out . println ( str ) ; } } } }
import java . util . * ;  public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { String s = sc . next ( ) ; String t = sc . next ( ) ; boolean ans = false ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { char ch = s . charAt ( j ) ;
class GFG { static float ellipsearea ( float r ) { if ( r < 0 ) return - 1 ; float a = ( float ) ( ( 3.14f * r * r ) / 4 ) ; return a ; } public static void main ( String [ ] args ) { float r = 5 ; System . out . println ( ellipsearea ( r ) ) ; } }
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = ( int ) Math . sqrt ( n ) ; for ( int i = r ; i >= 1 ; i -- ) { if ( n % i == 0 ) { System . out . println ( i + " " + n / i ) ; break ; } } } }
import java . util . Scanner ; public class Jumps {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int tc = in . nextInt ( ) ; int x ; while ( tc -- != 0 ) { x = in . nextInt ( ) ; int c = 0 ; int i = 1 ; while ( c < x ) { c += i ; i ++ ; } if ( c == x + 1 ) System . out . println ( i ) ; else System . out . println ( i - 1 ) ; } } }
import java . io . * ; class GFG { static void Sum_upto_nth_Term ( int n ) { int r = n * ( n + 1 ) * ( 2 * n + 7 ) / 3 ; System . out . println ( r ) ; } public static void main ( String [ ] args ) { int N = 5 ; Sum_upto_nth_Term ( N ) ; } }
class GFG { static void printRoots ( long a , long b , long c ) { System . out . println ( 1 + ", " + c / ( a * 1.0 ) ) ; } public static void main ( String [ ] args ) { long a = 2 ; long b = 3 ; long c = - 5 ; printRoots ( a , b , c ) ; } }
import java . lang . * ; import java . util . * ; class GFG { static int findNum ( int N , int K ) { int rem = N % K ; if ( rem == 0 ) return N ; else return N - rem ; } public static void main ( String args [ ] ) { int N = 45 , K = 6 ; System . out . print ( "Largest number smaller " + "than or equal to " + N + "\nthat is divisible by " + K + " is " + findNum ( N , K ) ) ; } }
import java . util . * ; public class ValeraandX {  public static void main ( String [ ] args ) {
class GFG { static int nthTerm ( int N ) { int nth = 0 , first_term = 12 ; nth = ( int ) ( ( first_term * ( Math . pow ( 2 , N - 1 ) ) ) + 11 * ( ( Math . pow ( 2 , N - 1 ) ) - 1 ) ) ; return nth ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . print ( nthTerm ( N ) + "\n" ) ; } }
import java . io . * ; import java . lang . * ; class GFG { public static double answer ( double X , double K ) { double i = 10 ; double MAX = Math . pow ( i , K ) - 1 ; return ( MAX - ( MAX % X ) ) ; } public static void main ( String [ ] args ) { double X = 30 ; double K = 3 ; System . out . println ( ( int ) answer ( X , K ) ) ; } }
import java . math . BigInteger ; public final class p063 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p063 ( ) . run ( ) ) ; } public String run ( ) { int count = 0 ; for ( int n = 1 ; n <= 9 ; n ++ ) { for ( int k = 1 ; k <= 21 ; k ++ ) { if ( BigInteger . valueOf ( n ) . pow ( k ) . toString ( ) . length ( ) == k ) count ++ ; } } return Integer . toString ( count ) ; } }
import java . util . Arrays ; import java . util . Scanner ;  public class P767A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , t = n ; int [ ] a = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int val = sc . nextInt ( ) ; a [ val ] = 1 ; while ( a [ t ] == 1 ) { System . out . print ( t -- + " " ) ; } System . out . println ( ) ; } } }
class GFG { static long squareDigitSum ( String s ) { long lengthN = s . length ( ) ; long result = ( lengthN / 9 ) * 81 + ( long ) Math . pow ( ( lengthN % 9 ) , 2 ) ; return result ; } public static void main ( String [ ] args ) { String s = "1111" ; System . out . println ( squareDigitSum ( s ) ) ; } }
import java . util . * ; import static java . lang . Math . cbrt ;  public class Test { public static void main ( String [ ] args ) throws Exception {  Scanner input = new Scanner ( System . in ) ; int n1 = input . nextInt ( ) ; int n2 = input . nextInt ( ) ; int k1 = input . nextInt ( ) ; int k2 = input . nextInt ( ) ;  System . out . println ( n1 > n2 ? "First" : "Second" ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {
import java . util . Scanner ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; while ( t -- != 0 ) { long k = s . nextLong ( ) ; long x = s . nextLong ( ) ; System . out . println ( x + ( 9 * ( k - 1 ) ) ) ; } } }
import java . io . * ; class GFG { static void modularInverse ( int n , int prime ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) dp [ i ] = dp [ prime % i ] * ( prime - prime / i ) % prime ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( dp [ i ] + " " ) ; } public static void main ( String args [ ] ) { int n = 10 , prime = 17 ; modularInverse ( n , prime ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int m = s . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % m == 0 ) { n ++ ; } } System . out . println ( n ) ; } }  
import java . util . * ; public class Dungeon { static int n ; static int [ ] A ; public static void main ( String [ ] args ) {
class GFG { static int smallest ( int x , int y , int z ) { int c = 0 ; while ( x != 0 && y != 0 && z != 0 ) { x -- ; y -- ; z -- ; c ++ ; } return c ; } public static void main ( String [ ] args ) { int x = 12 , y = 15 , z = 5 ; System . out . printf ( "Minimum of 3" + " numbers is %d" , smallest ( x , y , z ) ) ; } }
class GFG { static int firstFactorialDivisibleNumber ( int x ) { int i = 1 ; int fact = 1 ; for ( i = 1 ; i < x ; i ++ ) { fact = fact * i ; if ( fact % x == 0 ) break ; } return i ; } public static void main ( String [ ] args ) { int x = 16 ; System . out . print ( firstFactorialDivisibleNumber ( x ) ) ; } }
import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;  public class main897 { public static PrintWriter out = new PrintWriter ( System . out ) ; public static FastScanner enter = new FastScanner ( System . in ) ; public static int [ ] arr ;  public static void main ( String [ ] args ) throws IOException { int n = enter . nextInt ( ) ;
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { static void solve ( ) {
class GFG { static int getPairs ( int a [ ] ) { int n = a . length ; int count = ( n * ( n - 1 ) ) / 2 ; return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } }
import java . util . Scanner ;  public class A1469 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { String S = in . next ( ) ; boolean possible = ( S . length ( ) % 2 == 0 ) && ( S . charAt ( 0 ) != ')' ) && ( S . charAt ( S . length ( ) - 1 ) != '(' ) ; System . out . println ( possible ? "YES" : "NO" ) ; } }  }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001054A { static public void main ( final String [ ] args ) throws IOException { p001054A . _main ( args ) ; }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int d = in . nextInt ( ) ; String s ; int max = - 1 , m = 0 ; for ( int i = 0 ; i < d ; i ++ ) { s = in . next ( ) ; if ( s . indexOf ( "0" ) >= 0 ) m ++ ; else { if ( m > max ) max = m ; m = 0 ; } } if ( m > max ) max = m ; System . out . println ( max ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;   public class Zad1330B { static int [ ] a ; public static void main ( String [ ] args ) {
import java . lang . * ; class GFG { static void checkSquare ( String s1 , String s2 ) { int c = Integer . valueOf ( s1 + s2 ) ; int d = ( int ) Math . sqrt ( c ) ; if ( d * d == c ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } public static void main ( String [ ] args ) { String s1 = "12" ; String s2 = "1" ; checkSquare ( s1 , s2 ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { int fact = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fact = fact * i ; return fact ; } static int nthTerm ( int N ) { return ( factorial ( N + 1 ) / 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
class Squares { public static int numberOfSquares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return base * ( base + 1 ) / 2 ; } public static void main ( String args [ ] ) { int base = 8 ; System . out . println ( numberOfSquares ( base ) ) ; } }
import java . util . Scanner ;   public class TheatreSquare_problem {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n - i ; j ++ ) for ( int k = 0 ; k <= ( n - i - j ) ; k ++ ) if ( i + j + k == n ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }
import java . util . * ; public class Main {  public static void main ( String [ ] args ) { int t , n ;  Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . nextInt ( ) ;  System . out . println ( ( n <= 3 ) ? n - 1 : 2 + ( n & 1 ) ) ; }
import java . io . * ; import java . util . * ; import java . math . * ;  public class Solution { static int recmin ; public static void main ( String [ ] args ) throws IOException { FastScanner fs = new FastScanner ( ) ; PrintWriter out = new PrintWriter ( System . out ) ; 
import java . util . * ; class solution { static void CountPair ( int L , int R ) { int x = ( R - L + 1 ) ; System . out . println ( x / 2 + "\n" ) ; } public static void main ( String args [ ] ) { int L , R ; L = 1 ; R = 8 ; CountPair ( L , R ) ; } }
import java . util . * ; import java . math . * ; import java . io . * ; 
import java . util . Scanner ;   public class SimpleXML {  public static void main ( String [ ] args ) {
n = int ( input ( ) ) l = list ( map ( int , input ( ) . split ( ) ) ) s = sum ( l ) q = s
public class GFG { static int totalDigits ( int n ) { int number_of_digits = 0 ; for ( int i = 1 ; i <= n ; i *= 10 ) number_of_digits += ( n - i + 1 ) ; return number_of_digits ; } public static void main ( String [ ] args ) { int n = 13 ; System . out . println ( totalDigits ( n ) ) ; } }
class GFG { static int claculate sum ( int n ) { int sum = ( 1 << ( n + 1 ) ) ; return sum - 1 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( "Sum of the series of power 2 is : " + calculateSum ( n ) ) ; } } ;
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = a [ 0 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } for ( int i = 0 ; i < 4 ; i ++ ) { if ( max - a [ i ] != 0 ) { System . out . println ( max - a [ i ] + " " ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static int factorial ( int N ) { if ( N == 0 || N == 1 ) return 1 ; return N * factorial ( N - 1 ) ; } static int nthTerm ( int N ) { return ( factorial ( N ) * ( N + 2 ) / 2 ) ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; import java . math . * ; class GFG { static int reachTarget ( int target ) { target = Math . abs ( target ) ; int sum = 0 , step = 0 ; while ( sum < target || ( sum - target ) % 2 != 0 ) { step ++ ; sum += step ; } return step ; } public static void main ( String args [ ] ) { int target = 5 ; System . out . println ( reachTarget ( target ) ) ; } }
public final class p010 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p010 ( ) . run ( ) ) ; } private static final int LIMIT = 2000000 ; public String run ( ) { long sum = 0 ; for ( int p : Library . listPrimes ( LIMIT - 1 ) ) sum += p ; return Long . toString ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , a = sc . nextInt ( ) , b = sc . nextInt ( ) , c = sc . nextInt ( ) , t = sc . nextInt ( ) ; long ans = n * a ; if ( b < c ) for ( int i = 0 ; i < n ; i ++ ) { int tx = sc . nextInt ( ) ; ans = ans + ( t - tx ) * ( c - b ) ; } System . out . println ( ans ) ; } }
import java . io . * ; import java . lang . * ; class GFG { public static int nthTerm ( int N ) { return Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Arrays ; import java . util . Scanner ;   public class SerejaAndCoatRack {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; public class FS { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;  int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n % 2 == 0 ) System . out . println ( ( int ) ( Math . pow ( 2 , n / 2 ) ) ) ; else System . out . println ( "0" ) ; } }
import java . io . * ; import java . util . * ; class GFG { static int PointInKSquares ( int n , int a [ ] , int k ) { Arrays . sort ( a ) ; return a [ n - k ] ; } public static void main ( String [ ] args ) { int k = 2 ; int [ ] a = { 1 , 2 , 3 , 4 } ; int n = a . length ; int x = PointInKSquares ( n , a , k ) ; System . out . println ( "(" + x + ", " + x + ")" ) ; } }
public class ParallelogramPoints { public static void main ( String [ ] s ) { int ax = 5 , ay = 0 ; int bx = 1 , by = 1 ; int cx = 2 , cy = 5 ; System . out . println ( ax + bx - cx + ", " + ( ay + by - cy ) ) ; System . out . println ( ax + cx - bx + ", " + ( ay + cy - by ) ) ; System . out . println ( cx + bx - ax + ", " + ( cy + by - ax ) ) ; } }
import java . io . * ; class GFG { static double Convert ( double radian ) { double pi = 3.14159 ; return ( radian * ( 180 / pi ) ) ; } public static void main ( String [ ] args ) { double radian = 5.0 ; double degree = Convert ( radian ) ; System . out . println ( "degree = " + degree ) ; } }
import java . util . Scanner ;   public class Complicated_Gcd { static String gcd ( String a , String b ) {
import java . util . * ;  public class DuffAndMeat_588A {  public static void main ( String [ ] args ) {
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class problem52 {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static int countSolutions ( int n ) { int res = 0 ; for ( int x = 0 ; x * x < n ; x ++ ) for ( int y = 0 ; x * x + y * y < n ; y ++ ) res ++ ; return res ; } public static void main ( String args [ ] ) { System . out . println ( "Total Number of distinct Non-Negative pairs is " + countSolutions ( 6 ) ) ; } }
import java . io . * ; public class GFG { static boolean isNumber ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == false ) return false ; return true ; } static public void main ( String [ ] args ) { String str = "6790" ; if ( isNumber ( str ) ) System . out . println ( "Integer" ) ; else System . out . println ( "String" ) ; } }
class GFG { static String getCount ( int N ) { if ( N % 2 == 1 ) return "0" ; String result = "9" ; for ( int i = 1 ; i <= N / 2 - 1 ; i ++ ) result += "0" ; return result ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( getCount ( N ) ) ; } }
 import java . io . * ; import java . util . * ;  public class Training { public static void main ( String [ ] args ) throws IOException { Scanner input = new Scanner ( System . in ) ; long n = input . nextLong ( ) , k = input . nextLong ( ) ; long a = n / 2 / ( k + 1 ) ; long b = a * k ; System . out . println ( a + " " + b + " " + ( n - a - b ) ) ;  }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Scanner ; import java . util . * ; import java . util . stream . Collectors ;  public class absolute {  public static void main ( String [ ] args ) {
class GFG { static int seriesSum ( int calculated , int current , int N ) { int i , cur = 1 ; if ( current == N + 1 ) return 0 ; for ( i = calculated ; i < calculated + current ; i ++ ) cur *= i ; return cur + seriesSum ( i , current + 1 , N ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( seriesSum ( 1 , 1 , N ) ) ; } }
import java . util . Scanner ;  public class bagsofpotato { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int y = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ;  int top = n - y ; int x = k - y % k ;  if ( x <= top ) { System . out . print ( x + " " ) ; x = x + k ; while ( x <= top ) { System . out . print ( x + " " ) ; x = x + k ; } } else System . out . println ( - 1 ) ; } } 
import java . util . Scanner ;  public class StickersAndToys {  public static void main ( String [ ] args ) { Scanner xScanner = new Scanner ( System . in ) ; int numQueries = xScanner . nextInt ( ) ;  for ( int i = 0 ; i < numQueries ; i ++ ) { int numEggs = xScanner . nextInt ( ) ; int numStickers = xScanner . nextInt ( ) ; int numToys = xScanner . nextInt ( ) ; int numFewerObjects = Math . min ( numStickers , numToys ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; long a , b , t = input . nextInt ( ) ; while ( t != 0 ) { long d = 0 ; a = input . nextInt ( ) ; b = input . nextInt ( ) ; d = a ^ b ; System . out . println ( d ) ; t -- ; } } }
class GFG { static int findSum ( String str ) { String temp = "" ; int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( Character . isDigit ( ch ) ) temp += ch ; else { sum += Integer . parseInt ( temp ) ; temp = "0" ; } } return sum + Integer . parseInt ( temp ) ; } public static void main ( String [ ] args ) { String str = "12abc20yz68" ; System . out . println ( findSum ( str ) ) ; } }
import java . io . * ; import java . util . * ;  public class p2 {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { int n , i ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; String s1 = "I love " ; String s2 = "I hate " ; int flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { System . out . print ( s2 ) ; } else { System . out . print ( s1 ) ; } if ( i != n - 1 ) System . out . print ( "that " ) ; } System . out . print ( "it" ) ; } } 
class GFG { static void findNumbers ( int n ) { int odd = ( int ) Math . pow ( 10 , n ) - 1 ; int even = odd - 1 ; System . out . println ( "Even = " + even ) ; System . out . print ( "Odd = " + odd ) ; } public static void main ( String args [ ] ) { int n = 4 ; findNumbers ( n ) ; } }
import java . util . * ; class GFG { static Vector < Long > getArray ( int n ) { Vector < Long > ans = new Vector < Long > ( ) ; long p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . add ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; } public static void main ( String [ ] args ) { int n = 15 ; Vector < Long > ans = getArray ( n ) ; for ( Long i : ans ) System . out . print ( i + " " ) ; } }
import java . io . * ; class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
import java . util . Scanner ;  public class Hexadecimaltheorem { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; System . out . println ( 0 + " " + 0 + " " + n ) ; } }
class GFG { static int maxXOR ( int arr [ ] , int n ) { int xorArr = 0 ; for ( int i = 0 ; i < n ; i ++ ) xorArr ^= arr [ i ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans = Math . max ( ans , ( xorArr ^ arr [ i ] ) ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 3 } ; int n = arr . length ; System . out . println ( maxXOR ( arr , n ) ) ; } }
import java . util . Scanner ;  public class BowWowAndTheTimetable { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; solve ( scanner . nextLine ( ) ) ; }  public static void solve ( String numbers ) { if ( numbers . lastIndexOf ( "1" ) == 0 || numbers . equals ( "0" ) ) System . out . println ( numbers . length ( ) / 2 ) ; else System . out . println ( ( numbers . length ( ) + 1 ) / 2 ) ; } }
import java . util . * ; class Count { public static int countSetBits ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n &= ( n - 1 ) ; } return count ; } public static int FlippedCount ( int a , int b ) { return countSetBits ( a ^ b ) ; } public static void main ( String [ ] args ) { int a = 10 ; int b = 20 ; System . out . print ( FlippedCount ( a , b ) ) ; } }
import java . util . * ; class GFG { static boolean powerOfTwo ( int n ) { return ( ( n & n - 1 ) == 0 ) ; } static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return true ; return powerOfTwo ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = Integer . parseUnsignedInt ( "9" ) ; if ( onlyFirstAndLastAreSet ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static int countNumbers ( int n ) { return ( n / 2520 ) ; } public static void main ( String args [ ] ) { int n = 3000 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . util . Scanner ;  public class CodeForces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { System . out . println ( sc . nextInt ( ) ) ; } } }
 import java . io . BufferedReader ; import java . io . BufferedWriter ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ;  import static java . lang . System . out ; public class c693a {
import java . util . HashSet ; class Solution { public int numJewelsInStones ( String J , String S ) { int result = 0 ; HashSet jHash = new HashSet < > ( ) ; for ( int j = 0 ; j < J . length ( ) ; j ++ ) { jHash . add ( J . charAt ( j ) ) ; } for ( int s = 0 ; s < S . length ( ) ; s ++ ) { if ( jHash . contains ( S . charAt ( s ) ) ) { result ++ ; } } return result ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { int n ; String cells ; Scanner sc = new Scanner ( System . in ) ; int affectedCells = 0 ;  n = sc . nextInt ( ) ; cells = sc . next ( ) ;  for ( int i = 0 ; i < n ; i ++ ) { if ( cells . charAt ( i ) == '1' ) { affectedCells ++ ; } else { affectedCells ++ ; break ; }  }  System . out . println ( affectedCells ) ;  } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = Math . abs ( a - b ) ; if ( c % 10 == 0 ) { System . out . println ( c / 10 ) ; } else { System . out . println ( ( c / 10 ) + 1 ) ; } }  } }
public class GFG { static int maxSquare ( int b , int m ) { return ( b / m - 1 ) * ( b / m ) / 2 ; } public static void main ( String args [ ] ) { int b = 10 , m = 2 ; System . out . println ( maxSquare ( b , m ) ) ; } }
public class GfG { public static int mostCommon ( int lower , int higher ) { if ( lower == higher ) return lower ; else return 2 ; } public static void main ( String [ ] args ) { int lower = 10 ; int higher = 20 ; System . out . println ( "The most frequent factor " + mostCommon ( lower , higher ) ) ; } }
  import static java . lang . Math . abs ; import static java . lang . System . out ; import java . util . Scanner ; 
import java . util . Arrays ; import java . util . Collections ; class GFG { public static int kthgroupsum ( int k ) { int cur = ( k * ( k - 1 ) ) + 1 ; int sum = 0 ; while ( k -- > 0 ) { sum += cur ; cur += 2 ; } return sum ; } public static void main ( String [ ] args ) { int k = 3 ; System . out . print ( kthgroupsum ( k ) ) ; } }
import java . util . * ; public class contest14 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class A865 {  public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int a = s . nextInt ( ) ; System . out . println ( "" + ( 2 * a - 1 ) + " 2" ) ; System . out . println ( "1 2" ) ; } }
class GFG { static int GCD ( int a , int b ) { return ( b != 0 ? GCD ( b , a % b ) : a ) ; } static void ratiotang ( int r1 , int r2 ) { System . out . println ( "The ratio is " + r1 / GCD ( r1 , r2 ) + " : " + r2 / GCD ( r1 , r2 ) ) ; } public static void main ( String args [ ] ) { int r1 = 4 , r2 = 6 ; ratiotang ( r1 , r2 ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . util . Scanner ; import java . io . * ; import static java . lang . System . out ; import java . util . Stack ; import java . util . Queue ; import java . util . LinkedList ;  public class B639 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
public final class p020 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p020 ( ) . run ( ) ) ; } public String run ( ) { String temp = Library . factorial ( 100 ) . toString ( ) ; int sum = 0 ; for ( int i = 0 ; i < temp . length ( ) ; i ++ ) sum += temp . charAt ( i ) - '0' ; return Integer . toString ( sum ) ; } }
import java . io . * ; class GFG { static void bonacciseries ( int n , int m ) { int [ ] a = new int [ m ] ; a [ n - 1 ] = 1 ; for ( int i = n ; i < m ; i ++ ) for ( int j = i - n ; j < i ; j ++ ) a [ i ] += a [ j ] ; for ( int i = 0 ; i < m ; i ++ ) System . out . print ( a [ i ] + " " ) ; } public static void main ( String args [ ] ) { int N = 5 , M = 15 ; bonacciseries ( N , M ) ; } }
import java . util . * ;  public class CF10 { public static void main ( String [ ] args ) {
import java . util . * ;  public class GameWithString {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String inputString = scan . nextLine ( ) ; StringBuffer gameString = new StringBuffer ( ) ; int playerTurn = 0 ; gameString . append ( inputString ) ;
import java . util . Arrays ; import java . io . * ; class GFG { static int countSequences ( int arr [ ] , int n ) { int count = 1 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ; return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 , 3 , 5 , 10 } ; int n = arr . length ; System . out . println ( countSequences ( arr , n ) ) ; } }
class GFG { static int countNumber ( int N , int S ) { int countElements = 0 ; int currSum = 0 ; while ( currSum <= S ) { currSum += N ; N -- ; countElements ++ ; } return countElements ; } public static void main ( String [ ] args ) { int N , S ; N = 5 ; S = 11 ; int count = countNumber ( N , S ) ; System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long n = in . nextLong ( ) ; System . out . println ( 25 ) ; } } 
import java . util . Scanner ;  public class Chess { static void moveKnight ( boolean [ ] visited , int knight ) { for ( int i = - 1 ; i < 3 ; i += 2 ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long x = in . nextInt ( ) ; while ( x > 0 ) { x -- ; long n = in . nextInt ( ) ; long m = in . nextInt ( ) ; if ( n == 1 ) System . out . println ( "0" ) ; else if ( n == 2 ) System . out . println ( m ) ; else if ( n > 2 ) System . out . println ( 2 * m ) ;   } } } 
class GFG { static void find_composite_nos ( int n ) { System . out . println ( 9 * n + " " + 8 * n ) ; } public static void main ( String [ ] args ) { int n = 4 ; find_composite_nos ( n ) ; } }
import java . util . * ; import java . io . * ;  public class cf_6 { public static void main ( String [ ] args ) { new Solution ( ) . solve ( ) ; } }  class Solution { public void solve ( ) { FastScanner fs = new FastScanner ( ) ; int tests = fs . nextInt ( ) ; testcase : for ( int t = 0 ; t < tests ; t ++ ) { int n = fs . nextInt ( ) ; long w = fs . nextLong ( ) ; int [ ] weights = fs . readIntArray ( n ) ; long minRequired = ( w + 1 ) / 2 ;
import java . util . * ;  public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , x = sc . nextInt ( ) , y = sc . nextInt ( ) ; int h = n / 2 ; if ( x == h && y == h || x == h && y == h + 1 || x == h + 1 && y == h || x == h + 1 && y == h + 1 ) System . out . println ( "NO" ) ; else System . out . println ( "YES" ) ; } }
import java . util . * ; class solution { static long getNthTerm ( long N ) { return ( 7 * ( int ) Math . pow ( N , 2 ) - 19 * N + 15 ) ; } public static void main ( String arr [ ] ) { long N = 4 ; System . out . println ( getNthTerm ( N ) ) ; } }
import java . io . * ; import java . util . * ;   public class Main {  public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ;
import java . util . * ;  public class Supermarket {  public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = scan . nextInt ( ) ; double min = Double . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { double a = scan . nextDouble ( ) ; double b = scan . nextDouble ( ) ; min = Math . min ( min , a / b ) ; } System . out . println ( min * m ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
import java . util . * ; public class question {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ;  int j = 0 , a = 0 ; while ( j < s . length ( ) ) { System . out . print ( s . charAt ( j ) ) ; a ++ ; j += a ; } } }
import java . util . * ; public class SetString {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class problem4qaq {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Q5 {  public static void main ( String [ ] args ) {
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int temp = 0 ; while ( a >= 1 && b >= 2 && c >= 4 ) { temp = temp + 7 ; a = a - 1 ; b = b - 2 ; c = c - 4 ; } System . out . println ( temp ) ; } }
import java . util . * ; public class posiC { public static void main ( String [ ] args ) {
import java . io . * ; import java . math . BigInteger ; import java . util . * ; public class Main { static InputReader in = new InputReader ( System . in ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static int oo = ( int ) 1e9 ;
class GFG { static int nDigitPalindromes ( int n ) { return ( 9 * ( int ) Math . pow ( 10 , ( n - 1 ) / 2 ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( nDigitPalindromes ( n ) ) ; } }
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
import java . io . BufferedInputStream ; import java . util . * ;  import static java . lang . Math . * ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( new BufferedInputStream ( System . in ) ) ; int n = in . nextInt ( ) ; String str = in . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( str . charAt ( i ) % 2 == 0 ) { sum += i + 1 ; } } System . out . println ( sum ) ; } }
import java . io . * ; class GFG { static void radius ( double n , double d ) { System . out . print ( "The side of each square is " + d / ( ( n - 1 ) * Math . sqrt ( 2 ) ) ) ; } public static void main ( String [ ] args ) { double d = 42 , n = 4 ; radius ( n , d ) ; } }
 import java . io . * ; import java . util . * ;  public class C115A { static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Kioken sc = new Kioken ( ) ;  public static void main ( String args [ ] ) throws IOException { int t = 1 ;
class GFG { static double p = ( ( 1 + Math . sqrt ( 5 ) ) / 2 ) ; static double q = ( ( 1 - Math . sqrt ( 5 ) ) / 2 ) ; static int fib ( int n ) { int i = n - 1 ; int x = ( int ) ( ( Math . pow ( p , i ) - Math . pow ( q , i ) ) / ( p - q ) ) ; return x ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( fib ( n ) ) ; } }
class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) { res = ( res * x ) % p ; } y = y > > 1 ; x = ( x * x ) % p ; } return res ; } public static void main ( String [ ] args ) { int L = 2 ; int P = ( int ) Math . pow ( 10 , 9 ) ; int ans = power ( 325 , L , P ) ; System . out . println ( ans ) ; } }
class GFG { static int log_a_to_base_b ( int a , int b ) { return ( int ) ( Math . log ( a ) / Math . log ( b ) ) ; } public static void main ( String [ ] args ) { int a = 3 ; int b = 2 ; System . out . println ( log_a_to_base_b ( a , b ) ) ; a = 256 ; b = 4 ; System . out . println ( log_a_to_base_b ( a , b ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; import java . util . * ; import java . lang . * ;  public class C { public static void solve ( FastReader in , PrintWriter out , int nTestCase ) { int n = in . nextInt ( ) ; long k = in . nextLong ( ) ; if ( k % 2 == 1 ) out . println ( 1 ) ; else { long K = k ;
  import java . io . * ; import java . util . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;   public class Main1 {  static class pair implements Comparable < pair > { int a ; int b ; public pair ( int a , int b ) { this . a = a ; this . b = b ; } @ Override public int compareTo ( pair o ) {
public class GFG { public static float circlearea ( double a , double b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = ( float ) ( ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 8 , b = 10 ; System . out . println ( circlearea ( a , b ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; class GFG { static Boolean divisibleBy20 ( String num ) { int lastTwoDigits = Integer . parseInt ( num . substring ( num . length ( ) - 2 , num . length ( ) ) ) ; return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) ) ; } public static void main ( String [ ] args ) { String num = "63284689320" ; if ( divisibleBy20 ( num ) == true ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; public static void main ( String args [ ] ) throws IOException { int t = 1 ;
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Cf233A {  public static void main ( String args [ ] ) {  Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;  if ( n % 2 == 1 ) { System . out . println ( - 1 ) ; return ; }  for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( i % 2 == 1 ? i + 1 + " " : i - 1 + " " ) ;  } }
class GFG { static void findNumbers ( int n ) { String ans = string ( n - 1 , 'F' ) ; String even = ans + 'E' ; String odd = ans + 'F' ; System . out . print ( "Even: " + even + "\n" ) ; System . out . print ( "Odd: " + odd + "\n" ) ; } private static String string ( int n , char c ) { String str = "" ; for ( int i = 0 ; i < n ; i ++ ) str += c ; return str ; } public static void main ( String [ ] args ) { int n = 2 ; findNumbers ( n ) ; } }
public class GFG { static double printProbability ( int L , int n ) { int p = ( 1 << ( n - 1 ) ) ; return 1.0 - ( ( double ) n ) / ( ( double ) p ) ; } public static void main ( String args [ ] ) { int n = 3 , L = 5 ; System . out . println ( printProbability ( L , n ) ) ; } }
import java . io . * ; class GFG { static int countSetBits ( int n ) { long count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return ( int ) count ; } static int countOfOddsPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddsPascal ( n ) ) ; } }
import java . util . * ; class GFG { static int [ ] Findpermutation ( int n ) { int [ ] a = new int [ n + 1 ] ; a [ 1 ] = n ; for ( int i = 2 ; i <= n ; i ++ ) a [ i ] = i - 1 ; return a ; } public static void main ( String [ ] args ) { int n = 8 ; int [ ] v = Findpermutation ( n ) ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( v [ i ] + " " ) ; } }
class GFG { static boolean checkFibinnary ( int n ) { int prev_last = 0 ; while ( n != 0 ) { if ( ( n & 1 ) != 0 && prev_last != 0 ) return false ; prev_last = n & 1 ; n >>= 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( checkFibinnary ( n ) == true ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . io . * ; import java . util . * ; public class Main {  public static final int mod = 1000000007 ; static long [ ] [ ] dp ; public static void main ( String [ ] args ) throws IOException {
import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; public static void main ( String args [ ] ) throws IOException { int t = 1 ;
import java . io . * ; class GFG { static int toggleLastMBits ( int n , int m ) { if ( m == 0 ) return n ; int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } static int largeNumWithNSetAndMUnsetBits ( int n , int m ) { int num = ( 1 << ( n + m ) ) - 1 ; return toggleLastMBits ( num , m ) ; } public static void main ( String [ ] args ) { int n = 2 , m = 2 ; System . out . println ( largeNumWithNSetAndMUnsetBits ( n , m ) ) ; } }
import java . util . Scanner ;  public class problem51 {  public static void main ( String [ ] args ) {
import java . util . Scanner ;   public class subStraction { static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; long n = in . nextInt ( ) ; long k = in . nextInt ( ) ; long temp = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { temp *= 10 ; } System . out . println ( temp * n / gcd ( temp , n ) ) ; } }
class GFG { public static void printMultiples ( int N ) { for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( ( i * j ) + " " ) ; } System . out . println ( ) ; } } public static void main ( String args [ ] ) { int N = 5 ; printMultiples ( N ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class er10a {
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; String alph = "abcdefghijklmnopqrstuvwxyz" ; int t = in . nextInt ( ) ;
import java . util . Scanner ;  public class MemoryAndCrow { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int j = 0 ; j < n - 1 ; j ++ ) { System . out . print ( b [ j ] + b [ j + 1 ] + " " ) ; } System . out . print ( b [ n - 1 ] ) ; } }
import java . lang . * ; class GFG { static double PI = 3.14159265 ; public static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } }
import java . io . * ; class GeeksforGeeks { static double compute ( int a , int b ) { double AM , GM , HM ; AM = ( a + b ) / 2 ; GM = Math . sqrt ( a * b ) ; HM = ( GM * GM ) / AM ; return HM ; } public static void main ( String args [ ] ) { int a = 5 , b = 15 ; double HM = compute ( a , b ) ; String str = "" ; str = str + HM ; System . out . print ( "Harmonic Mean between " + a + " and " + b + " is " + str . substring ( 0 , 5 ) ) ; } }
import java . util . * ; public class Taymyriscallingyou {  public static void main ( String [ ] args ) {
 import java . io . * ; import java . util . * ; import java . math . * ;  public class Thomas { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . util . * ; class GFG { static void triangular_series ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . printf ( "%d " ; , i * ( i + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; triangular_series ( n ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { long p = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; System . out . println ( Math . min ( ( a - p % a ) % a , Math . min ( ( b - p % b ) % b , ( c - p % c ) % c ) ) ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class GFG { static int nthTerm ( int n ) { int d = 2 , a1 = 0 ; int An = a1 + ( n - 1 ) * d ; return ( int ) Math . pow ( An , 3 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nthTerm ( n ) ) ; } }
import java . util . * ;  public class CodeForces1159B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min = Math . min ( min , input . nextInt ( ) / Math . max ( i , n - i - 1 ) ) ; } System . out . println ( min ) ; } }
import java . util . * ; class GFG { static int calculateSum ( int n ) { return ( n * ( ( int ) Math . pow ( n , 2 ) + 3 * n + 5 ) ) / 3 ; } public static void main ( String arr [ ] ) { int n = 25 ; System . out . println ( calculateSum ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; long n = s . nextLong ( ) ; long res = 6 * n * ( n - 1 ) + 1 ; System . out . println ( res ) ; } }
public class GFG { static void find ( int n ) { int b = n ; int a = b * ( n - 1 ) ; if ( a * b > n && a / b < n ) { System . out . print ( "a = " + a + ", b = " + b ) ; } else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; find ( n ) ; } }
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;
import java . util . * ; import java . io . * ; public class R152D2B { public static void main ( String [ ] args ) throws Exception {
import java . util . Arrays ; import java . util . Scanner ;  public class DigestThread {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { final int new_year = 1440 ; int h , m ; h = in . nextInt ( ) ; m = in . nextInt ( ) ; System . out . println ( new_year - ( ( h * 60 ) + m ) ) ; } } }
import java . util . Scanner ;  public class Watermelon { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; if ( w > 2 ) { if ( w % 2 == 0 ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } else System . out . println ( "NO" ) ; sc . close ( ) ; } }
import java . io . * ; class GFG { static int centeredHexagonalNumber ( int n ) { return 3 * n * ( n - 1 ) + 1 ; } public static void main ( String args [ ] ) { int n = 10 ; System . out . print ( n + "th centered " + "hexagonal number: " ) ; System . out . println ( centeredHexagonalNumber ( n ) ) ; } }
class GFG { static long nthTerm ( long n ) { long nth ; if ( n % 2 == 0 ) nth = 2 * ( ( n * n ) - n ) ; else nth = ( 2 * n * n ) - n ; return nth ; } public static void main ( String [ ] args ) { long n ; n = 5 ; System . out . println ( nthTerm ( n ) ) ; n = 25 ; System . out . println ( nthTerm ( n ) ) ; n = 25000000 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; } }
import java . util . * ;  public class Solve {  static Scanner scan = new Scanner ( System . in ) ;  public static void solve ( long n ) { long i = 1 ; n -- ; long pos = 0 ; while ( n >= 0 ) { pos = n ; n -= i ; i ++ ; } System . out . println ( pos + 1 ) ; }  public static void main ( String [ ] args ) {  long n = scan . nextLong ( ) ; solve ( n ) ; } }
import java . io . * ; class Gfg { static float areacircumscribed ( float a ) { float PI = 3.14159265f ; return ( a * a * ( PI / 2 ) ) ; } public static void main ( String arg [ ] ) { float a = 6 ; System . out . print ( "Area of an circumscribed" + "circle is :" ) ; System . out . println ( areacircumscribed ( a ) ) ; } }
import java . util . * ; class GFG { static void product_subarrays ( int arr [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { product *= arr [ j ] ; } } System . out . println ( product + "\n" ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 10 , 3 , 7 } ; int n = arr . length ; product_subarrays ( arr , n ) ; } }
class GFG { public static boolean isEven ( int n ) { if ( ( n & 1 ) == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 101 ; if ( isEven ( n ) == true ) System . out . print ( "Even" ) ; else System . out . print ( "Odd" ) ; } }
import java . io . * ; import java . net . Inet4Address ; import java . util . * ; 
import java . io . * ; class GFG { static int minMoves ( int arr [ ] , int n ) { int expectedItem = n ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] == expectedItem ) expectedItem -- ; } return expectedItem ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; System . out . println ( minMoves ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int recibido = scanner . nextInt ( ) ; int suma = 0 ; int i ; for ( i = 1 ; i <= recibido ; i ++ ) { suma += 1 + ( recibido - i ) * i ; } System . out . printf ( "%d\n" , suma ) ; } }
import java . awt . image . AreaAveragingScaleFilter ; import java . util . * ;  public class StackBracket { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int l = sc . nextInt ( ) ; String s = sc . next ( ) ;
class GFG { static double average ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; return sum / n ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; int n = arr . length ; System . out . println ( average ( arr , n ) ) ; } }
import java . util . Scanner ; public class Splits { public static void main ( String [ ] args ) { System . out . println ( new Scanner ( System . in ) . nextInt ( ) / 2 + 1 ) ; } }
import java . io . File ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int i = 1 , temp = m ; while ( m >= i ) { m -= i ; i ++ ; if ( i > n ) { i = 1 ; } } System . out . println ( m ) ; } }
import java . util . Scanner ;  public class A1312 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; System . out . println ( n % m == 0 ? "YES" : "NO" ) ; } } }
import java . util . * ; class solution { static long getSum ( int n , int d ) { long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 10 == d ) sum += i ; } return sum ; } public static void main ( String args [ ] ) { int n = 30 , d = 3 ; System . out . println ( getSum ( n , d ) ) ; } }
class solution { static int oddEquivalent ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } return count ; } public static void main ( String ar [ ] ) { String s = "1011011" ; int n = s . length ( ) ; System . out . println ( oddEquivalent ( s , n ) ) ; } }
import java . io . * ; class GFG { static int decimalToBinary ( int N ) { int B_Number = 0 ; int cnt = 0 ; while ( N != 0 ) { int rem = N % 2 ; double c = Math . pow ( 10 , cnt ) ; B_Number += rem * c ; N /= 2 ; cnt ++ ; } return B_Number ; } public static void main ( String [ ] args ) { int N = 17 ; System . out . println ( decimalToBinary ( N ) ) ; } }
class GFG { static int getRightMostSetBit ( int n ) { return ( int ) ( ( Math . log ( n & - n ) ) / ( Math . log ( 2 ) ) ) + 1 ; } static int posOfRightMostSameBit ( int m , int n ) { return getRightMostSetBit ( ~ ( m ^ n ) ) ; } public static void main ( String [ ] args ) { int m = 16 , n = 7 ; System . out . print ( "Position = " + posOfRightMostSameBit ( m , n ) ) ; } }
class GFG { public static int getFirstSetBitPos ( int n ) { return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log10 ( 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( getFirstSetBitPos ( n ) ) ; } }
  import static java . lang . Math . abs ; import static java . lang . System . out ; import java . util . Scanner ; 
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; while ( ( n -- ) != 0 ) { long p , a , b , c ; p = input . nextLong ( ) ; a = input . nextLong ( ) ; b = input . nextLong ( ) ; c = input . nextLong ( ) ; System . out . println ( Math . min ( Math . min ( ( a - p % a ) % a , ( b - p % b ) % b ) , ( c - p % c ) % c ) ) ; } } }
import java . util . * ;  public class Try { public static void main ( String args [ ] ) { Scanner br = new Scanner ( System . in ) ; int t = br . nextInt ( ) ; while ( t -- > 0 ) { int n = br . nextInt ( ) ; int a = br . nextInt ( ) ; int b = br . nextInt ( ) ; int ch = 96 ; while ( n -- != 0 ) { ++ ch ; System . out . print ( ( char ) ch ) ; if ( 96 + b == ch ) ch = 96 ; } System . out . println ( ) ; } } }
 import java . util . Scanner ;  public class CF7 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ;  int i = 1 ; while ( true ) { if ( i > a ) { System . out . println ( "Vladik" ) ; break ; } else { a -= i ; i ++ ; }  if ( i > b ) { System . out . println ( "Valera" ) ; break ; } else { b -= i ; i ++ ; } }  }  }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = n , b = 1 , c = 0 ; while ( a >= b ) { if ( a % b == 0 ) { if ( a * b > n ) { if ( a / b < n ) { c ++ ; break ; } } else { b ++ ; } } else { a -- ; } } if ( c > 0 ) { System . out . println ( a + " " + b ) ; } else { System . out . println ( "-1" ) ; } } }
import java . io . * ; class GFG { static void printCollatz ( int n ) { while ( n != 1 ) { System . out . print ( n + " " ) ; if ( ( n & 1 ) == 1 ) n = 3 * n + 1 ; else n = n / 2 ; } System . out . print ( n ) ; } public static void main ( String [ ] args ) { printCollatz ( 6 ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . math . * ; public class ada_obstacles {
import java . io . * ; class GFG { static double edgeDisjoint ( int n ) { double result = 0 ; result = Math . floor ( n / 2 ) ; return result ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( ( int ) edgeDisjoint ( n ) ) ; } }
class GFG { static int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 6 ; int d = 4 ; System . out . println ( n + " moduo " + d + " is " + getModulo ( n , d ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static int findSum ( int n ) { return ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . Scanner ;  public class SbuSeq {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static int countDistinctCode ( String str ) { Set < String > codes = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ ) codes . add ( str . substring ( i , i + 2 ) ) ; return codes . size ( ) ; } public static void main ( String [ ] args ) { String str = "UPUP" ; System . out . println ( countDistinctCode ( str ) ) ; } }
import java . io . * ; class Series { static int sumOfSeries ( int n ) { return n * ( n + 1 ) * ( 6 * n * n * n + 9 * n * n + n - 1 ) / 30 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( sumOfSeries ( n ) ) ; } }
class GFG { public static void sequence ( int n ) { int f [ ] = new int [ n + 1 ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; f [ 2 ] = 1 ; System . out . print ( f [ 1 ] + " " + f [ 2 ] + " " ) ; for ( int i = 3 ; i <= n ; i ++ ) { f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ; System . out . print ( f [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int n = 13 ; sequence ( n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Solution { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ;
import java . io . * ; class GFG { public static int averageValue ( String s ) { int sum_char = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum_char += ( int ) s . charAt ( i ) ; } return sum_char / s . length ( ) ; } public static void main ( String [ ] args ) { String s = "GeeksforGeeks" ; System . out . println ( averageValue ( s ) ) ; } }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long k = sc . nextLong ( ) ; long [ ] ar = new long [ ( int ) k ] ; int ans = 0 ; long number = 0 ; long diff = Long . MAX_VALUE ;  for ( int i = 0 ; i < k ; i ++ ) { ar [ i ] = sc . nextLong ( ) ; long j1 = n / ar [ i ] ; long d1 = n % ar [ i ] ;
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class InitialBet {  public static void main ( String [ ] args ) {
import java . io . IOException ; import java . io . PrintWriter ; import java . util . * ; public class Main {  public static void main ( String [ ] args ) throws IOException {
import java . util . * ; import java . io . * ; import java . util . stream . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int result = 0 ; int temp = n ; int pow = 1 ; while ( temp >= 10 ) { temp = temp / 10 ; pow = pow * 10 ; } result = ( ( temp + 1 ) * pow ) - n ; System . out . println ( result ) ; } }
import java . util . Scanner ; public class B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int tc = 0 ; tc < t ; ++ tc ) { int n = sc . nextInt ( ) ; int r ; int ans = 0 ;  while ( n > 0 ) { if ( n < 10 ) { ans += n ; break ; } r = n / 10 ; n = n - r * 10 + r ; ans = ans + r * 10 ; }  System . out . println ( ans ) ;  } sc . close ( ) ; } }
class GFG { static void swap ( int a , int b ) { int temp = a ; a = b ; b = temp ; } static int minimumSquare ( int a , int b ) { int result = 0 , rem = 0 ; if ( a < b ) swap ( a , b ) ; while ( b > 0 ) { result += a / b ; rem = a % b ; a = b ; b = rem ; } return result ; } public static void main ( String [ ] args ) { int n = 13 , m = 29 ; System . out . println ( minimumSquare ( n , m ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class Zad1452B {  public static void main ( String [ ] args ) {
 import java . util . Arrays ; import java . util . Scanner ;  public class Gameee { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; if ( n % 2 != 0 ) { System . out . println ( a [ n / 2 ] ) ; } else { System . out . println ( a [ ( n / 2 ) - 1 ] ) ; } } }
import java . util . Arrays ; import java . util . Collections ; class GFG { public static int kthSmallest ( Integer [ ] arr , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { Integer arr [ ] = new Integer [ ] { 12 , 3 , 5 , 7 , 19 } ; int k = 2 ; System . out . print ( "K'th smallest element is " + kthSmallest ( arr , k ) ) ; } }
import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;   public class Problem_Solving1 { public static int sumdigits ( long n ) { int sm = 0 ; while ( n > 0 ) { sm += n % 10 ; n /= 10 ; } return sm ; } public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ;
import java . util . * ; import java . lang . * ; 
import java . util . * ; import java . math . * ; public class HungrySequence { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = n ; i > 0 ; i -- ) { System . out . print ( 1000000 - i + " " ) ; } } }
import java . util . HashSet ; class CP { public static void main ( String [ ] args ) { int [ ] A = { 11 , 15 , 7 , 19 } ; int N = A . length ; HashSet < Integer > set = new HashSet < > ( ) ; int i , j , res ; for ( i = 0 ; i < N ; ++ i ) for ( j = i , res = Integer . MAX_VALUE ; j < N ; ++ j ) { res &= A [ j ] ; set . add ( res ) ; } System . out . println ( set ) ; } }
public class GFG { static int ways ( int n ) { int first = 2 ; int second = 3 ; int res = 0 ; for ( int i = 3 ; i <= n ; i ++ ) { res = first + second ; first = second ; second = res ; } return res ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( "Total ways are: " + ways ( n ) ) ; } }
class GFG { static int numberSequence ( int n ) { int num = ( int ) ( Math . pow ( 4 , n ) - Math . pow ( 2 , n ) ) - 1 ; return num ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( numberSequence ( n ) ) ; } }
import java . io . * ; class GFG { static float avgOfFirstN ( int n ) { return ( float ) ( 1 + n ) / 2 ; } public static void main ( String args [ ] ) { int n = 20 ; System . out . println ( avgOfFirstN ( n ) ) ; } }
class GFG { static int sumOfSeries ( int n ) { return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0.55 * n ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . util . Scanner ;  public class MagicalStick { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int test = sc . nextInt ( ) ; for ( int i = 0 ; i < test ; i ++ ) { int stick = sc . nextInt ( ) ; if ( stick % 2 == 0 ) { System . out . println ( stick / 2 ) ; } else { System . out . println ( stick / 2 + 1 ) ; } } } }
import java . util . Scanner ;  public class CloningToys { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int x = in . nextInt ( ) , y = in . nextInt ( ) - 1 ;  in . close ( ) ; System . out . println ( ( y > 0 && x >= y && ( x - y ) % 2 == 0 ) || ( y == 0 && x == y ) ? "Yes" : "No" ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; long n ; while ( t > 0 ) { t -- ; n = in . nextLong ( ) ; if ( n % 2 == 0 ) System . out . println ( n / 2 - 1 ) ; else System . out . println ( n / 2 ) ; }  }
import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = 0 ; while ( n / 10 > 0 ) { while ( n > 0 ) { s = s + n % 10 ; n = n / 10 ; } n = s ; s = 0 ; } System . out . println ( n ) ; } }
import java . util . * ;  public class B { public static < K , V > K getKey ( Map < K , V > map , V value ) { for ( Map . Entry < K , V > entry : map . entrySet ( ) ) { if ( value . equals ( entry . getValue ( ) ) ) { return entry . getKey ( ) ; } } return null ; }  public static final class Pair { public int first ; public int second ; public Pair ( int first , int second ) { this . first = first + 1 ; this . second = second ; } 
import java . util . Scanner ;  public class In_Search_of_an_Easy_Problem {  static Scanner sc = new Scanner ( System . in ) ;  public static void main ( String [ ] args ) { int n = sc . nextInt ( ) ; boolean m = false ; while ( n > 0 ) { int k = sc . nextInt ( ) ; if ( k > 0 ) { m = true ; n = - 1 ; } n -- ; } if ( m ) { System . out . println ( "HARD" ) ; } else { System . out . println ( "EASY" ) ; } } }
import java . util . ArrayList ; import java . util . Scanner ;  public class BearandTwoPaths {  public static void main ( String [ ] args ) {
class GFG { public static int logicOfSequence ( int N ) { if ( N % 2 == 0 ) N = N * N ; else N = N * N * N ; return N ; } public static void main ( String args [ ] ) { int N = 6 ; System . out . println ( logicOfSequence ( N ) ) ; } }
import java . io . * ; class GFG { static int countPaths ( int n ) { int zB = 1 ; int zADC = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int nzB = zADC * 3 ; int nzADC = ( zADC * 2 + zB ) ; zB = nzB ; zADC = nzADC ; } return zB ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countPaths ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int f = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { String s1 = sc . next ( ) ; if ( s1 . charAt ( 0 ) == s . charAt ( 0 ) || s1 . charAt ( 1 ) == s . charAt ( 1 ) ) { f = 1 ; } } if ( f == 1 ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }
import java . util . Scanner ;  public class _0636DrazilandDate {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int distance = Math . abs ( a ) + Math . abs ( b ) ; if ( s < distance || ( distance - s ) % 2 != 0 ) { System . out . println ( "No" ) ; } else { System . out . println ( "Yes" ) ; } }  }
import java . io . * ; class GFG { static double nthHarmonic ( int N ) { float harmonic = 1 ; for ( int i = 2 ; i <= N ; i ++ ) { harmonic += ( float ) 1 / i ; } return harmonic ; } public static void main ( String [ ] args ) { int N = 8 ; System . out . print ( nthHarmonic ( N ) ) ; } }
import java . io . * ; import java . util . * ; public class test1 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; long x = 1 , counter = 0 ; List < Long > result = new ArrayList < > ( ) ; for ( int digitSum = 1 ; digitSum <= 81 ; digitSum ++ ) { x = b * ( ( long ) Math . pow ( digitSum , a ) ) + c ;
class GFG { static int minIndex ( int arr [ ] , int n , int pos ) { int num = arr [ pos ] ; int i = pos - 1 ; while ( i >= 0 ) { if ( arr [ i ] != num ) break ; i -- ; } return i + 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 1 , 1 , 5 , 2 } ; int n = arr . length ; int pos = 4 ; System . out . println ( minIndex ( arr , n , pos ) ) ; } }
import java . util . * ; import java . math . * ; class GFG { static int maxnumber ( int n , int k ) { for ( int j = 0 ; j < k ; j ++ ) { int ans = 0 ; int i = 1 ; while ( n / i > 0 ) { int temp = ( n / ( i * 10 ) ) * i + ( n % i ) ; i *= 10 ; ans = Math . max ( ans , temp ) ; } n = ans ; } return n ; } public static void main ( String [ ] args ) { int n = 6358 ; int k = 1 ; System . out . println ( maxnumber ( n , k ) ) ; } }
import java . util . * ; public class Solution {  static int gcd ( int a , int b ) { if ( a % b == 0 ) return b ; return gcd ( b , a % b ) ; } public static String gameWinner ( int [ ] ar , int n ) {
import java . io . * ; import java . math . * ; import java . text . * ; import java . util . * ; import java . util . regex . * ; class GFG { static int summingSeries ( long n ) { return ( int ) Math . pow ( n , 2 ) ; } public static void main ( String [ ] args ) { int n = 100 ; System . out . println ( "The sum of n term is: " + summingSeries ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static float trapezoidarea ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 3 * ( float ) Math . sqrt ( 3 ) * ( float ) Math . pow ( r , 2 ) ) / 4 ; return a ; } public static void main ( String args [ ] ) { float r = 5 ; System . out . printf ( "%.3f" , trapezoidarea ( r ) ) ; } }
import java . io . * ; import java . util . Arrays ; import java . util . StringTokenizer ;
import java . util . * ;  public class CF102 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { String s = sc . next ( ) ; String t = sc . next ( ) ; boolean ans = false ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { char ch = s . charAt ( j ) ;
import java . util . * ;  public class CodeForces628A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int b = input . nextInt ( ) ; int p = input . nextInt ( ) ; int ans = ( n - 1 ) * ( 2 * b + 1 ) ;  System . out . println ( ans + " " + ( n * p ) ) ;  } }
class GFG { static int min_moves ( int n ) { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { ans = Math . min ( ans , i + n / i - 2 ) ; } } return ans ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( min_moves ( n ) ) ; } }
import java . util . Scanner ;  public class BearAndPoker { public static void main ( String [ ] args ) { Scanner xScanner = new Scanner ( System . in ) ; int n = xScanner . nextInt ( ) ; int [ ] bids = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { bids [ i ] = xScanner . nextInt ( ) ; 
import java . util . * ;  public final class domino { public static void main ( String Args [ ] ) { Scanner s = new Scanner ( System . in ) ; int m = s . nextInt ( ) ; int n = s . nextInt ( ) ; System . out . println ( ( m * n ) / 2 ) ; } }
import java . io . * ; class GFG { static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 4513 ; System . out . println ( getProduct ( n ) ) ; } }
 import java . util . * ;   public class Practise { 
class GFG { static double dist ( double m , double b1 , double b2 ) { double d = Math . abs ( b2 - b1 ) / ( ( m * m ) - 1 ) ; return d ; } public static void main ( String [ ] args ) { double m = 2 , b1 = 4 , b2 = 3 ; System . out . println ( dist ( m , b1 , b2 ) ) ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ;
public class GFG { static int PowerOFPINnfactorial ( int n , int p ) { int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int count = 0 , temp = i ; while ( temp % p == 0 ) { count ++ ; temp = temp / p ; } ans += count ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( PowerOFPINnfactorial ( 4 , 2 ) ) ; } }
  import java . util . Scanner ;  public class A_Splits {  public static void main ( String [ ] args ) {
class GFG { static int cntSquares ( int n ) { return n * ( n + 1 ) * ( 2 * n + 1 ) / 6 ; } public static void main ( String args [ ] ) { System . out . println ( cntSquares ( 4 ) ) ; } }
import java . io . * ; class GFG { static long count_of_ways ( long n ) { long count = 0 ; count = ( n + 1 ) * ( n + 2 ) / 2 ; return count ; } public static void main ( String [ ] args ) { long n = 3 ; System . out . println ( count_of_ways ( n ) ) ; } }
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int x1 = in . nextInt ( ) ; int max = x1 ; int min = x1 ; int x2 = in . nextInt ( ) ; max = Math . max ( max , x2 ) ; min = Math . min ( min , x2 ) ; int x3 = in . nextInt ( ) ; max = Math . max ( max , x3 ) ; min = Math . min ( min , x3 ) ; System . out . println ( max - min ) ;      }  }  
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001096A { static public void main ( final String [ ] args ) throws IOException { p001096A . _main ( args ) ; }
class GFG { static int findNumber ( int n , int m ) { int num = ( m - 1 ) * 9 + n ; return num ; } public static void main ( String args [ ] ) { int n = 2 , m = 5 ; System . out . print ( findNumber ( n , m ) ) ; } }
class GFG { static int find_greatest_divisor ( int l , int r ) { if ( l == r ) { return l ; } return 1 ; } public static void main ( String [ ] args ) { int l = 2 , r = 12 ; System . out . println ( find_greatest_divisor ( l , r ) ) ; } }
import java . io . * ; class GFG { static int squaresum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum ; } public static void main ( String args [ ] ) throws IOException { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . io . * ; class GFG { static double calTime ( double arr [ ] , int n ) { double work = 0 ; for ( int i = 0 ; i < n ; i ++ ) work += 1 / arr [ i ] ; return 1 / work ; } public static void main ( String [ ] args ) { double arr [ ] = { 6.0 , 3.0 , 4.0 } ; int n = arr . length ; System . out . println ( calTime ( arr , n ) + " Hours" ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; short n = scan . nextShort ( ) , day = 0 ; int [ ] a = new int [ n ] ; int t = scan . nextInt ( ) , i ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = scan . nextInt ( ) ; t -= 86400 - a [ i ] ; day ++ ; if ( t <= 0 ) break ; } System . out . println ( day ) ; } }
import java . util . Scanner ;  public class ColorfulStonesSimplifiedEdition { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int position = 0 ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { if ( t . charAt ( i ) == s . charAt ( position ) ) {
import java . io . * ; class GFG { static long getSum ( long n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; long k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; } public static void main ( String [ ] args ) { long n = 30 ; int d = 3 ; System . out . println ( getSum ( n , d ) ) ; } }
public class GFG { static int Race ( int B , int C ) { int result = 0 ; result = ( ( C * 100 ) / B ) ; return 100 - result ; } public static void main ( String [ ] args ) { int B = 10 ; int C = 28 ; B = 100 - B ; C = 100 - C ; System . out . println ( Race ( B , C ) + " meters" ) ; } }
import java . io . * ; class GFG { static int sum ( int a , int b ) { int sum = 0 ; for ( int i = 1 ; i <= Math . min ( a , b ) ; i ++ ) if ( a % i == 0 && b % i == 0 ) sum += i ; return sum ; } public static void main ( String [ ] args ) { int A = 10 , B = 15 ; System . out . print ( "Sum = " + sum ( A , B ) ) ; } }
import java . util . Scanner ;  public class PolycarpsPockets { public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int [ ] a = new int [ 110 ] ; for ( int i = 0 ; i < n ; i ++ ) { ++ a [ scan . nextInt ( ) ] ; } int res = 0 ; for ( int i = 0 ; i < 110 ; i ++ ) { res = Math . max ( a [ i ] , res ) ; } System . out . println ( res ) ; } }
import java . math . * ; class GFG { static int firstDigit ( int n ) { int digits = ( int ) ( Math . log10 ( n ) ) ; n = ( int ) ( n / ( int ) ( Math . pow ( 10 , digits ) ) ) ; return n ; } static int lastDigit ( int n ) { return ( n % 10 ) ; } public static void main ( String args [ ] ) { int n = 98562 ; System . out . println ( firstDigit ( n ) + " " + lastDigit ( n ) ) ; } }
class GFG { static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 48 ; System . out . println ( highestPowerOf2 ( n ) ) ; } }
import java . io . * ; class countSetBits { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static void main ( String args [ ] ) { int i = 9 ; System . out . println ( countSetBits ( i ) ) ; } }
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {
class fibonacci { static int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ) ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( fib ( n ) ) ; } }
class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }
class Fibonacci { static boolean isMultipleOf10 ( int n ) { if ( n % 15 == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 30 ; if ( isMultipleOf10 ( n ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
import java . math . BigInteger ; import java . util . Scanner ;  public class Practice { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; BigInteger a = new BigInteger ( "3" ) . pow ( 3 * n ) ; a = a . subtract ( new BigInteger ( "7" ) . pow ( n ) ) ; System . out . println ( a . mod ( new BigInteger ( "1000000007" ) ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
class GFG { static float normal ( float m , float n ) { float N = ( float ) ( ( Math . abs ( m ) * Math . abs ( n ) ) / Math . sqrt ( ( Math . abs ( m ) * Math . abs ( m ) ) + ( Math . abs ( n ) * Math . abs ( n ) ) ) ) ; return N ; } public static void main ( String [ ] args ) { float m = - 5 , n = 3 ; System . out . println ( normal ( m , n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . io . * ; import java . lang . * ; import java . math . * ;  public class cp { static BufferedReader br ; static StringTokenizer st ;  public static void main ( String [ ] args ) throws IOException {  br = new BufferedReader ( new InputStreamReader ( System . in ) ) ;  st = readLine ( ) ; int n = tokenInt ( ) ; int t = tokenInt ( ) ;  st = readLine ( ) ; int [ ] array = readIntArray ( n ) ; 
import java . util . * ; class Solution { static float largestCube ( float r ) { if ( r < 0 ) return - 1 ; float a = ( 2 * r ) / ( float ) Math . sqrt ( 3 ) ; return a ; } public static void main ( String args [ ] ) { float r = 5 ; System . out . println ( largestCube ( r ) ) ; } }
import java . io . * ; import java . util . * ; import java . text . * ; import java . math . * ; import java . util . regex . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; System . out . println ( 9 * n + " " + 8 * n ) ; } }
import java . util . Scanner ;  public class BigO {  public static void main ( String [ ] args ) { int x ;  Scanner sc = new Scanner ( System . in ) ; x = sc . nextInt ( ) ; int step = 1 ; while ( x > 5 ) { x -= 5 ; step ++ ; } System . out . println ( step ) ; } }
class GFG { static int oddDays ( int N ) { int hund1 = N / 100 ; int hund4 = N / 400 ; int leap = N > > 2 ; int ord = N - leap ; if ( hund1 > 0 ) { ord += hund1 ; leap -= hund1 ; } if ( hund4 > 0 ) { ord -= hund4 ; leap += hund4 ; } int days = ord + leap * 2 ; int odd = days % 7 ; return odd ; } public static void main ( String args [ ] ) { int N = 100 ; System . out . print ( oddDays ( N ) ) ; } }
import java . util . Scanner ;  public class SoldierAndBananas { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ;  int firstBanana = scanner . nextInt ( ) ; int initialDollars = scanner . nextInt ( ) ; int numBananas = scanner . nextInt ( ) ;  int result = firstBanana * ( numBananas * ( numBananas + 1 ) ) / 2 ; System . out . println ( Math . max ( result - initialDollars , 0 ) ) ; } }
class GFG { static boolean pointIsOnLine ( int m , int c , int x , int y ) { if ( y == ( ( m * x ) + c ) ) return true ; return false ; } public static void main ( String [ ] args ) { int m = 3 , c = 2 ; int x = 1 , y = 5 ; if ( pointIsOnLine ( m , c , x , y ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001150A { static public void main ( final String [ ] args ) throws IOException { p001150A . _main ( args ) ; }
import java . util . * ; import java . io . * ; public class Divisibility { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = s . nextInt ( ) ; int b = s . nextInt ( ) ; int c = a - ( a % b ) ; if ( a % b == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( ( c + b ) - a ) ; } } } }
import java . awt . image . AreaAveragingScaleFilter ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class GFG { static int AVLtree ( int H , int a , int b ) { if ( H == 0 ) return 1 ; if ( H == 1 ) return b ; return AVLtree ( H - 1 , b , a + b + 1 ) ; } public static void main ( String [ ] args ) { int H = 5 ; int answer = AVLtree ( H , 1 , 2 ) ; System . out . println ( "n(" + H + ") = " + answer ) ; } }
class GFG { static int getMissingNo ( int a [ ] , int n ) { int total = 1 ; for ( int i = 2 ; i <= ( n + 1 ) ; i ++ ) { total += i ; total -= a [ i - 2 ] ; } return total ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 5 } ; System . out . println ( getMissingNo ( arr , arr . length ) ) ; } }
class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n != 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int i = 3 ; System . out . print ( countSetBits ( i ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return ( gcd ( b , a % b ) ) ; } static void findSmallest ( int a , int b ) { int lcm = ( a * b ) / gcd ( a , b ) ; System . out . print ( "x = " + lcm / a + "\ny = " + lcm / b ) ; } public static void main ( String [ ] args ) { int a = 25 , b = 35 ; findSmallest ( a , b ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class GFG { static long NthTerm ( long n ) { long x = ( 3 * n * n ) % 1000000009 ; return ( x - n + 1000000009 ) % 1000000009 ; } public static void main ( String args [ ] ) { long N = 4 ; System . out . println ( NthTerm ( N ) ) ; } }
class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return m * ( m + 1 ) * ( 2 * m + 1 ) / 6 + ( n - m ) * m * ( m + 1 ) / 2 ; } public static void main ( String [ ] args ) { int m = 4 , n = 3 ; System . out . println ( "Count of squares is " + countSquares ( m , n ) ) ; } }
import java . util . * ; public class GigaTower {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static long centeredTridecagonalNum ( long n ) { return ( 13 * n * ( n - 1 ) + 2 ) / 2 ; } public static void main ( String [ ] args ) { long n = 3 ; System . out . println ( centeredTridecagonalNum ( n ) ) ; n = 10 ; System . out . println ( centeredTridecagonalNum ( n ) ) ; } }
class RecentCounter { Queue < Integer > q ; public RecentCounter ( ) { q = new LinkedList ( ) ; } public int ping ( int t ) { q . add ( t ) ; while ( q . peek ( ) < t - 3000 ) q . poll ( ) ; return q . size ( ) ; } }
import java . util . * ; class Eulerian { public static String fibWord ( int n ) { String Sn_1 = "0" ; String Sn = "01" ; String tmp ; for ( int i = 2 ; i <= n ; i ++ ) { tmp = Sn ; Sn += Sn_1 ; Sn_1 = tmp ; } return Sn ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . print ( fibWord ( n ) ) ; } }
import java . util . * ; public class Main {  public static void main ( String [ ] args ) { int t , n ; String s ; s = "" ;  Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . nextInt ( ) ; s = sc . next ( ) ;  char ch [ ] = s . toCharArray ( ) ;  Arrays . sort ( ch ) ;  System . out . println ( String . valueOf ( ch ) ) ; }
import java . util . * ; public class HelloWorld {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int val = v ; if ( n <= v ) System . out . println ( n - 1 ) ; else { for ( int i = 2 ; i <= ( n - v ) ; i ++ ) { val += i ; } System . out . println ( val ) ; } } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . BufferedReader ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Scanner ; import java . util . StringTokenizer ;  public class AntiCubism {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int stonesNum ; int gifts ; stonesNum = sc . nextInt ( ) ; gifts = ( stonesNum / 3 ) * 2 ;  if ( stonesNum % 3 > 0 ) gifts ++ ;  System . out . println ( gifts ) ;  } }
class GFG { static int smallestSum ( int n ) { if ( n == 1 ) return 0 ; return ( 2 * ( int ) Math . pow ( 10 , n - 1 ) ) ; } static int largestSum ( int n ) { return ( 2 * ( ( int ) Math . pow ( 10 , n ) - 1 ) ) ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( "Largest = " + largestSum ( n ) ) ; System . out . print ( "Smallest = " + smallestSum ( n ) ) ; } }
public class GFG { public static int cubesum ( int n ) { return 2 * n * n * ( n + 1 ) * ( n + 1 ) ; } public static void main ( String args [ ] ) { int a = 8 ; System . out . println ( cubesum ( a ) ) ; } }
class GFG { static boolean Check_is_possible ( int l , int r , int k ) { int div_count = ( r / k ) - ( l / k ) ; if ( l % k == 0 ) { div_count ++ ; } return ( div_count > 1 ) ; } public static void main ( String [ ] args ) { int l = 30 , r = 70 , k = 10 ; if ( Check_is_possible ( l , r , k ) ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ;  public class FindingBorders {  public static void main ( String [ ] args ) throws Exception { 
import java . io . * ; import java . util . * ;  public class Main { static final int N = 15 ; static String str1 , str2 ; static Character [ ] arr = new Character [ N ] ; static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static BufferedWriter bw = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ;  public static void main ( String [ ] args ) throws IOException {
import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;  public class absolute { static int [ ] I = new int [ ] { 0 , - 1 , 0 , 1 } ; static int [ ] J = new int [ ] { - 1 , 0 , 1 , 0 } ; static int [ ] [ ] mat ; public static void main ( String [ ] args ) {
class GFG { static double areaCube ( double a ) { return ( a * a * a ) ; } static double surfaceCube ( double a ) { return ( 6 * a * a ) ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( "Area = " + areaCube ( a ) ) ; System . out . println ( "Total surface area = " + surfaceCube ( a ) ) ; } }
import java . util . Arrays ; public class GFG { static boolean sackRace ( int p1 , int s1 , int p2 , int s2 ) { return ( ( s1 > s2 && ( p2 - p1 ) % ( s1 - s2 ) == 0 ) || ( s2 > s1 && ( p1 - p2 ) % ( s2 - s1 ) == 0 ) ) ; } public static void main ( String args [ ] ) { int p1 = 4 , s1 = 4 , p2 = 8 , s2 = 2 ; if ( sackRace ( p1 , s1 , p2 , s2 ) ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class Test { static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { for ( int j = 1 ; j * j * j <= i ; j ++ ) { if ( j * j * j == i ) { System . out . print ( j * j * j + "  " ) ; break ; } } } } public static void main ( String [ ] args ) { int a = 1 , b = 100 ; System . out . println ( "Perfect cubes in given range:" ) ; printCubes ( a , b ) ; } }
class GFG { static final int MOD = 1000000007 ; static int modFact ( int n , int m ) { int result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; } public static void main ( String [ ] args ) { int n = 3 , m = 2 ; System . out . println ( modFact ( n , m ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class Fafa_And_His_Company {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ;
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ; public class dice_tower { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , x = in . nextInt ( ) ; boolean b = true ; for ( int i = 0 ; i < 2 * n ; i ++ ) { int num = in . nextInt ( ) ; if ( num == x || num == 7 - x ) { b = false ; } } if ( b ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ;  public static void main ( String [ ] args ) {
import java . io . * ; import java . math . * ; class GFG { static int sumofseries ( int n ) { return ( n * ( n + 1 ) * ( n + 2 ) * ( n + 3 ) / 4 ) ; } public static void main ( String [ ] args ) { System . out . println ( sumofseries ( 3 ) ) ; } }
import java . io . * ; import java . util . * ;
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ;  public class Singleton_Pattern { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; b /= 2 ; c /= 4 ; int res = 7 * ( Integer . min ( Integer . min ( a , b ) , Integer . min ( b , c ) ) ) ; System . out . println ( res ) ;  } } 
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
import java . util . Scanner ;  public class _0707Digitalroot {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; for ( int i = 0 ; i < n ; i ++ ) { long k = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; System . out . println ( ( ( k - 1 ) * 9L ) + x ) ; } }  }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . Scanner ; import java . util . StringTokenizer ;  import static java . lang . Math . max ; import java . util . HashSet ;  public class Test {
import java . io . * ; class GFG { static void survival ( int S , int N , int M ) { if ( ( ( N * 6 ) < ( M * 7 ) && S > 6 ) || M > N ) System . out . println ( "No" ) ; else { int days = ( M * S ) / N ; if ( ( ( M * S ) % N ) != 0 ) days ++ ; System . out . println ( "Yes " + days ) ; } } public static void main ( String [ ] args ) { int S = 10 , N = 16 , M = 2 ; survival ( S , N , M ) ; } }
import java . util . Scanner ;  public class PROBLEM48 {  public static void main ( String [ ] args ) {
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ; Student ( int x , int y ) { this . x = x ; this . y = y ;
public class GFG { static double hexDiagonal ( float a ) { if ( a < 0 ) return - 1 ; double d = ( double ) 1.73 * a ; return d ; } public static void main ( String [ ] args ) { float a = 9 ; System . out . println ( hexDiagonal ( a ) ) ; } }
import java . util . * ;  public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] s1 = s . split ( ":" ) ; String [ ] t1 = t . split ( ":" ) ; int h1 = Integer . parseInt ( s1 [ 0 ] ) ; int m1 = Integer . parseInt ( s1 [ 1 ] ) ;  int h2 = Integer . parseInt ( t1 [ 0 ] ) ; int m2 = Integer . parseInt ( t1 [ 1 ] ) ; 
import java . * ; class Geeks { public static void main ( String a [ ] ) { int x = 10 ; int y = 5 ; x = x + y ; y = x - y ; x = x - y ; System . out . println ( "After swaping:" + " x = " + x + ", y = " + y ) ; } }
import java . io . * ; class GFG { static int rangeGCD ( int n , int m ) { return ( n == m ) ? n : 1 ; } public static void main ( String [ ] args ) { int n = 475 ; int m = 475 ; System . out . println ( rangeGCD ( n , m ) ) ; } }
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = 100000 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( ( ans ++ ) + " " ) ; System . out . println ( ) ; sc . close ( ) ; } }
class GfG { static int countSteps ( int x , int y ) { if ( x < y ) { return x + y + 2 * ( ( y - x ) / 2 ) ; } else { return x + y + 2 * ( ( ( x - y ) + 1 ) / 2 ) ; } } public static void main ( String [ ] args ) { int x = 4 , y = 3 ; System . out . println ( countSteps ( x , y ) ) ; } }
 import java . util . Scanner ; public class Train {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int wCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int length = sc . nextInt ( ) ; if ( length <= a ) { wCount ++ ; } else { wCount += 2 ; } } System . out . println ( wCount ) ; } }
import java . util . * ; class GFG { static int maxSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += ( arr [ i ] * i ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 6 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
class GFG { static int countSubSeq ( String str , int len ) { int ans = 0 ; int mul = 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) == '0' ) ans += mul ; mul *= 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = "10010" ; int len = str . length ( ) ; System . out . print ( countSubSeq ( str , len ) ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . valueOf ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; System . out . println ( s . length ( ) - s . replaceAll ( "xxx+" , "xx" ) . length ( ) ) ; } }
class GFG { static double square ( double a ) { if ( a < 0 ) return - 1 ; double x = 0.464 * a ; return x ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( square ( a ) ) ; } }
import java . util . Scanner ;  public class IlyaColorWalk { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , i , l = 0 , r = n - 1 , c [ ] = new int [ n ] ;  for ( i = 0 ; i < n ; i ++ ) c [ i ] = in . nextInt ( ) ; in . close ( ) ;  while ( c [ l ] == c [ n - 1 ] ) l ++ ; while ( c [ r ] == c [ 0 ] ) r -- ; System . out . println ( Math . max ( n - l - 1 , r ) ) ; } }
class GFG { static int findOddPair ( int A [ ] , int N ) { int i , count = 0 ; for ( i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 == 0 ) count ++ ; } return count * ( N - count ) ; } public static void main ( String [ ] arg ) { int a [ ] = { 5 , 4 , 7 , 2 , 1 } ; int n = a . length ; System . out . println ( findOddPair ( a , n ) ) ; } }
import java . util . Scanner ;    public class MAIN {  public static void main ( String [ ] args ) {
class GFG { static int oddTriangularNumber ( int N ) { return ( N * ( ( 2 * N ) - 1 ) ) ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( oddTriangularNumber ( N ) ) ; } }
import java . io . * ; class GFG { static String areAllBitsSet ( int n ) { if ( n == 0 ) return "No" ; if ( ( ( n + 1 ) & n ) == 0 ) return "Yes" ; return "No" ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( areAllBitsSet ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . List ; import java . util . stream . Collectors ; import java . util . stream . Stream ;  public class Codeforces914B {  public static void main ( String [ ] args ) throws NumberFormatException , IOException {
class GFG { static int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; static int multiply ( ) { int pro = 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) pro = pro * arr [ i ] ; return pro ; } public static void main ( String [ ] args ) { System . out . println ( multiply ( ) ) ; } }
import java . util . * ; public class VasyasCalendar { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) ans += ( d - a [ i ] ) ; System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main { static FastReader sc = new FastReader ( ) ; static long dp [ ] [ ] [ ] ; static int mod = 1000000007 ; public static void main ( String [ ] args ) throws IOException {
 import java . util . Scanner ;  public class PlayingCubes { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int min = Math . min ( n , m ) ; int max = Math . max ( n , m ) ;  System . out . println ( ( max - 1 ) + " " + ( min ) ) ; }  }
import java . util . Arrays ; class GFG { static int findMinimal ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) sum += ( a [ i ] + a [ n - i - 1 ] ) * ( a [ i ] + a [ n - i - 1 ] ) ; return sum ; } public static void main ( String str [ ] ) { int [ ] a = { 8 , 5 , 2 , 3 } ; int n = a . length ; System . out . println ( findMinimal ( a , n ) ) ; } }
import java . io . * ; class GFG { static int centereddecagonalnum ( int n ) { return ( 5 * n * n + 5 * n + 1 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( n + "th centered " + "decagonal number: " ) ; System . out . println ( centereddecagonalnum ( n ) ) ; n = 9 ; System . out . print ( n + "th centered " + "decagonal number: " ) ; System . out . println ( centereddecagonalnum ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { long x , y ; Student ( long x , long y ) { this . x = x ; this . y = y ; } } static int prime [ ] ; static void sieveOfEratosthenes ( int n ) {
class GFG { static void factors ( int n , int i ) { if ( i <= n ) { if ( n % i == 0 ) { System . out . print ( i + " " ) ; } factors ( n , i + 1 ) ; } } public static void main ( String args [ ] ) { int N = 16 ; factors ( N , 1 ) ; } }
import java . io . * ; class GFG { static float circumferenceparallelogram ( float a , float b ) { return ( ( 2 * a ) + ( 2 * b ) ) ; } public static void main ( String arg [ ] ) { float a = 10 , b = 8 ; System . out . print ( "Circumference of a given Parallelogram is :" ) ; System . out . println ( circumferenceparallelogram ( a , b ) ) ; } }
import java . util . * ; class solution { static void alternate ( int a , int b , int x ) { x = a + b - x ; System . out . println ( "After change" + "\n" + " x is : " + x ) ; } public static void main ( String args [ ] ) { int a = - 10 ; int b = 15 ; int x = a ; System . out . println ( "x is : " + x ) ; alternate ( a , b , x ) ; } }
import java . util . Scanner ;  public class PineappleBark { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; long t = in . nextLong ( ) , s = in . nextLong ( ) , x = in . nextLong ( ) ;  in . close ( ) ; x -= t ; System . out . println ( ( ( x % s == 0 || x % s == 1 ) && x > 1 ) || x == 0 ? "YES" : "NO" ) ; } }
import java . util . * ; public class MyClass { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] >= 0 ) break ; s = s + arr [ i ] ; } System . out . println ( - s ) ; } }
import java . util . * ; import java . io . * ; import java . util . stream . * ; public class Solution { public static void main ( String [ ] args ) throws Exception { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; scan . nextLine ( ) ; String s = scan . nextLine ( ) ; System . out . println ( s . replaceAll ( "ogo(go)*" , "***" ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ;  public class Main {  private static int MAX = Integer . MAX_VALUE ; private static int MIN = Integer . MIN_VALUE ; private static int MOD = 1000000007 ; static FastScanner sc = new FastScanner ( ) ;  public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;  public class A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; String s = sc . next ( ) ; int xVal = ( int ) Math . pow ( 10 , x ) ; int yVal = ( int ) Math . pow ( 10 , y ) ;
import java . io . * ; class GFG { static int countOnes ( int n ) { int count = 1 ; int rem = 1 ; while ( rem != 0 ) { rem = ( rem * 10 + 1 ) % n ; count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 13 ; System . out . println ( countOnes ( n ) ) ; } }
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class experiment { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . io . * ; class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; if ( x == 0 ) return 0 ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ; y = y > > 1 ; x = ( x * x ) % p ; } return res ; } public static void main ( String args [ ] ) { int x = 2 ; int y = 5 ; int p = 13 ; System . out . println ( "Power is " + power ( x , y , p ) ) ; } }
import java . io . * ; import java . util . * ;  public class B { static int [ ] valid = new int [ ] { 0 , 1 , 5 , - 1 , - 1 , 2 , - 1 , - 1 , 8 , - 1 } ; public static int reverse ( int time ) { int reversed = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { int dig = time % 10 ; if ( valid [ dig ] == - 1 ) { return - 1 ; } reversed = reversed * 10 + valid [ dig ] ; time /= 10 ; } return reversed ; } public static void main ( String [ ] args ) {
import java . util . Scanner ; import java . lang . Math ; import java . util . Arrays ;  public class pa { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String args [ ] ) { long n = sc . nextInt ( ) ; long i , x = 0 ; while ( n >= 1 ) { if ( n % 2 == 1 ) { x ++ ; n -- ; } else n /= 2 ; } System . out . println ( x ) ; } }
import java . util . * ; class Circular { public static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n / 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) / 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . print ( removeAlternate ( n ) ) ; n = 10 ; System . out . print ( "\n" + removeAlternate ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( m >= n & k >= n ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } }
import java . util . Scanner ;  public class yet_another_two_integer_problem {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int t = in . nextInt ( ) ; int a , b ; while ( t -- != 0 ) { a = in . nextInt ( ) ; b = in . nextInt ( ) ; System . out . println ( ( int ) Math . ceil ( ( Math . abs ( a - b ) / 10.0 ) ) ) ;  } }  }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; long n ; for ( int i = 0 ; i < t ; i ++ ) { n = sc . nextLong ( ) ; if ( ( n & n - 1 ) == 0 ) { System . out . println ( "NO" ) ; } else { System . out . println ( "YES" ) ; } } } }
import java . util . * ; public class test { public static void main ( String [ ] args ) { int n , x = 0 ; char [ ] a ; String a1 ; Scanner input = new Scanner ( System . in ) ; n = input . nextInt ( ) ; a = new char [ n ] ; a1 = input . next ( ) ; a = a1 . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == '+' ) x ++ ; else if ( x - 1 >= 0 ) x -- ; } System . out . println ( x ) ; } } 
public class GFG { public static int cubesum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String args [ ] ) { int a = 8 ; System . out . println ( cubesum ( a ) ) ; } }
import java . util . * ; public class LinetoCashier {  public static void main ( String [ ] args ) {
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static FileWriter fw ; static long oo = Long . MAX_VALUE ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class cc { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ; public class sol { public static void main ( String ar [ ] ) { Scanner scan = new Scanner ( System . in ) ; int test = scan . nextInt ( ) ; while ( test -- > 0 ) { int n = Integer . parseInt ( scan . next ( ) ) ; String s = scan . next ( ) . trim ( ) ; String ch = "1" ; if ( s . charAt ( n - 1 ) == '0' ) ch = "0" ; while ( n -- > 0 ) System . out . print ( ch ) ; System . out . println ( ) ; } } }
class GFG { static int minOperations ( String str , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( i + 1 ) ) count ++ ; } return ( count + 1 ) / 2 ; } public static void main ( String [ ] args ) { String str = "000111" ; int n = str . length ( ) ; System . out . println ( minOperations ( str , n ) ) ; } }
class GFG { static int properDivisorSum ( int n ) { int sum = 0 ; int i ; for ( i = 1 ; i <= n ; ++ i ) sum += ( n / i ) * i ; return sum - n * ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( properDivisorSum ( n ) ) ; n = 5 ; System . out . println ( properDivisorSum ( n ) ) ; } }
import java . io . * ; class Solution { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; n = n + x / 2 ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 , x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }
import java . util . * ; 
import java . util . Scanner ;  public class MeetOldFriend { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; long l1 = in . nextLong ( ) , r1 = in . nextLong ( ) , l2 = in . nextLong ( ) , r2 = in . nextLong ( ) , k = in . nextLong ( ) , l = Math . max ( l1 , l2 ) , r = Math . min ( r1 , r2 ) ;  in . close ( ) ; System . out . println ( l <= r ? k >= l && k <= r ? r - l : r - l + 1 : 0 ) ; } }
class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } public static void main ( String args [ ] ) { if ( isPrime ( 11 ) ) System . out . println ( " true" ) ; else System . out . println ( " false" ) ; if ( isPrime ( 15 ) ) System . out . println ( " true" ) ; else System . out . println ( " false" ) ; } }
import java . util . * ; class GFG { static int distribution ( int arr [ ] , int n ) { Set < Integer > resources = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) resources . add ( arr [ i ] ) ; return Math . min ( resources . size ( ) , n / 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 1 , 3 , 4 } ; int n = arr . length ; System . out . print ( distribution ( arr , n ) + "\n" ) ; } }
class GFG { static int findMod4 ( String s , int n ) { int k ; if ( n == 1 ) k = s . charAt ( 0 ) - '0' ; else k = ( s . charAt ( n - 2 ) - '0' ) * 10 + s . charAt ( n - 1 ) - '0' ; return ( k % 4 ) ; } public static void main ( String [ ] args ) { String s = "81" ; int n = s . length ( ) ; System . out . println ( findMod4 ( s , n ) ) ; } }
public final class p028 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p028 ( ) . run ( ) ) ; } private static final int SIZE = 1001 ; public String run ( ) { long sum = 1 ; for ( int n = 3 ; n <= SIZE ; n += 2 ) sum += 4 * n * n - 6 * ( n - 1 ) ; return Long . toString ( sum ) ; } }
class GFG { static byte sizeofInt = 8 ; static int countZeros ( int x ) { int total_bits = sizeofInt * 8 ; int res = 0 ; while ( ( x & ( 1 << ( total_bits - 1 ) ) ) == 0 ) { x = ( x << 1 ) ; res ++ ; } return res ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }
class GFG { static int countBits ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n >>= 1 ; } return count ; } public static void main ( String [ ] arg ) { int i = 65 ; System . out . print ( countBits ( i ) ) ; } }
import java . util . * ; class GFG { static int invertBits ( int n ) { int x = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; int m = 1 << x ; m = m | m - 1 ; n = n ^ m ; return n ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . print ( invertBits ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; import java . math . * ;   public class file {  
import java . util . * ;  public class JavaApplication6 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String s = new String ( ) ; int m ; m = in . nextInt ( ) ; s = in . next ( ) ; System . out . println ( ( int ) ( s . length ( ) + 1 ) ) ; } }
class GFG { public static int numLen ( int K ) { if ( K % 2 == 0 || K % 5 == 0 ) return - 1 ; int number = 0 ; int len = 1 ; for ( len = 1 ; len <= K ; len ++ ) { number = ( number * 10 + 1 ) % K ; if ( number == 0 ) return len ; } return - 1 ; } public static void main ( String [ ] args ) { int K = 7 ; System . out . print ( numLen ( K ) ) ; } }
import java . util . * ;  public class CF10 { public static void main ( String [ ] args ) {
 import java . util . Arrays ; import java . util . Scanner ;  public class MainTest {  public static void main ( String [ ] args ) {
import javax . print . DocFlavor ; import javax . swing . * ; import java . awt . image . BandedSampleModel ; import java . util . * ;  public class Example { static long [ ] [ ] dp ;
class GFG { static int maxAbsDiff ( int arr [ ] , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = Math . min ( minEle , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 1 , 5 , 3 } ; int n = arr . length ; System . out . print ( maxAbsDiff ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; 
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ;  String a = input . next ( ) ; String b = input . next ( ) ; if ( a . equals ( b ) ) System . out . println ( - 1 ) ; else { System . out . println ( Math . max ( a . length ( ) , b . length ( ) ) ) ; }                           } }
public class Main { static int countWays ( int n ) { int count = 0 ; for ( int i = 1 ; i * i < n ; i ++ ) if ( n % i == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( countWays ( n ) ) ; } }
import java . io . * ; import java . util . * ; class GFG { static int largest ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; return arr [ n - 1 ] ; } static public void main ( String [ ] args ) { int [ ] arr = { 10 , 324 , 45 , 90 , 9808 } ; int n = arr . length ; System . out . println ( largest ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ;
import java . util . Scanner ;  public class Ornament { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int y = in . nextInt ( ) , b = in . nextInt ( ) - 1 , r = in . nextInt ( ) - 2 ;  in . close ( ) ; System . out . println ( 3 * Math . min ( Math . min ( y , b ) , r ) + 3 ) ; } }
import java . awt . * ; import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . * ; import java . util . List ;  import static java . lang . Math . max ; import static java . lang . Math . min ;   public class B implements Runnable {  private final static Random rnd = new Random ( ) ; 
 import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( arr [ 0 ] % 2 != 0 && arr [ n - 1 ] % 2 != 0 && arr . length % 2 != 0 ) { System . out . println ( "Yes" ) ; } else { System . out . println ( "No" ) ; } } }
static void printSeqRecur ( int num , int pos , int k , int n ) { if ( pos == k ) { System . out . print ( num + " " ) ; return ; } for ( int i = 1 ; i <= n ; i ++ ) { printSeqRecur ( num * 10 + i , pos + 1 , k , n ) ; } } static void printSequences ( int k , int n ) { printSeqRecur ( 0 , 0 , k , n ) ; }
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ;  public class A322 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += ( arr [ i ] & 1 ) ; } System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }  void run ( FastScanner in , PrintWriter out ) { 
 import java . math . * ; import java . util . * ; import java . io . * ; public class er105b {
class GFG { static int find_k ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) return ( ( a + b ) / 2 ) ; return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 16 ; System . out . println ( find_k ( a , b ) ) ; } }
import java . util . Scanner ;  public class Tetris { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , i , a [ ] = new int [ n ] , o = 1000 ; for ( i = 0 ; i < m ; i ++ ) a [ in . nextInt ( ) - 1 ] ++ ;  in . close ( ) ; for ( i = 0 ; i < n ; i ++ ) o = Math . min ( o , a [ i ] ) ; System . out . println ( o ) ; } }
import java . io . * ; import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int res = 0 ; if ( n % 2 == 0 ) { res = n - 4 ; System . out . println ( 4 + " " + res ) ; } else { res = n - 9 ; System . out . println ( 9 + " " + res ) ; } } }
import java . io . * ; class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += i * ( n - i ) ; return 2 * sum ; } static public void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int num = sc . nextInt ( ) ; if ( num % 10 <= 5 ) num -= num % 10 ; else num += 10 - num % 10 ; System . out . println ( num ) ; } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = ( int ) 1e7 ;
class GFG { static int floorSqrt ( int x ) { if ( x == 0 || x == 1 ) return x ; int i = 1 , result = 1 ; while ( result <= x ) { i ++ ; result = i * i ; } return i - 1 ; } public static void main ( String [ ] args ) { int x = 11 ; System . out . print ( floorSqrt ( x ) ) ; } }
import java . io . * ; class GFG { static int summation ( int n ) { int sum ; sum = ( int ) ( Math . pow ( 10 , n + 1 ) - 10 - ( 9 * n ) ) / 81 ; return sum ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( summation ( n ) ) ; } }
import java . util . * ;   public class l700 {  public static void main ( String [ ] args ) {
class Solution { public boolean isRectangleOverlap ( int [ ] rec1 , int [ ] rec2 ) { return ( Math . min ( rec1 [ 2 ] , rec2 [ 2 ] ) > Math . max ( rec1 [ 0 ] , rec2 [ 0 ] ) && Math . min ( rec1 [ 3 ] , rec2 [ 3 ] ) > Math . max ( rec1 [ 1 ] , rec2 [ 1 ] ) ) ; } }
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ;  Arrays . sort ( a ) ; int problems = 0 ; for ( int i = n - 1 ; i > 0 ; i -= 2 ) { problems += a [ i ] - a [ i - 1 ] ; } System . out . println ( problems ) ; } }
import java . io . * ; class GFG { static void printSquares ( int n ) { int square = 0 , odd = 1 ; for ( int x = 0 ; x < n ; x ++ ) { System . out . print ( square + " " ) ; square = square + odd ; odd = odd + 2 ; } } public static void main ( String [ ] args ) { int n = 5 ; printSquares ( n ) ; } }
import java . io . * ; class GFG { static float squarearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float area = 4 * ( float ) ( ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) / ( Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) ) ; return area ; } public static void main ( String [ ] args ) { float a = 4 , b = 2 ; System . out . println ( squarearea ( a , b ) ) ; } }
import java . util . * ; public class Test { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; while ( t -- > 0 ) { int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int r = input . nextInt ( ) ; int c = input . nextInt ( ) ;  System . out . println ( Math . max ( ( r - 1 ) , ( n - r ) ) + Math . max ( ( c - 1 ) , ( m - c ) ) ) ; } } }
import java . util . Scanner ;  public class CodeForces2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextInt ( ) ; long q , sum = 0 ; for ( long i = 1 ; i <= n ; i ++ ) { q = sc . nextInt ( ) ; sum += ( i * q ) - ( i - 1 ) ; } System . out . println ( sum ) ; } }
import java . util . * ;  public class Solve {  static Scanner scan = new Scanner ( System . in ) ;  public static void solve ( int n , int a , int b ) {  System . out . println ( Math . min ( ( n - a ) , ( b + 1 ) ) ) ; }  public static void main ( String [ ] args ) {  int n = scan . nextInt ( ) ; int a = scan . nextInt ( ) ; int b = scan . nextInt ( ) ;  solve ( n , a , b ) ; } }
import java . util . Scanner ;  public class problem79 {  public static void main ( String [ ] args ) {
 import java . util . * ;   public class Practise { 
class GFG { static int totEdge ( int n ) { int result = 0 ; result = ( n * ( n - 1 ) ) / 2 ; return result ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( totEdge ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . * ;  public class Absolutezero {   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int sum = 0 ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int n1 = sc . nextInt ( ) ; list . add ( n1 ) ; sum += n1 ; } int u1 = ( int ) Math . round ( ( double ) sum / n ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int needed = ( n * y ) / 100 ; if ( ( n * y ) % 100 != 0 ) needed ++ ; if ( needed - w < 0 ) System . out . println ( 0 ) ; else System . out . println ( needed - w ) ; } }
import java . util . * ;  public class CodeForces710B { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; Integer [ ] a = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; }  Arrays . sort ( a ) ; System . out . println ( n % 2 == 0 ? a [ n / 2 - 1 ] : a [ n / 2 ] ) ;  } }
import java . util . * ; public class KamazingNumbers {  public static void main ( String [ ] args ) {
class GFG { public static int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return ( int ) Math . floor ( Math . log10 ( Math . abs ( a ) ) + Math . log10 ( Math . abs ( b ) ) ) + 1 ; } public static void main ( String [ ] args ) { int a = 33 ; int b = - 24 ; System . out . print ( countDigits ( a , b ) ) ; } }
public final class p004 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p004 ( ) . run ( ) ) ; } public String run ( ) { int maxPalin = - 1 ; for ( int i = 100 ; i < 1000 ; i ++ ) { for ( int j = 100 ; j < 1000 ; j ++ ) { int prod = i * j ; if ( Library . isPalindrome ( prod ) && prod > maxPalin ) maxPalin = prod ; } } return Integer . toString ( maxPalin ) ; } }
import java . util . * ; class GFG { static int sumPairs ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { sum += ( arr [ i ] + arr [ j ] ) ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int n = arr . length ; System . out . println ( sumPairs ( arr , n ) ) ; } }
import java . io . * ; class GFG { static int countDivisibles ( int A , int B , int M ) { if ( A % M == 0 ) return ( B / M ) - ( A / M ) + 1 ; return ( B / M ) - ( A / M ) ; } public static void main ( String [ ] args ) { int A = 30 , B = 100 , M = 30 ; System . out . println ( countDivisibles ( A , B , M ) ) ; } }
import java . util . * ; public class Sol { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) , m = s . nextInt ( ) , t = m ; for ( int i = 0 ; i < t ; i ++ ) { System . out . print ( n / m + " " ) ; n -= n / m ; -- m ; } } }
import java . io . * ; class GFG { static float findArea ( float a ) { float area ; area = ( float ) ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqrt ( 5 ) ) ) ) * a * a ) / 4 ; return area ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( "Area of Pentagon: " + findArea ( a ) ) ; } }
import java . util . * ;  public class Solve {  static Scanner scan = new Scanner ( System . in ) ;   public static void solve ( int a ) {  System . out . println ( Integer . bitCount ( a ) ) ; }  public static void main ( String [ ] args ) {  int a = scan . nextInt ( ) ;  solve ( a ) ;  } }
import java . io . * ; class GFG { static long fifthPowerSum ( int n ) { long sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + ( i * i * i * i * i ) ; return sum ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( fifthPowerSum ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; boolean flag = false ; int res1 = 0 ; int res2 = 0 ; for ( int i = 2 ; i <= n / 2 ; i ++ ) { if ( factors ( i , n - i ) ) { flag = true ; res1 = i ; res2 = n - i ; } } if ( ! flag ) pw . println ( 1 + " " + ( n - 1 ) ) ; else pw . println ( res1 + " " + res2 ) ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import javax . swing . plaf . IconUIResource ; import java . io . * ; import java . lang . ref . SoftReference ; import java . math . BigInteger ; import java . nio . file . LinkOption ; import java . util . * ;
class CkeckSorted { static int arraySortedOrNot ( int arr [ ] , int n ) { if ( n == 1 || n == 0 ) return 1 ; if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ; return arraySortedOrNot ( arr , n - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = arr . length ; if ( arraySortedOrNot ( arr , n ) != 0 ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } }
class GFG { static boolean isAMultipleOf4 ( int n ) { if ( ( n & 3 ) == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 16 ; System . out . println ( isAMultipleOf4 ( n ) ? "Yes" : "No" ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ;
class GFG { static int sum ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 , n = 2 ; System . out . println ( sum ( m , n ) ) ; } }
import java . io . * ; class TurnOff { static int turnOffK ( int n , int k ) { if ( k <= 0 ) return n ; return ( n & ~ ( 1 << ( k - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( turnOffK ( n , k ) ) ; } }
class GFG { public boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return ( count > 1 ) ; } public static void main ( String [ ] args ) { GFG g = new GFG ( ) ; int l = 4 , r = 12 ; int k = 5 ; if ( g . Check_is_possible ( l , r , k ) ) { System . out . println ( "YES" ) ; } else { System . out . println ( "NO" ) ; } } }
class Solution { public ListNode reverseList ( ListNode head ) { ListNode newHead = null ; while ( head != null ) { ListNode next = head . next ; head . next = newHead ; newHead = head ; head = next ; } return newHead ; } }
class GfG { static int findMinSum ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] * ( n - i ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 8 } ; int n = arr . length ; System . out . println ( findMinSum ( arr , n ) ) ; } }
import java . util . Scanner ;  public class B1436 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int T = in . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int N = in . nextInt ( ) ;
import java . util . * ; public class BeltedRooms {  public static void main ( String [ ] args ) {
import java . io . * ; class GFG { static double getProbability ( double p , double q ) { p /= 100 ; q /= 100 ; double probability = ( p * p + q * q ) / ( p + q ) ; return probability ; } public static void main ( String [ ] args ) { double p , q ; p = 80 ; q = 40 ; System . out . println ( getProbability ( p , q ) ) ; } }
import java . util . * ;  public class Q4 {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Absolutezero { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] s1 = s . split ( ":" ) ; String [ ] t1 = t . split ( ":" ) ; int h1 = Integer . parseInt ( s1 [ 0 ] ) ; int m1 = Integer . parseInt ( s1 [ 1 ] ) ;  int h2 = Integer . parseInt ( t1 [ 0 ] ) ; int m2 = Integer . parseInt ( t1 [ 1 ] ) ; 
import java . util . Scanner ;  public class A1348 { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int index = n / 2 ; int sum = ( int ) ( 2 * ( Math . pow ( 2 , index ) - 1 ) ) ; System . out . println ( sum ) ; } } }
class GFG { static int centeredSquare_number ( int N ) { float n = ( 9 + ( float ) Math . sqrt ( 36 * N + 45 ) ) / 18 ; if ( n - ( int ) n == 0 ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int i = 13 ; System . out . println ( centeredSquare_number ( i ) ) ; } }
import java . util . * ; public class functions { public static void main ( String [ ] args ) { int t ; String n ; Scanner sc = new Scanner ( System . in ) ;  t = sc . nextInt ( ) ;  while ( t -- > 0 ) { n = sc . next ( ) ;  System . out . println ( n . length ( ) ) ; } } }
 import javax . swing . plaf . IconUIResource ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class codeforces { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . Scanner ;  public class gigatower { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int i = 0 ; for ( i = a + 1 ; ; i ++ ) {
import java . util . * ; import java . io . * ; public class A { static FastReader in = new FastReader ( ) ; static final Random random = new Random ( ) ; static long mod = 1000000007L ; static HashMap < Integer , Integer > map = new HashMap < > ( ) ;  public static void main ( String args [ ] ) throws IOException { int t = 1 ;
import java . util . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ;  int n = s . nextInt ( ) ; int min = 101 ; int min2 = 101 ;  for ( int i = 0 ; i < n ; i ++ ) { int x = s . nextInt ( ) ; if ( min > x ) { min2 = min ; min = x ; } else if ( min != x && x < min2 ) { min2 = x ; } }  System . out . println ( min2 == 101 ? "NO" : min2 ) ;  s . close ( ) ; } }
class GFG { static void ans ( int n ) { if ( n == 1 ) System . out . println ( "1" ) ; else System . out . println ( "0" ) ; } public static void main ( String [ ] args ) { int n = 2 ; ans ( n ) ; } }
import java . awt . * ; import java . io . * ; import java . util . * ;  public class AA implements Runnable {  public void run ( ) { InputReader sc = new InputReader ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int i = 0 , j = 0 , k = 0 ; int t = 0 ;
import java . util . Scanner ;  public class NewMain4 {  public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; public class kuchBhi { public static void main ( String [ ] args ) throws Throwable {
public class GFG { static int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ) ; } static void findRatio ( int m , int n ) { int Am = m - 5 , An = n - 5 ; int numerator = Am / GCD ( Am , An ) ; int denominator = An / GCD ( Am , An ) ; System . out . println ( numerator + "/" + denominator ) ; } public static void main ( String args [ ] ) { int m = 10 , n = 20 ; findRatio ( m , n ) ; } }
class GFG { static int spiralDiaSum ( int n ) { if ( n == 1 ) return 1 ; return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . print ( spiralDiaSum ( n ) ) ; } }
 import javax . swing . plaf . IconUIResource ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . * ;  public class codeforces { static int M = 1_000_000_007 ; static int INF = Integer . MAX_VALUE ; static final FastScanner fs = new FastScanner ( ) ; 
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static FileWriter fw ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int oo = Integer . MAX_VALUE ;
class GFG { static int xorPairSum ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum ^ ar [ i ] ; return 2 * sum ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 2 , 3 } ; int n = arr . length ; System . out . println ( xorPairSum ( arr , n ) ) ; } }
class GfG { static int findMinSum ( int arr [ ] , int n ) { int occ = n - 1 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] * ( int ) Math . pow ( 2 , occ ) ; occ -- ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 } ; int n = arr . length ; System . out . println ( findMinSum ( arr , n ) ) ; } }
import java . util . * ;  public class questionCF { public static void main ( String [ ] args ) {  Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i <= n ; i ++ ) sb . append ( i ) ; System . out . println ( sb . charAt ( n - 1 ) ) ; } }
class Test { static int firstDigit ( int x ) { while ( x >= 10 ) x = x / 10 ; return x ; } public static void main ( String args [ ] ) { System . out . println ( firstDigit ( 12345 ) ) ; System . out . println ( firstDigit ( 5432 ) ) ; } }
class GFG { static int CountPairs ( int n ) { int k = n ; int imin = 1 ; int ans = 0 ; while ( imin <= n ) { int imax = n / k ; ans += k * ( imax - imin + 1 ) ; imin = imax + 1 ; k = n / imin ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( CountPairs ( 1 ) ) ; System . out . println ( CountPairs ( 2 ) ) ; System . out . println ( CountPairs ( 3 ) ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { static int evenSum ( int n ) { return ( n * ( n + 1 ) ) ; } public static void main ( String argc [ ] ) { int n = 20 ; System . out . println ( "Sum of first " + n + " Even numbers is: " + evenSum ( n ) ) ; } }
public class GFG { public static void main ( String args [ ] ) { int n = 3 ; int a [ ] = { 1 , 2 , 3 } ; int i = 0 ; long sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } long x = sum / n ; if ( x * n == sum ) System . out . println ( x ) ; else System . out . println ( "-1" ) ; } }
import java . lang . * ; import java . util . * ; class GFG { static int countConsecutive ( int n ) { String s = Integer . toString ( n ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) count ++ ; return count ; } public static void main ( String args [ ] ) { int n = 44522255 ; System . out . println ( countConsecutive ( n ) ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Scanner ; import java . util . jar . JarOutputStream ;  public class Practise {   public static void main ( String [ ] args ) {
class GFG { static float areaOfKite ( int d1 , int d2 ) { float area = ( d1 * d2 ) / 2 ; return area ; } public static void main ( String [ ] args ) { int d1 = 4 , d2 = 6 ; System . out . println ( "Area of Kite = " + areaOfKite ( d1 , d2 ) ) ; } }
import java . util . * ;  public class CodeForces628A { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int b = input . nextInt ( ) ; int p = input . nextInt ( ) ; int ans = 0 ; int m = n ; while ( n > 1 ) { int k = 1 ; while ( k * 2 <= n ) { k *= 2 ; } n -= k / 2 ; ans += ( k / 2 ) * ( b * 2 ) + k / 2 ; }  System . out . println ( ans + " " + ( m * p ) ) ;  } }
import java . util . * ;  public class Check2 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int max = Integer . MIN_VALUE ; int [ ] ar = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ar [ i ] = sc . nextInt ( ) ; max = Math . max ( ar [ i ] , max ) ; } System . out . println ( max ) ;
 import java . io . * ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . math . RoundingMode ; import java . util . * ; import java . util . concurrent . LinkedBlockingDeque ;  import java . util . ArrayList ; import java . util . HashMap ; import java . util . LinkedList ;  
import java . util . Scanner ;  public class Main { public static void main ( String [ ] args ) { Scanner x = new Scanner ( System . in ) ; int n = x . nextInt ( ) ; int a = x . nextInt ( ) ; int b = x . nextInt ( ) ; int y = ( ( a - 1 + b ) % n + n ) % n + 1 ; System . out . println ( y ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . io . * ; public class GFG { static float AvgofSquareN ( int n ) { float sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } static public void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }
import java . util . * ; class GFG { static int get_permutation ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result += Math . abs ( arr [ i ] - ( i + 1 ) ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 2 , 3 , 4 , 1 , 6 , 8 , 9 } ; int n = arr . length ; System . out . print ( get_permutation ( arr , n ) ) ; } }
class Solution { public int maximum69Number ( int num ) { return Integer . valueOf ( String . valueOf ( num ) . replaceFirst ( "6" , "9" ) ) ; } }
  import java . util . Arrays ; import java . util . HashSet ; import java . util . Scanner ; import java . util . Set ;  public class Javaweb {  public static void main ( String [ ] args ) {
class GFG { static int countWays ( int n , int arr [ ] , int len ) { if ( n == 0 ) return 1 ; int no_ways = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( n - arr [ i ] >= 0 ) { no_ways += countWays ( n - arr [ i ] , arr , len ) ; } } return no_ways ; } public static void main ( String args [ ] ) { int arr [ ] = { 1 , 3 , 5 } ; int len = arr . length ; ; int n = 5 ; System . out . println ( countWays ( n , arr , len ) ) ; } }
class GFG { static void calcSum ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i <= n - k ; i ++ ) { int sum = 0 ; for ( int j = i ; j < k + i ; j ++ ) sum += arr [ j ] ; System . out . print ( sum + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; int k = 3 ; calcSum ( arr , n , k ) ; } }
import java . io . * ; import java . math . * ; import java . security . * ; import java . text . * ; import java . time . LocalTime ; import java . util . * ; import java . util . concurrent . * ; import java . util . regex . * ;   public class D {   public static void main ( String [ ] args ) { FastScanner scan = new FastScanner ( ) ;
import java . util . HashMap ; import java . util . Scanner ;  public class Problem63 {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; String s [ ] = scan . next ( ) . split ( ":" ) ; int h = Integer . parseInt ( s [ 0 ] ) ; int m = Integer . parseInt ( s [ 1 ] ) ; int nm = ( 6 * m ) ; double nh = ( 30 * h ) % 360 ; nh += 30 * m / 60.00 ; System . out . println ( nh + " " + nm ) ; } }
import java . util . * ;  public class cf180 { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int i = 0 ; String s = sc . next ( ) ; int f [ ] = new int [ 26 ] ; for ( i = 0 ; i < n ; i ++ ) { char ch = s . charAt ( i ) ; f [ ch - 'a' ] ++ ; } long ans = 0 ;
import java . util . * ; import java . util . Scanner ; import java . io . * ; import javax . lang . model . util . ElementScanner6 ; import static java . lang . System . out ;   public class B616 {  public static void main ( String args [ ] ) {  FastReader in = new FastReader ( ) ; PrintWriter pr = new PrintWriter ( new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ) ; int tc = 1 ;
import java . io . BufferedOutputStream ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ;
import java . util . * ; class GFG { static int countSquares ( int m , int n ) { if ( n < m ) { int temp = m ; m = n ; n = temp ; } return n * ( n + 1 ) * ( 3 * m - n + 1 ) / 6 ; } public static void main ( String [ ] args ) { int m = 4 ; int n = 3 ; System . out . print ( "Count of squares is " + countSquares ( m , n ) ) ; } }
import java . util . * ; public class NetworkConfiguration {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - k ] ) ; }  }
import java . io . * ; import java . util . * ;  public class A1008 { public static void main ( String [ ] args ) { InputStream inputReader = System . in ; OutputStream outputReader = System . out ; InputReader in = new InputReader ( inputReader ) ;
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . util . Scanner ;  public class Teste { public static void main ( String args [ ] ) {
import java . util . Scanner ;  public class PhotoString { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ;  System . out . println ( 26 + 25 * scan . nextLine ( ) . length ( ) ) ; } }
import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ;  public class Problem66 {  public static void main ( String [ ] args ) {
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class c580a {
class GFG { static double PI = 3.14 ; static double find_area ( int r , int d ) { double R = d / PI ; R += Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; double area = PI * Math . pow ( R , 2 ) ; return area ; } public static void main ( String [ ] args ) { int r = 4 , d = 5 ; System . out . println ( find_area ( r , d ) ) ; } }
import java . io . * ; import java . util . HashSet ; import java . util . StringTokenizer ;
import java . util . Scanner ; import java . util . Arrays ; import java . util . Vector ; import java . util . Collections ;   public class Problem_Solving1 { public static void main ( String [ ] args ) {
 import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; public class er10a {
import java . util . * ; class solution { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; } public static void main ( String arr [ ] ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class toy_army { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; System . out . println ( n + n / 2 ) ; } }
 import java . util . Scanner ; import java . util . Arrays ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int w1 , w2 , h1 , h2 ; w1 = sc . nextInt ( ) ; h1 = sc . nextInt ( ) ; w2 = sc . nextInt ( ) ; h2 = sc . nextInt ( ) ; System . out . println ( 2 * ( w1 + h1 + h2 ) + 4 ) ; } catch ( Exception e ) { } } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . * ; import java . util . jar . JarOutputStream ;  public class Practise {  public static int [ ] [ ] dp ; public static void main ( String [ ] args ) {
import java . io . * ; import java . util . * ; class GFG { static long fourthPowerSum ( int n ) { return ( ( 6 * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ) / 30 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . util . Scanner ;  public class CuttingBanner {  public static void main ( String [ ] args ) { System . out . println ( helper ( ) ) ; } public static String helper ( ) { Scanner in = new Scanner ( System . in ) ; String s = in . next ( ) ; int length = s . length ( ) ; if ( length < 10 ) return "NO" ; String firstTen = s . substring ( 0 , 10 ) ; String lastTen = s . substring ( length - 10 , length ) ;
import java . util . Arrays ; import java . util . Scanner ;  public class problem109 {  public static void main ( String [ ] args ) {
import java . util . * ;  public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int a ; int sum = 0 ; if ( x > y ) { sum += y ; a = x - y ; } else { sum += x ; a = y - x ; } if ( a <= z ) { sum = sum + ( a + z ) / 2 ; } else { sum = sum + z ; } sum *= 2 ; System . out . println ( sum ) ; } }
class solution { static int countWords ( String str ) { int count = 1 ; for ( int i = 1 ; i < str . length ( ) - 1 ; i ++ ) { if ( str . charAt ( i ) >= 65 && str . charAt ( i ) <= 90 ) count ++ ; } return count ; } public static void main ( String args [ ] ) { String str = "geeksForGeeks" ; System . out . print ( countWords ( str ) ) ; } }
import java . io . * ; import java . util . * ; import javax . print . attribute . standard . Finishings ;  import java . math . * ;  public class Equality { static final Random random = new Random ( ) ; static PrintWriter out = new PrintWriter ( ( System . out ) ) ; static Reader sc = new Reader ( ) ;  public static void main ( String args [ ] ) throws IOException {
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Comparator ; import java . util . List ;  public class Main {  IIO io ;  Main ( IIO io ) { this . io = io ; }  public static void main ( String [ ] args ) throws IOException {
import java . util . Scanner ;   public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int i ; for ( i = 1 ; i <= n ; i ++ ) { if ( i % m == 0 ) { n ++ ; } } System . out . println ( n ) ; } }
class Solution { public int [ ] runningSum ( int [ ] nums ) { if ( nums . length <= 1 ) return nums ; for ( int i = 1 ; i < nums . length ; i ++ ) nums [ i ] += nums [ i - 1 ] ; return nums ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; int k = s . nextInt ( ) ; if ( k == 0 || k == n ) System . out . print ( "0 " ) ; else System . out . print ( "1 " ) ; if ( n - ( 3 * k ) >= 0 ) System . out . print ( 2 * k ) ; else System . out . print ( n - k ) ; } }
import java . util . * ; class GFG { static int cntSubsets ( int [ ] arr , int n ) { int max = ( int ) Math . pow ( 2 , n ) ; int result = 0 ; for ( int i = 0 ; i < max ; i ++ ) { int counter = i ; if ( ( counter & ( counter > > 1 ) ) > 0 ) continue ; result ++ ; } return result ; } static public void main ( String [ ] arg ) { int arr [ ] = { 3 , 5 , 7 } ; int n = arr . length ; System . out . println ( cntSubsets ( arr , n ) ) ; } }
import java . util . Scanner ;  public class problem54 {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { public static int calculate ( int ar [ ] , int size ) { int count = 0 ; for ( int i = 0 ; i < size ; i ++ ) if ( ar [ i ] % 2 == 0 && ar [ i ] != 0 && ar [ i ] != 2 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 4 , 6 } ; int size = a . length ; System . out . print ( calculate ( a , size ) ) ; } }
import java . io . * ; import java . util . * ;  public class A {  public static void main ( String [ ] args ) throws FileNotFoundException { FastScanner fs = new FastScanner ( ) ; FastOutput fo = new FastOutput ( ) ; long initial_time = System . currentTimeMillis ( ) ; int testcases = fs . nextInt ( ) ; for ( int tt = 0 ; tt < testcases ; tt ++ ) {
  import java . util . Scanner ; import java . util . ArrayList ;  public class Main { public static void main ( String [ ] args ) { Scanner puttingvaluesinside = new Scanner ( System . in ) ; int n = puttingvaluesinside . nextInt ( ) ; solve2 ( n ) ;
import java . io . * ; import java . util . * ;  public class GFG { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;
import java . lang . * ; class GFG { static int countNumbers ( int n ) { int k = 0 ; int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) count += ( int ) ( Math . pow ( 2 , k ) ) ; k += 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . io . * ; import java . util . ArrayList ; import java . util . Collections ; import java . util . StringTokenizer ;
import java . util . Scanner ;  public class MahmoudEhabMEX { public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) , x = in . nextInt ( ) , i , j = 0 , a [ ] = new int [ 101 ] , c = 0 ;  for ( i = 0 ; i < n ; i ++ ) a [ in . nextInt ( ) ] ++ ; in . close ( ) ;  for ( i = 0 ; i < x ; i ++ ) c += a [ i ] ; System . out . println ( a [ x ] == 1 ? x - c + 1 : x - c ) ; } }
import java . io . * ; import java . util . * ;
class GFG { static int finalNum ( int arr [ ] , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { result = __gcd ( result , arr [ i ] ) ; } return result ; } static int __gcd ( int a , int b ) { return b == 0 ? a : __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 6 , 36 } ; int n = arr . length ; System . out . print ( finalNum ( arr , n ) ) ; } }
import java . io . * ; import java . util . * ;  public class C {  public static void main ( String [ ] args ) throws IOException { BufferedReader ob = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( ob . readLine ( ) ) ; n = ( int ) Math . pow ( 2 , n + 1 ) ;
import java . io . * ; class GFG { static int sum_series ( int n ) { int nSquare = n * n ; return nSquare * ( nSquare - 1 ) / 4 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum_series ( n ) ) ; } }
import java . util . * ; public class MashmokhandLights {  public static void main ( String [ ] args ) {
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int ans = 0 ; int ele = sc . nextInt ( ) ; int r = ele % 10 ; ans = ( r - 1 ) * 10 ; int v = 0 ; while ( ele % 10 > 0 ) { v ++ ; ele = ele / 10 ; } ans = ans + ( v * ( v + 1 ) ) / 2 ; System . out . println ( ans ) ; } } }
class Gfg1 { static int Log2n ( int n ) { return ( n > 1 ) ? 1 + Log2n ( n / 2 ) : 0 ; } public static void main ( String args [ ] ) { int n = 32 ; System . out . println ( Log2n ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int countA = 0 ; int countB = 0 ; int n = sc . nextInt ( ) ; String a = sc . next ( ) ; String b = "" ; countA ++ ; while ( n -- > 1 ) { String y = sc . next ( ) ; if ( y . equals ( a ) ) { countA ++ ; } else { b = y ; countB ++ ; } } System . out . println ( countA > countB ? a : b ) ; } }
class GFG { static char getChar ( String str ) { int sum = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { sum += ( str . charAt ( i ) - 'a' + 1 ) ; } if ( sum % 26 == 0 ) return 'z' ; else { sum = sum % 26 ; return ( char ) ( 'a' + sum - 1 ) ; } } public static void main ( String [ ] args ) { String str = "gfg" ; System . out . println ( getChar ( str ) ) ; } }
class PellNumber { public static int pell ( int n ) { if ( n <= 2 ) return n ; int a = 1 ; int b = 2 ; int c ; for ( int i = 3 ; i <= n ; i ++ ) { c = 2 * b + a ; a = b ; b = c ; } return b ; } public static void main ( String args [ ] ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } }
class GFG { static void mul_table ( int N , int i ) { if ( i > 10 ) return ; System . out . println ( N + " * " + i + " = " + N * i ) ; mul_table ( N , i + 1 ) ; } public static void main ( String [ ] args ) { int N = 8 ; mul_table ( N , 1 ) ; } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . Scanner ; public class GymContest { static int [ ] [ ] mem ; public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int n = s . nextInt ( ) ; mem = new int [ n ] [ 3 ] ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = s . nextInt ( ) ; System . out . println ( dp ( arr , 0 , 0 ) ) ;
import java . util . Scanner ;  public class LevkoandTable {  public static void main ( String args [ ] ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int k = scan . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { System . out . print ( k + " " ) ; } else { System . out . print ( 0 + " " ) ; } } System . out . println ( ) ; } } }
public class GFG { static int findLargestDivisor ( int n ) { for ( int i = 2 ; i < Math . sqrt ( n ) + 1 ; i ++ ) { while ( n % ( i * i ) == 0 ) { n = n / i ; } } return n ; } public static void main ( String args [ ] ) { int n = 12 ; System . out . println ( findLargestDivisor ( n ) ) ; n = 97 ; System . out . println ( findLargestDivisor ( n ) ) ; } }
class GFG { public static int findPosition ( int k , int n ) { long f1 = 0 , f2 = 1 , f3 ; int i = 2 ; while ( i != 0 ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) { return n * i ; } i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . print ( "Position of n'th multiple" + " of k in Fibonacci Series is " ) ; System . out . println ( findPosition ( k , n ) ) ; } }
import java . util . * ;  public class EasterEggs {  public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class B909 {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int N = in . nextInt ( ) ; int answer = ( ( N + 2 ) / 2 ) * ( ( N + 1 ) / 2 ) ; System . out . println ( answer ) ; }  }
import java . util . * ;  import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { int n = scanner . nextInt ( ) ; int [ ] [ ] array = new int [ n ] [ n ] ; for ( int i = 0 ; i < array . length ; i ++ ) { for ( int j = 0 ; j < array [ 0 ] . length ; j ++ ) { array [ i ] [ j ] = scanner . nextInt ( ) ; } }
import java . util . * ; import java . lang . * ; public class GfG { public static int find ( int n , int k ) { if ( n + 1 >= k ) return ( k - 1 ) ; else return ( 2 * n + 1 - k ) ; } public static void main ( String argc [ ] ) { int n = 4 , k = 7 ; int freq = find ( n , k ) ; if ( freq < 0 ) System . out . print ( " element" + " not exist \n " ) ; else System . out . print ( " Frequency" + " of " + k + " is " + freq + "\n" ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; 
import java . util . Scanner ;  public class PAC { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int td ; if ( m == 2 ) td = 28 ; else if ( m == 4 || m == 6 || m == 9 || m == 11 ) td = 30 ; else td = 31 ; td += d - 1 ; System . out . println ( ( td + 6 ) / 7 ) ; sc . close ( ) ; } }
import java . util . Scanner ;  public class Maloda {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int a [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = in . nextInt ( ) ; } String s = in . next ( ) ; int t = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { t += a [ Integer . parseInt ( String . valueOf ( s . charAt ( i ) ) ) - 1 ] ; } System . out . println ( t ) ; } }
import java . io . * ; import java . util . * ;  public class Main {   public static void main ( String [ ] args ) throws IOException , InterruptedException { int n = sc . nextInt ( ) ; Pair [ ] time = new Pair [ n ] ; for ( int i = 0 ; i < n ; i ++ ) time [ i ] = new Pair ( sc . nextInt ( ) , sc . nextInt ( ) ) ; pairSort ( time ) ;
import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . List ; import java . util . Scanner ; import java . util . stream . Collectors ; public class _p001075A { static public void main ( final String [ ] args ) throws IOException { p001075A . _main ( args ) ; }
import java . util . PriorityQueue ; import java . util . Scanner ;  public class Airport { 
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
  import static java . lang . Math . abs ; import java . util . Scanner ;  public class Codeforces1 {  public static void main ( String [ ] args ) {  Scanner in = new Scanner ( System . in ) ; 
import java . io . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; 
class GFG { static final int MOD = 1000000007 ; static int product ( int ar [ ] , int n ) { int result = 1 ; for ( int i = 0 ; i < n ; i ++ ) result = ( result * ar [ i ] ) % MOD ; return result ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = ar . length ; System . out . printf ( "%d" , product ( ar , n ) ) ; } }
import java . util . Scanner ;  public class JavaApplication1 {   public static void main ( String [ ] args ) { Scanner read = new Scanner ( System . in ) ; int n , k , x , f , t = 0 , j ; n = read . nextInt ( ) ; k = read . nextInt ( ) ; x = read . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { f = read . nextInt ( ) ; if ( i <= n - k ) { t += f ; } } j = t + k * x ; System . out . println ( j ) ; } }
import java . util . * ; public class Main { public static void main ( String args [ ] ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int x = in . nextInt ( ) ; if ( x == 1 ) { if ( i == 0 || i == n - 1 || j == 0 || j == m - 1 ) ans = 2 ; else if ( ans != 2 ) ans = 4 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class contest18 { static Scanner scn = new Scanner ( System . in ) ; public static void main ( String [ ] args ) {
import java . util . Scanner ;  public class Main {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int n = in . nextInt ( ) ; if ( n % 2 == 0 ) System . out . println ( "Mahmoud" ) ; else System . out . println ( "Ehab" ) ;   }
import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . util . LinkedList ; import java . util . List ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . TreeSet ;  public class Main extends Thread { 
class GFG { static float angleOncirCumference ( float z ) { return ( z / 2 ) ; } public static void main ( String [ ] args ) { float angle = 65 ; float z = angleOncirCumference ( angle ) ; System . out . println ( "The angle is " + z + " degrees" ) ; } }
class GFG { static long nextFibonacci ( int n ) { double a = n * ( 1 + Math . sqrt ( 5 ) ) / 2.0 ; return Math . round ( a ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nextFibonacci ( n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . Scanner ; import java . util . StringTokenizer ;   public class Main {    public static void main ( String [ ] args ) {
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; while ( in . hasNext ( ) ) { int t = in . nextInt ( ) ; for ( int i = 1 ; i <= t ; i ++ ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( b < a * 2 ) { System . out . println ( "-1" + " " + "-1" ) ; } else { System . out . println ( a + " " + 2 * a ) ; } } } } }
class Subset_sum { static int countStrings ( int n ) { int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; a [ 0 ] = b [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = a [ i - 1 ] + b [ i - 1 ] ; b [ i ] = a [ i - 1 ] ; } return a [ n - 1 ] + b [ n - 1 ] ; } public static void main ( String args [ ] ) { System . out . println ( countStrings ( 3 ) ) ; } }
import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . Scanner ; import java . lang . Math ; public class Account { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;
class GFG { static int getFirstSetBitPos ( int n ) { return ( int ) ( Math . log ( n & - n ) / Math . log ( 2 ) ) + 1 ; } static int previousSmallerInteger ( int n ) { int pos = getFirstSetBitPos ( n ) ; return ( n & ~ ( 1 << ( pos - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 25 ; System . out . print ( "Previous smaller Integer =" + previousSmallerInteger ( n ) ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
class GFG { static long binomialCoeff ( int n , int k ) { long res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } static long catalan ( int n ) { long c = binomialCoeff ( 2 * n , n ) ; return c / ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( catalan ( n ) ) ; } }
public class GFG { public static int checkValidity ( int a , int b , int c ) { if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ; else return 1 ; } public static void main ( String args [ ] ) { int a = 7 , b = 10 , c = 5 ; if ( ( checkValidity ( a , b , c ) ) == 1 ) System . out . print ( "Valid" ) ; else System . out . print ( "Invalid" ) ; } }
import java . util . * ; class GFG { static int countSubSeq ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { count ++ ; } } return ( int ) ( Math . pow ( 2 , count ) - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 6 } ; int n = arr . length ; int k = 3 ; System . out . println ( countSubSeq ( arr , n , k ) ) ; } }
import java . io . * ; class GFG { static double sumOfSeries ( int n ) { return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . util . * ;  public class Practise {  static int [ ] [ ] dp ;   public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . io . * ; import java . util . * ; import java . math . * ; import java . awt . Point ; public class Main {
import java . io . BufferedReader ; import java . io . FileReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Scanner ; import java . util . StringTokenizer ; import java . util . * ; import java . io . * ; public class codeforces { static class Student { int x , y ;
class GFG { static StringBuilder findMaximumNum ( StringBuilder str , int n , int k ) { for ( int i = 0 ; i < n ; i ++ ) { if ( k < 1 ) break ; if ( str . charAt ( i ) != '9' ) { str . setCharAt ( i , '9' ) ; k -- ; } } return str ; } public static void main ( String [ ] args ) { StringBuilder str = new StringBuilder ( "569431" ) ; int n = str . length ( ) ; int k = 3 ; System . out . println ( findMaximumNum ( str , n , k ) ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; System . out . println ( ( n * k ) / 2 ) ; }  }
import java . io . * ; import java . util . Scanner ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; if ( System . getProperty ( "ONLINE_JUDGE" ) == null ) { try { System . setOut ( new PrintStream ( new FileOutputStream ( "output.txt" ) ) ) ; sc = new Scanner ( new File ( "input.txt" ) ) ; } catch ( Exception e ) { } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . util . StringTokenizer ;  public class WhereDoITurn {
class GFG { static int maxPartition ( String s ) { int n = s . length ( ) , P = 0 ; String current = "" , previous = "" ; for ( int i = 0 ; i < n ; i ++ ) { current += s . charAt ( i ) ; if ( ! current . equals ( previous ) ) { previous = current ; current = "" ; P ++ ; } } return P ; } public static void main ( String [ ] args ) { String s = "geeksforgeeks" ; int ans = maxPartition ( s ) ; System . out . println ( ans ) ; } }
class CountSubString { int countSubStr ( char str [ ] , int n ) { int m = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == '1' ) m ++ ; } return m * ( m - 1 ) / 2 ; } public static void main ( String [ ] args ) { CountSubString count = new CountSubString ( ) ; String string = "00100101" ; char str [ ] = string . toCharArray ( ) ; int n = str . length ; System . out . println ( count . countSubStr ( str , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Solution { static int t ; static int gcd ( int x , int y ) { if ( y == 0 ) return x ; t += x / y ; return gcd ( y , x % y ) ; } public static class Suffix implements Comparable < Suffix > { int index ; int rank ; int next ; public Suffix ( int ind , int r , int nr ) { index = ind ; rank = r ; next = nr ; }
import java . util . * ; public class P2 {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int c = 1 ; int k = 2 ; System . out . print ( 2 + " " ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { c ++ ; k += c ; if ( k % n == 0 ) { System . out . print ( n + " " ) ; } else System . out . print ( k % n + " " ) ; } } }
import java . util . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws IOException { FastScanner in = new FastScanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; new Main ( ) . run ( in , out ) ; out . close ( ) ; }  void run ( FastScanner in , PrintWriter out ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int mod = in . nextInt ( ) ; if ( mod <= b ) {
class Test { static int FirstDigit ( int arr [ ] , int n ) { double S = 0 ; for ( int i = 0 ; i < n ; i ++ ) S = S + Math . log10 ( arr [ i ] * 1.0 ) ; double fract_S = S - Math . floor ( S ) ; int ans = ( int ) Math . pow ( 10 , fract_S ) ; return ans ; } public static void main ( String args [ ] ) { int arr [ ] = { 5 , 8 , 3 , 7 } ; System . out . println ( FirstDigit ( arr , arr . length ) ) ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner sx = new Scanner ( System . in ) ; int n = sx . nextInt ( ) ; int i = 1 ; String s1 = sx . next ( ) ;
class GFG { static float Conversion ( float n ) { return ( n - 32.0f ) * 5.0f / 9.0f ; } public static void main ( String [ ] args ) { float n = 40 ; System . out . println ( Conversion ( n ) ) ; } }
public class Digits { static long firstkdigits ( int n , int k ) { long product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( int ) ( product / Math . pow ( 10 , k ) ) != 0 ) product = product / 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }
import java . util . Scanner ;  public class LearnFromMath { public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n == 2 ) { return true ; } for ( int i = 3 ; i < n ; i += 2 ) { if ( n % i == 0 ) { return false ; } } return true ; }  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int n = sc . nextInt ( ) ;  if ( n % 2 == 0 ) { int x = n / 2 ; int y = n / 2 ;
import java . io . * ; class GFG { static int pairORSum ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) ans += arr [ i ] ^ arr [ j ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 9 , 7 , 6 } ; int n = arr . length ; System . out . println ( pairORSum ( arr , arr . length ) ) ; } }
from math import gcdn = int ( input ( ) ) arr = map ( int , input ( ) . split ( ) ) arr = list ( map ( lambda x : x - 1 , arr ) )  res = 1f or i in range ( n ) : p , k = 0 , i for j in range ( n ) : k = arr [ k ] if k == i : p = j break if k != i : print ( - 1 ) exit ( ) p += 1 if p % 2 == 0 : p
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scan = new Scanner ( System . in ) ; int n = scan . nextInt ( ) ; int m = n ; int z = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 ) if ( Math . abs ( n / i - i ) < Math . abs ( m - z ) ) { m = i ; z = n / i ; } } if ( z > m ) { int temp = z ; z = m ; m = temp ; } System . out . println ( z + " " + m ) ;
import java . util . * ; class GFG { public static long minPerimeter ( int n ) { int l = ( int ) Math . sqrt ( n ) ; int sq = l * l ; if ( sq == n ) return l * 4 ; else { long row = n / l ; long perimeter = 2 * ( l + row ) ; if ( n % l != 0 ) perimeter += 2 ; return perimeter ; } } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( minPerimeter ( n ) ) ; } }
class GFG { static int checkArray ( int [ ] arr , int n ) { return ( ( arr [ 0 ] % 2 ) > 0 && ( arr [ n - 1 ] % 2 ) > 0 && ( n % 2 ) > 0 ) ? 1 : 0 ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( checkArray ( arr , n ) ) ; } }
import java . util . * ; class GFG { static boolean isPossible ( int x , int y ) { if ( ( x - y ) == 1 ) return false ; return true ; } public static void main ( String [ ] args ) { int x = 100 , y = 98 ; if ( isPossible ( x , y ) ) System . out . print ( "Yes" ) ; else System . out . print ( "No" ) ; } }
import java . io . * ; import java . util . * ;  public class Main { public static void main ( String [ ] args ) throws IOException {
import java . util . * ;   public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ;
import java . io . * ; import java . util . * ; public class f10 { static public void process ( double x , double y , int n ) { double max = 100001 ; int a = 0 , b = 0 ; for ( int den = 1 ; den <= n ; den ++ ) { double num = ( x / y ) * den ;
class Solution { public int reverse ( int x ) { if ( x == 0 ) return 0 ; long res = 0 ; while ( x != 0 ) { res = res * 10 + x % 10 ; if ( res > Integer . MAX_VALUE || res < Integer . MIN_VALUE ) return 0 ; x /= 10 ; } return ( int ) res ; } }
import java . math . BigInteger ; public final class p016 implements EulerSolution { public static void main ( String [ ] args ) { System . out . println ( new p016 ( ) . run ( ) ) ; } public String run ( ) { String temp = BigInteger . ONE . shiftLeft ( 1000 ) . toString ( ) ; int sum = 0 ; for ( int i = 0 ; i < temp . length ( ) ; i ++ ) sum += temp . charAt ( i ) - '0' ; return Integer . toString ( sum ) ; } }
import java . util . * ; import java . math . * ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; 
import java . util . Scanner ;  public class PuzzlePieces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 1 || m == 1 ) System . out . println ( "Yes" ) ; else if ( n == 2 && m == 2 ) System . out . println ( "Yes" ) ; else System . out . println ( "No" ) ; } } }
class GFG { static void findFactors ( int a , int b ) { int c ; c = a + b - 1 ; System . out . print ( c ) ; } public static void main ( String [ ] args ) { int a , b ; a = 13 ; b = 36 ; findFactors ( a , b ) ; } }
 import java . util . * ; import java . lang . * ; import java . io . * ;  public class Ideone { public static void main ( String [ ] args ) throws java . lang . Exception {
import java . util . * ; import java . io . * ; class GFG { static void findElements ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String args [ ] ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
import java . util . Scanner ;  public class Minutes_Before_the_Year {  public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ;  int n = in . nextInt ( ) ;  while ( n -- != 0 ) { System . out . println ( 1440 - ( in . nextInt ( ) * 60 + in . nextInt ( ) ) ) ; } } }
import java . util . * ; import java . io . * ; import java . math . BigInteger ; import java . text . * ; public class Main { static long mod = 1000_000_007 ; static long mod1 = 998244353 ; static boolean fileIO = false ; static boolean memory = true ; static FastScanner f ; static PrintWriter pw ; static double eps = ( double ) 1e-6 ; static int maxN = ( int ) 1e6 ;
class Solution { public int poorPigs ( int buckets , int minutesToDie , int minutesToTest ) { int n = minutesToTest / minutesToDie + 1 ; int pigs = 0 ; while ( Math . pow ( n , pigs ) < buckets ) pigs ++ ; return pigs ; } }
import java . util . * ; public class game23 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int c = 0 ; while ( n < x ) { if ( x % ( 3 * n ) == 0 ) { n *= 3 ; ++ c ; } else if ( x % ( 2 * n ) == 0 ) { n *= 2 ; ++ c ; } else { System . out . print ( - 1 ) ; return ; } } System . out . print ( c ) ; } }
import java . io . * ; class GFG { static int Circular ( int n ) { int Result = 1 ; while ( n > 0 ) { Result = Result * n ; n -- ; } return Result ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( Circular ( n - 1 ) ) ; } }
public class base_power { static int calculate ( int n , int power ) { int sum = 0 ; int bp = ( int ) Math . pow ( n , power ) ; while ( bp != 0 ) { int d = bp % 10 ; sum += d ; bp /= 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 5 ; int power = 4 ; System . out . println ( calculate ( n , power ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( "YES" ) ; for ( int i = 0 ; i < n ; i ++ ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; System . out . println ( ( 12 + 2 * ( x1 % 2 ) + ( y1 % 2 ) ) % 4 + 1 ) ; } } }
import java . util . * ;  public class Example { static int [ ] dp ;  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
class GFG { static void nDigitPerfectSquares ( int n ) { int smallest = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) ) , 2 ) ; System . out . print ( smallest + " " ) ; int largest = ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) ) - 1 , 2 ) ; System . out . print ( largest ) ; } public static void main ( String args [ ] ) { int n = 4 ; nDigitPerfectSquares ( n ) ; } }
import java . util . * ; class GFG { static int getRemainder ( int num , int divisor ) { while ( num >= divisor ) num -= divisor ; return num ; } public static void main ( String [ ] args ) { int num = 100 , divisor = 7 ; System . out . println ( getRemainder ( num , divisor ) ) ; } }
import java . util . * ; public class Swim3 { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long p = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; System . out . println ( Math . min ( ( a - p % a ) % a , Math . min ( ( b - p % b ) % b , ( c - p % c ) % c ) ) ) ; } } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws java . lang . Exception { int n , c = 0 , i , m , k ; String s ; Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; s = sc . next ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '8' ) { c ++ ; } } m = n / 11 ; k = m > c ? c : m ; System . out . println ( k ) ; } }
class Test { static boolean checkYear ( int year ) { return ( ( ( year % 4 == 0 ) && ( year % 100 != 0 ) ) || ( year % 400 == 0 ) ) ; } public static void main ( String [ ] args ) { int year = 2000 ; System . out . println ( checkYear ( 2000 ) ? "Leap Year" : "Not a Leap Year" ) ; } }
public class Solution { public String reverseWords ( String s ) { String words [ ] = s . split ( " " ) ; StringBuilder ans = new StringBuilder ( ) ; for ( String word : words ) ans . append ( new StringBuffer ( word ) . reverse ( ) . toString ( ) + " " ) ; return ans . toString ( ) . trim ( ) ; } }
import java . util . * ;  public class Main {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ;
import java . util . * ; public class JohnnyAndHobbies {  public static void main ( String [ ] args ) {
import java . util . * ; class GFG { static void count_unique ( HashSet < Integer > s , int n ) { if ( s . contains ( n ) ) return ; s . add ( n ) ; n += 1 ; while ( n % 10 == 0 ) { n = n / 10 ; } count_unique ( s , n ) ; } public static void main ( String [ ] args ) { int n = 10 ; HashSet < Integer > s = new HashSet < > ( ) ; count_unique ( s , n ) ; System . out . println ( s . size ( ) ) ; } }
import java . util . Scanner ; import java . lang . * ;  public class p339b_Xenia_and_ringroad { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ;  long n = input . nextInt ( ) ; int w = input . nextInt ( ) ;  long a = 0 ; long temp = 1 ; long time = 0 ; long count = 0 ;  for ( int i = 0 ; i < w ; i ++ ) { a = input . nextInt ( ) ; if ( a < temp ) { count ++ ; } temp = a ; } 
import java . util . * ; class GFG { static int N = 3 ; static void rotateMatrix ( int mat [ ] [ ] ) { for ( int i = N - 1 ; i >= 0 ; i -- ) { for ( int j = N - 1 ; j >= 0 ; j -- ) System . out . print ( mat [ i ] [ j ] + " " ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; rotateMatrix ( mat ) ; } }
import java . util . * ;  public class Solution { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; int t = s . nextInt ( ) ;  for ( int i = 0 ; i < t ; i ++ ) { int n = s . nextInt ( ) ; System . out . println ( ( n > 1 ) ? ( n - 2 ) : 0 ) ; }  s . close ( ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ;  public class FastIO { BufferedReader br ; StringTokenizer st ; public FastIO ( ) {
import java . io . * ; class Series { static int term ( int n ) { return n * ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( term ( n ) ) ; } }
class GFG { static long numbers ( int n ) { return ( long ) ( Math . pow ( 2 , n + 1 ) ) - 2 ; } public static void main ( String args [ ] ) { int n = 2 ; System . out . println ( numbers ( n ) ) ; } }
import java . io . * ; import java . util . * ; import java . math . * ; class GFG { static boolean pronic_check ( int n ) { int x = ( int ) ( Math . sqrt ( n ) ) ; if ( x * ( x + 1 ) == n ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 56 ; if ( pronic_check ( n ) == true ) System . out . println ( "YES" ) ; else System . out . println ( "NO" ) ; } }
import java . util . * ;  public class Solve {  static Scanner scan = new Scanner ( System . in ) ;  public static long solve ( long l , long r ) { if ( l == r ) { return l ; } return 2 ; }   public static void main ( String [ ] args ) {  long l = scan . nextLong ( ) ; long r = scan . nextLong ( ) ; System . out . println ( solve ( l , r ) ) ; } }
import java . io . * ; class GFG { static double sum ( int n ) { double i , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String args [ ] ) { int n = 5 ; System . out . printf ( "Sum is %f" , sum ( n ) ) ; } }
import java . util . * ; class GFG { static float trianglearea ( float l , float b ) { if ( l < 0 || b < 0 ) return - 1 ; float area = ( l * b ) / 2 ; return area ; } public static void main ( String args [ ] ) { float l = 5 , b = 4 ; System . out . println ( trianglearea ( l , b ) ) ; } }
import java . util . * ; public class soldier { public static void main ( String args [ ] ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int s = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { s = s + k * i ; } if ( s >= n ) System . out . println ( s - n ) ; else System . out . println ( 0 ) ; } }
import java . io . * ; import java . util . * ; public class Lvl3Taser {  public static void main ( String [ ] args ) throws IOException {
import java . util . * ;  public class questionCF {  public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;  int q = sc . nextInt ( ) ; while ( q -- > 0 ) { long n = sc . nextLong ( ) , a = sc . nextLong ( ) , b = sc . nextLong ( ) ; System . out . println ( Math . min ( b * ( n / 2 ) + a * ( n % 2 ) , a * n ) ) ; }  } }
class GFG { static int extraElement ( int A [ ] , int B [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 15 , 5 } ; int B [ ] = { 10 , 100 , 15 , 5 } ; int n = A . length ; System . out . println ( extraElement ( A , B , n ) ) ; } }
import java . io . * ; class GFG { static int countOddSquares ( int n , int m ) { return ( int ) Math . pow ( m , 0.5 ) - ( int ) Math . pow ( n - 1 , 0.5 ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 100 ; System . out . println ( "Count is " + ( ( m - n + 1 ) - countOddSquares ( n , m ) ) ) ; } }
import java . lang . * ; import java . util . * ; import java . util . stream . Collectors ; import java . io . * ;  public class Fridge {  static Set < Integer > set ; static long tmin ; static int [ ] ar ; static boolean [ ] visited ; public static void dfs ( HashMap [ ] adj , int u , long curcost ) { if ( set . contains ( u ) || curcost > tmin ) { if ( curcost < tmin ) { tmin = curcost ; } return ; } visited [ u ] = true ;
class GFG { static int countIndices ( int arr [ ] , int n ) { int cnt = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < arr [ i ] ) { max = arr [ i ] ; cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( countIndices ( arr , n ) ) ; } }
